{"version":3,"sources":["file:///D:/PA_2023/2D/FishIO/FishIO_Op6/assets/scripts/Controller/PlayerController.ts"],"names":["_decorator","BoxCollider2D","Component","Node","RigidBody2D","Vec2","Contact2DType","CircleCollider2D","Animation","Label","sp","TouchAreaController","Constants","AudioManager","Enemy","EnemiesController","ccclass","property","PlayerController","start","PlayerBody","node","getChildByName","Player_SpineDie","getComponent","Skeleton","Player_CircleCollider","Player_fakeMountCollide","Player_fakeMount","Player_Level","on","BEGIN_CONTACT","onBeginContact","onCircleBeginContact","selfCollider","otherCollider","contact","tag","isTouching","isAte","ironSource","SoundState","playSound","SoundTrack","eatSound","handleEatFishLv1","isLive","isLevelUp","handleEatAnimOfEnemy","die","spine","setAnimation","timeScale","scheduleOnce","isReplay","stop","stickPointUIOpacity","opacity","active","dieSound","play","other","score","move","isMove","targetPosition","positionTouch","direction","subtract","position","normalize","velocity","multiplyScalar","speed","rigidBody","linearVelocity","handleOffsetBoxCollide","setPosition","Player_Mouth","getPosition","update","dt","string","String","HandleAnglePlayer"],"mappings":"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","sourcesContent":["import { _decorator, BoxCollider2D, Component, Node, Collider2D, IPhysics2DContact, RigidBody2D, Vec2, Vec3, Contact2DType, CircleCollider2D, Animation, Label, log, sp } from 'cc';\nimport { TouchAreaController } from './TouchAreaController';\nimport { Constants } from '../Data/Constant';\nimport { AudioManager } from './AudioManager';\nimport Enemy from '../TypeScript/Enemy';\nimport EnemiesController from './EnemiesController';\nconst { ccclass, property } = _decorator;\n\n\n@ccclass('PlayerController')\nexport class PlayerController extends Component {\n    @property(EnemiesController)\n    EnemiesController: EnemiesController = null;\n    @property(TouchAreaController)\n    TouchAreaController: TouchAreaController = null;\n    @property(AudioManager)\n    AudioManager: AudioManager = null;\n\n    @property(RigidBody2D)\n    rigidBody: RigidBody2D = null;\n    @property(Node)\n    Player_Mouth: Node = null;\n    @property(Node)\n    Player_fakeMount: Node = null;\n\n    PlayerBody: Node = null;\n    Player_Level: Label = null;\n    Player_SpineDie: sp.Skeleton = null;\n    Player_CircleCollider: CircleCollider2D = null;\n    Player_MouthRigidBody: RigidBody2D = null;\n    Player_MouthCollider: BoxCollider2D = null;\n    Player_fakeMountCollide: BoxCollider2D = null;\n\n    isLive: Boolean = true;\n    isMove: Boolean = false;\n    isLevelUp: boolean = false;\n    targetPosition: Vec3 = null;\n    speed: number = 150;\n    distance: number = 40;\n\n\n    protected start(): void {\n        this.PlayerBody = this.node.getChildByName(\"Body\");\n        this.Player_SpineDie = this.node.getChildByName(\"Spine_Die\").getComponent(sp.Skeleton);\n        this.Player_CircleCollider = this.getComponent(CircleCollider2D);\n        this.Player_fakeMountCollide = this.Player_fakeMount.getComponent(BoxCollider2D);\n        this.Player_Level = this.node.getChildByName(\"Body\").getChildByName(\"Level\").getComponent(Label);\n\n        this.Player_fakeMountCollide.on(Contact2DType.BEGIN_CONTACT, this.onBeginContact, this);\n        this.Player_CircleCollider.on(Contact2DType.BEGIN_CONTACT, this.onCircleBeginContact, this);\n    }\n\n\n    private onBeginContact(selfCollider: Collider2D, otherCollider: Collider2D, contact: IPhysics2DContact) {\n        if (otherCollider.tag == 1 && Constants.isTouching && !otherCollider.getComponent(Enemy).isAte) {\n            if (Constants.ironSource.SoundState) {\n                this.AudioManager.playSound(Constants.SoundTrack.eatSound);\n            }\n            this.handleEatFishLv1(otherCollider);\n        }\n    }\n\n\n    private onCircleBeginContact(selfCollider: Collider2D, otherCollider: Collider2D, contact: IPhysics2DContact) {\n        if (otherCollider.tag == 2) {\n            if (this.isLive && !this.isLevelUp) {\n                this.isLive = false;\n                this.handleEatAnimOfEnemy(otherCollider);\n                this.die();\n            }\n        }\n    }\n    \n\n    private handleEatAnimOfEnemy(otherCollider: Collider2D): void {\n        let spine = otherCollider.node.getChildByName(\"Body\").getChildByName(\"Spine_Fish\").getComponent(sp.Skeleton);\n        spine.setAnimation(0, \"eat\", false);\n        spine.timeScale = 2;\n        \n        this.scheduleOnce(() => {\n            spine.setAnimation(0, \"idle\", true);\n        }, 0.5)\n    }\n\n    \n    private die(): void {\n        if (this.isLive && !Constants.isReplay) {\n            return;\n        }\n        \n        this.stop();\n        this.TouchAreaController.stickPointUIOpacity.opacity = 0;\n        this.scheduleOnce(() => {\n            this.PlayerBody.active = false;\n            this.Player_SpineDie.node.active = true;\n        }, 0.01)\n        Constants.isReplay = true;\n        \n        if (Constants.ironSource.SoundState) {\n            this.AudioManager.playSound(Constants.SoundTrack.dieSound);\n        }\n        \n        this.scheduleOnce(() => {\n            this.getComponent(Animation).play(\"Player_DieAnim\");\n        }, 1);\n    }\n\n\n    private handleEatFishLv1(other: Collider2D): void {\n        Constants.score += 5;\n        if (other.getComponent(Enemy).isLive) {\n            other.getComponent(Enemy).die();\n        }\n    }\n\n\n    public move(): void {\n        if (this.isMove && this.isLive) {\n            this.targetPosition = this.TouchAreaController.positionTouch;\n            const direction = this.targetPosition.subtract(this.node.position).normalize();\n\n            let velocity: any;\n            this.isLevelUp ? velocity = direction.multiplyScalar(this.speed) : velocity = direction.multiplyScalar(2.5)\n            this.rigidBody.linearVelocity = velocity;\n        }\n    }\n\n\n    public stop(): void {\n        this.rigidBody.linearVelocity = new Vec2(0, 0)\n    }\n\n\n    private handleOffsetBoxCollide(): void {\n        this.Player_fakeMount.setPosition(this.Player_Mouth.getPosition())\n    }\n\n\n    protected update(dt: number): void {\n        if (Constants.isTouching) {\n            this.Player_Level.string = String(Constants.score);\n            this.TouchAreaController.HandleAnglePlayer(this.PlayerBody);\n        }\n        this.handleOffsetBoxCollide();\n    }\n\n}\n\n"]}