{"version":3,"sources":["assets\\Script\\Controller\\TouchAreaController.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA,+CAA8C;AAC9C,uDAAkD;AAE5C,IAAA,KAAsB,EAAE,CAAC,UAAU,EAAlC,OAAO,aAAA,EAAE,QAAQ,cAAiB,CAAC;AAG1C;IAAiD,uCAAY;IAA7D;QAAA,qEA4CC;QAzCG,kBAAY,GAAiB,IAAI,CAAC;QAGlC,cAAQ,GAAY,IAAI,CAAC;QAGzB,UAAI,GAAY,IAAI,CAAC;QAErB,WAAK,GAAY,IAAI,CAAC;QAEtB,QAAQ;QACR,aAAO,GAAY,KAAK,CAAC;;IA8B7B,CAAC;IA3Ba,mCAAK,GAAf;QACI,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,WAAW,EAAE,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;QACvE,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,UAAU,EAAE,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;QACrE,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,SAAS,EAAE,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;QACnE,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,YAAY,EAAE,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;IAC1E,CAAC;IAGO,wCAAU,GAAlB;QACI,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;QACpB,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QACzB,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,EAAE,CAAC,SAAS,CAAC,CAAC,IAAI,EAAE,CAAC;QAC7C,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,qBAAS,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC;IAChE,CAAC;IAGO,uCAAS,GAAjB,UAAkB,CAAW;QACzB,IAAI,GAAG,GAAG,CAAC,CAAC,WAAW,EAAE,CAAC;QAC1B,IAAI,YAAY,GAAG,IAAI,CAAC,IAAI,CAAC,oBAAoB,CAAC,GAAG,CAAC,CAAC;QACvD,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,YAAY,CAAC,CAAC;IACzC,CAAC;IAGO,sCAAQ,GAAhB;QACI,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;QACrB,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,qBAAS,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC;IAChE,CAAC;IAxCD;QADC,QAAQ,CAAC,sBAAY,CAAC;6DACW;IAGlC;QADC,QAAQ,CAAC,EAAE,CAAC,IAAI,CAAC;yDACO;IAGzB;QADC,QAAQ,CAAC,EAAE,CAAC,IAAI,CAAC;qDACG;IAErB;QADC,QAAQ,CAAC,EAAE,CAAC,IAAI,CAAC;sDACI;IAXL,mBAAmB;QADvC,OAAO;OACa,mBAAmB,CA4CvC;IAAD,0BAAC;CA5CD,AA4CC,CA5CgD,EAAE,CAAC,SAAS,GA4C5D;kBA5CoB,mBAAmB","file":"","sourceRoot":"/","sourcesContent":["import { Constants } from \"../Data/constants\";\r\nimport AudioManager from \"../Plugin/AudioManager\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class TouchAreaController extends cc.Component {\r\n\r\n    @property(AudioManager)\r\n    AudioManager: AudioManager = null;\r\n\r\n    @property(cc.Node)\r\n    hideMask: cc.Node = null;\r\n\r\n    @property(cc.Node)\r\n    hand: cc.Node = null;\r\n    @property(cc.Node)\r\n    Point: cc.Node = null;\r\n\r\n    // state\r\n    isTouch: boolean = false;\r\n\r\n\r\n    protected start(): void {\r\n        this.hideMask.on(cc.Node.EventType.TOUCH_START, this.touchStart, this);\r\n        this.hideMask.on(cc.Node.EventType.TOUCH_MOVE, this.touchMove, this);\r\n        this.hideMask.on(cc.Node.EventType.TOUCH_END, this.touchEnd, this);\r\n        this.hideMask.on(cc.Node.EventType.TOUCH_CANCEL, this.touchEnd, this);\r\n    }\r\n\r\n\r\n    private touchStart(): void {\r\n        this.isTouch = true;\r\n        this.hand.active = false;\r\n        this.Point.getComponent(cc.Animation).stop();\r\n        this.AudioManager.playSound(Constants.SoundTrack.drawSound);\r\n    }\r\n\r\n\r\n    private touchMove(e: cc.Touch): void {\r\n        let pos = e.getLocation();\r\n        let convertedPos = this.node.convertToNodeSpaceAR(pos);\r\n        this.Point.setPosition(convertedPos);\r\n    }\r\n\r\n\r\n    private touchEnd(): void {\r\n        this.isTouch = false;\r\n        this.AudioManager.stopSound(Constants.SoundTrack.drawSound);\r\n    }\r\n}\r\n"]}