{"version":3,"sources":["assets\\Script\\Controller\\HandController.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA,yCAAwC;AACxC,+CAA8C;AAC9C,uCAAkC;AAE5B,IAAA,KAAwB,EAAE,CAAC,UAAU,EAAnC,OAAO,aAAA,EAAE,QAAQ,cAAkB,CAAC;AAG5C;IAA4C,kCAAY;IAAxD;QAAA,qEAgKC;QA9JC,YAAY;QAEZ,cAAQ,GAAY,IAAI,CAAC;QAGzB,UAAI,GAAY,IAAI,CAAC;QAErB,YAAM,GAAY,IAAI,CAAC;QAEvB,YAAM,GAAY,IAAI,CAAC;QAEvB,YAAM,GAAY,IAAI,CAAC;QAEvB,oBAAc,GAAc,EAAE,CAAC;QAE/B,eAAS,GAAiB,IAAI,CAAC;QAC/B,aAAO,GAAgB,IAAI,CAAC;QAC5B,oBAAc,GAAY,IAAI,CAAC;QAC/B,WAAK,GAAW,GAAG,CAAC;QACpB,qBAAe,GAAY,IAAI,CAAC;;IA2IlC,CAAC;IAzIW,+BAAM,GAAhB;QACE,IAAI,CAAC,KAAK,EAAE,CAAC;IACf,CAAC;IAGS,8BAAK,GAAf;QACE,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC;QAC/C,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC,SAAS,CAAC,CAAC;QACjD,IAAI,CAAC,aAAa,EAAE,CAAC;IACvB,CAAC;IAGM,8BAAK,GAAZ;QACE,qBAAS,CAAC,UAAU,GAAG,IAAI,CAAC,MAAM,CAAC,WAAW,EAAE,CAAC;QACjD,qBAAS,CAAC,SAAS,GAAG,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC;QAC3D,qBAAS,CAAC,SAAS,GAAG,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC;QAC3D,qBAAS,CAAC,SAAS,GAAG,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC;QAC3D,qBAAS,CAAC,SAAS,GAAG,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC;QAC3D,qBAAS,CAAC,SAAS,GAAG,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC;QAC3D,qBAAS,CAAC,SAAS,GAAG,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC;IAC7D,CAAC;IAGO,sCAAa,GAArB;QAAA,iBAeC;QAdC,IAAI,CAAC,SAAS,CAAC,cAAc,GAAG,UAAC,CAAoB,EAAE,CAAqB,EAAE,CAAqB;YACjG,IAAI,CAAC,CAAC,GAAG,KAAK,CAAC,EAAE;gBACf,IAAI,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,EAAE;oBAChC,KAAI,CAAC,kBAAkB,EAAE,CAAC;iBAC3B;gBACD,IAAI,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,EAAE;oBAChC,KAAI,CAAC,kBAAkB,EAAE,CAAC;iBAC3B;aACF;YAED,IAAI,CAAC,CAAC,GAAG,KAAK,CAAC,EAAE;gBACf,CAAC,qBAAS,CAAC,UAAU,IAAI,KAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,kBAAQ,CAAC,CAAC,QAAQ,EAAE,CAAC;aAC1E;QACH,CAAC,CAAA;IACH,CAAC;IAGO,2CAAkB,GAA1B;QACK,2CAA2C;QAC9C,qHAAqH;QACrH,+GAA+G;QAC/G,gBAAgB;QAChB,QAAQ;QACR,cAAc;QACd,MAAM;QAGN,4CAA4C;QAC5C,uFAAuF;QACvF,6GAA6G;QAC7G,cAAc;QACd,MAAM;QACN,YAAY;QACZ,IAAI;QAGJ,0CAA0C;QAC1C,4DAA4D;QAC5D,6GAA6G;QAC7G,cAAc;QACd,MAAM;QACN,YAAY;QACZ,IAAI;QAGJ,wCAAwC;QACxC,iCAAiC;QACjC,6GAA6G;QAC7G,cAAc;QACd,MAAM;QACN,YAAY;QACZ,IAAI;QAGJ,wEAAwE;QACxE,YAAY;QACZ,IAAI;IACN,CAAC;IAGO,2CAAkB,GAA1B;QACE,2CAA2C;QAC3C,mCAAmC;QACnC,6GAA6G;QAC7G,cAAc;QACd,MAAM;QACN,YAAY;QACZ,IAAI;IACN,CAAC;IAGO,yCAAgB,GAAxB;QACE,IAAI,qBAAS,CAAC,aAAa,IAAI,qBAAS,CAAC,aAAa,EAAE;YACtD,OAAO,eAAM,CAAC,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC;SAC7D;QAED,IAAI,qBAAS,CAAC,aAAa,EAAE;YAC3B,OAAO,eAAM,CAAC,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC;SAC7D;QAED,OAAO,eAAM,CAAC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC;IAC5D,CAAC;IAGM,6BAAI,GAAX;QACE,IAAG,CAAC,qBAAS,CAAC,SAAS,EAAE;YACvB,IAAI,CAAC,IAAI,EAAE,CAAC;YACZ,OAAO;SACR;QAGD,IAAI,CAAC,qBAAS,CAAC,UAAU,CAAC,SAAS,EAAE;YACnC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,qBAAS,CAAC,oBAAoB,CAAC,CAAA;YACrD,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC;YAC/C,wDAAwD;YACxD,kFAAkF;YAClF,6DAA6D;SAC9D;IACH,CAAC;IAGM,6BAAI,GAAX;QACE,IAAI,CAAC,SAAS,CAAC,cAAc,GAAG,IAAI,EAAE,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAClD,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;IAC9C,CAAC;IAGS,+BAAM,GAAhB,UAAiB,EAAU;QACzB,IAAI,CAAC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,gBAAgB,EAAE,CAAC;QAC1C,CAAC,CAAC,qBAAS,CAAC,OAAO,IAAI,qBAAS,CAAC,UAAU,CAAC,IAAI,IAAI,CAAC,IAAI,EAAE,CAAC;IAE9D,CAAC;IA1JD;QADC,QAAQ,CAAC,EAAE,CAAC,IAAI,CAAC;oDACO;IAGzB;QADC,QAAQ,CAAC,EAAE,CAAC,IAAI,CAAC;gDACG;IAErB;QADC,QAAQ,CAAC,EAAE,CAAC,IAAI,CAAC;kDACK;IAEvB;QADC,QAAQ,CAAC,EAAE,CAAC,IAAI,CAAC;kDACK;IAEvB;QADC,QAAQ,CAAC,EAAE,CAAC,IAAI,CAAC;kDACK;IAEvB;QADC,QAAQ,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC;0DACW;IAfZ,cAAc;QADlC,OAAO;OACa,cAAc,CAgKlC;IAAD,qBAAC;CAhKD,AAgKC,CAhK2C,EAAE,CAAC,SAAS,GAgKvD;kBAhKoB,cAAc","file":"","sourceRoot":"/","sourcesContent":["import { Ultils } from \"../Data/Ultils\";\r\nimport { Constants } from \"../Data/constants\";\r\nimport GamePlay from \"./GamePlay\";\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class HandController extends cc.Component {\r\n\r\n  // Component\r\n  @property(cc.Node)\r\n  GamePlay: cc.Node = null;\r\n\r\n  @property(cc.Node)\r\n  Line: cc.Node = null;\r\n  @property(cc.Node)\r\n  Apple1: cc.Node = null;\r\n  @property(cc.Node)\r\n  Apple2: cc.Node = null;\r\n  @property(cc.Node)\r\n  PointA: cc.Node = null;\r\n  @property([cc.Node])\r\n  Apple_1_Points: cc.Node[] = [];\r\n\r\n  rigidBody: cc.RigidBody = null;\r\n  collide: cc.Collider = null;\r\n  targetPosition: cc.Vec2 = null;\r\n  speed: number = 150;\r\n  currentPosition: cc.Vec2 = null;\r\n\r\n  protected onLoad(): void {\r\n    this.reset();\r\n  }\r\n\r\n\r\n  protected start(): void {\r\n    this.currentPosition = this.node.getPosition();\r\n    this.rigidBody = this.getComponent(cc.RigidBody);\r\n    this.handleContact();\r\n  }\r\n\r\n\r\n  public reset(): void {\r\n    Constants.pointA_Pos = this.PointA.getPosition();\r\n    Constants.point1Pos = this.Apple_1_Points[0].getPosition();\r\n    Constants.point2Pos = this.Apple_1_Points[1].getPosition();\r\n    Constants.point3Pos = this.Apple_1_Points[2].getPosition();\r\n    Constants.point4Pos = this.Apple_1_Points[3].getPosition();\r\n    Constants.point5Pos = this.Apple_1_Points[4].getPosition();\r\n    Constants.point6Pos = this.Apple_1_Points[5].getPosition();\r\n  }\r\n\r\n\r\n  private handleContact(): void {\r\n    this.rigidBody.onBeginContact = (c: cc.PhysicsContact, s: cc.PhysicsCollider, o: cc.PhysicsCollider) => {\r\n      if (o.tag === 1) {\r\n        if (o.name.startsWith(\"apple_1\")) {\r\n          this.checkContactApple1();\r\n        }\r\n        if (o.name.startsWith(\"apple_2\")) {\r\n          this.checkContactApple2();\r\n        }\r\n      }\r\n\r\n      if (o.tag === 2) {\r\n        !Constants.isLoseGame && this.GamePlay.getComponent(GamePlay).loseGame();\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  private checkContactApple1(): void {\r\n       // - if touch point 1 2 3 4, run condition.\r\n    //    if (Constants.isTouchPoint1 && Constants.isTouchPoint2 && Constants.isTouchPoint3 && Constants.isTouchPoint4) {\r\n    //     if (Ultils.Hand.checkConditionWithPoint(this.node, this.Apple_1_Points[0], this.Apple_1_Points[3], 5)) {\r\n    //       return;\r\n    //     }\r\n    //     return;\r\n    //   }\r\n\r\n\r\n    // // - if touch point 1 2 3, run condition.\r\n    // if (Constants.isTouchPoint1 && Constants.isTouchPoint2 && Constants.isTouchPoint3) {\r\n    //   if (Ultils.Hand.checkConditionWithPoint(this.node, this.Apple_1_Points[3], this.Apple_1_Points[2], 4)) {\r\n    //     return;\r\n    //   }\r\n    //   return;\r\n    // }\r\n\r\n\r\n    // // - if touch point 1 2, run condition.\r\n    // if (Constants.isTouchPoint1 && Constants.isTouchPoint2) {\r\n    //   if (Ultils.Hand.checkConditionWithPoint(this.node, this.Apple_1_Points[2], this.Apple_1_Points[1], 3)) {\r\n    //     return;\r\n    //   }\r\n    //   return;\r\n    // }\r\n\r\n\r\n    // // - if touch point 1, run condition.\r\n    // if (Constants.isTouchPoint1) {\r\n    //   if (Ultils.Hand.checkConditionWithPoint(this.node, this.Apple_1_Points[1], this.Apple_1_Points[0], 2)) {\r\n    //     return;\r\n    //   }\r\n    //   return;\r\n    // }\r\n\r\n\r\n    // if (Ultils.Hand.checkCondition1(this.node, this.Apple_1_Points[0])) {\r\n    //   return;\r\n    // }\r\n  }\r\n\r\n\r\n  private checkContactApple2(): void {\r\n    // - if touch point 1 2 3 4, run condition.\r\n    //  if (Constants.isTouchPoint1 ) {\r\n    //   if (Ultils.Hand.checkConditionWithPoint(this.node, this.Apple_1_Points[4], this.Apple_1_Points[0], 6)) {\r\n    //     return;\r\n    //   }\r\n    //   return;\r\n    // }\r\n  }\r\n\r\n\r\n  private handleRotateHand(): number {\r\n    if (Constants.isTouchPoint1 && Constants.isTouchPoint2) {\r\n      return Ultils.Hand.rotateWithPoint(this.node.getPosition());\r\n    }\r\n\r\n    if (Constants.isTouchPoint1) {\r\n      return Ultils.Hand.rotateWithPoint(this.node.getPosition());\r\n    }\r\n\r\n    return Ultils.Hand.rotateDefault(this.node.getPosition());\r\n  }\r\n\r\n\r\n  public move(): void {\r\n    if(!Constants.isCanMove) {\r\n      this.stop();\r\n      return;\r\n    }\r\n\r\n    \r\n    if (!Constants.ironSource.isEndGame) {\r\n      this.node.setPosition(Constants.currentLocalPosition)\r\n      this.currentPosition = this.node.getPosition();\r\n      // this.targetPosition = Constants.currentLocalPosition;\r\n      // const direction = this.targetPosition.sub(this.node.getPosition()).normalize();\r\n      // this.rigidBody.linearVelocity = direction.mul(this.speed);\r\n    }\r\n  }\r\n\r\n\r\n  public stop(): void {\r\n    this.rigidBody.linearVelocity = new cc.Vec2(0, 0);\r\n    this.node.setPosition(this.currentPosition);\r\n  }\r\n\r\n\r\n  protected update(dt: number): void {\r\n    this.node.angle = this.handleRotateHand();\r\n    (!Constants.isTouch || Constants.isLoseGame) && this.stop();\r\n\r\n  }\r\n\r\n}\r\n"]}