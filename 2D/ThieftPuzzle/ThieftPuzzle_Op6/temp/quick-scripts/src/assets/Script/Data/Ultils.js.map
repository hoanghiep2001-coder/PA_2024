{"version":3,"sources":["assets\\Script\\Data\\Ultils.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import { Constants } from \"./constants\";\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\nconst rotateDefault = (basePoint: cc.Vec2): number => {\r\n    let thisPos = new cc.Vec2(basePoint.x, basePoint.y);\r\n    let directionVector = thisPos.sub(Constants.pointA_Pos);\r\n    const rotationRadians = Math.atan2(directionVector.y, directionVector.x);\r\n    const rotationDegrees = cc.misc.radiansToDegrees(rotationRadians);\r\n    return rotationDegrees + 20;\r\n}\r\n\r\nconst rotateWithPoint = (basePoint: cc.Vec2): number => {\r\n    let thisPos = new cc.Vec2(basePoint.x, basePoint.y);\r\n    let directionVector = thisPos.sub(Constants.newPoint);\r\n    const rotationRadians = Math.atan2(directionVector.y, directionVector.x);\r\n    const rotationDegrees = cc.misc.radiansToDegrees(rotationRadians);\r\n    return rotationDegrees + 20;\r\n}\r\n\r\n\r\nconst checkConditionOfPoint1 = (hand: cc.Node, point: cc.Node): boolean => {\r\n    let boudingBox = hand.getBoundingBox();\r\n    let result = false;\r\n\r\n    if (\r\n        (boudingBox.intersects(point.getBoundingBox()) && Constants.newPoint !== point.getPosition())\r\n    ) {\r\n        Constants.isTouchPoint1 = true;\r\n        // Constants.newPoint = point.getPosition();\r\n        result = true;\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nconst checkConditionWithPoint = (hand: cc.Node, point: cc.Node, oldPoint: cc.Node, index: number): boolean => {\r\n    let boudingBox = hand.getBoundingBox();\r\n    let result = false;\r\n    // switch (index) {\r\n    //     case 2:\r\n    //         Constants.isTouchPoint2 = true;\r\n    //         break;\r\n    //     case 3:\r\n    //         Constants.isTouchPoint3 = true;\r\n    //         break;\r\n    //     case 4:\r\n    //         Constants.isTouchPoint4 = true;\r\n    //         break;\r\n    //     case 5:\r\n    //         Constants.isTouchPoint5 = true;\r\n    //         break;\r\n    //     case 6:\r\n    //         Constants.isTouchPoint6 = true;\r\n    //         break;\r\n    //     case 7:\r\n    //         Constants.isTouchPoint7 = true;\r\n    //         break;\r\n    //     default:\r\n    //         break;\r\n    // }\r\n\r\n\r\n    if (\r\n        boudingBox.intersects(point.getBoundingBox())\r\n        && Constants.newPoint !== point.getPosition()\r\n    ) {\r\n        // Constants.oldPoint = oldPoint.getPosition();\r\n        // Constants.newPoint = point.getPosition();\r\n        result = true;\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\n\r\nconst checkTouchCondition1 = (hand: cc.Node, point: cc.Node, graphic: cc.Graphics, pointCompare: cc.Node): void => {\r\n    // let result = false;\r\n\r\n    // if((Constants.currentLocalPosition.x > Constants.point2Pos.x) && Constants.isTouchPoint1) {\r\n    //     console.log(\"check\"); \r\n    //     Constants.isCanMove = false;\r\n    // } else {\r\n    //     console.log(\"check\");\r\n    //     Constants.isCanMove = true;\r\n    // }\r\n\r\n    if (hand.x > pointCompare.x && hand.y > pointCompare.y) {\r\n        return;\r\n    }\r\n\r\n\r\n    if(hand.x < point.x &&  !Constants.isTouchPoint2) {\r\n            Constants.isDrawPoint1 = false;\r\n            Constants.isTouchPoint1 = false;\r\n            Constants.newPoint = Constants.pointA_Pos;\r\n            graphic.clear();\r\n            return;\r\n    }\r\n\r\n    if (hand.x > point.x && hand.y > point.y && !Constants.isTouchPoint1) {\r\n        Constants.isTouchPoint1 = true;\r\n        Constants.newPoint = point.getPosition();\r\n    }\r\n\r\n    // if(hand.x < point.x && hand.y > point.y && Constants.isTouchPoint1) {\r\n    //     graphic.clear();\r\n    //     Constants.isTouchPoint1 = false;\r\n    //     Constants.newPoint = Constants.pointA_Pos;\r\n    //     Constants.isCanDraw = true;\r\n    //     // result = false;\r\n    // }\r\n\r\n    // return result;\r\n}\r\n\r\nconst checkTouchCondition2 = (hand: cc.Node, newPoint: cc.Node, oldPoint: cc.Node): void => {\r\n    if (hand.x > newPoint.x && hand.y < newPoint.y && Constants.isTouchPoint1) {\r\n        Constants.isTouchPoint2 = true;\r\n        Constants.oldPoint = oldPoint.getPosition();\r\n        Constants.newPoint = newPoint.getPosition();\r\n    }\r\n}\r\n\r\nconst checkTouchCondition3 = (hand: cc.Node, newPoint: cc.Node, oldPoint: cc.Node): void => {\r\n    if (hand.x < newPoint.x && hand.y < newPoint.y && Constants.isTouchPoint1 && !Constants.isTouchPoint3) {\r\n        Constants.isTouchPoint3 = true;\r\n        Constants.oldPoint = oldPoint.getPosition();\r\n        Constants.newPoint = newPoint.getPosition();\r\n    }\r\n}\r\n\r\nconst checkTouchCondition4 = (hand: cc.Node, newPoint: cc.Node, oldPoint: cc.Node): void => {\r\n    if (hand.x < newPoint.x && hand.y > newPoint.y && Constants.isTouchPoint1 && Constants.isTouchPoint3 && !Constants.isTouchPoint4) {\r\n        Constants.isTouchPoint4 = true;\r\n        Constants.oldPoint = oldPoint.getPosition();\r\n        Constants.newPoint = newPoint.getPosition();\r\n    }\r\n}\r\n\r\nconst checkTouchCondition5 = (hand: cc.Node, newPoint: cc.Node, oldPoint: cc.Node, graphic: cc.Graphics): void => {\r\n    if (hand.x < newPoint.x && hand.y > newPoint.y && Constants.isTouchPoint1 && Constants.isTouchPoint4 && !Constants.isTouchPoint5) {\r\n        Constants.isTouchPoint5 = true;\r\n        Constants.oldPoint = oldPoint.getPosition();\r\n        Constants.newPoint = newPoint.getPosition();\r\n    }\r\n\r\n    // if(hand.x < newPoint.x && hand.y < newPoint.y && Constants.isTouchPoint5) {\r\n    //     graphic.clear();\r\n    //     Constants.isTouchPoint5 = false;\r\n    //     Constants.isDrawPoint5 = false;\r\n    //     Constants.oldPoint = Constants.point3Pos;\r\n    //     Constants.newPoint = Constants.point4Pos;\r\n    //     return;\r\n    // }\r\n}\r\n\r\nconst checkTouchCondition6 = (hand: cc.Node, newPoint: cc.Node, oldPoint: cc.Node, graphics: cc.Graphics): void => {\r\n    if(!Constants.isTouchPoint2  && !Constants.isTouchPoint3 && !Constants.isTouchPoint4) {\r\n        if (hand.x < newPoint.x  && Constants.isTouchPoint1) {\r\n            graphics.clear();\r\n            Constants.isDrawPoint6 = false;\r\n            Constants.isTouchPoint6 = false;\r\n            // Constants.oldPoint = Constants.pointA_Pos\r\n            // Constants.newPoint = oldPoint.getPosition();\r\n            return;\r\n        }\r\n    \r\n        if (hand.x > newPoint.x && hand.y > newPoint.y && Constants.isTouchPoint1) {\r\n            Constants.isTouchPoint6 = true;\r\n            Constants.oldPoint = oldPoint.getPosition();\r\n            Constants.newPoint = newPoint.getPosition();\r\n        }\r\n    } \r\n    \r\n    \r\n    if (Constants.isTouchPoint2  && Constants.isTouchPoint3 && Constants.isTouchPoint4) {\r\n        if (hand.x < newPoint.x) {\r\n            graphics.clear();\r\n            Constants.isDrawPoint6 = false;\r\n            Constants.isTouchPoint6 = false;\r\n            Constants.oldPoint = Constants.point4Pos; \r\n            Constants.newPoint = Constants.point1Pos;\r\n            return;\r\n        }\r\n\r\n        if (hand.x > newPoint.x && hand.y > newPoint.y && Constants.isTouchPoint1) {\r\n            Constants.isTouchPoint6 = true;\r\n            Constants.oldPoint = oldPoint.getPosition();\r\n            Constants.newPoint = newPoint.getPosition();\r\n        }\r\n    }\r\n}\r\n\r\nconst checkTouchCondition7 = (hand: cc.Node): void => {\r\n    if(Constants.isTouchPoint1) {\r\n        if(hand.x < Constants.point5Pos.x) {\r\n            Constants.oldPoint = Constants.pointA_Pos;\r\n            Constants.newPoint = Constants.point1Pos;\r\n        }\r\n    }\r\n}\r\n\r\nconst checkTouchCondition8 = (hand: cc.Node, graphic: cc.Graphics): void => {\r\n    if(Constants.isTouchPoint1 && Constants.isTouchPoint6) {\r\n        if(hand.x < Constants.point6Pos.x && Constants.isTouchPoint7) {\r\n            graphic.clear();\r\n            Constants.isTouchPoint7 = false;\r\n            Constants.isDrawPoint7 = false;\r\n            Constants.oldPoint = Constants.point1Pos;\r\n            Constants.newPoint = Constants.point5Pos;\r\n            return;\r\n        }\r\n\r\n        if(hand.x > Constants.point6Pos.x) {\r\n            Constants.isTouchPoint7 = true;\r\n            Constants.oldPoint = Constants.point5Pos;\r\n            Constants.newPoint = Constants.point6Pos;\r\n        }\r\n    }\r\n}\r\n\r\nconst checkTouchCondition9 = (boudingbox: cc.Rect, hand: cc.Node): void => {\r\n    if(Constants.isTouchPoint1 && boudingbox.intersects(hand.getBoundingBox())) {\r\n        Constants.isTouchFence = true;\r\n        // console.log(\"Check\");\r\n        \r\n    } else {\r\n        Constants.isTouchFence = false;\r\n        // console.log(\"Check2\");\r\n    }\r\n}\r\n\r\nconst Hand = {\r\n    rotateDefault: rotateDefault,\r\n    rotateWithPoint: rotateWithPoint,\r\n    checkCondition1: checkConditionOfPoint1,\r\n    checkConditionWithPoint: checkConditionWithPoint,\r\n}\r\nconst TouchArea = {\r\n    checkTouchCondition1: checkTouchCondition1,\r\n    checkTouchCondition2: checkTouchCondition2,\r\n    checkTouchCondition3: checkTouchCondition3,\r\n    checkTouchCondition4: checkTouchCondition4,\r\n    checkTouchCondition5: checkTouchCondition5,\r\n    checkTouchCondition6: checkTouchCondition6,\r\n    checkTouchCondition7: checkTouchCondition7,\r\n    checkTouchCondition8: checkTouchCondition8,\r\n    checkTouchCondition9: checkTouchCondition9,\r\n}\r\n\r\nexport class Ultils {\r\n\r\n    static Hand: typeof Hand = Hand;\r\n    static TouchArea: typeof TouchArea = TouchArea;\r\n\r\n}"]}