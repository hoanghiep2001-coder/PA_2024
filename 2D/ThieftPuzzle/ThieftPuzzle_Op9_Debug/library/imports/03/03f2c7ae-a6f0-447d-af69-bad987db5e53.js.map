{"version":3,"sources":["assets\\Script\\Data\\Ultils.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import { Constants } from \"./constants\";\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\nconst rotateDefault = (basePoint: cc.Vec2): number => {\r\n    let thisPos = new cc.Vec2(basePoint.x, basePoint.y);\r\n    let directionVector = thisPos.sub(Constants.pointA_Pos);\r\n    const rotationRadians = Math.atan2(directionVector.y, directionVector.x);\r\n    const rotationDegrees = cc.misc.radiansToDegrees(rotationRadians);\r\n    return rotationDegrees + 20;\r\n}\r\n\r\nconst rotateWithPoint = (basePoint: cc.Vec2): number => {\r\n    let thisPos = new cc.Vec2(basePoint.x, basePoint.y);\r\n    let directionVector = thisPos.sub(Constants.newPoint);\r\n    const rotationRadians = Math.atan2(directionVector.y, directionVector.x);\r\n    const rotationDegrees = cc.misc.radiansToDegrees(rotationRadians);\r\n    return rotationDegrees + 20;\r\n}\r\n\r\n\r\n\r\n// const checkTouchCondition1 = (hand: cc.Node, point: cc.Node, graphic: cc.Graphics, pointCompare: cc.Node): void => {\r\n//     if (hand.x > pointCompare.x && hand.y > pointCompare.y) {\r\n//         return;\r\n//     }\r\n\r\n\r\n//     if(hand.x < point.x &&  !Constants.isTouchPoint2) {\r\n//             Constants.isDrawPoint1 = false;\r\n//             Constants.isTouchPoint1 = false;\r\n//             Constants.newPoint = Constants.pointA_Pos;\r\n//             graphic.clear();\r\n//             return;\r\n//     }\r\n\r\n//     if (hand.x > point.x && hand.y > point.y && !Constants.isTouchPoint1) {\r\n//         Constants.isTouchPoint1 = true;\r\n//         Constants.newPoint = point.getPosition();\r\n//     }\r\n// }\r\n\r\n// const checkTouchCondition6 = (hand: cc.Node, newPoint: cc.Node, oldPoint: cc.Node, graphics: cc.Graphics): void => {\r\n//     if(!Constants.isTouchPoint2  && !Constants.isTouchPoint3 && !Constants.isTouchPoint4) {\r\n//         if (hand.x < newPoint.x  && Constants.isTouchPoint1) {\r\n//             graphics.clear();\r\n//             Constants.isDrawPoint6 = false;\r\n//             Constants.isTouchPoint6 = false;\r\n//             return;\r\n//         }\r\n    \r\n//         if (hand.x > newPoint.x && hand.y > newPoint.y && Constants.isTouchPoint1) {\r\n//             Constants.isTouchPoint6 = true;\r\n//             Constants.oldPoint = oldPoint.getPosition();\r\n//             Constants.newPoint = newPoint.getPosition();\r\n//         }\r\n//     } \r\n    \r\n    \r\n//     if (Constants.isTouchPoint2  && Constants.isTouchPoint3 && Constants.isTouchPoint4) {\r\n//         if (hand.x < newPoint.x) {\r\n//             graphics.clear();\r\n//             Constants.isDrawPoint6 = false;\r\n//             Constants.isTouchPoint6 = false;\r\n//             Constants.oldPoint = Constants.point4Pos; \r\n//             Constants.newPoint = Constants.point1Pos;\r\n//             return;\r\n//         }\r\n\r\n//         if (hand.x > newPoint.x && hand.y > newPoint.y && Constants.isTouchPoint1) {\r\n//             Constants.isTouchPoint6 = true;\r\n//             Constants.oldPoint = oldPoint.getPosition();\r\n//             Constants.newPoint = newPoint.getPosition();\r\n//         }\r\n//     }\r\n// }\r\n\r\n// const checkTouchCondition7 = (hand: cc.Node): void => {\r\n//     if(Constants.isTouchPoint1) {\r\n//         if(hand.x < Constants.point5Pos.x) {\r\n//             Constants.oldPoint = Constants.pointA_Pos;\r\n//             Constants.newPoint = Constants.point1Pos;\r\n//         }\r\n//     }\r\n// }\r\n\r\n// const checkTouchCondition8 = (hand: cc.Node, graphic: cc.Graphics): void => {\r\n//     if(Constants.isTouchPoint1 && Constants.isTouchPoint6) {\r\n//         if(hand.x < Constants.point6Pos.x && Constants.isTouchPoint7) {\r\n//             graphic.clear();\r\n//             Constants.isTouchPoint7 = false;\r\n//             Constants.isDrawPoint7 = false;\r\n//             Constants.oldPoint = Constants.point1Pos;\r\n//             Constants.newPoint = Constants.point5Pos;\r\n//             return;\r\n//         }\r\n\r\n//         if(hand.x > Constants.point6Pos.x) {\r\n//             Constants.isTouchPoint7 = true;\r\n//             Constants.oldPoint = Constants.point5Pos;\r\n//             Constants.newPoint = Constants.point6Pos;\r\n//         }\r\n//     }\r\n// }\r\n\r\n// const checkTouchCondition9 = (boudingbox: cc.Rect, hand: cc.Node): void => {\r\n//     if(Constants.isTouchPoint1 && boudingbox.intersects(hand.getBoundingBox())) {\r\n//         Constants.isTouchFence = true;\r\n//     } else {\r\n//         Constants.isTouchFence = false;\r\n//     }\r\n// }\r\n\r\n\r\nconst checkTouchPoint = (fence: cc.Node, hand: cc.Node, fenceLeft: cc.Node): void => {\r\n    let f_BoudingBox = fence.getBoundingBox();\r\n    let fl_BoudingBox = fenceLeft.getBoundingBox();\r\n    let h_BoudingBox = hand.getBoundingBox();\r\n    let checkPosX = Constants.currentPosition.x - cc.winSize.width / 2;\r\n    let checkPosY = Constants.currentPosition.y - cc.winSize.height / 2;\r\n\r\n\r\n    // // touch point 6\r\n    // if(Constants.isTouchPoint6 && f_BoudingBox.intersects(h_BoudingBox)) {\r\n    //     if(checkPosY < Constants.point7Pos.y) {\r\n    //         return;\r\n    //     }\r\n\r\n    //     Constants.currentLocalPosition.x = Constants.currentPosition.x - cc.winSize.width / 2;\r\n    //     Constants.currentLocalPosition.y = Constants.currentPosition.y - cc.winSize.height / 2;\r\n    //     return;\r\n    // }\r\n\r\n\r\n    // // touch fence\r\n    // if(f_BoudingBox.intersects(h_BoudingBox)) {\r\n    //     if(Constants.fencePoint.y > checkPosY) {\r\n    //         return;\r\n    //     }\r\n       \r\n    //     if(Constants.fencePoint.y < checkPosY && Constants.point2Pos.x > checkPosX) {\r\n    //         Constants.currentLocalPosition.x = Constants.currentPosition.x - cc.winSize.width / 2;\r\n    //         Constants.currentLocalPosition.y = Constants.currentPosition.y - cc.winSize.height / 2;\r\n    //         return;\r\n    //     }\r\n\r\n    //     Constants.currentLocalPosition.y = Constants.currentPosition.y - cc.winSize.height / 2;\r\n    //     return;\r\n    // }\r\n\r\n\r\n    // // touch point 3 && 4\r\n    // if(h_BoudingBox.intersects(Constants.point3Bdb) || h_BoudingBox.intersects(Constants.point4Bdb)) {\r\n    //     if(checkPosY < Constants.point3Pos.y && checkPosX < Constants.point3Pos.x) {\r\n    //         Constants.currentLocalPosition.x = Constants.currentPosition.x - cc.winSize.width / 2;\r\n    //         Constants.currentLocalPosition.y = Constants.currentPosition.y - cc.winSize.height / 2;\r\n    //         return;\r\n    //     } \r\n\r\n    //     Constants.currentLocalPosition.x = Constants.currentPosition.x - cc.winSize.width / 2;\r\n    //     return;\r\n    // }\r\n\r\n\r\n    // // tooouch fence Left\r\n    // if(fl_BoudingBox.intersects(h_BoudingBox)) {\r\n    //     if(checkPosX <  fenceLeft.x) {\r\n    //         Constants.currentLocalPosition.x = Constants.currentPosition.x - cc.winSize.width / 2;\r\n    //         Constants.currentLocalPosition.y = Constants.currentPosition.y - cc.winSize.height / 2;\r\n    //         return;\r\n    //     }\r\n\r\n    //     Constants.currentLocalPosition.y = Constants.currentPosition.y - cc.winSize.height / 2;\r\n    //     return;\r\n    // }\r\n\r\n\r\n    Constants.currentLocalPosition.x = Constants.currentPosition.x - cc.winSize.width / 2;\r\n    Constants.currentLocalPosition.y = Constants.currentPosition.y - cc.winSize.height / 2;\r\n}\r\n\r\n\r\nconst Hand = {\r\n    rotateDefault: rotateDefault,\r\n    rotateWithPoint: rotateWithPoint,\r\n}\r\nconst TouchArea = {\r\n    // checkTouchCondition1: checkTouchCondition1,\r\n    // checkTouchCondition6: checkTouchCondition6,\r\n    // checkTouchCondition7: checkTouchCondition7,\r\n    // checkTouchCondition8: checkTouchCondition8,\r\n    checkTouchPoint: checkTouchPoint,\r\n}\r\n\r\nexport class Ultils {\r\n\r\n    static Hand: typeof Hand = Hand;\r\n    static TouchArea: typeof TouchArea = TouchArea;\r\n\r\n}"]}