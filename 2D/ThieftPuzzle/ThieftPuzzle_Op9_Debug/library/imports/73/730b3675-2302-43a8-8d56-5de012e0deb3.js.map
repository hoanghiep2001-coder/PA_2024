{"version":3,"sources":["assets\\Script\\Controller\\HandController.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["\r\nimport { Constants } from \"../Data/constants\";\r\nimport GraphicsController from \"./GraphicsController\";\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class HandController extends cc.Component {\r\n\r\n  // Component\r\n  @property(GraphicsController)\r\n  GraphicsController: GraphicsController = null;\r\n  @property(cc.Node)\r\n  GamePlay: cc.Node = null;\r\n\r\n  @property(cc.Node)\r\n  fakeHand: cc.Node = null;\r\n  @property(cc.Node)\r\n  Line: cc.Node = null;\r\n  @property([cc.Node])\r\n  obstaclePoints: cc.Node[] = [];\r\n\r\n  rigidBody: cc.RigidBody = null;\r\n  collide: cc.Collider = null;\r\n  targetPosition: cc.Vec2 = null;\r\n  speed: number = 150;\r\n  currentPosition: cc.Vec2 = null;\r\n\r\n\r\n  protected onLoad(): void {\r\n\r\n  }\r\n\r\n\r\n  protected start(): void {\r\n    this.handleContact();\r\n  }\r\n\r\n\r\n  private handleContact(): void {\r\n    this.currentPosition = this.node.getPosition();\r\n    this.rigidBody = this.getComponent(cc.RigidBody);\r\n    this.rigidBody.onBeginContact = (c: cc.PhysicsContact, s: cc.PhysicsCollider, o: cc.PhysicsCollider) => {\r\n      if (o.tag === 2) {\r\n        // !Constants.isLoseGame && this.GamePlay.getComponent(GamePlay).loseGame();\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  private handleCheckIntersects(): void {\r\n    let handBdx = this.fakeHand.getBoundingBox();\r\n    for(let i = 0; i < this.obstaclePoints.length; i++) {\r\n      let point = this.obstaclePoints[i];\r\n      let iBdx = point.getBoundingBox();\r\n      \r\n      if(handBdx.intersects(iBdx) ) {\r\n        let pointPos = point.getPosition(); \r\n        if(Constants.startPos.x === pointPos.x) return;\r\n        this.GraphicsController.createGraphics();\r\n        Constants.startPos = pointPos;\r\n        Constants.touchPointsPos.push(pointPos);\r\n        console.log(this.GraphicsController.graphicsArr);\r\n        \r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  private handleRotateHand(startPos: cc.Vec2): void {\r\n    let thisPos = new cc.Vec2(startPos.x, startPos.y);\r\n    let directionVector = thisPos.sub(this.node.getPosition());\r\n    const rotationRadians = Math.atan2(directionVector.y, directionVector.x);\r\n    const rotationDegrees = cc.misc.radiansToDegrees(rotationRadians);\r\n    this.node.angle = rotationDegrees - 20;\r\n  }\r\n\r\n\r\n  public move(): void {\r\n    if(!Constants.isCanMove) {\r\n      this.stop();\r\n      return;\r\n    }\r\n    \r\n    if (!Constants.ironSource.isEndGame) {\r\n      this.node.setPosition(Constants.currentLocalPosition)\r\n      this.fakeHand.setPosition(Constants.currentLocalPosition)\r\n      this.currentPosition = this.node.getPosition();\r\n    }\r\n  }\r\n\r\n\r\n  public stop(): void {\r\n    this.rigidBody.linearVelocity = new cc.Vec2(0, 0);\r\n    this.node.setPosition(this.currentPosition);\r\n  }\r\n\r\n\r\n  protected update(dt: number): void {\r\n    (!Constants.isTouch || Constants.isLoseGame) && this.stop();\r\n    Constants.isTouch && this.handleRotateHand(Constants.startPos);\r\n    Constants.isTouch && this.handleCheckIntersects();\r\n  }\r\n\r\n}\r\n"]}