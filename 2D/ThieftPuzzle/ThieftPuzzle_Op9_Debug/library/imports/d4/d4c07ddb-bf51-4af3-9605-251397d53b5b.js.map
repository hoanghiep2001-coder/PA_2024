{"version":3,"sources":["assets\\Script\\Controller\\GraphicsController.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA,+CAA8C;AAGxC,IAAA,KAAwB,EAAE,CAAC,UAAU,EAAnC,OAAO,aAAA,EAAE,QAAQ,cAAkB,CAAC;AAG5C;IAAgD,sCAAY;IAA5D;QAAA,qEA2DC;QAzDG,UAAI,GAAY,IAAI,CAAC;QAErB,qBAAe,GAAc,IAAI,CAAC;QAGlC,QAAQ;QAER,iBAAW,GAAkB,EAAE,CAAC;QAChC,oBAAc,GAAmB,IAAI,CAAC;;IAiD1C,CAAC;IA9Ca,kCAAK,GAAf;QACI,IAAI,CAAC,cAAc,EAAE,CAAC;IAC1B,CAAC;IAGM,2CAAc,GAArB;QACI,IAAI,MAAM,GAAG,EAAE,CAAC,WAAW,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;QAClD,IAAI,QAAQ,GAAG,MAAM,CAAC,YAAY,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAC;QAChD,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC;QACb,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC;QACb,MAAM,CAAC,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC;QAC1B,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IACpC,CAAC;IAGO,2CAAc,GAAtB,UAAuB,KAAc,EAAE,GAAY,EAAE,QAAqB;QACtE,QAAQ,CAAC,KAAK,EAAE,CAAC;QACjB,QAAQ,CAAC,SAAS,GAAG,CAAC,CAAC;QACvB,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC;QAClC,QAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;QAC9B,QAAQ,CAAC,MAAM,EAAE,CAAC;IACtB,CAAC;IAGO,qDAAwB,GAAhC;QACI,IAAG,qBAAS,CAAC,cAAc,CAAC,MAAM,IAAI,CAAC,EAAE;YACrC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,qBAAS,CAAC,cAAc,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;gBACtD,IAAI,KAAK,GAAG,qBAAS,CAAC,cAAc,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,aAAa;gBAC1D,IAAI,GAAG,GAAG,qBAAS,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC,gBAAgB;gBACvD,qCAAqC;gBACrC,iCAAiC;aACpC;SACJ;IACL,CAAC;IAGS,mCAAM,GAAhB,UAAiB,EAAU;QACvB,qBAAS,CAAC,OAAO,IAAI,IAAI,CAAC,cAAc,CACpC,qBAAS,CAAC,QAAQ,EAClB,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,EACvB,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CACtB,CAAC;QAEF,yCAAyC;IAE7C,CAAC;IAxDD;QADC,QAAQ,CAAC,EAAE,CAAC,IAAI,CAAC;oDACG;IAErB;QADC,QAAQ,CAAC,EAAE,CAAC,MAAM,CAAC;+DACc;IAJjB,kBAAkB;QADtC,OAAO;OACa,kBAAkB,CA2DtC;IAAD,yBAAC;CA3DD,AA2DC,CA3D+C,EAAE,CAAC,SAAS,GA2D3D;kBA3DoB,kBAAkB","file":"","sourceRoot":"/","sourcesContent":["import { Constants } from \"../Data/constants\";\r\nimport HandController from \"./HandController\";\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class GraphicsController extends cc.Component {\r\n    @property(cc.Node)\r\n    hand: cc.Node = null;\r\n    @property(cc.Prefab)\r\n    prefab_Graphics: cc.Prefab = null;\r\n\r\n\r\n    // state\r\n\r\n    graphicsArr: cc.Graphics[] = [];\r\n    handController: HandController = null;\r\n\r\n\r\n    protected start(): void {\r\n        this.createGraphics();\r\n    }\r\n\r\n\r\n    public createGraphics(): void {\r\n        let prefab = cc.instantiate(this.prefab_Graphics);\r\n        let graphics = prefab.getComponent(cc.Graphics);\r\n        prefab.x = 0;\r\n        prefab.y = 0;\r\n        prefab.parent = this.node;\r\n        this.graphicsArr.push(graphics);\r\n    }\r\n\r\n\r\n    private handleDrawLine(start: cc.Vec2, end: cc.Vec2, graphics: cc.Graphics): void {\r\n        graphics.clear();\r\n        graphics.lineWidth = 7;\r\n        graphics.moveTo(start.x, start.y);\r\n        graphics.lineTo(end.x, end.y);\r\n        graphics.stroke();\r\n    }\r\n\r\n\r\n    private handleDrawWithTouchPoint(): void {\r\n        if(Constants.touchPointsPos.length >= 2) {\r\n            for (let i = 1; i < Constants.touchPointsPos.length; i++) {\r\n                let start = Constants.touchPointsPos[i - 1]; // Điểm trước\r\n                let end = Constants.touchPointsPos[i]; // Điểm hiện tại\r\n                // graphics.moveTo(start.x, start.y);\r\n                // graphics.lineTo(end.x, end.y);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    protected update(dt: number): void {\r\n        Constants.isTouch && this.handleDrawLine(\r\n            Constants.startPos, \r\n            this.hand.getPosition(), \r\n            this.graphicsArr[0]\r\n        );\r\n\r\n        // console.log(Constants.touchPointsPos);\r\n        \r\n    }\r\n}\r\n"]}