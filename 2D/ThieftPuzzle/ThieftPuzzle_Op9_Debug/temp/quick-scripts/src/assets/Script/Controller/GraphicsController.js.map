{"version":3,"sources":["assets\\Script\\Controller\\GraphicsController.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import { Constants } from \"../Data/constants\";\r\nimport HandController from \"./HandController\";\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class GraphicsController extends cc.Component {\r\n\r\n    @property(cc.Node)\r\n    hand: cc.Node = null;\r\n    @property([cc.Graphics])\r\n    graphicsNodes: cc.Graphics[] = [];\r\n    graphics: cc.Graphics = null;\r\n\r\n    handController: HandController = null;\r\n\r\n\r\n    protected start(): void {\r\n        this.graphics = this.getComponent(cc.Graphics);\r\n        this.handController = this.hand.getComponent(HandController);\r\n    }\r\n\r\n\r\n    private handleDrawLine(start: cc.Vec2, end: cc.Vec2): void {\r\n        if (Constants.newPoint) {\r\n            start = Constants.newPoint;\r\n        }\r\n\r\n        this.graphics.clear();\r\n        this.graphics.lineWidth = 7;\r\n        this.graphics.moveTo(start.x, start.y);\r\n        this.graphics.lineTo(end.x, end.y);\r\n        this.graphics.stroke();\r\n    }\r\n\r\n\r\n    public handleDrawWithTouchPoint(): void {\r\n\r\n        if (Constants.isTouchPoint1 && !Constants.isDrawPoint1) {\r\n            this.handleDrawOldLine(1);\r\n            return;\r\n        }\r\n\r\n        if (Constants.isTouchPoint2 && !Constants.isDrawPoint2) {\r\n            this.handleDrawOldLine(2);\r\n            return;\r\n        }\r\n\r\n        if (Constants.isTouchPoint3 && !Constants.isDrawPoint3) {\r\n            this.handleDrawOldLine(3);\r\n            return;\r\n        }\r\n\r\n        if (Constants.isTouchPoint4 && !Constants.isDrawPoint4) {\r\n            this.handleDrawOldLine(4);\r\n            return;\r\n        }\r\n\r\n        if (Constants.isTouchPoint5 && !Constants.isDrawPoint5) {\r\n            this.handleDrawOldLine(5);\r\n            return;\r\n        }\r\n        if (Constants.isTouchPoint6 && !Constants.isDrawPoint6) {\r\n            this.handleDrawOldLine(6);\r\n            return;\r\n        }\r\n        if (Constants.isTouchPoint7 && !Constants.isDrawPoint7) {\r\n            this.handleDrawOldLine(7);\r\n            return;\r\n        }\r\n    }\r\n\r\n\r\n    public handleDrawOldLine(step: number): void {\r\n        this.graphicsNodes[step - 1].clear();\r\n        this.graphicsNodes[step - 1].lineWidth = 6;\r\n        if (Constants.isLoseGame) {\r\n            this.graphicsNodes[step - 1].fillColor = cc.Color.RED;\r\n            this.graphicsNodes[step - 1].strokeColor = cc.Color.RED;\r\n        }\r\n        switch (step) {\r\n            case 1:\r\n                if (Constants.newPoint) {\r\n                    Constants.isDrawPoint1 = true;\r\n                    this.graphicsNodes[step - 1].moveTo(Constants.pointA_Pos.x, Constants.pointA_Pos.y);\r\n                    // this.graphicsNodes[step - 1].lineTo(this.handController.Apple_1_Points[0].x, this.handController.Apple_1_Points[0].y);\r\n                \r\n                    let controlPointX =\r\n                        Constants.point1Pos.x - 15;\r\n                    let controlPointY =\r\n                        Constants.point1Pos.y - 15;\r\n                    this.graphicsNodes[step - 1].quadraticCurveTo(\r\n                        controlPointX,\r\n                        controlPointY,\r\n                        Constants.point1Pos.x,\r\n                        Constants.point1Pos.y\r\n                    );\r\n                }\r\n                break;\r\n            case 2:\r\n                if (Constants.oldPoint) {\r\n                    Constants.isDrawPoint2 = true;\r\n                    this.graphicsNodes[step - 1].moveTo(this.handController.Apple_1_Points[0].x, this.handController.Apple_1_Points[0].y);\r\n                    this.graphicsNodes[step - 1].quadraticCurveTo(\r\n                        (this.handController.Apple_1_Points[1].x + this.handController.Apple_1_Points[0].x) / 2,\r\n                        (this.handController.Apple_1_Points[1].y + this.handController.Apple_1_Points[0].y) / 2 + 3,\r\n                        this.handController.Apple_1_Points[1].x,\r\n                        this.handController.Apple_1_Points[1].y\r\n                    );\r\n                }\r\n                break;\r\n            case 3:\r\n                if (Constants.oldPoint) {\r\n                    Constants.isDrawPoint3 = true;\r\n                    this.graphicsNodes[step - 1].moveTo(this.handController.Apple_1_Points[1].x, this.handController.Apple_1_Points[1].y);\r\n                    let controlPointX =\r\n                        (this.handController.Apple_1_Points[2].x + this.handController.Apple_1_Points[1].x) / 2;\r\n                    let controlPointY =\r\n                        (this.handController.Apple_1_Points[2].y + this.handController.Apple_1_Points[1].y) / 2;\r\n                    this.graphicsNodes[step - 1].quadraticCurveTo(\r\n                        controlPointX + 6,\r\n                        controlPointY,\r\n                        this.handController.Apple_1_Points[2].x,\r\n                        this.handController.Apple_1_Points[2].y\r\n                    );\r\n                }\r\n                break;\r\n            case 4:\r\n                if (Constants.oldPoint) {\r\n                    Constants.isDrawPoint4 = true;\r\n                    this.graphicsNodes[step - 1].moveTo(this.handController.Apple_1_Points[2].x, this.handController.Apple_1_Points[2].y);\r\n                    let controlPointX =\r\n                        (this.handController.Apple_1_Points[2].x + this.handController.Apple_1_Points[3].x) / 2;\r\n                    let controlPointY =\r\n                        (this.handController.Apple_1_Points[2].y + this.handController.Apple_1_Points[3].y) / 2;\r\n                    this.graphicsNodes[step - 1].quadraticCurveTo(\r\n                        controlPointX,\r\n                        controlPointY - 6,\r\n                        this.handController.Apple_1_Points[3].x,\r\n                        this.handController.Apple_1_Points[3].y\r\n                    );\r\n                }\r\n                break;\r\n            case 5:\r\n                if (Constants.oldPoint) {\r\n                    Constants.isDrawPoint5 = true;\r\n                    this.graphicsNodes[step - 1].moveTo(this.handController.Apple_1_Points[3].x, this.handController.Apple_1_Points[3].y);\r\n                    let controlPointX =\r\n                        (this.handController.Apple_1_Points[0].x + this.handController.Apple_1_Points[3].x) / 2;\r\n                    let controlPointY =\r\n                        (this.handController.Apple_1_Points[0].y + this.handController.Apple_1_Points[3].y) / 2;\r\n                    this.graphicsNodes[step - 1].quadraticCurveTo(\r\n                        controlPointX - 6,\r\n                        controlPointY,\r\n                        this.handController.Apple_1_Points[0].x,\r\n                        this.handController.Apple_1_Points[0].y\r\n                    );\r\n                }\r\n                break;\r\n            case 6:\r\n                if (Constants.oldPoint) {\r\n                    Constants.isDrawPoint6 = true;\r\n                    this.graphicsNodes[step - 1].moveTo(this.handController.Apple_1_Points[0].x, this.handController.Apple_1_Points[0].y);\r\n                    this.graphicsNodes[step - 1].lineTo(this.handController.Apple_1_Points[4].x, this.handController.Apple_1_Points[4].y);\r\n                }\r\n                break;\r\n                case 7:\r\n                    if (Constants.oldPoint) {\r\n                        Constants.isDrawPoint7 = true;\r\n                        this.graphicsNodes[step - 1].moveTo(Constants.point5Pos.x, Constants.point5Pos.y);\r\n                            let controlPointX =\r\n                            (Constants.point6Pos.x + Constants.point5Pos.x) / 2;\r\n                        let controlPointY =\r\n                            (Constants.point6Pos.y + Constants.point5Pos.y) / 2;\r\n                        this.graphicsNodes[step - 1].quadraticCurveTo(\r\n                            controlPointX,\r\n                            controlPointY + 6,\r\n                            Constants.point6Pos.x,\r\n                            Constants.point6Pos.y\r\n                        );\r\n                    }\r\n                    break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n        this.graphicsNodes[step - 1].stroke();\r\n    }\r\n\r\n\r\n    protected update(dt: number): void {\r\n        this.handleDrawWithTouchPoint();\r\n        this.hand.active && this.handleDrawLine(Constants.pointA_Pos, this.hand.getPosition());\r\n    }\r\n}\r\n"]}