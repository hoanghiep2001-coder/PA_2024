{"version":3,"sources":["assets\\Script\\Controller\\Scratchable.js"],"names":["cc","Class","Component","properties","isDone","isWin","Boolean","eraserRadius","type","Int","start","percentToWin","mask","getComponentInChildren","Mask","graphics","_graphics","fillColor","color","reset","calculateProgress","isScratchable","hitItemCount","polygonPointsList","forEach","item","isHit","progress","length","fillInstantly","completed","node","dispatchEvent","Event","EventCustom","callbackFlag","clear","tempDrawPoints","initPolygonList","x","width","y","height","push","rect","scratchHole","pos","convertToNodeSpaceAR","stencil","len","circle","fill","xFlag","yFlag","prevPos","curPos","moveTo","lineTo","lineWidth","lineCap","Graphics","LineCap","ROUND","lineJoin","LineJoin","strokeColor","stroke","Intersection","lineRect","resetProgress","clearInstantly","isInBound","point"],"mappings":"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","sourceRoot":"/","sourcesContent":["\ncc.Class({\n  extends: cc.Component,\n\n  properties: {\n    isDone: 0,\n    isWin: cc.Boolean,\n    eraserRadius: {\n      type: cc.Int,\n      default: 60,\n    },\n  },\n\n  start: function () {\n    this.percentToWin = 0.7;\n    let mask = this.getComponentInChildren(cc.Mask);\n    this.graphics = mask._graphics;\n    this.graphics.fillColor = cc.color(255, 255, 255, 0);\n    this.reset();\n  },\n\n  calculateProgress() {\n\n    if (!this.isScratchable) {\n      return;\n    }\n    let hitItemCount = 0;\n    this.polygonPointsList.forEach((item) => {\n      if (!item.isHit) return;\n      hitItemCount += 1;\n    });\n    this.progress = hitItemCount / this.polygonPointsList.length;\n\n    if (this.progress >= this.percentToWin) {\n      this.isWin = true;\n      this.isDone = 1;\n    }\n\n    if (this.isWin) {\n      this.fillInstantly();\n      this.completed = true;\n      this.isScratchable = false;\n      this.node.dispatchEvent(new cc.Event.EventCustom(\"completed\", this));\n    }\n  },\n\n  reset: function () {\n    this.callbackFlag = true;\n    this.graphics.clear();\n    this.tempDrawPoints = [];\n    this.polygonPointsList = [];\n    this.progress = 0;\n    this.completed = false;\n    this.isScratchable = true;\n    this.initPolygonList();\n  },\n\n  initPolygonList: function () {\n    for (let x = 0; x < this.node.width; x += this.eraserRadius) {\n      for (let y = 0; y < this.node.height; y += this.eraserRadius) {\n        this.polygonPointsList.push({\n          rect: cc.rect(\n            x - this.node.width / 2,\n            y - this.node.height / 2,\n            this.eraserRadius,\n            this.eraserRadius\n          ),\n          isHit: false,\n        });\n      }\n    }\n  },\n\n  scratchHole: function (pos) {\n    pos = this.node.convertToNodeSpaceAR(pos);\n    let stencil = this.graphics;\n    const len = this.tempDrawPoints.length;\n    this.tempDrawPoints.push(pos);\n\n    this.calculateProgress();\n\n    if (len <= 1) {\n      stencil.circle(pos.x, pos.y, this.eraserRadius / 2);\n      stencil.fill();\n\n      this.polygonPointsList.forEach((item) => {\n        if (item.isHit) return;\n        const xFlag =\n          pos.x > item.rect.x && pos.x < item.rect.x + item.rect.width;\n        const yFlag =\n          pos.y > item.rect.y && pos.y < item.rect.y + item.rect.height;\n        if (xFlag && yFlag) item.isHit = true;\n      });\n    } else {\n      let prevPos = this.tempDrawPoints[len - 2];\n      let curPos = this.tempDrawPoints[len - 1];\n\n      stencil.moveTo(prevPos.x, prevPos.y);\n      stencil.lineTo(curPos.x, curPos.y);\n      stencil.lineWidth = this.eraserRadius;\n      stencil.lineCap = cc.Graphics.LineCap.ROUND;\n      stencil.lineJoin = cc.Graphics.LineJoin.ROUND;\n      stencil.strokeColor = cc.color(255, 255, 255, 255);\n      stencil.stroke();\n\n      this.polygonPointsList.forEach((item) => {\n        item.isHit =\n          item.isHit || cc.Intersection.lineRect(prevPos, curPos, item.rect);\n      });\n    }\n  },\n\n  resetProgress: function () {\n    this.clearInstantly();\n    this.polygonPointsList = [];\n    this.tempDrawPoints = [];\n    this.progress = 0;\n    this.initPolygonList();\n  },\n\n  isInBound: function (point) {\n    return true;\n  },\n\n  clearInstantly: function () {\n    this.graphics.clear();\n  },\n\n  fillInstantly: function () {\n    this.graphics.moveTo(0, 0);\n    this.graphics.rect(0, 0, this.node.width, this.node.height);\n    this.graphics.fill();\n  },\n});\n"]}