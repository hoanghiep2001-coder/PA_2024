{"version":3,"sources":["assets\\Script\\MainGame\\Circle.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAIM,IAAA,KAAwB,EAAE,CAAC,UAAU,EAAnC,OAAO,aAAA,EAAE,QAAQ,cAAkB,CAAC;AAG5C;IAA4B,0BAAY;IAAxC;QAAA,qEA0DC;QAxDC,YAAM,GAAqB,EAAE,CAAC;QAE9B,iBAAW,GAAgB,EAAE,CAAC;QAI9B,WAAK,GAAY,IAAI,CAAC;QAEtB,qBAAe,GAAoB,IAAI,CAAC;QACxC,gBAAU,GAAe,CAAC,CAAC;QAE3B,YAAM,GAAY,KAAK,CAAC;;IA6C1B,CAAC;IA3CC,uBAAM,GAAN;QACE,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;IAC7B,CAAC;IAED,+BAAc,GAAd,UAAe,IAAa;QAC1B,IAAI,EAAE,GAAG,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC;QAC3C,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC;QAE/E,uCAAuC;QACvC,+CAA+C;QAC/C,+CAA+C;QAC/C,+CAA+C;QAC/C,IAAI;QAEJ,EAAE,CAAC,WAAW,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;QAChD,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;IACvC,CAAC;IAED,wBAAO,GAAP,UAAQ,IAAI;QACV,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;QACvB,IAAI,IAAI,GAAG,CAAC,EAAE;YACZ,IAAI,IAAI,IAAI,CAAC,EAAE;gBACb,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;gBACnB,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;aACpB;iBAAM;gBACL,IAAI,CAAC,UAAU,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC;aAC3B;SACF;IACH,CAAC;IAEO,2BAAU,GAAlB,UAAmB,IAAI;QACrB,IAAI,OAAO,GAAG,EAAE,CAAC,WAAW,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC;QACrD,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC7B,OAAO,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,cAAc,EAAE,CAAC,CAAC;QACnD,OAAO,CAAC,WAAW,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IAC5B,CAAC;IAED,6BAAY,GAAZ,UAAa,IAAI;QACf,IAAI,EAAE,GAAG,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC;QAC3C,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC;QAC5B,EAAE,CAAC,WAAW,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IACrC,CAAC;IAtDD;QADC,QAAQ,CAAC,EAAE,CAAC,WAAW,CAAC;0CACK;IAE9B;QADC,QAAQ,CAAC,EAAE,CAAC,MAAM,CAAC;+CACU;IAI9B;QADC,QAAQ,CAAC,EAAE,CAAC,IAAI,CAAC;yCACI;IARX,MAAM;QADlB,OAAO;OACK,MAAM,CA0DlB;IAAD,aAAC;CA1DD,AA0DC,CA1D2B,EAAE,CAAC,SAAS,GA0DvC;AA1DY,wBAAM","file":"","sourceRoot":"/","sourcesContent":["import { Constants } from \"../Data/constants\";\r\nimport { typeColorCircle } from \"./CircleEnums\";\r\nimport { tipeCircle } from \"./CircleEnums\";\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport class Circle extends cc.Component {\r\n  @property(cc.SpriteFrame)\r\n  sprite: cc.SpriteFrame[] = [];\r\n  @property(cc.Prefab)\r\n  circlesTipe: cc.Prefab[] = [];\r\n\r\n  \r\n  @property(cc.Node)\r\n  Blink: cc.Node = null;\r\n  \r\n  CircleTypeColor: typeColorCircle = null;\r\n  CircleType: tipeCircle = 0;\r\n  randomNumber: number;\r\n  inMove: boolean = false;\r\n\r\n  onLoad() {\r\n    this.setRandomColor(false);\r\n  }\r\n\r\n  setRandomColor(flag: boolean){\r\n    var sp = this.node.getComponent(cc.Sprite);\r\n    this.randomNumber = Math.floor(Math.random() * Math.floor(this.sprite.length));\r\n\r\n    // if(flag && this.randomNumber <= 0) {\r\n    //   this.randomNumber = this.randomNumber + 1;\r\n    // } else if (flag && this.randomNumber >= 6) {\r\n    //   this.randomNumber = this.randomNumber - 1;\r\n    // }\r\n\r\n    sp.spriteFrame = this.sprite[this.randomNumber];\r\n    this.setColorTipe(this.randomNumber);\r\n  }\r\n\r\n  setTipe(tipe) {\r\n    this.CircleType = tipe;\r\n    if (tipe > 0) {\r\n      if (tipe == 4) {\r\n        this.setTipeTMP(1);\r\n        this.setTipeTMP(2);\r\n      } else {\r\n        this.setTipeTMP(tipe - 1);\r\n      }\r\n    }\r\n  }\r\n\r\n  private setTipeTMP(tipe) {\r\n    var newNode = cc.instantiate(this.circlesTipe[tipe]);\r\n    newNode.setParent(this.node);\r\n    newNode.setContentSize(this.node.getContentSize());\r\n    newNode.setPosition(0, 0);\r\n  }\r\n\r\n  setColorTipe(tipe) {\r\n    var sp = this.node.getComponent(cc.Sprite);\r\n    this.CircleTypeColor = tipe;\r\n    sp.spriteFrame = this.sprite[tipe];\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n"]}