{"version":3,"sources":["assets\\Script\\Data\\Ultils.ts"],"names":[],"mappings":";;;;;;;AAAA,yCAAwC;AAElC,IAAA,KAAwB,EAAE,CAAC,UAAU,EAAnC,OAAO,aAAA,EAAE,QAAQ,cAAkB,CAAC;AAG5C,IAAM,wBAAwB,GAAG,UAAC,GAAY;IAC1C,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,qBAAS,CAAC,gBAAgB,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;QACxD,IAAI,WAAW,GAAG,qBAAS,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC;QAChD,IAAI,WAAW,CAAC,cAAc,EAAE,CAAC,UAAU,CAAC,GAAG,CAAC,EAAE;YAC9C,qBAAS,CAAC,gBAAgB,GAAG,IAAI,CAAC;YAClC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,qBAAS,CAAC,sBAAsB,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;gBAC9D,IAAI,CAAC,qBAAS,CAAC,sBAAsB,CAAC,CAAC,CAAC,EAAE;oBACtC,qBAAS,CAAC,sBAAsB,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC;oBAC3C,qBAAS,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;oBAExC,qBAAS,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,EAAE,sBAAsB,EAAE,KAAK,CAAC,CAAC;oBAC1E,qBAAS,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;oBAErC,IAAI,qBAAS,CAAC,sBAAsB,CAAC,KAAK,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,KAAK,IAAI,EAAf,CAAe,CAAC,EAAE;wBACnE,qBAAS,CAAC,eAAe,GAAG,IAAI,CAAC;qBACpC;oBACD,MAAM;iBACT;aACJ;YACD,MAAM;SACT;KACJ;AACL,CAAC,CAAA;AAED,IAAM,kBAAkB,GAAG,UAAC,GAAY,EAAE,MAAe;IACrD,IAAG,GAAG,CAAC,UAAU,CAAC,MAAM,CAAC,EAAE;QACvB,qBAAS,CAAC,aAAa,GAAG,IAAI,CAAC;KAClC;AACL,CAAC,CAAA;AAED,IAAM,SAAS,GAAG;AACd,sDAAsD;AACtD,yCAAyC;CAC5C,CAAA;AAED;IAAA;IAIA,CAAC;IAFS,gBAAS,GAAqB,SAAS,CAAC;IAElD,aAAC;CAJD,AAIC,IAAA;AAJY,wBAAM","file":"","sourceRoot":"/","sourcesContent":["import { Constants } from \"./constants\";\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n\r\nconst checkCollideBubblePoints = (bdx: cc.Rect): void => {\r\n    for (let i = 0; i < Constants.cleanHair_Points.length; i++) {\r\n        let currentNode = Constants.cleanHair_Points[i];\r\n        if (currentNode.getBoundingBox().intersects(bdx)) {\r\n            Constants.isTouchCleanHair = true;\r\n            for (let j = 0; j < Constants.cleanHair_PointsStatus.length; j++) {\r\n                if (!Constants.cleanHair_PointsStatus[j]) {\r\n                    Constants.cleanHair_PointsStatus[j] = true;\r\n                    Constants.cleanHair_Points.splice(i, 1);\r\n\r\n                    Constants.spine_Bubbles[i].setAnimation(0, \"action03_only_bubble\", false);\r\n                    Constants.spine_Bubbles.splice(i, 1);\r\n\r\n                    if (Constants.cleanHair_PointsStatus.every(status => status === true)) {\r\n                        Constants.isDoneCleanHair = true;\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n            break;\r\n        }\r\n    }\r\n}\r\n\r\nconst checkCollideMaggot = (bdx: cc.Rect, maggot: cc.Rect): void => {\r\n    if(bdx.intersects(maggot)) {\r\n        Constants.isTouchMaggot = true;\r\n    }\r\n}\r\n\r\nconst TouchArea = {\r\n    // checkCollideBubblePoints: checkCollideBubblePoints,\r\n    // checkCollideMaggot: checkCollideMaggot\r\n}\r\n\r\nexport class Ultils {\r\n\r\n   static TouchArea: typeof TouchArea = TouchArea;\r\n\r\n}"]}