{"version":3,"sources":["packages\\neutrinoparticles\\runtime\\NeutrinoContext.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import * as Neutrino from './neutrinoparticles.js/neutrinoparticles.umd';\r\n\r\nconst {ccclass, mixins} = cc._decorator;\r\n\r\nconst materialDescs = [\r\n    { uuid: '97KN8e0flOjpWQPC0zIOoR', name: 'NeutrinoNormal' },\r\n    { uuid: 'c5T9A8r8FHY5DeeJSjTP0k', name: 'NeutrinoNormalPremul' },\r\n    { uuid: '369MNzEcVL3Jj5UF9gvCfR', name: 'NeutrinoAdd' },\r\n    { uuid: 'baTMgpxLlFqrJF04VcDxPF', name: 'NeutrinoAddPremul' },\r\n    { uuid: 'a74/Nyb0dDYrv5zAZoAlVP', name: 'NeutrinoMultiply' },\r\n    { uuid: '04mmqJExZKjqgZH4ovqGK7', name: 'NeutrinoMultiplyPremul' },\r\n];\r\n\r\nconst materialsBundleName = 'neutrinoparticles-materials';\r\n\r\n@ccclass('NeutrinoContext')\r\n@mixins(cc.EventTarget)\r\nexport default class NeutrinoContext {\r\n    neutrinoContext = new Neutrino.Context();\r\n    materials = new Array(materialDescs.length);\r\n\r\n    private static _singleInstance: NeutrinoContext;\r\n    private _materialsLeftToLoad = this.materials.length;\r\n    private _bundlesLeftToLoad = 0;\r\n    private _noiseGenerationStep = null;\r\n    private _noiseGenerated = false;\r\n    private _texturesBundle = null;\r\n\r\n    constructor () {\r\n        cc.EventTarget.call(this);\r\n\r\n        if (CC_DEV) {\r\n            this._startLoadingForDev();\r\n        } else {\r\n            this._startLoadingForBuild();\r\n        }\r\n    }\r\n\r\n    static instance() : NeutrinoContext {\r\n        if (!this._singleInstance) {\r\n            this._singleInstance = new NeutrinoContext();\r\n        }\r\n        return this._singleInstance;\r\n    }\r\n\r\n    loaded() {\r\n        return this._materialsLeftToLoad === 0 && this._bundlesLeftToLoad === 0;\r\n    }\r\n\r\n    startNoiseTextureGeneration() {\r\n        if (this._noiseGenerated) {\r\n            return;\r\n        }\r\n\r\n        const _this = this;\r\n\r\n        let noiseGenerator = new this.neutrinoContext.NoiseGenerator();\r\n        let timerId;\r\n        \r\n        this._noiseGenerationStep = () => {\r\n            for (let i = 0; i < 100; ++i) {\r\n                if (noiseGenerator.step()) {\r\n                    clearInterval(timerId);\r\n                    _this._noiseGenerationStep = null;\r\n                    _this._noiseGenerated = true;\r\n                    noiseGenerator = null;\r\n                    break;\r\n                }\r\n            }\r\n        };\r\n\r\n        timerId = setInterval(this._noiseGenerationStep, 0);\r\n    }\r\n\r\n    ensureNoiseTextureIsGenerated() {\r\n        if (this._noiseGenerated) {\r\n            return;\r\n        }\r\n\r\n        if (!this._noiseGenerationStep) {\r\n            this.startNoiseTextureGeneration();\r\n        }\r\n        \r\n        while (this._noiseGenerationStep) {\r\n            this._noiseGenerationStep();\r\n        }\r\n    }\r\n\r\n    texturesBundle() {\r\n        return this._texturesBundle;\r\n    }\r\n\r\n    private _startLoadingForDev() {\r\n        let _this = this;        \r\n\r\n        for (let matIndex = 0; matIndex < this.materials.length; ++matIndex) {\r\n            let _matIndex = matIndex;\r\n\r\n            cc.assetManager.loadAny(materialDescs[matIndex].uuid, (err, material) => {\r\n                if (err) {\r\n                    cc.error(`NeutrinoContext: can't load material with UUID='${materialDescs[_matIndex].uuid}'. ${err}`);\r\n                    return;\r\n                }\r\n                _this._materialLoaded(material, _matIndex);\r\n            });   \r\n        }\r\n    }\r\n\r\n    private _startLoadingForBuild() {\r\n        let _this = this;  \r\n\r\n        ++this._bundlesLeftToLoad;\r\n        cc.assetManager.loadBundle(materialsBundleName, (err, bundle) => {\r\n            if (err) {\r\n                cc.error(`NeutrinoContext: failed to load bundle '${materialsBundleName}'. ${err}`);\r\n                return;\r\n            }\r\n\r\n            --this._bundlesLeftToLoad;\r\n\r\n            for (let matIndex = 0; matIndex < this.materials.length; ++matIndex) {\r\n                let _matIndex = matIndex;\r\n    \r\n                bundle.load(materialDescs[matIndex].name, (err, material) => {\r\n                    if (err) {\r\n                        cc.error(`NeutrinoContext: can't load material '${materialDescs[_matIndex].name}'. ${err}`);\r\n                        return;\r\n                    }\r\n                    _this._materialLoaded(material, _matIndex);\r\n                });   \r\n            }\r\n        });\r\n\r\n        ++this._bundlesLeftToLoad;\r\n        const texturesBundleName = 'neutrinoparticles/textures';\r\n        cc.assetManager.loadBundle(texturesBundleName, (err, bundle) => {\r\n            if (err) {\r\n                cc.error(`NeutrinoContext: failed to load bundle '${texturesBundleName}'`);\r\n                return;\r\n            }\r\n\r\n            cc.log(`NeutrinoContext: Loaded bundle ${texturesBundleName}`);\r\n\r\n            --this._bundlesLeftToLoad;\r\n            this._texturesBundle = bundle;\r\n            this._checkAndEmitLoadedStatus();\r\n        });\r\n    }\r\n\r\n    private _materialLoaded(material, index) {\r\n        this.materials[index] = material;\r\n        --this._materialsLeftToLoad;\r\n        this._checkAndEmitLoadedStatus();       \r\n    }\r\n\r\n    private _checkAndEmitLoadedStatus() {\r\n        if (this.loaded()) {\r\n            this.emit('loaded');\r\n        }\r\n    }\r\n}\r\n\r\ncc.game.once(cc.game.EVENT_GAME_INITED, () => {\r\n    NeutrinoContext.instance().startNoiseTextureGeneration();\r\n});"]}