{"version":3,"sources":["packages\\neutrinoparticles\\runtime\\NeutrinoComponent.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import NeutrinoSettings from './NeutrinoSettings';\r\nimport NeutrinoContext from './NeutrinoContext';\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n// Cached temporary values.\r\nconst _gnwprMat0 = new cc.Mat4();\r\nconst _gnwprMat1 = new cc.Mat4();\r\nconst _gnwprQuat0 = new cc.Quat();\r\nconst _gnwprVec0 = new cc.Vec3();\r\nconst _uWPM = new cc.Mat4();\r\nconst _nwpos = [0, 0, 0, 0];\r\nconst _nwrot = [0, 0, 0, 0];\r\n\r\nfunction propertyValueToNpValue(value: number | cc.Vec2 | cc.Vec3) {\r\n    if (value instanceof cc.Vec2) {\r\n        return [value.x, value.y];\r\n    } else if (value instanceof cc.Vec3) {\r\n        return [value.x, value.y, value.z];\r\n    } else {\r\n        return value;\r\n    }\r\n}\r\n\r\n@ccclass\r\nexport default abstract class NeutrinoComponent extends cc.RenderComponent {\r\n    context: NeutrinoContext = null;\r\n\r\n    private _neutrinoEffectModel = null;\r\n    private _neutrinoEffect = null;\r\n    private _spriteFrames: cc.SpriteFrame[] = null;\r\n    private _emitterPropsOnStart = {};\r\n    private _texturesRemap = null;\r\n    private _waitingForContext = false;\r\n\r\n    private _resetInProgress = false;\r\n    private _numTexturesLoading: number = 0;\r\n    private _errorOnLoad = false;\r\n\r\n    private _worldScale = new cc.Vec3();\r\n    private _destructed = false;\r\n\r\n    @property\r\n    private _serialized = false;\r\n\r\n    @property\r\n    private _worldParentId = '';\r\n\r\n    @property(cc.Node)\r\n    get worldParent() {\r\n        return this._findWorldParent();\r\n    }\r\n\r\n    set worldParent(value) {\r\n        this._worldParentId = value ? value.uuid : '';\r\n        this._waitForContextAndReset();\r\n\r\n        if (CC_EDITOR) {\r\n            const settings = NeutrinoSettings.instance();\r\n            if (settings) {\r\n                settings.defaultWorldParent = value;\r\n            }\r\n        }\r\n    }\r\n\r\n    @property\r\n    private _texturesPrefixPath = '';\r\n\r\n    @property\r\n    get texturesPrefixPath() {\r\n        return this._texturesPrefixPath;\r\n    }\r\n\r\n    set texturesPrefixPath(value) {\r\n        this._texturesPrefixPath = value;\r\n        this._waitForContextAndReset();\r\n\r\n        if (CC_EDITOR) {\r\n            const settings = NeutrinoSettings.instance();\r\n            if (settings) {\r\n                settings.defaultTexturesPrefixPath = value;\r\n            }\r\n        }\r\n    }\r\n\r\n    @property(cc.SpriteAtlas)\r\n    private _spriteAtlas: cc.SpriteAtlas =  null;\r\n\r\n    @property(cc.SpriteAtlas)\r\n    get spriteAtlas() {\r\n        return this._spriteAtlas;\r\n    }\r\n\r\n    set spriteAtlas(value) {\r\n        this._spriteAtlas = value;\r\n        this._waitForContextAndReset();\r\n\r\n        if (CC_EDITOR) {\r\n            const settings = NeutrinoSettings.instance();\r\n            if (settings) {\r\n                settings.defaultSpriteAtlas = value;\r\n            }\r\n        }\r\n    }\r\n\r\n    @property\r\n    private _pausedOnStart = false;\r\n\r\n    @property\r\n    get pausedOnStart() {\r\n        return this._pausedOnStart;\r\n    }\r\n    \r\n    set pausedOnStart(value) {\r\n        this._pausedOnStart = value;\r\n        this._waitForContextAndReset();\r\n    }\r\n\r\n    @property\r\n    _pausedGeneratorsOnStart = false;\r\n\r\n    @property\r\n    get pausedGeneratorsOnStart() {\r\n        return this._pausedGeneratorsOnStart;\r\n    }\r\n\r\n    set pausedGeneratorsOnStart(value) {\r\n        this._pausedGeneratorsOnStart = value;\r\n        this._waitForContextAndReset();\r\n    }\r\n\r\n    // If true, the component will be destroyed when the effect is empty.\r\n    @property\r\n    destroyWhenEmpty = false;\r\n\r\n    // If true, the node of the component will be destroyed when the effect is empty.\r\n    @property\r\n    destroyNodeWhenEmpty = false;\r\n\r\n    resetInEditor() {\r\n        this._waitForContextAndReset();\r\n    }\r\n\r\n    onLoad() {\r\n        this.context = NeutrinoContext.instance();\r\n        this.context.ensureNoiseTextureIsGenerated();\r\n\r\n        if (!this._serialized) {\r\n            this._serialized = true;\r\n            const settings = NeutrinoSettings.instance();\r\n\r\n            if (settings) {\r\n                this._texturesPrefixPath = settings.defaultTexturesPrefixPath;\r\n                this._spriteAtlas = settings.defaultSpriteAtlas;\r\n                if (settings.defaultWorldParent) {\r\n                    this._worldParentId = settings.defaultWorldParent.uuid;\r\n                }\r\n            }\r\n        }\r\n\r\n        this._waitForContextAndReset();\r\n    }\r\n\r\n    onDestroy() {\r\n        if (this._spriteFrames) {\r\n            this._spriteFrames.forEach((spriteFrame) => {\r\n                if (spriteFrame) {\r\n                    spriteFrame.decRef();\r\n                }\r\n            });\r\n            \r\n            this._spriteFrames.length = 0;\r\n        }\r\n\r\n        if (this._waitingForContext) {\r\n            this.context.off('loaded', this._reset, this);\r\n        }\r\n\r\n        this._destructed = true;\r\n    }\r\n\r\n    update(dt) {\r\n        if (!this._neutrinoEffect) {\r\n            return;\r\n        }\r\n\r\n        this._getNeutrinoWorldPositionRotation(_nwpos, _nwrot);\r\n        this._neutrinoEffect.update(dt, _nwpos, _nwrot);\r\n\r\n        const worldParent = this.worldParent;\r\n        if (worldParent) {\r\n            worldParent.getWorldMatrix(_uWPM);\r\n\r\n            this.materials.forEach((material) => {\r\n                material.setProperty('worldParentMat', _uWPM);\r\n            });\r\n        } else {\r\n            this.materials.forEach((material) => {\r\n                material.setProperty('worldParentMat', cc.Mat4.IDENTITY);\r\n            });\r\n        }\r\n\r\n        if (!CC_EDITOR && !this.paused()) {\r\n            if (this.destroyWhenEmpty || this.destroyNodeWhenEmpty) {\r\n                const empty = (this.getNumParticles() === 0);\r\n                if (empty) {\r\n                    if (this.destroyNodeWhenEmpty) {\r\n                        this.node.destroy();\r\n                    } else {\r\n                        this.destroy();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The component is fully loaded and ready to render.\r\n     * @method ready\r\n     * @return {Boolean} - true if the component is ready to render.\r\n     */\r\n    ready() {\r\n        return this._neutrinoEffect !== null;\r\n    }\r\n\r\n    /**\r\n     * Restarts the effect. Current position and rotation of the node is used\r\n     * to start simulating the effect.\r\n     * @method restart\r\n     */   \r\n    restart() {\r\n        this._getNeutrinoWorldPositionRotation(_nwpos, _nwrot);\r\n        this._neutrinoEffect.restart(_nwpos, _nwrot);\r\n    }\r\n\r\n    /**\r\n     * Effect jumps to the current position and rotation of the node without trail\r\n     * effect. Usually used as subsequent call of changing position and rotation.\r\n     * In other words teleports the effect to current position of the node.\r\n     * @method resetPositionRotation\r\n     */\r\n    resetPositionRotation() {\r\n        this._getNeutrinoWorldPositionRotation(_nwpos, _nwrot);\r\n        this._neutrinoEffect.resetPosition(_nwpos, _nwrot);\r\n    }\r\n\r\n    /**\r\n     * Pauses the effect. If effect is not loaded yet, it will be started paused.\r\n     * All particles are frozen when the effect is paused.\r\n     * @method pause\r\n     */\r\n    pause() {\r\n        if (this.ready()) {\r\n            this._neutrinoEffect.pauseAllEmitters();\r\n        }\r\n        this._pausedOnStart = true;\r\n    }\r\n\r\n    /**\r\n     * Unpauses the effect. If the effect is not loaded yet, is will be started unpaused.\r\n     * All particles continues to simulate when the effect is unpaused.\r\n     * @method unpause\r\n     */\r\n    unpause() {\r\n        if (this.ready()) {\r\n            this._neutrinoEffect.unpauseAllEmitters();\r\n        }\r\n        this._pausedOnStart = false;\r\n    }\r\n\r\n    /**\r\n     * Returns true if the effect is paused.\r\n     * @method paused\r\n     * @return {Boolean} - true, if the effect is paused.\r\n     */\r\n    paused() : boolean {\r\n        if (this.ready()) {\r\n            return this._neutrinoEffect.areAllEmittersPaused();\r\n        } else {\r\n            return this._pausedOnStart;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Pauses generators. If the effect is not loaded yet, it will be started with paused\r\n     * generators. When generators are paused, no new particles are created, however\r\n     * all created particles continue to simulate.\r\n     * @method pauseGenerators\r\n     */\r\n    pauseGenerators() {\r\n        if (this.ready()) {\r\n            this._neutrinoEffect.pauseGeneratorsInAllEmitters();\r\n        }\r\n        this._pausedGeneratorsOnStart = true;\r\n    }\r\n\r\n    /**\r\n     * Unpauses generators. If the effect is not loaded yet, it will be started with unpaused\r\n     * generators. When generators are unpaused, they generate new particles when\r\n     * necessary. \r\n     * @method unpauseGenerators\r\n     */\r\n    unpauseGenerators() {\r\n        if (this.ready()) {\r\n            this._neutrinoEffect.unpauseGeneratorsInAllEmitters();\r\n        }\r\n        this._pausedGeneratorsOnStart = false;\r\n    }\r\n\r\n    /**\r\n     * Returns true, if generators in the effect are paused.\r\n     * @method generatorsPaused\r\n     * @return {Boolean} - true, if generators are paused\r\n     */\r\n    generatorsPaused() : boolean {\r\n        if (this.ready()) {\r\n            return this._neutrinoEffect.areGeneratorsInAllEmittersPaused();\r\n        } else {\r\n            return this._pausedGeneratorsOnStart;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets emitter property in all standalone emitters in the effect.\r\n     * @method setPropertyInAllEmitters\r\n     * @param {string} name Name of the property to change.\r\n     * @param {Number | cc.Vec2 | cc.Vec3} value Value of the property.\r\n     * @example\r\n     * effect.setPropertyInAllEmitters('Color', new cc.Vec3(1, 0, 0));\r\n     */\r\n    setPropertyInAllEmitters(name: string, value: number | cc.Vec2 | cc.Vec3) {\r\n        const npValue = propertyValueToNpValue(value);\r\n\r\n        if (this.ready()) {\r\n            this._neutrinoEffect.setPropertyInAllEmitters(name, npValue);\r\n        } else {\r\n            this._emitterPropsOnStart[name] = npValue;\r\n        }\r\n\t}\r\n\r\n    /**\r\n     * Returns a number of active particles in the effect. You can use it to find out if the\r\n     * effect is finished playing.\r\n     * @return {Number} Number of active particles in the effect.\r\n     */\r\n    getNumParticles() : number {\r\n        if (this._neutrinoEffect) {\r\n            return this._neutrinoEffect.getNumParticles();\r\n        }\r\n\r\n        return 0;\r\n\t}\r\n\r\n    /**\r\n     * This method is an override of RenderComponent._checkBacth (thank you guys for great spelling!)\r\n     * Here we ignore materials and just check cullingMask. The rest of materials\r\n     * check will be in NeutrinoAssembler.fillBuffers().\r\n     */\r\n    _checkBacth (renderer, cullingMask) {\r\n        if (renderer.cullingMask !== cullingMask) {\r\n            renderer._flush();\r\n            renderer.cullingMask = cullingMask;\r\n        }\r\n\r\n        // NeutrinoComponent don't use renderer.node and it can be unchanged.\r\n        // Setting up this property should be done due to consistency with\r\n        // other components and their behavior. However, it will break Spine\r\n        // integration which doesn't expect that attached components will change\r\n        // the renderer.node.\r\n        \r\n        //renderer.node = renderer._dummyNode;\r\n    }\r\n\r\n    private _waitForContextAndReset() {\r\n        if (!this.context) {\r\n            return;\r\n        }\r\n\r\n        if (!this.context.loaded()) {\r\n            this._waitingForContext = true;\r\n            this.context.once('loaded', this._reset, this);\r\n            return;\r\n        }\r\n\r\n        this._reset();\r\n    }\r\n\r\n    /**\r\n     * Resets the component: tries to recreate NeutrinoEffect and reload all resources.\r\n     */\r\n    private _reset() {\r\n        if (this._resetInProgress || this._destructed) {\r\n            return;\r\n        }\r\n\r\n        this._waitingForContext = false;\r\n\r\n        let EffectClass = this.getEffectClass();\r\n\r\n        if (!EffectClass) {\r\n            cc.error(`${this.__classname__}: you shouldn't use NeutrinoComponent by itself. Use generated effect classes instead.`);\r\n            return;\r\n        }\r\n\r\n        this._resetInProgress = true;\r\n        this._errorOnLoad = false;\r\n\r\n        this._neutrinoEffectModel = new EffectClass(this.context.neutrinoContext);\r\n        this._neutrinoEffect = null;\r\n        \r\n        // Load textures.\r\n        const numTextures = this._neutrinoEffectModel.textures.length;\r\n        this._spriteFrames = new Array(numTextures);\r\n        this._numTexturesLoading = this._spriteFrames.length;\r\n\r\n        for (let texIndex = 0; texIndex < numTextures; ++texIndex) {\r\n            const texturePath = this._texturesPrefixPath + this._neutrinoEffectModel.textures[texIndex];\r\n            const texturePathNoExt = texturePath.replace(/\\.[^/.]+$/, \"\");\r\n\r\n            if (this.spriteAtlas) {\r\n                const spriteFrame = this.spriteAtlas.getSpriteFrame(texturePathNoExt);\r\n                if (spriteFrame) {\r\n                    spriteFrame.addRef();\r\n                    this._spriteFrames[texIndex] = spriteFrame;\r\n                    --this._numTexturesLoading;    \r\n                } else {\r\n                    cc.warn(`${this.__classname__}: Can't load sprite '${texturePathNoExt}' from sprite atlas. Will try to load single texture.`);\r\n                    this._loadTexture(texIndex, texturePathNoExt);\r\n                }\r\n            } else {\r\n                this._loadTexture(texIndex, texturePathNoExt);\r\n            }\r\n        }\r\n\r\n        if (this._numTexturesLoading === 0) {\r\n            // TODO: deffer this to the end of the frame\r\n            this._onTexturesLoaded();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Requests standalone texture for load.\r\n     */\r\n    private _loadTexture(texIndex: number, texturePath: string) {\r\n        const _this = this;\r\n\r\n        const texturesDb = this.getTexturesDatabase();\r\n        const textureDesc = texturesDb.find(tex => tex.path === texturePath);\r\n\r\n        const textureLoadFinished = () => {\r\n            --_this._numTexturesLoading;\r\n            \r\n            if (_this._numTexturesLoading === 0) {\r\n                _this._onTexturesLoaded();\r\n            }\r\n        };\r\n\r\n        if (!textureDesc) {\r\n            cc.error(`${this.__classname__}: Can't find texture '${texturePath}.`);\r\n            this._errorOnLoad = true;\r\n            textureLoadFinished();\r\n            return;\r\n        }\r\n\r\n        if (CC_DEV) {\r\n            cc.assetManager.loadAny(textureDesc.uuid, (err, spriteFrame) => {\r\n                if (this._destructed) {\r\n                    return;\r\n                }\r\n\r\n                if (err) {\r\n                    cc.error(`${_this.__classname__}: Can't load texture '${texturePath}'. ${err}`);\r\n                    _this._errorOnLoad = true;\r\n                } else if (!spriteFrame) {\r\n                    // Redundant check to remove error on multiple reloading in row.\r\n                    cc.warn(`${_this.__classname__}: Loading flow wrong behavior found #1 (don't worry about it)`);\r\n                    _this._errorOnLoad = true;\r\n                } else {\r\n                    if (spriteFrame instanceof cc.Texture2D) {\r\n                        spriteFrame = new cc.SpriteFrame(spriteFrame);\r\n                    }\r\n                    spriteFrame.addRef();\r\n\r\n                    if (!_this._spriteFrames) {\r\n                        // Redundant check to remove error on multiple reloading in row.\r\n                        cc.warn(`${_this.__classname__}: Loading flow wrong behavior found #2 (don't worry about it)`);\r\n                        _this._errorOnLoad = true;\r\n                    } else {\r\n                        _this._spriteFrames[texIndex] = spriteFrame;\r\n                    }\r\n                }\r\n    \r\n                textureLoadFinished();\r\n            });\r\n        } else {\r\n            this.context.texturesBundle().load(textureDesc.path, cc.SpriteFrame, (err, spriteFrame) => {\r\n                if (this._destructed) {\r\n                    return;\r\n                }\r\n\r\n                if (err) {\r\n                    cc.error(`${_this.__classname__}: Can't load sprite frame '${texturePath}'. ${err}`);\r\n                    _this._errorOnLoad = true;\r\n                } else {\r\n                    spriteFrame.addRef();\r\n                    _this._spriteFrames[texIndex] = spriteFrame;\r\n                }\r\n    \r\n                textureLoadFinished();\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * When everything is loaded - create neutrino effect.\r\n     */\r\n    private _onTexturesLoaded() {\r\n        if (this._errorOnLoad) {\r\n            this._resetInProgress = false;\r\n            return;\r\n        }\r\n\r\n        this.materials.length = 0;\r\n        \r\n        let materialsSetupError = false;\r\n        \r\n        this._neutrinoEffectModel.renderStyles.forEach((renderStyle, renderStyleIndex) => {\r\n            const texIndex = renderStyle.textureIndices[0];\r\n            const spriteFrame = this._spriteFrames[texIndex];\r\n            if (!spriteFrame) {\r\n                // Redundant check to remove error on multiple reloading in row.\r\n                cc.warn(`${this.__classname__}: Loading flow wrong behavior found #3 (don't worry about it)`);\r\n                materialsSetupError = true;\r\n                return;\r\n            }\r\n            const texture = spriteFrame.getTexture();\r\n            if (!texture) {\r\n                // Redundant check to remove error on multiple reloading in row.\r\n                cc.warn(`${this.__classname__}: Loading flow wrong behavior found #4 (don't worry about it)`);\r\n                materialsSetupError = true;\r\n                return;\r\n            }\r\n\r\n            const materialIndex = this._neutrinoEffectModel.materials[renderStyle.materialIndex];\r\n            const material = this.context.materials[materialIndex * 2 +\r\n                (texture.hasPremultipliedAlpha() ? 1 : 0)];\r\n            if (!material) {\r\n                // Redundant check to remove error on multiple reloading in row.\r\n                cc.warn(`${this.__classname__}: Loading flow wrong behavior found #5 (don't worry about it)`);\r\n                materialsSetupError = true;\r\n                return;\r\n            }\r\n            const matVar = this.setMaterial(renderStyleIndex, material);\r\n            matVar.setProperty('texture', texture);\r\n        }, this);\r\n\r\n        if (materialsSetupError) {\r\n            this._resetInProgress = false;\r\n            return;\r\n        }\r\n\r\n        this._initTexturesRemap();\r\n\r\n        this._getNeutrinoWorldPositionRotation(_nwpos, _nwrot);\r\n        this._neutrinoEffect = this._neutrinoEffectModel.createWGLInstance(\r\n            _nwpos, _nwrot, this._assembler,\r\n            {\r\n                paused: this._pausedOnStart,\r\n                generatorsPaused: this._pausedGeneratorsOnStart\r\n            });\r\n\r\n        this._neutrinoEffect.texturesRemap = this._texturesRemap;\r\n\r\n        for (let prop in this._emitterPropsOnStart) {\r\n            this._neutrinoEffect.setPropertyInAllEmitters(prop, \r\n                this._emitterPropsOnStart[prop]);\r\n        }\r\n\r\n        this._emitterPropsOnStart = {};\r\n\r\n        this._resetInProgress = false;\r\n    }\r\n\r\n    /**\r\n     * In case some of textures are placed on atlases we need to prepare remapping structure for\r\n     * neutrinoparticles.js.\r\n     */\r\n    private _initTexturesRemap() {\r\n        let remapNeeded = false;\r\n        for (let texIndex = 0; texIndex < this._spriteFrames.length; ++texIndex) {\r\n            const spriteFrame = this._spriteFrames[texIndex];\r\n            if (spriteFrame.uv[6] !== 1 ||\r\n                spriteFrame.uv[0] !== 0 ||\r\n                spriteFrame.uv[7] !== 0 ||\r\n                spriteFrame.uv[1] !== 1) {\r\n                    remapNeeded = true;\r\n                    break;\r\n                }\r\n        }\r\n\r\n        if (!remapNeeded) {\r\n            this._texturesRemap = [];\r\n            return;\r\n        }\r\n\r\n        this._texturesRemap = new Array(this._spriteFrames.length);\r\n\r\n        for (let texIndex = 0; texIndex < this._spriteFrames.length; ++texIndex) \r\n\t\t{\r\n\t\t\tlet spriteFrame = this._spriteFrames[texIndex];\r\n\r\n\t\t\tthis._texturesRemap[texIndex] = new this.context.neutrinoContext.SubRect(\r\n                spriteFrame.uv[0], 1 - spriteFrame.uv[1],\r\n                spriteFrame.uv[6] - spriteFrame.uv[0],\r\n                spriteFrame.uv[1] - spriteFrame.uv[7]);\r\n\t\t}\r\n    }\r\n\r\n    private _getNeutrinoWorldPositionRotation(position: number[], rotation: number[]) {\r\n        const worldMatrix = _gnwprMat0;\r\n        const worldRotation =_gnwprQuat0;\r\n        const worldPosition = _gnwprVec0;\r\n        const worldScale = this._worldScale;\r\n\r\n        this.node.getWorldMatrix(worldMatrix);\r\n\r\n        const worldParent = this.worldParent;\r\n        if (worldParent) {\r\n            const worldParentMatrix = _gnwprMat1;\r\n            worldParent.getWorldMatrix(worldParentMatrix);\r\n            cc.Mat4.invert(worldParentMatrix, worldParentMatrix);\r\n            cc.Mat4.multiply(worldMatrix, worldParentMatrix, worldMatrix);\r\n        }\r\n\r\n        cc.Mat4.getRotation(worldRotation, worldMatrix);\r\n        worldMatrix.getTranslation(worldPosition);\r\n        worldMatrix.getScale(worldScale);\r\n\r\n        position[0] = worldPosition.x / worldScale.x;\r\n        position[1] = worldPosition.y / worldScale.y;\r\n        position[2] = worldPosition.z / worldScale.z;\r\n        rotation[0] = worldRotation.x;\r\n        rotation[1] = worldRotation.y;\r\n        rotation[2] = worldRotation.z;\r\n        rotation[3] = worldRotation.w;\r\n    }\r\n\r\n    private _findWorldParent() {\r\n\r\n        let node = this.node;\r\n        do {\r\n            if (node.uuid == this._worldParentId) {\r\n                return node;\r\n            }\r\n\r\n            node = node.parent;\r\n        } while (node);\r\n\r\n        return null;\r\n    }\r\n\r\n    abstract getEffectClass(): any;\r\n    abstract getTexturesDatabase() : any;\r\n}\r\n\r\n"]}