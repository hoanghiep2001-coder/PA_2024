
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/__qc_index__.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}
require('./assets/Script/Controller/BaseController');
require('./assets/Script/Controller/BossController');
require('./assets/Script/Controller/CmoboController');
require('./assets/Script/Controller/CoinController');
require('./assets/Script/Controller/GameController');
require('./assets/Script/Controller/GamePlay');
require('./assets/Script/Controller/LoadFoodController');
require('./assets/Script/Controller/SpawnController');
require('./assets/Script/Controller/TankController');
require('./assets/Script/Controller/TouchAreaController');
require('./assets/Script/Controller/vFxController');
require('./assets/Script/Data/IronSource');
require('./assets/Script/Data/Ultils');
require('./assets/Script/Data/constants');
require('./assets/Script/Other/Army');
require('./assets/Script/Other/CTA');
require('./assets/Script/Plugin/AudioManager');
require('./assets/Script/Plugin/Responsive');
require('./assets/Script/Plugin/Singleton');
require('./assets/neutrinoparticles/components/NeutrinoEffect_Blast03');
require('./assets/neutrinoparticles/components/NeutrinoEffect_Fireworks01');
require('./assets/neutrinoparticles/components/NeutrinoEffect_Sparks burst');
require('./assets/neutrinoparticles/components/NeutrinoEffect_Sparks_epic');
require('./assets/neutrinoparticles/exported_effects/Blast03');
require('./assets/neutrinoparticles/exported_effects/Fireworks01');
require('./assets/neutrinoparticles/exported_effects/Sparks burst');
require('./assets/neutrinoparticles/exported_effects/Sparks_epic');
require('./assets/neutrinoparticles/textures');
require('./neutrinoparticles-runtime/NeutrinoAssembler');
require('./neutrinoparticles-runtime/NeutrinoAssemblerJSB');
require('./neutrinoparticles-runtime/NeutrinoAssemblerWebGL');
require('./neutrinoparticles-runtime/NeutrinoComponent');
require('./neutrinoparticles-runtime/NeutrinoContext');
require('./neutrinoparticles-runtime/NeutrinoSettings');
require('./neutrinoparticles-runtime/neutrinoparticles.js/neutrinoparticles.umd');

                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/neutrinoparticles-runtime/NeutrinoContext.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'c5500GPiiNIKKYfuHMFpUCR', 'NeutrinoContext');
// NeutrinoContext.ts

"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var Neutrino = require("./neutrinoparticles.js/neutrinoparticles.umd");
var _a = cc._decorator, ccclass = _a.ccclass, mixins = _a.mixins;
var materialDescs = [
    { uuid: '97KN8e0flOjpWQPC0zIOoR', name: 'NeutrinoNormal' },
    { uuid: 'c5T9A8r8FHY5DeeJSjTP0k', name: 'NeutrinoNormalPremul' },
    { uuid: '369MNzEcVL3Jj5UF9gvCfR', name: 'NeutrinoAdd' },
    { uuid: 'baTMgpxLlFqrJF04VcDxPF', name: 'NeutrinoAddPremul' },
    { uuid: 'a74/Nyb0dDYrv5zAZoAlVP', name: 'NeutrinoMultiply' },
    { uuid: '04mmqJExZKjqgZH4ovqGK7', name: 'NeutrinoMultiplyPremul' },
];
var materialsBundleName = 'neutrinoparticles-materials';
var NeutrinoContext = /** @class */ (function () {
    function NeutrinoContext() {
        this.neutrinoContext = new Neutrino.Context();
        this.materials = new Array(materialDescs.length);
        this._materialsLeftToLoad = this.materials.length;
        this._bundlesLeftToLoad = 0;
        this._noiseGenerationStep = null;
        this._noiseGenerated = false;
        this._texturesBundle = null;
        cc.EventTarget.call(this);
        if (CC_DEV) {
            this._startLoadingForDev();
        }
        else {
            this._startLoadingForBuild();
        }
    }
    NeutrinoContext_1 = NeutrinoContext;
    NeutrinoContext.instance = function () {
        if (!this._singleInstance) {
            this._singleInstance = new NeutrinoContext_1();
        }
        return this._singleInstance;
    };
    NeutrinoContext.prototype.loaded = function () {
        return this._materialsLeftToLoad === 0 && this._bundlesLeftToLoad === 0;
    };
    NeutrinoContext.prototype.startNoiseTextureGeneration = function () {
        if (this._noiseGenerated) {
            return;
        }
        var _this = this;
        var noiseGenerator = new this.neutrinoContext.NoiseGenerator();
        var timerId;
        this._noiseGenerationStep = function () {
            for (var i = 0; i < 100; ++i) {
                if (noiseGenerator.step()) {
                    clearInterval(timerId);
                    _this._noiseGenerationStep = null;
                    _this._noiseGenerated = true;
                    noiseGenerator = null;
                    break;
                }
            }
        };
        timerId = setInterval(this._noiseGenerationStep, 0);
    };
    NeutrinoContext.prototype.ensureNoiseTextureIsGenerated = function () {
        if (this._noiseGenerated) {
            return;
        }
        if (!this._noiseGenerationStep) {
            this.startNoiseTextureGeneration();
        }
        while (this._noiseGenerationStep) {
            this._noiseGenerationStep();
        }
    };
    NeutrinoContext.prototype.texturesBundle = function () {
        return this._texturesBundle;
    };
    NeutrinoContext.prototype._startLoadingForDev = function () {
        var _this = this;
        var _loop_1 = function (matIndex) {
            var _matIndex = matIndex;
            cc.assetManager.loadAny(materialDescs[matIndex].uuid, function (err, material) {
                if (err) {
                    cc.error("NeutrinoContext: can't load material with UUID='" + materialDescs[_matIndex].uuid + "'. " + err);
                    return;
                }
                _this._materialLoaded(material, _matIndex);
            });
        };
        for (var matIndex = 0; matIndex < this.materials.length; ++matIndex) {
            _loop_1(matIndex);
        }
    };
    NeutrinoContext.prototype._startLoadingForBuild = function () {
        var _this_1 = this;
        var _this = this;
        ++this._bundlesLeftToLoad;
        cc.assetManager.loadBundle(materialsBundleName, function (err, bundle) {
            if (err) {
                cc.error("NeutrinoContext: failed to load bundle '" + materialsBundleName + "'. " + err);
                return;
            }
            --_this_1._bundlesLeftToLoad;
            var _loop_2 = function (matIndex) {
                var _matIndex = matIndex;
                bundle.load(materialDescs[matIndex].name, function (err, material) {
                    if (err) {
                        cc.error("NeutrinoContext: can't load material '" + materialDescs[_matIndex].name + "'. " + err);
                        return;
                    }
                    _this._materialLoaded(material, _matIndex);
                });
            };
            for (var matIndex = 0; matIndex < _this_1.materials.length; ++matIndex) {
                _loop_2(matIndex);
            }
        });
        ++this._bundlesLeftToLoad;
        var texturesBundleName = 'neutrinoparticles/textures';
        cc.assetManager.loadBundle(texturesBundleName, function (err, bundle) {
            if (err) {
                cc.error("NeutrinoContext: failed to load bundle '" + texturesBundleName + "'");
                return;
            }
            cc.log("NeutrinoContext: Loaded bundle " + texturesBundleName);
            --_this_1._bundlesLeftToLoad;
            _this_1._texturesBundle = bundle;
            _this_1._checkAndEmitLoadedStatus();
        });
    };
    NeutrinoContext.prototype._materialLoaded = function (material, index) {
        this.materials[index] = material;
        --this._materialsLeftToLoad;
        this._checkAndEmitLoadedStatus();
    };
    NeutrinoContext.prototype._checkAndEmitLoadedStatus = function () {
        if (this.loaded()) {
            this.emit('loaded');
        }
    };
    var NeutrinoContext_1;
    NeutrinoContext = NeutrinoContext_1 = __decorate([
        ccclass('NeutrinoContext'),
        mixins(cc.EventTarget)
    ], NeutrinoContext);
    return NeutrinoContext;
}());
exports.default = NeutrinoContext;
cc.game.once(cc.game.EVENT_GAME_INITED, function () {
    NeutrinoContext.instance().startNoiseTextureGeneration();
});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/neutrinoparticles-runtime/neutrinoparticles.js/neutrinoparticles.umd.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'ab558HOKv9Bq5K2NwBWDZL+', 'neutrinoparticles.umd');
// neutrinoparticles.js/neutrinoparticles.umd.js

"use strict";

(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) : typeof define === 'function' && define.amd ? define(['exports'], factory) : (global = global || self, factory(global.Neutrino = {}));
})(void 0, function (exports) {
  'use strict';

  function Context() {
    var ctx = this;

    this.equalv3_ = function (a, b) {
      return a[0] == b[0] && a[1] == b[1] && a[2] == b[2];
    };

    this.equalq_ = function (a, b) {
      return a[0] == b[0] && a[1] == b[1] && a[2] == b[2] && a[3] == b[3];
    };

    this.a = function (r, a, b) {
      r[0] = a[0] + b[0];
      r[1] = a[1] + b[1];
    };

    this.b = function (a, b) {
      return [a[0] + b[0], a[1] + b[1]];
    };

    this.y = function (r, a, s) {
      r[0] = a[0] + s;
      r[1] = a[1] + s;
    };

    this.z = function (a, s) {
      return [a[0] + s, a[1] + s];
    };

    this.c = function (r, a, b) {
      r[0] = a[0] + b[0];
      r[1] = a[1] + b[1];
      r[2] = a[2] + b[2];
    };

    this.d = function (a, b) {
      return [a[0] + b[0], a[1] + b[1], a[2] + b[2]];
    };

    this.C = function (r, a, s) {
      r[0] = a[0] + s;
      r[1] = a[1] + s;
      r[2] = a[2] + s;
    };

    this.D = function (a, s) {
      return [a[0] + s, a[1] + s, a[2] + s];
    };

    this.addq = function (r, a, b) {
      r[0] = a[0] + b[0];
      r[1] = a[1] + b[1];
      r[2] = a[2] + b[2];
      r[3] = a[3] + b[3];
    };

    this.addq_ = function (a, b) {
      return [a[0] + b[0], a[1] + b[1], a[2] + b[2], a[3] + b[3]];
    };

    this.e = function (r, a, b) {
      r[0] = a[0] - b[0];
      r[1] = a[1] - b[1];
    };

    this.f = function (a, b) {
      return [a[0] - b[0], a[1] - b[1]];
    };

    this.A = function (r, a, s) {
      r[0] = a[0] - s;
      r[1] = a[1] - s;
    };

    this.B = function (a, s) {
      return [a[0] - s, a[1] - s];
    };

    this.nf = function (r, s, a) {
      r[0] = s - a[0];
      r[1] = s - a[1];
    };

    this.of = function (s, a) {
      return [s - a[0], s - a[1]];
    };

    this.g = function (r, a, b) {
      r[0] = a[0] - b[0];
      r[1] = a[1] - b[1];
      r[2] = a[2] - b[2];
    };

    this.h = function (a, b) {
      return [a[0] - b[0], a[1] - b[1], a[2] - b[2]];
    };

    this.E = function (r, a, s) {
      r[0] = a[0] - s;
      r[1] = a[1] - s;
      r[2] = a[2] - s;
    };

    this.F = function (a, s) {
      return [a[0] - s, a[1] - s, a[2] - s];
    };

    this.rf = function (r, s, a) {
      r[0] = s - a[0];
      r[1] = s - a[1];
      r[2] = s - a[2];
    };

    this.sf = function (s, a) {
      return [s - a[0], s - a[1], s - a[2]];
    };

    this.i = function (r, a, b) {
      r[0] = a[0] * b[0];
      r[1] = a[1] * b[1];
    };

    this.j = function (a, b) {
      return [a[0] * b[0], a[1] * b[1]];
    };

    this.k = function (r, a, b) {
      r[0] = a[0] * b[0];
      r[1] = a[1] * b[1];
      r[2] = a[2] * b[2];
    };

    this.l = function (a, b) {
      return [a[0] * b[0], a[1] * b[1], a[2] * b[2]];
    };

    this.m = function (r, a, b) {
      r[0] = a[0] / b[0];
      r[1] = a[1] / b[1];
    };

    this.n = function (a, b) {
      return [a[0] / b[0], a[1] / b[1]];
    };

    this.o = function (r, a, b) {
      r[0] = a[0] / b[0];
      r[1] = a[1] / b[1];
      r[2] = a[2] / b[2];
    };

    this.p = function (a, b) {
      return [a[0] / b[0], a[1] / b[1], a[2] / b[2]];
    };

    this.H = function (a, b) {
      return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
    };

    this.dotq_ = function (a, b) {
      return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];
    };

    this.q = function (r, a, s) {
      r[0] = a[0] * s;
      r[1] = a[1] * s;
    };

    this.r = function (a, s) {
      return [a[0] * s, a[1] * s];
    };

    this.s = function (r, a, s) {
      r[0] = a[0] / s;
      r[1] = a[1] / s;
    };

    this.t = function (a, s) {
      return [a[0] / s, a[1] / s];
    };

    this.u = function (r, a, s) {
      r[0] = a[0] * s;
      r[1] = a[1] * s;
      r[2] = a[2] * s;
    };

    this.v = function (a, s) {
      return [a[0] * s, a[1] * s, a[2] * s];
    };

    this.w = function (r, a, s) {
      r[0] = a[0] / s;
      r[1] = a[1] / s;
      r[2] = a[2] / s;
    };

    this.x = function (a, s) {
      return [a[0] / s, a[1] / s, a[2] / s];
    };

    this.y = function (r, a, s) {
      r[0] = a[0] + s;
      r[1] = a[1] + s;
    };

    this.z = function (a, s) {
      return [a[0] + s, a[1] + s];
    };

    this.A = function (r, a, s) {
      r[0] = a[0] - s;
      r[1] = a[1] - s;
    };

    this.B = function (a, s) {
      return [a[0] - s, a[1] - s];
    };

    this.G = function (a, b) {
      return a[0] * b[0] + a[1] * b[1];
    };

    this.H = function (a, b) {
      return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
    };

    this.I = function (r, a, b) {
      var ax = a[0],
          ay = a[1],
          az = a[2];
      var bx = b[0],
          by = b[1],
          bz = b[2];
      r[0] = ay * bz - az * by;
      r[1] = az * bx - ax * bz;
      r[2] = ax * by - ay * bx;
    };

    this.J = function (a, b) {
      var ax = a[0],
          ay = a[1],
          az = a[2];
      var bx = b[0],
          by = b[1],
          bz = b[2];
      return [ay * bz - az * by, az * bx - ax * bz, ax * by - ay * bx];
    };

    this.K = function (a) {
      return Math.sqrt(a[0] * a[0] + a[1] * a[1]);
    };

    this.L = function (a) {
      return a[0] * a[0] + a[1] * a[1];
    };

    this.M = function (r, a) {
      ctx.q(r, a, 1.0 / ctx.K(a));
    };

    this.N = function (a) {
      return ctx.r(a, 1.0 / ctx.K(a));
    };

    this.O = function (a) {
      return Math.sqrt(a[0] * a[0] + a[1] * a[1] + a[2] * a[2]);
    };

    this.P = function (a) {
      return a[0] * a[0] + a[1] * a[1] + a[2] * a[2];
    };

    this.Q = function (r, a) {
      ctx.u(r, a, 1.0 / ctx.O(a));
    };

    this.R = function (a) {
      return ctx.v(a, 1.0 / ctx.O(a));
    };

    this.S = function (r, a) {
      r[0] = a[0];
      r[1] = a[1];
    };

    this.T = function (r, a) {
      r[0] = a[0];
      r[1] = a[1];
      r[2] = a[2];
    };

    this.U = function (r, a) {
      r[0] = a[0];
      r[1] = a[1];
      r[2] = a[2];
      r[3] = a[3];
    };

    this.V = function (r, x, y) {
      r[0] = x;
      r[1] = y;
    };

    this.W = function (r, x, y, z) {
      r[0] = x;
      r[1] = y;
      r[2] = z;
    };

    this.X = function (a, b, i) {
      return a + (b - a) * i;
    };

    this.Y = function (r, a, b, i) {
      r[0] = a[0] + (b[0] - a[0]) * i;
      r[1] = a[1] + (b[1] - a[1]) * i;
    };

    this.Z = function (a, b, i) {
      return [a[0] + (b[0] - a[0]) * i, a[1] + (b[1] - a[1]) * i];
    };

    this.ab = function (r, a, b, i) {
      r[0] = a[0] + (b[0] - a[0]) * i;
      r[1] = a[1] + (b[1] - a[1]) * i;
      r[2] = a[2] + (b[2] - a[2]) * i;
    };

    this.bb = function (a, b, i) {
      return [a[0] + (b[0] - a[0]) * i, a[1] + (b[1] - a[1]) * i, a[2] + (b[2] - a[2]) * i];
    };

    this.slerpq = function (r, x, y, a) {
      var cosTheta = ctx.dotq_(x, y);
      var z = [];

      if (cosTheta < 0) {
        ctx.negq(z, y);
        cosTheta = -cosTheta;
      } else {
        ctx.U(z, y);
      }

      if (1.0 - cosTheta < Number.EPSILON) {
        r[0] = ctx.X(x[0], y[0], a);
        r[1] = ctx.X(x[1], y[1], a);
        r[2] = ctx.X(x[2], y[2], a);
        r[3] = ctx.X(x[3], y[3], a);
      } else {
        var Md = ctx.acos_(cosTheta);
        ctx.mulqscalar(r, ctx.addq_(ctx.mulqscalar_(x, ctx.sin_((1.0 - a) * Md)), ctx.mulqscalar_(z, ctx.sin_(a * Md))), 1.0 / ctx.sin_(Md));
      }
    };

    this.slerpq_ = function (x, y, a) {
      var r = [];
      slerpq(r, x, y, a);
      return r;
    }; //trigonometry


    this.acos_ = function (a) {
      return Math.acos(a);
    };

    this.sin_ = function (a) {
      return Math.sin(a);
    };

    this.cos_ = function (a) {
      return Math.cos(a);
    }; // random


    this.taus88 = function (seed) {
      if (!seed) seed = 0;
      var value0, value1, value2;

      this.seed = function (s0) {
        s0 &= 0xFFFFFFFF;
        value0 = s0 < 2 ? s0 + 2 : s0;
        value1 = s0 < 8 ? s0 + 8 : s0;
        value2 = s0 < 16 ? s0 + 16 : s0;
      };

      this.rand = function () {
        var b = ((value0 << 13 ^ value0) & 0xFFFFFFFF) >>> 19;
        value0 = ((value0 & 0xFFFFFFFE) << 12 ^ b) >>> 0;
        b = ((value1 << 2 ^ value1) & 0xFFFFFFFF) >>> 25;
        value1 = ((value1 & 0xFFFFFFF8) << 4 ^ b) >>> 0;
        b = ((value2 << 3 ^ value2) & 0xFFFFFFFF) >>> 11;
        value2 = ((value2 & 0xFFFFFFF0) << 17 ^ b) >>> 0;
        var engine = (value0 ^ value1 ^ value2) >>> 0;
        return engine / 4294967296.0;
      };

      this.seed(seed);
    };

    this.cb = function (r, radius) {
      this.randv2gen(r, radius, function () {
        return Math.random();
      });
    };

    this.randv2gen = function (r, radius, gen) {
      var Md = gen() * Math.PI * 2.0;
      r[0] = radius * ctx.cos_(Md);
      r[1] = radius * ctx.sin_(Md);
    };

    this.db = function (r, radius) {
      this.randv3gen(r, radius, function () {
        return Math.random();
      });
    };

    this.randv3gen = function (r, radius, gen) {
      var theta = gen() * Math.PI * 2.0;
      var z = -1.0 + gen() * 2.0;
      var sqrtInvZ2 = radius * Math.sqrt(1.0 - z * z);
      r[0] = sqrtInvZ2 * ctx.cos_(theta);
      r[1] = sqrtInvZ2 * ctx.sin_(theta);
      r[2] = radius * z;
    };

    this.yb = function (r, x, y, Nd, gen) {
      var dispx = x + gen() * Nd[0];
      var dispy = y + gen() * Nd[1];
      ctx.V(r, dispx, dispy);
    };

    this.eb = function (r, a) {
      ctx.V(-a[0], -a[1]);
    };

    this.fb = function (a) {
      return [-a[0], -a[1]];
    };

    this.gb = function (r, a) {
      ctx.W(-a[0], -a[1], -a[2]);
    };

    this.hb = function (a) {
      return [-a[0], -a[1], -a[2]];
    };

    this.negq = function (r, a) {
      r[0] = -a[0];
      r[1] = -a[1];
      r[2] = -a[2];
      r[3] = -a[3];
    };

    this.negq_ = function (a) {
      return [-a[0], -a[1], -a[2], -a[3]];
    };

    this.ib = function (degrees) {
      return degrees / 180.0 * Math.PI;
    };

    this.jb = function (radians) {
      return radians / Math.PI * 180.0;
    };

    this.Ae = function (value) {
      return value < 0 ? -1 : 1;
    };

    this.ob = function (x, y, z, q) {
      var x2 = 2.0 * q[0] * q[0];
      var y2 = 2.0 * q[1] * q[1];
      var z2 = 2.0 * q[2] * q[2];
      var xy = 2.0 * q[0] * q[1];
      var xz = 2.0 * q[0] * q[2];
      var yz = 2.0 * q[1] * q[2];
      var wz = 2.0 * q[3] * q[2];
      var wy = 2.0 * q[3] * q[1];
      var wx = 2.0 * q[3] * q[0];
      x[0] = 1.0 - y2 - z2;
      x[1] = xy + wz;
      x[2] = xz - wy;
      y[0] = xy - wz;
      y[1] = 1.0 - x2 - z2;
      y[2] = yz + wx;
      z[0] = xz + wy;
      z[1] = yz - wx;
      z[2] = 1.0 - x2 - y2;
    };

    this.pb = function (q, x, y, z) {
      var tr = x[0] + y[1] + z[2];

      if (tr > 0) {
        var S = Math.sqrt(tr + 1.0) * 2;
        q[3] = 0.25 * S;
        q[0] = (y[2] - z[1]) / S;
        q[1] = (z[0] - x[2]) / S;
        q[2] = (x[1] - y[0]) / S;
      } else if (x[0] > y[1] & x[0] > z[2]) {
        var S = Math.sqrt(1.0 + x[0] - y[1] - z[2]) * 2;
        q[3] = (y[2] - z[1]) / S;
        q[0] = 0.25 * S;
        q[1] = (x[1] + y[0]) / S;
        q[2] = (z[0] + x[2]) / S;
      } else if (y[1] > z[2]) {
        var S = Math.sqrt(1.0 + y[1] - x[0] - z[2]) * 2;
        q[3] = (z[0] - x[2]) / S;
        q[0] = (x[1] + y[0]) / S;
        q[1] = 0.25 * S;
        q[2] = (y[2] + z[1]) / S;
      } else {
        var S = Math.sqrt(1.0 + z[2] - x[0] - y[1]) * 2;
        q[3] = (x[1] - y[0]) / S;
        q[0] = (z[0] + x[2]) / S;
        q[1] = (y[2] + z[1]) / S;
        q[2] = 0.25 * S;
      }
    };

    this.
    /**/
    axes2quat = this.pb;

    this.qb = function (q, x, a) {
      var ha = ctx.ib(a) * 0.5,
          s = Math.sin(ha);
      q[0] = x[0] * s;
      q[1] = x[1] * s;
      q[2] = x[2] * s;
      q[3] = Math.cos(ha);
    };

    this.
    /**/
    axisangle2quat = this.qb;

    this.axisangle2quat_ = function (x, a) {
      var ha = ctx.ib(a) * 0.5,
          s = Math.sin(ha);
      return [x[0] * s, x[1] * s, x[2] * s, ctx.cos_(ha)];
    };

    this.
    /**/
    axisangle2quat_ = this.axisangle2quat_;

    this.rb = function (r, v, q) {
      var x = v[0];
      var y = v[1];
      var z = v[2];
      var qx = q[0];
      var qy = q[1];
      var qz = q[2];
      var qw = q[3];
      var ix = qw * x + qy * z - qz * y;
      var iy = qw * y + qz * x - qx * z;
      var iz = qw * z + qx * y - qy * x;
      var iw = -qx * x - qy * y - qz * z;
      r[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;
      r[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;
      r[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;
    };

    this.sb = function (r, a, b) {
      var qax = a[0],
          qay = a[1],
          qaz = a[2],
          qaw = a[3];
      var qbx = b[0],
          qby = b[1],
          qbz = b[2],
          qbw = b[3];
      r[0] = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;
      r[1] = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;
      r[2] = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;
      r[3] = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;
    };

    this.mulqscalar = function (r, a, s) {
      r[0] = a[0] * s;
      r[1] = a[1] * s;
      r[2] = a[2] * s;
      r[3] = a[3] * s;
    };

    this.mulqscalar_ = function (a, s) {
      return [a[0] * s, a[1] * s, a[2] * s, a[3] * s];
    };

    this.tb = function (r, Hf, degree, scale, v) {
      var rad = ctx.ib(degree);
      var cos = Math.cos(rad) * scale;
      var sin = Math.sin(rad) * scale;
      r[0] = Hf[0] + cos * v[0] - sin * v[1];
      r[1] = Hf[1] + sin * v[0] + cos * v[1];
    };

    this.ub = function (r, Hf, degree, scale, v) {
      var rad = ctx.ib(degree);
      var cos = Math.cos(rad) / scale;
      var sin = Math.sin(rad) / scale;
      r[0] = cos * v[0] + sin * v[1] - Hf[0] * cos - Hf[1] * sin;
      r[1] = cos * v[1] - sin * v[0] + Hf[0] * sin - Hf[1] * cos;
    };

    this.vb = function (val) {
      if (val < 0) return Math.floor(ctx.yd - 1 + val % ctx.yd);else return Math.floor(val % ctx.yd);
    };

    function colorCompToHex_(c) {
      return c < 16 ? "0" + c.toString(16) : c.toString(16);
    }

    this.ff = function (rgb) {
      return "#" + colorCompToHex_(Math.floor(rgb[0] * 255)) + colorCompToHex_(Math.floor(rgb[1] * 255)) + colorCompToHex_(Math.floor(rgb[2] * 255));
    };

    this.tf = function (vf, xf, yf, a, b, zf) {
      var ca = ctx.f(a, vf);
      var cb = ctx.f(b, vf);
      var wf = ctx.r(xf, yf);

      if (ca[0] < -wf[0] && cb[0] < -wf[0] || ca[0] > wf[0] && cb[0] > wf[0] || ca[1] < -wf[1] && cb[1] < -wf[1] || ca[1] > wf[1] && cb[1] > wf[1]) {
        return false;
      }

      if (ca[0] <= wf[0] && ca[0] >= -wf[0] && ca[1] <= wf[1] && ca[1] >= -wf[1]) return true;
      if (zf < 0.000001) return false;
      if (cb[0] <= wf[0] && cb[0] >= -wf[0] && cb[1] <= wf[1] && cb[1] >= -wf[1]) return true;
      var Af = ctx.f(b, a);
      ctx.s(Af, Af, zf);
      var Bf = [-Af[1], Af[0]];
      var Cf = Math.abs(ctx.G(Bf, cb));

      if (Math.abs(ctx.G(Bf, wf)) >= Cf) {
        var Df = [-xf[1], xf[0]];

        if (ctx.G(Df, ca) * ctx.G(Df, cb) <= 0.0) {
          return true;
        }
      } else if (Math.abs(ctx.G(Bf, [wf[0], -wf[1]])) >= Cf) {
        var _Df = [xf[1], xf[0]];

        if (ctx.G(_Df, ca) * ctx.G(_Df, cb) <= 0.0) {
          return true;
        }
      }

      return false;
    };

    this.uf = function (vf, xf, yf, a, b, zf, Ef) {
      var ca = ctx.f(a, vf);
      var cb = ctx.f(b, vf);
      var wf = ctx.r(xf, yf);
      if (zf < 0.000001) return false;

      if (ca[0] < -wf[0] && cb[0] < -wf[0] || ca[0] > wf[0] && cb[0] > wf[0] || ca[1] < -wf[1] && cb[1] < -wf[1] || ca[1] > wf[1] && cb[1] > wf[1]) {
        return false;
      }

      var Af = ctx.f(b, a);
      ctx.s(Af, Af, zf);
      var Bf = [-Af[1], Af[0]];
      var Cf = Math.abs(ctx.G(Bf, cb));

      if (Ef) {
        if (Math.abs(ctx.G(Bf, wf)) >= Cf) {
          var Df = [-xf[1], xf[0]];

          if (ctx.G(Df, ca) * ctx.G(Df, cb) <= 0.0) {
            return true;
          }
        }
      } else {
        if (Math.abs(ctx.G(Bf, [wf[0], -wf[1]])) >= Cf) {
          var _Df2 = [xf[1], xf[0]];

          if (ctx.G(_Df2, ca) * ctx.G(_Df2, cb) <= 0.0) {
            return true;
          }
        }
      }

      return false;
    };

    this.wb = function (r, x, y, z) {
      var rgbDisp = 3 * (y * ctx.yd + x);
      var view = ctx.zd[z];
      r[0] = view.getUint8(rgbDisp);
      r[1] = view.getUint8(rgbDisp + 1);
      r[2] = view.getUint8(rgbDisp + 2);
    };

    this.xb = function (r, Hf) {
      if (ctx.zd == null) {
        ctx.W(r, 128, 128, 128);
        return;
      }

      var scaledPosX = Hf[0] * ctx.yd;
      var scaledPosY = Hf[1] * ctx.yd;
      var scaledPosZ = Hf[2] * ctx.yd;
      var floorX = Math.floor(scaledPosX);
      var floorY = Math.floor(scaledPosY);
      var floorZ = Math.floor(scaledPosZ);
      var fracX = scaledPosX - floorX;
      var fracY = scaledPosY - floorY;
      var fracZ = scaledPosZ - floorZ;
      var noiseX = ctx.vb(floorX);
      var noiseX1 = ctx.vb(floorX + 1);
      var noiseY = ctx.vb(floorY);
      var noiseY1 = ctx.vb(floorY + 1);
      var noiseZ = ctx.vb(floorZ);
      var noiseZ1 = ctx.vb(floorZ + 1);
      var value000 = [],
          value001 = [],
          value010 = [],
          value011 = [],
          value100 = [],
          value101 = [],
          value110 = [],
          value111 = [];
      ctx.wb(value000, noiseX, noiseY, noiseZ);
      ctx.wb(value001, noiseX, noiseY, noiseZ1);
      ctx.wb(value010, noiseX, noiseY1, noiseZ);
      ctx.wb(value011, noiseX, noiseY1, noiseZ1);
      ctx.wb(value100, noiseX1, noiseY, noiseZ);
      ctx.wb(value101, noiseX1, noiseY, noiseZ1);
      ctx.wb(value110, noiseX1, noiseY1, noiseZ);
      ctx.wb(value111, noiseX1, noiseY1, noiseZ1);
      var value00 = [],
          value01 = [],
          value10 = [],
          value11 = [];
      ctx.ab(value00, value000, value001, fracZ);
      ctx.ab(value01, value010, value011, fracZ);
      ctx.ab(value10, value100, value101, fracZ);
      ctx.ab(value11, value110, value111, fracZ);
      var value0 = [],
          value1 = [];
      ctx.ab(value0, value00, value01, fracY);
      ctx.ab(value1, value10, value11, fracY);
      ctx.ab(r, value0, value1, fracX);
    };

    this.ImageDesc = function (image, x, y, width, height) {
      this.image = image;
      this.x = x;
      this.y = y;
      this.width = width;
      this.height = height;
    };

    this.RenderCall = function (startIndex, numIndices, renderStyleIndex) {
      this.startIndex = startIndex;
      this.numIndices = numIndices;
      this.renderStyleIndex = renderStyleIndex;
    };

    this.SubRect = function (x, y, width, height) {
      this.x = x;
      this.y = y;
      this.width = width;
      this.height = height;
    };

    this.Camera2D = function () {};

    this.Camera2D.prototype.tb = function (Hf, Nd) {
      return true;
    };

    this.Camera3D = function (
    /**/
    screenSize,
    /**/
    horizAngle) {
      this.Qd = ctx.r(
      /**/
      screenSize, 0.5);
      this.z = -(
      /**/
      screenSize[0] * 0.5) / Math.tan(ctx.ib(
      /**/
      horizAngle * 0.5));
    };

    this.Camera3D.prototype.
    /**/
    transform = function (
    /**/
    pos,
    /**/
    size) {
      if (
      /**/
      pos[2] < this.z) return false;
      var scale = -this.z / (
      /**/
      pos[2] - this.z);
      ctx.a(
      /**/
      pos, ctx.r(ctx.f(
      /**/
      pos, this.Qd), scale), this.Qd);
      ctx.q(
      /**/
      size,
      /**/
      size, scale);
      return true;
    };

    this.zd = null;
    this.yd = 0;

    this.initializeNoise = function (path, onloadcallback, onfailcallback) {
      if (!path) {
        alert("path should be defined");
      }

      if (this.zd != null) {
        onloadcallback();
        return;
      }

      if (path == null || path == undefined) path = this.defaultPath;
      var request = new XMLHttpRequest();
      request.open("GET", path + "neutrinoparticles.noise.bin", true);
      request.responseType = "arraybuffer";
      request.ctx = this;

      request.onreadystatechange = function () {
        if (request.readyState == 4) {
          if (request.status >= 200 && request.status < 300 || request.status == 304) {
            var zd = request.response;
            var ctx = request.ctx;
            var view = new DataView(zd, 0, 4);
            var planeSize = view.getUint32(0, true);
            ctx.zd = [];
            ctx.yd = planeSize;

            for (var planeIndex = 0; planeIndex < planeSize; ++planeIndex) {
              ctx.zd[planeIndex] = new DataView(zd, 4
              /*Nd*/
              + 3 * planeSize * planeSize * planeIndex);
            }

            if (onloadcallback) onloadcallback();
          } else {
            if (onfailcallback) onfailcallback();
          }
        }
      };

      request.send();
    };

    this.NoiseGenerator = function () {
      var catmullRom_ = function catmullRom_(p0, p1, p2, p3, t) {
        return 0.5 * (2.0 * p1 + (-p0 + p2) * t + (2.0 * p0 - 5.0 * p1 + 4.0 * p2 - p3) * t * t + (-p0 + 3.0 * p1 - 3.0 * p2 + p3) * (t * t * t));
      };

      var catmullRomv3_ = function catmullRomv3_(p0, p1, p2, p3, t) {
        return [catmullRom_(p0[0], p1[0], p2[0], p3[0], t), catmullRom_(p0[1], p1[1], p2[1], p3[1], t), catmullRom_(p0[2], p1[2], p2[2], p3[2], t)];
      };

      var clamp_ = function clamp_(a, from, to) {
        return a < from ? from : a > to ? to : a;
      };

      var imageSize = 64;
      var image = [];
      var tempBuffer = [];
      var tausGenerator = new ctx.taus88(120); // 120 - hardcoded starting seed

      var rand = function rand() {
        return tausGenerator.rand();
      };

      var amp = 0.7; // hardcoded amplitude of perlin zd

      var fadeDegree = 1.2; // hardcoded fade degree of each octave

      var prevStep = imageSize;
      var step, Nd, octSize, octSize2, octMaskSize, octPixels, octZ, octY; // mix step variables

      var numMixStepIterations = 0;
      var mixStepIteration = 0;

      for (var i = prevStep >>> 1; i > 0; i >>>= 1) {
        var _octSize = Math.floor(imageSize / i);

        numMixStepIterations += _octSize * _octSize;
      }

      var States = {
        INITIAL_FILL: 0,
        MIX_STEP_INIT: 1,
        MIX_STEP_PROCESS: 2,
        SCALING: 3,
        DATA_VIEWS: 4,
        FINISHED: 5
      };
      var Progress = {
        INIT: 0.01,
        MIX: 0.9,
        SCALING: 0.95,
        DATA_VIEWS: 1.0
      };
      var state = States.INITIAL_FILL;
      this.progress = 0.0;

      var initialFill = function initialFill() {
        for (var z = 0; z < imageSize; ++z) {
          var imageZ = image[z] = [];

          for (var y = 0; y < imageSize; ++y) {
            var imageZY = imageZ[y] = [];

            for (var x = 0; x < imageSize; ++x) {
              var imageZYX = imageZY[x] = [0.0, 0.0, 0.0];
            }
          }
        }

        state = States.MIX_STEP_INIT;
        this.progress = Progress.INIT;
      };

      var mixStepInit = function mixStepInit() {
        step = prevStep >>> 1;
        Nd = imageSize;
        octSize = Math.floor(Nd / step);
        octSize2 = octSize * octSize;
        octMaskSize = Math.max(octSize - 1, 1);
        octPixels = octSize * octSize * octSize;
        octZ = 0;
        octY = 0;

        for (var i = 0; i < octPixels; ++i) {
          tempBuffer[i] = []; // order is inverted to satisfy c++ obsolete order

          tempBuffer[i][2] = rand() * 2.0 - 1.0;
          tempBuffer[i][1] = rand() * 2.0 - 1.0;
          tempBuffer[i][0] = rand() * 2.0 - 1.0;
        }

        state = States.MIX_STEP_PROCESS;
      };

      var mixStepProcess = function mixStepProcess() {
        for (var octX = 0; octX < octSize; ++octX) {
          var octZ0 = octZ - 1 >>> 0 & octMaskSize;
          var octZ1 = octZ >>> 0 & octMaskSize;
          var octZ2 = octZ + 1 >>> 0 & octMaskSize;
          var octZ3 = octZ + 2 >>> 0 & octMaskSize;
          var octY0 = octY - 1 >>> 0 & octMaskSize;
          var octY1 = octY >>> 0 & octMaskSize;
          var octY2 = octY + 1 >>> 0 & octMaskSize;
          var octY3 = octY + 2 >>> 0 & octMaskSize;
          var octX0 = octX - 1 >>> 0 & octMaskSize;
          var octX1 = octX >>> 0 & octMaskSize;
          var octX2 = octX + 1 >>> 0 & octMaskSize;
          var octX3 = octX + 2 >>> 0 & octMaskSize;
          var values = //zyx
          [[[tempBuffer[octZ0 * octSize2 + octY0 * octSize + octX0], tempBuffer[octZ0 * octSize2 + octY0 * octSize + octX1], tempBuffer[octZ0 * octSize2 + octY0 * octSize + octX2], tempBuffer[octZ0 * octSize2 + octY0 * octSize + octX3]], [tempBuffer[octZ0 * octSize2 + octY1 * octSize + octX0], tempBuffer[octZ0 * octSize2 + octY1 * octSize + octX1], tempBuffer[octZ0 * octSize2 + octY1 * octSize + octX2], tempBuffer[octZ0 * octSize2 + octY1 * octSize + octX3]], [tempBuffer[octZ0 * octSize2 + octY2 * octSize + octX0], tempBuffer[octZ0 * octSize2 + octY2 * octSize + octX1], tempBuffer[octZ0 * octSize2 + octY2 * octSize + octX2], tempBuffer[octZ0 * octSize2 + octY2 * octSize + octX3]], [tempBuffer[octZ0 * octSize2 + octY3 * octSize + octX0], tempBuffer[octZ0 * octSize2 + octY3 * octSize + octX1], tempBuffer[octZ0 * octSize2 + octY3 * octSize + octX2], tempBuffer[octZ0 * octSize2 + octY3 * octSize + octX3]]], [[tempBuffer[octZ1 * octSize2 + octY0 * octSize + octX0], tempBuffer[octZ1 * octSize2 + octY0 * octSize + octX1], tempBuffer[octZ1 * octSize2 + octY0 * octSize + octX2], tempBuffer[octZ1 * octSize2 + octY0 * octSize + octX3]], [tempBuffer[octZ1 * octSize2 + octY1 * octSize + octX0], tempBuffer[octZ1 * octSize2 + octY1 * octSize + octX1], tempBuffer[octZ1 * octSize2 + octY1 * octSize + octX2], tempBuffer[octZ1 * octSize2 + octY1 * octSize + octX3]], [tempBuffer[octZ1 * octSize2 + octY2 * octSize + octX0], tempBuffer[octZ1 * octSize2 + octY2 * octSize + octX1], tempBuffer[octZ1 * octSize2 + octY2 * octSize + octX2], tempBuffer[octZ1 * octSize2 + octY2 * octSize + octX3]], [tempBuffer[octZ1 * octSize2 + octY3 * octSize + octX0], tempBuffer[octZ1 * octSize2 + octY3 * octSize + octX1], tempBuffer[octZ1 * octSize2 + octY3 * octSize + octX2], tempBuffer[octZ1 * octSize2 + octY3 * octSize + octX3]]], [[tempBuffer[octZ2 * octSize2 + octY0 * octSize + octX0], tempBuffer[octZ2 * octSize2 + octY0 * octSize + octX1], tempBuffer[octZ2 * octSize2 + octY0 * octSize + octX2], tempBuffer[octZ2 * octSize2 + octY0 * octSize + octX3]], [tempBuffer[octZ2 * octSize2 + octY1 * octSize + octX0], tempBuffer[octZ2 * octSize2 + octY1 * octSize + octX1], tempBuffer[octZ2 * octSize2 + octY1 * octSize + octX2], tempBuffer[octZ2 * octSize2 + octY1 * octSize + octX3]], [tempBuffer[octZ2 * octSize2 + octY2 * octSize + octX0], tempBuffer[octZ2 * octSize2 + octY2 * octSize + octX1], tempBuffer[octZ2 * octSize2 + octY2 * octSize + octX2], tempBuffer[octZ2 * octSize2 + octY2 * octSize + octX3]], [tempBuffer[octZ2 * octSize2 + octY3 * octSize + octX0], tempBuffer[octZ2 * octSize2 + octY3 * octSize + octX1], tempBuffer[octZ2 * octSize2 + octY3 * octSize + octX2], tempBuffer[octZ2 * octSize2 + octY3 * octSize + octX3]]], [[tempBuffer[octZ3 * octSize2 + octY0 * octSize + octX0], tempBuffer[octZ3 * octSize2 + octY0 * octSize + octX1], tempBuffer[octZ3 * octSize2 + octY0 * octSize + octX2], tempBuffer[octZ3 * octSize2 + octY0 * octSize + octX3]], [tempBuffer[octZ3 * octSize2 + octY1 * octSize + octX0], tempBuffer[octZ3 * octSize2 + octY1 * octSize + octX1], tempBuffer[octZ3 * octSize2 + octY1 * octSize + octX2], tempBuffer[octZ3 * octSize2 + octY1 * octSize + octX3]], [tempBuffer[octZ3 * octSize2 + octY2 * octSize + octX0], tempBuffer[octZ3 * octSize2 + octY2 * octSize + octX1], tempBuffer[octZ3 * octSize2 + octY2 * octSize + octX2], tempBuffer[octZ3 * octSize2 + octY2 * octSize + octX3]], [tempBuffer[octZ3 * octSize2 + octY3 * octSize + octX0], tempBuffer[octZ3 * octSize2 + octY3 * octSize + octX1], tempBuffer[octZ3 * octSize2 + octY3 * octSize + octX2], tempBuffer[octZ3 * octSize2 + octY3 * octSize + octX3]]]];

          for (var inZ = 0; inZ < step; ++inZ) {
            var interpZ = inZ / step;
            var imageZ = octZ * step + inZ;
            var valuesP = //yx
            [[catmullRomv3_(values[0][0][0], values[1][0][0], values[2][0][0], values[3][0][0], interpZ), catmullRomv3_(values[0][0][1], values[1][0][1], values[2][0][1], values[3][0][1], interpZ), catmullRomv3_(values[0][0][2], values[1][0][2], values[2][0][2], values[3][0][2], interpZ), catmullRomv3_(values[0][0][3], values[1][0][3], values[2][0][3], values[3][0][3], interpZ)], [catmullRomv3_(values[0][1][0], values[1][1][0], values[2][1][0], values[3][1][0], interpZ), catmullRomv3_(values[0][1][1], values[1][1][1], values[2][1][1], values[3][1][1], interpZ), catmullRomv3_(values[0][1][2], values[1][1][2], values[2][1][2], values[3][1][2], interpZ), catmullRomv3_(values[0][1][3], values[1][1][3], values[2][1][3], values[3][1][3], interpZ)], [catmullRomv3_(values[0][2][0], values[1][2][0], values[2][2][0], values[3][2][0], interpZ), catmullRomv3_(values[0][2][1], values[1][2][1], values[2][2][1], values[3][2][1], interpZ), catmullRomv3_(values[0][2][2], values[1][2][2], values[2][2][2], values[3][2][2], interpZ), catmullRomv3_(values[0][2][3], values[1][2][3], values[2][2][3], values[3][2][3], interpZ)], [catmullRomv3_(values[0][2][0], values[1][3][0], values[2][3][0], values[3][3][0], interpZ), catmullRomv3_(values[0][2][1], values[1][3][1], values[2][3][1], values[3][3][1], interpZ), catmullRomv3_(values[0][2][2], values[1][3][2], values[2][3][2], values[3][3][2], interpZ), catmullRomv3_(values[0][2][3], values[1][3][3], values[2][3][3], values[3][3][3], interpZ)]];

            for (var inY = 0; inY < step; ++inY) {
              var interpY = inY / step;
              var imageY = octY * step + inY;
              var value0 = catmullRomv3_(valuesP[0][0], valuesP[1][0], valuesP[2][0], valuesP[3][0], interpY);
              var value1 = catmullRomv3_(valuesP[0][1], valuesP[1][1], valuesP[2][1], valuesP[3][1], interpY);
              var value2 = catmullRomv3_(valuesP[0][2], valuesP[1][2], valuesP[2][2], valuesP[3][2], interpY);
              var value3 = catmullRomv3_(valuesP[0][3], valuesP[1][3], valuesP[2][3], valuesP[3][3], interpY);

              for (var inX = 0; inX < step; ++inX) {
                var interpX = inX / step;
                var imageX = octX * step + inX;
                var octResult = catmullRomv3_(value0, value1, value2, value3, interpX);
                var result = ctx.d(ctx.v(octResult, amp), image[imageZ][imageY][imageX]);
                var clampedResult = [clamp_(result[0], -1.0, 1.0), clamp_(result[1], -1.0, 1.0), clamp_(result[2], -1.0, 1.0)];
                image[imageZ][imageY][imageX] = clampedResult;
              }
            }
          }
        }

        mixStepIteration++;
        this.progress = Progress.INIT + (Progress.MIX - Progress.INIT) * (mixStepIteration / numMixStepIterations);
        octY++;

        if (octY >= octSize) {
          octY = 0;
          octZ++;

          if (octZ >= octSize) {
            octZ = 0;
            prevStep = step;
            amp = Math.pow(amp, fadeDegree);

            if (prevStep <= 1) {
              state = States.SCALING;
              this.progress = Progress.MIX;
            } else {
              state = States.MIX_STEP_INIT;
            }
          }
        }
      }; // hardcoded scaling of the image to make it more symethric


      var scaling = function scaling() {
        var low = [-1.0, -1.0, -1.0];
        var high = [0.5, 0.7, 1.0];

        for (var z = 0; z < imageSize; ++z) {
          var imageZ = image[z];

          for (var y = 0; y < imageSize; ++y) {
            var imageZY = imageZ[y];

            for (var x = 0; x < imageSize; ++x) {
              var imageZYX = imageZY[x];
              imageZYX[0] = ctx.X(low[0], high[0], imageZYX[0] * 0.5 + 0.5);
              imageZYX[1] = ctx.X(low[1], high[1], imageZYX[1] * 0.5 + 0.5);
              imageZYX[2] = ctx.X(low[2], high[2], imageZYX[2] * 0.5 + 0.5);
            }
          }
        }

        state = States.DATA_VIEWS;
        this.progress = Progress.SCALING;
      }; // filling zd DataViews


      var dataViews = function dataViews() {
        ctx.yd = imageSize;
        ctx.zd = [];

        for (var z = 0; z < imageSize; ++z) {
          var imageZ = image[z];
          var plane = new ArrayBuffer(imageSize * imageSize * 3);
          var view = new DataView(plane);

          for (var y = 0; y < imageSize; ++y) {
            var imageZY = imageZ[y];

            for (var x = 0; x < imageSize; ++x) {
              var imageZYX = imageZY[x];
              var rgbOffset = (y * imageSize + x) * 3;
              view.setUint8(rgbOffset + 0, Math.floor(clamp_(256.0 * (imageZYX[0] * 0.5 + 0.5) - 0.5, 0.0, 255.0)));
              view.setUint8(rgbOffset + 1, Math.floor(clamp_(256.0 * (imageZYX[1] * 0.5 + 0.5) - 0.5, 0.0, 255.0)));
              view.setUint8(rgbOffset + 2, Math.floor(clamp_(256.0 * (imageZYX[2] * 0.5 + 0.5) - 0.5, 0.0, 255.0)));
            }
          }

          ctx.zd[z] = view;
        }

        state = States.FINISHED;
        this.progress = Progress.DATA_VIEWS;
      };

      this.step = function () {
        switch (state) {
          case States.INITIAL_FILL:
            initialFill.call(this);
            break;

          case States.MIX_STEP_INIT:
            mixStepInit.call(this);
            break;

          case States.MIX_STEP_PROCESS:
            mixStepProcess.call(this);
            break;

          case States.SCALING:
            scaling.call(this);
            break;

          case States.DATA_VIEWS:
            dataViews.call(this);
            break;
        }

        return state == States.FINISHED;
      };
    };

    this.cf = document.createElement('canvas');
    this.cf.width = 0;
    this.cf.height = 0;
    this.bf = this.cf.getContext('2d');

    this.af = function (minWidth, minHeight) {
      if (this.cf.width < minWidth || this.cf.height < minHeight) {
        this.cf.width = minWidth;
        this.cf.height = minHeight;
        this.bf = this.cf.getContext('2d');
      }
    };

    this.effects = [];

    this.loadEffect = function (effectFilePath, onSuccessFunc, onFailFunc) {
      if (this.effects[effectFilePath] != undefined) {
        var effectModel = this.effects[effectFilePath];

        if (effectModel instanceof Array) {
          effectModel[effectModel.length] = [onSuccessFunc, onFailFunc];
          return;
        }

        onSuccessFunc(effectModel);
        return;
      }

      this.effects[effectFilePath] = [[onSuccessFunc, onFailFunc]];
      var request = new XMLHttpRequest();
      request.open("GET", effectFilePath, true);
      request.responseType = "text";
      request.ctx = this;

      request.onreadystatechange = function () {
        if (request.readyState == 4) {
          var callbacks = this.ctx.effects[effectFilePath];

          if (request.status >= 200 && request.status < 300 || request.status == 304) {
            var evalText = "(function(ctx) {\n" + request.responseText + "\nreturn new NeutrinoEffect(ctx);\n})(this.ctx);";
            var effectModel = eval(evalText);
            this.ctx.effects[effectFilePath] = effectModel;
            callbacks.forEach(function (callback) {
              callback[0](effectModel);
            });
          } else {
            callbacks.forEach(function (callback) {
              callback[1]();
            });
          }
        }
      };

      request.send();
    };

    this.removeEffect = function (effectFilePath) {
      delete this.effects[effectFilePath];
    };
  }

  exports.Context = Context;
  Object.defineProperty(exports, '__esModule', {
    value: true
  });
}); //# sourceMappingURL=neutrinoparticles.umd.js.map

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/neutrinoparticles-runtime/NeutrinoAssemblerWebGL.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '32e92P2G2hLrY8BaVp0+NVh', 'NeutrinoAssemblerWebGL');
// NeutrinoAssemblerWebGL.ts

"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var indices = [0, 1, 3, 1, 2, 3];
var NeutrinoAssembler = /** @class */ (function (_super) {
    __extends(NeutrinoAssembler, _super);
    function NeutrinoAssembler() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._initialized = false;
        _this._currentVertex = 0;
        _this._renderStyleIndex = null;
        _this._vertexFormat = cc.gfx.VertexFormat.XYZ_UV_Color;
        _this._buffer = null;
        _this._bufferOffsetInfo = null;
        _this._modelBatcher = null;
        _this._worldScale = new cc.Vec3();
        return _this;
    }
    NeutrinoAssembler.prototype.fillBuffers = function (comp, modelBatcher) {
        if (!comp._neutrinoEffect || !comp.context.loaded()) {
            return;
        }
        if (!this._initialized) {
            this._buffer = modelBatcher.getBuffer('mesh', this._vertexFormat);
            this._initialized = true;
        }
        this._modelBatcher = modelBatcher;
        this._renderStyleIndex = null;
        this._worldScale = comp._worldScale;
        comp._neutrinoEffect.fillGeometryBuffers([1, 0, 0], [0, 1, 0], [0, 0, -1]);
    };
    // Methods called by neutrinoEffect
    NeutrinoAssembler.prototype.initialize = function (maxNumVertices, texChannels, indices, maxNumRenderCalls) {
    };
    NeutrinoAssembler.prototype.beforeQuad = function (renderStyleIndex) {
        if (this._renderStyleIndex !== renderStyleIndex) {
            var material = this._renderComp.materials[renderStyleIndex];
            if (material) {
                if (material.getHash() !== this._modelBatcher.material.getHash()) {
                    this._modelBatcher._flush();
                    this._modelBatcher.material = material;
                }
            }
            this._renderStyleIndex = renderStyleIndex;
        }
        this._bufferOffsetInfo = this._buffer.request(4, indices.length);
    };
    NeutrinoAssembler.prototype.pushVertex = function (vertex) {
        var oi = this._bufferOffsetInfo;
        var floatsPerVertex = this._vertexFormat._bytes / 4;
        var buffer = this._buffer;
        var floatsBuffer = buffer._vData;
        var uintsBuffer = buffer._uintVData;
        var floatsStart = oi.byteOffset / 4 + this._currentVertex * floatsPerVertex;
        var x = vertex.position[0] * this._worldScale.x;
        var y = vertex.position[1] * this._worldScale.y;
        var z = vertex.position[2] * this._worldScale.z;
        floatsBuffer[floatsStart + 0] = x;
        floatsBuffer[floatsStart + 1] = y;
        floatsBuffer[floatsStart + 2] = z;
        floatsBuffer[floatsStart + 3] = vertex.texCoords[0][0];
        floatsBuffer[floatsStart + 4] = 1.0 - vertex.texCoords[0][1];
        uintsBuffer[floatsStart + 5] =
            (vertex.color[0]) |
                (vertex.color[1] << 8) |
                (vertex.color[2] << 16) |
                (vertex.color[3] << 24);
        ++this._currentVertex;
        if (this._currentVertex == 4) {
            var idicesBuffer = buffer._iData;
            for (var i = 0; i < indices.length; ++i) {
                idicesBuffer[oi.indiceOffset + i] = oi.vertexOffset + indices[i];
            }
            this._currentVertex = 0;
        }
    };
    NeutrinoAssembler.prototype.pushRenderCall = function (rc) {
    };
    NeutrinoAssembler.prototype.cleanup = function () {
    };
    return NeutrinoAssembler;
}(cc.Assembler));
exports.default = NeutrinoAssembler;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/neutrinoparticles-runtime/NeutrinoAssemblerJSB.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '908f2U8uBBKHLoXjGNOOkv8', 'NeutrinoAssemblerJSB');
// NeutrinoAssemblerJSB.ts

"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var renderer = cc.renderer;
//const gfx = renderer.renderEngine.gfx;
var quadIndices = [0, 1, 3, 1, 2, 3];
var numQuadVertices = 4;
var maxQuadsInDrawCall = 512;
var maxVerticesInDrawCall = numQuadVertices * maxQuadsInDrawCall;
var maxIndicesInDrawCall = quadIndices.length * maxQuadsInDrawCall;
var NeutrinoAssembler = /** @class */ (function (_super) {
    __extends(NeutrinoAssembler, _super);
    function NeutrinoAssembler() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._currentVertex = 0;
        _this._renderStyleIndex = null;
        _this._worldScale = new cc.Vec3();
        return _this;
    }
    NeutrinoAssembler._checkAndCreateCurrentBuffer = function () {
        var bufIndex = NeutrinoAssembler._bufferIndex;
        if (!NeutrinoAssembler._vertexBuffers[bufIndex]) {
            NeutrinoAssembler._vertexBuffers[bufIndex] = new ArrayBuffer(NeutrinoAssembler._vertexFormat._bytes *
                maxVerticesInDrawCall);
            NeutrinoAssembler._vertexFloatBuffers[bufIndex] = new Float32Array(NeutrinoAssembler._vertexBuffers[bufIndex]);
            NeutrinoAssembler._vertexUint32Buffers[bufIndex] = new Uint32Array(NeutrinoAssembler._vertexBuffers[bufIndex]);
        }
        if (!NeutrinoAssembler._indexBuffers[bufIndex]) {
            NeutrinoAssembler._indexBuffers[bufIndex] = new Uint16Array(maxIndicesInDrawCall);
        }
    };
    NeutrinoAssembler._incBuffer = function () {
        ++NeutrinoAssembler._bufferIndex;
        NeutrinoAssembler._numBufferVertices = 0;
        NeutrinoAssembler._numBufferIndices = 0;
        NeutrinoAssembler._startBufferVertex = 0;
        NeutrinoAssembler._startBufferIndex = 0;
        NeutrinoAssembler._checkAndCreateCurrentBuffer();
    };
    NeutrinoAssembler.prototype._prepareForGeometry = function (numVertices, numIndices) {
        if (NeutrinoAssembler._numBufferVertices + numVertices == maxVerticesInDrawCall) {
            var i = 0;
        }
        if (NeutrinoAssembler._numBufferVertices + numVertices > maxVerticesInDrawCall
            || NeutrinoAssembler._numBufferIndices + numIndices > maxIndicesInDrawCall) {
            this._finishDrawCall();
            NeutrinoAssembler._incBuffer();
        }
    };
    NeutrinoAssembler.prototype._commitGeometry = function (numVertices, numIndices) {
        NeutrinoAssembler._numBufferVertices += numVertices;
        NeutrinoAssembler._numBufferIndices += numIndices;
    };
    NeutrinoAssembler._resetGeometryBuffers = function () {
        this._bufferIndex = 0;
        this._numBufferVertices = 0;
        this._numBufferIndices = 0;
        this._startBufferVertex = 0;
        this._startBufferIndex = 0;
        this._checkAndCreateCurrentBuffer();
    };
    NeutrinoAssembler.prototype._finishDrawCall = function () {
        if (NeutrinoAssembler._startBufferIndex === NeutrinoAssembler._numBufferIndices) {
            return;
        }
        var bufIndex = NeutrinoAssembler._bufferIndex;
        var subVertices = new Float32Array(NeutrinoAssembler._vertexBuffers[bufIndex], NeutrinoAssembler._startBufferVertex * NeutrinoAssembler._vertexFormat._bytes, ((NeutrinoAssembler._numBufferVertices - NeutrinoAssembler._startBufferVertex) * NeutrinoAssembler._vertexFormat._bytes) / 4);
        var subIndices = new Uint16Array(NeutrinoAssembler._indexBuffers[bufIndex].buffer, NeutrinoAssembler._startBufferIndex * 2, NeutrinoAssembler._numBufferIndices - NeutrinoAssembler._startBufferIndex);
        this.updateIAData(this._drawCallIndex, NeutrinoAssembler._vertexFormat._nativeObj, subVertices, subIndices);
        var effect = this._renderComp.materials[this._renderStyleIndex].effect;
        this.updateEffect(this._drawCallIndex, effect._nativeObj);
        NeutrinoAssembler._startBufferVertex = NeutrinoAssembler._numBufferVertices;
        NeutrinoAssembler._startBufferIndex = NeutrinoAssembler._numBufferIndices;
        ++this._drawCallIndex;
    };
    NeutrinoAssembler.prototype.updateRenderData = function (comp) {
        this.fillBuffers(comp);
        comp.node._renderFlag |= cc.RenderFlow.FLAG_UPDATE_RENDER_DATA;
    };
    NeutrinoAssembler.prototype.fillBuffers = function (comp) {
        if (!comp._neutrinoEffect || !comp.context.loaded()) {
            return;
        }
        this.reset(); // CustomAssembler.reset()
        NeutrinoAssembler._resetGeometryBuffers();
        this._drawCallIndex = 0;
        this._currentVertex = 0;
        this._renderStyleIndex = null;
        this._worldScale = comp._worldScale;
        comp._neutrinoEffect.fillGeometryBuffers([1, 0, 0], [0, 1, 0], [0, 0, -1]);
        this._finishDrawCall();
    };
    // Methods called by neutrinoEffect
    NeutrinoAssembler.prototype.initialize = function (maxNumVertices, texChannels, indices, maxNumRenderCalls) {
    };
    NeutrinoAssembler.prototype.beforeQuad = function (renderStyleIndex) {
        if (this._renderStyleIndex !== renderStyleIndex) {
            this._finishDrawCall();
            this._renderStyleIndex = renderStyleIndex;
        }
        this._prepareForGeometry(numQuadVertices, quadIndices.length);
    };
    NeutrinoAssembler.prototype.pushVertex = function (vertex) {
        var bufIndex = NeutrinoAssembler._bufferIndex;
        var floatsPerVertex = NeutrinoAssembler._vertexFormat._bytes / 4;
        var floatsBuffer = NeutrinoAssembler._vertexFloatBuffers[bufIndex];
        var uintsBuffer = NeutrinoAssembler._vertexUint32Buffers[bufIndex];
        var floatsStart = (NeutrinoAssembler._numBufferVertices + this._currentVertex) * floatsPerVertex;
        var x = vertex.position[0] * this._worldScale.x;
        var y = vertex.position[1] * this._worldScale.y;
        var z = vertex.position[2] * this._worldScale.z;
        floatsBuffer[floatsStart++] = x;
        floatsBuffer[floatsStart++] = y;
        floatsBuffer[floatsStart++] = z;
        floatsBuffer[floatsStart++] = vertex.texCoords[0][0];
        floatsBuffer[floatsStart++] = 1.0 - vertex.texCoords[0][1];
        uintsBuffer[floatsStart++] =
            (vertex.color[0]) |
                (vertex.color[1] << 8) |
                (vertex.color[2] << 16) |
                (vertex.color[3] << 24);
        ++this._currentVertex;
        if (this._currentVertex == 4) {
            var idicesBuffer = NeutrinoAssembler._indexBuffers[bufIndex];
            for (var i = 0; i < quadIndices.length; ++i) {
                idicesBuffer[NeutrinoAssembler._numBufferIndices + i] =
                    (NeutrinoAssembler._numBufferVertices - NeutrinoAssembler._startBufferVertex)
                        + quadIndices[i];
            }
            this._commitGeometry(numQuadVertices, quadIndices.length);
            this._currentVertex = 0;
        }
    };
    NeutrinoAssembler.prototype.pushRenderCall = function (rc) {
    };
    NeutrinoAssembler.prototype.cleanup = function () {
    };
    NeutrinoAssembler._vertexFormat = cc.gfx.VertexFormat.XYZ_UV_Color;
    NeutrinoAssembler._vertexBuffers = [];
    NeutrinoAssembler._vertexFloatBuffers = [];
    NeutrinoAssembler._vertexUint32Buffers = [];
    NeutrinoAssembler._indexBuffers = [];
    return NeutrinoAssembler;
}(cc.MeshRenderer.__assembler__));
exports.default = NeutrinoAssembler;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/neutrinoparticles-runtime/NeutrinoSettings.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'fbcd0MmKjROJoyVC6K9nt1e', 'NeutrinoSettings');
// NeutrinoSettings.ts

"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
/**
 * NeutrinoSettings component is a container for default values of NeutrinoComponent
 * properties. Instance of this class should be a singleton in the scope of a scene
 * and has to be accessed only via cc.NeutrinoSettings.instance() static method. This
 * method creates a node with name '__NeutrinoParticles__' in the root of the scene
 * and attaches NeutrinoSettings component to it. Further properties of the component
 * can be changed in the editor or programmatically.
 */
var NeutrinoSettings = /** @class */ (function (_super) {
    __extends(NeutrinoSettings, _super);
    function NeutrinoSettings() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.defaultWorldParent = null;
        _this.defaultTexturesPrefixPath = '';
        _this.defaultSpriteAtlas = null;
        return _this;
    }
    NeutrinoSettings_1 = NeutrinoSettings;
    NeutrinoSettings.instance = function () {
        var canvas = cc.find('Canvas');
        if (!canvas) {
            return null;
        }
        var settings = canvas.getComponent(NeutrinoSettings_1);
        if (!settings) {
            settings = canvas.addComponent(NeutrinoSettings_1);
            settings.defaultWorldParent = canvas;
        }
        return settings;
    };
    var NeutrinoSettings_1;
    __decorate([
        property(cc.Node)
    ], NeutrinoSettings.prototype, "defaultWorldParent", void 0);
    __decorate([
        property
    ], NeutrinoSettings.prototype, "defaultTexturesPrefixPath", void 0);
    __decorate([
        property(cc.SpriteAtlas)
    ], NeutrinoSettings.prototype, "defaultSpriteAtlas", void 0);
    NeutrinoSettings = NeutrinoSettings_1 = __decorate([
        ccclass
    ], NeutrinoSettings);
    return NeutrinoSettings;
}(cc.Component));
exports.default = NeutrinoSettings;
cc.NeutrinoSettings = NeutrinoSettings;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBhY2thZ2VzXFxuZXV0cmlub3BhcnRpY2xlc1xccnVudGltZVxcTmV1dHJpbm9TZXR0aW5ncy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBTSxJQUFBLEtBQXNCLEVBQUUsQ0FBQyxVQUFVLEVBQWxDLE9BQU8sYUFBQSxFQUFFLFFBQVEsY0FBaUIsQ0FBQztBQUUxQzs7Ozs7OztHQU9HO0FBR0g7SUFBOEMsb0NBQVk7SUFBMUQ7UUFBQSxxRUF3QkM7UUF0Qkcsd0JBQWtCLEdBQUcsSUFBSSxDQUFDO1FBRzFCLCtCQUF5QixHQUFHLEVBQUUsQ0FBQztRQUcvQix3QkFBa0IsR0FBRyxJQUFJLENBQUM7O0lBZ0I5QixDQUFDO3lCQXhCb0IsZ0JBQWdCO0lBVTFCLHlCQUFRLEdBQWY7UUFDSSxJQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ2pDLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDVCxPQUFPLElBQUksQ0FBQztTQUNmO1FBRUQsSUFBSSxRQUFRLEdBQUcsTUFBTSxDQUFDLFlBQVksQ0FBQyxrQkFBZ0IsQ0FBQyxDQUFDO1FBQ3JELElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDWCxRQUFRLEdBQUcsTUFBTSxDQUFDLFlBQVksQ0FBQyxrQkFBZ0IsQ0FBQyxDQUFDO1lBQ2pELFFBQVEsQ0FBQyxrQkFBa0IsR0FBRyxNQUFNLENBQUM7U0FDeEM7UUFFRCxPQUFPLFFBQVEsQ0FBQztJQUNwQixDQUFDOztJQXJCRDtRQURDLFFBQVEsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDO2dFQUNRO0lBRzFCO1FBREMsUUFBUTt1RUFDc0I7SUFHL0I7UUFEQyxRQUFRLENBQUMsRUFBRSxDQUFDLFdBQVcsQ0FBQztnRUFDQztJQVJULGdCQUFnQjtRQURuQyxPQUFPO09BQ1ksZ0JBQWdCLENBd0JwQztJQUFELHVCQUFDO0NBeEJELEFBd0JDLENBeEI2QyxFQUFFLENBQUMsU0FBUyxHQXdCekQ7a0JBeEJvQixnQkFBZ0I7QUEwQnJDLEVBQUUsQ0FBQyxnQkFBZ0IsR0FBRyxnQkFBZ0IsQ0FBQyIsImZpbGUiOiIiLCJzb3VyY2VSb290IjoiLyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHtjY2NsYXNzLCBwcm9wZXJ0eX0gPSBjYy5fZGVjb3JhdG9yO1xyXG5cclxuLyoqXHJcbiAqIE5ldXRyaW5vU2V0dGluZ3MgY29tcG9uZW50IGlzIGEgY29udGFpbmVyIGZvciBkZWZhdWx0IHZhbHVlcyBvZiBOZXV0cmlub0NvbXBvbmVudFxyXG4gKiBwcm9wZXJ0aWVzLiBJbnN0YW5jZSBvZiB0aGlzIGNsYXNzIHNob3VsZCBiZSBhIHNpbmdsZXRvbiBpbiB0aGUgc2NvcGUgb2YgYSBzY2VuZVxyXG4gKiBhbmQgaGFzIHRvIGJlIGFjY2Vzc2VkIG9ubHkgdmlhIGNjLk5ldXRyaW5vU2V0dGluZ3MuaW5zdGFuY2UoKSBzdGF0aWMgbWV0aG9kLiBUaGlzXHJcbiAqIG1ldGhvZCBjcmVhdGVzIGEgbm9kZSB3aXRoIG5hbWUgJ19fTmV1dHJpbm9QYXJ0aWNsZXNfXycgaW4gdGhlIHJvb3Qgb2YgdGhlIHNjZW5lXHJcbiAqIGFuZCBhdHRhY2hlcyBOZXV0cmlub1NldHRpbmdzIGNvbXBvbmVudCB0byBpdC4gRnVydGhlciBwcm9wZXJ0aWVzIG9mIHRoZSBjb21wb25lbnRcclxuICogY2FuIGJlIGNoYW5nZWQgaW4gdGhlIGVkaXRvciBvciBwcm9ncmFtbWF0aWNhbGx5LlxyXG4gKi9cclxuXHJcbiBAY2NjbGFzc1xyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBOZXV0cmlub1NldHRpbmdzIGV4dGVuZHMgY2MuQ29tcG9uZW50IHtcclxuICAgIEBwcm9wZXJ0eShjYy5Ob2RlKVxyXG4gICAgZGVmYXVsdFdvcmxkUGFyZW50ID0gbnVsbDtcclxuXHJcbiAgICBAcHJvcGVydHlcclxuICAgIGRlZmF1bHRUZXh0dXJlc1ByZWZpeFBhdGggPSAnJztcclxuXHJcbiAgICBAcHJvcGVydHkoY2MuU3ByaXRlQXRsYXMpXHJcbiAgICBkZWZhdWx0U3ByaXRlQXRsYXMgPSBudWxsO1xyXG5cclxuICAgIHN0YXRpYyBpbnN0YW5jZSgpIDogTmV1dHJpbm9TZXR0aW5ncyB7XHJcbiAgICAgICAgY29uc3QgY2FudmFzID0gY2MuZmluZCgnQ2FudmFzJyk7XHJcbiAgICAgICAgaWYgKCFjYW52YXMpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgc2V0dGluZ3MgPSBjYW52YXMuZ2V0Q29tcG9uZW50KE5ldXRyaW5vU2V0dGluZ3MpO1xyXG4gICAgICAgIGlmICghc2V0dGluZ3MpIHtcclxuICAgICAgICAgICAgc2V0dGluZ3MgPSBjYW52YXMuYWRkQ29tcG9uZW50KE5ldXRyaW5vU2V0dGluZ3MpO1xyXG4gICAgICAgICAgICBzZXR0aW5ncy5kZWZhdWx0V29ybGRQYXJlbnQgPSBjYW52YXM7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gc2V0dGluZ3M7XHJcbiAgICB9XHJcbn1cclxuXHJcbmNjLk5ldXRyaW5vU2V0dGluZ3MgPSBOZXV0cmlub1NldHRpbmdzOyJdfQ==
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/neutrinoparticles-runtime/NeutrinoComponent.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'fe372iH4fZOBLxITCZbQxJ2', 'NeutrinoComponent');
// NeutrinoComponent.ts

"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var NeutrinoSettings_1 = require("./NeutrinoSettings");
var NeutrinoContext_1 = require("./NeutrinoContext");
var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
// Cached temporary values.
var _gnwprMat0 = new cc.Mat4();
var _gnwprMat1 = new cc.Mat4();
var _gnwprQuat0 = new cc.Quat();
var _gnwprVec0 = new cc.Vec3();
var _uWPM = new cc.Mat4();
var _nwpos = [0, 0, 0, 0];
var _nwrot = [0, 0, 0, 0];
function propertyValueToNpValue(value) {
    if (value instanceof cc.Vec2) {
        return [value.x, value.y];
    }
    else if (value instanceof cc.Vec3) {
        return [value.x, value.y, value.z];
    }
    else {
        return value;
    }
}
var NeutrinoComponent = /** @class */ (function (_super) {
    __extends(NeutrinoComponent, _super);
    function NeutrinoComponent() {
        var _this_1 = _super !== null && _super.apply(this, arguments) || this;
        _this_1.context = null;
        _this_1._neutrinoEffectModel = null;
        _this_1._neutrinoEffect = null;
        _this_1._spriteFrames = null;
        _this_1._emitterPropsOnStart = {};
        _this_1._texturesRemap = null;
        _this_1._waitingForContext = false;
        _this_1._resetInProgress = false;
        _this_1._numTexturesLoading = 0;
        _this_1._errorOnLoad = false;
        _this_1._worldScale = new cc.Vec3();
        _this_1._destructed = false;
        _this_1._serialized = false;
        _this_1._worldParentId = '';
        _this_1._texturesPrefixPath = '';
        _this_1._spriteAtlas = null;
        _this_1._pausedOnStart = false;
        _this_1._pausedGeneratorsOnStart = false;
        // If true, the component will be destroyed when the effect is empty.
        _this_1.destroyWhenEmpty = false;
        // If true, the node of the component will be destroyed when the effect is empty.
        _this_1.destroyNodeWhenEmpty = false;
        return _this_1;
    }
    Object.defineProperty(NeutrinoComponent.prototype, "worldParent", {
        get: function () {
            return this._findWorldParent();
        },
        set: function (value) {
            this._worldParentId = value ? value.uuid : '';
            this._waitForContextAndReset();
            if (CC_EDITOR) {
                var settings = NeutrinoSettings_1.default.instance();
                if (settings) {
                    settings.defaultWorldParent = value;
                }
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NeutrinoComponent.prototype, "texturesPrefixPath", {
        get: function () {
            return this._texturesPrefixPath;
        },
        set: function (value) {
            this._texturesPrefixPath = value;
            this._waitForContextAndReset();
            if (CC_EDITOR) {
                var settings = NeutrinoSettings_1.default.instance();
                if (settings) {
                    settings.defaultTexturesPrefixPath = value;
                }
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NeutrinoComponent.prototype, "spriteAtlas", {
        get: function () {
            return this._spriteAtlas;
        },
        set: function (value) {
            this._spriteAtlas = value;
            this._waitForContextAndReset();
            if (CC_EDITOR) {
                var settings = NeutrinoSettings_1.default.instance();
                if (settings) {
                    settings.defaultSpriteAtlas = value;
                }
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NeutrinoComponent.prototype, "pausedOnStart", {
        get: function () {
            return this._pausedOnStart;
        },
        set: function (value) {
            this._pausedOnStart = value;
            this._waitForContextAndReset();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NeutrinoComponent.prototype, "pausedGeneratorsOnStart", {
        get: function () {
            return this._pausedGeneratorsOnStart;
        },
        set: function (value) {
            this._pausedGeneratorsOnStart = value;
            this._waitForContextAndReset();
        },
        enumerable: false,
        configurable: true
    });
    NeutrinoComponent.prototype.resetInEditor = function () {
        this._waitForContextAndReset();
    };
    NeutrinoComponent.prototype.onLoad = function () {
        this.context = NeutrinoContext_1.default.instance();
        this.context.ensureNoiseTextureIsGenerated();
        if (!this._serialized) {
            this._serialized = true;
            var settings = NeutrinoSettings_1.default.instance();
            if (settings) {
                this._texturesPrefixPath = settings.defaultTexturesPrefixPath;
                this._spriteAtlas = settings.defaultSpriteAtlas;
                if (settings.defaultWorldParent) {
                    this._worldParentId = settings.defaultWorldParent.uuid;
                }
            }
        }
        this._waitForContextAndReset();
    };
    NeutrinoComponent.prototype.onDestroy = function () {
        if (this._spriteFrames) {
            this._spriteFrames.forEach(function (spriteFrame) {
                if (spriteFrame) {
                    spriteFrame.decRef();
                }
            });
            this._spriteFrames.length = 0;
        }
        if (this._waitingForContext) {
            this.context.off('loaded', this._reset, this);
        }
        this._destructed = true;
    };
    NeutrinoComponent.prototype.update = function (dt) {
        if (!this._neutrinoEffect) {
            return;
        }
        this._getNeutrinoWorldPositionRotation(_nwpos, _nwrot);
        this._neutrinoEffect.update(dt, _nwpos, _nwrot);
        var worldParent = this.worldParent;
        if (worldParent) {
            worldParent.getWorldMatrix(_uWPM);
            this.materials.forEach(function (material) {
                material.setProperty('worldParentMat', _uWPM);
            });
        }
        else {
            this.materials.forEach(function (material) {
                material.setProperty('worldParentMat', cc.Mat4.IDENTITY);
            });
        }
        if (!CC_EDITOR && !this.paused()) {
            if (this.destroyWhenEmpty || this.destroyNodeWhenEmpty) {
                var empty = (this.getNumParticles() === 0);
                if (empty) {
                    if (this.destroyNodeWhenEmpty) {
                        this.node.destroy();
                    }
                    else {
                        this.destroy();
                    }
                }
            }
        }
    };
    /**
     * The component is fully loaded and ready to render.
     * @method ready
     * @return {Boolean} - true if the component is ready to render.
     */
    NeutrinoComponent.prototype.ready = function () {
        return this._neutrinoEffect !== null;
    };
    /**
     * Restarts the effect. Current position and rotation of the node is used
     * to start simulating the effect.
     * @method restart
     */
    NeutrinoComponent.prototype.restart = function () {
        this._getNeutrinoWorldPositionRotation(_nwpos, _nwrot);
        this._neutrinoEffect.restart(_nwpos, _nwrot);
    };
    /**
     * Effect jumps to the current position and rotation of the node without trail
     * effect. Usually used as subsequent call of changing position and rotation.
     * In other words teleports the effect to current position of the node.
     * @method resetPositionRotation
     */
    NeutrinoComponent.prototype.resetPositionRotation = function () {
        this._getNeutrinoWorldPositionRotation(_nwpos, _nwrot);
        this._neutrinoEffect.resetPosition(_nwpos, _nwrot);
    };
    /**
     * Pauses the effect. If effect is not loaded yet, it will be started paused.
     * All particles are frozen when the effect is paused.
     * @method pause
     */
    NeutrinoComponent.prototype.pause = function () {
        if (this.ready()) {
            this._neutrinoEffect.pauseAllEmitters();
        }
        this._pausedOnStart = true;
    };
    /**
     * Unpauses the effect. If the effect is not loaded yet, is will be started unpaused.
     * All particles continues to simulate when the effect is unpaused.
     * @method unpause
     */
    NeutrinoComponent.prototype.unpause = function () {
        if (this.ready()) {
            this._neutrinoEffect.unpauseAllEmitters();
        }
        this._pausedOnStart = false;
    };
    /**
     * Returns true if the effect is paused.
     * @method paused
     * @return {Boolean} - true, if the effect is paused.
     */
    NeutrinoComponent.prototype.paused = function () {
        if (this.ready()) {
            return this._neutrinoEffect.areAllEmittersPaused();
        }
        else {
            return this._pausedOnStart;
        }
    };
    /**
     * Pauses generators. If the effect is not loaded yet, it will be started with paused
     * generators. When generators are paused, no new particles are created, however
     * all created particles continue to simulate.
     * @method pauseGenerators
     */
    NeutrinoComponent.prototype.pauseGenerators = function () {
        if (this.ready()) {
            this._neutrinoEffect.pauseGeneratorsInAllEmitters();
        }
        this._pausedGeneratorsOnStart = true;
    };
    /**
     * Unpauses generators. If the effect is not loaded yet, it will be started with unpaused
     * generators. When generators are unpaused, they generate new particles when
     * necessary.
     * @method unpauseGenerators
     */
    NeutrinoComponent.prototype.unpauseGenerators = function () {
        if (this.ready()) {
            this._neutrinoEffect.unpauseGeneratorsInAllEmitters();
        }
        this._pausedGeneratorsOnStart = false;
    };
    /**
     * Returns true, if generators in the effect are paused.
     * @method generatorsPaused
     * @return {Boolean} - true, if generators are paused
     */
    NeutrinoComponent.prototype.generatorsPaused = function () {
        if (this.ready()) {
            return this._neutrinoEffect.areGeneratorsInAllEmittersPaused();
        }
        else {
            return this._pausedGeneratorsOnStart;
        }
    };
    /**
     * Sets emitter property in all standalone emitters in the effect.
     * @method setPropertyInAllEmitters
     * @param {string} name Name of the property to change.
     * @param {Number | cc.Vec2 | cc.Vec3} value Value of the property.
     * @example
     * effect.setPropertyInAllEmitters('Color', new cc.Vec3(1, 0, 0));
     */
    NeutrinoComponent.prototype.setPropertyInAllEmitters = function (name, value) {
        var npValue = propertyValueToNpValue(value);
        if (this.ready()) {
            this._neutrinoEffect.setPropertyInAllEmitters(name, npValue);
        }
        else {
            this._emitterPropsOnStart[name] = npValue;
        }
    };
    /**
     * Returns a number of active particles in the effect. You can use it to find out if the
     * effect is finished playing.
     * @return {Number} Number of active particles in the effect.
     */
    NeutrinoComponent.prototype.getNumParticles = function () {
        if (this._neutrinoEffect) {
            return this._neutrinoEffect.getNumParticles();
        }
        return 0;
    };
    /**
     * This method is an override of RenderComponent._checkBacth (thank you guys for great spelling!)
     * Here we ignore materials and just check cullingMask. The rest of materials
     * check will be in NeutrinoAssembler.fillBuffers().
     */
    NeutrinoComponent.prototype._checkBacth = function (renderer, cullingMask) {
        if (renderer.cullingMask !== cullingMask) {
            renderer._flush();
            renderer.cullingMask = cullingMask;
        }
        // NeutrinoComponent don't use renderer.node and it can be unchanged.
        // Setting up this property should be done due to consistency with
        // other components and their behavior. However, it will break Spine
        // integration which doesn't expect that attached components will change
        // the renderer.node.
        //renderer.node = renderer._dummyNode;
    };
    NeutrinoComponent.prototype._waitForContextAndReset = function () {
        if (!this.context) {
            return;
        }
        if (!this.context.loaded()) {
            this._waitingForContext = true;
            this.context.once('loaded', this._reset, this);
            return;
        }
        this._reset();
    };
    /**
     * Resets the component: tries to recreate NeutrinoEffect and reload all resources.
     */
    NeutrinoComponent.prototype._reset = function () {
        if (this._resetInProgress || this._destructed) {
            return;
        }
        this._waitingForContext = false;
        var EffectClass = this.getEffectClass();
        if (!EffectClass) {
            cc.error(this.__classname__ + ": you shouldn't use NeutrinoComponent by itself. Use generated effect classes instead.");
            return;
        }
        this._resetInProgress = true;
        this._errorOnLoad = false;
        this._neutrinoEffectModel = new EffectClass(this.context.neutrinoContext);
        this._neutrinoEffect = null;
        // Load textures.
        var numTextures = this._neutrinoEffectModel.textures.length;
        this._spriteFrames = new Array(numTextures);
        this._numTexturesLoading = this._spriteFrames.length;
        for (var texIndex = 0; texIndex < numTextures; ++texIndex) {
            var texturePath = this._texturesPrefixPath + this._neutrinoEffectModel.textures[texIndex];
            var texturePathNoExt = texturePath.replace(/\.[^/.]+$/, "");
            if (this.spriteAtlas) {
                var spriteFrame = this.spriteAtlas.getSpriteFrame(texturePathNoExt);
                if (spriteFrame) {
                    spriteFrame.addRef();
                    this._spriteFrames[texIndex] = spriteFrame;
                    --this._numTexturesLoading;
                }
                else {
                    cc.warn(this.__classname__ + ": Can't load sprite '" + texturePathNoExt + "' from sprite atlas. Will try to load single texture.");
                    this._loadTexture(texIndex, texturePathNoExt);
                }
            }
            else {
                this._loadTexture(texIndex, texturePathNoExt);
            }
        }
        if (this._numTexturesLoading === 0) {
            // TODO: deffer this to the end of the frame
            this._onTexturesLoaded();
        }
    };
    /**
     * Requests standalone texture for load.
     */
    NeutrinoComponent.prototype._loadTexture = function (texIndex, texturePath) {
        var _this_1 = this;
        var _this = this;
        var texturesDb = this.getTexturesDatabase();
        var textureDesc = texturesDb.find(function (tex) { return tex.path === texturePath; });
        var textureLoadFinished = function () {
            --_this._numTexturesLoading;
            if (_this._numTexturesLoading === 0) {
                _this._onTexturesLoaded();
            }
        };
        if (!textureDesc) {
            cc.error(this.__classname__ + ": Can't find texture '" + texturePath + ".");
            this._errorOnLoad = true;
            textureLoadFinished();
            return;
        }
        if (CC_DEV) {
            cc.assetManager.loadAny(textureDesc.uuid, function (err, spriteFrame) {
                if (_this_1._destructed) {
                    return;
                }
                if (err) {
                    cc.error(_this.__classname__ + ": Can't load texture '" + texturePath + "'. " + err);
                    _this._errorOnLoad = true;
                }
                else if (!spriteFrame) {
                    // Redundant check to remove error on multiple reloading in row.
                    cc.warn(_this.__classname__ + ": Loading flow wrong behavior found #1 (don't worry about it)");
                    _this._errorOnLoad = true;
                }
                else {
                    if (spriteFrame instanceof cc.Texture2D) {
                        spriteFrame = new cc.SpriteFrame(spriteFrame);
                    }
                    spriteFrame.addRef();
                    if (!_this._spriteFrames) {
                        // Redundant check to remove error on multiple reloading in row.
                        cc.warn(_this.__classname__ + ": Loading flow wrong behavior found #2 (don't worry about it)");
                        _this._errorOnLoad = true;
                    }
                    else {
                        _this._spriteFrames[texIndex] = spriteFrame;
                    }
                }
                textureLoadFinished();
            });
        }
        else {
            this.context.texturesBundle().load(textureDesc.path, cc.SpriteFrame, function (err, spriteFrame) {
                if (_this_1._destructed) {
                    return;
                }
                if (err) {
                    cc.error(_this.__classname__ + ": Can't load sprite frame '" + texturePath + "'. " + err);
                    _this._errorOnLoad = true;
                }
                else {
                    spriteFrame.addRef();
                    _this._spriteFrames[texIndex] = spriteFrame;
                }
                textureLoadFinished();
            });
        }
    };
    /**
     * When everything is loaded - create neutrino effect.
     */
    NeutrinoComponent.prototype._onTexturesLoaded = function () {
        var _this_1 = this;
        if (this._errorOnLoad) {
            this._resetInProgress = false;
            return;
        }
        this.materials.length = 0;
        var materialsSetupError = false;
        this._neutrinoEffectModel.renderStyles.forEach(function (renderStyle, renderStyleIndex) {
            var texIndex = renderStyle.textureIndices[0];
            var spriteFrame = _this_1._spriteFrames[texIndex];
            if (!spriteFrame) {
                // Redundant check to remove error on multiple reloading in row.
                cc.warn(_this_1.__classname__ + ": Loading flow wrong behavior found #3 (don't worry about it)");
                materialsSetupError = true;
                return;
            }
            var texture = spriteFrame.getTexture();
            if (!texture) {
                // Redundant check to remove error on multiple reloading in row.
                cc.warn(_this_1.__classname__ + ": Loading flow wrong behavior found #4 (don't worry about it)");
                materialsSetupError = true;
                return;
            }
            var materialIndex = _this_1._neutrinoEffectModel.materials[renderStyle.materialIndex];
            var material = _this_1.context.materials[materialIndex * 2 +
                (texture.hasPremultipliedAlpha() ? 1 : 0)];
            if (!material) {
                // Redundant check to remove error on multiple reloading in row.
                cc.warn(_this_1.__classname__ + ": Loading flow wrong behavior found #5 (don't worry about it)");
                materialsSetupError = true;
                return;
            }
            var matVar = _this_1.setMaterial(renderStyleIndex, material);
            matVar.setProperty('texture', texture);
        }, this);
        if (materialsSetupError) {
            this._resetInProgress = false;
            return;
        }
        this._initTexturesRemap();
        this._getNeutrinoWorldPositionRotation(_nwpos, _nwrot);
        this._neutrinoEffect = this._neutrinoEffectModel.createWGLInstance(_nwpos, _nwrot, this._assembler, {
            paused: this._pausedOnStart,
            generatorsPaused: this._pausedGeneratorsOnStart
        });
        this._neutrinoEffect.texturesRemap = this._texturesRemap;
        for (var prop in this._emitterPropsOnStart) {
            this._neutrinoEffect.setPropertyInAllEmitters(prop, this._emitterPropsOnStart[prop]);
        }
        this._emitterPropsOnStart = {};
        this._resetInProgress = false;
    };
    /**
     * In case some of textures are placed on atlases we need to prepare remapping structure for
     * neutrinoparticles.js.
     */
    NeutrinoComponent.prototype._initTexturesRemap = function () {
        var remapNeeded = false;
        for (var texIndex = 0; texIndex < this._spriteFrames.length; ++texIndex) {
            var spriteFrame = this._spriteFrames[texIndex];
            if (spriteFrame.uv[6] !== 1 ||
                spriteFrame.uv[0] !== 0 ||
                spriteFrame.uv[7] !== 0 ||
                spriteFrame.uv[1] !== 1) {
                remapNeeded = true;
                break;
            }
        }
        if (!remapNeeded) {
            this._texturesRemap = [];
            return;
        }
        this._texturesRemap = new Array(this._spriteFrames.length);
        for (var texIndex = 0; texIndex < this._spriteFrames.length; ++texIndex) {
            var spriteFrame = this._spriteFrames[texIndex];
            this._texturesRemap[texIndex] = new this.context.neutrinoContext.SubRect(spriteFrame.uv[0], 1 - spriteFrame.uv[1], spriteFrame.uv[6] - spriteFrame.uv[0], spriteFrame.uv[1] - spriteFrame.uv[7]);
        }
    };
    NeutrinoComponent.prototype._getNeutrinoWorldPositionRotation = function (position, rotation) {
        var worldMatrix = _gnwprMat0;
        var worldRotation = _gnwprQuat0;
        var worldPosition = _gnwprVec0;
        var worldScale = this._worldScale;
        this.node.getWorldMatrix(worldMatrix);
        var worldParent = this.worldParent;
        if (worldParent) {
            var worldParentMatrix = _gnwprMat1;
            worldParent.getWorldMatrix(worldParentMatrix);
            cc.Mat4.invert(worldParentMatrix, worldParentMatrix);
            cc.Mat4.multiply(worldMatrix, worldParentMatrix, worldMatrix);
        }
        cc.Mat4.getRotation(worldRotation, worldMatrix);
        worldMatrix.getTranslation(worldPosition);
        worldMatrix.getScale(worldScale);
        position[0] = worldPosition.x / worldScale.x;
        position[1] = worldPosition.y / worldScale.y;
        position[2] = worldPosition.z / worldScale.z;
        rotation[0] = worldRotation.x;
        rotation[1] = worldRotation.y;
        rotation[2] = worldRotation.z;
        rotation[3] = worldRotation.w;
    };
    NeutrinoComponent.prototype._findWorldParent = function () {
        var node = this.node;
        do {
            if (node.uuid == this._worldParentId) {
                return node;
            }
            node = node.parent;
        } while (node);
        return null;
    };
    __decorate([
        property
    ], NeutrinoComponent.prototype, "_serialized", void 0);
    __decorate([
        property
    ], NeutrinoComponent.prototype, "_worldParentId", void 0);
    __decorate([
        property(cc.Node)
    ], NeutrinoComponent.prototype, "worldParent", null);
    __decorate([
        property
    ], NeutrinoComponent.prototype, "_texturesPrefixPath", void 0);
    __decorate([
        property
    ], NeutrinoComponent.prototype, "texturesPrefixPath", null);
    __decorate([
        property(cc.SpriteAtlas)
    ], NeutrinoComponent.prototype, "_spriteAtlas", void 0);
    __decorate([
        property(cc.SpriteAtlas)
    ], NeutrinoComponent.prototype, "spriteAtlas", null);
    __decorate([
        property
    ], NeutrinoComponent.prototype, "_pausedOnStart", void 0);
    __decorate([
        property
    ], NeutrinoComponent.prototype, "pausedOnStart", null);
    __decorate([
        property
    ], NeutrinoComponent.prototype, "_pausedGeneratorsOnStart", void 0);
    __decorate([
        property
    ], NeutrinoComponent.prototype, "pausedGeneratorsOnStart", null);
    __decorate([
        property
    ], NeutrinoComponent.prototype, "destroyWhenEmpty", void 0);
    __decorate([
        property
    ], NeutrinoComponent.prototype, "destroyNodeWhenEmpty", void 0);
    NeutrinoComponent = __decorate([
        ccclass
    ], NeutrinoComponent);
    return NeutrinoComponent;
}(cc.RenderComponent));
exports.default = NeutrinoComponent;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/neutrinoparticles-runtime/NeutrinoAssembler.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '7dd47KelZZLyadMohM05ouJ', 'NeutrinoAssembler');
// NeutrinoAssembler.ts

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var NeutrinoAssemblerWebGL_1 = require("./NeutrinoAssemblerWebGL");
var NeutrinoAssemblerJSB_1 = require("./NeutrinoAssemblerJSB");
var NeutrinoAssembler = CC_JSB ? NeutrinoAssemblerJSB_1.default : NeutrinoAssemblerWebGL_1.default;
exports.default = NeutrinoAssembler;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBhY2thZ2VzXFxuZXV0cmlub3BhcnRpY2xlc1xccnVudGltZVxcTmV1dHJpbm9Bc3NlbWJsZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSxtRUFBOEQ7QUFDOUQsK0RBQTBEO0FBRTFELElBQU0saUJBQWlCLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyw4QkFBb0IsQ0FBQyxDQUFDLENBQUMsZ0NBQXNCLENBQUM7QUFDakYsa0JBQWUsaUJBQWlCLENBQUMiLCJmaWxlIjoiIiwic291cmNlUm9vdCI6Ii8iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgTmV1dHJpbm9Bc3NlbWJsZXJXZWJHTCBmcm9tICcuL05ldXRyaW5vQXNzZW1ibGVyV2ViR0wnO1xyXG5pbXBvcnQgTmV1dHJpbm9Bc3NlbWJsZXJKU0IgZnJvbSAnLi9OZXV0cmlub0Fzc2VtYmxlckpTQic7XHJcblxyXG5jb25zdCBOZXV0cmlub0Fzc2VtYmxlciA9IENDX0pTQiA/IE5ldXRyaW5vQXNzZW1ibGVySlNCIDogTmV1dHJpbm9Bc3NlbWJsZXJXZWJHTDtcclxuZXhwb3J0IGRlZmF1bHQgTmV1dHJpbm9Bc3NlbWJsZXI7XHJcbiJdfQ==
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/neutrinoparticles/exported_effects/Sparks burst.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '4c81bSqRdxFD68UvUYMogaz', 'Sparks burst');
// neutrinoparticles/exported_effects/Sparks burst.js

"use strict";

// 13ce42a2-420f-4b86-8911-dfffe6aadb52
(function (root, factory) {
  if (typeof exports === 'object' && typeof module !== 'undefined') {
    module.exports = factory();
  } else if (typeof define === 'function' && define.amd) {
    define(['exports'], function (exports) {
      (root.NeutrinoEffect = exports)['Sparks_burst'] = factory();
    });
  } else {
    var namespace = root.NeutrinoEffect || (root.NeutrinoEffect = {});
    namespace.__last__ = namespace['Sparks_burst'] = factory();
  }
})(typeof self !== 'undefined' ? self : void 0, function () {
  function Sparks_burst(ctx) {
    var Db = this;

    var ne = function ne(Ld, Bd) {
      this.Ld = Ld;
      this.Bd = Bd;

      if (this.Bd.we.pe.length > 0) {
        this.we = this.Bd.we.pe[0];
        this.Lc = [ne.prototype.Ec, ne.prototype.Fc][this.we.xe];
      } else this.we = null;
    };

    ne.prototype = {
      Ec: function Ec(fe, Ab, Xb) {
        var Gc = ctx.ib(Xb.Md);
        var Hc = Math.cos(Gc);
        var Ic = Math.sin(Gc);
        var ye = ctx.Ae(Xb.Nd[0]);
        var ze = ctx.Ae(Xb.Nd[1]);
        fe.
        /**/
        transform(ye * Hc, ye * Ic, ze * -Ic, ze * Hc, Ab[0], Ab[1]);
      },
      Fc: function Fc(fe, Ab, Xb) {
        var q = Xb.Mc;
        var z2 = 2.0 * q[2] * q[2];
        var xy = 2.0 * q[0] * q[1];
        var wz = 2.0 * q[3] * q[2];
        var ye = ctx.Ae(Xb.Nd[0]);
        var ze = ctx.Ae(Xb.Nd[1]);
        fe.
        /**/
        transform(ye * (1.0 - 2.0 * q[1] * q[1] - z2), ye * (xy + wz), ze * (wz - xy), ze * (2.0 * q[0] * q[0] + z2 - 1.0), Ab[0], Ab[1]);
      },
      Pc: function Pc(fe, Xb, ge) {
        Xb.vc(fe, -1, ge);

        if (this.we) {
          if (this.Be != null && !Xb.oc) {
            if (Xb.Od > 0.001) {
              var De = Math.floor(Xb.Qc % this.we.Rc);
              var Ee = Math.floor(Xb.Qc / this.we.Rc);
              var Ab = Xb.Ab.slice();
              var Nd = Xb.Nd.slice();

              if (!ge || ge.
              /**/
              transform(Ab, Nd)) {
                var df = Math.abs(Nd[0]);
                var ef = Math.abs(Nd[1]);

                if (df > 0.001 && ef > 0.001) {
                  fe.save();
                  this.Lc(fe, Ab, Xb);
                  fe.translate(-df * Xb.Pd[0], -ef * (1 - Xb.Pd[1]));
                  fe.globalAlpha *= Xb.Od;

                  if (Xb.gf[0] < 0.999 || Xb.gf[1] < 0.999 || Xb.gf[2] < 0.999) {
                    if (df >= 1 && ef >= 1) {
                      var Ye = df < this.Tc ? df : this.Tc;
                      var Ze = ef < this.Uc ? ef : this.Uc;
                      ctx.af(Ye, Ze);
                      ctx.bf.globalCompositeOperation = "copy";
                      ctx.bf.drawImage(this.Be.image, this.Be.x + this.Tc * De, this.Be.y + this.Uc * Ee, this.Tc, this.Uc, 0, 0, Ye, Ze);
                      ctx.bf.globalCompositeOperation = "multiply";
                      ctx.bf.fillStyle = ctx.ff(Xb.gf);
                      ctx.bf.fillRect(0, 0, Ye, Ze);
                      ctx.bf.globalCompositeOperation = "destination-atop";
                      ctx.bf.drawImage(this.Be.image, this.Be.x + this.Tc * De, this.Be.y + this.Uc * Ee, this.Tc, this.Uc, 0, 0, Ye, Ze);
                      fe.drawImage(ctx.cf, 0, 0, Ye, Ze, 0, 0, df, ef);
                    }
                  } else {
                    fe.drawImage(this.Be.image, this.Be.x + this.Tc * De, this.Be.y + this.Uc * Ee, this.Tc, this.Uc, 0, 0, df, ef);
                  }

                  fe.restore();
                }
              }
            }
          }
        }

        Xb.vc(fe, 1, ge);
      },
      Hd: function Hd(fe, ge) {
        fe.save();

        if (this.we) {
          fe.globalCompositeOperation = this.Ld.materials[this.Ld.
          /**/
          model.renderStyles[this.we.renderStyleIndex].materialIndex];
          this.Be = this.Ld.textureDescs[this.Ld.
          /**/
          model.renderStyles[this.we.renderStyleIndex].textureIndices[0]];
        } else {
          this.Be = null;
        }

        if (this.Be) {
          this.Tc = this.Be.width / this.we.Rc;
          this.Uc = this.Be.height / this.we.Sc;
        }

        function kd(a, b) {
          if (a.Ab[2] > b.Ab[2]) return 1;
          if (a.Ab[2] < b.Ab[2]) return -1;
          return 0;
        }

        switch (this.Bd.Vc) {
          case 0:
            for (var Wb = 0; Wb < this.Bd.tc.length; ++Wb) {
              this.Pc(fe, this.Bd.tc[Wb], ge);
            }

            break;

          case 1:
            for (var Wb = this.Bd.tc.length; Wb-- > 0;) {
              this.Pc(fe, this.Bd.tc[Wb], ge);
            }

            break;

          case 2:
            this.Bd.tc.sort(kd);

            for (var Wb = 0; Wb < this.Bd.tc.length; ++Wb) {
              this.Pc(fe, this.Bd.tc[Wb], ge);
            }

            break;
        }

        fe.restore();
      }
    };

    var oe = function oe(Ld, Bd) {
      this.Ld = Ld;
      this.Bd = Bd;
      if (this.Bd.we.pe.length > 0) this.we = this.Bd.we.pe[0];else this.we = null;
      this.vertex = [{
        /**/
        position: [0.0, 0.0, 0.0],

        /**/
        color: [0, 0, 0, 0],

        /**/
        texCoords: [[0.0, 0.0]]
      }, {
        /**/
        position: [0.0, 0.0, 0.0],

        /**/
        color: [0, 0, 0, 0],

        /**/
        texCoords: [[0.0, 0.0]]
      }, {
        /**/
        position: [0.0, 0.0, 0.0],

        /**/
        color: [0, 0, 0, 0],

        /**/
        texCoords: [[0.0, 0.0]]
      }, {
        /**/
        position: [0.0, 0.0, 0.0],

        /**/
        color: [0, 0, 0, 0],

        /**/
        texCoords: [[0.0, 0.0]]
      }];
    };

    oe.prototype = {
      qe: function qe(Xb, se, re, te, renderBuffer) {
        Xb.Ce(-1, se, re, te, renderBuffer);

        if (this.we) {
          if (!Xb.oc) {
            var v0 = this.vertex[0];
            var v1 = this.vertex[1];
            var v2 = this.vertex[2];
            var v3 = this.vertex[3];
            var Fe = [],
                Ge = [];

            if (this.we.xe == 0) {
              var a = ctx.ib(Xb.Md);
              var s = -Math.sin(a);
              var c = Math.cos(a);
              Fe[0] = se[0] * c + re[0] * s;
              Fe[1] = se[1] * c + re[1] * s;
              Fe[2] = se[2] * c + re[2] * s;
              Ge[0] = -se[0] * s + re[0] * c;
              Ge[1] = -se[1] * s + re[1] * c;
              Ge[2] = -se[2] * s + re[2] * c;
            } else {
              var q = Xb.Mc;
              var z2 = 2.0 * q[2] * q[2];
              var xy = 2.0 * q[0] * q[1];
              var wz = 2.0 * q[3] * q[2];
              Fe[0] = 1.0 - 2.0 * q[1] * q[1] - z2;
              Fe[1] = xy + wz;
              Fe[2] = 2.0 * q[0] * q[2] - 2.0 * q[3] * q[1];
              Ge[0] = xy - wz;
              Ge[1] = 1.0 - 2.0 * q[0] * q[0] - z2;
              Ge[2] = 2.0 * q[1] * q[2] + 2.0 * q[3] * q[0];
            }

            var He = [],
                Ie = [],
                Je = [],
                Ke = [];
            ctx.u(He, Fe, -Xb.Nd[0] * Xb.Pd[0]);
            ctx.u(Ie, Fe, Xb.Nd[0] * (1.0 - Xb.Pd[0]));
            ctx.u(Je, Ge, -Xb.Nd[1] * Xb.Pd[1]);
            ctx.u(Ke, Ge, Xb.Nd[1] * (1.0 - Xb.Pd[1]));
            ctx.c(v0.
            /**/
            position, He, Je);
            ctx.c(v0.
            /**/
            position, v0.
            /**/
            position, Xb.Ab);
            ctx.c(v1.
            /**/
            position, He, Ke);
            ctx.c(v1.
            /**/
            position, v1.
            /**/
            position, Xb.Ab);
            ctx.c(v2.
            /**/
            position, Ie, Ke);
            ctx.c(v2.
            /**/
            position, v2.
            /**/
            position, Xb.Ab);
            ctx.c(v3.
            /**/
            position, Ie, Je);
            ctx.c(v3.
            /**/
            position, v3.
            /**/
            position, Xb.Ab);
            {
              var rgb = ctx.v(Xb.gf, 255);
              v0.
              /**/
              color = v1.
              /**/
              color = v2.
              /**/
              color = v3.
              /**/
              color = [rgb[0], rgb[1], rgb[2], Xb.Od * 255];
            }
            {
              var De = Math.floor(Xb.Qc % this.we.Rc);
              var Ee = Math.floor(Xb.Qc / this.we.Rc);
              var Pe, Qe, Re, Se;
              var We = this.Ld.texturesRemap[this.Ld.
              /**/
              model.renderStyles[this.we.renderStyleIndex].textureIndices[0]];

              if (We) {
                var Ue = We.width / this.we.Rc;
                var Ve = We.height / this.we.Sc;
                var Pe = We.x + De * Ue;
                var Qe = Pe + Ue;
                var Re = We.y + We.height - Ee * Ve;
                var Se = Re - Ve;
              } else {
                var Ue = 1.0 / this.we.Rc;
                var Ve = 1.0 / this.we.Sc;
                var Pe = De * Ue;
                var Qe = Pe + Ue;
                var Re = 1.0 - Ee * Ve;
                var Se = Re - Ve;
              }

              v0.
              /**/
              texCoords[0] = [Pe, Se];
              v1.
              /**/
              texCoords[0] = [Pe, Re];
              v2.
              /**/
              texCoords[0] = [Qe, Re];
              v3.
              /**/
              texCoords[0] = [Qe, Se];
            }

            if (renderBuffer.beforeQuad) {
              renderBuffer.beforeQuad(this.we.renderStyleIndex);
            }

            renderBuffer.pushVertex(v0);
            renderBuffer.pushVertex(v1);
            renderBuffer.pushVertex(v2);
            renderBuffer.pushVertex(v3);

            if (!renderBuffer.__lastRenderCall) {
              renderBuffer.__lastRenderCall = new ctx.RenderCall(0, 6, this.we.renderStyleIndex);
            } else {
              var lastRenderCall = renderBuffer.__lastRenderCall;

              if (lastRenderCall.renderStyleIndex == this.we.renderStyleIndex) {
                lastRenderCall.numIndices += 6;
              } else {
                renderBuffer.pushRenderCall(lastRenderCall);
                renderBuffer.__lastRenderCall = new ctx.RenderCall(lastRenderCall.startIndex + lastRenderCall.numIndices, 6, this.we.renderStyleIndex);
              }
            }
          }
        }

        Xb.Ce(1, se, re, te, renderBuffer);
      },
      ue: function ue(se, re, te, renderBuffer) {
        switch (this.Bd.Vc) {
          case 0:
            for (var Wb = 0; Wb < this.Bd.tc.length; ++Wb) {
              this.qe(this.Bd.tc[Wb], se, re, te, renderBuffer);
            }

            break;

          case 1:
            for (var Wb = this.Bd.tc.length; Wb-- > 0;) {
              this.qe(this.Bd.tc[Wb], se, re, te, renderBuffer);
            }

            break;

          case 2:
            this.Bd.tc.forEach(function (Xb) {
              Xb.depth = ctx.H(te, Xb.Ab);
            });
            this.Bd.tc.sort(function (a, b) {
              if (a.depth < b.depth) return 1;
              if (a.depth > b.depth) return -1;
              return 0;
            });
            this.Bd.tc.forEach(function (Xb) {
              this.qe(Xb, se, re, te, renderBuffer);
            }, this);
            break;
        }
      }
    };

    var ld = function ld(Ld, we, ve) {
      var Vb = this;
      this.Ld = Ld;
      this.we = we; // Eb

      function Eb() {
        this.Fb = 0;
        this.Gb = 1;
        this.Hb = null;
        this.Ib = null;
        this.Kb = 0;
        this.Lb = 1;
        Vb.we.Mb(this); // IMPL

        this.Nb = function () {
          this.Ob = this.Gb;
          this.Fb = 0;
        };

        this.Nb();
      }

      Eb.prototype = {
        Jd: function Jd() {
          this.Nb();
        },
        Id: function Id(Qb, Ab, Mc) {
          Vb.we.Pb(Qb, Vb, this); // IMPL

          var Rb = Vb.Rb;
          var systemTime = Ld.Rb;
          var Sb = Qb;
          var ic = 0;

          if (this.zb > 0.000001) {
            var Tb = this.Ob + Qb * this.zb;

            while (Tb >= 1.0) {
              var Ub = this.zb < 0.001 ? 0.0 : (1.0 - this.Ob) / this.zb;
              Sb -= Ub;
              Rb += Ub;
              systemTime += Ub;

              if (this.Hb != null && Rb > this.Hb) {
                Vb.disactivate();
                break;
              }

              Vb.Rb = Rb;
              Ld.Rb = systemTime;
              if (Ab && Qb > 0) ctx.ab(Vb.Ab, Ab, Vb.Bb, Sb / Qb);
              if (Mc && Qb > 0) ctx.slerpq(Vb.Mc, Mc, Vb.prevRotation, Sb / Qb); // for the future when Jb would be external

              this.Lb = this.Jb;

              for (var Wb = 0; Wb < this.Jb; ++Wb) {
                if (Vb.sc.length == 0) break;
                if (this.Jb == 1) this.Kb = 0;else this.Kb = Wb / (this.Jb - 1);
                var Xb = Vb.sc.pop();
                Vb.tc.unshift(Xb);
                if (Wb == 0) Xb.Yb();else Xb.Zb();
                Xb.Id(Sb);
                ++ic;
              }

              this.Ob = 0.0;
              Tb -= 1.0;

              if (this.Ib != null && ++this.Fb >= this.Ib) {
                Vb.disactivate();
                break;
              }
            }

            this.Ob = Tb;
          }

          Rb += Sb;
          Vb.Rb = Rb;
          if (Ab) ctx.T(Vb.Ab, Ab);
          if (Mc) ctx.U(Vb.Mc, Mc);
          return ic;
        }
      }; // ac

      function ac() {
        this.Gb = 1;
        this.Kb = 0;
        this.Lb = 1;
        Vb.we.Mb(this); // IMPL

        this.Nb = function () {
          this.bc = this.Gb;
        };

        this.Nb();
      }

      ac.prototype = {
        Jd: function Jd() {
          this.Nb();
        },
        Id: function Id(Qb, Ab, Mc) {
          Vb.we.Pb(Qb, Vb, this); // IMPL

          var cc = Vb.Rb;
          var dc = cc + Qb;
          var systemTimeBeforeFrame = Ld.Rb;
          var systemTimeAfterFrame = systemTimeBeforeFrame + Qb;
          var ec = Ab ? ctx.O(ctx.h(Ab, Vb.Bb)) : 0;
          var ic = 0;

          if (ec > 0.000001) {
            var fc = ec / this.rd;
            var Tb = this.bc + fc;
            var hc = fc < 0.001 ? 1.0 - this.bc : (1.0 - this.bc) / fc;
            var jc = [];

            while (Tb > 1.0) {
              var kc = cc + hc * Qb;
              if (Ab) ctx.ab(jc, Vb.Bb, Ab, hc);
              Vb.Rb = kc;
              ctx.T(Vb.Ab, jc);
              Ld.Rb = ctx.X(systemTimeBeforeFrame, systemTimeAfterFrame, hc); // for the future when Jb would be external

              this.Lb = this.Jb;

              for (var Wb = 0; Wb < this.Jb; ++Wb) {
                if (Vb.sc.length == 0) break;
                if (this.Jb == 1) this.Kb = 0;else this.Kb = Wb / (this.Jb - 1);
                var Xb = Vb.sc.pop();
                Vb.tc.unshift(Xb);
                if (Wb == 0) Xb.Yb();else Xb.Zb();
                Xb.Id(Qb * (1.0 - hc));
                ++ic;
              }

              hc += 1.0 / fc;
              Tb -= 1.0;
            }

            this.bc = Tb;
          }

          Vb.Rb = dc;
          if (Ab) ctx.T(Vb.Ab, Ab);
          if (Mc) ctx.U(Vb.Mc, Mc);
          return ic;
        }
      }; // mc

      function mc() {
        this.Ab = [];
        this.Pd = [];
        this.Nd = [];
        this.gf = [];
        this.Kc = [];
      }

      mc.prototype = {
        nc: function nc() {
          this.oc = false;

          for (var i = 0; i < this.Kc.length; ++i) {
            var pc = this.Kc[i];
            pc.Bd.Jd(this.Ab, null);
            if (pc.Ad.sd) pc.Bd.disactivate();
          }
        },
        Yb: function Yb() {
          Vb.we.fd(Vb, this); // IMPL

          this.nc();
        },
        Zb: function Zb() {
          Vb.we.gd(Vb, this); // IMPL

          this.nc();
        },
        Id: function Id(Qb) {
          Vb.we.qc(Qb, Vb, this); // IMPL

          this.rc(Qb);
        },
        pc: function pc(je) {
          return this.Kc[je].Bd;
        },
        rc: function rc(Qb) {
          for (var i = 0; i < this.Kc.length; i++) {
            this.Kc[i].Bd.Id(Qb, this.Ab, null);
          }
        },
        uc: function uc(md, nd) {
          this.Kc.push({
            Bd: new ld(Ld, md, ve),
            Ad: nd
          });
        },
        vc: function vc(fe, xc, ge) {
          for (var i = 0; i < this.Kc.length; ++i) {
            var pc = this.Kc[i];
            if (xc == pc.Ad.xc) pc.Bd.Hd(fe, ge);
          }
        },
        Ce: function Ce(xc, se, re, te, renderBuffer) {
          for (var i = 0; i < this.Kc.length; ++i) {
            var pc = this.Kc[i];
            if (xc == pc.Ad.xc) pc.Bd.ue(se, re, te, renderBuffer);
          }
        },
        wc: function wc(fe) {
          this.oc = true;

          for (var i = 0; i < this.Kc.length; ++i) {
            var pc = this.Kc[i];

            if (pc.Ad.sd) {
              pc.Bd.activate();
              pc.Bd.Id(0);
            } else pc.Bd.disactivate();
          }
        },
        yc: function yc(Gd) {
          for (var i = 0; i < this.Kc.length; ++i) {
            this.Kc[i].Bd.Ed(Gd);
          }
        }
      }; // zc

      function zc() {}

      zc.prototype.Ac = function (Xb) {
        return Vb.we.Cc(Vb, Xb, this); // IMPL
      }; // ld Ad


      this.Ab = [];
      this.Bb = [];
      this.Mc = [];
      this.prevRotation = [];
      this.tc = [];
      this.sc = [];
      this.Wc = new zc();
      this.construct = new ve(this.Ld, this);
      this.Yc = [];
      this.ad = [];

      this.dd = function () {
        this.vd = new Eb();
      };

      this.ed = function () {
        this.vd = new ac();
      };

      this.we.ud(this); // IMPL

      for (var Wb = 0; Wb < this.jd; ++Wb) {
        var Xb = new mc();

        for (var id = 0; id < this.Yc.length; ++id) {
          var hd = this.Yc[id];
          Xb.uc(hd.Db, hd.Ad);
        }

        this.sc.push(Xb);
      }

      this.Nb = function (Ab, Mc) {
        ctx.T(this.Ab, Ab ? Ab : [0, 0, 0]);
        ctx.T(this.Bb, this.Ab);
        ctx.U(this.Mc, Mc ? Mc : [0, 0, 0, 1]);
        ctx.U(this.prevRotation, this.Mc);
        this.Rb = 0.0;
        this.wd = 0.0;
        this.Zc = true;
        this.paused_ = false;
        this.generatorsPaused_ = false;
        ctx.W(this.ad, 0, 0, 0);
      };
    };

    ld.prototype.Jd = function (Ab, Mc) {
      this.Nb(Ab, Mc);
      this.sc.push.apply(this.sc, this.tc);
      this.tc.length = 0;
      this.vd.Jd();
    };

    ld.prototype.Id = function (Qb, Ab, Mc) {
      if (this.paused_) {
        this.Td(Ab, Mc);
        return;
      }

      this.wd = this.Rb;

      if (Ab) {
        ctx.T(this.Bb, this.Ab);

        if (Qb > 0.0001) {
          var shift = [];
          ctx.g(shift, Ab, this.Bb);
          ctx.T(this.ad, shift);
          ctx.w(this.ad, this.ad, Qb);
        } else {
          ctx.W(this.ad, 0, 0, 0);
        }
      } else {
        ctx.W(this.ad, 0, 0, 0);
      }

      if (Mc) {
        ctx.U(this.prevRotation, this.Mc);
      }

      var ic;

      if (this.Zc && !this.generatorsPaused_) {
        ic = this.vd.Id(Qb, Ab, Mc);
      } else {
        if (Ab) ctx.T(this.Ab, Ab);
        if (Mc) ctx.U(this.Mc, Mc);
        ic = 0;
        this.Rb += Qb;
      }

      for (var Wb = ic; Wb < this.tc.length;) {
        var Xb = this.tc[Wb];

        if (!Xb.oc) {
          Xb.Id(Qb);

          if (this.Wc.Ac(this.tc[Wb])) {
            Xb.wc();
            if (this.xd(Wb)) continue;
          }
        } else {
          Xb.rc(Qb);
          if (this.xd(Wb)) continue;
        }

        ++Wb;
      }
    };

    ld.prototype.xd = function (je) {
      var Xb = this.tc[je];
      var ready = true;

      for (var id = 0; id < Xb.Kc.length; ++id) {
        var Bd = Xb.Kc[id].Bd;

        if (Bd.activated() || Bd.tc.length > 0) {
          ready = false;
          break;
        }
      }

      if (ready) {
        this.sc.push(this.tc[je]);
        this.tc.splice(je, 1);
        return true;
      }

      return false;
    };

    ld.prototype.Hd = function (fe, ge) {
      this.construct.Hd(fe, ge);
    };

    ld.prototype.ue = function (se, re, te, renderBuffer) {
      this.construct.ue(se, re, te, renderBuffer);
    };

    ld.prototype.Td = function (Ab, Mc) {
      this.wd = this.Rb;

      if (Ab) {
        ctx.T(this.Bb, this.Ab);
        ctx.T(this.Ab, Ab);
      }

      if (Mc) {
        ctx.U(this.prevRotation, this.Mc);
        ctx.U(this.Mc, Mc);
      }
    };

    ld.prototype.uc = function (md, nd) {
      this.Yc.push({
        Db: md,
        Ad: nd
      });
    };

    ld.prototype.
    /**/
    pause = function () {
      this.paused_ = true;
    };

    ld.prototype.
    /**/
    unpause = function () {
      this.paused_ = false;
    };

    ld.prototype.
    /**/
    paused = function () {
      return this.paused_;
    };

    ld.prototype.
    /**/
    pauseGenerators = function () {
      this.generatorsPaused_ = true;
    };

    ld.prototype.
    /**/
    unpauseGenerators = function () {
      this.generatorsPaused_ = false;
    };

    ld.prototype.
    /**/
    generatorsPaused = function () {
      return this.generatorsPaused_;
    };

    ld.prototype.activate = function () {
      this.Zc = true;
    };

    ld.prototype.disactivate = function () {
      this.Zc = false;
    };

    ld.prototype.activated = function () {
      return this.Zc;
    };

    ld.prototype.
    /**/
    getNumParticles = function () {
      return this.tc.length;
    };

    var ke = function ke() {
      var Cb = this;

      this._init = function (we, Ab, Mc, ve, options) {
        this.
        /**/
        model = we;
        this.Ab = [];
        this.Mc = []; // ke Ad

        this.od = [];

        this.pd = function (md) {
          var Bd = new ld(this, md, ve);
          Bd.Nb(this.Ab, this.Mc);
          this["_".concat(md.name)] = Bd;
          this.od.push(Bd);
        };

        this.Nb = function (Ab, Mc) {
          this.Cd = 0.0;
          this.Rb = 0.0;
          ctx.T(this.Ab, Ab ? Ab : [0, 0, 0]);
          ctx.U(this.Mc, Mc ? Mc : [0, 0, 0, 1]);
        };

        this.Nb(Ab, Mc);
        this.
        /**/
        model.qd(this); // IMPL

        this._presimNeeded = true;

        if (options.generatorsPaused) {
          this.
          /**/
          pauseGeneratorsInAllEmitters();
        }

        if (options.paused) {
          this.
          /**/
          pauseAllEmitters();
        } else {
          this.zeroUpdate();
          this.updateFixed(this.Ud, Ab, Mc, this.presimFrameTime);
          this._presimNeeded = false;
        }
      };
    };

    ke.prototype.
    /**/
    restart = function (
    /**/
    position,
    /**/
    rotation,
    /**/
    options) {
      this.Nb(
      /**/
      position ?
      /**/
      position : this.Ab,
      /**/
      rotation ?
      /**/
      rotation : this.Mc);
      this._presimNeeded = true;

      for (var i = 0; i < this.od.length; ++i) {
        this.od[i].Jd(this.Ab, this.Mc);
      }

      this._presimNeeded = true;

      if (options && options.generatorsPaused) {
        this.
        /**/
        pauseGeneratorsInAllEmitters();
      }

      if (options && options.paused) {
        this.
        /**/
        pauseAllEmitters();
      } else {
        this.zeroUpdate();
        this.updateFixed(this.Ud, this.Ab, this.Mc, this.presimFrameTime);
        this._presimNeeded = false;
      }
    };

    ke.prototype.zeroUpdate = function () {
      for (var i = 0; i < this.od.length; ++i) {
        this.od[i].Id(0, this.Ab, this.Mc);
      }
    };

    ke.prototype.
    /**/
    update = function (
    /**/
    dt,
    /**/
    position,
    /**/
    rotation) {
      if (this.Dd > 0.0) this.updateFixed(
      /**/
      dt,
      /**/
      position,
      /**/
      rotation, this.Dd);else this.updateFlex(
      /**/
      dt,
      /**/
      position,
      /**/
      rotation);
    };

    ke.prototype.updateFixed = function (
    /**/
    dt,
    /**/
    position,
    /**/
    rotation,
    /**/
    frameTime) {
      var updatedTime = 0.0;
      var hc = [];
      ctx.T(hc, this.Ab);
      var frameRotation = [];
      ctx.U(frameRotation, this.Mc);
      if (
      /**/
      position && ctx.equalv3_(
      /**/
      position, this.Ab))
        /**/
        position = null;
      if (
      /**/
      rotation && ctx.equalq_(
      /**/
      rotation, this.Mc))
        /**/
        rotation = null;

      while (
      /**/
      dt - updatedTime + this.Cd >=
      /**/
      frameTime) {
        var cc = this.Rb;
        if (
        /**/
        position) ctx.ab(hc, this.Ab,
        /**/
        position, updatedTime /
        /**/
        dt);
        if (
        /**/
        rotation) ctx.slerpq(frameRotation, this.Mc,
        /**/
        rotation, updatedTime /
        /**/
        dt);

        for (var i = 0; i < this.od.length; ++i) {
          this.od[i].Id(
          /**/
          frameTime, hc, frameRotation);
          this.Rb = cc;
        }

        updatedTime +=
        /**/
        frameTime - this.Cd;
        this.Cd = 0.0;
        this.Rb = cc +
        /**/
        frameTime;
      }

      if (
      /**/
      position) ctx.T(this.Ab,
      /**/
      position);
      if (
      /**/
      rotation) ctx.U(this.Mc,
      /**/
      rotation);
      this.Cd +=
      /**/
      dt - updatedTime;
    };

    ke.prototype.updateFlex = function (
    /**/
    dt,
    /**/
    position,
    /**/
    rotation) {
      var cc = this.Rb;

      for (var i = 0; i < this.od.length; ++i) {
        this.od[i].Id(
        /**/
        dt,
        /**/
        position,
        /**/
        rotation);
        this.Rb = cc;
      }

      this.Rb = cc +
      /**/
      dt;
      if (
      /**/
      position) ctx.T(this.Ab,
      /**/
      position);
      if (
      /**/
      rotation) ctx.U(this.Mc,
      /**/
      rotation);
    };

    ke.prototype.
    /**/
    resetPosition = function (
    /**/
    position,
    /**/
    rotation) {
      if (
      /**/
      position) ctx.T(this.Ab,
      /**/
      position);
      if (
      /**/
      rotation) ctx.U(this.Mc,
      /**/
      rotation);

      for (var i = 0; i < this.od.length; ++i) {
        this.od[i].Td(this.Ab, this.Mc);
      }
    };

    ke.prototype.
    /**/
    setPropertyInAllEmitters = function (
    /**/
    name,
    /**/
    value) {
      var propName = "_".concat(
      /**/
      name);

      if (
      /**/
      value instanceof Array) {
        if (
        /**/
        value.length == 2) {
          for (var i = 0; i < this.od.length; ++i) {
            ctx.S(this.od[i][propName],
            /**/
            value);
          }
        } else {
          for (var i = 0; i < this.od.length; ++i) {
            ctx.T(this.od[i][propName],
            /**/
            value);
          }
        }
      } else {
        for (var i = 0; i < this.od.length; ++i) {
          this.od[i][propName] =
          /**/
          value;
        }
      }
    };

    ke.prototype.
    /**/
    pauseAllEmitters = function () {
      for (var i = 0; i < this.od.length; ++i) {
        this.od[i].
        /**/
        pause();
      }
    };

    ke.prototype.
    /**/
    unpauseAllEmitters = function () {
      for (var i = 0; i < this.od.length; ++i) {
        this.od[i].
        /**/
        unpause();
      }

      this.zeroUpdate();

      if (this._presimNeeded) {
        this.updateFixed(this.Ud, this.Ab, this.Mc, this.presimFrameTime);
        this._presimNeeded = false;
      }
    };

    ke.prototype.
    /**/
    areAllEmittersPaused = function () {
      for (var i = 0; i < this.od.length; ++i) {
        if (!this.od[i].paused()) return false;
      }

      return true;
    };

    ke.prototype.
    /**/
    pauseGeneratorsInAllEmitters = function () {
      for (var i = 0; i < this.od.length; ++i) {
        this.od[i].
        /**/
        pauseGenerators();
      }
    };

    ke.prototype.
    /**/
    unpauseGeneratorsInAllEmitters = function () {
      for (var i = 0; i < this.od.length; ++i) {
        this.od[i].
        /**/
        unpauseGenerators();
      }
    };

    ke.prototype.
    /**/
    areGeneratorsInAllEmittersPaused = function () {
      for (var i = 0; i < this.od.length; ++i) {
        if (!this.od[i].generatorsPaused()) return false;
      }

      return true;
    };

    ke.prototype.
    /**/
    getNumParticles = function () {
      var numParticles = 0;

      for (var i = 0; i < this.od.length; ++i) {
        numParticles += this.od[i].getNumParticles();
      }

      return numParticles;
    };

    var le = function le() {
      this._init = function (we, Ab, Mc, renderBuffer, options) {
        le.prototype._init.call(this, we, Ab, Mc, oe, options);

        this.texturesRemap = [];
        var indices = [];
        {
          var verDisp;

          for (var Wb = 0; Wb < this.
          /**/
          model.Xe; ++Wb) {
            verDisp = Wb * 4;
            indices.push(verDisp + 0, verDisp + 3, verDisp + 1, verDisp + 1, verDisp + 3, verDisp + 2);
          }
        }
        this.renderBuffer = renderBuffer;
        this.renderBuffer.initialize(this.
        /**/
        model.Xe * 4, [2], indices, this.
        /**/
        model.Xe);
        this.renderBuffer.__numIndices = 0;
      };
    };

    le.prototype = new ke();

    le.prototype.
    /**/
    fillGeometryBuffers = function (
    /**/
    cameraRight,
    /**/
    cameraUp,
    /**/
    cameraDir) {
      this.renderBuffer.cleanup();
      this.renderBuffer.__lastRenderCall = null;
      this.od.forEach(function (Bd) {
        Bd.ue(
        /**/
        cameraRight,
        /**/
        cameraUp,
        /**/
        cameraDir, this.renderBuffer);
      }, this);
      if (this.renderBuffer.__lastRenderCall) this.renderBuffer.pushRenderCall(this.renderBuffer.__lastRenderCall);
    };

    var me = function me() {
      this._init = function (we, Ab, Mc, options) {
        me.prototype._init.call(this, we, Ab, Mc, ne, options);

        this.materials = [];
        this.
        /**/
        model.materials.forEach(function (value) {
          this.materials.push(['source-over', 'lighter', 'multiply'][value]);
        }, this);
        this.
        /**/
        textureDescs = [];
      };
    };

    me.prototype = new ke();

    me.prototype.
    /**/
    draw = function (
    /**/
    context,
    /**/
    camera) {
      for (var i = 0; i < this.od.length; ++i) {
        this.od[i].Hd(
        /**/
        context,
        /**/
        camera);
      }
    };

    this.createWGLInstance = function (
    /**/
    position,
    /**/
    rotation,
    /**/
    renderBuffer,
    /**/
    options) {
      var Ld = new le();

      Ld._init(this,
      /**/
      position,
      /**/
      rotation,
      /**/
      renderBuffer,
      /**/
      options || {});

      return Ld;
    };

    this.createCanvas2DInstance = function (
    /**/
    position,
    /**/
    rotation,
    /**/
    options) {
      var Ld = new me();

      Ld._init(this,
      /**/
      position,
      /**/
      rotation,
      /**/
      options || {});

      return Ld;
    };

    this.textures = ['sphere_orange.png'];
    this.materials = [1];
    this.renderStyles = [{
      materialIndex: 0,
      textureIndices: [0]
    }];
    this.Xe = 3000;

    function Emitter_DefaultEmitter() {
      var _1,
          _3 = [],
          _5,
          _6,
          _6i0,
          _6s0 = [],
          _7 = [],
          _7i,
          _7s = [],
          _8 = [],
          _9,
          _10,
          _10i0,
          _10s0 = [],
          _11,
          _13,
          _15 = [],
          _17 = [],
          _19,
          _21 = [],
          _22,
          _22i0,
          _22s0 = [],
          _23,
          _24,
          _24i0,
          _24s0 = [],
          _25,
          _26 = [],
          _26fs = [],
          _26vs = [],
          _26rw = [],
          _26rwn = [],
          _26rwl,
          _26v = [],
          _26p = [],
          _26dtl,
          _26dtp,
          _26df,
          _26fsd = [],
          _27 = [],
          _27x = [],
          _27y = [],
          _27z = [],
          _28 = [],
          _29,
          _30 = [],
          _30i0,
          _30s0 = [],
          _30i1,
          _30s1 = [],
          _31,
          _32,
          _32i0,
          _32s0 = [],
          _33,
          _33i0,
          _33s0 = [],
          _34,
          _34i0,
          _34s0 = [],
          _35,
          _36;

      this.pe = [{
        xe: 1,
        Rc: 1,
        Sc: 1,
        renderStyleIndex: 0
      }];
      this.name = "DefaultEmitter";

      this.ud = function (Bd) {
        Bd.dd();
        Bd._6 = [[[0, 0.220665, 0.318587, 0.379215, 0.420794, 0.451183, 0.474816, 0.494688, 0.513163, 0.532418, 0.554793, 0.583229, 0.622079, 0.679108, 0.772734, 1, 1]]];
        Bd._7 = [[[60, -293], [183, -219], [183, -219]]];
        Bd._10 = [[[0.3, 1, 1]]];
        Bd._22 = [[[0, 0.0129444, 0.0491835, 0.104924, 0.176478, 0.260245, 0.35269, 0.450322, 0.54968, 0.647311, 0.739756, 0.823523, 0.895077, 0.950817, 0.987056, 1, 1], [1, 0.987056, 0.950816, 0.895075, 0.823522, 0.739755, 0.647311, 0.549678, 0.450321, 0.352688, 0.260244, 0.176477, 0.104924, 0.0491832, 0.0129438, 0, 0]]];
        Bd._24 = [[[0, 0.0129445, 0.0491834, 0.104923, 0.176477, 0.260245, 0.352688, 0.45032, 0.549679, 0.647311, 0.739757, 0.823523, 0.895077, 0.950817, 0.987056, 1, 1]]];
        Bd._30 = [[[1, 1.08235, 1.31293, 1.66757, 2.12282, 2.65577, 3.24394, 3.86511, 4.49725, 5.11842, 5.70659, 6.23954, 6.69479, 7.04943, 7.27999, 7.36235, 7.36235]], [[1, 1, 1]]];
        Bd._32 = [[[0, 1, 1], [1, 0.376401, 0.376401], [0.376401, 0.8, 0.8], [0.8, 0.1, 0.1], [0.1, 1, 1], [1, 0, 0]]];
        Bd._33 = [[[0, 0.34799, 0.516906, 0.631629, 0.71686, 0.782823, 0.834936, 0.876485, 0.90965, 0.935968, 0.956581, 0.972371, 0.984046, 0.992201, 0.997357, 1, 1]]];
        Bd._34 = [[[1, 0.997975, 0.991373, 0.980075, 0.96386, 0.942401, 0.91523, 0.881707, 0.840947, 0.791711, 0.7322, 0.659677, 0.569629, 0.453644, 0.292056, 0, 0]]];
        Bd.jd = 1000;
        Bd.Vc = 0;
      };

      this.Mb = function (vd) {
        vd.zb = 0.3;
        vd.Gb = 1;
        vd.Jb = 500;
      };

      this.Pb = function (Qb, Bd, vd) {
        vd.zb = 0.3;
      };

      this.fd = function (Bd, Xb) {
        Xb.Mc = [];
        Xb._ = 0.0;
        _1 = 1 + Bd.Ld.rand() * (3 - 1);
        Xb._2 = _1;
        ctx.W(_3, 0, 0, 0);
        Xb._4 = [];
        ctx.c(Xb._4, Bd.Ab, _3);
        _5 = 0 + Bd.Ld.rand() * (1 - 0);
        _6i0 = _5 < 0 ? 0 : _5 > 1 ? 1 : _5;
        ctx.V(_6s0, 0, (_6i0 - 0) * 15);
        _6 = Db.nb(Bd._6[0][_6s0[0]], _6s0[1]);
        _7i = Db.kb(_6);
        ctx.V(_7s, 0, (_7i - 0) * 1);
        Db.lb(_7, Bd._7[_7s[0]], _7s[1]);
        ctx.W(_8, _7[0], _7[1], 0);
        _9 = 0 + Bd.Ld.rand() * (1 - 0);
        _10i0 = _9 < 0 ? 0 : _9 > 1 ? 1 : _9;
        ctx.V(_10s0, 0, (_10i0 - 0) * 1);
        _10 = Db.nb(Bd._10[0][_10s0[0]], _10s0[1]);
        _11 = ctx.v(ctx.v(_8, _10), 10);
        Xb._12 = [];
        ctx.T(Xb._12, _11);
        _13 = 1 + Bd.Ld.rand() * (4 - 1);
        Xb._14 = _13;
        ctx.randv3gen(_15, 300, Bd.Ld.rand);
        Xb._16 = [];
        ctx.T(Xb._16, _15);
        ctx.randv3gen(_17, 300, Bd.Ld.rand);
        Xb._18 = [];
        ctx.T(Xb._18, _17);
        _19 = 0 + Bd.Ld.rand() * (1 - 0);
        Xb._20 = _19;
        ctx.T(Xb.Ab, Xb._4);
      };

      this.gd = function (Bd, Xb) {
        Xb.Mc = [];
        Xb._ = 0.0;
        _1 = 1 + Bd.Ld.rand() * (3 - 1);
        Xb._2 = _1;
        ctx.W(_3, 0, 0, 0);
        Xb._4 = [];
        ctx.c(Xb._4, Bd.Ab, _3);
        _5 = 0 + Bd.Ld.rand() * (1 - 0);
        _6i0 = _5 < 0 ? 0 : _5 > 1 ? 1 : _5;
        ctx.V(_6s0, 0, (_6i0 - 0) * 15);
        _6 = Db.nb(Bd._6[0][_6s0[0]], _6s0[1]);
        _7i = Db.kb(_6);
        ctx.V(_7s, 0, (_7i - 0) * 1);
        Db.lb(_7, Bd._7[_7s[0]], _7s[1]);
        ctx.W(_8, _7[0], _7[1], 0);
        _9 = 0 + Bd.Ld.rand() * (1 - 0);
        _10i0 = _9 < 0 ? 0 : _9 > 1 ? 1 : _9;
        ctx.V(_10s0, 0, (_10i0 - 0) * 1);
        _10 = Db.nb(Bd._10[0][_10s0[0]], _10s0[1]);
        _11 = ctx.v(ctx.v(_8, _10), 10);
        Xb._12 = [];
        ctx.T(Xb._12, _11);
        _13 = 1 + Bd.Ld.rand() * (4 - 1);
        Xb._14 = _13;
        ctx.randv3gen(_15, 300, Bd.Ld.rand);
        Xb._16 = [];
        ctx.T(Xb._16, _15);
        ctx.randv3gen(_17, 300, Bd.Ld.rand);
        Xb._18 = [];
        ctx.T(Xb._18, _17);
        _19 = 0 + Bd.Ld.rand() * (1 - 0);
        Xb._20 = _19;
        ctx.T(Xb.Ab, Xb._4);
      };

      this.qc = function (Qb, Bd, Xb) {
        Xb._ += Qb;
        ctx.W(_21, 0, 150, 0);
        _22i0 = Xb._ < 0.000502169 ? 0.000502169 : Xb._ > 1 ? 0.000502169 + (Xb._ - 0.000502169) % 0.999498 : Xb._;
        _22i0 < 0.5 ? ctx.V(_22s0, 0, (_22i0 - 0.000502169) * 30.0302) : ctx.V(_22s0, 1, (_22i0 - 0.5) * 30);
        _22 = Db.nb(Bd._22[0][_22s0[0]], _22s0[1]);
        _23 = Xb._ / Xb._2;
        _24i0 = _23 < 0.000502169 ? 0.000502169 : _23 > 1 ? 1 : _23;
        ctx.V(_24s0, 0, (_24i0 - 0.000502169) * 15.0075);
        _24 = Db.nb(Bd._24[0][_24s0[0]], _24s0[1]);
        _25 = ctx.v(ctx.bb(Xb._16, Xb._18, _22), _24);
        ctx.T(_26fs, _21);
        ctx.c(_26fs, _26fs, _25);
        ctx.T(_26vs, [0, 0, 0]);
        _26dtl = Qb;
        ctx.T(_26v, Xb._12);
        ctx.T(_26p, Xb._4);

        while (_26dtl > 0.0001) {
          _26dtp = _26dtl;
          ctx.T(_26fsd, _26fs);
          ctx.g(_26rw, _26vs, _26v);
          _26rwl = ctx.P(_26rw);

          if (_26rwl > 0.0001) {
            _26rwl = Math.sqrt(_26rwl);
            ctx.w(_26rwn, _26rw, _26rwl);
            _26df = 0.01 * Xb._14 * _26rwl;
            if (_26df * _26dtp > 0.2) _26dtp = 0.2 / _26df;
            ctx.c(_26fsd, _26fsd, ctx.v(_26rwn, _26rwl * _26df));
          }

          ctx.c(_26v, _26v, ctx.v(_26fsd, _26dtp));
          ctx.c(_26p, _26p, ctx.v(_26v, _26dtp));
          _26dtl -= _26dtp;
        }

        ctx.T(Xb._4, _26p);
        ctx.T(Xb._12, _26v);
        ctx.T(Xb.Ab, Xb._4);
        ctx.Q(_27z, [0, 0, 1]);
        ctx.I(_27y, _27z, Xb._12);
        ctx.Q(_27y, _27y);
        ctx.I(_27x, _27y, _27z);
        ctx.pb(_27, _27x, _27y, _27z);
        ctx.V(_28, 3, 3);
        _29 = ctx.O(Xb._12);
        _30i0 = _29 < 0 ? 0 : _29 > 200 ? 200 : _29;
        ctx.V(_30s0, 0, (_30i0 - 0) * 0.075);
        _30i1 = _29 < 0 ? 0 : _29 > 1 ? 1 : _29;
        ctx.V(_30s1, 0, (_30i1 - 0) * 1);
        ctx.V(_30, Db.nb(Bd._30[0][_30s0[0]], _30s0[1]), Db.nb(Bd._30[1][_30s1[0]], _30s1[1]));
        _31 = Xb._ + Xb._20;
        _32i0 = _31 < 0 ? 0 : _31 > 1 ? 0 + (_31 - 0) % 1 : _31;
        _32i0 < 0.5 ? _32i0 < 0.4 ? _32i0 < 0.256169 ? ctx.V(_32s0, 0, (_32i0 - 0) * 3.90367) : ctx.V(_32s0, 1, (_32i0 - 0.256169) * 6.95262) : ctx.V(_32s0, 2, (_32i0 - 0.4) * 10) : _32i0 < 0.8 ? _32i0 < 0.623069 ? ctx.V(_32s0, 3, (_32i0 - 0.5) * 8.12552) : ctx.V(_32s0, 4, (_32i0 - 0.623069) * 5.65192) : ctx.V(_32s0, 5, (_32i0 - 0.8) * 5);
        _32 = Db.nb(Bd._32[0][_32s0[0]], _32s0[1]);
        _23 = Xb._ / Xb._2;
        _33i0 = _23 < 0 ? 0 : _23 > 1 ? 1 : _23;
        ctx.V(_33s0, 0, (_33i0 - 0) * 15);
        _33 = Db.nb(Bd._33[0][_33s0[0]], _33s0[1]);
        _34i0 = _23 < 0 ? 0 : _23 > 1 ? 1 : _23;
        ctx.V(_34s0, 0, (_34i0 - 0) * 15);
        _34 = Db.nb(Bd._34[0][_34s0[0]], _34s0[1]);
        _35 = ctx.r(ctx.r(_30, ctx.X(1, _32, _33)), _34);
        _36 = ctx.j(_28, _35);
        ctx.S(Xb.Pd, [0.5, 0.5]);
        ctx.U(Xb.Mc, _27);
        ctx.S(Xb.Nd, _36);
        ctx.T(Xb.gf, [1, 1, 1]);
        Xb.Od = 1;
        Xb.Qc = 0;
      };

      this.Cc = function (Bd, Xb, Wc) {
        if (Xb._ > Xb._2) return true;
        return false;
      };
    }

    function Emitter_DefaultEmitter1() {
      var _1,
          _3 = [],
          _5,
          _6,
          _6i0,
          _6s0 = [],
          _7 = [],
          _7i,
          _7s = [],
          _8 = [],
          _9,
          _10,
          _10i0,
          _10s0 = [],
          _11,
          _13,
          _15 = [],
          _17 = [],
          _19,
          _21 = [],
          _22,
          _22i0,
          _22s0 = [],
          _23,
          _24,
          _24i0,
          _24s0 = [],
          _25,
          _26 = [],
          _26fs = [],
          _26vs = [],
          _26rw = [],
          _26rwn = [],
          _26rwl,
          _26v = [],
          _26p = [],
          _26dtl,
          _26dtp,
          _26df,
          _26fsd = [],
          _27 = [],
          _27x = [],
          _27y = [],
          _27z = [],
          _28 = [],
          _29,
          _30 = [],
          _30i0,
          _30s0 = [],
          _30i1,
          _30s1 = [],
          _31,
          _32,
          _32i0,
          _32s0 = [],
          _33,
          _33i0,
          _33s0 = [],
          _34,
          _34i0,
          _34s0 = [],
          _35,
          _36;

      this.pe = [{
        xe: 1,
        Rc: 1,
        Sc: 1,
        renderStyleIndex: 0
      }];
      this.name = "DefaultEmitter1";

      this.ud = function (Bd) {
        Bd.dd();
        Bd._6 = [[[0, 0.220665, 0.318587, 0.379215, 0.420794, 0.451183, 0.474816, 0.494688, 0.513163, 0.532418, 0.554793, 0.583229, 0.622079, 0.679108, 0.772734, 1, 1]]];
        Bd._7 = [[[242, -383], [321, -275], [321, -275]]];
        Bd._10 = [[[0.3, 1, 1]]];
        Bd._22 = [[[0, 0.0129444, 0.0491835, 0.104924, 0.176478, 0.260245, 0.35269, 0.450322, 0.54968, 0.647311, 0.739756, 0.823523, 0.895077, 0.950817, 0.987056, 1, 1], [1, 0.987056, 0.950816, 0.895075, 0.823522, 0.739755, 0.647311, 0.549678, 0.450321, 0.352688, 0.260244, 0.176477, 0.104924, 0.0491832, 0.0129438, 0, 0]]];
        Bd._24 = [[[0, 0.0129445, 0.0491834, 0.104923, 0.176477, 0.260245, 0.352688, 0.45032, 0.549679, 0.647311, 0.739757, 0.823523, 0.895077, 0.950817, 0.987056, 1, 1]]];
        Bd._30 = [[[1, 1.08235, 1.31293, 1.66757, 2.12282, 2.65577, 3.24394, 3.86511, 4.49725, 5.11842, 5.70659, 6.23954, 6.69479, 7.04943, 7.27999, 7.36235, 7.36235]], [[1, 1, 1]]];
        Bd._32 = [[[0, 1, 1], [1, 0.376401, 0.376401], [0.376401, 0.8, 0.8], [0.8, 0.1, 0.1], [0.1, 1, 1], [1, 0, 0]]];
        Bd._33 = [[[0, 0.34799, 0.516906, 0.631629, 0.71686, 0.782823, 0.834936, 0.876485, 0.90965, 0.935968, 0.956581, 0.972371, 0.984046, 0.992201, 0.997357, 1, 1]]];
        Bd._34 = [[[1, 0.997975, 0.991373, 0.980075, 0.96386, 0.942401, 0.91523, 0.881707, 0.840947, 0.791711, 0.7322, 0.659677, 0.569629, 0.453644, 0.292056, 0, 0]]];
        Bd.jd = 1000;
        Bd.Vc = 0;
      };

      this.Mb = function (vd) {
        vd.zb = 0.3;
        vd.Gb = 1;
        vd.Jb = 500;
      };

      this.Pb = function (Qb, Bd, vd) {
        vd.zb = 0.3;
      };

      this.fd = function (Bd, Xb) {
        Xb.Mc = [];
        Xb._ = 0.0;
        _1 = 1 + Bd.Ld.rand() * (3 - 1);
        Xb._2 = _1;
        ctx.W(_3, 0, 0, 0);
        Xb._4 = [];
        ctx.c(Xb._4, Bd.Ab, _3);
        _5 = 0 + Bd.Ld.rand() * (1 - 0);
        _6i0 = _5 < 0 ? 0 : _5 > 1 ? 1 : _5;
        ctx.V(_6s0, 0, (_6i0 - 0) * 15);
        _6 = Db.nb(Bd._6[0][_6s0[0]], _6s0[1]);
        _7i = Db.kb(_6);
        ctx.V(_7s, 0, (_7i - 0) * 1);
        Db.lb(_7, Bd._7[_7s[0]], _7s[1]);
        ctx.W(_8, _7[0], _7[1], 0);
        _9 = 0 + Bd.Ld.rand() * (1 - 0);
        _10i0 = _9 < 0 ? 0 : _9 > 1 ? 1 : _9;
        ctx.V(_10s0, 0, (_10i0 - 0) * 1);
        _10 = Db.nb(Bd._10[0][_10s0[0]], _10s0[1]);
        _11 = ctx.v(ctx.v(_8, _10), 10);
        Xb._12 = [];
        ctx.T(Xb._12, _11);
        _13 = 1 + Bd.Ld.rand() * (4 - 1);
        Xb._14 = _13;
        ctx.randv3gen(_15, 300, Bd.Ld.rand);
        Xb._16 = [];
        ctx.T(Xb._16, _15);
        ctx.randv3gen(_17, 300, Bd.Ld.rand);
        Xb._18 = [];
        ctx.T(Xb._18, _17);
        _19 = 0 + Bd.Ld.rand() * (1 - 0);
        Xb._20 = _19;
        ctx.T(Xb.Ab, Xb._4);
      };

      this.gd = function (Bd, Xb) {
        Xb.Mc = [];
        Xb._ = 0.0;
        _1 = 1 + Bd.Ld.rand() * (3 - 1);
        Xb._2 = _1;
        ctx.W(_3, 0, 0, 0);
        Xb._4 = [];
        ctx.c(Xb._4, Bd.Ab, _3);
        _5 = 0 + Bd.Ld.rand() * (1 - 0);
        _6i0 = _5 < 0 ? 0 : _5 > 1 ? 1 : _5;
        ctx.V(_6s0, 0, (_6i0 - 0) * 15);
        _6 = Db.nb(Bd._6[0][_6s0[0]], _6s0[1]);
        _7i = Db.kb(_6);
        ctx.V(_7s, 0, (_7i - 0) * 1);
        Db.lb(_7, Bd._7[_7s[0]], _7s[1]);
        ctx.W(_8, _7[0], _7[1], 0);
        _9 = 0 + Bd.Ld.rand() * (1 - 0);
        _10i0 = _9 < 0 ? 0 : _9 > 1 ? 1 : _9;
        ctx.V(_10s0, 0, (_10i0 - 0) * 1);
        _10 = Db.nb(Bd._10[0][_10s0[0]], _10s0[1]);
        _11 = ctx.v(ctx.v(_8, _10), 10);
        Xb._12 = [];
        ctx.T(Xb._12, _11);
        _13 = 1 + Bd.Ld.rand() * (4 - 1);
        Xb._14 = _13;
        ctx.randv3gen(_15, 300, Bd.Ld.rand);
        Xb._16 = [];
        ctx.T(Xb._16, _15);
        ctx.randv3gen(_17, 300, Bd.Ld.rand);
        Xb._18 = [];
        ctx.T(Xb._18, _17);
        _19 = 0 + Bd.Ld.rand() * (1 - 0);
        Xb._20 = _19;
        ctx.T(Xb.Ab, Xb._4);
      };

      this.qc = function (Qb, Bd, Xb) {
        Xb._ += Qb;
        ctx.W(_21, 0, 150, 0);
        _22i0 = Xb._ < 0.000502169 ? 0.000502169 : Xb._ > 1 ? 0.000502169 + (Xb._ - 0.000502169) % 0.999498 : Xb._;
        _22i0 < 0.5 ? ctx.V(_22s0, 0, (_22i0 - 0.000502169) * 30.0302) : ctx.V(_22s0, 1, (_22i0 - 0.5) * 30);
        _22 = Db.nb(Bd._22[0][_22s0[0]], _22s0[1]);
        _23 = Xb._ / Xb._2;
        _24i0 = _23 < 0.000502169 ? 0.000502169 : _23 > 1 ? 1 : _23;
        ctx.V(_24s0, 0, (_24i0 - 0.000502169) * 15.0075);
        _24 = Db.nb(Bd._24[0][_24s0[0]], _24s0[1]);
        _25 = ctx.v(ctx.bb(Xb._16, Xb._18, _22), _24);
        ctx.T(_26fs, _21);
        ctx.c(_26fs, _26fs, _25);
        ctx.T(_26vs, [0, 0, 0]);
        _26dtl = Qb;
        ctx.T(_26v, Xb._12);
        ctx.T(_26p, Xb._4);

        while (_26dtl > 0.0001) {
          _26dtp = _26dtl;
          ctx.T(_26fsd, _26fs);
          ctx.g(_26rw, _26vs, _26v);
          _26rwl = ctx.P(_26rw);

          if (_26rwl > 0.0001) {
            _26rwl = Math.sqrt(_26rwl);
            ctx.w(_26rwn, _26rw, _26rwl);
            _26df = 0.01 * Xb._14 * _26rwl;
            if (_26df * _26dtp > 0.2) _26dtp = 0.2 / _26df;
            ctx.c(_26fsd, _26fsd, ctx.v(_26rwn, _26rwl * _26df));
          }

          ctx.c(_26v, _26v, ctx.v(_26fsd, _26dtp));
          ctx.c(_26p, _26p, ctx.v(_26v, _26dtp));
          _26dtl -= _26dtp;
        }

        ctx.T(Xb._4, _26p);
        ctx.T(Xb._12, _26v);
        ctx.T(Xb.Ab, Xb._4);
        ctx.Q(_27z, [0, 0, 1]);
        ctx.I(_27y, _27z, Xb._12);
        ctx.Q(_27y, _27y);
        ctx.I(_27x, _27y, _27z);
        ctx.pb(_27, _27x, _27y, _27z);
        ctx.V(_28, 3, 3);
        _29 = ctx.O(Xb._12);
        _30i0 = _29 < 0 ? 0 : _29 > 200 ? 200 : _29;
        ctx.V(_30s0, 0, (_30i0 - 0) * 0.075);
        _30i1 = _29 < 0 ? 0 : _29 > 1 ? 1 : _29;
        ctx.V(_30s1, 0, (_30i1 - 0) * 1);
        ctx.V(_30, Db.nb(Bd._30[0][_30s0[0]], _30s0[1]), Db.nb(Bd._30[1][_30s1[0]], _30s1[1]));
        _31 = Xb._ + Xb._20;
        _32i0 = _31 < 0 ? 0 : _31 > 1 ? 0 + (_31 - 0) % 1 : _31;
        _32i0 < 0.5 ? _32i0 < 0.4 ? _32i0 < 0.256169 ? ctx.V(_32s0, 0, (_32i0 - 0) * 3.90367) : ctx.V(_32s0, 1, (_32i0 - 0.256169) * 6.95262) : ctx.V(_32s0, 2, (_32i0 - 0.4) * 10) : _32i0 < 0.8 ? _32i0 < 0.623069 ? ctx.V(_32s0, 3, (_32i0 - 0.5) * 8.12552) : ctx.V(_32s0, 4, (_32i0 - 0.623069) * 5.65192) : ctx.V(_32s0, 5, (_32i0 - 0.8) * 5);
        _32 = Db.nb(Bd._32[0][_32s0[0]], _32s0[1]);
        _23 = Xb._ / Xb._2;
        _33i0 = _23 < 0 ? 0 : _23 > 1 ? 1 : _23;
        ctx.V(_33s0, 0, (_33i0 - 0) * 15);
        _33 = Db.nb(Bd._33[0][_33s0[0]], _33s0[1]);
        _34i0 = _23 < 0 ? 0 : _23 > 1 ? 1 : _23;
        ctx.V(_34s0, 0, (_34i0 - 0) * 15);
        _34 = Db.nb(Bd._34[0][_34s0[0]], _34s0[1]);
        _35 = ctx.r(ctx.r(_30, ctx.X(1, _32, _33)), _34);
        _36 = ctx.j(_28, _35);
        ctx.S(Xb.Pd, [0.5, 0.5]);
        ctx.U(Xb.Mc, _27);
        ctx.S(Xb.Nd, _36);
        ctx.T(Xb.gf, [1, 1, 1]);
        Xb.Od = 1;
        Xb.Qc = 0;
      };

      this.Cc = function (Bd, Xb, Wc) {
        if (Xb._ > Xb._2) return true;
        return false;
      };
    }

    function Emitter_DefaultEmitter2() {
      var _1,
          _3 = [],
          _5,
          _6,
          _6i0,
          _6s0 = [],
          _7 = [],
          _7i,
          _7s = [],
          _8 = [],
          _9,
          _10,
          _10i0,
          _10s0 = [],
          _11,
          _13,
          _15 = [],
          _17 = [],
          _19,
          _21 = [],
          _22,
          _22i0,
          _22s0 = [],
          _23,
          _24,
          _24i0,
          _24s0 = [],
          _25,
          _26 = [],
          _26fs = [],
          _26vs = [],
          _26rw = [],
          _26rwn = [],
          _26rwl,
          _26v = [],
          _26p = [],
          _26dtl,
          _26dtp,
          _26df,
          _26fsd = [],
          _27 = [],
          _27x = [],
          _27y = [],
          _27z = [],
          _28 = [],
          _29,
          _30 = [],
          _30i0,
          _30s0 = [],
          _30i1,
          _30s1 = [],
          _31,
          _32,
          _32i0,
          _32s0 = [],
          _33,
          _33i0,
          _33s0 = [],
          _34,
          _34i0,
          _34s0 = [],
          _35,
          _36;

      this.pe = [{
        xe: 1,
        Rc: 1,
        Sc: 1,
        renderStyleIndex: 0
      }];
      this.name = "DefaultEmitter2";

      this.ud = function (Bd) {
        Bd.dd();
        Bd._6 = [[[0, 0.220665, 0.318587, 0.379215, 0.420794, 0.451183, 0.474816, 0.494688, 0.513163, 0.532418, 0.554793, 0.583229, 0.622079, 0.679108, 0.772734, 1, 1]]];
        Bd._7 = [[[165, -150], [210, -78], [210, -78]]];
        Bd._10 = [[[0.3, 1, 1]]];
        Bd._22 = [[[0, 0.0129444, 0.0491835, 0.104924, 0.176478, 0.260245, 0.35269, 0.450322, 0.54968, 0.647311, 0.739756, 0.823523, 0.895077, 0.950817, 0.987056, 1, 1], [1, 0.987056, 0.950816, 0.895075, 0.823522, 0.739755, 0.647311, 0.549678, 0.450321, 0.352688, 0.260244, 0.176477, 0.104924, 0.0491832, 0.0129438, 0, 0]]];
        Bd._24 = [[[0, 0.0129445, 0.0491834, 0.104923, 0.176477, 0.260245, 0.352688, 0.45032, 0.549679, 0.647311, 0.739757, 0.823523, 0.895077, 0.950817, 0.987056, 1, 1]]];
        Bd._30 = [[[1, 1.08235, 1.31293, 1.66757, 2.12282, 2.65577, 3.24394, 3.86511, 4.49725, 5.11842, 5.70659, 6.23954, 6.69479, 7.04943, 7.27999, 7.36235, 7.36235]], [[1, 1, 1]]];
        Bd._32 = [[[0, 1, 1], [1, 0.376401, 0.376401], [0.376401, 0.8, 0.8], [0.8, 0.1, 0.1], [0.1, 1, 1], [1, 0, 0]]];
        Bd._33 = [[[0, 0.34799, 0.516906, 0.631629, 0.71686, 0.782823, 0.834936, 0.876485, 0.90965, 0.935968, 0.956581, 0.972371, 0.984046, 0.992201, 0.997357, 1, 1]]];
        Bd._34 = [[[1, 0.997975, 0.991373, 0.980075, 0.96386, 0.942401, 0.91523, 0.881707, 0.840947, 0.791711, 0.7322, 0.659677, 0.569629, 0.453644, 0.292056, 0, 0]]];
        Bd.jd = 1000;
        Bd.Vc = 0;
      };

      this.Mb = function (vd) {
        vd.zb = 0.3;
        vd.Gb = 1;
        vd.Jb = 500;
      };

      this.Pb = function (Qb, Bd, vd) {
        vd.zb = 0.3;
      };

      this.fd = function (Bd, Xb) {
        Xb.Mc = [];
        Xb._ = 0.0;
        _1 = 1 + Bd.Ld.rand() * (3 - 1);
        Xb._2 = _1;
        ctx.W(_3, 0, 0, 0);
        Xb._4 = [];
        ctx.c(Xb._4, Bd.Ab, _3);
        _5 = 0 + Bd.Ld.rand() * (1 - 0);
        _6i0 = _5 < 0 ? 0 : _5 > 1 ? 1 : _5;
        ctx.V(_6s0, 0, (_6i0 - 0) * 15);
        _6 = Db.nb(Bd._6[0][_6s0[0]], _6s0[1]);
        _7i = Db.kb(_6);
        ctx.V(_7s, 0, (_7i - 0) * 1);
        Db.lb(_7, Bd._7[_7s[0]], _7s[1]);
        ctx.W(_8, _7[0], _7[1], 0);
        _9 = 0 + Bd.Ld.rand() * (1 - 0);
        _10i0 = _9 < 0 ? 0 : _9 > 1 ? 1 : _9;
        ctx.V(_10s0, 0, (_10i0 - 0) * 1);
        _10 = Db.nb(Bd._10[0][_10s0[0]], _10s0[1]);
        _11 = ctx.v(ctx.v(_8, _10), 10);
        Xb._12 = [];
        ctx.T(Xb._12, _11);
        _13 = 1 + Bd.Ld.rand() * (4 - 1);
        Xb._14 = _13;
        ctx.randv3gen(_15, 300, Bd.Ld.rand);
        Xb._16 = [];
        ctx.T(Xb._16, _15);
        ctx.randv3gen(_17, 300, Bd.Ld.rand);
        Xb._18 = [];
        ctx.T(Xb._18, _17);
        _19 = 0 + Bd.Ld.rand() * (1 - 0);
        Xb._20 = _19;
        ctx.T(Xb.Ab, Xb._4);
      };

      this.gd = function (Bd, Xb) {
        Xb.Mc = [];
        Xb._ = 0.0;
        _1 = 1 + Bd.Ld.rand() * (3 - 1);
        Xb._2 = _1;
        ctx.W(_3, 0, 0, 0);
        Xb._4 = [];
        ctx.c(Xb._4, Bd.Ab, _3);
        _5 = 0 + Bd.Ld.rand() * (1 - 0);
        _6i0 = _5 < 0 ? 0 : _5 > 1 ? 1 : _5;
        ctx.V(_6s0, 0, (_6i0 - 0) * 15);
        _6 = Db.nb(Bd._6[0][_6s0[0]], _6s0[1]);
        _7i = Db.kb(_6);
        ctx.V(_7s, 0, (_7i - 0) * 1);
        Db.lb(_7, Bd._7[_7s[0]], _7s[1]);
        ctx.W(_8, _7[0], _7[1], 0);
        _9 = 0 + Bd.Ld.rand() * (1 - 0);
        _10i0 = _9 < 0 ? 0 : _9 > 1 ? 1 : _9;
        ctx.V(_10s0, 0, (_10i0 - 0) * 1);
        _10 = Db.nb(Bd._10[0][_10s0[0]], _10s0[1]);
        _11 = ctx.v(ctx.v(_8, _10), 10);
        Xb._12 = [];
        ctx.T(Xb._12, _11);
        _13 = 1 + Bd.Ld.rand() * (4 - 1);
        Xb._14 = _13;
        ctx.randv3gen(_15, 300, Bd.Ld.rand);
        Xb._16 = [];
        ctx.T(Xb._16, _15);
        ctx.randv3gen(_17, 300, Bd.Ld.rand);
        Xb._18 = [];
        ctx.T(Xb._18, _17);
        _19 = 0 + Bd.Ld.rand() * (1 - 0);
        Xb._20 = _19;
        ctx.T(Xb.Ab, Xb._4);
      };

      this.qc = function (Qb, Bd, Xb) {
        Xb._ += Qb;
        ctx.W(_21, 0, 150, 0);
        _22i0 = Xb._ < 0.000502169 ? 0.000502169 : Xb._ > 1 ? 0.000502169 + (Xb._ - 0.000502169) % 0.999498 : Xb._;
        _22i0 < 0.5 ? ctx.V(_22s0, 0, (_22i0 - 0.000502169) * 30.0302) : ctx.V(_22s0, 1, (_22i0 - 0.5) * 30);
        _22 = Db.nb(Bd._22[0][_22s0[0]], _22s0[1]);
        _23 = Xb._ / Xb._2;
        _24i0 = _23 < 0.000502169 ? 0.000502169 : _23 > 1 ? 1 : _23;
        ctx.V(_24s0, 0, (_24i0 - 0.000502169) * 15.0075);
        _24 = Db.nb(Bd._24[0][_24s0[0]], _24s0[1]);
        _25 = ctx.v(ctx.bb(Xb._16, Xb._18, _22), _24);
        ctx.T(_26fs, _21);
        ctx.c(_26fs, _26fs, _25);
        ctx.T(_26vs, [0, 0, 0]);
        _26dtl = Qb;
        ctx.T(_26v, Xb._12);
        ctx.T(_26p, Xb._4);

        while (_26dtl > 0.0001) {
          _26dtp = _26dtl;
          ctx.T(_26fsd, _26fs);
          ctx.g(_26rw, _26vs, _26v);
          _26rwl = ctx.P(_26rw);

          if (_26rwl > 0.0001) {
            _26rwl = Math.sqrt(_26rwl);
            ctx.w(_26rwn, _26rw, _26rwl);
            _26df = 0.01 * Xb._14 * _26rwl;
            if (_26df * _26dtp > 0.2) _26dtp = 0.2 / _26df;
            ctx.c(_26fsd, _26fsd, ctx.v(_26rwn, _26rwl * _26df));
          }

          ctx.c(_26v, _26v, ctx.v(_26fsd, _26dtp));
          ctx.c(_26p, _26p, ctx.v(_26v, _26dtp));
          _26dtl -= _26dtp;
        }

        ctx.T(Xb._4, _26p);
        ctx.T(Xb._12, _26v);
        ctx.T(Xb.Ab, Xb._4);
        ctx.Q(_27z, [0, 0, 1]);
        ctx.I(_27y, _27z, Xb._12);
        ctx.Q(_27y, _27y);
        ctx.I(_27x, _27y, _27z);
        ctx.pb(_27, _27x, _27y, _27z);
        ctx.V(_28, 3, 3);
        _29 = ctx.O(Xb._12);
        _30i0 = _29 < 0 ? 0 : _29 > 200 ? 200 : _29;
        ctx.V(_30s0, 0, (_30i0 - 0) * 0.075);
        _30i1 = _29 < 0 ? 0 : _29 > 1 ? 1 : _29;
        ctx.V(_30s1, 0, (_30i1 - 0) * 1);
        ctx.V(_30, Db.nb(Bd._30[0][_30s0[0]], _30s0[1]), Db.nb(Bd._30[1][_30s1[0]], _30s1[1]));
        _31 = Xb._ + Xb._20;
        _32i0 = _31 < 0 ? 0 : _31 > 1 ? 0 + (_31 - 0) % 1 : _31;
        _32i0 < 0.5 ? _32i0 < 0.4 ? _32i0 < 0.256169 ? ctx.V(_32s0, 0, (_32i0 - 0) * 3.90367) : ctx.V(_32s0, 1, (_32i0 - 0.256169) * 6.95262) : ctx.V(_32s0, 2, (_32i0 - 0.4) * 10) : _32i0 < 0.8 ? _32i0 < 0.623069 ? ctx.V(_32s0, 3, (_32i0 - 0.5) * 8.12552) : ctx.V(_32s0, 4, (_32i0 - 0.623069) * 5.65192) : ctx.V(_32s0, 5, (_32i0 - 0.8) * 5);
        _32 = Db.nb(Bd._32[0][_32s0[0]], _32s0[1]);
        _23 = Xb._ / Xb._2;
        _33i0 = _23 < 0 ? 0 : _23 > 1 ? 1 : _23;
        ctx.V(_33s0, 0, (_33i0 - 0) * 15);
        _33 = Db.nb(Bd._33[0][_33s0[0]], _33s0[1]);
        _34i0 = _23 < 0 ? 0 : _23 > 1 ? 1 : _23;
        ctx.V(_34s0, 0, (_34i0 - 0) * 15);
        _34 = Db.nb(Bd._34[0][_34s0[0]], _34s0[1]);
        _35 = ctx.r(ctx.r(_30, ctx.X(1, _32, _33)), _34);
        _36 = ctx.j(_28, _35);
        ctx.S(Xb.Pd, [0.5, 0.5]);
        ctx.U(Xb.Mc, _27);
        ctx.S(Xb.Nd, _36);
        ctx.T(Xb.gf, [1, 1, 1]);
        Xb.Od = 1;
        Xb.Qc = 0;
      };

      this.Cc = function (Bd, Xb, Wc) {
        if (Xb._ > Xb._2) return true;
        return false;
      };
    }

    this.qd = function (Ld) {
      Ld.Dd = 0.0166667;
      Ld.Ud = 0;
      Ld.presimFrameTime = 0.1;

      Ld.rand = function () {
        return Math.random();
      };

      Ld.pd(new Emitter_DefaultEmitter());
      Ld.pd(new Emitter_DefaultEmitter1());
      Ld.pd(new Emitter_DefaultEmitter2());
    };

    this.kb = function (v) {
      return v < 0 ? 0 : v > 1 ? 1 : v;
    };

    this.lb = function (r, path, je) {
      var indexInt = Math.floor(je);
      var lerp = je - indexInt;
      ctx.Y(r, path[indexInt], path[indexInt + 1], lerp);
    };

    this.nb = function (funcValues, je) {
      var indexInt = Math.floor(je);
      var nextInt = indexInt + 1;
      return ctx.X(funcValues[indexInt], funcValues[nextInt], je - indexInt);
    };
  }

  return Sparks_burst;
});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/Controller/GameController.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '459a6fkmHFH5Z+5+z1O55SB', 'GameController');
// Script/Controller/GameController.ts

"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GameController = void 0;
var constants_1 = require("../Data/constants");
var AudioManager_1 = require("../Plugin/AudioManager");
var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
var GameController = /** @class */ (function (_super) {
    __extends(GameController, _super);
    function GameController() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.AudioManager = null;
        return _this;
    }
    GameController.prototype.onLoad = function () {
    };
    GameController.prototype.start = function () {
        window.gameReady && window.gameReady();
    };
    GameController.prototype.installHandle = function () {
        console.log("install");
        constants_1.Constants.ironSource.isEndGame = true;
        this.AudioManager.stopAllSound();
        window.gameEnd && window.gameEnd();
        //If ad network is tiktok
        if (typeof (playableSDK) != "undefined") {
            window.playableSDK.openAppStore();
            return;
        }
        // If ad network is google ads
        if (typeof (ExitApi) != "undefined") {
            ExitApi.exit();
            return;
        }
        // If ad netwrok is ironsources
        if (typeof (dapi) != "undefined") {
            dapi.openStoreUrl();
            return;
        }
        // If ad network support MRAID 2.0
        if (typeof (mraid) != "undefined") {
            if (cc.sys.os == cc.sys.OS_ANDROID || cc.sys.os == cc.sys.ANDROID) {
                mraid.open("https://play.google.com/store/apps/details?id=com.an.epicwarrior.stoneage");
                return;
            }
            // if (cc.sys.os == cc.sys.OS_IOS || cc.sys.os == cc.sys.IPHONE || cc.sys.os == cc.sys.IPAD) {
            //     mraid.open("https://itunes.apple.com/us/app/id6449269733?mt=8");
            //     return;
            // }
            mraid.open("https://play.google.com/store/apps/details?id=com.an.epicwarrior.stoneage");
            return;
        }
        // If ad network is mindwork. window alway avaiable so skip undefined check
        window.install && window.install();
    };
    __decorate([
        property(AudioManager_1.default)
    ], GameController.prototype, "AudioManager", void 0);
    GameController = __decorate([
        ccclass
    ], GameController);
    return GameController;
}(cc.Component));
exports.GameController = GameController;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0XFxDb250cm9sbGVyXFxHYW1lQ29udHJvbGxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsK0NBQThDO0FBQzlDLHVEQUFrRDtBQUU1QyxJQUFBLEtBQXdCLEVBQUUsQ0FBQyxVQUFVLEVBQW5DLE9BQU8sYUFBQSxFQUFFLFFBQVEsY0FBa0IsQ0FBQztBQUc1QztJQUFvQyxrQ0FBWTtJQUFoRDtRQUFBLHFFQXlEQztRQXZERyxrQkFBWSxHQUFpQixJQUFJLENBQUM7O0lBdUR0QyxDQUFDO0lBcERhLCtCQUFNLEdBQWhCO0lBRUEsQ0FBQztJQUdTLDhCQUFLLEdBQWY7UUFDSSxNQUFNLENBQUMsU0FBUyxJQUFJLE1BQU0sQ0FBQyxTQUFTLEVBQUUsQ0FBQztJQUMzQyxDQUFDO0lBR00sc0NBQWEsR0FBcEI7UUFDSSxPQUFPLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ3ZCLHFCQUFTLENBQUMsVUFBVSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUM7UUFDdEMsSUFBSSxDQUFDLFlBQVksQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUNqQyxNQUFNLENBQUMsT0FBTyxJQUFJLE1BQU0sQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUVuQyx5QkFBeUI7UUFDekIsSUFBSSxPQUFPLENBQUMsV0FBVyxDQUFDLElBQUksV0FBVyxFQUFFO1lBQ3JDLE1BQU0sQ0FBQyxXQUFXLENBQUMsWUFBWSxFQUFFLENBQUM7WUFDbEMsT0FBTztTQUNWO1FBRUQsOEJBQThCO1FBQzlCLElBQUksT0FBTyxDQUFDLE9BQU8sQ0FBQyxJQUFJLFdBQVcsRUFBRTtZQUNqQyxPQUFPLENBQUMsSUFBSSxFQUFFLENBQUM7WUFDZixPQUFPO1NBQ1Y7UUFFRCwrQkFBK0I7UUFDL0IsSUFBSSxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksV0FBVyxFQUFFO1lBQzlCLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztZQUNwQixPQUFPO1NBQ1Y7UUFFRCxrQ0FBa0M7UUFDbEMsSUFBSSxPQUFNLENBQUMsS0FBSyxDQUFDLElBQUksV0FBVyxFQUFFO1lBQzlCLElBQUksRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLElBQUksRUFBRSxDQUFDLEdBQUcsQ0FBQyxVQUFVLElBQUksRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLElBQUksRUFBRSxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUU7Z0JBQy9ELEtBQUssQ0FBQyxJQUFJLENBQUMsMkVBQTJFLENBQUMsQ0FBQztnQkFDeEYsT0FBTzthQUNWO1lBRUQsOEZBQThGO1lBQzlGLHVFQUF1RTtZQUN2RSxjQUFjO1lBQ2QsSUFBSTtZQUVKLEtBQUssQ0FBQyxJQUFJLENBQUMsMkVBQTJFLENBQUMsQ0FBQztZQUN4RixPQUFPO1NBQ1Y7UUFDRCwyRUFBMkU7UUFDM0UsTUFBTSxDQUFDLE9BQU8sSUFBSSxNQUFNLENBQUMsT0FBTyxFQUFFLENBQUM7SUFDdkMsQ0FBQztJQXRERDtRQURDLFFBQVEsQ0FBQyxzQkFBWSxDQUFDO3dEQUNXO0lBRnpCLGNBQWM7UUFEMUIsT0FBTztPQUNLLGNBQWMsQ0F5RDFCO0lBQUQscUJBQUM7Q0F6REQsQUF5REMsQ0F6RG1DLEVBQUUsQ0FBQyxTQUFTLEdBeUQvQztBQXpEWSx3Q0FBYyIsImZpbGUiOiIiLCJzb3VyY2VSb290IjoiLyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbnN0YW50cyB9IGZyb20gXCIuLi9EYXRhL2NvbnN0YW50c1wiO1xyXG5pbXBvcnQgQXVkaW9NYW5hZ2VyIGZyb20gXCIuLi9QbHVnaW4vQXVkaW9NYW5hZ2VyXCI7XHJcblxyXG5jb25zdCB7IGNjY2xhc3MsIHByb3BlcnR5IH0gPSBjYy5fZGVjb3JhdG9yO1xyXG4gXHJcbkBjY2NsYXNzXHJcbmV4cG9ydCBjbGFzcyBHYW1lQ29udHJvbGxlciBleHRlbmRzIGNjLkNvbXBvbmVudCB7XHJcbiAgICBAcHJvcGVydHkoQXVkaW9NYW5hZ2VyKVxyXG4gICAgQXVkaW9NYW5hZ2VyOiBBdWRpb01hbmFnZXIgPSBudWxsO1xyXG5cclxuXHJcbiAgICBwcm90ZWN0ZWQgb25Mb2FkKCk6IHZvaWQge1xyXG4gICAgICAgIFxyXG4gICAgfVxyXG4gICAgXHJcblxyXG4gICAgcHJvdGVjdGVkIHN0YXJ0KCk6IHZvaWQge1xyXG4gICAgICAgIHdpbmRvdy5nYW1lUmVhZHkgJiYgd2luZG93LmdhbWVSZWFkeSgpO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICBwdWJsaWMgaW5zdGFsbEhhbmRsZSgpOiB2b2lkIHtcclxuICAgICAgICBjb25zb2xlLmxvZyhcImluc3RhbGxcIik7XHJcbiAgICAgICAgQ29uc3RhbnRzLmlyb25Tb3VyY2UuaXNFbmRHYW1lID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLkF1ZGlvTWFuYWdlci5zdG9wQWxsU291bmQoKTtcclxuICAgICAgICB3aW5kb3cuZ2FtZUVuZCAmJiB3aW5kb3cuZ2FtZUVuZCgpO1xyXG5cclxuICAgICAgICAvL0lmIGFkIG5ldHdvcmsgaXMgdGlrdG9rXHJcbiAgICAgICAgaWYgKHR5cGVvZiAocGxheWFibGVTREspICE9IFwidW5kZWZpbmVkXCIpIHtcclxuICAgICAgICAgICAgd2luZG93LnBsYXlhYmxlU0RLLm9wZW5BcHBTdG9yZSgpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBJZiBhZCBuZXR3b3JrIGlzIGdvb2dsZSBhZHNcclxuICAgICAgICBpZiAodHlwZW9mIChFeGl0QXBpKSAhPSBcInVuZGVmaW5lZFwiKSB7XHJcbiAgICAgICAgICAgIEV4aXRBcGkuZXhpdCgpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBJZiBhZCBuZXR3cm9rIGlzIGlyb25zb3VyY2VzXHJcbiAgICAgICAgaWYgKHR5cGVvZiAoZGFwaSkgIT0gXCJ1bmRlZmluZWRcIikge1xyXG4gICAgICAgICAgICBkYXBpLm9wZW5TdG9yZVVybCgpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBJZiBhZCBuZXR3b3JrIHN1cHBvcnQgTVJBSUQgMi4wXHJcbiAgICAgICAgaWYgKHR5cGVvZihtcmFpZCkgIT0gXCJ1bmRlZmluZWRcIikge1xyXG4gICAgICAgICAgICBpZiAoY2Muc3lzLm9zID09IGNjLnN5cy5PU19BTkRST0lEIHx8IGNjLnN5cy5vcyA9PSBjYy5zeXMuQU5EUk9JRCkge1xyXG4gICAgICAgICAgICAgICAgbXJhaWQub3BlbihcImh0dHBzOi8vcGxheS5nb29nbGUuY29tL3N0b3JlL2FwcHMvZGV0YWlscz9pZD1jb20uYW4uZXBpY3dhcnJpb3Iuc3RvbmVhZ2VcIik7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIGlmIChjYy5zeXMub3MgPT0gY2Muc3lzLk9TX0lPUyB8fCBjYy5zeXMub3MgPT0gY2Muc3lzLklQSE9ORSB8fCBjYy5zeXMub3MgPT0gY2Muc3lzLklQQUQpIHtcclxuICAgICAgICAgICAgLy8gICAgIG1yYWlkLm9wZW4oXCJodHRwczovL2l0dW5lcy5hcHBsZS5jb20vdXMvYXBwL2lkNjQ0OTI2OTczMz9tdD04XCIpO1xyXG4gICAgICAgICAgICAvLyAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAvLyB9XHJcblxyXG4gICAgICAgICAgICBtcmFpZC5vcGVuKFwiaHR0cHM6Ly9wbGF5Lmdvb2dsZS5jb20vc3RvcmUvYXBwcy9kZXRhaWxzP2lkPWNvbS5hbi5lcGljd2Fycmlvci5zdG9uZWFnZVwiKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBJZiBhZCBuZXR3b3JrIGlzIG1pbmR3b3JrLiB3aW5kb3cgYWx3YXkgYXZhaWFibGUgc28gc2tpcCB1bmRlZmluZWQgY2hlY2tcclxuICAgICAgICB3aW5kb3cuaW5zdGFsbCAmJiB3aW5kb3cuaW5zdGFsbCgpO1xyXG4gICAgfVxyXG59XHJcblxyXG4iXX0=
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/neutrinoparticles/textures.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '6e0b7pYCxFA27qiwxcad20V', 'textures');
// neutrinoparticles/textures.ts

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = [{ "uuid": "35f33345-38a7-4a8b-8836-ab28c94025e7", "path": "Free Collection 1/Animated/FlameArc8_small" }, { "uuid": "e5236d44-8e3a-4095-a940-a4256225f26e", "path": "Free Collection 1/Static/Glows/Flare10" }, { "uuid": "f70be5fa-2146-4253-81f7-248f8896b86e", "path": "Free Collection 1/Static/Glows/Flare2" }, { "uuid": "e358a5b4-ebd6-48c4-acc0-a8cc7fffba7b", "path": "Free Collection 1/Static/Halos/blastwave1" }, { "uuid": "425f3c8e-3e01-4135-b977-6dfd51a48477", "path": "Free Collection 1/Static/Smoke/CloudPart" }, { "uuid": "e78d5b89-311e-4ff1-a672-031de499c396", "path": "fx/fireworks/sparks2x3_violet" }, { "uuid": "b15a3db2-f55a-4ef7-8097-d3f16848418c", "path": "fx/fireworks/sparks5x2_long_violet" }, { "uuid": "891da459-7f01-41cb-b4c8-1eb8f582b792", "path": "fx/fireworks/sparks5x3_long" }, { "uuid": "d83bb0c2-313f-46dc-8ae0-abd70612ba8e", "path": "spark_orange_glow" }, { "uuid": "cd88438a-1305-4f3b-b827-e03d9c939d0c", "path": "sphere_orange" }, { "uuid": "a0b2248f-8fdf-4295-889a-38f2012cf28d", "path": "textures" }];

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcbmV1dHJpbm9wYXJ0aWNsZXNcXHRleHR1cmVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsa0JBQWUsQ0FBQyxFQUFDLE1BQU0sRUFBQyxzQ0FBc0MsRUFBQyxNQUFNLEVBQUMsNENBQTRDLEVBQUMsRUFBQyxFQUFDLE1BQU0sRUFBQyxzQ0FBc0MsRUFBQyxNQUFNLEVBQUMsd0NBQXdDLEVBQUMsRUFBQyxFQUFDLE1BQU0sRUFBQyxzQ0FBc0MsRUFBQyxNQUFNLEVBQUMsdUNBQXVDLEVBQUMsRUFBQyxFQUFDLE1BQU0sRUFBQyxzQ0FBc0MsRUFBQyxNQUFNLEVBQUMsMkNBQTJDLEVBQUMsRUFBQyxFQUFDLE1BQU0sRUFBQyxzQ0FBc0MsRUFBQyxNQUFNLEVBQUMsMENBQTBDLEVBQUMsRUFBQyxFQUFDLE1BQU0sRUFBQyxzQ0FBc0MsRUFBQyxNQUFNLEVBQUMsK0JBQStCLEVBQUMsRUFBQyxFQUFDLE1BQU0sRUFBQyxzQ0FBc0MsRUFBQyxNQUFNLEVBQUMsb0NBQW9DLEVBQUMsRUFBQyxFQUFDLE1BQU0sRUFBQyxzQ0FBc0MsRUFBQyxNQUFNLEVBQUMsNkJBQTZCLEVBQUMsRUFBQyxFQUFDLE1BQU0sRUFBQyxzQ0FBc0MsRUFBQyxNQUFNLEVBQUMsbUJBQW1CLEVBQUMsRUFBQyxFQUFDLE1BQU0sRUFBQyxzQ0FBc0MsRUFBQyxNQUFNLEVBQUMsZUFBZSxFQUFDLEVBQUMsRUFBQyxNQUFNLEVBQUMsc0NBQXNDLEVBQUMsTUFBTSxFQUFDLFVBQVUsRUFBQyxDQUFDLENBQUMiLCJmaWxlIjoiIiwic291cmNlUm9vdCI6Ii8iLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBbe1widXVpZFwiOlwiMzVmMzMzNDUtMzhhNy00YThiLTg4MzYtYWIyOGM5NDAyNWU3XCIsXCJwYXRoXCI6XCJGcmVlIENvbGxlY3Rpb24gMS9BbmltYXRlZC9GbGFtZUFyYzhfc21hbGxcIn0se1widXVpZFwiOlwiZTUyMzZkNDQtOGUzYS00MDk1LWE5NDAtYTQyNTYyMjVmMjZlXCIsXCJwYXRoXCI6XCJGcmVlIENvbGxlY3Rpb24gMS9TdGF0aWMvR2xvd3MvRmxhcmUxMFwifSx7XCJ1dWlkXCI6XCJmNzBiZTVmYS0yMTQ2LTQyNTMtODFmNy0yNDhmODg5NmI4NmVcIixcInBhdGhcIjpcIkZyZWUgQ29sbGVjdGlvbiAxL1N0YXRpYy9HbG93cy9GbGFyZTJcIn0se1widXVpZFwiOlwiZTM1OGE1YjQtZWJkNi00OGM0LWFjYzAtYThjYzdmZmZiYTdiXCIsXCJwYXRoXCI6XCJGcmVlIENvbGxlY3Rpb24gMS9TdGF0aWMvSGFsb3MvYmxhc3R3YXZlMVwifSx7XCJ1dWlkXCI6XCI0MjVmM2M4ZS0zZTAxLTQxMzUtYjk3Ny02ZGZkNTFhNDg0NzdcIixcInBhdGhcIjpcIkZyZWUgQ29sbGVjdGlvbiAxL1N0YXRpYy9TbW9rZS9DbG91ZFBhcnRcIn0se1widXVpZFwiOlwiZTc4ZDViODktMzExZS00ZmYxLWE2NzItMDMxZGU0OTljMzk2XCIsXCJwYXRoXCI6XCJmeC9maXJld29ya3Mvc3BhcmtzMngzX3Zpb2xldFwifSx7XCJ1dWlkXCI6XCJiMTVhM2RiMi1mNTVhLTRlZjctODA5Ny1kM2YxNjg0ODQxOGNcIixcInBhdGhcIjpcImZ4L2ZpcmV3b3Jrcy9zcGFya3M1eDJfbG9uZ192aW9sZXRcIn0se1widXVpZFwiOlwiODkxZGE0NTktN2YwMS00MWNiLWI0YzgtMWViOGY1ODJiNzkyXCIsXCJwYXRoXCI6XCJmeC9maXJld29ya3Mvc3BhcmtzNXgzX2xvbmdcIn0se1widXVpZFwiOlwiZDgzYmIwYzItMzEzZi00NmRjLThhZTAtYWJkNzA2MTJiYThlXCIsXCJwYXRoXCI6XCJzcGFya19vcmFuZ2VfZ2xvd1wifSx7XCJ1dWlkXCI6XCJjZDg4NDM4YS0xMzA1LTRmM2ItYjgyNy1lMDNkOWM5MzlkMGNcIixcInBhdGhcIjpcInNwaGVyZV9vcmFuZ2VcIn0se1widXVpZFwiOlwiYTBiMjI0OGYtOGZkZi00Mjk1LTg4OWEtMzhmMjAxMmNmMjhkXCIsXCJwYXRoXCI6XCJ0ZXh0dXJlc1wifV07XG4iXX0=
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/Plugin/Singleton.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'e2ee0thttREWqwEqyE59c5l', 'Singleton');
// Script/Plugin/Singleton.ts

"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
// BaseSingleton.ts
var ccclass = cc._decorator.ccclass;
var Singleton = /** @class */ (function (_super) {
    __extends(Singleton, _super);
    function Singleton() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    // Phương thức để lấy instance duy nhất
    Singleton.getInstance = function (c) {
        if (this._instance === null) {
            this._instance = new c();
        }
        console.log(this._instance);
        return this._instance;
    };
    Singleton._instance = null;
    Singleton = __decorate([
        ccclass
    ], Singleton);
    return Singleton;
}(cc.Component));
exports.default = Singleton;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0XFxQbHVnaW5cXFNpbmdsZXRvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSxtQkFBbUI7QUFDWCxJQUFBLE9BQU8sR0FBSyxFQUFFLENBQUMsVUFBVSxRQUFsQixDQUFtQjtBQUdsQztJQUEwQyw2QkFBWTtJQUF0RDs7SUFnQkEsQ0FBQztJQWJHLHVDQUF1QztJQUN6QixxQkFBVyxHQUF6QixVQUE2QixDQUFnQjtRQUd6QyxJQUFJLElBQUksQ0FBQyxTQUFTLEtBQUssSUFBSSxFQUFFO1lBQ3pCLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQztTQUM1QjtRQUVELE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBRzVCLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQztJQUMxQixDQUFDO0lBZGEsbUJBQVMsR0FBRyxJQUFJLENBQUM7SUFEZCxTQUFTO1FBRDdCLE9BQU87T0FDYSxTQUFTLENBZ0I3QjtJQUFELGdCQUFDO0NBaEJELEFBZ0JDLENBaEJ5QyxFQUFFLENBQUMsU0FBUyxHQWdCckQ7a0JBaEJvQixTQUFTIiwiZmlsZSI6IiIsInNvdXJjZVJvb3QiOiIvIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQmFzZVNpbmdsZXRvbi50c1xyXG5jb25zdCB7IGNjY2xhc3MgfSA9IGNjLl9kZWNvcmF0b3I7XHJcblxyXG5AY2NjbGFzc1xyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTaW5nbGV0b248VD4gZXh0ZW5kcyBjYy5Db21wb25lbnQge1xyXG4gICAgcHVibGljIHN0YXRpYyBfaW5zdGFuY2UgPSBudWxsO1xyXG5cclxuICAgIC8vIFBoxrDGoW5nIHRo4bupYyDEkeG7gyBs4bqleSBpbnN0YW5jZSBkdXkgbmjhuqV0XHJcbiAgICBwdWJsaWMgc3RhdGljIGdldEluc3RhbmNlPFQ+KGM6IHsgbmV3ICgpOiBUIH0pOiBUIHtcclxuICAgICAgICBcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX2luc3RhbmNlID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2luc3RhbmNlID0gbmV3IGMoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnNvbGUubG9nKHRoaXMuX2luc3RhbmNlKTtcclxuICAgICAgICBcclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2luc3RhbmNlO1xyXG4gICAgfVxyXG59XHJcbiJdfQ==
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/Data/Ultils.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '03f2ceupvBEfa9putmH215T', 'Ultils');
// Script/Data/Ultils.ts

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RandomRangeInt = void 0;
var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
var RandomRangeInt = function (from, to) {
    var random = cc.math.randomRangeInt(from, to);
    return random;
};
exports.RandomRangeInt = RandomRangeInt;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0XFxEYXRhXFxVbHRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQ00sSUFBQSxLQUF3QixFQUFFLENBQUMsVUFBVSxFQUFuQyxPQUFPLGFBQUEsRUFBRSxRQUFRLGNBQWtCLENBQUM7QUFHckMsSUFBTSxjQUFjLEdBQUcsVUFBQyxJQUFZLEVBQUUsRUFBVTtJQUNwRCxJQUFJLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFFOUMsT0FBTyxNQUFNLENBQUM7QUFDakIsQ0FBQyxDQUFBO0FBSlksUUFBQSxjQUFjLGtCQUkxQiIsImZpbGUiOiIiLCJzb3VyY2VSb290IjoiLyIsInNvdXJjZXNDb250ZW50IjpbIlxyXG5jb25zdCB7IGNjY2xhc3MsIHByb3BlcnR5IH0gPSBjYy5fZGVjb3JhdG9yO1xyXG5cclxuXHJcbmV4cG9ydCBjb25zdCBSYW5kb21SYW5nZUludCA9IChmcm9tOiBudW1iZXIsIHRvOiBudW1iZXIpOiBudW1iZXIgPT4ge1xyXG4gICBsZXQgcmFuZG9tID0gY2MubWF0aC5yYW5kb21SYW5nZUludChmcm9tLCB0byk7XHJcblxyXG4gICByZXR1cm4gcmFuZG9tO1xyXG59XHJcbiJdfQ==
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/neutrinoparticles/components/NeutrinoEffect_Fireworks01.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'ef97b+LSN5AT48vBZjKOb/+', 'NeutrinoEffect_Fireworks01');
// neutrinoparticles/components/NeutrinoEffect_Fireworks01.ts

"use strict";
// !!! This file is generated by NeutrinoParticles extension package.
// !!! Don't modify it manually.
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var NeutrinoEffect = require("../exported_effects/Fireworks01.js");
var textures_1 = require("../textures");
var NeutrinoComponent_1 = require("NeutrinoComponent");
var NeutrinoAssembler_1 = require("NeutrinoAssembler");
var _a = cc._decorator, ccclass = _a.ccclass, executeInEditMode = _a.executeInEditMode, playOnFocus = _a.playOnFocus, menu = _a.menu;
var NeutrinoEffectComponent = /** @class */ (function (_super) {
    __extends(NeutrinoEffectComponent, _super);
    function NeutrinoEffectComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    NeutrinoEffectComponent.prototype.getEffectClass = function () { return NeutrinoEffect; };
    NeutrinoEffectComponent.prototype.getTexturesDatabase = function () { return textures_1.default; };
    NeutrinoEffectComponent = __decorate([
        ccclass,
        executeInEditMode,
        playOnFocus,
        menu('i18n:MAIN_MENU.component.renderers/NeutrinoComponent/Fireworks01')
    ], NeutrinoEffectComponent);
    return NeutrinoEffectComponent;
}(NeutrinoComponent_1.default));
exports.default = NeutrinoEffectComponent;
cc.Assembler.register(NeutrinoEffectComponent, NeutrinoAssembler_1.default);

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcbmV1dHJpbm9wYXJ0aWNsZXNcXGNvbXBvbmVudHNcXE5ldXRyaW5vRWZmZWN0X0ZpcmV3b3JrczAxLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSxxRUFBcUU7QUFDckUsZ0NBQWdDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFFaEMsbUVBQXFFO0FBQ3JFLHdDQUFtQztBQUNuQyx1REFBa0Q7QUFDbEQsdURBQWtEO0FBRTVDLElBQUEsS0FBa0QsRUFBRSxDQUFDLFVBQVUsRUFBOUQsT0FBTyxhQUFBLEVBQUUsaUJBQWlCLHVCQUFBLEVBQUUsV0FBVyxpQkFBQSxFQUFFLElBQUksVUFBaUIsQ0FBQztBQU10RTtJQUFxRCwyQ0FBaUI7SUFBdEU7O0lBR0EsQ0FBQztJQUZBLGdEQUFjLEdBQWQsY0FBbUIsT0FBTyxjQUFjLENBQUMsQ0FBQyxDQUFDO0lBQzNDLHFEQUFtQixHQUFuQixjQUF3QixPQUFPLGtCQUFRLENBQUMsQ0FBQyxDQUFDO0lBRnRCLHVCQUF1QjtRQUozQyxPQUFPO1FBQ1AsaUJBQWlCO1FBQ2pCLFdBQVc7UUFDWCxJQUFJLENBQUMsa0VBQWtFLENBQUM7T0FDcEQsdUJBQXVCLENBRzNDO0lBQUQsOEJBQUM7Q0FIRCxBQUdDLENBSG9ELDJCQUFpQixHQUdyRTtrQkFIb0IsdUJBQXVCO0FBSzVDLEVBQUUsQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLHVCQUF1QixFQUFFLDJCQUFpQixDQUFDLENBQUMiLCJmaWxlIjoiIiwic291cmNlUm9vdCI6Ii8iLCJzb3VyY2VzQ29udGVudCI6WyIvLyAhISEgVGhpcyBmaWxlIGlzIGdlbmVyYXRlZCBieSBOZXV0cmlub1BhcnRpY2xlcyBleHRlbnNpb24gcGFja2FnZS5cbi8vICEhISBEb24ndCBtb2RpZnkgaXQgbWFudWFsbHkuXG5cbmltcG9ydCAqIGFzIE5ldXRyaW5vRWZmZWN0IGZyb20gJy4uL2V4cG9ydGVkX2VmZmVjdHMvRmlyZXdvcmtzMDEuanMnO1xuaW1wb3J0IHRleHR1cmVzIGZyb20gJy4uL3RleHR1cmVzJztcbmltcG9ydCBOZXV0cmlub0NvbXBvbmVudCBmcm9tICdOZXV0cmlub0NvbXBvbmVudCc7XG5pbXBvcnQgTmV1dHJpbm9Bc3NlbWJsZXIgZnJvbSAnTmV1dHJpbm9Bc3NlbWJsZXInO1xuXG5jb25zdCB7Y2NjbGFzcywgZXhlY3V0ZUluRWRpdE1vZGUsIHBsYXlPbkZvY3VzLCBtZW51fSA9IGNjLl9kZWNvcmF0b3I7XG5cbkBjY2NsYXNzXG5AZXhlY3V0ZUluRWRpdE1vZGVcbkBwbGF5T25Gb2N1c1xuQG1lbnUoJ2kxOG46TUFJTl9NRU5VLmNvbXBvbmVudC5yZW5kZXJlcnMvTmV1dHJpbm9Db21wb25lbnQvRmlyZXdvcmtzMDEnKVxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTmV1dHJpbm9FZmZlY3RDb21wb25lbnQgZXh0ZW5kcyBOZXV0cmlub0NvbXBvbmVudCB7XG5cdGdldEVmZmVjdENsYXNzKCkgeyByZXR1cm4gTmV1dHJpbm9FZmZlY3Q7IH1cblx0Z2V0VGV4dHVyZXNEYXRhYmFzZSgpIHsgcmV0dXJuIHRleHR1cmVzOyB9XG59XG5cbmNjLkFzc2VtYmxlci5yZWdpc3RlcihOZXV0cmlub0VmZmVjdENvbXBvbmVudCwgTmV1dHJpbm9Bc3NlbWJsZXIpO1xuIl19
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/Other/CTA.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '71158ED8B1KhJK96FnjvNWK', 'CTA');
// Script/Other/CTA.ts

"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var GameController_1 = require("../Controller/GameController");
var constants_1 = require("../Data/constants");
var AudioManager_1 = require("../Plugin/AudioManager");
var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
var NewClass = /** @class */ (function (_super) {
    __extends(NewClass, _super);
    function NewClass() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.GameController = null;
        _this.AudioManager = null;
        _this.btn = null;
        _this.overlay = null;
        _this.PS = null;
        _this.Next = null;
        _this.tryAgain = null;
        _this.isActived = false;
        return _this;
    }
    NewClass.prototype.start = function () {
        var _this = this;
        // cc.tween(this.overlay)
        // .to(0.5, {opacity: 100})
        // .start();
        this.activeTweenForBtn();
        if (constants_1.Constants.isLoose) {
            this.tryAgain.active = true;
            this.Next.active = false;
        }
        else {
            this.tryAgain.active = false;
            this.Next.active = true;
            this.PS.resetSystem();
        }
        this.scheduleOnce(function () {
            // this.btn.opacity = 255;
            // this.tryAgain.opacity = 255;
            // this.Next.opacity = 255;
            if (constants_1.Constants.isLoose) {
                _this.AudioManager.playSound(constants_1.Constants.SoundTrack.failSound);
            }
            else {
                _this.AudioManager.playSound(constants_1.Constants.SoundTrack.winSound);
            }
        }, 1.5);
        this.btn.on(cc.Node.EventType.TOUCH_START, this.GameController.installHandle, this);
        // mtg & applovin
        // this.overlay.on(cc.Node.EventType.TOUCH_START, this.GameController.installHandle, this);
    };
    NewClass.prototype.activeTweenForBtn = function () {
        cc.tween(this.btn)
            .repeatForever(cc.tween(this.btn)
            .to(0.5, { scale: 0.45 })
            .to(0.5, { scale: 0.5 }, { easing: cc.easing.elasticOut })).start();
    };
    __decorate([
        property(GameController_1.GameController)
    ], NewClass.prototype, "GameController", void 0);
    __decorate([
        property(AudioManager_1.default)
    ], NewClass.prototype, "AudioManager", void 0);
    __decorate([
        property(cc.Node)
    ], NewClass.prototype, "btn", void 0);
    __decorate([
        property(cc.Node)
    ], NewClass.prototype, "overlay", void 0);
    __decorate([
        property(cc.ParticleSystem)
    ], NewClass.prototype, "PS", void 0);
    __decorate([
        property(cc.Node)
    ], NewClass.prototype, "Next", void 0);
    __decorate([
        property(cc.Node)
    ], NewClass.prototype, "tryAgain", void 0);
    NewClass = __decorate([
        ccclass
    ], NewClass);
    return NewClass;
}(cc.Component));
exports.default = NewClass;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0XFxPdGhlclxcQ1RBLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLCtEQUE4RDtBQUM5RCwrQ0FBOEM7QUFDOUMsdURBQWtEO0FBRTVDLElBQUEsS0FBc0IsRUFBRSxDQUFDLFVBQVUsRUFBbEMsT0FBTyxhQUFBLEVBQUUsUUFBUSxjQUFpQixDQUFDO0FBRzFDO0lBQXNDLDRCQUFZO0lBQWxEO1FBQUEscUVBaUVDO1FBOURHLG9CQUFjLEdBQW1CLElBQUksQ0FBQztRQUV0QyxrQkFBWSxHQUFpQixJQUFJLENBQUM7UUFHbEMsU0FBRyxHQUFZLElBQUksQ0FBQztRQUVwQixhQUFPLEdBQVksSUFBSSxDQUFDO1FBR3hCLFFBQUUsR0FBc0IsSUFBSSxDQUFDO1FBRzdCLFVBQUksR0FBWSxJQUFJLENBQUM7UUFFckIsY0FBUSxHQUFZLElBQUksQ0FBQztRQUV6QixlQUFTLEdBQVksS0FBSyxDQUFDOztJQTZDL0IsQ0FBQztJQTFDYSx3QkFBSyxHQUFmO1FBQUEsaUJBK0JDO1FBOUJHLHlCQUF5QjtRQUN6QiwyQkFBMkI7UUFDM0IsWUFBWTtRQUNaLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO1FBRXpCLElBQUcscUJBQVMsQ0FBQyxPQUFPLEVBQUU7WUFDbEIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDO1lBQzVCLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQztTQUM1QjthQUFNO1lBQ0gsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDO1lBQzdCLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQztZQUN4QixJQUFJLENBQUMsRUFBRSxDQUFDLFdBQVcsRUFBRSxDQUFDO1NBQ3pCO1FBR0QsSUFBSSxDQUFDLFlBQVksQ0FBQztZQUNkLDBCQUEwQjtZQUMxQiwrQkFBK0I7WUFDL0IsMkJBQTJCO1lBQzNCLElBQUcscUJBQVMsQ0FBQyxPQUFPLEVBQUU7Z0JBQ2xCLEtBQUksQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDLHFCQUFTLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxDQUFDO2FBQy9EO2lCQUFNO2dCQUNILEtBQUksQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDLHFCQUFTLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxDQUFDO2FBQzlEO1FBQ0wsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFBO1FBRVAsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQyxjQUFjLENBQUMsYUFBYSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBRXBGLGlCQUFpQjtRQUNqQiwyRkFBMkY7SUFDL0YsQ0FBQztJQUdPLG9DQUFpQixHQUF6QjtRQUNJLEVBQUUsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQzthQUNqQixhQUFhLENBQ1YsRUFBRSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDO2FBQ2IsRUFBRSxDQUFDLEdBQUcsRUFBRSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsQ0FBQzthQUN4QixFQUFFLENBQUMsR0FBRyxFQUFFLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsTUFBTSxFQUFFLEVBQUUsQ0FBQyxNQUFNLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FDakUsQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUNkLENBQUM7SUE3REQ7UUFEQyxRQUFRLENBQUMsK0JBQWMsQ0FBQztvREFDYTtJQUV0QztRQURDLFFBQVEsQ0FBQyxzQkFBWSxDQUFDO2tEQUNXO0lBR2xDO1FBREMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUM7eUNBQ0U7SUFFcEI7UUFEQyxRQUFRLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQzs2Q0FDTTtJQUd4QjtRQURDLFFBQVEsQ0FBQyxFQUFFLENBQUMsY0FBYyxDQUFDO3dDQUNDO0lBRzdCO1FBREMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUM7MENBQ0c7SUFFckI7UUFEQyxRQUFRLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQzs4Q0FDTztJQWxCUixRQUFRO1FBRDVCLE9BQU87T0FDYSxRQUFRLENBaUU1QjtJQUFELGVBQUM7Q0FqRUQsQUFpRUMsQ0FqRXFDLEVBQUUsQ0FBQyxTQUFTLEdBaUVqRDtrQkFqRW9CLFFBQVEiLCJmaWxlIjoiIiwic291cmNlUm9vdCI6Ii8iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBHYW1lQ29udHJvbGxlciB9IGZyb20gXCIuLi9Db250cm9sbGVyL0dhbWVDb250cm9sbGVyXCI7XHJcbmltcG9ydCB7IENvbnN0YW50cyB9IGZyb20gXCIuLi9EYXRhL2NvbnN0YW50c1wiO1xyXG5pbXBvcnQgQXVkaW9NYW5hZ2VyIGZyb20gXCIuLi9QbHVnaW4vQXVkaW9NYW5hZ2VyXCI7XHJcblxyXG5jb25zdCB7Y2NjbGFzcywgcHJvcGVydHl9ID0gY2MuX2RlY29yYXRvcjtcclxuXHJcbkBjY2NsYXNzXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE5ld0NsYXNzIGV4dGVuZHMgY2MuQ29tcG9uZW50IHtcclxuXHJcbiAgICBAcHJvcGVydHkoR2FtZUNvbnRyb2xsZXIpXHJcbiAgICBHYW1lQ29udHJvbGxlcjogR2FtZUNvbnRyb2xsZXIgPSBudWxsO1xyXG4gICAgQHByb3BlcnR5KEF1ZGlvTWFuYWdlcilcclxuICAgIEF1ZGlvTWFuYWdlcjogQXVkaW9NYW5hZ2VyID0gbnVsbDtcclxuXHJcbiAgICBAcHJvcGVydHkoY2MuTm9kZSlcclxuICAgIGJ0bjogY2MuTm9kZSA9IG51bGw7XHJcbiAgICBAcHJvcGVydHkoY2MuTm9kZSlcclxuICAgIG92ZXJsYXk6IGNjLk5vZGUgPSBudWxsO1xyXG5cclxuICAgIEBwcm9wZXJ0eShjYy5QYXJ0aWNsZVN5c3RlbSlcclxuICAgIFBTOiBjYy5QYXJ0aWNsZVN5c3RlbSA9IG51bGw7XHJcblxyXG4gICAgQHByb3BlcnR5KGNjLk5vZGUpXHJcbiAgICBOZXh0OiBjYy5Ob2RlID0gbnVsbDtcclxuICAgIEBwcm9wZXJ0eShjYy5Ob2RlKVxyXG4gICAgdHJ5QWdhaW46IGNjLk5vZGUgPSBudWxsO1xyXG5cclxuICAgIGlzQWN0aXZlZDogYm9vbGVhbiA9IGZhbHNlO1xyXG5cclxuXHJcbiAgICBwcm90ZWN0ZWQgc3RhcnQoKTogdm9pZCB7XHJcbiAgICAgICAgLy8gY2MudHdlZW4odGhpcy5vdmVybGF5KVxyXG4gICAgICAgIC8vIC50bygwLjUsIHtvcGFjaXR5OiAxMDB9KVxyXG4gICAgICAgIC8vIC5zdGFydCgpO1xyXG4gICAgICAgIHRoaXMuYWN0aXZlVHdlZW5Gb3JCdG4oKTtcclxuXHJcbiAgICAgICAgaWYoQ29uc3RhbnRzLmlzTG9vc2UpIHtcclxuICAgICAgICAgICAgdGhpcy50cnlBZ2Fpbi5hY3RpdmUgPSB0cnVlO1xyXG4gICAgICAgICAgICB0aGlzLk5leHQuYWN0aXZlID0gZmFsc2U7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy50cnlBZ2Fpbi5hY3RpdmUgPSBmYWxzZTtcclxuICAgICAgICAgICAgdGhpcy5OZXh0LmFjdGl2ZSA9IHRydWU7XHJcbiAgICAgICAgICAgIHRoaXMuUFMucmVzZXRTeXN0ZW0oKTtcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICB0aGlzLnNjaGVkdWxlT25jZSgoKSA9PiB7XHJcbiAgICAgICAgICAgIC8vIHRoaXMuYnRuLm9wYWNpdHkgPSAyNTU7XHJcbiAgICAgICAgICAgIC8vIHRoaXMudHJ5QWdhaW4ub3BhY2l0eSA9IDI1NTtcclxuICAgICAgICAgICAgLy8gdGhpcy5OZXh0Lm9wYWNpdHkgPSAyNTU7XHJcbiAgICAgICAgICAgIGlmKENvbnN0YW50cy5pc0xvb3NlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLkF1ZGlvTWFuYWdlci5wbGF5U291bmQoQ29uc3RhbnRzLlNvdW5kVHJhY2suZmFpbFNvdW5kKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuQXVkaW9NYW5hZ2VyLnBsYXlTb3VuZChDb25zdGFudHMuU291bmRUcmFjay53aW5Tb3VuZCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LCAxLjUpXHJcblxyXG4gICAgICAgIHRoaXMuYnRuLm9uKGNjLk5vZGUuRXZlbnRUeXBlLlRPVUNIX1NUQVJULCB0aGlzLkdhbWVDb250cm9sbGVyLmluc3RhbGxIYW5kbGUsIHRoaXMpO1xyXG5cclxuICAgICAgICAvLyBtdGcgJiBhcHBsb3ZpblxyXG4gICAgICAgIC8vIHRoaXMub3ZlcmxheS5vbihjYy5Ob2RlLkV2ZW50VHlwZS5UT1VDSF9TVEFSVCwgdGhpcy5HYW1lQ29udHJvbGxlci5pbnN0YWxsSGFuZGxlLCB0aGlzKTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgcHJpdmF0ZSBhY3RpdmVUd2VlbkZvckJ0bigpOiB2b2lkIHtcclxuICAgICAgICBjYy50d2Vlbih0aGlzLmJ0bilcclxuICAgICAgICAucmVwZWF0Rm9yZXZlcihcclxuICAgICAgICAgICAgY2MudHdlZW4odGhpcy5idG4pXHJcbiAgICAgICAgICAgICAgICAudG8oMC41LCB7IHNjYWxlOiAwLjQ1IH0pXHJcbiAgICAgICAgICAgICAgICAudG8oMC41LCB7IHNjYWxlOiAwLjUgfSwgeyBlYXNpbmc6IGNjLmVhc2luZy5lbGFzdGljT3V0IH0pXHJcbiAgICAgICAgKS5zdGFydCgpO1xyXG4gICAgfVxyXG59XHJcbiJdfQ==
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/Controller/GamePlay.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'b1d34srP15JNoxtzOCtQ0oZ', 'GamePlay');
// Script/Controller/GamePlay.ts

"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var constants_1 = require("../Data/constants");
var Army_1 = require("../Other/Army");
var AudioManager_1 = require("../Plugin/AudioManager");
var CmoboController_1 = require("./CmoboController");
var GameController_1 = require("./GameController");
var LoadFoodController_1 = require("./LoadFoodController");
var SpawnController_1 = require("./SpawnController");
var vFxController_1 = require("./vFxController");
var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
var GamePlay = /** @class */ (function (_super) {
    __extends(GamePlay, _super);
    function GamePlay() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.AudioManager = null;
        _this.GameController = null;
        _this.LoadFoodController = null;
        _this.SpawnController = null;
        _this.ComboController = null;
        _this.VFxController = null;
        // Node
        _this.CTA = null;
        // state
        _this.isCollideBaseFlag = false;
        return _this;
    }
    GamePlay.prototype.onLoad = function () {
        cc.director.getPhysicsManager().enabled = true;
        var collisionManager = cc.director.getCollisionManager();
        collisionManager.enabled = true;
        collisionManager.enabledDrawBoundingBox = true;
        // collisionManager.enabledDebugDraw = true;
    };
    GamePlay.prototype.resetGame = function () {
        constants_1.Constants.allyArmies.forEach(function (army) { return army.destroy(); });
        constants_1.Constants.enemyArmies.forEach(function (army) { return army.destroy(); });
        constants_1.Constants.isStartGame = false;
        constants_1.Constants.isPauseGame = false;
        constants_1.Constants.isCanBuyArmyLv2 = false;
        constants_1.Constants.isCanBuyArmyLv3 = false;
        constants_1.Constants.isUpgrade = false;
        constants_1.Constants.isWin = false;
        constants_1.Constants.isLoose = false;
        constants_1.Constants.isCollideBase = false;
        constants_1.Constants.isFiveBroInTank = false;
        constants_1.Constants.food = 15;
        constants_1.Constants.enemyDie = 0;
        constants_1.Constants.currentCoin = 0;
        constants_1.Constants.EnemyBaseHeal = 1;
        constants_1.Constants.AllyBaseHeal = 1;
        constants_1.Constants.comboCount = 0;
        constants_1.Constants.allyArmies = [];
        constants_1.Constants.enemyArmies = [];
        cc.director.loadScene("game_Hor");
    };
    GamePlay.prototype.initGame = function () {
        constants_1.Constants.allyArmies.forEach(function (army) { return army.destroy(); });
        constants_1.Constants.enemyArmies.forEach(function (army) { return army.destroy(); });
        constants_1.Constants.isStartGame = false;
        constants_1.Constants.isPauseGame = false;
        constants_1.Constants.isCanBuyArmyLv2 = false;
        constants_1.Constants.isCanBuyArmyLv3 = false;
        constants_1.Constants.isUpgrade = false;
        constants_1.Constants.isWin = false;
        constants_1.Constants.isLoose = false;
        constants_1.Constants.isCollideBase = false;
        constants_1.Constants.isFiveBroInTank = false;
        constants_1.Constants.food = 15;
        constants_1.Constants.enemyDie = 0;
        constants_1.Constants.currentCoin = 0;
        constants_1.Constants.EnemyBaseHeal = 1;
        constants_1.Constants.AllyBaseHeal = 1;
        constants_1.Constants.comboCount = 0;
        constants_1.Constants.allyArmies = [];
        constants_1.Constants.enemyArmies = [];
    };
    GamePlay.prototype.start = function () {
        var _this = this;
        this.AudioManager.playSound(constants_1.Constants.SoundTrack.bgSound);
        this.AudioManager.bgSound.volume = 0.5;
        this.initGame();
        this.node.on('Shooting', function () {
            _this.VFxController.handleShooting();
        }, this);
        this.node.on('ShowSpeedLine', function () {
            _this.AudioManager.stopSound(constants_1.Constants.SoundTrack.bgSound);
            _this.AudioManager.playSound(constants_1.Constants.SoundTrack.Bg_Attack);
            _this.AudioManager.Bg_Attack.volume = 0.5;
            _this.VFxController.ShowSpeedLine();
        }, this);
        cc.view.setResizeCallback(function () {
            if (constants_1.Constants.ironSource.isEndGame || constants_1.Constants.isWin || constants_1.Constants.isLoose)
                return;
            _this.resetGame();
        });
    };
    GamePlay.prototype.spawnArmy = function (index) {
        constants_1.Constants.isPauseGame = false;
        // !Constants.isStartGame && this.LoadFoodController.increaseFood();
        !constants_1.Constants.isStartGame && this.SpawnController.SpawnEnemies();
        constants_1.Constants.isStartGame = true;
        switch (index) {
            case 1:
                // spawn army lv1
                if (constants_1.Constants.food >= 3) {
                    constants_1.Constants.food -= 3;
                    constants_1.Constants.comboCount += 1;
                    this.SpawnController.SpawnPlayerArmy(constants_1.Constants.ArmySkin.Ally, 1);
                    this.ComboController.handleShowCombo();
                }
                break;
            case 2:
                // spawn army lv2
                if (constants_1.Constants.food >= 4 && constants_1.Constants.isCanBuyArmyLv2) {
                    constants_1.Constants.food -= 4;
                    this.SpawnController.SpawnPlayerArmy(constants_1.Constants.ArmySkin.Ally, 2);
                }
                break;
            case 3:
                // spawn army lv3
                if (constants_1.Constants.food >= 5 && constants_1.Constants.isCanBuyArmyLv3) {
                    constants_1.Constants.food -= 5;
                    this.SpawnController.SpawnPlayerArmy(constants_1.Constants.ArmySkin.Ally, 3);
                }
                break;
            default:
                console.log("can not spawn");
                break;
        }
    };
    GamePlay.prototype.HandleFiveBroInTank = function () {
        if (constants_1.Constants.isFiveBroInTank)
            return;
        constants_1.Constants.isFiveBroInTank = true;
        // this.AudioManager.playSound(Constants.SoundTrack.bgSound);
        var Troops = [];
        var Tank = null;
        constants_1.Constants.allyArmies.forEach(function (army) {
            if (army.name === "Army2_Lv1")
                Troops.push(army);
            if (army.name === "Army_Lv3")
                Tank = army;
        });
        // cho mấy thằng lính hợp thể vào tank.
        Troops.forEach(function (troop) {
            cc.tween(troop)
                .to(0.5, { x: Tank.x, y: Tank.y })
                .call(function () {
                constants_1.Constants.troopsInTankCount += 1;
                // set anim run cho lính
                troop.getComponent(Army_1.default).spine.setAnimation(0, constants_1.Constants.ArmyAnim.Run, true);
                // cho xe tăng chạy nếu đã đủ lính
                if (constants_1.Constants.troopsInTankCount >= 5)
                    constants_1.Constants.isTankCanRun = true;
                troop.active = false;
            })
                .start();
        });
    };
    GamePlay.prototype.isSpawn5Troops = function () {
        var result = false;
        if (constants_1.Constants.troopsSpawnLeftCount < 0)
            return true;
        return result;
    };
    GamePlay.prototype.activeCTA = function () {
        cc.log("show CTA");
        this.CTA.active = true;
        constants_1.Constants.isActiveCTA = true;
    };
    GamePlay.prototype.update = function (dt) {
        this.isSpawn5Troops() && this.HandleFiveBroInTank();
        if ((constants_1.Constants.isLoose || constants_1.Constants.isWin) && !constants_1.Constants.isActiveCTA) {
            this.activeCTA();
        }
    };
    __decorate([
        property(AudioManager_1.default)
    ], GamePlay.prototype, "AudioManager", void 0);
    __decorate([
        property(GameController_1.GameController)
    ], GamePlay.prototype, "GameController", void 0);
    __decorate([
        property(LoadFoodController_1.default)
    ], GamePlay.prototype, "LoadFoodController", void 0);
    __decorate([
        property(SpawnController_1.default)
    ], GamePlay.prototype, "SpawnController", void 0);
    __decorate([
        property(CmoboController_1.default)
    ], GamePlay.prototype, "ComboController", void 0);
    __decorate([
        property(vFxController_1.default)
    ], GamePlay.prototype, "VFxController", void 0);
    __decorate([
        property(cc.Node)
    ], GamePlay.prototype, "CTA", void 0);
    GamePlay = __decorate([
        ccclass
    ], GamePlay);
    return GamePlay;
}(cc.Component));
exports.default = GamePlay;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/Controller/CoinController.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'f60c4CpqFlH750A1K4ORO4l', 'CoinController');
// Script/Controller/CoinController.ts

"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var constants_1 = require("../Data/constants");
var AudioManager_1 = require("../Plugin/AudioManager");
var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
var CoinController = /** @class */ (function (_super) {
    __extends(CoinController, _super);
    function CoinController() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.AudioManager = null;
        _this.frameUnlockArmies = [];
        _this.frameUpgrade = null;
        _this.label = null;
        _this.tempEnemyDie = 0;
        _this.isTweenRunning = false;
        return _this;
    }
    CoinController.prototype.start = function () {
    };
    CoinController.prototype.increaseCoin = function (fromValue, toValue) {
        var _this = this;
        if (this.isTweenRunning)
            return;
        this.AudioManager.playSound(constants_1.Constants.SoundTrack.coinSound);
        this.label.string = String(fromValue);
        cc.tween(constants_1.Constants)
            .to(0.5, { currentCoin: toValue }, {
            progress: function (start, end, current, t) {
                var newValue = Math.floor(cc.misc.lerp(start, end, t));
                _this.label.string = newValue.toString();
                return newValue;
            },
        })
            .call(function () {
            _this.isTweenRunning = false;
        })
            .start();
    };
    CoinController.prototype.checkUnlockArmy = function () {
        for (var index = 0; index < this.frameUnlockArmies.length; index++) {
            var node = this.frameUnlockArmies[index];
            var cost = node.getChildByName("Label").getComponent(cc.Label);
            if (constants_1.Constants.currentCoin < Number(cost.string)) {
                node.color = cc.color(113, 113, 113, 255);
            }
            else {
                node.color = cc.color(255, 255, 255, 255);
            }
        }
    };
    CoinController.prototype.checkEnableFrameUpgrade = function () {
        var node = this.frameUpgrade;
        if (node) {
            var cost = node.getChildByName("Label").getComponent(cc.Label);
            if (constants_1.Constants.currentCoin < Number(cost.string)) {
                node.color = cc.color(113, 113, 113, 255);
            }
            else {
                node.color = cc.color(255, 255, 255, 255);
            }
        }
    };
    CoinController.prototype.update = function (dt) {
        this.checkUnlockArmy();
        // this.checkEnableFrameUpgrade();
        if (this.tempEnemyDie !== constants_1.Constants.enemyDie) {
            var toValue = constants_1.Constants.enemyDie * 10;
            this.increaseCoin(constants_1.Constants.currentCoin, toValue);
        }
        this.tempEnemyDie = constants_1.Constants.enemyDie;
    };
    __decorate([
        property(AudioManager_1.default)
    ], CoinController.prototype, "AudioManager", void 0);
    __decorate([
        property([cc.Node])
    ], CoinController.prototype, "frameUnlockArmies", void 0);
    __decorate([
        property(cc.Node)
    ], CoinController.prototype, "frameUpgrade", void 0);
    __decorate([
        property(cc.Label)
    ], CoinController.prototype, "label", void 0);
    CoinController = __decorate([
        ccclass
    ], CoinController);
    return CoinController;
}(cc.Component));
exports.default = CoinController;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0XFxDb250cm9sbGVyXFxDb2luQ29udHJvbGxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSwrQ0FBOEM7QUFDOUMsdURBQWtEO0FBRTVDLElBQUEsS0FBc0IsRUFBRSxDQUFDLFVBQVUsRUFBbEMsT0FBTyxhQUFBLEVBQUUsUUFBUSxjQUFpQixDQUFDO0FBRzFDO0lBQTRDLGtDQUFZO0lBQXhEO1FBQUEscUVBOEVDO1FBNUVHLGtCQUFZLEdBQWlCLElBQUksQ0FBQztRQUlsQyx1QkFBaUIsR0FBYyxFQUFFLENBQUM7UUFFbEMsa0JBQVksR0FBWSxJQUFJLENBQUM7UUFFN0IsV0FBSyxHQUFhLElBQUksQ0FBQztRQUV2QixrQkFBWSxHQUFXLENBQUMsQ0FBQztRQUN6QixvQkFBYyxHQUFZLEtBQUssQ0FBQzs7SUFpRXBDLENBQUM7SUE5RGEsOEJBQUssR0FBZjtJQUVBLENBQUM7SUFHTSxxQ0FBWSxHQUFuQixVQUFvQixTQUFpQixFQUFFLE9BQWU7UUFBdEQsaUJBa0JDO1FBakJHLElBQUksSUFBSSxDQUFDLGNBQWM7WUFBRSxPQUFPO1FBRWhDLElBQUksQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDLHFCQUFTLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBRTVELElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUN0QyxFQUFFLENBQUMsS0FBSyxDQUFDLHFCQUFTLENBQUM7YUFDZCxFQUFFLENBQUMsR0FBRyxFQUFFLEVBQUUsV0FBVyxFQUFFLE9BQU8sRUFBRSxFQUFFO1lBQy9CLFFBQVEsRUFBRSxVQUFDLEtBQUssRUFBRSxHQUFHLEVBQUUsT0FBTyxFQUFFLENBQUM7Z0JBQzdCLElBQUksUUFBUSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUN2RCxLQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBRyxRQUFRLENBQUMsUUFBUSxFQUFFLENBQUM7Z0JBQ3hDLE9BQU8sUUFBUSxDQUFDO1lBQ3BCLENBQUM7U0FDSixDQUFDO2FBQ0QsSUFBSSxDQUFDO1lBQ0YsS0FBSSxDQUFDLGNBQWMsR0FBRyxLQUFLLENBQUM7UUFDaEMsQ0FBQyxDQUFDO2FBQ0QsS0FBSyxFQUFFLENBQUM7SUFDakIsQ0FBQztJQUdPLHdDQUFlLEdBQXZCO1FBQ0ksS0FBSyxJQUFJLEtBQUssR0FBRyxDQUFDLEVBQUUsS0FBSyxHQUFHLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLEVBQUUsS0FBSyxFQUFFLEVBQUU7WUFDaEUsSUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQzNDLElBQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLENBQUMsWUFBWSxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUNqRSxJQUFHLHFCQUFTLENBQUMsV0FBVyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUU7Z0JBQzVDLElBQUksQ0FBQyxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQzthQUM3QztpQkFBTTtnQkFDSCxJQUFJLENBQUMsS0FBSyxHQUFHLEVBQUUsQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUM7YUFDN0M7U0FDSjtJQUNMLENBQUM7SUFHTyxnREFBdUIsR0FBL0I7UUFDSSxJQUFJLElBQUksR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDO1FBQzdCLElBQUcsSUFBSSxFQUFFO1lBQ0wsSUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxZQUFZLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ2pFLElBQUcscUJBQVMsQ0FBQyxXQUFXLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRTtnQkFDNUMsSUFBSSxDQUFDLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDO2FBQzdDO2lCQUFNO2dCQUNILElBQUksQ0FBQyxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQzthQUM3QztTQUNKO0lBQ0wsQ0FBQztJQUdTLCtCQUFNLEdBQWhCLFVBQWlCLEVBQVU7UUFDdkIsSUFBSSxDQUFDLGVBQWUsRUFBRSxDQUFDO1FBQ3ZCLGtDQUFrQztRQUVsQyxJQUFHLElBQUksQ0FBQyxZQUFZLEtBQUsscUJBQVMsQ0FBQyxRQUFRLEVBQUU7WUFDekMsSUFBSSxPQUFPLEdBQUcscUJBQVMsQ0FBQyxRQUFRLEdBQUcsRUFBRSxDQUFDO1lBQ3RDLElBQUksQ0FBQyxZQUFZLENBQUMscUJBQVMsQ0FBQyxXQUFXLEVBQUUsT0FBTyxDQUFDLENBQUE7U0FDcEQ7UUFDRCxJQUFJLENBQUMsWUFBWSxHQUFHLHFCQUFTLENBQUMsUUFBUSxDQUFDO0lBQzNDLENBQUM7SUEzRUQ7UUFEQyxRQUFRLENBQUMsc0JBQVksQ0FBQzt3REFDVztJQUlsQztRQURDLFFBQVEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQzs2REFDYztJQUVsQztRQURDLFFBQVEsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDO3dEQUNXO0lBRTdCO1FBREMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUM7aURBQ0k7SUFWTixjQUFjO1FBRGxDLE9BQU87T0FDYSxjQUFjLENBOEVsQztJQUFELHFCQUFDO0NBOUVELEFBOEVDLENBOUUyQyxFQUFFLENBQUMsU0FBUyxHQThFdkQ7a0JBOUVvQixjQUFjIiwiZmlsZSI6IiIsInNvdXJjZVJvb3QiOiIvIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29uc3RhbnRzIH0gZnJvbSBcIi4uL0RhdGEvY29uc3RhbnRzXCI7XHJcbmltcG9ydCBBdWRpb01hbmFnZXIgZnJvbSBcIi4uL1BsdWdpbi9BdWRpb01hbmFnZXJcIjtcclxuXHJcbmNvbnN0IHtjY2NsYXNzLCBwcm9wZXJ0eX0gPSBjYy5fZGVjb3JhdG9yO1xyXG5cclxuQGNjY2xhc3NcclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ29pbkNvbnRyb2xsZXIgZXh0ZW5kcyBjYy5Db21wb25lbnQge1xyXG4gICAgQHByb3BlcnR5KEF1ZGlvTWFuYWdlcilcclxuICAgIEF1ZGlvTWFuYWdlcjogQXVkaW9NYW5hZ2VyID0gbnVsbDtcclxuXHJcblxyXG4gICAgQHByb3BlcnR5KFtjYy5Ob2RlXSlcclxuICAgIGZyYW1lVW5sb2NrQXJtaWVzOiBjYy5Ob2RlW10gPSBbXTtcclxuICAgIEBwcm9wZXJ0eShjYy5Ob2RlKVxyXG4gICAgZnJhbWVVcGdyYWRlOiBjYy5Ob2RlID0gbnVsbDtcclxuICAgIEBwcm9wZXJ0eShjYy5MYWJlbClcclxuICAgIGxhYmVsOiBjYy5MYWJlbCA9IG51bGw7XHJcblxyXG4gICAgdGVtcEVuZW15RGllOiBudW1iZXIgPSAwO1xyXG4gICAgaXNUd2VlblJ1bm5pbmc6IGJvb2xlYW4gPSBmYWxzZTtcclxuXHJcblxyXG4gICAgcHJvdGVjdGVkIHN0YXJ0KCk6IHZvaWQge1xyXG5cclxuICAgIH1cclxuXHJcblxyXG4gICAgcHVibGljIGluY3JlYXNlQ29pbihmcm9tVmFsdWU6IG51bWJlciwgdG9WYWx1ZTogbnVtYmVyKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuaXNUd2VlblJ1bm5pbmcpIHJldHVybjtcclxuXHJcbiAgICAgICAgdGhpcy5BdWRpb01hbmFnZXIucGxheVNvdW5kKENvbnN0YW50cy5Tb3VuZFRyYWNrLmNvaW5Tb3VuZCk7XHJcblxyXG4gICAgICAgIHRoaXMubGFiZWwuc3RyaW5nID0gU3RyaW5nKGZyb21WYWx1ZSk7XHJcbiAgICAgICAgY2MudHdlZW4oQ29uc3RhbnRzKVxyXG4gICAgICAgICAgICAudG8oMC41LCB7IGN1cnJlbnRDb2luOiB0b1ZhbHVlIH0sIHtcclxuICAgICAgICAgICAgICAgIHByb2dyZXNzOiAoc3RhcnQsIGVuZCwgY3VycmVudCwgdCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBuZXdWYWx1ZSA9IE1hdGguZmxvb3IoY2MubWlzYy5sZXJwKHN0YXJ0LCBlbmQsIHQpKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmxhYmVsLnN0cmluZyA9IG5ld1ZhbHVlLnRvU3RyaW5nKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ld1ZhbHVlO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLmNhbGwoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5pc1R3ZWVuUnVubmluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAuc3RhcnQoKTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgcHJpdmF0ZSBjaGVja1VubG9ja0FybXkoKTogdm9pZCB7XHJcbiAgICAgICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IHRoaXMuZnJhbWVVbmxvY2tBcm1pZXMubGVuZ3RoOyBpbmRleCsrKSB7ICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGNvbnN0IG5vZGUgPSB0aGlzLmZyYW1lVW5sb2NrQXJtaWVzW2luZGV4XTtcclxuICAgICAgICAgICAgY29uc3QgY29zdCA9IG5vZGUuZ2V0Q2hpbGRCeU5hbWUoXCJMYWJlbFwiKS5nZXRDb21wb25lbnQoY2MuTGFiZWwpO1xyXG4gICAgICAgICAgICBpZihDb25zdGFudHMuY3VycmVudENvaW4gPCBOdW1iZXIoY29zdC5zdHJpbmcpKSB7XHJcbiAgICAgICAgICAgICAgICBub2RlLmNvbG9yID0gY2MuY29sb3IoMTEzLCAxMTMsIDExMywgMjU1KTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIG5vZGUuY29sb3IgPSBjYy5jb2xvcigyNTUsIDI1NSwgMjU1LCAyNTUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuXHJcbiAgICBwcml2YXRlIGNoZWNrRW5hYmxlRnJhbWVVcGdyYWRlKCk6IHZvaWQge1xyXG4gICAgICAgIGxldCBub2RlID0gdGhpcy5mcmFtZVVwZ3JhZGU7XHJcbiAgICAgICAgaWYobm9kZSkge1xyXG4gICAgICAgICAgICBjb25zdCBjb3N0ID0gbm9kZS5nZXRDaGlsZEJ5TmFtZShcIkxhYmVsXCIpLmdldENvbXBvbmVudChjYy5MYWJlbCk7XHJcbiAgICAgICAgICAgIGlmKENvbnN0YW50cy5jdXJyZW50Q29pbiA8IE51bWJlcihjb3N0LnN0cmluZykpIHtcclxuICAgICAgICAgICAgICAgIG5vZGUuY29sb3IgPSBjYy5jb2xvcigxMTMsIDExMywgMTEzLCAyNTUpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgbm9kZS5jb2xvciA9IGNjLmNvbG9yKDI1NSwgMjU1LCAyNTUsIDI1NSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG5cclxuICAgIHByb3RlY3RlZCB1cGRhdGUoZHQ6IG51bWJlcik6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuY2hlY2tVbmxvY2tBcm15KCk7XHJcbiAgICAgICAgLy8gdGhpcy5jaGVja0VuYWJsZUZyYW1lVXBncmFkZSgpO1xyXG5cclxuICAgICAgICBpZih0aGlzLnRlbXBFbmVteURpZSAhPT0gQ29uc3RhbnRzLmVuZW15RGllKSB7XHJcbiAgICAgICAgICAgIGxldCB0b1ZhbHVlID0gQ29uc3RhbnRzLmVuZW15RGllICogMTA7XHJcbiAgICAgICAgICAgIHRoaXMuaW5jcmVhc2VDb2luKENvbnN0YW50cy5jdXJyZW50Q29pbiwgdG9WYWx1ZSlcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy50ZW1wRW5lbXlEaWUgPSBDb25zdGFudHMuZW5lbXlEaWU7XHJcbiAgICB9XHJcbn1cclxuIl19
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/Controller/SpawnController.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'fe46aRT4+tC+aNQcYlNw6Y+', 'SpawnController');
// Script/Controller/SpawnController.ts

"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var constants_1 = require("../Data/constants");
var Army_1 = require("../Other/Army");
var Ultils_1 = require("../Data/Ultils");
var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
var SpawnController = /** @class */ (function (_super) {
    __extends(SpawnController, _super);
    function SpawnController() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.BasePlayer = null;
        _this.AllyPoints = [];
        _this.EnemyPoints = [];
        _this.Army_Lv1 = null;
        _this.Army_Lv2 = null;
        _this.Army_Lv3 = null;
        _this.enemySpawnTime = 1;
        _this.isReduce = false;
        return _this;
    }
    SpawnController.prototype.start = function () {
        // if(Constants.enemyArmies[0]) Constants.enemyArmies.splice(0, 1);
        // this.SpawnEnemyArmy(Constants.ArmySkin.Enemy);
        constants_1.Constants.isUpgrade = true;
        this.spawnTank();
    };
    SpawnController.prototype.spawnTank = function () {
        var _this = this;
        this.scheduleOnce(function () {
            var random = 2;
            var newArmy;
            newArmy = cc.instantiate(_this.Army_Lv3);
            constants_1.Constants.allyArmies.push(newArmy);
            // caculate Scale
            newArmy.scale = constants_1.Constants.scaleArmy;
            // set Pos
            var point = _this.AllyPoints[random];
            point.parent.addChild(newArmy);
            newArmy.setSiblingIndex(0);
            newArmy.setPosition(point.getPosition());
            // set skin & group
            newArmy.group = "Ally";
            var spine = newArmy.getChildByName("Spine").getComponent(sp.Skeleton);
            spine.timeScale = 0.9;
            constants_1.Constants.isSpawnTank = true;
            cc.log("Spawned Tank!");
        }, 0.5);
    };
    SpawnController.prototype.SpawnEnemies = function () {
        var _this = this;
        this.schedule(function () {
            var random = Ultils_1.RandomRangeInt(1, 3);
            if (constants_1.Constants.isPauseGame || constants_1.Constants.shootCount >= 2)
                return;
            _this.SpawnEnemyArmy(constants_1.Constants.ArmySkin.Enemy, random);
        }, this.enemySpawnTime, cc.macro.REPEAT_FOREVER, 0.2);
    };
    SpawnController.prototype.SpawnEnemyArmy = function (skin, level) {
        // if((Constants.isCanBuyArmyLv3 || Constants.isUpgrade) && this.enemySpawnTime === 0.3) {
        //     console.log("up spawn time");
        //     this.enemySpawnTime = 1.5;
        // }
        var random = Ultils_1.RandomRangeInt(0, 5);
        // create Army
        var newArmy = null;
        switch (level) {
            case 1:
                newArmy = cc.instantiate(this.Army_Lv1);
                break;
            case 2:
                newArmy = cc.instantiate(this.Army_Lv2);
                break;
            default:
                break;
        }
        constants_1.Constants.enemyArmies.push(newArmy);
        // caculate Scale
        newArmy.scaleX = -constants_1.Constants.scaleArmy;
        newArmy.scaleY = constants_1.Constants.scaleArmy;
        // set Pos
        var point = this.EnemyPoints[random];
        var armyComponent = newArmy.getComponent(Army_1.default);
        point.parent.addChild(newArmy);
        newArmy.setSiblingIndex(0);
        newArmy.setPosition(point.getPosition());
        // set skin & group
        armyComponent.skin = skin;
        newArmy.group = "Enemy";
        var spine = newArmy.getChildByName("Spine").getComponent(sp.Skeleton);
        spine.setSkin(skin);
        console.log("Enemy - Group: " + newArmy.group);
    };
    SpawnController.prototype.SpawnPlayerArmy = function (skin, level) {
        var random = Ultils_1.RandomRangeInt(0, 5);
        var newArmy;
        switch (level) {
            case 1:
                newArmy = cc.instantiate(this.Army_Lv1);
                break;
            case 2:
                newArmy = cc.instantiate(this.Army_Lv2);
                break;
            case 3:
                newArmy = cc.instantiate(this.Army_Lv3);
                break;
            default:
                break;
        }
        // create Army
        constants_1.Constants.allyArmies.push(newArmy);
        console.log("Allies:" + constants_1.Constants.allyArmies.length);
        // caculate Scale
        newArmy.scale = constants_1.Constants.scaleArmy;
        // set Pos
        var point = this.AllyPoints[random];
        var armyComponent = newArmy.getComponent(Army_1.default);
        point.parent.addChild(newArmy);
        // newArmy.setSiblingIndex(0);
        newArmy.setPosition(point.getPosition());
        // set skin & group
        armyComponent.skin = skin;
        newArmy.group = "Ally";
        var spine = newArmy.getChildByName("Spine").getComponent(sp.Skeleton);
        spine.setSkin(skin);
        spine.timeScale = 0.9;
    };
    __decorate([
        property(cc.Node)
    ], SpawnController.prototype, "BasePlayer", void 0);
    __decorate([
        property([cc.Node])
    ], SpawnController.prototype, "AllyPoints", void 0);
    __decorate([
        property([cc.Node])
    ], SpawnController.prototype, "EnemyPoints", void 0);
    __decorate([
        property(cc.Prefab)
    ], SpawnController.prototype, "Army_Lv1", void 0);
    __decorate([
        property(cc.Prefab)
    ], SpawnController.prototype, "Army_Lv2", void 0);
    __decorate([
        property(cc.Prefab)
    ], SpawnController.prototype, "Army_Lv3", void 0);
    SpawnController = __decorate([
        ccclass
    ], SpawnController);
    return SpawnController;
}(cc.Component));
exports.default = SpawnController;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/Controller/LoadFoodController.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '8aaf1Qac2lG3aTwixhAfLvl', 'LoadFoodController');
// Script/Controller/LoadFoodController.ts

"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var constants_1 = require("../Data/constants");
var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
var LoadFoodController = /** @class */ (function (_super) {
    __extends(LoadFoodController, _super);
    function LoadFoodController() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.overlay = null;
        _this.label = null;
        _this.unitCosts = [];
        _this.unitFrames = [];
        return _this;
    }
    LoadFoodController.prototype.start = function () {
    };
    LoadFoodController.prototype.increaseFood = function () {
        var _this = this;
        this.overlay.scaleX = 0;
        if (constants_1.Constants.isPauseGame)
            return;
        cc.tween(this.overlay)
            .to(1.2, { scaleX: 1 })
            .call(function () {
            constants_1.Constants.food += 1;
            _this.increaseFood();
        })
            .start();
    };
    LoadFoodController.prototype.checkEnableCost = function () {
        for (var index = 0; index < this.unitCosts.length; index++) {
            var label = this.unitCosts[index];
            if (Number(this.label.string) >= Number(label.string)) {
                if (index === 0) {
                    this.unitFrames[index].opacity = 255;
                    label.node.color = cc.Color.WHITE;
                }
                if (index === 1 && constants_1.Constants.isCanBuyArmyLv2) {
                    this.unitFrames[index].opacity = 255;
                    label.node.color = cc.Color.WHITE;
                }
                if (index === 2 && constants_1.Constants.isCanBuyArmyLv3) {
                    this.unitFrames[index].opacity = 255;
                    label.node.color = cc.Color.WHITE;
                }
            }
            else {
                label.node.color = cc.Color.RED;
                if (index === 1 && constants_1.Constants.isCanBuyArmyLv2)
                    this.unitFrames[index].opacity = 255;
                if (index === 2 && constants_1.Constants.isCanBuyArmyLv3)
                    this.unitFrames[index].opacity = 255;
                this.unitFrames[index].opacity = 0;
            }
        }
    };
    LoadFoodController.prototype.update = function (dt) {
        // if(Constants.isPauseGame) return;
        this.label.string = String(constants_1.Constants.food);
        this.checkEnableCost();
    };
    __decorate([
        property(cc.Node)
    ], LoadFoodController.prototype, "overlay", void 0);
    __decorate([
        property(cc.Label)
    ], LoadFoodController.prototype, "label", void 0);
    __decorate([
        property([cc.Label])
    ], LoadFoodController.prototype, "unitCosts", void 0);
    __decorate([
        property([cc.Node])
    ], LoadFoodController.prototype, "unitFrames", void 0);
    LoadFoodController = __decorate([
        ccclass
    ], LoadFoodController);
    return LoadFoodController;
}(cc.Component));
exports.default = LoadFoodController;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0XFxDb250cm9sbGVyXFxMb2FkRm9vZENvbnRyb2xsZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsK0NBQThDO0FBRXhDLElBQUEsS0FBc0IsRUFBRSxDQUFDLFVBQVUsRUFBbEMsT0FBTyxhQUFBLEVBQUUsUUFBUSxjQUFpQixDQUFDO0FBRzFDO0lBQWdELHNDQUFZO0lBQTVEO1FBQUEscUVBZ0VDO1FBOURHLGFBQU8sR0FBWSxJQUFJLENBQUM7UUFFeEIsV0FBSyxHQUFhLElBQUksQ0FBQztRQUd2QixlQUFTLEdBQWUsRUFBRSxDQUFDO1FBRTNCLGdCQUFVLEdBQWMsRUFBRSxDQUFDOztJQXVEL0IsQ0FBQztJQXBEYSxrQ0FBSyxHQUFmO0lBRUEsQ0FBQztJQUdNLHlDQUFZLEdBQW5CO1FBQUEsaUJBWUM7UUFYRyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7UUFFeEIsSUFBRyxxQkFBUyxDQUFDLFdBQVc7WUFBRSxPQUFPO1FBRWpDLEVBQUUsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQzthQUNyQixFQUFFLENBQUMsR0FBRyxFQUFFLEVBQUMsTUFBTSxFQUFFLENBQUMsRUFBQyxDQUFDO2FBQ3BCLElBQUksQ0FBQztZQUNGLHFCQUFTLENBQUMsSUFBSSxJQUFJLENBQUMsQ0FBQztZQUNwQixLQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7UUFDeEIsQ0FBQyxDQUFDO2FBQ0QsS0FBSyxFQUFFLENBQUM7SUFDYixDQUFDO0lBR08sNENBQWUsR0FBdkI7UUFDSSxLQUFLLElBQUksS0FBSyxHQUFHLENBQUMsRUFBRSxLQUFLLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLEVBQUUsS0FBSyxFQUFFLEVBQUU7WUFDeEQsSUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUNwQyxJQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLE1BQU0sQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLEVBQUU7Z0JBQ2xELElBQUcsS0FBSyxLQUFLLENBQUMsRUFBRTtvQkFDWixJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDLE9BQU8sR0FBRyxHQUFHLENBQUM7b0JBQ3JDLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxHQUFHLEVBQUUsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDO2lCQUNyQztnQkFDRCxJQUFHLEtBQUssS0FBSyxDQUFDLElBQUkscUJBQVMsQ0FBQyxlQUFlLEVBQUU7b0JBQ3pDLElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUMsT0FBTyxHQUFHLEdBQUcsQ0FBQztvQkFDckMsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUM7aUJBQ3JDO2dCQUNELElBQUcsS0FBSyxLQUFLLENBQUMsSUFBSSxxQkFBUyxDQUFDLGVBQWUsRUFBRTtvQkFDekMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxPQUFPLEdBQUcsR0FBRyxDQUFDO29CQUNyQyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQztpQkFDckM7YUFDSjtpQkFBTTtnQkFDSCxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQztnQkFDaEMsSUFBRyxLQUFLLEtBQUssQ0FBQyxJQUFJLHFCQUFTLENBQUMsZUFBZTtvQkFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDLE9BQU8sR0FBRyxHQUFHLENBQUM7Z0JBQ2xGLElBQUcsS0FBSyxLQUFLLENBQUMsSUFBSSxxQkFBUyxDQUFDLGVBQWU7b0JBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxPQUFPLEdBQUcsR0FBRyxDQUFDO2dCQUNsRixJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDLE9BQU8sR0FBRyxDQUFDLENBQUM7YUFDdEM7U0FDSjtJQUNMLENBQUM7SUFHUyxtQ0FBTSxHQUFoQixVQUFpQixFQUFVO1FBQ3ZCLG9DQUFvQztRQUNwQyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUMscUJBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUUzQyxJQUFJLENBQUMsZUFBZSxFQUFFLENBQUM7SUFDM0IsQ0FBQztJQTdERDtRQURDLFFBQVEsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDO3VEQUNNO0lBRXhCO1FBREMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUM7cURBQ0k7SUFHdkI7UUFEQyxRQUFRLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUM7eURBQ007SUFFM0I7UUFEQyxRQUFRLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUM7MERBQ087SUFUVixrQkFBa0I7UUFEdEMsT0FBTztPQUNhLGtCQUFrQixDQWdFdEM7SUFBRCx5QkFBQztDQWhFRCxBQWdFQyxDQWhFK0MsRUFBRSxDQUFDLFNBQVMsR0FnRTNEO2tCQWhFb0Isa0JBQWtCIiwiZmlsZSI6IiIsInNvdXJjZVJvb3QiOiIvIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29uc3RhbnRzIH0gZnJvbSBcIi4uL0RhdGEvY29uc3RhbnRzXCI7XHJcblxyXG5jb25zdCB7Y2NjbGFzcywgcHJvcGVydHl9ID0gY2MuX2RlY29yYXRvcjtcclxuXHJcbkBjY2NsYXNzXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIExvYWRGb29kQ29udHJvbGxlciBleHRlbmRzIGNjLkNvbXBvbmVudCB7XHJcbiAgICBAcHJvcGVydHkoY2MuTm9kZSlcclxuICAgIG92ZXJsYXk6IGNjLk5vZGUgPSBudWxsO1xyXG4gICAgQHByb3BlcnR5KGNjLkxhYmVsKVxyXG4gICAgbGFiZWw6IGNjLkxhYmVsID0gbnVsbDtcclxuXHJcbiAgICBAcHJvcGVydHkoW2NjLkxhYmVsXSlcclxuICAgIHVuaXRDb3N0czogY2MuTGFiZWxbXSA9IFtdO1xyXG4gICAgQHByb3BlcnR5KFtjYy5Ob2RlXSlcclxuICAgIHVuaXRGcmFtZXM6IGNjLk5vZGVbXSA9IFtdO1xyXG5cclxuXHJcbiAgICBwcm90ZWN0ZWQgc3RhcnQoKTogdm9pZCB7XHJcblxyXG4gICAgfVxyXG5cclxuXHJcbiAgICBwdWJsaWMgaW5jcmVhc2VGb29kKCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMub3ZlcmxheS5zY2FsZVggPSAwO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGlmKENvbnN0YW50cy5pc1BhdXNlR2FtZSkgcmV0dXJuO1xyXG5cclxuICAgICAgICBjYy50d2Vlbih0aGlzLm92ZXJsYXkpXHJcbiAgICAgICAgLnRvKDEuMiwge3NjYWxlWDogMX0pXHJcbiAgICAgICAgLmNhbGwoKCkgPT4ge1xyXG4gICAgICAgICAgICBDb25zdGFudHMuZm9vZCArPSAxO1xyXG4gICAgICAgICAgICB0aGlzLmluY3JlYXNlRm9vZCgpO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLnN0YXJ0KCk7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIHByaXZhdGUgY2hlY2tFbmFibGVDb3N0KCk6IHZvaWQge1xyXG4gICAgICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCB0aGlzLnVuaXRDb3N0cy5sZW5ndGg7IGluZGV4KyspIHtcclxuICAgICAgICAgICAgY29uc3QgbGFiZWwgPSB0aGlzLnVuaXRDb3N0c1tpbmRleF07XHJcbiAgICAgICAgICAgIGlmKE51bWJlcih0aGlzLmxhYmVsLnN0cmluZykgPj0gTnVtYmVyKGxhYmVsLnN0cmluZykpIHtcclxuICAgICAgICAgICAgICAgIGlmKGluZGV4ID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy51bml0RnJhbWVzW2luZGV4XS5vcGFjaXR5ID0gMjU1O1xyXG4gICAgICAgICAgICAgICAgICAgIGxhYmVsLm5vZGUuY29sb3IgPSBjYy5Db2xvci5XSElURTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmKGluZGV4ID09PSAxICYmIENvbnN0YW50cy5pc0NhbkJ1eUFybXlMdjIpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnVuaXRGcmFtZXNbaW5kZXhdLm9wYWNpdHkgPSAyNTU7XHJcbiAgICAgICAgICAgICAgICAgICAgbGFiZWwubm9kZS5jb2xvciA9IGNjLkNvbG9yLldISVRFO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYoaW5kZXggPT09IDIgJiYgQ29uc3RhbnRzLmlzQ2FuQnV5QXJteUx2Mykge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudW5pdEZyYW1lc1tpbmRleF0ub3BhY2l0eSA9IDI1NTtcclxuICAgICAgICAgICAgICAgICAgICBsYWJlbC5ub2RlLmNvbG9yID0gY2MuQ29sb3IuV0hJVEU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBsYWJlbC5ub2RlLmNvbG9yID0gY2MuQ29sb3IuUkVEO1xyXG4gICAgICAgICAgICAgICAgaWYoaW5kZXggPT09IDEgJiYgQ29uc3RhbnRzLmlzQ2FuQnV5QXJteUx2MikgdGhpcy51bml0RnJhbWVzW2luZGV4XS5vcGFjaXR5ID0gMjU1O1xyXG4gICAgICAgICAgICAgICAgaWYoaW5kZXggPT09IDIgJiYgQ29uc3RhbnRzLmlzQ2FuQnV5QXJteUx2MykgdGhpcy51bml0RnJhbWVzW2luZGV4XS5vcGFjaXR5ID0gMjU1O1xyXG4gICAgICAgICAgICAgICAgdGhpcy51bml0RnJhbWVzW2luZGV4XS5vcGFjaXR5ID0gMDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcblxyXG4gICAgcHJvdGVjdGVkIHVwZGF0ZShkdDogbnVtYmVyKTogdm9pZCB7XHJcbiAgICAgICAgLy8gaWYoQ29uc3RhbnRzLmlzUGF1c2VHYW1lKSByZXR1cm47XHJcbiAgICAgICAgdGhpcy5sYWJlbC5zdHJpbmcgPSBTdHJpbmcoQ29uc3RhbnRzLmZvb2QpO1xyXG5cclxuICAgICAgICB0aGlzLmNoZWNrRW5hYmxlQ29zdCgpO1xyXG4gICAgfVxyXG59XHJcbiJdfQ==
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/Controller/CmoboController.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '679afIcYMtMwYaLkXHrL+XK', 'CmoboController');
// Script/Controller/CmoboController.ts

"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var constants_1 = require("../Data/constants");
var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
var ComboController = /** @class */ (function (_super) {
    __extends(ComboController, _super);
    function ComboController() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.spine_combo = null;
        return _this;
    }
    ComboController.prototype.start = function () {
    };
    ComboController.prototype.handleShowCombo = function () {
        cc.log("Cmobo Count: " + constants_1.Constants.comboCount);
        switch (constants_1.Constants.comboCount) {
            case 2:
                this.spine_combo.node.active = true;
                this.spine_combo.setSkin("Combo 2");
                this.spine_combo.setAnimation(0, "action", false);
                break;
            case 3:
                this.spine_combo.setSkin("Combo 3");
                this.spine_combo.setAnimation(0, "action", false);
                break;
            case 4:
                this.spine_combo.setSkin("Combo 4");
                this.spine_combo.setAnimation(0, "action", false);
                break;
            case 5:
                this.spine_combo.setSkin("Combo 5");
                this.spine_combo.setAnimation(0, "action", false);
                break;
            case 6:
                this.spine_combo.setSkin("Combo 6");
                this.spine_combo.setAnimation(0, "action", false);
                break;
            default:
                break;
        }
    };
    __decorate([
        property(sp.Skeleton)
    ], ComboController.prototype, "spine_combo", void 0);
    ComboController = __decorate([
        ccclass
    ], ComboController);
    return ComboController;
}(cc.Component));
exports.default = ComboController;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0XFxDb250cm9sbGVyXFxDbW9ib0NvbnRyb2xsZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBRUEsK0NBQThDO0FBRXhDLElBQUEsS0FBc0IsRUFBRSxDQUFDLFVBQVUsRUFBbEMsT0FBTyxhQUFBLEVBQUUsUUFBUSxjQUFpQixDQUFDO0FBRzFDO0lBQTZDLG1DQUFZO0lBQXpEO1FBQUEscUVBMENDO1FBdENHLGlCQUFXLEdBQWdCLElBQUksQ0FBQzs7SUFzQ3BDLENBQUM7SUFuQ0csK0JBQUssR0FBTDtJQUVBLENBQUM7SUFHTSx5Q0FBZSxHQUF0QjtRQUVJLEVBQUUsQ0FBQyxHQUFHLENBQUMsZUFBZSxHQUFHLHFCQUFTLENBQUMsVUFBVSxDQUFDLENBQUE7UUFFOUMsUUFBUSxxQkFBUyxDQUFDLFVBQVUsRUFBRTtZQUMxQixLQUFLLENBQUM7Z0JBQ0YsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQztnQkFDcEMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUM7Z0JBQ3BDLElBQUksQ0FBQyxXQUFXLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxRQUFRLEVBQUUsS0FBSyxDQUFDLENBQUM7Z0JBQ2xELE1BQU07WUFDVixLQUFLLENBQUM7Z0JBQ0YsSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUM7Z0JBQ3BDLElBQUksQ0FBQyxXQUFXLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxRQUFRLEVBQUUsS0FBSyxDQUFDLENBQUM7Z0JBQ2xELE1BQU07WUFDVixLQUFLLENBQUM7Z0JBQ0YsSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUM7Z0JBQ3BDLElBQUksQ0FBQyxXQUFXLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxRQUFRLEVBQUUsS0FBSyxDQUFDLENBQUM7Z0JBQ2xELE1BQU07WUFDVixLQUFLLENBQUM7Z0JBQ0YsSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUM7Z0JBQ3BDLElBQUksQ0FBQyxXQUFXLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxRQUFRLEVBQUUsS0FBSyxDQUFDLENBQUM7Z0JBQ2xELE1BQU07WUFDVixLQUFLLENBQUM7Z0JBQ0YsSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUM7Z0JBQ3BDLElBQUksQ0FBQyxXQUFXLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxRQUFRLEVBQUUsS0FBSyxDQUFDLENBQUM7Z0JBQ2xELE1BQU07WUFDVjtnQkFDSSxNQUFNO1NBQ2I7SUFDTCxDQUFDO0lBckNEO1FBREMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUM7d0RBQ1U7SUFKZixlQUFlO1FBRG5DLE9BQU87T0FDYSxlQUFlLENBMENuQztJQUFELHNCQUFDO0NBMUNELEFBMENDLENBMUM0QyxFQUFFLENBQUMsU0FBUyxHQTBDeEQ7a0JBMUNvQixlQUFlIiwiZmlsZSI6IiIsInNvdXJjZVJvb3QiOiIvIiwic291cmNlc0NvbnRlbnQiOlsiXHJcblxyXG5pbXBvcnQgeyBDb25zdGFudHMgfSBmcm9tIFwiLi4vRGF0YS9jb25zdGFudHNcIjtcclxuXHJcbmNvbnN0IHtjY2NsYXNzLCBwcm9wZXJ0eX0gPSBjYy5fZGVjb3JhdG9yO1xyXG5cclxuQGNjY2xhc3NcclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ29tYm9Db250cm9sbGVyIGV4dGVuZHMgY2MuQ29tcG9uZW50IHtcclxuXHJcblxyXG4gICAgQHByb3BlcnR5KHNwLlNrZWxldG9uKVxyXG4gICAgc3BpbmVfY29tYm86IHNwLlNrZWxldG9uID0gbnVsbDtcclxuXHJcblxyXG4gICAgc3RhcnQgKCkge1xyXG5cclxuICAgIH1cclxuXHJcblxyXG4gICAgcHVibGljIGhhbmRsZVNob3dDb21ibygpOiB2b2lkIHtcclxuXHJcbiAgICAgICAgY2MubG9nKFwiQ21vYm8gQ291bnQ6IFwiICsgQ29uc3RhbnRzLmNvbWJvQ291bnQpXHJcblxyXG4gICAgICAgIHN3aXRjaCAoQ29uc3RhbnRzLmNvbWJvQ291bnQpIHtcclxuICAgICAgICAgICAgY2FzZSAyOlxyXG4gICAgICAgICAgICAgICAgdGhpcy5zcGluZV9jb21iby5ub2RlLmFjdGl2ZSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNwaW5lX2NvbWJvLnNldFNraW4oXCJDb21ibyAyXCIpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zcGluZV9jb21iby5zZXRBbmltYXRpb24oMCwgXCJhY3Rpb25cIiwgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgMzpcclxuICAgICAgICAgICAgICAgIHRoaXMuc3BpbmVfY29tYm8uc2V0U2tpbihcIkNvbWJvIDNcIik7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNwaW5lX2NvbWJvLnNldEFuaW1hdGlvbigwLCBcImFjdGlvblwiLCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSA0OlxyXG4gICAgICAgICAgICAgICAgdGhpcy5zcGluZV9jb21iby5zZXRTa2luKFwiQ29tYm8gNFwiKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc3BpbmVfY29tYm8uc2V0QW5pbWF0aW9uKDAsIFwiYWN0aW9uXCIsIGZhbHNlKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIDU6XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNwaW5lX2NvbWJvLnNldFNraW4oXCJDb21ibyA1XCIpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zcGluZV9jb21iby5zZXRBbmltYXRpb24oMCwgXCJhY3Rpb25cIiwgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgNjpcclxuICAgICAgICAgICAgICAgIHRoaXMuc3BpbmVfY29tYm8uc2V0U2tpbihcIkNvbWJvIDZcIik7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNwaW5lX2NvbWJvLnNldEFuaW1hdGlvbigwLCBcImFjdGlvblwiLCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iXX0=
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/Controller/TankController.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'dce60iE4EVAx6idfxoSFJOu', 'TankController');
// Script/Controller/TankController.ts

"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var constants_1 = require("../Data/constants");
var Army_1 = require("../Other/Army");
var AudioManager_1 = require("../Plugin/AudioManager");
var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
var TankController = /** @class */ (function (_super) {
    __extends(TankController, _super);
    function TankController() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.HealthBar = null;
        _this.vFx_Booom = null;
        _this.FX_Upgrade = null;
        _this.FX_Blink = null;
        _this.TroopsPoints = [];
        _this.AudioManager = null;
        _this.spine = null;
        _this.collider = null;
        _this.skin = "";
        _this.speed = 25;
        _this.isRunning = false;
        _this.isBase = false;
        _this.isLive = true;
        _this.rigidbody = null;
        return _this;
    }
    TankController.prototype.onCollisionEnter = function (o, s) {
        var _this = this;
        // enemy collide with tank
        if (o) {
            if (o.tag === 0) {
                constants_1.Constants.isTankCanRun = false;
                this.shoot();
            }
            var armyComponent_1 = o.getComponent(Army_1.default);
            if (armyComponent_1 && constants_1.Constants.isTankCanRun && s.tag === 18) {
                constants_1.Constants.shootCount += 1;
                constants_1.Constants.isTankCanRun = false;
                this.spine.setAnimation(0, constants_1.Constants.ArmyAnim.Attack, false);
                // fx blast
                this.scheduleOnce(function () {
                    _this.node.getChildByName("Blast").getComponent(cc.Animation).play("Tank_BlastAnim");
                    _this.AudioManager.playSound(constants_1.Constants.SoundTrack.Lv2_Tank);
                    _this.shootEnemy(armyComponent_1);
                    var _loop_1 = function (index) {
                        var element = constants_1.Constants.enemyArmies[index];
                        var army = element.getComponent(Army_1.default);
                        army.isLive = false;
                        army.spine.setAnimation(0, constants_1.Constants.ArmyAnim.Die, false);
                        cc.tween(element)
                            .to(0.5, { opacity: 0 })
                            .call(function () {
                            element.active = false;
                            element.destroy();
                        })
                            .start();
                    };
                    for (var index = 0; index < constants_1.Constants.enemyArmies.length; index++) {
                        _loop_1(index);
                    }
                    constants_1.Constants.enemyArmies = [];
                }, 0.3);
            }
        }
    };
    // onCollisionStay(o: cc.PhysicsCollider, s) {
    //     Constants.isTankCanRun = false
    // }
    // onCollisionExit(o, s) {
    //     Constants.isTankCanRun = true;
    // }
    TankController.prototype.shootEnemy = function (armyComponent) {
        cc.log("shoot!!!");
        var tankPos = this.node.getPosition();
        var vFx_Booom = cc.instantiate(this.vFx_Booom);
        vFx_Booom.parent = this.node;
        vFx_Booom.setPosition(tankPos.x + 50, tankPos.y + 105);
        vFx_Booom.active = true;
        this.scheduleOnce(function () {
            vFx_Booom.active = false;
            constants_1.Constants.isTankCanRun = true;
        }, 1.5);
    };
    TankController.prototype.start = function () {
        var _this = this;
        this.AudioManager = this.node.parent.parent.parent.parent.parent.parent
            .getChildByName("AudioManager").getComponent(AudioManager_1.default);
        this.spine = this.node.getChildByName("Spine").getComponent(sp.Skeleton);
        this.collider = this.getComponent(cc.BoxCollider);
        this.collider.enabled = false;
        // active run to Base
        this.scheduleOnce(function () {
            _this.runAheadBase();
            _this.spine.setAnimation(0, constants_1.Constants.ArmyAnim.Run, true);
        }, 0.2);
        constants_1.Constants.tank_TroopPoints = this.TroopsPoints;
    };
    TankController.prototype.shoot = function () {
        var _this = this;
        this.spine.setAnimation(0, constants_1.Constants.ArmyAnim.Attack, false);
        // fx blast
        this.scheduleOnce(function () {
            _this.node.getChildByName("Blast").getComponent(cc.Animation).play("Tank_BlastAnim");
            _this.AudioManager.playSound(constants_1.Constants.SoundTrack.Lv2_Tank);
            var customEvent = new cc.Event.EventCustom('Shooting', true);
            _this.node.dispatchEvent(customEvent);
        }, 0.3);
    };
    TankController.prototype.die = function () {
        var _this = this;
        this.isLive = false;
        this.spine.timeScale = 0.3;
        this.spine.setAnimation(0, constants_1.Constants.ArmyAnim.Die, false);
        this.HealthBar.active = false;
        constants_1.Constants.isLoose = true;
        constants_1.Constants.isPauseGame = true;
        cc.tween(this.node)
            .to(1, { opacity: 0 })
            .call(function () { return _this.node.destroy(); })
            .start();
        this.node.getComponent(cc.Collider).enabled = false;
        this.node.getComponent(cc.Collider).destroy();
    };
    TankController.prototype.runAheadBase = function () {
        var currentPos = this.node.getPosition();
        this.node.x = currentPos.x + 100;
        constants_1.Constants.isCanTouch = true;
        // cc.tween(this.node)
        //     .to(3, { x: currentPos.x + 100 })
        //     .call(() => {
        //         Constants.isCanTouch = true;
        //         this.spine.setAnimation(0, Constants.ArmyAnim.Idle, true);
        //     })
        //     .start();
    };
    TankController.prototype.activeAnimRun = function () {
        if (this.isRunning)
            return;
        this.spine.node.active = true;
        this.HealthBar.parent.active = true;
        this.collider.enabled = true;
        this.updateTankPremeium();
        this.registerEvent();
        this.spine.setAnimation(0, constants_1.Constants.ArmyAnim.Run, true);
    };
    TankController.prototype.updateTankPremeium = function () {
        var currentScale = this.node.scale;
        this.FX_Upgrade.resetSystem();
        this.FX_Blink.resetSystem();
        // this.spine.node.color = cc.color(255, 204, 0 ,255);
        cc.tween(this.node)
            .to(0.5, { scale: currentScale + 0.15 }, { easing: cc.easing.elasticOut })
            .start();
    };
    TankController.prototype.registerEvent = function () {
        var customEvent = new cc.Event.EventCustom('ShowSpeedLine', true);
        this.node.dispatchEvent(customEvent);
    };
    TankController.prototype.run = function () {
        this.activeAnimRun();
        this.isRunning = true;
        var currentPos = this.node.getPosition();
        var targetPos = new cc.Vec2(currentPos.x + 25 + constants_1.Constants.Responsive.speedCalculated, currentPos.y);
        this.node.setPosition(currentPos.lerp(targetPos, 0.02, currentPos));
    };
    TankController.prototype.update = function (dt) {
        if (this.HealthBar.scaleX <= 0.05 && this.isLive)
            this.die();
        constants_1.Constants.isTankCanRun && this.run();
    };
    __decorate([
        property(cc.Node)
    ], TankController.prototype, "HealthBar", void 0);
    __decorate([
        property(cc.Prefab)
    ], TankController.prototype, "vFx_Booom", void 0);
    __decorate([
        property(cc.ParticleSystem)
    ], TankController.prototype, "FX_Upgrade", void 0);
    __decorate([
        property(cc.ParticleSystem)
    ], TankController.prototype, "FX_Blink", void 0);
    __decorate([
        property([cc.Node])
    ], TankController.prototype, "TroopsPoints", void 0);
    TankController = __decorate([
        ccclass
    ], TankController);
    return TankController;
}(cc.Component));
exports.default = TankController;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/Data/IronSource.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '49c0ang8TBDWqCvjXG1XKDi', 'IronSource');
// Script/Data/IronSource.ts

"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var constants_1 = require("../Data/constants");
var AudioManager_1 = require("../Plugin/AudioManager");
var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
var IronSource = /** @class */ (function (_super) {
    __extends(IronSource, _super);
    function IronSource() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.AudioManager = null;
        return _this;
        // protected update(dt: number): void {
        //   this.handleMuteSoundIronSource();
        // }
    }
    IronSource.prototype.handleIronSourcePlaySound = function () {
        if (constants_1.Constants.ironSource.isPlayBgSound) {
            return;
        }
        constants_1.Constants.ironSource.isPlayBgSound = true;
        if (constants_1.Constants.ironSource.SoundState) {
            this.AudioManager.playSound(constants_1.Constants.SoundTrack.bgSound);
        }
    };
    IronSource.prototype.handleMuteSoundIronSource = function () {
        constants_1.Constants.ironSource.State = parseInt(localStorage.getItem("cocosSoundState"), 10);
        if (constants_1.Constants.ironSource.State) {
            if (constants_1.Constants.ironSource.State === 1 && !constants_1.Constants.ironSource.SoundState && !constants_1.Constants.ironSource.isEndGame) {
                constants_1.Constants.ironSource.SoundState = true;
                this.AudioManager.playSound(constants_1.Constants.SoundTrack.bgSound);
            }
            if (constants_1.Constants.ironSource.State === 2 && constants_1.Constants.ironSource.SoundState) {
                constants_1.Constants.ironSource.SoundState = false;
                this.AudioManager.stopAllSound();
            }
        }
    };
    __decorate([
        property(AudioManager_1.default)
    ], IronSource.prototype, "AudioManager", void 0);
    IronSource = __decorate([
        ccclass
    ], IronSource);
    return IronSource;
}(cc.Component));
exports.default = IronSource;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0XFxEYXRhXFxJcm9uU291cmNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLCtDQUE4QztBQUM5Qyx1REFBa0Q7QUFFNUMsSUFBQSxLQUF3QixFQUFFLENBQUMsVUFBVSxFQUFuQyxPQUFPLGFBQUEsRUFBRSxRQUFRLGNBQWtCLENBQUM7QUFHNUM7SUFBd0MsOEJBQVk7SUFBcEQ7UUFBQSxxRUFvQ0M7UUFqQ0Msa0JBQVksR0FBaUIsSUFBSSxDQUFDOztRQThCbEMsdUNBQXVDO1FBQ3ZDLHNDQUFzQztRQUN0QyxJQUFJO0lBQ04sQ0FBQztJQS9CUSw4Q0FBeUIsR0FBaEM7UUFDRSxJQUFJLHFCQUFTLENBQUMsVUFBVSxDQUFDLGFBQWEsRUFBRTtZQUN0QyxPQUFPO1NBQ1I7UUFFRCxxQkFBUyxDQUFDLFVBQVUsQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDO1FBQzFDLElBQUkscUJBQVMsQ0FBQyxVQUFVLENBQUMsVUFBVSxFQUFFO1lBQ25DLElBQUksQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDLHFCQUFTLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1NBQzNEO0lBQ0gsQ0FBQztJQUdPLDhDQUF5QixHQUFqQztRQUNFLHFCQUFTLENBQUMsVUFBVSxDQUFDLEtBQUssR0FBRyxRQUFRLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFBO1FBRWxGLElBQUkscUJBQVMsQ0FBQyxVQUFVLENBQUMsS0FBSyxFQUFFO1lBQzlCLElBQUkscUJBQVMsQ0FBQyxVQUFVLENBQUMsS0FBSyxLQUFLLENBQUMsSUFBSSxDQUFDLHFCQUFTLENBQUMsVUFBVSxDQUFDLFVBQVUsSUFBSSxDQUFDLHFCQUFTLENBQUMsVUFBVSxDQUFDLFNBQVMsRUFBRTtnQkFDM0cscUJBQVMsQ0FBQyxVQUFVLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQztnQkFDdkMsSUFBSSxDQUFDLFlBQVksQ0FBQyxTQUFTLENBQUMscUJBQVMsQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUM7YUFDM0Q7WUFFRCxJQUFJLHFCQUFTLENBQUMsVUFBVSxDQUFDLEtBQUssS0FBSyxDQUFDLElBQUkscUJBQVMsQ0FBQyxVQUFVLENBQUMsVUFBVSxFQUFFO2dCQUN2RSxxQkFBUyxDQUFDLFVBQVUsQ0FBQyxVQUFVLEdBQUcsS0FBSyxDQUFDO2dCQUN4QyxJQUFJLENBQUMsWUFBWSxDQUFDLFlBQVksRUFBRSxDQUFDO2FBQ2xDO1NBQ0Y7SUFDSCxDQUFDO0lBNUJEO1FBREMsUUFBUSxDQUFDLHNCQUFZLENBQUM7b0RBQ1c7SUFIZixVQUFVO1FBRDlCLE9BQU87T0FDYSxVQUFVLENBb0M5QjtJQUFELGlCQUFDO0NBcENELEFBb0NDLENBcEN1QyxFQUFFLENBQUMsU0FBUyxHQW9DbkQ7a0JBcENvQixVQUFVIiwiZmlsZSI6IiIsInNvdXJjZVJvb3QiOiIvIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29uc3RhbnRzIH0gZnJvbSBcIi4uL0RhdGEvY29uc3RhbnRzXCI7XHJcbmltcG9ydCBBdWRpb01hbmFnZXIgZnJvbSBcIi4uL1BsdWdpbi9BdWRpb01hbmFnZXJcIjtcclxuXHJcbmNvbnN0IHsgY2NjbGFzcywgcHJvcGVydHkgfSA9IGNjLl9kZWNvcmF0b3I7XHJcblxyXG5AY2NjbGFzc1xyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBJcm9uU291cmNlIGV4dGVuZHMgY2MuQ29tcG9uZW50IHtcclxuXHJcbiAgQHByb3BlcnR5KEF1ZGlvTWFuYWdlcilcclxuICBBdWRpb01hbmFnZXI6IEF1ZGlvTWFuYWdlciA9IG51bGw7XHJcblxyXG4gIHB1YmxpYyBoYW5kbGVJcm9uU291cmNlUGxheVNvdW5kKCk6IHZvaWQge1xyXG4gICAgaWYgKENvbnN0YW50cy5pcm9uU291cmNlLmlzUGxheUJnU291bmQpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIENvbnN0YW50cy5pcm9uU291cmNlLmlzUGxheUJnU291bmQgPSB0cnVlO1xyXG4gICAgaWYgKENvbnN0YW50cy5pcm9uU291cmNlLlNvdW5kU3RhdGUpIHtcclxuICAgICAgdGhpcy5BdWRpb01hbmFnZXIucGxheVNvdW5kKENvbnN0YW50cy5Tb3VuZFRyYWNrLmJnU291bmQpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcblxyXG4gIHByaXZhdGUgaGFuZGxlTXV0ZVNvdW5kSXJvblNvdXJjZSgpOiB2b2lkIHtcclxuICAgIENvbnN0YW50cy5pcm9uU291cmNlLlN0YXRlID0gcGFyc2VJbnQobG9jYWxTdG9yYWdlLmdldEl0ZW0oXCJjb2Nvc1NvdW5kU3RhdGVcIiksIDEwKVxyXG5cclxuICAgIGlmIChDb25zdGFudHMuaXJvblNvdXJjZS5TdGF0ZSkge1xyXG4gICAgICBpZiAoQ29uc3RhbnRzLmlyb25Tb3VyY2UuU3RhdGUgPT09IDEgJiYgIUNvbnN0YW50cy5pcm9uU291cmNlLlNvdW5kU3RhdGUgJiYgIUNvbnN0YW50cy5pcm9uU291cmNlLmlzRW5kR2FtZSkge1xyXG4gICAgICAgIENvbnN0YW50cy5pcm9uU291cmNlLlNvdW5kU3RhdGUgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMuQXVkaW9NYW5hZ2VyLnBsYXlTb3VuZChDb25zdGFudHMuU291bmRUcmFjay5iZ1NvdW5kKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKENvbnN0YW50cy5pcm9uU291cmNlLlN0YXRlID09PSAyICYmIENvbnN0YW50cy5pcm9uU291cmNlLlNvdW5kU3RhdGUpIHtcclxuICAgICAgICBDb25zdGFudHMuaXJvblNvdXJjZS5Tb3VuZFN0YXRlID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5BdWRpb01hbmFnZXIuc3RvcEFsbFNvdW5kKCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8vIHByb3RlY3RlZCB1cGRhdGUoZHQ6IG51bWJlcik6IHZvaWQge1xyXG4gIC8vICAgdGhpcy5oYW5kbGVNdXRlU291bmRJcm9uU291cmNlKCk7XHJcbiAgLy8gfVxyXG59XHJcbiJdfQ==
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/Controller/BaseController.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'ff0ebeMo+dPNqttw4fwK25C', 'BaseController');
// Script/Controller/BaseController.ts

"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var constants_1 = require("../Data/constants");
var AudioManager_1 = require("../Plugin/AudioManager");
var GamePlay_1 = require("./GamePlay");
var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
var BaseController = /** @class */ (function (_super) {
    __extends(BaseController, _super);
    function BaseController() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.AudioManager = null;
        _this.GamePlay = null;
        _this.baseLose = null;
        _this.HealthBar = null;
        _this.baseSide = "";
        _this.baseLv2 = null;
        _this.rigidbody = null;
        _this.collider = null;
        _this.isUpgrade = false;
        return _this;
    }
    BaseController.prototype.start = function () {
        if (this.baseSide === "Player") {
            this.baseLv2 = this.node.getChildByName("base").getChildByName("baseLv2");
        }
    };
    BaseController.prototype.update = function (dt) {
        if (this.baseSide === "Player" && !constants_1.Constants.isHasResult) {
            if (this.HealthBar.scaleX < 0.05) {
                constants_1.Constants.isHasResult = true;
                constants_1.Constants.isPauseGame = true;
                constants_1.Constants.isLoose = true;
                this.HealthBar.active = false;
                this.baseLose.active = true;
                this.node.getChildByName("base").getChildByName("baseLv2").active = false;
                this.node.getChildByName("base").getChildByName("HealBar").active = false;
                this.GamePlay.CTA.active = true;
            }
            this.HealthBar.scaleX = constants_1.Constants.AllyBaseHeal;
        }
        if (this.baseSide === "Enemy" && !constants_1.Constants.isHasResult) {
            if (this.HealthBar.scaleX < 0.05) {
                constants_1.Constants.isHasResult = true;
                constants_1.Constants.isPauseGame = true;
                this.baseLose.active = true;
                this.HealthBar.active = false;
                this.node.getChildByName("base").getComponent(cc.Sprite).enabled = false;
                this.node.getChildByName("base").getChildByName("HealBar").active = false;
                this.GamePlay.CTA.active = true;
            }
            this.HealthBar.scaleX = constants_1.Constants.EnemyBaseHeal;
        }
        // upgradeBase
        if (this.baseSide === "Player" && constants_1.Constants.isUpgrade && !this.isUpgrade) {
            this.isUpgrade = true;
            this.node.getChildByName("base").getComponent(cc.Sprite).enabled = false;
            this.baseLv2.active = true;
        }
    };
    __decorate([
        property(AudioManager_1.default)
    ], BaseController.prototype, "AudioManager", void 0);
    __decorate([
        property(GamePlay_1.default)
    ], BaseController.prototype, "GamePlay", void 0);
    __decorate([
        property(cc.Node)
    ], BaseController.prototype, "baseLose", void 0);
    __decorate([
        property(cc.Node)
    ], BaseController.prototype, "HealthBar", void 0);
    __decorate([
        property(cc.String)
    ], BaseController.prototype, "baseSide", void 0);
    BaseController = __decorate([
        ccclass
    ], BaseController);
    return BaseController;
}(cc.Component));
exports.default = BaseController;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0XFxDb250cm9sbGVyXFxCYXNlQ29udHJvbGxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSwrQ0FBOEM7QUFDOUMsdURBQWtEO0FBQ2xELHVDQUFrQztBQUU1QixJQUFBLEtBQXdCLEVBQUUsQ0FBQyxVQUFVLEVBQW5DLE9BQU8sYUFBQSxFQUFFLFFBQVEsY0FBa0IsQ0FBQztBQUc1QztJQUE0QyxrQ0FBWTtJQUF4RDtRQUFBLHFFQStEQztRQTdERyxrQkFBWSxHQUFpQixJQUFJLENBQUM7UUFFbEMsY0FBUSxHQUFhLElBQUksQ0FBQztRQUUxQixjQUFRLEdBQVksSUFBSSxDQUFDO1FBRXpCLGVBQVMsR0FBWSxJQUFJLENBQUM7UUFFMUIsY0FBUSxHQUFXLEVBQUUsQ0FBQztRQUV0QixhQUFPLEdBQVksSUFBSSxDQUFDO1FBRXhCLGVBQVMsR0FBaUIsSUFBSSxDQUFDO1FBQy9CLGNBQVEsR0FBMEIsSUFBSSxDQUFDO1FBRXZDLGVBQVMsR0FBWSxLQUFLLENBQUM7O0lBOEMvQixDQUFDO0lBM0NhLDhCQUFLLEdBQWY7UUFDSSxJQUFJLElBQUksQ0FBQyxRQUFRLEtBQUssUUFBUSxFQUFFO1lBQzVCLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsTUFBTSxDQUFDLENBQUMsY0FBYyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1NBQzdFO0lBQ0wsQ0FBQztJQUdTLCtCQUFNLEdBQWhCLFVBQWlCLEVBQVU7UUFDdkIsSUFBSSxJQUFJLENBQUMsUUFBUSxLQUFLLFFBQVEsSUFBSSxDQUFDLHFCQUFTLENBQUMsV0FBVyxFQUFFO1lBQ3RELElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLEdBQUcsSUFBSSxFQUFFO2dCQUM5QixxQkFBUyxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUM7Z0JBQzdCLHFCQUFTLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQztnQkFDN0IscUJBQVMsQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDO2dCQUN6QixJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7Z0JBQzlCLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQztnQkFDNUIsSUFBSSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsTUFBTSxDQUFDLENBQUMsY0FBYyxDQUFDLFNBQVMsQ0FBQyxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7Z0JBQzFFLElBQUksQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQyxDQUFDLGNBQWMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDO2dCQUMxRSxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDO2FBQ25DO1lBQ0QsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLEdBQUcscUJBQVMsQ0FBQyxZQUFZLENBQUM7U0FDbEQ7UUFFRCxJQUFJLElBQUksQ0FBQyxRQUFRLEtBQUssT0FBTyxJQUFJLENBQUMscUJBQVMsQ0FBQyxXQUFXLEVBQUU7WUFDckQsSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sR0FBRyxJQUFJLEVBQUU7Z0JBQzlCLHFCQUFTLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQztnQkFDN0IscUJBQVMsQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDO2dCQUM3QixJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUM7Z0JBQzVCLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQztnQkFDOUIsSUFBSSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsTUFBTSxDQUFDLENBQUMsWUFBWSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDO2dCQUN6RSxJQUFJLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxjQUFjLENBQUMsU0FBUyxDQUFDLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQztnQkFDMUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQzthQUNuQztZQUNELElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxHQUFHLHFCQUFTLENBQUMsYUFBYSxDQUFDO1NBQ25EO1FBRUQsY0FBYztRQUNkLElBQUksSUFBSSxDQUFDLFFBQVEsS0FBSyxRQUFRLElBQUkscUJBQVMsQ0FBQyxTQUFTLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFO1lBQ3RFLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDO1lBQ3RCLElBQUksQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQyxDQUFDLFlBQVksQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQztZQUN6RSxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUM7U0FDOUI7SUFDTCxDQUFDO0lBM0REO1FBREMsUUFBUSxDQUFDLHNCQUFZLENBQUM7d0RBQ1c7SUFFbEM7UUFEQyxRQUFRLENBQUMsa0JBQVEsQ0FBQztvREFDTztJQUUxQjtRQURDLFFBQVEsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDO29EQUNPO0lBRXpCO1FBREMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUM7cURBQ1E7SUFFMUI7UUFEQyxRQUFRLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQztvREFDRTtJQVZMLGNBQWM7UUFEbEMsT0FBTztPQUNhLGNBQWMsQ0ErRGxDO0lBQUQscUJBQUM7Q0EvREQsQUErREMsQ0EvRDJDLEVBQUUsQ0FBQyxTQUFTLEdBK0R2RDtrQkEvRG9CLGNBQWMiLCJmaWxlIjoiIiwic291cmNlUm9vdCI6Ii8iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb25zdGFudHMgfSBmcm9tIFwiLi4vRGF0YS9jb25zdGFudHNcIjtcclxuaW1wb3J0IEF1ZGlvTWFuYWdlciBmcm9tIFwiLi4vUGx1Z2luL0F1ZGlvTWFuYWdlclwiO1xyXG5pbXBvcnQgR2FtZVBsYXkgZnJvbSBcIi4vR2FtZVBsYXlcIjtcclxuXHJcbmNvbnN0IHsgY2NjbGFzcywgcHJvcGVydHkgfSA9IGNjLl9kZWNvcmF0b3I7XHJcblxyXG5AY2NjbGFzc1xyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBCYXNlQ29udHJvbGxlciBleHRlbmRzIGNjLkNvbXBvbmVudCB7XHJcbiAgICBAcHJvcGVydHkoQXVkaW9NYW5hZ2VyKVxyXG4gICAgQXVkaW9NYW5hZ2VyOiBBdWRpb01hbmFnZXIgPSBudWxsO1xyXG4gICAgQHByb3BlcnR5KEdhbWVQbGF5KVxyXG4gICAgR2FtZVBsYXk6IEdhbWVQbGF5ID0gbnVsbDtcclxuICAgIEBwcm9wZXJ0eShjYy5Ob2RlKVxyXG4gICAgYmFzZUxvc2U6IGNjLk5vZGUgPSBudWxsO1xyXG4gICAgQHByb3BlcnR5KGNjLk5vZGUpXHJcbiAgICBIZWFsdGhCYXI6IGNjLk5vZGUgPSBudWxsO1xyXG4gICAgQHByb3BlcnR5KGNjLlN0cmluZylcclxuICAgIGJhc2VTaWRlOiBTdHJpbmcgPSBcIlwiO1xyXG5cclxuICAgIGJhc2VMdjI6IGNjLk5vZGUgPSBudWxsO1xyXG5cclxuICAgIHJpZ2lkYm9keTogY2MuUmlnaWRCb2R5ID0gbnVsbDtcclxuICAgIGNvbGxpZGVyOiBjYy5QaHlzaWNzQm94Q29sbGlkZXIgPSBudWxsO1xyXG5cclxuICAgIGlzVXBncmFkZTogYm9vbGVhbiA9IGZhbHNlO1xyXG5cclxuXHJcbiAgICBwcm90ZWN0ZWQgc3RhcnQoKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKHRoaXMuYmFzZVNpZGUgPT09IFwiUGxheWVyXCIpIHtcclxuICAgICAgICAgICAgdGhpcy5iYXNlTHYyID0gdGhpcy5ub2RlLmdldENoaWxkQnlOYW1lKFwiYmFzZVwiKS5nZXRDaGlsZEJ5TmFtZShcImJhc2VMdjJcIik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuXHJcbiAgICBwcm90ZWN0ZWQgdXBkYXRlKGR0OiBudW1iZXIpOiB2b2lkIHtcclxuICAgICAgICBpZiAodGhpcy5iYXNlU2lkZSA9PT0gXCJQbGF5ZXJcIiAmJiAhQ29uc3RhbnRzLmlzSGFzUmVzdWx0KSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLkhlYWx0aEJhci5zY2FsZVggPCAwLjA1KSB7XHJcbiAgICAgICAgICAgICAgICBDb25zdGFudHMuaXNIYXNSZXN1bHQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgQ29uc3RhbnRzLmlzUGF1c2VHYW1lID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIENvbnN0YW50cy5pc0xvb3NlID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIHRoaXMuSGVhbHRoQmFyLmFjdGl2ZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5iYXNlTG9zZS5hY3RpdmUgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5ub2RlLmdldENoaWxkQnlOYW1lKFwiYmFzZVwiKS5nZXRDaGlsZEJ5TmFtZShcImJhc2VMdjJcIikuYWN0aXZlID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm5vZGUuZ2V0Q2hpbGRCeU5hbWUoXCJiYXNlXCIpLmdldENoaWxkQnlOYW1lKFwiSGVhbEJhclwiKS5hY3RpdmUgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIHRoaXMuR2FtZVBsYXkuQ1RBLmFjdGl2ZSA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5IZWFsdGhCYXIuc2NhbGVYID0gQ29uc3RhbnRzLkFsbHlCYXNlSGVhbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmJhc2VTaWRlID09PSBcIkVuZW15XCIgJiYgIUNvbnN0YW50cy5pc0hhc1Jlc3VsdCkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5IZWFsdGhCYXIuc2NhbGVYIDwgMC4wNSkge1xyXG4gICAgICAgICAgICAgICAgQ29uc3RhbnRzLmlzSGFzUmVzdWx0ID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIENvbnN0YW50cy5pc1BhdXNlR2FtZSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmJhc2VMb3NlLmFjdGl2ZSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB0aGlzLkhlYWx0aEJhci5hY3RpdmUgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIHRoaXMubm9kZS5nZXRDaGlsZEJ5TmFtZShcImJhc2VcIikuZ2V0Q29tcG9uZW50KGNjLlNwcml0ZSkuZW5hYmxlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5ub2RlLmdldENoaWxkQnlOYW1lKFwiYmFzZVwiKS5nZXRDaGlsZEJ5TmFtZShcIkhlYWxCYXJcIikuYWN0aXZlID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB0aGlzLkdhbWVQbGF5LkNUQS5hY3RpdmUgPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuSGVhbHRoQmFyLnNjYWxlWCA9IENvbnN0YW50cy5FbmVteUJhc2VIZWFsO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gdXBncmFkZUJhc2VcclxuICAgICAgICBpZiAodGhpcy5iYXNlU2lkZSA9PT0gXCJQbGF5ZXJcIiAmJiBDb25zdGFudHMuaXNVcGdyYWRlICYmICF0aGlzLmlzVXBncmFkZSkge1xyXG4gICAgICAgICAgICB0aGlzLmlzVXBncmFkZSA9IHRydWU7XHJcbiAgICAgICAgICAgIHRoaXMubm9kZS5nZXRDaGlsZEJ5TmFtZShcImJhc2VcIikuZ2V0Q29tcG9uZW50KGNjLlNwcml0ZSkuZW5hYmxlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICB0aGlzLmJhc2VMdjIuYWN0aXZlID0gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG59XHJcbiJdfQ==
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/Other/Army.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'e890fnTUplJe5ZAPuR2b1Xy', 'Army');
// Script/Other/Army.ts

"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var TankController_1 = require("../Controller/TankController");
var constants_1 = require("../Data/constants");
var AudioManager_1 = require("../Plugin/AudioManager");
var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
var Army = /** @class */ (function (_super) {
    __extends(Army, _super);
    function Army() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.HealthBar = null;
        _this.AudioManager = null;
        _this.spine = null;
        _this.collider = null;
        _this.skin = "";
        _this.speed = 25;
        _this.canRun = true;
        _this.isBase = false;
        _this.isLive = true;
        _this.isAttacking = false;
        _this.isReadyToFight = false;
        _this.pauseFlag = false;
        _this.rigidbody = null;
        _this.collisionCount = 0;
        return _this;
    }
    Army_1 = Army;
    Army.prototype.start = function () {
        this.AudioManager = this.node.parent.parent.parent.parent.parent.parent
            .getChildByName("AudioManager").getComponent(AudioManager_1.default);
        this.spine = this.node.getChildByName("Spine").getComponent(sp.Skeleton);
        this.collider = this.getComponent(cc.BoxCollider);
        this.skin === "ally" && this.goToTankPoint();
    };
    Army.prototype.goToTankPoint = function () {
        var _this = this;
        var targetPoint = constants_1.Constants.tank_TroopPoints[constants_1.Constants.troopsSpawnLeftCount];
        var worldPos = targetPoint.convertToWorldSpaceAR(cc.Vec3.ZERO);
        var targetPos = this.node.parent.convertToNodeSpaceAR(worldPos);
        constants_1.Constants.troopsSpawnLeftCount -= 1;
        cc.tween(this.node)
            .to(1.5, { x: targetPos.x, y: targetPos.y })
            .call(function () {
            _this.spine.setAnimation(0, constants_1.Constants.ArmyAnim.Idle, true);
        })
            .start();
    };
    Army.prototype.onCollisionEnter = function (o, s) {
        // enemy collide with king
        if (this.skin === "enemy" && o.tag === 20) {
            this.collisionCount++;
            this.setCollisionForEnemy(o);
            this.canRun = false;
            return;
        }
        if ((o.tag === 1 || o.tag === 0 || o.tag === 2) && s.tag !== 9) {
            this.collisionCount++;
            this.skin === constants_1.Constants.ArmySkin.Ally && this.setCollisionForAlly(o);
            this.skin === constants_1.Constants.ArmySkin.Enemy && this.setCollisionForEnemy(o);
            this.canRun = false;
            return;
        }
        if (o.tag === 9) {
            this.isReadyToFight = true;
        }
        if (this.collisionCount < 0)
            this.collisionCount = 0;
    };
    Army.prototype.onCollisionStay = function (o, s) {
        if ((o.tag === 1 || o.tag === 0) && s.tag !== 9) {
            this.canRun = false;
        }
    };
    Army.prototype.onCollisionExit = function (o, s) {
        if (o.tag === 9) {
            this.isReadyToFight = false;
        }
        if (!this.isLive)
            return;
        if ((o.tag === 1 || o.tag === 0 || o.tag === 2) || (this.skin === "enemy" && o.tag === 7) && !this.isAttacking) {
            this.collisionCount--;
            if (this.collisionCount === 0) {
                this.canRun = true;
                this.spine.setAnimation(0, constants_1.Constants.ArmyAnim.Run, true);
            }
        }
        if (this.collisionCount < 0)
            this.collisionCount = 0;
    };
    Army.prototype.setCollisionForAlly = function (o) {
        // hit enemy base || enemy army
        if (o.tag === 0 || o.tag === 2) {
            this.canRun = false;
            !(this.spine.animation === "Attack") && this.spine.setAnimation(0, constants_1.Constants.ArmyAnim.Attack, true);
            // if (this.node.name === "Army_Lv2") this.AudioManager.playSound(Constants.SoundTrack.ArmyLv2HitSound);
            this.checkDoneAttackAnim(false, o);
        }
        // hit enemy base
        if (o.tag === 0) {
            // Constants.isCollideBase = true;
            this.isBase = true;
        }
    };
    Army.prototype.setCollisionForEnemy = function (o) {
        // hit ally base || ally army
        if (o.tag === 1 || o.tag === 2) {
            this.canRun = false;
            !(this.spine.animation === "Attack") && this.spine.setAnimation(0, constants_1.Constants.ArmyAnim.Attack, true);
            this.checkDoneAttackAnim(false, o);
        }
        if (o.tag === 20) {
            this.isAttacking = true;
            this.canRun = false;
            !(this.spine.animation === "Attack") && this.spine.setAnimation(0, constants_1.Constants.ArmyAnim.Attack, true);
            this.checkDoneAttackAnim(true, o);
        }
        // hit ally base
        if (o.tag === 1) {
            this.isBase = true;
        }
    };
    Army.prototype.checkDoneAttackAnim = function (isTank, o) {
        var _this = this;
        this.spine.setCompleteListener(function (trackEntry) {
            if (trackEntry.animation.name === "Attack") {
                if (o.tag !== 1) {
                    var VFx_bleed = o.node.getChildByName("Spine").getChildByName("Vfx_1").getComponent(cc.Animation);
                    VFx_bleed.play();
                }
                if (isTank) {
                    var TankComp = o.getComponent(TankController_1.default);
                    TankComp.HealthBar.scaleX -= 0.05;
                    if (_this.node.name === "Army2_Lv1") {
                        _this.AudioManager.playSound(constants_1.Constants.SoundTrack.Lv2_Kinife);
                    }
                    if (_this.node.name === "Army2_Lv2") {
                        _this.AudioManager.playSound(constants_1.Constants.SoundTrack.Lv2_Gun);
                    }
                }
                _this.isBase
                    ? _this.handleDecreaseHealthBase()
                    : _this.handleDecreaseHealthArmy();
            }
        });
    };
    Army.prototype.handleDecreaseHealthBase = function () {
        // if (this.skin === "ally" && this.node.name === "Army_Lv3") {
        //     Constants.EnemyBaseHeal -= 0.1;
        //     return;
        // }
        // if (this.node.name === "Army2_Lv3") {
        //     this.AudioManager.playSound(Constants.SoundTrack.Lv2_Tank);
        //     let spineAttackOfTank = this.node.getChildByName("Blast").getComponent(sp.Skeleton);
        //     spineAttackOfTank.node.active = true;
        //     spineAttackOfTank.setAnimation(0, "2", false);
        //     Constants.EnemyBaseHeal -= 0.2;
        //     return;
        // }
        if (this.skin === "enemy" && this.node.name === "Army2_Lv2") {
            constants_1.Constants.AllyBaseHeal -= 0.1;
            this.AudioManager.playSound(constants_1.Constants.SoundTrack.Lv2_Gun);
            return;
        }
        // if (this.skin === "ally" && this.node.name === "Army_Lv2") {
        //     this.AudioManager.playSound(Constants.SoundTrack.ArmyLv1HitSound);
        //     Constants.EnemyBaseHeal -= 0.08;
        //     return;
        // }
        // if (this.skin === "ally") {
        //     this.AudioManager.playSound(Constants.SoundTrack.ArmyLv1HitSound);
        //     Constants.EnemyBaseHeal -= 0.05;
        // }
        if (this.skin === "enemy" && this.node.name === "Army2_Lv1") {
            constants_1.Constants.AllyBaseHeal -= 0.05;
            this.AudioManager.playSound(constants_1.Constants.SoundTrack.Lv2_Kinife);
        }
    };
    Army.prototype.handleDecreaseHealthArmy = function () {
        if (this.skin === "ally") {
            // if (this.node.name === "Army_Lv3") {
            //     Constants.enemyArmies[0].getComponent(Army).HealthBar.scaleX -= 0.5;
            //     this.AudioManager.playSound(Constants.SoundTrack.ArmyLv3HitSound);
            //     return;
            // }
            if (this.node.name === "Army2_Lv3") {
                this.AudioManager.playSound(constants_1.Constants.SoundTrack.Lv2_Tank);
                var spineAttackOfTank = this.node.getChildByName("Blast").getComponent(sp.Skeleton);
                spineAttackOfTank.node.active = true;
                spineAttackOfTank.setAnimation(0, "2", false);
                constants_1.Constants.enemyArmies[0].getComponent(Army_1).HealthBar.scaleX -= 1;
                return;
            }
            if (this.node.name === "Army2_Lv2") {
                constants_1.Constants.enemyArmies[0].getComponent(Army_1).HealthBar.scaleX -= 0.5;
                this.AudioManager.playSound(constants_1.Constants.SoundTrack.Lv2_Gun);
                return;
            }
            // if (this.node.name === "Army_Lv2") {
            //     Constants.enemyArmies[0].getComponent(Army).HealthBar.scaleX -= 0.2;
            //     this.AudioManager.playSound(Constants.SoundTrack.ArmyLv1HitSound);
            //     return;
            // }
            if (this.node.name === "Army2_Lv1") {
                constants_1.Constants.enemyArmies[0].getComponent(Army_1).HealthBar.scaleX -= 0.3;
                this.AudioManager.playSound(constants_1.Constants.SoundTrack.Lv2_Kinife);
                return;
            }
            constants_1.Constants.enemyArmies[0].getComponent(Army_1).HealthBar.scaleX -= 0.3;
            this.AudioManager.playSound(constants_1.Constants.SoundTrack.Lv2_Kinife);
            return;
        }
        else {
            if (this.node.name === "Army2_Lv2") {
                constants_1.Constants.allyArmies[1].getComponent(Army_1).HealthBar.scaleX -= 0.5;
                this.AudioManager.playSound(constants_1.Constants.SoundTrack.Lv2_Gun);
                return;
            }
            if (this.node.name === "Army2_Lv1") {
                constants_1.Constants.allyArmies[1].getComponent(Army_1).HealthBar.scaleX -= 0.3;
                this.AudioManager.playSound(constants_1.Constants.SoundTrack.Lv2_Kinife);
                return;
            }
        }
    };
    Army.prototype.die = function () {
        var VFx_bleed = this.node.getChildByName("Spine").getChildByName("Vfx_1").getComponent(cc.Animation);
        VFx_bleed.play();
        this.node.getComponent(cc.Collider).enabled = false;
        this.node.getComponent(cc.Collider).destroy();
        this.node.getComponent(Army_1).enabled = false;
        // decrease the first ally/enemy in constant array;
        if (this.skin === "enemy") {
            constants_1.Constants.enemyDie += 1;
            constants_1.Constants.enemyArmies.splice(0, 1);
        }
        else {
            constants_1.Constants.allyArmies.splice(0, 1);
        }
    };
    Army.prototype.checkDie = function () {
        var _this = this;
        this.isLive = false;
        this.spine.timeScale = 0.3;
        this.spine.setAnimation(0, constants_1.Constants.ArmyAnim.Die, false);
        this.HealthBar.active = false;
        cc.tween(this.node)
            .to(1, { opacity: 0 })
            .call(function () { return _this.node.destroy(); })
            .start();
        this.die();
    };
    Army.prototype.checkRun = function () {
        if (!this.isLive)
            return;
        var firstEnemyPos = null;
        var targetPos = null;
        // if (this.skin === "ally" && this.canRun) {
        // let currentPos = this.node.getPosition();
        // this.isReadyToFight
        //     ? firstEnemyPos = this.roadToEnemyPos(currentPos, "ally")
        //     : firstEnemyPos = currentPos;
        // if (this.node.name === "Army_Lv3" || this.node.name === "Army2_Lv3") {
        //     targetPos = new cc.Vec2(currentPos.x + 25 + Constants.Responsive.speedCalculated, firstEnemyPos.y);
        //     this.node.setPosition(currentPos.lerp(targetPos, 0.02, currentPos))
        //     return;
        // }
        // if (this.node.name === "Army" || this.node.name === "Army2_Lv2"
        //     || this.node.name === "Army2_Lv1" || this.node.name === "Army_Lv2"
        // ) {
        //     targetPos = new cc.Vec2(currentPos.x + 10 + Constants.Responsive.speedCalculated, firstEnemyPos.y);
        //     this.node.setPosition(currentPos.lerp(targetPos, 0.02, currentPos))
        // }
        // }
        if (this.skin === "enemy" && this.canRun) {
            var currentPos = this.node.getPosition();
            this.isReadyToFight
                ? firstEnemyPos = this.roadToEnemyPos(currentPos, "enemy")
                : firstEnemyPos = currentPos;
            if (constants_1.Constants.isRotate) {
                targetPos = new cc.Vec2(currentPos.x - 30 - constants_1.Constants.Responsive.speedCalculated, firstEnemyPos.y);
            }
            else {
                targetPos = new cc.Vec2(currentPos.x - 20 - constants_1.Constants.Responsive.speedCalculated, firstEnemyPos.y);
            }
            this.node.setPosition(currentPos.lerp(targetPos, 0.02, currentPos));
        }
    };
    Army.prototype.roadToEnemyPos = function (currentPos, yourSide) {
        if (yourSide === "ally") {
            if (constants_1.Constants.enemyArmies[0]) {
                return constants_1.Constants.enemyArmies[0].getPosition();
            }
            else {
                return currentPos;
            }
        }
        else {
            if (constants_1.Constants.allyArmies[0]) {
                return constants_1.Constants.allyArmies[0].getPosition();
            }
            else {
                return currentPos;
            }
        }
    };
    Army.prototype.checkPause = function () {
        if (constants_1.Constants.isPauseGame) {
            this.canRun = false;
        }
        if (constants_1.Constants.isPauseGame && !this.pauseFlag) {
            this.canRun = false;
            this.collider.enabled = false;
            this.pauseFlag = true;
            this.spine.setAnimation(0, constants_1.Constants.ArmyAnim.Idle, true);
            return;
        }
        if (!constants_1.Constants.isPauseGame) {
            this.pauseFlag = false;
        }
    };
    Army.prototype.update = function (dt) {
        this.checkPause();
        if (this.HealthBar.scaleX <= 0.1 && this.isLive) {
            this.checkDie();
        }
        this.checkRun();
    };
    var Army_1;
    __decorate([
        property(cc.Node)
    ], Army.prototype, "HealthBar", void 0);
    Army = Army_1 = __decorate([
        ccclass
    ], Army);
    return Army;
}(cc.Component));
exports.default = Army;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/Data/constants.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'eaccb/69FZDu6rC4YmR+uAW', 'constants');
// Script/Data/constants.ts

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Constants = void 0;
var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
var Event;
(function (Event) {
    Event["touchStart"] = "touchstart";
    Event["touchMove"] = "touchmove";
    Event["touchEnd"] = "touchend";
    Event["touchCancel"] = "touchcancel";
})(Event || (Event = {}));
var ArmySkin;
(function (ArmySkin) {
    ArmySkin["Ally"] = "ally";
    ArmySkin["Enemy"] = "enemy";
})(ArmySkin || (ArmySkin = {}));
var ArmyAnim;
(function (ArmyAnim) {
    ArmyAnim["Attack"] = "Attack";
    ArmyAnim["Die"] = "Die";
    ArmyAnim["Hurt"] = "Hurt";
    ArmyAnim["Run"] = "Run";
    ArmyAnim["Idle"] = "Idle";
})(ArmyAnim || (ArmyAnim = {}));
var IronSource = {
    // ironsource 
    SoundState: true,
    State: 1,
    isEndGame: false,
    isPlayBgSound: false,
};
var Responsive = {
    calculatedY: 0,
    calculatedX: 0,
    currentDevice: "",
    isHor: false,
    isVer: false,
    speedCalculated: 0,
};
var SoundTrack;
(function (SoundTrack) {
    SoundTrack["bgSound"] = "bgSound";
    SoundTrack["clickSound"] = "clickSound";
    SoundTrack["buySound"] = "buySound";
    SoundTrack["coinSound"] = "coinSound";
    SoundTrack["failSound"] = "failSound";
    SoundTrack["winSound"] = "winSound";
    SoundTrack["Lv2_Kinife"] = "Lv2_Kinife";
    SoundTrack["Lv2_Gun"] = "Lv2_Gun";
    SoundTrack["Lv2_Tank"] = "Lv2_Tank";
    SoundTrack["Bg_Attack"] = "Bg_Attack";
})(SoundTrack || (SoundTrack = {}));
var Constants = /** @class */ (function () {
    function Constants() {
    }
    // state    
    Constants.isRotate = false;
    Constants.isTouch = false;
    Constants.isCanTouch = false;
    Constants.isToStore = true;
    Constants.isStartGame = false;
    Constants.isHasResult = false;
    Constants.isGainCoin = false;
    Constants.isPauseGame = false;
    Constants.isWin = false;
    Constants.isLoose = false;
    Constants.isCollideBase = false;
    Constants.isActiveCTA = false;
    Constants.isSpawnTank = false;
    Constants.isFirstShoot = false;
    Constants.isCanBuyArmyLv2 = false;
    Constants.isCanBuyArmyLv3 = false;
    Constants.isUpgrade = false;
    Constants.currentCoin = 0;
    Constants.increaseCoin = 10;
    Constants.enemyDie = 0;
    Constants.food = 15;
    Constants.EnemyBaseHeal = 1;
    Constants.AllyBaseHeal = 1;
    Constants.scaleBoss = 0.5;
    Constants.scaleArmy = 0;
    Constants.shootCount = 0;
    Constants.comboCount = 0;
    Constants.troopsSpawnLeftCount = 4;
    Constants.troopsInTankCount = 0;
    Constants.isFiveBroInTank = false;
    Constants.isTankCanRun = false;
    Constants.enemyArmies = [];
    Constants.allyArmies = [];
    Constants.tank_TroopPoints = [];
    // event
    Constants.Event = Event;
    // SoundTrack
    Constants.SoundTrack = SoundTrack;
    // ironSource
    Constants.ironSource = IronSource;
    // Responsive
    Constants.Responsive = Responsive;
    // Army Side
    Constants.ArmySkin = ArmySkin;
    // Army Anim
    Constants.ArmyAnim = ArmyAnim;
    return Constants;
}());
exports.Constants = Constants;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0XFxEYXRhXFxjb25zdGFudHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQU0sSUFBQSxLQUF3QixFQUFFLENBQUMsVUFBVSxFQUFuQyxPQUFPLGFBQUEsRUFBRSxRQUFRLGNBQWtCLENBQUM7QUFHNUMsSUFBSyxLQUtKO0FBTEQsV0FBSyxLQUFLO0lBQ04sa0NBQXlCLENBQUE7SUFDekIsZ0NBQXVCLENBQUE7SUFDdkIsOEJBQXFCLENBQUE7SUFDckIsb0NBQTJCLENBQUE7QUFDL0IsQ0FBQyxFQUxJLEtBQUssS0FBTCxLQUFLLFFBS1Q7QUFHRCxJQUFLLFFBR0o7QUFIRCxXQUFLLFFBQVE7SUFDVCx5QkFBYSxDQUFBO0lBQ2IsMkJBQWUsQ0FBQTtBQUNuQixDQUFDLEVBSEksUUFBUSxLQUFSLFFBQVEsUUFHWjtBQUdELElBQUssUUFNSjtBQU5ELFdBQUssUUFBUTtJQUNULDZCQUFpQixDQUFBO0lBQ2pCLHVCQUFXLENBQUE7SUFDWCx5QkFBYSxDQUFBO0lBQ2IsdUJBQVcsQ0FBQTtJQUNYLHlCQUFhLENBQUE7QUFDakIsQ0FBQyxFQU5JLFFBQVEsS0FBUixRQUFRLFFBTVo7QUFHRCxJQUFNLFVBQVUsR0FBRztJQUNmLGNBQWM7SUFDZCxVQUFVLEVBQUUsSUFBSTtJQUNoQixLQUFLLEVBQUUsQ0FBQztJQUNSLFNBQVMsRUFBRSxLQUFLO0lBQ2hCLGFBQWEsRUFBRSxLQUFLO0NBQ3ZCLENBQUE7QUFHRCxJQUFNLFVBQVUsR0FBRztJQUNmLFdBQVcsRUFBRSxDQUFDO0lBQ2QsV0FBVyxFQUFFLENBQUM7SUFDZCxhQUFhLEVBQUUsRUFBRTtJQUNqQixLQUFLLEVBQUUsS0FBSztJQUNaLEtBQUssRUFBRSxLQUFLO0lBQ1osZUFBZSxFQUFFLENBQUM7Q0FDckIsQ0FBQTtBQUdELElBQUssVUFXSjtBQVhELFdBQUssVUFBVTtJQUNYLGlDQUFtQixDQUFBO0lBQ25CLHVDQUF5QixDQUFBO0lBQ3pCLG1DQUFxQixDQUFBO0lBQ3JCLHFDQUF1QixDQUFBO0lBQ3ZCLHFDQUF1QixDQUFBO0lBQ3ZCLG1DQUFxQixDQUFBO0lBQ3JCLHVDQUF5QixDQUFBO0lBQ3pCLGlDQUFtQixDQUFBO0lBQ25CLG1DQUFxQixDQUFBO0lBQ3JCLHFDQUF1QixDQUFBO0FBQzNCLENBQUMsRUFYSSxVQUFVLEtBQVYsVUFBVSxRQVdkO0FBR0Q7SUFBQTtJQWtFQSxDQUFDO0lBaEVHLFlBQVk7SUFDTCxrQkFBUSxHQUFZLEtBQUssQ0FBQztJQUMxQixpQkFBTyxHQUFZLEtBQUssQ0FBQztJQUN6QixvQkFBVSxHQUFZLEtBQUssQ0FBQztJQUM1QixtQkFBUyxHQUFZLElBQUksQ0FBQztJQUMxQixxQkFBVyxHQUFZLEtBQUssQ0FBQztJQUM3QixxQkFBVyxHQUFZLEtBQUssQ0FBQztJQUM3QixvQkFBVSxHQUFZLEtBQUssQ0FBQztJQUM1QixxQkFBVyxHQUFZLEtBQUssQ0FBQztJQUM3QixlQUFLLEdBQVksS0FBSyxDQUFDO0lBQ3ZCLGlCQUFPLEdBQVksS0FBSyxDQUFDO0lBQ3pCLHVCQUFhLEdBQVksS0FBSyxDQUFDO0lBQy9CLHFCQUFXLEdBQVksS0FBSyxDQUFDO0lBQzdCLHFCQUFXLEdBQVksS0FBSyxDQUFDO0lBQzdCLHNCQUFZLEdBQVksS0FBSyxDQUFDO0lBRTlCLHlCQUFlLEdBQVksS0FBSyxDQUFDO0lBQ2pDLHlCQUFlLEdBQVksS0FBSyxDQUFDO0lBQ2pDLG1CQUFTLEdBQVksS0FBSyxDQUFDO0lBRTNCLHFCQUFXLEdBQVcsQ0FBQyxDQUFDO0lBQ3hCLHNCQUFZLEdBQVcsRUFBRSxDQUFDO0lBQzFCLGtCQUFRLEdBQVcsQ0FBQyxDQUFDO0lBQ3JCLGNBQUksR0FBVyxFQUFFLENBQUM7SUFDbEIsdUJBQWEsR0FBVyxDQUFDLENBQUM7SUFDMUIsc0JBQVksR0FBVyxDQUFDLENBQUM7SUFDekIsbUJBQVMsR0FBVyxHQUFHLENBQUM7SUFDeEIsbUJBQVMsR0FBVyxDQUFDLENBQUM7SUFDdEIsb0JBQVUsR0FBVyxDQUFDLENBQUM7SUFFdkIsb0JBQVUsR0FBVyxDQUFDLENBQUM7SUFDdkIsOEJBQW9CLEdBQVcsQ0FBQyxDQUFDO0lBQ2pDLDJCQUFpQixHQUFXLENBQUMsQ0FBQztJQUM5Qix5QkFBZSxHQUFZLEtBQUssQ0FBQztJQUNqQyxzQkFBWSxHQUFZLEtBQUssQ0FBQztJQUU5QixxQkFBVyxHQUFjLEVBQUUsQ0FBQztJQUM1QixvQkFBVSxHQUFjLEVBQUUsQ0FBQztJQUMzQiwwQkFBZ0IsR0FBYyxFQUFFLENBQUM7SUFHeEMsUUFBUTtJQUNELGVBQUssR0FBaUIsS0FBSyxDQUFDO0lBR25DLGFBQWE7SUFDTixvQkFBVSxHQUFzQixVQUFVLENBQUM7SUFHbEQsYUFBYTtJQUNOLG9CQUFVLEdBQXNCLFVBQVUsQ0FBQztJQUdsRCxhQUFhO0lBQ04sb0JBQVUsR0FBc0IsVUFBVSxDQUFDO0lBR2xELFlBQVk7SUFDTCxrQkFBUSxHQUFvQixRQUFRLENBQUM7SUFHNUMsWUFBWTtJQUNMLGtCQUFRLEdBQW9CLFFBQVEsQ0FBQztJQUVoRCxnQkFBQztDQWxFRCxBQWtFQyxJQUFBO0FBbEVZLDhCQUFTIiwiZmlsZSI6IiIsInNvdXJjZVJvb3QiOiIvIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgeyBjY2NsYXNzLCBwcm9wZXJ0eSB9ID0gY2MuX2RlY29yYXRvcjtcclxuXHJcblxyXG5lbnVtIEV2ZW50IHtcclxuICAgIHRvdWNoU3RhcnQgPSBcInRvdWNoc3RhcnRcIixcclxuICAgIHRvdWNoTW92ZSA9IFwidG91Y2htb3ZlXCIsXHJcbiAgICB0b3VjaEVuZCA9IFwidG91Y2hlbmRcIixcclxuICAgIHRvdWNoQ2FuY2VsID0gXCJ0b3VjaGNhbmNlbFwiXHJcbn1cclxuXHJcblxyXG5lbnVtIEFybXlTa2luIHtcclxuICAgIEFsbHkgPSBcImFsbHlcIixcclxuICAgIEVuZW15ID0gXCJlbmVteVwiXHJcbn1cclxuXHJcblxyXG5lbnVtIEFybXlBbmltIHtcclxuICAgIEF0dGFjayA9IFwiQXR0YWNrXCIsXHJcbiAgICBEaWUgPSBcIkRpZVwiLFxyXG4gICAgSHVydCA9IFwiSHVydFwiLFxyXG4gICAgUnVuID0gXCJSdW5cIixcclxuICAgIElkbGUgPSBcIklkbGVcIlxyXG59XHJcblxyXG5cclxuY29uc3QgSXJvblNvdXJjZSA9IHtcclxuICAgIC8vIGlyb25zb3VyY2UgXHJcbiAgICBTb3VuZFN0YXRlOiB0cnVlLFxyXG4gICAgU3RhdGU6IDEsXHJcbiAgICBpc0VuZEdhbWU6IGZhbHNlLFxyXG4gICAgaXNQbGF5QmdTb3VuZDogZmFsc2UsXHJcbn1cclxuXHJcblxyXG5jb25zdCBSZXNwb25zaXZlID0ge1xyXG4gICAgY2FsY3VsYXRlZFk6IDAsXHJcbiAgICBjYWxjdWxhdGVkWDogMCxcclxuICAgIGN1cnJlbnREZXZpY2U6IFwiXCIsXHJcbiAgICBpc0hvcjogZmFsc2UsXHJcbiAgICBpc1ZlcjogZmFsc2UsXHJcbiAgICBzcGVlZENhbGN1bGF0ZWQ6IDAsXHJcbn1cclxuXHJcblxyXG5lbnVtIFNvdW5kVHJhY2sge1xyXG4gICAgYmdTb3VuZCA9IFwiYmdTb3VuZFwiLFxyXG4gICAgY2xpY2tTb3VuZCA9IFwiY2xpY2tTb3VuZFwiLFxyXG4gICAgYnV5U291bmQgPSBcImJ1eVNvdW5kXCIsXHJcbiAgICBjb2luU291bmQgPSBcImNvaW5Tb3VuZFwiLFxyXG4gICAgZmFpbFNvdW5kID0gXCJmYWlsU291bmRcIixcclxuICAgIHdpblNvdW5kID0gXCJ3aW5Tb3VuZFwiLFxyXG4gICAgTHYyX0tpbmlmZSA9IFwiTHYyX0tpbmlmZVwiLFxyXG4gICAgTHYyX0d1biA9IFwiTHYyX0d1blwiLFxyXG4gICAgTHYyX1RhbmsgPSBcIkx2Ml9UYW5rXCIsXHJcbiAgICBCZ19BdHRhY2sgPSBcIkJnX0F0dGFja1wiXHJcbn1cclxuXHJcblxyXG5leHBvcnQgY2xhc3MgQ29uc3RhbnRzIHtcclxuXHJcbiAgICAvLyBzdGF0ZSAgICBcclxuICAgIHN0YXRpYyBpc1JvdGF0ZTogYm9vbGVhbiA9IGZhbHNlO1xyXG4gICAgc3RhdGljIGlzVG91Y2g6IGJvb2xlYW4gPSBmYWxzZTtcclxuICAgIHN0YXRpYyBpc0NhblRvdWNoOiBib29sZWFuID0gZmFsc2U7XHJcbiAgICBzdGF0aWMgaXNUb1N0b3JlOiBib29sZWFuID0gdHJ1ZTtcclxuICAgIHN0YXRpYyBpc1N0YXJ0R2FtZTogYm9vbGVhbiA9IGZhbHNlO1xyXG4gICAgc3RhdGljIGlzSGFzUmVzdWx0OiBib29sZWFuID0gZmFsc2U7XHJcbiAgICBzdGF0aWMgaXNHYWluQ29pbjogYm9vbGVhbiA9IGZhbHNlO1xyXG4gICAgc3RhdGljIGlzUGF1c2VHYW1lOiBib29sZWFuID0gZmFsc2U7XHJcbiAgICBzdGF0aWMgaXNXaW46IGJvb2xlYW4gPSBmYWxzZTtcclxuICAgIHN0YXRpYyBpc0xvb3NlOiBib29sZWFuID0gZmFsc2U7XHJcbiAgICBzdGF0aWMgaXNDb2xsaWRlQmFzZTogYm9vbGVhbiA9IGZhbHNlO1xyXG4gICAgc3RhdGljIGlzQWN0aXZlQ1RBOiBib29sZWFuID0gZmFsc2U7XHJcbiAgICBzdGF0aWMgaXNTcGF3blRhbms6IGJvb2xlYW4gPSBmYWxzZTtcclxuICAgIHN0YXRpYyBpc0ZpcnN0U2hvb3Q6IGJvb2xlYW4gPSBmYWxzZTtcclxuXHJcbiAgICBzdGF0aWMgaXNDYW5CdXlBcm15THYyOiBib29sZWFuID0gZmFsc2U7XHJcbiAgICBzdGF0aWMgaXNDYW5CdXlBcm15THYzOiBib29sZWFuID0gZmFsc2U7XHJcbiAgICBzdGF0aWMgaXNVcGdyYWRlOiBib29sZWFuID0gZmFsc2U7XHJcblxyXG4gICAgc3RhdGljIGN1cnJlbnRDb2luOiBudW1iZXIgPSAwO1xyXG4gICAgc3RhdGljIGluY3JlYXNlQ29pbjogbnVtYmVyID0gMTA7XHJcbiAgICBzdGF0aWMgZW5lbXlEaWU6IG51bWJlciA9IDA7XHJcbiAgICBzdGF0aWMgZm9vZDogbnVtYmVyID0gMTU7XHJcbiAgICBzdGF0aWMgRW5lbXlCYXNlSGVhbDogbnVtYmVyID0gMTtcclxuICAgIHN0YXRpYyBBbGx5QmFzZUhlYWw6IG51bWJlciA9IDE7XHJcbiAgICBzdGF0aWMgc2NhbGVCb3NzOiBudW1iZXIgPSAwLjU7XHJcbiAgICBzdGF0aWMgc2NhbGVBcm15OiBudW1iZXIgPSAwO1xyXG4gICAgc3RhdGljIHNob290Q291bnQ6IG51bWJlciA9IDA7XHJcblxyXG4gICAgc3RhdGljIGNvbWJvQ291bnQ6IG51bWJlciA9IDA7XHJcbiAgICBzdGF0aWMgdHJvb3BzU3Bhd25MZWZ0Q291bnQ6IG51bWJlciA9IDQ7XHJcbiAgICBzdGF0aWMgdHJvb3BzSW5UYW5rQ291bnQ6IG51bWJlciA9IDA7XHJcbiAgICBzdGF0aWMgaXNGaXZlQnJvSW5UYW5rOiBib29sZWFuID0gZmFsc2U7XHJcbiAgICBzdGF0aWMgaXNUYW5rQ2FuUnVuOiBib29sZWFuID0gZmFsc2U7XHJcblxyXG4gICAgc3RhdGljIGVuZW15QXJtaWVzOiBjYy5Ob2RlW10gPSBbXTtcclxuICAgIHN0YXRpYyBhbGx5QXJtaWVzOiBjYy5Ob2RlW10gPSBbXTtcclxuICAgIHN0YXRpYyB0YW5rX1Ryb29wUG9pbnRzOiBjYy5Ob2RlW10gPSBbXTtcclxuXHJcblxyXG4gICAgLy8gZXZlbnRcclxuICAgIHN0YXRpYyBFdmVudDogdHlwZW9mIEV2ZW50ID0gRXZlbnQ7XHJcblxyXG5cclxuICAgIC8vIFNvdW5kVHJhY2tcclxuICAgIHN0YXRpYyBTb3VuZFRyYWNrOiB0eXBlb2YgU291bmRUcmFjayA9IFNvdW5kVHJhY2s7XHJcblxyXG5cclxuICAgIC8vIGlyb25Tb3VyY2VcclxuICAgIHN0YXRpYyBpcm9uU291cmNlOiB0eXBlb2YgSXJvblNvdXJjZSA9IElyb25Tb3VyY2U7XHJcblxyXG5cclxuICAgIC8vIFJlc3BvbnNpdmVcclxuICAgIHN0YXRpYyBSZXNwb25zaXZlOiB0eXBlb2YgUmVzcG9uc2l2ZSA9IFJlc3BvbnNpdmU7XHJcblxyXG5cclxuICAgIC8vIEFybXkgU2lkZVxyXG4gICAgc3RhdGljIEFybXlTa2luOiB0eXBlb2YgQXJteVNraW4gPSBBcm15U2tpbjtcclxuXHJcblxyXG4gICAgLy8gQXJteSBBbmltXHJcbiAgICBzdGF0aWMgQXJteUFuaW06IHR5cGVvZiBBcm15QW5pbSA9IEFybXlBbmltO1xyXG5cclxufVxyXG4iXX0=
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/Controller/vFxController.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'ea71f2bo9lAG7VjMLcpHTjW', 'vFxController');
// Script/Controller/vFxController.ts

"use strict";
// Learn TypeScript:
//  - https://docs.cocos.com/creator/manual/en/scripting/typescript.html
// Learn Attribute:
//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html
// Learn life-cycle callbacks:
//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var constants_1 = require("../Data/constants");
var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
var VFxController = /** @class */ (function (_super) {
    __extends(VFxController, _super);
    function VFxController() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.vFx_Booom = null;
        _this.sp_SpeedLine = null;
        _this.enemyBase = null;
        _this.enemyBaseHealth = null;
        return _this;
    }
    VFxController.prototype.start = function () {
        // this.handleShooting();
        // this.ShowSpeedLine();
    };
    VFxController.prototype.handleShooting = function () {
        var _this = this;
        cc.log("boommmmm!!!!");
        constants_1.Constants.isPauseGame = true;
        this.enemyBase.getChildByName("nha lose").active = true;
        this.enemyBase.getChildByName("baseLv2").active = false;
        this.enemyBaseHealth.active = false;
        this.vFx_Booom.active = true;
        cc.tween(this.sp_SpeedLine.node)
            .to(0.5, { opacity: 0 })
            .start();
        this.scheduleOnce(function () {
            _this.vFx_Booom.active = false;
            constants_1.Constants.isWin = true;
        }, 1.5);
    };
    VFxController.prototype.ShowSpeedLine = function () {
        cc.log("speedUp!!!!!");
        if (!constants_1.Constants.isRotate)
            return;
        this.sp_SpeedLine.node.active = true;
        cc.tween(this.sp_SpeedLine.node)
            .to(0.5, { opacity: 255 })
            .start();
    };
    __decorate([
        property(cc.Node)
    ], VFxController.prototype, "vFx_Booom", void 0);
    __decorate([
        property(sp.Skeleton)
    ], VFxController.prototype, "sp_SpeedLine", void 0);
    __decorate([
        property(cc.Node)
    ], VFxController.prototype, "enemyBase", void 0);
    __decorate([
        property(cc.Node)
    ], VFxController.prototype, "enemyBaseHealth", void 0);
    VFxController = __decorate([
        ccclass
    ], VFxController);
    return VFxController;
}(cc.Component));
exports.default = VFxController;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0XFxDb250cm9sbGVyXFx2RnhDb250cm9sbGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSxvQkFBb0I7QUFDcEIsd0VBQXdFO0FBQ3hFLG1CQUFtQjtBQUNuQixrRkFBa0Y7QUFDbEYsOEJBQThCO0FBQzlCLGtGQUFrRjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBRWxGLCtDQUE4QztBQUV4QyxJQUFBLEtBQXNCLEVBQUUsQ0FBQyxVQUFVLEVBQWxDLE9BQU8sYUFBQSxFQUFFLFFBQVEsY0FBaUIsQ0FBQztBQUcxQztJQUEyQyxpQ0FBWTtJQUF2RDtRQUFBLHFFQXdEQztRQXJERyxlQUFTLEdBQVksSUFBSSxDQUFDO1FBRzFCLGtCQUFZLEdBQWdCLElBQUksQ0FBQztRQUdqQyxlQUFTLEdBQVksSUFBSSxDQUFDO1FBRzFCLHFCQUFlLEdBQVksSUFBSSxDQUFDOztJQTRDcEMsQ0FBQztJQTFDYSw2QkFBSyxHQUFmO1FBQ0kseUJBQXlCO1FBQ3pCLHdCQUF3QjtJQUM1QixDQUFDO0lBR00sc0NBQWMsR0FBckI7UUFBQSxpQkFzQkM7UUFyQk8sRUFBRSxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsQ0FBQztRQUV2QixxQkFBUyxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUM7UUFFN0IsSUFBSSxDQUFDLFNBQVMsQ0FBQyxjQUFjLENBQUMsVUFBVSxDQUFDLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQztRQUV4RCxJQUFJLENBQUMsU0FBUyxDQUFDLGNBQWMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDO1FBRXhELElBQUksQ0FBQyxlQUFlLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQztRQUVwQyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUM7UUFFN0IsRUFBRSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQzthQUMvQixFQUFFLENBQUMsR0FBRyxFQUFFLEVBQUMsT0FBTyxFQUFFLENBQUMsRUFBQyxDQUFDO2FBQ3JCLEtBQUssRUFBRSxDQUFDO1FBR1QsSUFBSSxDQUFDLFlBQVksQ0FBQztZQUNkLEtBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQztZQUM5QixxQkFBUyxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7UUFDM0IsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFBO0lBQ2YsQ0FBQztJQUdNLHFDQUFhLEdBQXBCO1FBQ1EsRUFBRSxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsQ0FBQztRQUV2QixJQUFHLENBQUMscUJBQVMsQ0FBQyxRQUFRO1lBQUUsT0FBTztRQUUvQixJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDO1FBRXJDLEVBQUUsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUM7YUFDL0IsRUFBRSxDQUFDLEdBQUcsRUFBRSxFQUFDLE9BQU8sRUFBRSxHQUFHLEVBQUMsQ0FBQzthQUN2QixLQUFLLEVBQUUsQ0FBQztJQUNqQixDQUFDO0lBcEREO1FBREMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUM7b0RBQ1E7SUFHMUI7UUFEQyxRQUFRLENBQUMsRUFBRSxDQUFDLFFBQVEsQ0FBQzt1REFDVztJQUdqQztRQURDLFFBQVEsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDO29EQUNRO0lBRzFCO1FBREMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUM7MERBQ2M7SUFaZixhQUFhO1FBRGpDLE9BQU87T0FDYSxhQUFhLENBd0RqQztJQUFELG9CQUFDO0NBeERELEFBd0RDLENBeEQwQyxFQUFFLENBQUMsU0FBUyxHQXdEdEQ7a0JBeERvQixhQUFhIiwiZmlsZSI6IiIsInNvdXJjZVJvb3QiOiIvIiwic291cmNlc0NvbnRlbnQiOlsiLy8gTGVhcm4gVHlwZVNjcmlwdDpcclxuLy8gIC0gaHR0cHM6Ly9kb2NzLmNvY29zLmNvbS9jcmVhdG9yL21hbnVhbC9lbi9zY3JpcHRpbmcvdHlwZXNjcmlwdC5odG1sXHJcbi8vIExlYXJuIEF0dHJpYnV0ZTpcclxuLy8gIC0gaHR0cHM6Ly9kb2NzLmNvY29zLmNvbS9jcmVhdG9yL21hbnVhbC9lbi9zY3JpcHRpbmcvcmVmZXJlbmNlL2F0dHJpYnV0ZXMuaHRtbFxyXG4vLyBMZWFybiBsaWZlLWN5Y2xlIGNhbGxiYWNrczpcclxuLy8gIC0gaHR0cHM6Ly9kb2NzLmNvY29zLmNvbS9jcmVhdG9yL21hbnVhbC9lbi9zY3JpcHRpbmcvbGlmZS1jeWNsZS1jYWxsYmFja3MuaHRtbFxyXG5cclxuaW1wb3J0IHsgQ29uc3RhbnRzIH0gZnJvbSBcIi4uL0RhdGEvY29uc3RhbnRzXCI7XHJcblxyXG5jb25zdCB7Y2NjbGFzcywgcHJvcGVydHl9ID0gY2MuX2RlY29yYXRvcjtcclxuXHJcbkBjY2NsYXNzXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFZGeENvbnRyb2xsZXIgZXh0ZW5kcyBjYy5Db21wb25lbnQge1xyXG5cclxuICAgIEBwcm9wZXJ0eShjYy5Ob2RlKVxyXG4gICAgdkZ4X0Jvb29tOiBjYy5Ob2RlID0gbnVsbDtcclxuXHJcbiAgICBAcHJvcGVydHkoc3AuU2tlbGV0b24pXHJcbiAgICBzcF9TcGVlZExpbmU6IHNwLlNrZWxldG9uID0gbnVsbDtcclxuXHJcbiAgICBAcHJvcGVydHkoY2MuTm9kZSlcclxuICAgIGVuZW15QmFzZTogY2MuTm9kZSA9IG51bGw7XHJcblxyXG4gICAgQHByb3BlcnR5KGNjLk5vZGUpXHJcbiAgICBlbmVteUJhc2VIZWFsdGg6IGNjLk5vZGUgPSBudWxsO1xyXG5cclxuICAgIHByb3RlY3RlZCBzdGFydCgpOiB2b2lkIHtcclxuICAgICAgICAvLyB0aGlzLmhhbmRsZVNob290aW5nKCk7XHJcbiAgICAgICAgLy8gdGhpcy5TaG93U3BlZWRMaW5lKCk7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIHB1YmxpYyBoYW5kbGVTaG9vdGluZygpOiB2b2lkIHtcclxuICAgICAgICAgICAgY2MubG9nKFwiYm9vbW1tbW0hISEhXCIpO1xyXG5cclxuICAgICAgICAgICAgQ29uc3RhbnRzLmlzUGF1c2VHYW1lID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuZW5lbXlCYXNlLmdldENoaWxkQnlOYW1lKFwibmhhIGxvc2VcIikuYWN0aXZlID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuZW5lbXlCYXNlLmdldENoaWxkQnlOYW1lKFwiYmFzZUx2MlwiKS5hY3RpdmUgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuZW5lbXlCYXNlSGVhbHRoLmFjdGl2ZSA9IGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgdGhpcy52RnhfQm9vb20uYWN0aXZlID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgIGNjLnR3ZWVuKHRoaXMuc3BfU3BlZWRMaW5lLm5vZGUpXHJcbiAgICAgICAgICAgIC50bygwLjUsIHtvcGFjaXR5OiAwfSlcclxuICAgICAgICAgICAgLnN0YXJ0KCk7XHJcblxyXG5cclxuICAgICAgICAgICAgdGhpcy5zY2hlZHVsZU9uY2UoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy52RnhfQm9vb20uYWN0aXZlID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICBDb25zdGFudHMuaXNXaW4gPSB0cnVlOyBcclxuICAgICAgICAgICAgfSwgMS41KVxyXG4gICAgfVxyXG5cclxuXHJcbiAgICBwdWJsaWMgU2hvd1NwZWVkTGluZSgpOiB2b2lkIHtcclxuICAgICAgICAgICAgY2MubG9nKFwic3BlZWRVcCEhISEhXCIpO1xyXG5cclxuICAgICAgICAgICAgaWYoIUNvbnN0YW50cy5pc1JvdGF0ZSkgcmV0dXJuO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5zcF9TcGVlZExpbmUubm9kZS5hY3RpdmUgPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgY2MudHdlZW4odGhpcy5zcF9TcGVlZExpbmUubm9kZSlcclxuICAgICAgICAgICAgLnRvKDAuNSwge29wYWNpdHk6IDI1NX0pXHJcbiAgICAgICAgICAgIC5zdGFydCgpO1xyXG4gICAgfVxyXG59XHJcbiJdfQ==
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/Controller/BossController.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '4c056/xdspPmoaGSWmCeGgR', 'BossController');
// Script/Controller/BossController.ts

"use strict";
// Learn TypeScript:
//  - https://docs.cocos.com/creator/manual/en/scripting/typescript.html
// Learn Attribute:
//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html
// Learn life-cycle callbacks:
//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var constants_1 = require("../Data/constants");
var AudioManager_1 = require("../Plugin/AudioManager");
var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
var BossController = /** @class */ (function (_super) {
    __extends(BossController, _super);
    function BossController() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.AudioManager = null;
        _this.blast1 = null;
        _this.blast2 = null;
        _this.blast3 = null;
        return _this;
    }
    BossController.prototype.start = function () {
        var _this = this;
        this.AudioManager.playSound(constants_1.Constants.SoundTrack.heliSound);
        this.scheduleOnce(function () {
            _this.blast1.node.active = true;
            _this.AudioManager.playSound(constants_1.Constants.SoundTrack.earthQuakeSound);
        }, 0.5);
        this.scheduleOnce(function () {
            _this.blast2.node.active = true;
            _this.AudioManager.playSound(constants_1.Constants.SoundTrack.earthQuakeSound);
        }, 0.7);
        this.scheduleOnce(function () {
            _this.blast3.node.active = true;
            _this.AudioManager.playSound(constants_1.Constants.SoundTrack.earthQuakeSound);
        }, 1);
        cc.tween(this.node)
            .to(1, { scale: constants_1.Constants.scaleBoss, x: -40, y: -30 })
            .call(function () {
            constants_1.Constants.isWin = true;
            constants_1.Constants.isPauseGame = true;
        })
            .start();
    };
    __decorate([
        property(AudioManager_1.default)
    ], BossController.prototype, "AudioManager", void 0);
    __decorate([
        property(sp.Skeleton)
    ], BossController.prototype, "blast1", void 0);
    __decorate([
        property(sp.Skeleton)
    ], BossController.prototype, "blast2", void 0);
    __decorate([
        property(sp.Skeleton)
    ], BossController.prototype, "blast3", void 0);
    BossController = __decorate([
        ccclass
    ], BossController);
    return BossController;
}(cc.Component));
exports.default = BossController;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0XFxDb250cm9sbGVyXFxCb3NzQ29udHJvbGxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsb0JBQW9CO0FBQ3BCLHdFQUF3RTtBQUN4RSxtQkFBbUI7QUFDbkIsa0ZBQWtGO0FBQ2xGLDhCQUE4QjtBQUM5QixrRkFBa0Y7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUVsRiwrQ0FBOEM7QUFDOUMsdURBQWtEO0FBRTVDLElBQUEsS0FBc0IsRUFBRSxDQUFDLFVBQVUsRUFBbEMsT0FBTyxhQUFBLEVBQUUsUUFBUSxjQUFpQixDQUFDO0FBRzFDO0lBQTRDLGtDQUFZO0lBQXhEO1FBQUEscUVBcUNDO1FBbENHLGtCQUFZLEdBQWlCLElBQUksQ0FBQztRQUdsQyxZQUFNLEdBQWdCLElBQUksQ0FBQztRQUUzQixZQUFNLEdBQWdCLElBQUksQ0FBQztRQUUzQixZQUFNLEdBQWdCLElBQUksQ0FBQzs7SUEyQi9CLENBQUM7SUF4QmEsOEJBQUssR0FBZjtRQUFBLGlCQXVCQztRQXRCRyxJQUFJLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FBQyxxQkFBUyxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUU1RCxJQUFJLENBQUMsWUFBWSxDQUFDO1lBQ2QsS0FBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQztZQUMvQixLQUFJLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FBQyxxQkFBUyxDQUFDLFVBQVUsQ0FBQyxlQUFlLENBQUMsQ0FBQztRQUN0RSxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDUixJQUFJLENBQUMsWUFBWSxDQUFDO1lBQ2QsS0FBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQztZQUMvQixLQUFJLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FBQyxxQkFBUyxDQUFDLFVBQVUsQ0FBQyxlQUFlLENBQUMsQ0FBQztRQUN0RSxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDUixJQUFJLENBQUMsWUFBWSxDQUFDO1lBQ2QsS0FBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQztZQUMvQixLQUFJLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FBQyxxQkFBUyxDQUFDLFVBQVUsQ0FBQyxlQUFlLENBQUMsQ0FBQztRQUN0RSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFFTixFQUFFLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7YUFDbEIsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFDLEtBQUssRUFBRSxxQkFBUyxDQUFDLFNBQVMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFDLENBQUM7YUFDbkQsSUFBSSxDQUFDO1lBQ0YscUJBQVMsQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDO1lBQ3ZCLHFCQUFTLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQztRQUNqQyxDQUFDLENBQUM7YUFDRCxLQUFLLEVBQUUsQ0FBQztJQUNiLENBQUM7SUFqQ0Q7UUFEQyxRQUFRLENBQUMsc0JBQVksQ0FBQzt3REFDVztJQUdsQztRQURDLFFBQVEsQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDO2tEQUNLO0lBRTNCO1FBREMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUM7a0RBQ0s7SUFFM0I7UUFEQyxRQUFRLENBQUMsRUFBRSxDQUFDLFFBQVEsQ0FBQztrREFDSztJQVZWLGNBQWM7UUFEbEMsT0FBTztPQUNhLGNBQWMsQ0FxQ2xDO0lBQUQscUJBQUM7Q0FyQ0QsQUFxQ0MsQ0FyQzJDLEVBQUUsQ0FBQyxTQUFTLEdBcUN2RDtrQkFyQ29CLGNBQWMiLCJmaWxlIjoiIiwic291cmNlUm9vdCI6Ii8iLCJzb3VyY2VzQ29udGVudCI6WyIvLyBMZWFybiBUeXBlU2NyaXB0OlxyXG4vLyAgLSBodHRwczovL2RvY3MuY29jb3MuY29tL2NyZWF0b3IvbWFudWFsL2VuL3NjcmlwdGluZy90eXBlc2NyaXB0Lmh0bWxcclxuLy8gTGVhcm4gQXR0cmlidXRlOlxyXG4vLyAgLSBodHRwczovL2RvY3MuY29jb3MuY29tL2NyZWF0b3IvbWFudWFsL2VuL3NjcmlwdGluZy9yZWZlcmVuY2UvYXR0cmlidXRlcy5odG1sXHJcbi8vIExlYXJuIGxpZmUtY3ljbGUgY2FsbGJhY2tzOlxyXG4vLyAgLSBodHRwczovL2RvY3MuY29jb3MuY29tL2NyZWF0b3IvbWFudWFsL2VuL3NjcmlwdGluZy9saWZlLWN5Y2xlLWNhbGxiYWNrcy5odG1sXHJcblxyXG5pbXBvcnQgeyBDb25zdGFudHMgfSBmcm9tIFwiLi4vRGF0YS9jb25zdGFudHNcIjtcclxuaW1wb3J0IEF1ZGlvTWFuYWdlciBmcm9tIFwiLi4vUGx1Z2luL0F1ZGlvTWFuYWdlclwiO1xyXG5cclxuY29uc3Qge2NjY2xhc3MsIHByb3BlcnR5fSA9IGNjLl9kZWNvcmF0b3I7XHJcblxyXG5AY2NjbGFzc1xyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBCb3NzQ29udHJvbGxlciBleHRlbmRzIGNjLkNvbXBvbmVudCB7XHJcblxyXG4gICAgQHByb3BlcnR5KEF1ZGlvTWFuYWdlcilcclxuICAgIEF1ZGlvTWFuYWdlcjogQXVkaW9NYW5hZ2VyID0gbnVsbDtcclxuXHJcbiAgICBAcHJvcGVydHkoc3AuU2tlbGV0b24pXHJcbiAgICBibGFzdDE6IHNwLlNrZWxldG9uID0gbnVsbDtcclxuICAgIEBwcm9wZXJ0eShzcC5Ta2VsZXRvbilcclxuICAgIGJsYXN0Mjogc3AuU2tlbGV0b24gPSBudWxsO1xyXG4gICAgQHByb3BlcnR5KHNwLlNrZWxldG9uKVxyXG4gICAgYmxhc3QzOiBzcC5Ta2VsZXRvbiA9IG51bGw7XHJcblxyXG5cclxuICAgIHByb3RlY3RlZCBzdGFydCgpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLkF1ZGlvTWFuYWdlci5wbGF5U291bmQoQ29uc3RhbnRzLlNvdW5kVHJhY2suaGVsaVNvdW5kKTtcclxuXHJcbiAgICAgICAgdGhpcy5zY2hlZHVsZU9uY2UoKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmJsYXN0MS5ub2RlLmFjdGl2ZSA9IHRydWU7XHJcbiAgICAgICAgICAgIHRoaXMuQXVkaW9NYW5hZ2VyLnBsYXlTb3VuZChDb25zdGFudHMuU291bmRUcmFjay5lYXJ0aFF1YWtlU291bmQpO1xyXG4gICAgICAgIH0sIDAuNSk7XHJcbiAgICAgICAgdGhpcy5zY2hlZHVsZU9uY2UoKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmJsYXN0Mi5ub2RlLmFjdGl2ZSA9IHRydWU7XHJcbiAgICAgICAgICAgIHRoaXMuQXVkaW9NYW5hZ2VyLnBsYXlTb3VuZChDb25zdGFudHMuU291bmRUcmFjay5lYXJ0aFF1YWtlU291bmQpO1xyXG4gICAgICAgIH0sIDAuNyk7XHJcbiAgICAgICAgdGhpcy5zY2hlZHVsZU9uY2UoKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmJsYXN0My5ub2RlLmFjdGl2ZSA9IHRydWU7XHJcbiAgICAgICAgICAgIHRoaXMuQXVkaW9NYW5hZ2VyLnBsYXlTb3VuZChDb25zdGFudHMuU291bmRUcmFjay5lYXJ0aFF1YWtlU291bmQpO1xyXG4gICAgICAgIH0sIDEpO1xyXG5cclxuICAgICAgICBjYy50d2Vlbih0aGlzLm5vZGUpXHJcbiAgICAgICAgLnRvKDEsIHtzY2FsZTogQ29uc3RhbnRzLnNjYWxlQm9zcywgeDogLTQwLCB5OiAtMzB9KVxyXG4gICAgICAgIC5jYWxsKCgpID0+IHtcclxuICAgICAgICAgICAgQ29uc3RhbnRzLmlzV2luID0gdHJ1ZTtcclxuICAgICAgICAgICAgQ29uc3RhbnRzLmlzUGF1c2VHYW1lID0gdHJ1ZTtcclxuICAgICAgICB9KVxyXG4gICAgICAgIC5zdGFydCgpO1xyXG4gICAgfVxyXG59XHJcbiJdfQ==
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/neutrinoparticles/exported_effects/Blast03.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'ba13b1+ZGRDBreFbcJxA0E+', 'Blast03');
// neutrinoparticles/exported_effects/Blast03.js

"use strict";

// 9cbfe52a-1542-4a73-9d15-7881be585e89
(function (root, factory) {
  if (typeof exports === 'object' && typeof module !== 'undefined') {
    module.exports = factory();
  } else if (typeof define === 'function' && define.amd) {
    define(['exports'], function (exports) {
      (root.NeutrinoEffect = exports)['Blast03'] = factory();
    });
  } else {
    var namespace = root.NeutrinoEffect || (root.NeutrinoEffect = {});
    namespace.__last__ = namespace['Blast03'] = factory();
  }
})(typeof self !== 'undefined' ? self : void 0, function () {
  function Blast03(ctx) {
    var Db = this;

    var ne = function ne(Ld, Bd) {
      this.Ld = Ld;
      this.Bd = Bd;

      if (this.Bd.we.pe.length > 0) {
        this.we = this.Bd.we.pe[0];
        this.Lc = [ne.prototype.Ec, ne.prototype.Fc][this.we.xe];
      } else this.we = null;
    };

    ne.prototype = {
      Ec: function Ec(fe, Ab, Xb) {
        var Gc = ctx.ib(Xb.Md);
        var Hc = Math.cos(Gc);
        var Ic = Math.sin(Gc);
        var ye = ctx.Ae(Xb.Nd[0]);
        var ze = ctx.Ae(Xb.Nd[1]);
        fe.
        /**/
        transform(ye * Hc, ye * Ic, ze * -Ic, ze * Hc, Ab[0], Ab[1]);
      },
      Fc: function Fc(fe, Ab, Xb) {
        var q = Xb.Mc;
        var z2 = 2.0 * q[2] * q[2];
        var xy = 2.0 * q[0] * q[1];
        var wz = 2.0 * q[3] * q[2];
        var ye = ctx.Ae(Xb.Nd[0]);
        var ze = ctx.Ae(Xb.Nd[1]);
        fe.
        /**/
        transform(ye * (1.0 - 2.0 * q[1] * q[1] - z2), ye * (xy + wz), ze * (wz - xy), ze * (2.0 * q[0] * q[0] + z2 - 1.0), Ab[0], Ab[1]);
      },
      Pc: function Pc(fe, Xb, ge) {
        Xb.vc(fe, -1, ge);

        if (this.we) {
          if (this.Be != null && !Xb.oc) {
            if (Xb.Od > 0.001) {
              var De = Math.floor(Xb.Qc % this.we.Rc);
              var Ee = Math.floor(Xb.Qc / this.we.Rc);
              var Ab = Xb.Ab.slice();
              var Nd = Xb.Nd.slice();

              if (!ge || ge.
              /**/
              transform(Ab, Nd)) {
                var df = Math.abs(Nd[0]);
                var ef = Math.abs(Nd[1]);

                if (df > 0.001 && ef > 0.001) {
                  fe.save();
                  this.Lc(fe, Ab, Xb);
                  fe.translate(-df * Xb.Pd[0], -ef * (1 - Xb.Pd[1]));
                  fe.globalAlpha *= Xb.Od;

                  if (Xb.gf[0] < 0.999 || Xb.gf[1] < 0.999 || Xb.gf[2] < 0.999) {
                    if (df >= 1 && ef >= 1) {
                      var Ye = df < this.Tc ? df : this.Tc;
                      var Ze = ef < this.Uc ? ef : this.Uc;
                      ctx.af(Ye, Ze);
                      ctx.bf.globalCompositeOperation = "copy";
                      ctx.bf.drawImage(this.Be.image, this.Be.x + this.Tc * De, this.Be.y + this.Uc * Ee, this.Tc, this.Uc, 0, 0, Ye, Ze);
                      ctx.bf.globalCompositeOperation = "multiply";
                      ctx.bf.fillStyle = ctx.ff(Xb.gf);
                      ctx.bf.fillRect(0, 0, Ye, Ze);
                      ctx.bf.globalCompositeOperation = "destination-atop";
                      ctx.bf.drawImage(this.Be.image, this.Be.x + this.Tc * De, this.Be.y + this.Uc * Ee, this.Tc, this.Uc, 0, 0, Ye, Ze);
                      fe.drawImage(ctx.cf, 0, 0, Ye, Ze, 0, 0, df, ef);
                    }
                  } else {
                    fe.drawImage(this.Be.image, this.Be.x + this.Tc * De, this.Be.y + this.Uc * Ee, this.Tc, this.Uc, 0, 0, df, ef);
                  }

                  fe.restore();
                }
              }
            }
          }
        }

        Xb.vc(fe, 1, ge);
      },
      Hd: function Hd(fe, ge) {
        fe.save();

        if (this.we) {
          fe.globalCompositeOperation = this.Ld.materials[this.Ld.
          /**/
          model.renderStyles[this.we.renderStyleIndex].materialIndex];
          this.Be = this.Ld.textureDescs[this.Ld.
          /**/
          model.renderStyles[this.we.renderStyleIndex].textureIndices[0]];
        } else {
          this.Be = null;
        }

        if (this.Be) {
          this.Tc = this.Be.width / this.we.Rc;
          this.Uc = this.Be.height / this.we.Sc;
        }

        function kd(a, b) {
          if (a.Ab[2] > b.Ab[2]) return 1;
          if (a.Ab[2] < b.Ab[2]) return -1;
          return 0;
        }

        switch (this.Bd.Vc) {
          case 0:
            for (var Wb = 0; Wb < this.Bd.tc.length; ++Wb) {
              this.Pc(fe, this.Bd.tc[Wb], ge);
            }

            break;

          case 1:
            for (var Wb = this.Bd.tc.length; Wb-- > 0;) {
              this.Pc(fe, this.Bd.tc[Wb], ge);
            }

            break;

          case 2:
            this.Bd.tc.sort(kd);

            for (var Wb = 0; Wb < this.Bd.tc.length; ++Wb) {
              this.Pc(fe, this.Bd.tc[Wb], ge);
            }

            break;
        }

        fe.restore();
      }
    };

    var oe = function oe(Ld, Bd) {
      this.Ld = Ld;
      this.Bd = Bd;
      if (this.Bd.we.pe.length > 0) this.we = this.Bd.we.pe[0];else this.we = null;
      this.vertex = [{
        /**/
        position: [0.0, 0.0, 0.0],

        /**/
        color: [0, 0, 0, 0],

        /**/
        texCoords: [[0.0, 0.0]]
      }, {
        /**/
        position: [0.0, 0.0, 0.0],

        /**/
        color: [0, 0, 0, 0],

        /**/
        texCoords: [[0.0, 0.0]]
      }, {
        /**/
        position: [0.0, 0.0, 0.0],

        /**/
        color: [0, 0, 0, 0],

        /**/
        texCoords: [[0.0, 0.0]]
      }, {
        /**/
        position: [0.0, 0.0, 0.0],

        /**/
        color: [0, 0, 0, 0],

        /**/
        texCoords: [[0.0, 0.0]]
      }];
    };

    oe.prototype = {
      qe: function qe(Xb, se, re, te, renderBuffer) {
        Xb.Ce(-1, se, re, te, renderBuffer);

        if (this.we) {
          if (!Xb.oc) {
            var v0 = this.vertex[0];
            var v1 = this.vertex[1];
            var v2 = this.vertex[2];
            var v3 = this.vertex[3];
            var Fe = [],
                Ge = [];

            if (this.we.xe == 0) {
              var a = ctx.ib(Xb.Md);
              var s = -Math.sin(a);
              var c = Math.cos(a);
              Fe[0] = se[0] * c + re[0] * s;
              Fe[1] = se[1] * c + re[1] * s;
              Fe[2] = se[2] * c + re[2] * s;
              Ge[0] = -se[0] * s + re[0] * c;
              Ge[1] = -se[1] * s + re[1] * c;
              Ge[2] = -se[2] * s + re[2] * c;
            } else {
              var q = Xb.Mc;
              var z2 = 2.0 * q[2] * q[2];
              var xy = 2.0 * q[0] * q[1];
              var wz = 2.0 * q[3] * q[2];
              Fe[0] = 1.0 - 2.0 * q[1] * q[1] - z2;
              Fe[1] = xy + wz;
              Fe[2] = 2.0 * q[0] * q[2] - 2.0 * q[3] * q[1];
              Ge[0] = xy - wz;
              Ge[1] = 1.0 - 2.0 * q[0] * q[0] - z2;
              Ge[2] = 2.0 * q[1] * q[2] + 2.0 * q[3] * q[0];
            }

            var He = [],
                Ie = [],
                Je = [],
                Ke = [];
            ctx.u(He, Fe, -Xb.Nd[0] * Xb.Pd[0]);
            ctx.u(Ie, Fe, Xb.Nd[0] * (1.0 - Xb.Pd[0]));
            ctx.u(Je, Ge, -Xb.Nd[1] * Xb.Pd[1]);
            ctx.u(Ke, Ge, Xb.Nd[1] * (1.0 - Xb.Pd[1]));
            ctx.c(v0.
            /**/
            position, He, Je);
            ctx.c(v0.
            /**/
            position, v0.
            /**/
            position, Xb.Ab);
            ctx.c(v1.
            /**/
            position, He, Ke);
            ctx.c(v1.
            /**/
            position, v1.
            /**/
            position, Xb.Ab);
            ctx.c(v2.
            /**/
            position, Ie, Ke);
            ctx.c(v2.
            /**/
            position, v2.
            /**/
            position, Xb.Ab);
            ctx.c(v3.
            /**/
            position, Ie, Je);
            ctx.c(v3.
            /**/
            position, v3.
            /**/
            position, Xb.Ab);
            {
              var rgb = ctx.v(Xb.gf, 255);
              v0.
              /**/
              color = v1.
              /**/
              color = v2.
              /**/
              color = v3.
              /**/
              color = [rgb[0], rgb[1], rgb[2], Xb.Od * 255];
            }
            {
              var De = Math.floor(Xb.Qc % this.we.Rc);
              var Ee = Math.floor(Xb.Qc / this.we.Rc);
              var Pe, Qe, Re, Se;
              var We = this.Ld.texturesRemap[this.Ld.
              /**/
              model.renderStyles[this.we.renderStyleIndex].textureIndices[0]];

              if (We) {
                var Ue = We.width / this.we.Rc;
                var Ve = We.height / this.we.Sc;
                var Pe = We.x + De * Ue;
                var Qe = Pe + Ue;
                var Re = We.y + We.height - Ee * Ve;
                var Se = Re - Ve;
              } else {
                var Ue = 1.0 / this.we.Rc;
                var Ve = 1.0 / this.we.Sc;
                var Pe = De * Ue;
                var Qe = Pe + Ue;
                var Re = 1.0 - Ee * Ve;
                var Se = Re - Ve;
              }

              v0.
              /**/
              texCoords[0] = [Pe, Se];
              v1.
              /**/
              texCoords[0] = [Pe, Re];
              v2.
              /**/
              texCoords[0] = [Qe, Re];
              v3.
              /**/
              texCoords[0] = [Qe, Se];
            }

            if (renderBuffer.beforeQuad) {
              renderBuffer.beforeQuad(this.we.renderStyleIndex);
            }

            renderBuffer.pushVertex(v0);
            renderBuffer.pushVertex(v1);
            renderBuffer.pushVertex(v2);
            renderBuffer.pushVertex(v3);

            if (!renderBuffer.__lastRenderCall) {
              renderBuffer.__lastRenderCall = new ctx.RenderCall(0, 6, this.we.renderStyleIndex);
            } else {
              var lastRenderCall = renderBuffer.__lastRenderCall;

              if (lastRenderCall.renderStyleIndex == this.we.renderStyleIndex) {
                lastRenderCall.numIndices += 6;
              } else {
                renderBuffer.pushRenderCall(lastRenderCall);
                renderBuffer.__lastRenderCall = new ctx.RenderCall(lastRenderCall.startIndex + lastRenderCall.numIndices, 6, this.we.renderStyleIndex);
              }
            }
          }
        }

        Xb.Ce(1, se, re, te, renderBuffer);
      },
      ue: function ue(se, re, te, renderBuffer) {
        switch (this.Bd.Vc) {
          case 0:
            for (var Wb = 0; Wb < this.Bd.tc.length; ++Wb) {
              this.qe(this.Bd.tc[Wb], se, re, te, renderBuffer);
            }

            break;

          case 1:
            for (var Wb = this.Bd.tc.length; Wb-- > 0;) {
              this.qe(this.Bd.tc[Wb], se, re, te, renderBuffer);
            }

            break;

          case 2:
            this.Bd.tc.forEach(function (Xb) {
              Xb.depth = ctx.H(te, Xb.Ab);
            });
            this.Bd.tc.sort(function (a, b) {
              if (a.depth < b.depth) return 1;
              if (a.depth > b.depth) return -1;
              return 0;
            });
            this.Bd.tc.forEach(function (Xb) {
              this.qe(Xb, se, re, te, renderBuffer);
            }, this);
            break;
        }
      }
    };

    var ld = function ld(Ld, we, ve) {
      var Vb = this;
      this.Ld = Ld;
      this.we = we; // Eb

      function Eb() {
        this.Fb = 0;
        this.Gb = 1;
        this.Hb = null;
        this.Ib = null;
        this.Kb = 0;
        this.Lb = 1;
        Vb.we.Mb(this); // IMPL

        this.Nb = function () {
          this.Ob = this.Gb;
          this.Fb = 0;
        };

        this.Nb();
      }

      Eb.prototype = {
        Jd: function Jd() {
          this.Nb();
        },
        Id: function Id(Qb, Ab, Mc) {
          Vb.we.Pb(Qb, Vb, this); // IMPL

          var Rb = Vb.Rb;
          var systemTime = Ld.Rb;
          var Sb = Qb;
          var ic = 0;

          if (this.zb > 0.000001) {
            var Tb = this.Ob + Qb * this.zb;

            while (Tb >= 1.0) {
              var Ub = this.zb < 0.001 ? 0.0 : (1.0 - this.Ob) / this.zb;
              Sb -= Ub;
              Rb += Ub;
              systemTime += Ub;

              if (this.Hb != null && Rb > this.Hb) {
                Vb.disactivate();
                break;
              }

              Vb.Rb = Rb;
              Ld.Rb = systemTime;
              if (Ab && Qb > 0) ctx.ab(Vb.Ab, Ab, Vb.Bb, Sb / Qb);
              if (Mc && Qb > 0) ctx.slerpq(Vb.Mc, Mc, Vb.prevRotation, Sb / Qb); // for the future when Jb would be external

              this.Lb = this.Jb;

              for (var Wb = 0; Wb < this.Jb; ++Wb) {
                if (Vb.sc.length == 0) break;
                if (this.Jb == 1) this.Kb = 0;else this.Kb = Wb / (this.Jb - 1);
                var Xb = Vb.sc.pop();
                Vb.tc.unshift(Xb);
                if (Wb == 0) Xb.Yb();else Xb.Zb();
                Xb.Id(Sb);
                ++ic;
              }

              this.Ob = 0.0;
              Tb -= 1.0;

              if (this.Ib != null && ++this.Fb >= this.Ib) {
                Vb.disactivate();
                break;
              }
            }

            this.Ob = Tb;
          }

          Rb += Sb;
          Vb.Rb = Rb;
          if (Ab) ctx.T(Vb.Ab, Ab);
          if (Mc) ctx.U(Vb.Mc, Mc);
          return ic;
        }
      }; // ac

      function ac() {
        this.Gb = 1;
        this.Kb = 0;
        this.Lb = 1;
        Vb.we.Mb(this); // IMPL

        this.Nb = function () {
          this.bc = this.Gb;
        };

        this.Nb();
      }

      ac.prototype = {
        Jd: function Jd() {
          this.Nb();
        },
        Id: function Id(Qb, Ab, Mc) {
          Vb.we.Pb(Qb, Vb, this); // IMPL

          var cc = Vb.Rb;
          var dc = cc + Qb;
          var systemTimeBeforeFrame = Ld.Rb;
          var systemTimeAfterFrame = systemTimeBeforeFrame + Qb;
          var ec = Ab ? ctx.O(ctx.h(Ab, Vb.Bb)) : 0;
          var ic = 0;

          if (ec > 0.000001) {
            var fc = ec / this.rd;
            var Tb = this.bc + fc;
            var hc = fc < 0.001 ? 1.0 - this.bc : (1.0 - this.bc) / fc;
            var jc = [];

            while (Tb > 1.0) {
              var kc = cc + hc * Qb;
              if (Ab) ctx.ab(jc, Vb.Bb, Ab, hc);
              Vb.Rb = kc;
              ctx.T(Vb.Ab, jc);
              Ld.Rb = ctx.X(systemTimeBeforeFrame, systemTimeAfterFrame, hc); // for the future when Jb would be external

              this.Lb = this.Jb;

              for (var Wb = 0; Wb < this.Jb; ++Wb) {
                if (Vb.sc.length == 0) break;
                if (this.Jb == 1) this.Kb = 0;else this.Kb = Wb / (this.Jb - 1);
                var Xb = Vb.sc.pop();
                Vb.tc.unshift(Xb);
                if (Wb == 0) Xb.Yb();else Xb.Zb();
                Xb.Id(Qb * (1.0 - hc));
                ++ic;
              }

              hc += 1.0 / fc;
              Tb -= 1.0;
            }

            this.bc = Tb;
          }

          Vb.Rb = dc;
          if (Ab) ctx.T(Vb.Ab, Ab);
          if (Mc) ctx.U(Vb.Mc, Mc);
          return ic;
        }
      }; // mc

      function mc() {
        this.Ab = [];
        this.Pd = [];
        this.Nd = [];
        this.gf = [];
        this.Kc = [];
      }

      mc.prototype = {
        nc: function nc() {
          this.oc = false;

          for (var i = 0; i < this.Kc.length; ++i) {
            var pc = this.Kc[i];
            pc.Bd.Jd(this.Ab, null);
            if (pc.Ad.sd) pc.Bd.disactivate();
          }
        },
        Yb: function Yb() {
          Vb.we.fd(Vb, this); // IMPL

          this.nc();
        },
        Zb: function Zb() {
          Vb.we.gd(Vb, this); // IMPL

          this.nc();
        },
        Id: function Id(Qb) {
          Vb.we.qc(Qb, Vb, this); // IMPL

          this.rc(Qb);
        },
        pc: function pc(je) {
          return this.Kc[je].Bd;
        },
        rc: function rc(Qb) {
          for (var i = 0; i < this.Kc.length; i++) {
            this.Kc[i].Bd.Id(Qb, this.Ab, null);
          }
        },
        uc: function uc(md, nd) {
          this.Kc.push({
            Bd: new ld(Ld, md, ve),
            Ad: nd
          });
        },
        vc: function vc(fe, xc, ge) {
          for (var i = 0; i < this.Kc.length; ++i) {
            var pc = this.Kc[i];
            if (xc == pc.Ad.xc) pc.Bd.Hd(fe, ge);
          }
        },
        Ce: function Ce(xc, se, re, te, renderBuffer) {
          for (var i = 0; i < this.Kc.length; ++i) {
            var pc = this.Kc[i];
            if (xc == pc.Ad.xc) pc.Bd.ue(se, re, te, renderBuffer);
          }
        },
        wc: function wc(fe) {
          this.oc = true;

          for (var i = 0; i < this.Kc.length; ++i) {
            var pc = this.Kc[i];

            if (pc.Ad.sd) {
              pc.Bd.activate();
              pc.Bd.Id(0);
            } else pc.Bd.disactivate();
          }
        },
        yc: function yc(Gd) {
          for (var i = 0; i < this.Kc.length; ++i) {
            this.Kc[i].Bd.Ed(Gd);
          }
        }
      }; // zc

      function zc() {}

      zc.prototype.Ac = function (Xb) {
        return Vb.we.Cc(Vb, Xb, this); // IMPL
      }; // ld Ad


      this.Ab = [];
      this.Bb = [];
      this.Mc = [];
      this.prevRotation = [];
      this.tc = [];
      this.sc = [];
      this.Wc = new zc();
      this.construct = new ve(this.Ld, this);
      this.Yc = [];
      this.ad = [];

      this.dd = function () {
        this.vd = new Eb();
      };

      this.ed = function () {
        this.vd = new ac();
      };

      this.we.ud(this); // IMPL

      for (var Wb = 0; Wb < this.jd; ++Wb) {
        var Xb = new mc();

        for (var id = 0; id < this.Yc.length; ++id) {
          var hd = this.Yc[id];
          Xb.uc(hd.Db, hd.Ad);
        }

        this.sc.push(Xb);
      }

      this.Nb = function (Ab, Mc) {
        ctx.T(this.Ab, Ab ? Ab : [0, 0, 0]);
        ctx.T(this.Bb, this.Ab);
        ctx.U(this.Mc, Mc ? Mc : [0, 0, 0, 1]);
        ctx.U(this.prevRotation, this.Mc);
        this.Rb = 0.0;
        this.wd = 0.0;
        this.Zc = true;
        this.paused_ = false;
        this.generatorsPaused_ = false;
        ctx.W(this.ad, 0, 0, 0);
      };
    };

    ld.prototype.Jd = function (Ab, Mc) {
      this.Nb(Ab, Mc);
      this.sc.push.apply(this.sc, this.tc);
      this.tc.length = 0;
      this.vd.Jd();
    };

    ld.prototype.Id = function (Qb, Ab, Mc) {
      if (this.paused_) {
        this.Td(Ab, Mc);
        return;
      }

      this.wd = this.Rb;

      if (Ab) {
        ctx.T(this.Bb, this.Ab);

        if (Qb > 0.0001) {
          var shift = [];
          ctx.g(shift, Ab, this.Bb);
          ctx.T(this.ad, shift);
          ctx.w(this.ad, this.ad, Qb);
        } else {
          ctx.W(this.ad, 0, 0, 0);
        }
      } else {
        ctx.W(this.ad, 0, 0, 0);
      }

      if (Mc) {
        ctx.U(this.prevRotation, this.Mc);
      }

      var ic;

      if (this.Zc && !this.generatorsPaused_) {
        ic = this.vd.Id(Qb, Ab, Mc);
      } else {
        if (Ab) ctx.T(this.Ab, Ab);
        if (Mc) ctx.U(this.Mc, Mc);
        ic = 0;
        this.Rb += Qb;
      }

      for (var Wb = ic; Wb < this.tc.length;) {
        var Xb = this.tc[Wb];

        if (!Xb.oc) {
          Xb.Id(Qb);

          if (this.Wc.Ac(this.tc[Wb])) {
            Xb.wc();
            if (this.xd(Wb)) continue;
          }
        } else {
          Xb.rc(Qb);
          if (this.xd(Wb)) continue;
        }

        ++Wb;
      }
    };

    ld.prototype.xd = function (je) {
      var Xb = this.tc[je];
      var ready = true;

      for (var id = 0; id < Xb.Kc.length; ++id) {
        var Bd = Xb.Kc[id].Bd;

        if (Bd.activated() || Bd.tc.length > 0) {
          ready = false;
          break;
        }
      }

      if (ready) {
        this.sc.push(this.tc[je]);
        this.tc.splice(je, 1);
        return true;
      }

      return false;
    };

    ld.prototype.Hd = function (fe, ge) {
      this.construct.Hd(fe, ge);
    };

    ld.prototype.ue = function (se, re, te, renderBuffer) {
      this.construct.ue(se, re, te, renderBuffer);
    };

    ld.prototype.Td = function (Ab, Mc) {
      this.wd = this.Rb;

      if (Ab) {
        ctx.T(this.Bb, this.Ab);
        ctx.T(this.Ab, Ab);
      }

      if (Mc) {
        ctx.U(this.prevRotation, this.Mc);
        ctx.U(this.Mc, Mc);
      }
    };

    ld.prototype.uc = function (md, nd) {
      this.Yc.push({
        Db: md,
        Ad: nd
      });
    };

    ld.prototype.
    /**/
    pause = function () {
      this.paused_ = true;
    };

    ld.prototype.
    /**/
    unpause = function () {
      this.paused_ = false;
    };

    ld.prototype.
    /**/
    paused = function () {
      return this.paused_;
    };

    ld.prototype.
    /**/
    pauseGenerators = function () {
      this.generatorsPaused_ = true;
    };

    ld.prototype.
    /**/
    unpauseGenerators = function () {
      this.generatorsPaused_ = false;
    };

    ld.prototype.
    /**/
    generatorsPaused = function () {
      return this.generatorsPaused_;
    };

    ld.prototype.activate = function () {
      this.Zc = true;
    };

    ld.prototype.disactivate = function () {
      this.Zc = false;
    };

    ld.prototype.activated = function () {
      return this.Zc;
    };

    ld.prototype.
    /**/
    getNumParticles = function () {
      return this.tc.length;
    };

    var ke = function ke() {
      var Cb = this;

      this._init = function (we, Ab, Mc, ve, options) {
        this.
        /**/
        model = we;
        this.Ab = [];
        this.Mc = []; // ke Ad

        this.od = [];

        this.pd = function (md) {
          var Bd = new ld(this, md, ve);
          Bd.Nb(this.Ab, this.Mc);
          this["_".concat(md.name)] = Bd;
          this.od.push(Bd);
        };

        this.Nb = function (Ab, Mc) {
          this.Cd = 0.0;
          this.Rb = 0.0;
          ctx.T(this.Ab, Ab ? Ab : [0, 0, 0]);
          ctx.U(this.Mc, Mc ? Mc : [0, 0, 0, 1]);
        };

        this.Nb(Ab, Mc);
        this.
        /**/
        model.qd(this); // IMPL

        this._presimNeeded = true;

        if (options.generatorsPaused) {
          this.
          /**/
          pauseGeneratorsInAllEmitters();
        }

        if (options.paused) {
          this.
          /**/
          pauseAllEmitters();
        } else {
          this.zeroUpdate();
          this.updateFixed(this.Ud, Ab, Mc, this.presimFrameTime);
          this._presimNeeded = false;
        }
      };
    };

    ke.prototype.
    /**/
    restart = function (
    /**/
    position,
    /**/
    rotation,
    /**/
    options) {
      this.Nb(
      /**/
      position ?
      /**/
      position : this.Ab,
      /**/
      rotation ?
      /**/
      rotation : this.Mc);
      this._presimNeeded = true;

      for (var i = 0; i < this.od.length; ++i) {
        this.od[i].Jd(this.Ab, this.Mc);
      }

      this._presimNeeded = true;

      if (options && options.generatorsPaused) {
        this.
        /**/
        pauseGeneratorsInAllEmitters();
      }

      if (options && options.paused) {
        this.
        /**/
        pauseAllEmitters();
      } else {
        this.zeroUpdate();
        this.updateFixed(this.Ud, this.Ab, this.Mc, this.presimFrameTime);
        this._presimNeeded = false;
      }
    };

    ke.prototype.zeroUpdate = function () {
      for (var i = 0; i < this.od.length; ++i) {
        this.od[i].Id(0, this.Ab, this.Mc);
      }
    };

    ke.prototype.
    /**/
    update = function (
    /**/
    dt,
    /**/
    position,
    /**/
    rotation) {
      if (this.Dd > 0.0) this.updateFixed(
      /**/
      dt,
      /**/
      position,
      /**/
      rotation, this.Dd);else this.updateFlex(
      /**/
      dt,
      /**/
      position,
      /**/
      rotation);
    };

    ke.prototype.updateFixed = function (
    /**/
    dt,
    /**/
    position,
    /**/
    rotation,
    /**/
    frameTime) {
      var updatedTime = 0.0;
      var hc = [];
      ctx.T(hc, this.Ab);
      var frameRotation = [];
      ctx.U(frameRotation, this.Mc);
      if (
      /**/
      position && ctx.equalv3_(
      /**/
      position, this.Ab))
        /**/
        position = null;
      if (
      /**/
      rotation && ctx.equalq_(
      /**/
      rotation, this.Mc))
        /**/
        rotation = null;

      while (
      /**/
      dt - updatedTime + this.Cd >=
      /**/
      frameTime) {
        var cc = this.Rb;
        if (
        /**/
        position) ctx.ab(hc, this.Ab,
        /**/
        position, updatedTime /
        /**/
        dt);
        if (
        /**/
        rotation) ctx.slerpq(frameRotation, this.Mc,
        /**/
        rotation, updatedTime /
        /**/
        dt);

        for (var i = 0; i < this.od.length; ++i) {
          this.od[i].Id(
          /**/
          frameTime, hc, frameRotation);
          this.Rb = cc;
        }

        updatedTime +=
        /**/
        frameTime - this.Cd;
        this.Cd = 0.0;
        this.Rb = cc +
        /**/
        frameTime;
      }

      if (
      /**/
      position) ctx.T(this.Ab,
      /**/
      position);
      if (
      /**/
      rotation) ctx.U(this.Mc,
      /**/
      rotation);
      this.Cd +=
      /**/
      dt - updatedTime;
    };

    ke.prototype.updateFlex = function (
    /**/
    dt,
    /**/
    position,
    /**/
    rotation) {
      var cc = this.Rb;

      for (var i = 0; i < this.od.length; ++i) {
        this.od[i].Id(
        /**/
        dt,
        /**/
        position,
        /**/
        rotation);
        this.Rb = cc;
      }

      this.Rb = cc +
      /**/
      dt;
      if (
      /**/
      position) ctx.T(this.Ab,
      /**/
      position);
      if (
      /**/
      rotation) ctx.U(this.Mc,
      /**/
      rotation);
    };

    ke.prototype.
    /**/
    resetPosition = function (
    /**/
    position,
    /**/
    rotation) {
      if (
      /**/
      position) ctx.T(this.Ab,
      /**/
      position);
      if (
      /**/
      rotation) ctx.U(this.Mc,
      /**/
      rotation);

      for (var i = 0; i < this.od.length; ++i) {
        this.od[i].Td(this.Ab, this.Mc);
      }
    };

    ke.prototype.
    /**/
    setPropertyInAllEmitters = function (
    /**/
    name,
    /**/
    value) {
      var propName = "_".concat(
      /**/
      name);

      if (
      /**/
      value instanceof Array) {
        if (
        /**/
        value.length == 2) {
          for (var i = 0; i < this.od.length; ++i) {
            ctx.S(this.od[i][propName],
            /**/
            value);
          }
        } else {
          for (var i = 0; i < this.od.length; ++i) {
            ctx.T(this.od[i][propName],
            /**/
            value);
          }
        }
      } else {
        for (var i = 0; i < this.od.length; ++i) {
          this.od[i][propName] =
          /**/
          value;
        }
      }
    };

    ke.prototype.
    /**/
    pauseAllEmitters = function () {
      for (var i = 0; i < this.od.length; ++i) {
        this.od[i].
        /**/
        pause();
      }
    };

    ke.prototype.
    /**/
    unpauseAllEmitters = function () {
      for (var i = 0; i < this.od.length; ++i) {
        this.od[i].
        /**/
        unpause();
      }

      this.zeroUpdate();

      if (this._presimNeeded) {
        this.updateFixed(this.Ud, this.Ab, this.Mc, this.presimFrameTime);
        this._presimNeeded = false;
      }
    };

    ke.prototype.
    /**/
    areAllEmittersPaused = function () {
      for (var i = 0; i < this.od.length; ++i) {
        if (!this.od[i].paused()) return false;
      }

      return true;
    };

    ke.prototype.
    /**/
    pauseGeneratorsInAllEmitters = function () {
      for (var i = 0; i < this.od.length; ++i) {
        this.od[i].
        /**/
        pauseGenerators();
      }
    };

    ke.prototype.
    /**/
    unpauseGeneratorsInAllEmitters = function () {
      for (var i = 0; i < this.od.length; ++i) {
        this.od[i].
        /**/
        unpauseGenerators();
      }
    };

    ke.prototype.
    /**/
    areGeneratorsInAllEmittersPaused = function () {
      for (var i = 0; i < this.od.length; ++i) {
        if (!this.od[i].generatorsPaused()) return false;
      }

      return true;
    };

    ke.prototype.
    /**/
    getNumParticles = function () {
      var numParticles = 0;

      for (var i = 0; i < this.od.length; ++i) {
        numParticles += this.od[i].getNumParticles();
      }

      return numParticles;
    };

    var le = function le() {
      this._init = function (we, Ab, Mc, renderBuffer, options) {
        le.prototype._init.call(this, we, Ab, Mc, oe, options);

        this.texturesRemap = [];
        var indices = [];
        {
          var verDisp;

          for (var Wb = 0; Wb < this.
          /**/
          model.Xe; ++Wb) {
            verDisp = Wb * 4;
            indices.push(verDisp + 0, verDisp + 3, verDisp + 1, verDisp + 1, verDisp + 3, verDisp + 2);
          }
        }
        this.renderBuffer = renderBuffer;
        this.renderBuffer.initialize(this.
        /**/
        model.Xe * 4, [2], indices, this.
        /**/
        model.Xe);
        this.renderBuffer.__numIndices = 0;
      };
    };

    le.prototype = new ke();

    le.prototype.
    /**/
    fillGeometryBuffers = function (
    /**/
    cameraRight,
    /**/
    cameraUp,
    /**/
    cameraDir) {
      this.renderBuffer.cleanup();
      this.renderBuffer.__lastRenderCall = null;
      this.od.forEach(function (Bd) {
        Bd.ue(
        /**/
        cameraRight,
        /**/
        cameraUp,
        /**/
        cameraDir, this.renderBuffer);
      }, this);
      if (this.renderBuffer.__lastRenderCall) this.renderBuffer.pushRenderCall(this.renderBuffer.__lastRenderCall);
    };

    var me = function me() {
      this._init = function (we, Ab, Mc, options) {
        me.prototype._init.call(this, we, Ab, Mc, ne, options);

        this.materials = [];
        this.
        /**/
        model.materials.forEach(function (value) {
          this.materials.push(['source-over', 'lighter', 'multiply'][value]);
        }, this);
        this.
        /**/
        textureDescs = [];
      };
    };

    me.prototype = new ke();

    me.prototype.
    /**/
    draw = function (
    /**/
    context,
    /**/
    camera) {
      for (var i = 0; i < this.od.length; ++i) {
        this.od[i].Hd(
        /**/
        context,
        /**/
        camera);
      }
    };

    this.createWGLInstance = function (
    /**/
    position,
    /**/
    rotation,
    /**/
    renderBuffer,
    /**/
    options) {
      var Ld = new le();

      Ld._init(this,
      /**/
      position,
      /**/
      rotation,
      /**/
      renderBuffer,
      /**/
      options || {});

      return Ld;
    };

    this.createCanvas2DInstance = function (
    /**/
    position,
    /**/
    rotation,
    /**/
    options) {
      var Ld = new me();

      Ld._init(this,
      /**/
      position,
      /**/
      rotation,
      /**/
      options || {});

      return Ld;
    };

    this.textures = ['Free Collection 1/Animated/FlameArc8_small.jpg', 'Free Collection 1/Static/Halos/blastwave1.png', 'Free Collection 1/Static/Glows/Flare2.png', 'Free Collection 1/Static/Glows/Flare10.png', 'Free Collection 1/Static/Smoke/CloudPart.png'];
    this.materials = [1, 0];
    this.renderStyles = [{
      materialIndex: 0,
      textureIndices: [0]
    }, {
      materialIndex: 0,
      textureIndices: [1]
    }, {
      materialIndex: 0,
      textureIndices: [2]
    }, {
      materialIndex: 0,
      textureIndices: [3]
    }, {
      materialIndex: 1,
      textureIndices: [4]
    }];
    this.Xe = 500;

    function Emitter_Blast() {
      var _,
          _i0,
          _s0 = [],
          _2 = [],
          _4 = [],
          _6,
          _8,
          _9 = [],
          _9i0,
          _9s0 = [],
          _9i1,
          _9s1 = [],
          _9i2,
          _9s2 = [],
          _11 = [],
          _13,
          _12,
          _14,
          _15,
          _15i0,
          _15s0 = [],
          _16,
          _16i0,
          _16s0 = [];

      this.pe = [{
        xe: 0,
        Rc: 8,
        Sc: 8,
        renderStyleIndex: 0
      }];
      this.name = "Blast";

      this.ud = function (Bd) {
        Bd._ = [[[20, 20, 20], [0, 0, 0]]];
        Bd.dd();
        Bd._9 = [[[1, 1, 1]], [[0.319595, 0.635811, 0.635811]], [[0.208108, 0.208108, 0.208108]]];
        Bd._15 = [[[0, 1, 1], [1, 1, 1], [1, 0, 0]]];
        Bd._16 = [[[0, 64, 64]]];
        Bd.jd = 100;
        Bd.Vc = 0;
      };

      this.Mb = function (vd) {
        vd.zb = 10;
        vd.Gb = 1;
        vd.Jb = 1;
      };

      this.Pb = function (Qb, Bd, vd) {
        _i0 = Bd.Ld.Rb < 0 ? 0 : Bd.Ld.Rb > 4 ? 0 + (Bd.Ld.Rb - 0) % 4 : Bd.Ld.Rb;
        _i0 < 0.6 ? ctx.V(_s0, 0, (_i0 - 0) * 1.66667) : ctx.V(_s0, 1, (_i0 - 0.6) * 0.294118);
        _ = Db.nb(Bd._[0][_s0[0]], _s0[1]);
        vd.zb = _;
      };

      this.fd = function (Bd, Xb) {
        Xb._1 = 0.0;
        ctx.W(_2, 0, 0, 0);
        Xb._3 = [];
        ctx.c(Xb._3, Bd.Ab, _2);
        ctx.randv3gen(_4, 32, Bd.Ld.rand);
        Xb._5 = [];
        ctx.T(Xb._5, _4);
        _6 = 0 + Bd.Ld.rand() * (360 - 0);
        Xb._7 = _6;
        _8 = 0 + Bd.Ld.rand() * (1 - 0);
        _9i0 = _8 < 0 ? 0 : _8 > 1 ? 1 : _8;
        ctx.V(_9s0, 0, (_9i0 - 0) * 1);
        _9i1 = _8 < 0 ? 0 : _8 > 1 ? 1 : _8;
        ctx.V(_9s1, 0, (_9i1 - 0) * 1);
        _9i2 = _8 < 0 ? 0 : _8 > 1 ? 1 : _8;
        ctx.V(_9s2, 0, (_9i2 - 0) * 1);
        ctx.W(_9, Db.nb(Bd._9[0][_9s0[0]], _9s0[1]), Db.nb(Bd._9[1][_9s1[0]], _9s1[1]), Db.nb(Bd._9[2][_9s2[0]], _9s2[1]));
        Xb._10 = [];
        ctx.T(Xb._10, _9);
        ctx.T(Xb.Ab, Xb._3);
      };

      this.gd = function (Bd, Xb) {
        Xb._1 = 0.0;
        ctx.W(_2, 0, 0, 0);
        Xb._3 = [];
        ctx.c(Xb._3, Bd.Ab, _2);
        ctx.randv3gen(_4, 32, Bd.Ld.rand);
        Xb._5 = [];
        ctx.T(Xb._5, _4);
        _6 = 0 + Bd.Ld.rand() * (360 - 0);
        Xb._7 = _6;
        _8 = 0 + Bd.Ld.rand() * (1 - 0);
        _9i0 = _8 < 0 ? 0 : _8 > 1 ? 1 : _8;
        ctx.V(_9s0, 0, (_9i0 - 0) * 1);
        _9i1 = _8 < 0 ? 0 : _8 > 1 ? 1 : _8;
        ctx.V(_9s1, 0, (_9i1 - 0) * 1);
        _9i2 = _8 < 0 ? 0 : _8 > 1 ? 1 : _8;
        ctx.V(_9s2, 0, (_9i2 - 0) * 1);
        ctx.W(_9, Db.nb(Bd._9[0][_9s0[0]], _9s0[1]), Db.nb(Bd._9[1][_9s1[0]], _9s1[1]), Db.nb(Bd._9[2][_9s2[0]], _9s2[1]));
        Xb._10 = [];
        ctx.T(Xb._10, _9);
        ctx.T(Xb.Ab, Xb._3);
      };

      this.qc = function (Qb, Bd, Xb) {
        Xb._1 += Qb;
        ctx.T(_11, Xb._5);
        ctx.u(_11, _11, Qb);
        ctx.c(_11, _11, Xb._3);
        ctx.T(Xb._3, _11);
        ctx.T(Xb.Ab, Xb._3);
        _13 = 123;
        _12 = 1.2;
        _14 = Xb._1 / _12;
        _15i0 = _14 < 0 ? 0 : _14 > 1 ? 1 : _14;
        _15i0 < 0.8 ? _15i0 < 0.2 ? ctx.V(_15s0, 0, (_15i0 - 0) * 5) : ctx.V(_15s0, 1, (_15i0 - 0.2) * 1.66667) : ctx.V(_15s0, 2, (_15i0 - 0.8) * 5);
        _15 = Db.nb(Bd._15[0][_15s0[0]], _15s0[1]);
        _16i0 = _14 < 0 ? 0 : _14 > 1 ? 0 + (_14 - 0) % 1 : _14;
        ctx.V(_16s0, 0, (_16i0 - 0) * 1);
        _16 = Db.nb(Bd._16[0][_16s0[0]], _16s0[1]);
        ctx.S(Xb.Pd, [0.5, 0.5]);
        Xb.Md = Xb._7;
        ctx.V(Xb.Nd, _13, _13);
        ctx.T(Xb.gf, Xb._10);
        Xb.Od = _15;
        Xb.Qc = _16 < 0 ? 0 : _16 >= 64 ? 63 : _16;
      };

      this.Cc = function (Bd, Xb, Wc) {
        _12 = 1.2;
        if (Xb._1 > _12) return true;
        return false;
      };
    }

    function Emitter_Shockwave() {
      var _1 = [],
          _5,
          _4,
          _6,
          _7,
          _7i0,
          _7s0 = [],
          _8,
          _9,
          _9i0,
          _9s0 = [];

      this.pe = [{
        xe: 0,
        Rc: 1,
        Sc: 1,
        renderStyleIndex: 1
      }];
      this.name = "Shockwave";

      this.ud = function (Bd) {
        Bd.dd();
        Bd._7 = [[[0, 0.0479595, 0.10855, 0.179953, 0.259913, 0.345832, 0.434909, 0.524314, 0.611351, 0.693599, 0.769009, 0.835944, 0.893186, 0.9399, 0.975581, 1, 1]]];
        Bd._9 = [[[0.3, 0, 0]]];
        Bd.jd = 100;
        Bd.Vc = 0;
      };

      this.Mb = function (vd) {
        vd.zb = 0.25;
        vd.Gb = 1;
        vd.Jb = 1;
      };

      this.Pb = function (Qb, Bd, vd) {
        vd.zb = 0.25;
      };

      this.fd = function (Bd, Xb) {
        Xb._ = 0.0;
        ctx.W(_1, 0, 0, 0);
        Xb._2 = [];
        ctx.c(Xb._2, Bd.Ab, _1);
        Xb._3 = 0;
        ctx.T(Xb.Ab, Xb._2);
      };

      this.gd = function (Bd, Xb) {
        Xb._ = 0.0;
        ctx.W(_1, 0, 0, 0);
        Xb._2 = [];
        ctx.c(Xb._2, Bd.Ab, _1);
        Xb._3 = 0;
        ctx.T(Xb.Ab, Xb._2);
      };

      this.qc = function (Qb, Bd, Xb) {
        Xb._ += Qb;
        ctx.T(Xb.Ab, Xb._2);
        _5 = 800;
        _4 = 0.7;
        _6 = Xb._ / _4;
        _7i0 = _6 < 0 ? 0 : _6 > 1 ? 1 : _6;
        ctx.V(_7s0, 0, (_7i0 - 0) * 15);
        _7 = Db.nb(Bd._7[0][_7s0[0]], _7s0[1]);
        _8 = _5 * _7;
        _9i0 = _6 < 0 ? 0 : _6 > 1 ? 1 : _6;
        ctx.V(_9s0, 0, (_9i0 - 0) * 1);
        _9 = Db.nb(Bd._9[0][_9s0[0]], _9s0[1]);
        ctx.S(Xb.Pd, [0.5, 0.5]);
        Xb.Md = Xb._3;
        ctx.V(Xb.Nd, _8, _8);
        ctx.T(Xb.gf, [1, 1, 1]);
        Xb.Od = _9;
        Xb.Qc = 0;
      };

      this.Cc = function (Bd, Xb, Wc) {
        _4 = 0.7;
        if (Xb._ > _4) return true;
        return false;
      };
    }

    function Emitter_Sparks() {
      var _1,
          _3 = [],
          _5,
          _6 = [],
          _8,
          _9,
          _10 = [],
          _12 = [],
          _13 = [],
          _13fs = [],
          _13vs = [],
          _13rw = [],
          _13rwn = [],
          _13rwl,
          _13v = [],
          _13p = [],
          _13dtl,
          _13dtp,
          _13df,
          _13fsd = [],
          _14 = [],
          _14x = [],
          _14y = [],
          _14z = [],
          _15,
          _16 = [],
          _16i0,
          _16s0 = [],
          _16i1,
          _16s1 = [],
          _17,
          _18 = [],
          _18i0,
          _18s0 = [],
          _18i1,
          _18s1 = [],
          _18i2,
          _18s2 = [];

      this.pe = [{
        xe: 1,
        Rc: 1,
        Sc: 1,
        renderStyleIndex: 2
      }];
      this.name = "Sparks";

      this.ud = function (Bd) {
        Bd.dd();
        Bd._16 = [[[1, 0.987913, 0.968473, 0.94168, 0.907511, 0.86592, 0.816832, 0.760139, 0.695691, 0.623292, 0.542683, 0.453525, 0.355376, 0.24765, 0.129556, 0, 0]], [[1, 0.986913, 0.966618, 0.938898, 0.903549, 0.860389, 0.809266, 0.750071, 0.682749, 0.607317, 0.523887, 0.432682, 0.334064, 0.228563, 0.116897, 0, 0]]];
        Bd._18 = [[[1, 1, 1]], [[1, 0.7, 0.7]], [[1, 0.379741, 0.379741]]];
        Bd.jd = 100;
        Bd.Vc = 0;
      };

      this.Mb = function (vd) {
        vd.zb = 0.25;
        vd.Gb = 1;
        vd.Jb = 40;
      };

      this.Pb = function (Qb, Bd, vd) {
        vd.zb = 0.25;
      };

      this.fd = function (Bd, Xb) {
        Xb.Mc = [];
        Xb._ = 0.0;
        _1 = 0.5 + Bd.Ld.rand() * (1.5 - 0.5);
        Xb._2 = _1;
        ctx.W(_3, 0, 0, 0);
        Xb._4 = [];
        ctx.c(Xb._4, Bd.Ab, _3);
        _5 = 100 + Bd.Ld.rand() * (1000 - 100);
        ctx.randv3gen(_6, _5, Bd.Ld.rand);
        Xb._7 = [];
        ctx.T(Xb._7, _6);
        _8 = 5 + Bd.Ld.rand() * (15 - 5);
        _9 = 10 + Bd.Ld.rand() * (30 - 10);
        ctx.V(_10, _8, _9);
        Xb._11 = [];
        ctx.S(Xb._11, _10);
        ctx.T(Xb.Ab, Xb._4);
      };

      this.gd = function (Bd, Xb) {
        Xb.Mc = [];
        Xb._ = 0.0;
        _1 = 0.5 + Bd.Ld.rand() * (1.5 - 0.5);
        Xb._2 = _1;
        ctx.W(_3, 0, 0, 0);
        Xb._4 = [];
        ctx.c(Xb._4, Bd.Ab, _3);
        _5 = 100 + Bd.Ld.rand() * (1000 - 100);
        ctx.randv3gen(_6, _5, Bd.Ld.rand);
        Xb._7 = [];
        ctx.T(Xb._7, _6);
        _8 = 5 + Bd.Ld.rand() * (15 - 5);
        _9 = 10 + Bd.Ld.rand() * (30 - 10);
        ctx.V(_10, _8, _9);
        Xb._11 = [];
        ctx.S(Xb._11, _10);
        ctx.T(Xb.Ab, Xb._4);
      };

      this.qc = function (Qb, Bd, Xb) {
        Xb._ += Qb;
        ctx.W(_12, 0, 100, 0);
        ctx.T(_13fs, _12);
        ctx.T(_13vs, [0, 0, 0]);
        _13dtl = Qb;
        ctx.T(_13v, Xb._7);
        ctx.T(_13p, Xb._4);

        while (_13dtl > 0.0001) {
          _13dtp = _13dtl;
          ctx.T(_13fsd, _13fs);
          ctx.g(_13rw, _13vs, _13v);
          _13rwl = ctx.P(_13rw);

          if (_13rwl > 0.0001) {
            _13rwl = Math.sqrt(_13rwl);
            ctx.w(_13rwn, _13rw, _13rwl);
            _13df = 0.01 * 1 * _13rwl;
            if (_13df * _13dtp > 0.2) _13dtp = 0.2 / _13df;
            ctx.c(_13fsd, _13fsd, ctx.v(_13rwn, _13rwl * _13df));
          }

          ctx.c(_13v, _13v, ctx.v(_13fsd, _13dtp));
          ctx.c(_13p, _13p, ctx.v(_13v, _13dtp));
          _13dtl -= _13dtp;
        }

        ctx.T(Xb._4, _13p);
        ctx.T(Xb._7, _13v);
        ctx.T(Xb.Ab, Xb._4);
        ctx.Q(_14z, [0, 0, 1]);
        ctx.I(_14x, Xb._7, _14z);
        ctx.Q(_14x, _14x);
        ctx.I(_14y, _14z, _14x);
        ctx.pb(_14, _14x, _14y, _14z);
        _15 = Xb._ / Xb._2;
        _16i0 = _15 < 0 ? 0 : _15 > 1 ? 1 : _15;
        ctx.V(_16s0, 0, (_16i0 - 0) * 15);
        _16i1 = _15 < 0 ? 0 : _15 > 1 ? 1 : _15;
        ctx.V(_16s1, 0, (_16i1 - 0) * 15);
        ctx.V(_16, Db.nb(Bd._16[0][_16s0[0]], _16s0[1]), Db.nb(Bd._16[1][_16s1[0]], _16s1[1]));
        _17 = ctx.j(Xb._11, _16);
        _18i0 = _15 < 0 ? 0 : _15 > 1 ? 1 : _15;
        ctx.V(_18s0, 0, (_18i0 - 0) * 1);
        _18i1 = _15 < 0 ? 0 : _15 > 1 ? 1 : _15;
        ctx.V(_18s1, 0, (_18i1 - 0) * 1);
        _18i2 = _15 < 0 ? 0 : _15 > 1 ? 1 : _15;
        ctx.V(_18s2, 0, (_18i2 - 0) * 1);
        ctx.W(_18, Db.nb(Bd._18[0][_18s0[0]], _18s0[1]), Db.nb(Bd._18[1][_18s1[0]], _18s1[1]), Db.nb(Bd._18[2][_18s2[0]], _18s2[1]));
        ctx.S(Xb.Pd, [0.5, 0.5]);
        ctx.U(Xb.Mc, _14);
        ctx.S(Xb.Nd, _17);
        ctx.T(Xb.gf, _18);
        Xb.Od = 1;
        Xb.Qc = 0;
      };

      this.Cc = function (Bd, Xb, Wc) {
        if (Xb._ > Xb._2) return true;
        return false;
      };
    }

    function Emitter_Blast_Core() {
      var _1 = [],
          _5,
          _4,
          _6,
          _7,
          _7i0,
          _7s0 = [];

      this.pe = [{
        xe: 0,
        Rc: 1,
        Sc: 1,
        renderStyleIndex: 3
      }];
      this.name = "Blast_Core";

      this.ud = function (Bd) {
        Bd.dd();
        Bd._7 = [[[0, 0.252391, 0.413907, 0.536299, 0.633869, 0.713413, 0.778892, 0.832889, 0.877221, 0.91323, 0.941945, 0.964184, 0.980605, 0.991755, 0.99809, 1, 1], [1, 0.994276, 0.979138, 0.955237, 0.923054, 0.882925, 0.835057, 0.779525, 0.716271, 0.645085, 0.565564, 0.477047, 0.378502, 0.268299, 0.143747, 0, 0]]];
        Bd.jd = 100;
        Bd.Vc = 0;
      };

      this.Mb = function (vd) {
        vd.zb = 0.25;
        vd.Gb = 1;
        vd.Jb = 1;
      };

      this.Pb = function (Qb, Bd, vd) {
        vd.zb = 0.25;
      };

      this.fd = function (Bd, Xb) {
        Xb._ = 0.0;
        ctx.W(_1, 0, 0, 0);
        Xb._2 = [];
        ctx.c(Xb._2, Bd.Ab, _1);
        Xb._3 = 0;
        ctx.T(Xb.Ab, Xb._2);
      };

      this.gd = function (Bd, Xb) {
        Xb._ = 0.0;
        ctx.W(_1, 0, 0, 0);
        Xb._2 = [];
        ctx.c(Xb._2, Bd.Ab, _1);
        Xb._3 = 0;
        ctx.T(Xb.Ab, Xb._2);
      };

      this.qc = function (Qb, Bd, Xb) {
        Xb._ += Qb;
        ctx.T(Xb.Ab, Xb._2);
        _5 = 200;
        _4 = 0.5;
        _6 = Xb._ / _4;
        _7i0 = _6 < 0 ? 0 : _6 > 1 ? 1 : _6;
        _7i0 < 0.2 ? ctx.V(_7s0, 0, (_7i0 - 0) * 75) : ctx.V(_7s0, 1, (_7i0 - 0.2) * 18.75);
        _7 = Db.nb(Bd._7[0][_7s0[0]], _7s0[1]);
        ctx.S(Xb.Pd, [0.5, 0.5]);
        Xb.Md = Xb._3;
        ctx.V(Xb.Nd, _5, _5);
        ctx.T(Xb.gf, [1, 0.912, 0.713]);
        Xb.Od = _7;
        Xb.Qc = 0;
      };

      this.Cc = function (Bd, Xb, Wc) {
        _4 = 0.5;
        if (Xb._ > _4) return true;
        return false;
      };
    }

    function Emitter_Smoke() {
      var _1 = [],
          _3 = [],
          _5,
          _7,
          _9 = [],
          _10,
          _12,
          _11,
          _13,
          _14,
          _14i0,
          _14s0 = [];

      this.pe = [{
        xe: 0,
        Rc: 1,
        Sc: 1,
        renderStyleIndex: 4
      }];
      this.name = "Smoke";

      this.ud = function (Bd) {
        Bd.dd();
        Bd._14 = [[[0, 0.00132173, 0.00435881, 0.00908884, 0.0154361, 0.023256, 0.0323214, 0.0423132, 0.0528225, 0.0633654, 0.073415, 0.0824432, 0.0899658, 0.0955805, 0.0989885, 0.1, 0.1], [0.1, 0.098408, 0.0943513, 0.0880255, 0.079805, 0.0702197, 0.059887, 0.0494209, 0.0393534, 0.0300894, 0.0219008, 0.0149435, 0.00928552, 0.00493396, 0.00185696, 0, 0]]];
        Bd.jd = 100;
        Bd.Vc = 0;
      };

      this.Mb = function (vd) {
        vd.zb = 0.25;
        vd.Gb = 0.85;
        vd.Jb = 15;
      };

      this.Pb = function (Qb, Bd, vd) {
        vd.zb = 0.25;
      };

      this.fd = function (Bd, Xb) {
        Xb._ = 0.0;
        ctx.randv3gen(_1, 50, Bd.Ld.rand);
        Xb._2 = [];
        ctx.c(Xb._2, Bd.Ab, _1);
        ctx.randv3gen(_3, 20, Bd.Ld.rand);
        Xb._4 = [];
        ctx.T(Xb._4, _3);
        _5 = 0 + Bd.Ld.rand() * (360 - 0);
        Xb._6 = _5;
        _7 = -45 + Bd.Ld.rand() * (45 - -45);
        Xb._8 = _7;
        ctx.T(Xb.Ab, Xb._2);
      };

      this.gd = function (Bd, Xb) {
        Xb._ = 0.0;
        ctx.randv3gen(_1, 50, Bd.Ld.rand);
        Xb._2 = [];
        ctx.c(Xb._2, Bd.Ab, _1);
        ctx.randv3gen(_3, 20, Bd.Ld.rand);
        Xb._4 = [];
        ctx.T(Xb._4, _3);
        _5 = 0 + Bd.Ld.rand() * (360 - 0);
        Xb._6 = _5;
        _7 = -45 + Bd.Ld.rand() * (45 - -45);
        Xb._8 = _7;
        ctx.T(Xb.Ab, Xb._2);
      };

      this.qc = function (Qb, Bd, Xb) {
        Xb._ += Qb;
        ctx.T(_9, Xb._4);
        ctx.u(_9, _9, Qb);
        ctx.c(_9, _9, Xb._2);
        ctx.T(Xb._2, _9);
        _10 = Xb._6 + Qb * Xb._8;
        Xb._6 = _10;
        ctx.T(Xb.Ab, Xb._2);
        _12 = 100;
        _11 = 3;
        _13 = Xb._ / _11;
        _14i0 = _13 < 0 ? 0 : _13 > 1 ? 1 : _13;
        _14i0 < 0.4 ? ctx.V(_14s0, 0, (_14i0 - 0) * 37.5) : ctx.V(_14s0, 1, (_14i0 - 0.4) * 25);
        _14 = Db.nb(Bd._14[0][_14s0[0]], _14s0[1]);
        ctx.S(Xb.Pd, [0.5, 0.5]);
        Xb.Md = Xb._6;
        ctx.V(Xb.Nd, _12, _12);
        ctx.T(Xb.gf, [0.4, 0.4, 0.4]);
        Xb.Od = _14;
        Xb.Qc = 0;
      };

      this.Cc = function (Bd, Xb, Wc) {
        _11 = 3;
        if (Xb._ > _11) return true;
        return false;
      };
    }

    this.qd = function (Ld) {
      Ld.Dd = 0.0333333;
      Ld.Ud = 0;
      Ld.presimFrameTime = 0.1;

      Ld.rand = function () {
        return Math.random();
      };

      Ld.pd(new Emitter_Blast());
      Ld.pd(new Emitter_Shockwave());
      Ld.pd(new Emitter_Sparks());
      Ld.pd(new Emitter_Blast_Core());
      Ld.pd(new Emitter_Smoke());
    };

    this.nb = function (funcValues, je) {
      var indexInt = Math.floor(je);
      var nextInt = indexInt + 1;
      return ctx.X(funcValues[indexInt], funcValues[nextInt], je - indexInt);
    };
  }

  return Blast03;
});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/Plugin/Responsive.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'd3abaWwEQhAi5Yf4wF9VZxN', 'Responsive');
// Script/Plugin/Responsive.ts

"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var BaseController_1 = require("../Controller/BaseController");
var CoinController_1 = require("../Controller/CoinController");
var constants_1 = require("../Data/constants");
var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
var Responsive = /** @class */ (function (_super) {
    __extends(Responsive, _super);
    function Responsive() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.enemyBase = null;
        _this.allyBase = null;
        _this.CoinController = null;
        _this.Environment = null;
        _this.Options = null;
        _this.speedLine = null;
        _this.CTA_logo = null;
        _this.Hor_Decor = null;
        _this.Ver_Decor = null;
        _this.FrameFood = null;
        _this.LoadFood = null;
        _this.Options_Layout = null;
        // state
        _this.device = "";
        _this.isRotate = false;
        _this.HORIZONTAL_IPX = "horizontal_IPX";
        _this.HORIZONTAL_TABLET = "horizontal_Tablet";
        _this.VERTICAL_IPX = "vertical_IPX";
        _this.VERTICAL_MOBILE = "vertical_Mobile";
        return _this;
    }
    Responsive.prototype.start = function () {
        this.FrameFood = this.Options.getChildByName("Framefood");
        this.LoadFood = this.Options.getChildByName("LoadFoodController");
        this.Options_Layout = this.Options.getChildByName("Layout");
    };
    Responsive.prototype.handleRotate = function () {
        var width = cc.view.getFrameSize().width;
        var height = cc.view.getFrameSize().height;
        if (width > height) {
            constants_1.Constants.isRotate = true;
            this.setHorizontal();
        }
        else {
            constants_1.Constants.isRotate = false;
            this.setVertical();
        }
    };
    Responsive.prototype.setHorizontal = function () {
        var width = cc.view.getFrameSize().width;
        var height = cc.view.getFrameSize().height;
        if (height / width < 0.65) {
            // Iphone 6 / 6 plus / 7 / 7 Plus / X
            this.setHorizontalForIpX();
        }
        else {
            this.setHorizontalForTablet();
        }
    };
    Responsive.prototype.setHorizontalForIpX = function () {
        if (this.HORIZONTAL_IPX === this.device) {
            return;
        }
        this.device = this.HORIZONTAL_IPX;
        this.Hor_Decor.active = true;
        this.Ver_Decor.active = false;
        constants_1.Constants.Responsive.speedCalculated = 20;
        constants_1.Constants.scaleArmy = 0.5;
        this.CoinController.node.scale = 1;
        this.allyBase.node.scale = 1;
        this.allyBase.getComponent(cc.Widget).top = 210;
        this.allyBase.getComponent(cc.Widget).left = 80;
        this.allyBase.node.getChildByName("base").setScale(0.4, 0.4);
        this.enemyBase.node.scale = 1;
        this.enemyBase.getComponent(cc.Widget).top = 210;
        this.enemyBase.getComponent(cc.Widget).right = 80;
        this.enemyBase.node.getChildByName("base").setScale(-0.4, 0.4);
        this.FrameFood.setScale(10, 0.3);
        this.FrameFood.getComponent(cc.Widget).bottom = -5;
        this.LoadFood.setScale(0.316, 0.316);
        this.LoadFood.getComponent(cc.Widget).left = -5;
        this.LoadFood.getComponent(cc.Widget).bottom = -10;
        this.Options_Layout.setScale(1, 1);
        var optionsWidget = this.Options_Layout.getComponent(cc.Widget);
        var optionsLayout = this.Options_Layout.getComponent(cc.Layout);
        var optionsChild = this.Options_Layout.children;
        optionsWidget.isAlignLeft = true;
        optionsWidget.isAlignRight = true;
        optionsWidget.isAlignHorizontalCenter = false;
        optionsWidget.left = 30;
        optionsWidget.right = -130;
        optionsWidget.bottom = 65;
        optionsLayout.spacingX = 140;
        optionsChild.forEach(function (child) {
            child.scale = 1.15;
        });
        this.CTA_logo.scale = 0.4;
        this.speedLine.scale = 0.9;
        this.speedLine.y = -200;
    };
    Responsive.prototype.setHorizontalForTablet = function () {
        if (this.HORIZONTAL_TABLET === this.device) {
            return;
        }
        this.device = this.HORIZONTAL_TABLET;
        this.Hor_Decor.active = true;
        this.Ver_Decor.active = false;
        constants_1.Constants.Responsive.speedCalculated = 10;
        constants_1.Constants.scaleArmy = 0.5;
        this.CoinController.node.scale = 1;
        this.allyBase.node.scale = 1;
        this.allyBase.getComponent(cc.Widget).top = 210;
        this.allyBase.getComponent(cc.Widget).left = 80;
        this.allyBase.node.getChildByName("base").setScale(0.4, 0.4);
        this.enemyBase.node.scale = 1;
        this.enemyBase.getComponent(cc.Widget).top = 210;
        this.enemyBase.getComponent(cc.Widget).right = 80;
        this.enemyBase.node.getChildByName("base").setScale(-0.4, 0.4);
        this.FrameFood.setScale(10, 0.3);
        this.FrameFood.getComponent(cc.Widget).bottom = -5;
        this.LoadFood.setScale(0.316, 0.316);
        this.LoadFood.getComponent(cc.Widget).left = -5;
        this.LoadFood.getComponent(cc.Widget).bottom = -10;
        this.Options_Layout.setScale(1, 1);
        var optionsWidget = this.Options_Layout.getComponent(cc.Widget);
        var optionsLayout = this.Options_Layout.getComponent(cc.Layout);
        var optionsChild = this.Options_Layout.children;
        optionsWidget.isAlignLeft = true;
        optionsWidget.isAlignRight = true;
        optionsWidget.isAlignHorizontalCenter = false;
        optionsWidget.left = 30;
        optionsWidget.right = -130;
        optionsWidget.bottom = 65;
        optionsLayout.spacingX = 120;
        optionsChild.forEach(function (child) {
            child.name.includes("Op") ? child.scale = 1.15 : child.scale = 0.41;
        });
        this.CTA_logo.scale = 0.4;
        this.speedLine.scale = 0.6;
        this.speedLine.y = -180;
    };
    Responsive.prototype.setVertical = function () {
        var width = cc.view.getFrameSize().width;
        var height = cc.view.getFrameSize().height;
        if (width / height < 0.5) {
            this.setIphoneX();
        }
        else {
            this.setMobile();
        }
    };
    Responsive.prototype.setIphoneX = function () {
        if (this.VERTICAL_IPX === this.device) {
            return;
        }
        this.device = this.VERTICAL_IPX;
        this.Hor_Decor.active = false;
        this.Ver_Decor.active = true;
        constants_1.Constants.Responsive.speedCalculated = 0;
        constants_1.Constants.scaleArmy = 0.25;
        this.CoinController.node.scale = 0.8;
        this.allyBase.node.scale = 0.85;
        this.allyBase.getComponent(cc.Widget).top = 220;
        this.allyBase.getComponent(cc.Widget).left = 30;
        this.allyBase.node.getChildByName("base").setScale(0.25, 0.25);
        this.enemyBase.node.scale = 0.85;
        this.enemyBase.getComponent(cc.Widget).top = 220;
        this.enemyBase.getComponent(cc.Widget).right = 30;
        this.enemyBase.node.getChildByName("base").setScale(-0.25, 0.25);
        this.FrameFood.setScale(10, 0.25);
        this.FrameFood.getComponent(cc.Widget).bottom = -5;
        this.LoadFood.setScale(0.22, 0.24);
        this.LoadFood.getComponent(cc.Widget).left = -2;
        this.LoadFood.getComponent(cc.Widget).bottom = -2;
        this.Options_Layout.setScale(1, 1);
        var optionsWidget = this.Options_Layout.getComponent(cc.Widget);
        var optionsLayout = this.Options_Layout.getComponent(cc.Layout);
        var optionsChild = this.Options_Layout.children;
        optionsWidget.isAlignHorizontalCenter = false;
        optionsWidget.isAlignRight = true;
        optionsWidget.isAlignLeft = true;
        optionsWidget.right = 67;
        optionsWidget.left = 177;
        optionsWidget.bottom = 34;
        optionsLayout.spacingX = 55;
        optionsChild.forEach(function (child) {
            child.scale = 0.6;
        });
        this.CTA_logo.scale = 0.3;
    };
    Responsive.prototype.setMobile = function () {
        if (this.VERTICAL_MOBILE === this.device) {
            return;
        }
        this.device = this.VERTICAL_MOBILE;
        var width = cc.view.getFrameSize().width;
        var height = cc.view.getFrameSize().height;
        this.Hor_Decor.active = false;
        this.Ver_Decor.active = true;
        constants_1.Constants.Responsive.speedCalculated = 0;
        constants_1.Constants.scaleArmy = 0.25;
        this.CoinController.node.scale = 0.8;
        this.allyBase.node.scale = 0.85;
        this.allyBase.getComponent(cc.Widget).top = 220;
        this.allyBase.getComponent(cc.Widget).left = 30;
        this.allyBase.node.getChildByName("base").setScale(0.25, 0.25);
        this.enemyBase.node.scale = 0.85;
        this.enemyBase.getComponent(cc.Widget).top = 220;
        this.enemyBase.getComponent(cc.Widget).right = 30;
        this.enemyBase.node.getChildByName("base").setScale(-0.25, 0.25);
        this.FrameFood.setScale(10, 0.25);
        this.FrameFood.getComponent(cc.Widget).bottom = -5;
        this.LoadFood.setScale(0.22, 0.24);
        this.LoadFood.getComponent(cc.Widget).left = -2;
        this.LoadFood.getComponent(cc.Widget).bottom = -2;
        this.Options_Layout.setScale(1, 1);
        var optionsWidget = this.Options_Layout.getComponent(cc.Widget);
        var optionsLayout = this.Options_Layout.getComponent(cc.Layout);
        var optionsChild = this.Options_Layout.children;
        optionsWidget.isAlignHorizontalCenter = false;
        optionsWidget.isAlignRight = true;
        optionsWidget.isAlignLeft = true;
        optionsWidget.right = 67;
        optionsWidget.left = 177;
        optionsWidget.bottom = 34;
        optionsLayout.spacingX = 55;
        optionsChild.forEach(function (child) {
            child.scale = 0.6;
        });
        this.CTA_logo.scale = 0.3;
        this.speedLine.scale = 0.3;
        this.speedLine.y = -90;
        // if (height / width > 1.5) {
        //     this.CoinController.node.scale = 0.8;
        //     this.allyBase.node.scale = 0.85;
        //     this.allyBase.getComponent(cc.Widget).top = 220;
        //     this.allyBase.getComponent(cc.Widget).left = 30;
        //     this.allyBase.node.getChildByName("base").setScale(0.25, 0.25)
        //     this.enemyBase.node.scale = 0.85;
        //     this.enemyBase.getComponent(cc.Widget).top = 220;
        //     this.enemyBase.getComponent(cc.Widget).right = 30;
        //     this.enemyBase.node.getChildByName("base").setScale(-0.25, 0.25);
        //     // this.FrameFood.setScale(10, 0.13);
        //     // this.FrameFood.getComponent(cc.Widget).bottom = -5;
        //     // this.LoadFood.setScale(0.12, 0.12);
        //     // this.LoadFood.getComponent(cc.Widget).left = -2;
        //     // this.LoadFood.getComponent(cc.Widget).bottom = -2;
        //     this.Options_Layout.setScale(1, 1);
        //     let optionsWidget = this.Options_Layout.getComponent(cc.Widget);
        //     let optionsLayout = this.Options_Layout.getComponent(cc.Layout);
        //     // let optionsChild = this.Options_Layout.children;
        //     optionsWidget.isAlignHorizontalCenter = true;
        //     optionsWidget.isAlignRight = false;
        //     // optionsWidget.isAlignLeft = false;
        //     // optionsWidget.right = 30;
        //     // optionsWidget.bottom = 35;
        //     optionsLayout.spacingX = 70;
        //     // optionsChild.forEach(child => {
        //     //     child.name.includes("Op") ? child.scale = 0.5 : child.scale = 0.2;
        //     // });
        // } else {
        //     this.CoinController.node.scale = 0.8;
        //     this.allyBase.node.scale = 0.85;
        //     this.allyBase.getComponent(cc.Widget).top = 220;
        //     this.allyBase.getComponent(cc.Widget).left = 30;
        //     this.allyBase.node.getChildByName("base").setScale(0.25, 0.25)
        //     this.enemyBase.node.scale = 0.85;
        //     this.enemyBase.getComponent(cc.Widget).top = 220;
        //     this.enemyBase.getComponent(cc.Widget).right = 30;
        //     this.enemyBase.node.getChildByName("base").setScale(-0.25, 0.25);
        //     // this.FrameFood.setScale(10, 0.13);
        //     // this.FrameFood.getComponent(cc.Widget).bottom = -5;
        //     // this.LoadFood.setScale(0.12, 0.12);
        //     // this.LoadFood.getComponent(cc.Widget).left = -2;
        //     // this.LoadFood.getComponent(cc.Widget).bottom = -2;
        //     this.Options_Layout.setScale(1, 1);
        //     let optionsWidget = this.Options_Layout.getComponent(cc.Widget);
        //     // let optionsLayout = this.Options_Layout.getComponent(cc.Layout);
        //     // let optionsChild = this.Options_Layout.children;
        //     optionsWidget.isAlignHorizontalCenter = true;
        //     optionsWidget.isAlignRight = false;
        //     // optionsWidget.isAlignLeft = false;
        //     // optionsWidget.right = 30;
        //     // optionsWidget.bottom = 35;
        //     // optionsLayout.spacingX = 50;
        //     // optionsChild.forEach(child => {
        //     //     child.name.includes("Op") ? child.scale = 0.5 : child.scale = 0.2;
        //     // });
        // }
    };
    Responsive.prototype.update = function (dt) {
        this.handleRotate();
    };
    __decorate([
        property(BaseController_1.default)
    ], Responsive.prototype, "enemyBase", void 0);
    __decorate([
        property(BaseController_1.default)
    ], Responsive.prototype, "allyBase", void 0);
    __decorate([
        property(CoinController_1.default)
    ], Responsive.prototype, "CoinController", void 0);
    __decorate([
        property(cc.Node)
    ], Responsive.prototype, "Environment", void 0);
    __decorate([
        property(cc.Node)
    ], Responsive.prototype, "Options", void 0);
    __decorate([
        property(cc.Node)
    ], Responsive.prototype, "speedLine", void 0);
    __decorate([
        property(cc.Node)
    ], Responsive.prototype, "CTA_logo", void 0);
    __decorate([
        property(cc.Node)
    ], Responsive.prototype, "Hor_Decor", void 0);
    __decorate([
        property(cc.Node)
    ], Responsive.prototype, "Ver_Decor", void 0);
    Responsive = __decorate([
        ccclass
    ], Responsive);
    return Responsive;
}(cc.Component));
exports.default = Responsive;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0XFxQbHVnaW5cXFJlc3BvbnNpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsK0RBQTBEO0FBQzFELCtEQUEwRDtBQUMxRCwrQ0FBOEM7QUFFeEMsSUFBQSxLQUF3QixFQUFFLENBQUMsVUFBVSxFQUFuQyxPQUFPLGFBQUEsRUFBRSxRQUFRLGNBQWtCLENBQUM7QUFHNUM7SUFBd0MsOEJBQVk7SUFBcEQ7UUFBQSxxRUF3WEM7UUFyWEcsZUFBUyxHQUFtQixJQUFJLENBQUM7UUFFakMsY0FBUSxHQUFtQixJQUFJLENBQUM7UUFFaEMsb0JBQWMsR0FBbUIsSUFBSSxDQUFDO1FBR3RDLGlCQUFXLEdBQVksSUFBSSxDQUFDO1FBRTVCLGFBQU8sR0FBWSxJQUFJLENBQUM7UUFJeEIsZUFBUyxHQUFZLElBQUksQ0FBQztRQUcxQixjQUFRLEdBQVksSUFBSSxDQUFDO1FBR3pCLGVBQVMsR0FBWSxJQUFJLENBQUM7UUFFMUIsZUFBUyxHQUFZLElBQUksQ0FBQztRQUUxQixlQUFTLEdBQVksSUFBSSxDQUFDO1FBQzFCLGNBQVEsR0FBWSxJQUFJLENBQUM7UUFDekIsb0JBQWMsR0FBWSxJQUFJLENBQUM7UUFFL0IsUUFBUTtRQUNSLFlBQU0sR0FBVyxFQUFFLENBQUM7UUFDcEIsY0FBUSxHQUFZLEtBQUssQ0FBQztRQUUxQixvQkFBYyxHQUFXLGdCQUFnQixDQUFDO1FBQzFDLHVCQUFpQixHQUFXLG1CQUFtQixDQUFDO1FBQ2hELGtCQUFZLEdBQVcsY0FBYyxDQUFDO1FBQ3RDLHFCQUFlLEdBQVcsaUJBQWlCLENBQUM7O0lBbVZoRCxDQUFDO0lBaFZhLDBCQUFLLEdBQWY7UUFDSSxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQzFELElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxjQUFjLENBQUMsb0JBQW9CLENBQUMsQ0FBQztRQUNsRSxJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ2hFLENBQUM7SUFHTyxpQ0FBWSxHQUFwQjtRQUNJLElBQUksS0FBSyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ3pDLElBQUksTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUMsTUFBTSxDQUFDO1FBQzNDLElBQUksS0FBSyxHQUFHLE1BQU0sRUFBRTtZQUNoQixxQkFBUyxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUM7WUFDMUIsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO1NBQ3hCO2FBQU07WUFDSCxxQkFBUyxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUM7WUFDM0IsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO1NBQ3RCO0lBQ0wsQ0FBQztJQUdPLGtDQUFhLEdBQXJCO1FBQ0ksSUFBSSxLQUFLLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQyxLQUFLLENBQUM7UUFDekMsSUFBSSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQyxNQUFNLENBQUM7UUFDM0MsSUFBSSxNQUFNLEdBQUcsS0FBSyxHQUFHLElBQUksRUFBRTtZQUN2QixxQ0FBcUM7WUFDckMsSUFBSSxDQUFDLG1CQUFtQixFQUFFLENBQUM7U0FDOUI7YUFBTTtZQUNILElBQUksQ0FBQyxzQkFBc0IsRUFBRSxDQUFDO1NBQ2pDO0lBQ0wsQ0FBQztJQUdPLHdDQUFtQixHQUEzQjtRQUNJLElBQUksSUFBSSxDQUFDLGNBQWMsS0FBSyxJQUFJLENBQUMsTUFBTSxFQUFFO1lBQ3JDLE9BQU87U0FDVjtRQUVELElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQztRQUVsQyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUM7UUFDN0IsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDO1FBRTlCLHFCQUFTLENBQUMsVUFBVSxDQUFDLGVBQWUsR0FBRyxFQUFFLENBQUM7UUFDMUMscUJBQVMsQ0FBQyxTQUFTLEdBQUcsR0FBRyxDQUFDO1FBRTFCLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUM7UUFFbkMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQztRQUM3QixJQUFJLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQztRQUNoRCxJQUFJLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxHQUFHLEVBQUUsQ0FBQztRQUNoRCxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsTUFBTSxDQUFDLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQztRQUU3RCxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDO1FBQzlCLElBQUksQ0FBQyxTQUFTLENBQUMsWUFBWSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDO1FBQ2pELElBQUksQ0FBQyxTQUFTLENBQUMsWUFBWSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxLQUFLLEdBQUcsRUFBRSxDQUFDO1FBQ2xELElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFFL0QsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsRUFBRSxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQ2pDLElBQUksQ0FBQyxTQUFTLENBQUMsWUFBWSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDbkQsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ3JDLElBQUksQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDaEQsSUFBSSxDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUUsQ0FBQztRQUVuRCxJQUFJLENBQUMsY0FBYyxDQUFDLFFBQVEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDbkMsSUFBSSxhQUFhLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxZQUFZLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ2hFLElBQUksYUFBYSxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsWUFBWSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNoRSxJQUFJLFlBQVksR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLFFBQVEsQ0FBQztRQUVoRCxhQUFhLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQztRQUNqQyxhQUFhLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQztRQUNsQyxhQUFhLENBQUMsdUJBQXVCLEdBQUcsS0FBSyxDQUFDO1FBQzlDLGFBQWEsQ0FBQyxJQUFJLEdBQUcsRUFBRSxDQUFDO1FBQ3hCLGFBQWEsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxHQUFHLENBQUM7UUFDM0IsYUFBYSxDQUFDLE1BQU0sR0FBRyxFQUFFLENBQUM7UUFFMUIsYUFBYSxDQUFDLFFBQVEsR0FBRyxHQUFHLENBQUM7UUFDN0IsWUFBWSxDQUFDLE9BQU8sQ0FBQyxVQUFBLEtBQUs7WUFDdEIsS0FBSyxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7UUFDdkIsQ0FBQyxDQUFDLENBQUM7UUFFSCxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssR0FBRyxHQUFHLENBQUM7UUFFMUIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLEdBQUcsR0FBRyxDQUFDO1FBQzNCLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDO0lBQzVCLENBQUM7SUFHTywyQ0FBc0IsR0FBOUI7UUFDSSxJQUFJLElBQUksQ0FBQyxpQkFBaUIsS0FBSyxJQUFJLENBQUMsTUFBTSxFQUFFO1lBQ3hDLE9BQU87U0FDVjtRQUVELElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixDQUFDO1FBRXJDLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQztRQUM3QixJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7UUFFOUIscUJBQVMsQ0FBQyxVQUFVLENBQUMsZUFBZSxHQUFHLEVBQUUsQ0FBQztRQUMxQyxxQkFBUyxDQUFDLFNBQVMsR0FBRyxHQUFHLENBQUM7UUFFMUIsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQztRQUVuQyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDO1FBQzdCLElBQUksQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDO1FBQ2hELElBQUksQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLEdBQUcsRUFBRSxDQUFDO1FBQ2hELElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxRQUFRLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBRTdELElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUM7UUFDOUIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxZQUFZLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUM7UUFDakQsSUFBSSxDQUFDLFNBQVMsQ0FBQyxZQUFZLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEtBQUssR0FBRyxFQUFFLENBQUM7UUFDbEQsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQztRQUUvRCxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxFQUFFLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDakMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxZQUFZLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQztRQUNuRCxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDckMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQztRQUNoRCxJQUFJLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRSxDQUFDO1FBRW5ELElBQUksQ0FBQyxjQUFjLENBQUMsUUFBUSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUNuQyxJQUFJLGFBQWEsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLFlBQVksQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDaEUsSUFBSSxhQUFhLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxZQUFZLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ2hFLElBQUksWUFBWSxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsUUFBUSxDQUFDO1FBRWhELGFBQWEsQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDO1FBQ2pDLGFBQWEsQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDO1FBQ2xDLGFBQWEsQ0FBQyx1QkFBdUIsR0FBRyxLQUFLLENBQUM7UUFDOUMsYUFBYSxDQUFDLElBQUksR0FBRyxFQUFFLENBQUM7UUFDeEIsYUFBYSxDQUFDLEtBQUssR0FBRyxDQUFDLEdBQUcsQ0FBQztRQUMzQixhQUFhLENBQUMsTUFBTSxHQUFHLEVBQUUsQ0FBQztRQUUxQixhQUFhLENBQUMsUUFBUSxHQUFHLEdBQUcsQ0FBQztRQUM3QixZQUFZLENBQUMsT0FBTyxDQUFDLFVBQUEsS0FBSztZQUN0QixLQUFLLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDO1FBQ3hFLENBQUMsQ0FBQyxDQUFDO1FBRUgsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLEdBQUcsR0FBRyxDQUFDO1FBRzFCLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxHQUFHLEdBQUcsQ0FBQztRQUMzQixJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQztJQUM1QixDQUFDO0lBR08sZ0NBQVcsR0FBbkI7UUFDSSxJQUFJLEtBQUssR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDLEtBQUssQ0FBQztRQUN6QyxJQUFJLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDLE1BQU0sQ0FBQztRQUMzQyxJQUFJLEtBQUssR0FBRyxNQUFNLEdBQUcsR0FBRyxFQUFFO1lBQ3RCLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQztTQUNyQjthQUFNO1lBQ0gsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDO1NBQ3BCO0lBQ0wsQ0FBQztJQUdPLCtCQUFVLEdBQWxCO1FBQ0ksSUFBSSxJQUFJLENBQUMsWUFBWSxLQUFLLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDbkMsT0FBTztTQUNWO1FBRUQsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDO1FBRWhDLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQztRQUM5QixJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUM7UUFFN0IscUJBQVMsQ0FBQyxVQUFVLENBQUMsZUFBZSxHQUFHLENBQUMsQ0FBQztRQUN6QyxxQkFBUyxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUM7UUFFM0IsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsS0FBSyxHQUFHLEdBQUcsQ0FBQztRQUVyQyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDO1FBQ2hDLElBQUksQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDO1FBQ2hELElBQUksQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLEdBQUcsRUFBRSxDQUFDO1FBQ2hELElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFBO1FBRTlELElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7UUFDakMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxZQUFZLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUM7UUFDakQsSUFBSSxDQUFDLFNBQVMsQ0FBQyxZQUFZLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEtBQUssR0FBRyxFQUFFLENBQUM7UUFDbEQsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztRQUNqRSxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDbEMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxZQUFZLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQztRQUNuRCxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDbkMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQztRQUNoRCxJQUFJLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBRWxELElBQUksQ0FBQyxjQUFjLENBQUMsUUFBUSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUNuQyxJQUFJLGFBQWEsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLFlBQVksQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDaEUsSUFBSSxhQUFhLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxZQUFZLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ2hFLElBQUksWUFBWSxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsUUFBUSxDQUFDO1FBRWhELGFBQWEsQ0FBQyx1QkFBdUIsR0FBRyxLQUFLLENBQUM7UUFDOUMsYUFBYSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUM7UUFDbEMsYUFBYSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUM7UUFDakMsYUFBYSxDQUFDLEtBQUssR0FBRyxFQUFFLENBQUM7UUFDekIsYUFBYSxDQUFDLElBQUksR0FBRyxHQUFHLENBQUM7UUFDekIsYUFBYSxDQUFDLE1BQU0sR0FBRyxFQUFFLENBQUM7UUFFMUIsYUFBYSxDQUFDLFFBQVEsR0FBRyxFQUFFLENBQUM7UUFDNUIsWUFBWSxDQUFDLE9BQU8sQ0FBQyxVQUFBLEtBQUs7WUFDdEIsS0FBSyxDQUFDLEtBQUssR0FBRyxHQUFHLENBQUM7UUFDdEIsQ0FBQyxDQUFDLENBQUM7UUFFSCxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssR0FBRyxHQUFHLENBQUM7SUFDOUIsQ0FBQztJQUdPLDhCQUFTLEdBQWpCO1FBQ0ksSUFBSSxJQUFJLENBQUMsZUFBZSxLQUFLLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDdEMsT0FBTztTQUNWO1FBRUQsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDO1FBQ25DLElBQUksS0FBSyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ3pDLElBQUksTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUMsTUFBTSxDQUFDO1FBRTNDLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQztRQUM5QixJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUM7UUFHN0IscUJBQVMsQ0FBQyxVQUFVLENBQUMsZUFBZSxHQUFHLENBQUMsQ0FBQztRQUN6QyxxQkFBUyxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUM7UUFFM0IsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsS0FBSyxHQUFHLEdBQUcsQ0FBQztRQUVyQyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDO1FBQ2hDLElBQUksQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDO1FBQ2hELElBQUksQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLEdBQUcsRUFBRSxDQUFDO1FBQ2hELElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFBO1FBRTlELElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7UUFDakMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxZQUFZLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUM7UUFDakQsSUFBSSxDQUFDLFNBQVMsQ0FBQyxZQUFZLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEtBQUssR0FBRyxFQUFFLENBQUM7UUFDbEQsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztRQUNqRSxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDbEMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxZQUFZLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQztRQUNuRCxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDbkMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQztRQUNoRCxJQUFJLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBRWxELElBQUksQ0FBQyxjQUFjLENBQUMsUUFBUSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUNuQyxJQUFJLGFBQWEsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLFlBQVksQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDaEUsSUFBSSxhQUFhLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxZQUFZLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ2hFLElBQUksWUFBWSxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsUUFBUSxDQUFDO1FBRWhELGFBQWEsQ0FBQyx1QkFBdUIsR0FBRyxLQUFLLENBQUM7UUFDOUMsYUFBYSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUM7UUFDbEMsYUFBYSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUM7UUFDakMsYUFBYSxDQUFDLEtBQUssR0FBRyxFQUFFLENBQUM7UUFDekIsYUFBYSxDQUFDLElBQUksR0FBRyxHQUFHLENBQUM7UUFDekIsYUFBYSxDQUFDLE1BQU0sR0FBRyxFQUFFLENBQUM7UUFFMUIsYUFBYSxDQUFDLFFBQVEsR0FBRyxFQUFFLENBQUM7UUFFNUIsWUFBWSxDQUFDLE9BQU8sQ0FBQyxVQUFBLEtBQUs7WUFDdEIsS0FBSyxDQUFDLEtBQUssR0FBRyxHQUFHLENBQUM7UUFDdEIsQ0FBQyxDQUFDLENBQUM7UUFFSCxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssR0FBRyxHQUFHLENBQUM7UUFHMUIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLEdBQUcsR0FBRyxDQUFDO1FBQzNCLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDO1FBQ3ZCLDhCQUE4QjtRQUU5Qiw0Q0FBNEM7UUFFNUMsdUNBQXVDO1FBQ3ZDLHVEQUF1RDtRQUN2RCx1REFBdUQ7UUFDdkQscUVBQXFFO1FBRXJFLHdDQUF3QztRQUN4Qyx3REFBd0Q7UUFDeEQseURBQXlEO1FBQ3pELHdFQUF3RTtRQUN4RSw0Q0FBNEM7UUFDNUMsNkRBQTZEO1FBQzdELDZDQUE2QztRQUM3QywwREFBMEQ7UUFDMUQsNERBQTREO1FBRTVELDBDQUEwQztRQUMxQyx1RUFBdUU7UUFDdkUsdUVBQXVFO1FBQ3ZFLDBEQUEwRDtRQUUxRCxvREFBb0Q7UUFDcEQsMENBQTBDO1FBQzFDLDRDQUE0QztRQUM1QyxtQ0FBbUM7UUFDbkMsb0NBQW9DO1FBRXBDLG1DQUFtQztRQUNuQyx5Q0FBeUM7UUFDekMsZ0ZBQWdGO1FBQ2hGLGFBQWE7UUFDYixXQUFXO1FBRVgsNENBQTRDO1FBRTVDLHVDQUF1QztRQUN2Qyx1REFBdUQ7UUFDdkQsdURBQXVEO1FBQ3ZELHFFQUFxRTtRQUVyRSx3Q0FBd0M7UUFDeEMsd0RBQXdEO1FBQ3hELHlEQUF5RDtRQUN6RCx3RUFBd0U7UUFDeEUsNENBQTRDO1FBQzVDLDZEQUE2RDtRQUM3RCw2Q0FBNkM7UUFDN0MsMERBQTBEO1FBQzFELDREQUE0RDtRQUU1RCwwQ0FBMEM7UUFDMUMsdUVBQXVFO1FBQ3ZFLDBFQUEwRTtRQUMxRSwwREFBMEQ7UUFFMUQsb0RBQW9EO1FBQ3BELDBDQUEwQztRQUMxQyw0Q0FBNEM7UUFDNUMsbUNBQW1DO1FBQ25DLG9DQUFvQztRQUVwQyxzQ0FBc0M7UUFDdEMseUNBQXlDO1FBQ3pDLGdGQUFnRjtRQUNoRixhQUFhO1FBQ2IsSUFBSTtJQUNSLENBQUM7SUFHUywyQkFBTSxHQUFoQixVQUFpQixFQUFVO1FBQ3ZCLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUN4QixDQUFDO0lBcFhEO1FBREMsUUFBUSxDQUFDLHdCQUFjLENBQUM7aURBQ1E7SUFFakM7UUFEQyxRQUFRLENBQUMsd0JBQWMsQ0FBQztnREFDTztJQUVoQztRQURDLFFBQVEsQ0FBQyx3QkFBYyxDQUFDO3NEQUNhO0lBR3RDO1FBREMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUM7bURBQ1U7SUFFNUI7UUFEQyxRQUFRLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQzsrQ0FDTTtJQUl4QjtRQURDLFFBQVEsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDO2lEQUNRO0lBRzFCO1FBREMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUM7Z0RBQ087SUFHekI7UUFEQyxRQUFRLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQztpREFDUTtJQUUxQjtRQURDLFFBQVEsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDO2lEQUNRO0lBeEJULFVBQVU7UUFEOUIsT0FBTztPQUNhLFVBQVUsQ0F3WDlCO0lBQUQsaUJBQUM7Q0F4WEQsQUF3WEMsQ0F4WHVDLEVBQUUsQ0FBQyxTQUFTLEdBd1huRDtrQkF4WG9CLFVBQVUiLCJmaWxlIjoiIiwic291cmNlUm9vdCI6Ii8iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQmFzZUNvbnRyb2xsZXIgZnJvbSBcIi4uL0NvbnRyb2xsZXIvQmFzZUNvbnRyb2xsZXJcIjtcclxuaW1wb3J0IENvaW5Db250cm9sbGVyIGZyb20gXCIuLi9Db250cm9sbGVyL0NvaW5Db250cm9sbGVyXCI7XHJcbmltcG9ydCB7IENvbnN0YW50cyB9IGZyb20gXCIuLi9EYXRhL2NvbnN0YW50c1wiO1xyXG5cclxuY29uc3QgeyBjY2NsYXNzLCBwcm9wZXJ0eSB9ID0gY2MuX2RlY29yYXRvcjtcclxuXHJcbkBjY2NsYXNzXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJlc3BvbnNpdmUgZXh0ZW5kcyBjYy5Db21wb25lbnQge1xyXG5cclxuICAgIEBwcm9wZXJ0eShCYXNlQ29udHJvbGxlcilcclxuICAgIGVuZW15QmFzZTogQmFzZUNvbnRyb2xsZXIgPSBudWxsO1xyXG4gICAgQHByb3BlcnR5KEJhc2VDb250cm9sbGVyKVxyXG4gICAgYWxseUJhc2U6IEJhc2VDb250cm9sbGVyID0gbnVsbDtcclxuICAgIEBwcm9wZXJ0eShDb2luQ29udHJvbGxlcilcclxuICAgIENvaW5Db250cm9sbGVyOiBDb2luQ29udHJvbGxlciA9IG51bGw7XHJcblxyXG4gICAgQHByb3BlcnR5KGNjLk5vZGUpXHJcbiAgICBFbnZpcm9ubWVudDogY2MuTm9kZSA9IG51bGw7XHJcbiAgICBAcHJvcGVydHkoY2MuTm9kZSlcclxuICAgIE9wdGlvbnM6IGNjLk5vZGUgPSBudWxsO1xyXG5cclxuXHJcbiAgICBAcHJvcGVydHkoY2MuTm9kZSlcclxuICAgIHNwZWVkTGluZTogY2MuTm9kZSA9IG51bGw7XHJcblxyXG4gICAgQHByb3BlcnR5KGNjLk5vZGUpXHJcbiAgICBDVEFfbG9nbzogY2MuTm9kZSA9IG51bGw7XHJcblxyXG4gICAgQHByb3BlcnR5KGNjLk5vZGUpXHJcbiAgICBIb3JfRGVjb3I6IGNjLk5vZGUgPSBudWxsO1xyXG4gICAgQHByb3BlcnR5KGNjLk5vZGUpXHJcbiAgICBWZXJfRGVjb3I6IGNjLk5vZGUgPSBudWxsO1xyXG5cclxuICAgIEZyYW1lRm9vZDogY2MuTm9kZSA9IG51bGw7XHJcbiAgICBMb2FkRm9vZDogY2MuTm9kZSA9IG51bGw7XHJcbiAgICBPcHRpb25zX0xheW91dDogY2MuTm9kZSA9IG51bGw7XHJcblxyXG4gICAgLy8gc3RhdGVcclxuICAgIGRldmljZTogc3RyaW5nID0gXCJcIjtcclxuICAgIGlzUm90YXRlOiBib29sZWFuID0gZmFsc2U7XHJcblxyXG4gICAgSE9SSVpPTlRBTF9JUFg6IHN0cmluZyA9IFwiaG9yaXpvbnRhbF9JUFhcIjtcclxuICAgIEhPUklaT05UQUxfVEFCTEVUOiBzdHJpbmcgPSBcImhvcml6b250YWxfVGFibGV0XCI7XHJcbiAgICBWRVJUSUNBTF9JUFg6IHN0cmluZyA9IFwidmVydGljYWxfSVBYXCI7XHJcbiAgICBWRVJUSUNBTF9NT0JJTEU6IHN0cmluZyA9IFwidmVydGljYWxfTW9iaWxlXCI7XHJcblxyXG5cclxuICAgIHByb3RlY3RlZCBzdGFydCgpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLkZyYW1lRm9vZCA9IHRoaXMuT3B0aW9ucy5nZXRDaGlsZEJ5TmFtZShcIkZyYW1lZm9vZFwiKTtcclxuICAgICAgICB0aGlzLkxvYWRGb29kID0gdGhpcy5PcHRpb25zLmdldENoaWxkQnlOYW1lKFwiTG9hZEZvb2RDb250cm9sbGVyXCIpO1xyXG4gICAgICAgIHRoaXMuT3B0aW9uc19MYXlvdXQgPSB0aGlzLk9wdGlvbnMuZ2V0Q2hpbGRCeU5hbWUoXCJMYXlvdXRcIik7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIHByaXZhdGUgaGFuZGxlUm90YXRlKCk6IHZvaWQge1xyXG4gICAgICAgIGxldCB3aWR0aCA9IGNjLnZpZXcuZ2V0RnJhbWVTaXplKCkud2lkdGg7XHJcbiAgICAgICAgbGV0IGhlaWdodCA9IGNjLnZpZXcuZ2V0RnJhbWVTaXplKCkuaGVpZ2h0O1xyXG4gICAgICAgIGlmICh3aWR0aCA+IGhlaWdodCkge1xyXG4gICAgICAgICAgICBDb25zdGFudHMuaXNSb3RhdGUgPSB0cnVlO1xyXG4gICAgICAgICAgICB0aGlzLnNldEhvcml6b250YWwoKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBDb25zdGFudHMuaXNSb3RhdGUgPSBmYWxzZTtcclxuICAgICAgICAgICAgdGhpcy5zZXRWZXJ0aWNhbCgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcblxyXG4gICAgcHJpdmF0ZSBzZXRIb3Jpem9udGFsKCk6IHZvaWQge1xyXG4gICAgICAgIGxldCB3aWR0aCA9IGNjLnZpZXcuZ2V0RnJhbWVTaXplKCkud2lkdGg7XHJcbiAgICAgICAgbGV0IGhlaWdodCA9IGNjLnZpZXcuZ2V0RnJhbWVTaXplKCkuaGVpZ2h0O1xyXG4gICAgICAgIGlmIChoZWlnaHQgLyB3aWR0aCA8IDAuNjUpIHtcclxuICAgICAgICAgICAgLy8gSXBob25lIDYgLyA2IHBsdXMgLyA3IC8gNyBQbHVzIC8gWFxyXG4gICAgICAgICAgICB0aGlzLnNldEhvcml6b250YWxGb3JJcFgoKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLnNldEhvcml6b250YWxGb3JUYWJsZXQoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG5cclxuICAgIHByaXZhdGUgc2V0SG9yaXpvbnRhbEZvcklwWCgpOiB2b2lkIHtcclxuICAgICAgICBpZiAodGhpcy5IT1JJWk9OVEFMX0lQWCA9PT0gdGhpcy5kZXZpY2UpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICB0aGlzLmRldmljZSA9IHRoaXMuSE9SSVpPTlRBTF9JUFg7XHJcblxyXG4gICAgICAgIHRoaXMuSG9yX0RlY29yLmFjdGl2ZSA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5WZXJfRGVjb3IuYWN0aXZlID0gZmFsc2U7XHJcblxyXG4gICAgICAgIENvbnN0YW50cy5SZXNwb25zaXZlLnNwZWVkQ2FsY3VsYXRlZCA9IDIwO1xyXG4gICAgICAgIENvbnN0YW50cy5zY2FsZUFybXkgPSAwLjU7XHJcblxyXG4gICAgICAgIHRoaXMuQ29pbkNvbnRyb2xsZXIubm9kZS5zY2FsZSA9IDE7XHJcblxyXG4gICAgICAgIHRoaXMuYWxseUJhc2Uubm9kZS5zY2FsZSA9IDE7XHJcbiAgICAgICAgdGhpcy5hbGx5QmFzZS5nZXRDb21wb25lbnQoY2MuV2lkZ2V0KS50b3AgPSAyMTA7XHJcbiAgICAgICAgdGhpcy5hbGx5QmFzZS5nZXRDb21wb25lbnQoY2MuV2lkZ2V0KS5sZWZ0ID0gODA7XHJcbiAgICAgICAgdGhpcy5hbGx5QmFzZS5ub2RlLmdldENoaWxkQnlOYW1lKFwiYmFzZVwiKS5zZXRTY2FsZSgwLjQsIDAuNCk7XHJcblxyXG4gICAgICAgIHRoaXMuZW5lbXlCYXNlLm5vZGUuc2NhbGUgPSAxO1xyXG4gICAgICAgIHRoaXMuZW5lbXlCYXNlLmdldENvbXBvbmVudChjYy5XaWRnZXQpLnRvcCA9IDIxMDtcclxuICAgICAgICB0aGlzLmVuZW15QmFzZS5nZXRDb21wb25lbnQoY2MuV2lkZ2V0KS5yaWdodCA9IDgwO1xyXG4gICAgICAgIHRoaXMuZW5lbXlCYXNlLm5vZGUuZ2V0Q2hpbGRCeU5hbWUoXCJiYXNlXCIpLnNldFNjYWxlKC0wLjQsIDAuNCk7XHJcblxyXG4gICAgICAgIHRoaXMuRnJhbWVGb29kLnNldFNjYWxlKDEwLCAwLjMpO1xyXG4gICAgICAgIHRoaXMuRnJhbWVGb29kLmdldENvbXBvbmVudChjYy5XaWRnZXQpLmJvdHRvbSA9IC01O1xyXG4gICAgICAgIHRoaXMuTG9hZEZvb2Quc2V0U2NhbGUoMC4zMTYsIDAuMzE2KTtcclxuICAgICAgICB0aGlzLkxvYWRGb29kLmdldENvbXBvbmVudChjYy5XaWRnZXQpLmxlZnQgPSAtNTtcclxuICAgICAgICB0aGlzLkxvYWRGb29kLmdldENvbXBvbmVudChjYy5XaWRnZXQpLmJvdHRvbSA9IC0xMDtcclxuXHJcbiAgICAgICAgdGhpcy5PcHRpb25zX0xheW91dC5zZXRTY2FsZSgxLCAxKTtcclxuICAgICAgICBsZXQgb3B0aW9uc1dpZGdldCA9IHRoaXMuT3B0aW9uc19MYXlvdXQuZ2V0Q29tcG9uZW50KGNjLldpZGdldCk7XHJcbiAgICAgICAgbGV0IG9wdGlvbnNMYXlvdXQgPSB0aGlzLk9wdGlvbnNfTGF5b3V0LmdldENvbXBvbmVudChjYy5MYXlvdXQpO1xyXG4gICAgICAgIGxldCBvcHRpb25zQ2hpbGQgPSB0aGlzLk9wdGlvbnNfTGF5b3V0LmNoaWxkcmVuO1xyXG5cclxuICAgICAgICBvcHRpb25zV2lkZ2V0LmlzQWxpZ25MZWZ0ID0gdHJ1ZTtcclxuICAgICAgICBvcHRpb25zV2lkZ2V0LmlzQWxpZ25SaWdodCA9IHRydWU7XHJcbiAgICAgICAgb3B0aW9uc1dpZGdldC5pc0FsaWduSG9yaXpvbnRhbENlbnRlciA9IGZhbHNlO1xyXG4gICAgICAgIG9wdGlvbnNXaWRnZXQubGVmdCA9IDMwO1xyXG4gICAgICAgIG9wdGlvbnNXaWRnZXQucmlnaHQgPSAtMTMwO1xyXG4gICAgICAgIG9wdGlvbnNXaWRnZXQuYm90dG9tID0gNjU7XHJcblxyXG4gICAgICAgIG9wdGlvbnNMYXlvdXQuc3BhY2luZ1ggPSAxNDA7XHJcbiAgICAgICAgb3B0aW9uc0NoaWxkLmZvckVhY2goY2hpbGQgPT4ge1xyXG4gICAgICAgICAgICBjaGlsZC5zY2FsZSA9IDEuMTU7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHRoaXMuQ1RBX2xvZ28uc2NhbGUgPSAwLjQ7XHJcblxyXG4gICAgICAgIHRoaXMuc3BlZWRMaW5lLnNjYWxlID0gMC45O1xyXG4gICAgICAgIHRoaXMuc3BlZWRMaW5lLnkgPSAtMjAwO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICBwcml2YXRlIHNldEhvcml6b250YWxGb3JUYWJsZXQoKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKHRoaXMuSE9SSVpPTlRBTF9UQUJMRVQgPT09IHRoaXMuZGV2aWNlKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuZGV2aWNlID0gdGhpcy5IT1JJWk9OVEFMX1RBQkxFVDtcclxuXHJcbiAgICAgICAgdGhpcy5Ib3JfRGVjb3IuYWN0aXZlID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLlZlcl9EZWNvci5hY3RpdmUgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgQ29uc3RhbnRzLlJlc3BvbnNpdmUuc3BlZWRDYWxjdWxhdGVkID0gMTA7XHJcbiAgICAgICAgQ29uc3RhbnRzLnNjYWxlQXJteSA9IDAuNTtcclxuXHJcbiAgICAgICAgdGhpcy5Db2luQ29udHJvbGxlci5ub2RlLnNjYWxlID0gMTtcclxuXHJcbiAgICAgICAgdGhpcy5hbGx5QmFzZS5ub2RlLnNjYWxlID0gMTtcclxuICAgICAgICB0aGlzLmFsbHlCYXNlLmdldENvbXBvbmVudChjYy5XaWRnZXQpLnRvcCA9IDIxMDtcclxuICAgICAgICB0aGlzLmFsbHlCYXNlLmdldENvbXBvbmVudChjYy5XaWRnZXQpLmxlZnQgPSA4MDtcclxuICAgICAgICB0aGlzLmFsbHlCYXNlLm5vZGUuZ2V0Q2hpbGRCeU5hbWUoXCJiYXNlXCIpLnNldFNjYWxlKDAuNCwgMC40KTtcclxuXHJcbiAgICAgICAgdGhpcy5lbmVteUJhc2Uubm9kZS5zY2FsZSA9IDE7XHJcbiAgICAgICAgdGhpcy5lbmVteUJhc2UuZ2V0Q29tcG9uZW50KGNjLldpZGdldCkudG9wID0gMjEwO1xyXG4gICAgICAgIHRoaXMuZW5lbXlCYXNlLmdldENvbXBvbmVudChjYy5XaWRnZXQpLnJpZ2h0ID0gODA7XHJcbiAgICAgICAgdGhpcy5lbmVteUJhc2Uubm9kZS5nZXRDaGlsZEJ5TmFtZShcImJhc2VcIikuc2V0U2NhbGUoLTAuNCwgMC40KTtcclxuXHJcbiAgICAgICAgdGhpcy5GcmFtZUZvb2Quc2V0U2NhbGUoMTAsIDAuMyk7XHJcbiAgICAgICAgdGhpcy5GcmFtZUZvb2QuZ2V0Q29tcG9uZW50KGNjLldpZGdldCkuYm90dG9tID0gLTU7XHJcbiAgICAgICAgdGhpcy5Mb2FkRm9vZC5zZXRTY2FsZSgwLjMxNiwgMC4zMTYpO1xyXG4gICAgICAgIHRoaXMuTG9hZEZvb2QuZ2V0Q29tcG9uZW50KGNjLldpZGdldCkubGVmdCA9IC01O1xyXG4gICAgICAgIHRoaXMuTG9hZEZvb2QuZ2V0Q29tcG9uZW50KGNjLldpZGdldCkuYm90dG9tID0gLTEwO1xyXG5cclxuICAgICAgICB0aGlzLk9wdGlvbnNfTGF5b3V0LnNldFNjYWxlKDEsIDEpO1xyXG4gICAgICAgIGxldCBvcHRpb25zV2lkZ2V0ID0gdGhpcy5PcHRpb25zX0xheW91dC5nZXRDb21wb25lbnQoY2MuV2lkZ2V0KTtcclxuICAgICAgICBsZXQgb3B0aW9uc0xheW91dCA9IHRoaXMuT3B0aW9uc19MYXlvdXQuZ2V0Q29tcG9uZW50KGNjLkxheW91dCk7XHJcbiAgICAgICAgbGV0IG9wdGlvbnNDaGlsZCA9IHRoaXMuT3B0aW9uc19MYXlvdXQuY2hpbGRyZW47XHJcblxyXG4gICAgICAgIG9wdGlvbnNXaWRnZXQuaXNBbGlnbkxlZnQgPSB0cnVlO1xyXG4gICAgICAgIG9wdGlvbnNXaWRnZXQuaXNBbGlnblJpZ2h0ID0gdHJ1ZTtcclxuICAgICAgICBvcHRpb25zV2lkZ2V0LmlzQWxpZ25Ib3Jpem9udGFsQ2VudGVyID0gZmFsc2U7XHJcbiAgICAgICAgb3B0aW9uc1dpZGdldC5sZWZ0ID0gMzA7XHJcbiAgICAgICAgb3B0aW9uc1dpZGdldC5yaWdodCA9IC0xMzA7XHJcbiAgICAgICAgb3B0aW9uc1dpZGdldC5ib3R0b20gPSA2NTtcclxuXHJcbiAgICAgICAgb3B0aW9uc0xheW91dC5zcGFjaW5nWCA9IDEyMDtcclxuICAgICAgICBvcHRpb25zQ2hpbGQuZm9yRWFjaChjaGlsZCA9PiB7XHJcbiAgICAgICAgICAgIGNoaWxkLm5hbWUuaW5jbHVkZXMoXCJPcFwiKSA/IGNoaWxkLnNjYWxlID0gMS4xNSA6IGNoaWxkLnNjYWxlID0gMC40MTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgdGhpcy5DVEFfbG9nby5zY2FsZSA9IDAuNDtcclxuXHJcblxyXG4gICAgICAgIHRoaXMuc3BlZWRMaW5lLnNjYWxlID0gMC42O1xyXG4gICAgICAgIHRoaXMuc3BlZWRMaW5lLnkgPSAtMTgwO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICBwcml2YXRlIHNldFZlcnRpY2FsKCk6IHZvaWQge1xyXG4gICAgICAgIGxldCB3aWR0aCA9IGNjLnZpZXcuZ2V0RnJhbWVTaXplKCkud2lkdGg7XHJcbiAgICAgICAgbGV0IGhlaWdodCA9IGNjLnZpZXcuZ2V0RnJhbWVTaXplKCkuaGVpZ2h0O1xyXG4gICAgICAgIGlmICh3aWR0aCAvIGhlaWdodCA8IDAuNSkge1xyXG4gICAgICAgICAgICB0aGlzLnNldElwaG9uZVgoKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLnNldE1vYmlsZSgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcblxyXG4gICAgcHJpdmF0ZSBzZXRJcGhvbmVYKCk6IHZvaWQge1xyXG4gICAgICAgIGlmICh0aGlzLlZFUlRJQ0FMX0lQWCA9PT0gdGhpcy5kZXZpY2UpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5kZXZpY2UgPSB0aGlzLlZFUlRJQ0FMX0lQWDtcclxuXHJcbiAgICAgICAgdGhpcy5Ib3JfRGVjb3IuYWN0aXZlID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5WZXJfRGVjb3IuYWN0aXZlID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgQ29uc3RhbnRzLlJlc3BvbnNpdmUuc3BlZWRDYWxjdWxhdGVkID0gMDtcclxuICAgICAgICBDb25zdGFudHMuc2NhbGVBcm15ID0gMC4yNTtcclxuXHJcbiAgICAgICAgdGhpcy5Db2luQ29udHJvbGxlci5ub2RlLnNjYWxlID0gMC44O1xyXG5cclxuICAgICAgICB0aGlzLmFsbHlCYXNlLm5vZGUuc2NhbGUgPSAwLjg1O1xyXG4gICAgICAgIHRoaXMuYWxseUJhc2UuZ2V0Q29tcG9uZW50KGNjLldpZGdldCkudG9wID0gMjIwO1xyXG4gICAgICAgIHRoaXMuYWxseUJhc2UuZ2V0Q29tcG9uZW50KGNjLldpZGdldCkubGVmdCA9IDMwO1xyXG4gICAgICAgIHRoaXMuYWxseUJhc2Uubm9kZS5nZXRDaGlsZEJ5TmFtZShcImJhc2VcIikuc2V0U2NhbGUoMC4yNSwgMC4yNSlcclxuXHJcbiAgICAgICAgdGhpcy5lbmVteUJhc2Uubm9kZS5zY2FsZSA9IDAuODU7XHJcbiAgICAgICAgdGhpcy5lbmVteUJhc2UuZ2V0Q29tcG9uZW50KGNjLldpZGdldCkudG9wID0gMjIwO1xyXG4gICAgICAgIHRoaXMuZW5lbXlCYXNlLmdldENvbXBvbmVudChjYy5XaWRnZXQpLnJpZ2h0ID0gMzA7XHJcbiAgICAgICAgdGhpcy5lbmVteUJhc2Uubm9kZS5nZXRDaGlsZEJ5TmFtZShcImJhc2VcIikuc2V0U2NhbGUoLTAuMjUsIDAuMjUpO1xyXG4gICAgICAgIHRoaXMuRnJhbWVGb29kLnNldFNjYWxlKDEwLCAwLjI1KTtcclxuICAgICAgICB0aGlzLkZyYW1lRm9vZC5nZXRDb21wb25lbnQoY2MuV2lkZ2V0KS5ib3R0b20gPSAtNTtcclxuICAgICAgICB0aGlzLkxvYWRGb29kLnNldFNjYWxlKDAuMjIsIDAuMjQpO1xyXG4gICAgICAgIHRoaXMuTG9hZEZvb2QuZ2V0Q29tcG9uZW50KGNjLldpZGdldCkubGVmdCA9IC0yO1xyXG4gICAgICAgIHRoaXMuTG9hZEZvb2QuZ2V0Q29tcG9uZW50KGNjLldpZGdldCkuYm90dG9tID0gLTI7XHJcbiAgICAgICAgXHJcbiAgICAgICAgdGhpcy5PcHRpb25zX0xheW91dC5zZXRTY2FsZSgxLCAxKTtcclxuICAgICAgICBsZXQgb3B0aW9uc1dpZGdldCA9IHRoaXMuT3B0aW9uc19MYXlvdXQuZ2V0Q29tcG9uZW50KGNjLldpZGdldCk7XHJcbiAgICAgICAgbGV0IG9wdGlvbnNMYXlvdXQgPSB0aGlzLk9wdGlvbnNfTGF5b3V0LmdldENvbXBvbmVudChjYy5MYXlvdXQpO1xyXG4gICAgICAgIGxldCBvcHRpb25zQ2hpbGQgPSB0aGlzLk9wdGlvbnNfTGF5b3V0LmNoaWxkcmVuO1xyXG4gICAgICAgIFxyXG4gICAgICAgIG9wdGlvbnNXaWRnZXQuaXNBbGlnbkhvcml6b250YWxDZW50ZXIgPSBmYWxzZTtcclxuICAgICAgICBvcHRpb25zV2lkZ2V0LmlzQWxpZ25SaWdodCA9IHRydWU7XHJcbiAgICAgICAgb3B0aW9uc1dpZGdldC5pc0FsaWduTGVmdCA9IHRydWU7XHJcbiAgICAgICAgb3B0aW9uc1dpZGdldC5yaWdodCA9IDY3O1xyXG4gICAgICAgIG9wdGlvbnNXaWRnZXQubGVmdCA9IDE3NztcclxuICAgICAgICBvcHRpb25zV2lkZ2V0LmJvdHRvbSA9IDM0O1xyXG4gICAgICAgIFxyXG4gICAgICAgIG9wdGlvbnNMYXlvdXQuc3BhY2luZ1ggPSA1NTtcclxuICAgICAgICBvcHRpb25zQ2hpbGQuZm9yRWFjaChjaGlsZCA9PiB7XHJcbiAgICAgICAgICAgIGNoaWxkLnNjYWxlID0gMC42O1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB0aGlzLkNUQV9sb2dvLnNjYWxlID0gMC4zO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICBwcml2YXRlIHNldE1vYmlsZSgpOiB2b2lkIHtcclxuICAgICAgICBpZiAodGhpcy5WRVJUSUNBTF9NT0JJTEUgPT09IHRoaXMuZGV2aWNlKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuZGV2aWNlID0gdGhpcy5WRVJUSUNBTF9NT0JJTEU7XHJcbiAgICAgICAgbGV0IHdpZHRoID0gY2Mudmlldy5nZXRGcmFtZVNpemUoKS53aWR0aDtcclxuICAgICAgICBsZXQgaGVpZ2h0ID0gY2Mudmlldy5nZXRGcmFtZVNpemUoKS5oZWlnaHQ7XHJcblxyXG4gICAgICAgIHRoaXMuSG9yX0RlY29yLmFjdGl2ZSA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuVmVyX0RlY29yLmFjdGl2ZSA9IHRydWU7XHJcblxyXG5cclxuICAgICAgICBDb25zdGFudHMuUmVzcG9uc2l2ZS5zcGVlZENhbGN1bGF0ZWQgPSAwO1xyXG4gICAgICAgIENvbnN0YW50cy5zY2FsZUFybXkgPSAwLjI1O1xyXG5cclxuICAgICAgICB0aGlzLkNvaW5Db250cm9sbGVyLm5vZGUuc2NhbGUgPSAwLjg7XHJcblxyXG4gICAgICAgIHRoaXMuYWxseUJhc2Uubm9kZS5zY2FsZSA9IDAuODU7XHJcbiAgICAgICAgdGhpcy5hbGx5QmFzZS5nZXRDb21wb25lbnQoY2MuV2lkZ2V0KS50b3AgPSAyMjA7XHJcbiAgICAgICAgdGhpcy5hbGx5QmFzZS5nZXRDb21wb25lbnQoY2MuV2lkZ2V0KS5sZWZ0ID0gMzA7XHJcbiAgICAgICAgdGhpcy5hbGx5QmFzZS5ub2RlLmdldENoaWxkQnlOYW1lKFwiYmFzZVwiKS5zZXRTY2FsZSgwLjI1LCAwLjI1KVxyXG5cclxuICAgICAgICB0aGlzLmVuZW15QmFzZS5ub2RlLnNjYWxlID0gMC44NTtcclxuICAgICAgICB0aGlzLmVuZW15QmFzZS5nZXRDb21wb25lbnQoY2MuV2lkZ2V0KS50b3AgPSAyMjA7XHJcbiAgICAgICAgdGhpcy5lbmVteUJhc2UuZ2V0Q29tcG9uZW50KGNjLldpZGdldCkucmlnaHQgPSAzMDtcclxuICAgICAgICB0aGlzLmVuZW15QmFzZS5ub2RlLmdldENoaWxkQnlOYW1lKFwiYmFzZVwiKS5zZXRTY2FsZSgtMC4yNSwgMC4yNSk7XHJcbiAgICAgICAgdGhpcy5GcmFtZUZvb2Quc2V0U2NhbGUoMTAsIDAuMjUpO1xyXG4gICAgICAgIHRoaXMuRnJhbWVGb29kLmdldENvbXBvbmVudChjYy5XaWRnZXQpLmJvdHRvbSA9IC01O1xyXG4gICAgICAgIHRoaXMuTG9hZEZvb2Quc2V0U2NhbGUoMC4yMiwgMC4yNCk7XHJcbiAgICAgICAgdGhpcy5Mb2FkRm9vZC5nZXRDb21wb25lbnQoY2MuV2lkZ2V0KS5sZWZ0ID0gLTI7XHJcbiAgICAgICAgdGhpcy5Mb2FkRm9vZC5nZXRDb21wb25lbnQoY2MuV2lkZ2V0KS5ib3R0b20gPSAtMjtcclxuICAgICAgICBcclxuICAgICAgICB0aGlzLk9wdGlvbnNfTGF5b3V0LnNldFNjYWxlKDEsIDEpO1xyXG4gICAgICAgIGxldCBvcHRpb25zV2lkZ2V0ID0gdGhpcy5PcHRpb25zX0xheW91dC5nZXRDb21wb25lbnQoY2MuV2lkZ2V0KTtcclxuICAgICAgICBsZXQgb3B0aW9uc0xheW91dCA9IHRoaXMuT3B0aW9uc19MYXlvdXQuZ2V0Q29tcG9uZW50KGNjLkxheW91dCk7XHJcbiAgICAgICAgbGV0IG9wdGlvbnNDaGlsZCA9IHRoaXMuT3B0aW9uc19MYXlvdXQuY2hpbGRyZW47XHJcbiAgICAgICAgXHJcbiAgICAgICAgb3B0aW9uc1dpZGdldC5pc0FsaWduSG9yaXpvbnRhbENlbnRlciA9IGZhbHNlO1xyXG4gICAgICAgIG9wdGlvbnNXaWRnZXQuaXNBbGlnblJpZ2h0ID0gdHJ1ZTtcclxuICAgICAgICBvcHRpb25zV2lkZ2V0LmlzQWxpZ25MZWZ0ID0gdHJ1ZTtcclxuICAgICAgICBvcHRpb25zV2lkZ2V0LnJpZ2h0ID0gNjc7XHJcbiAgICAgICAgb3B0aW9uc1dpZGdldC5sZWZ0ID0gMTc3O1xyXG4gICAgICAgIG9wdGlvbnNXaWRnZXQuYm90dG9tID0gMzQ7XHJcbiAgICAgICAgXHJcbiAgICAgICAgb3B0aW9uc0xheW91dC5zcGFjaW5nWCA9IDU1O1xyXG5cclxuICAgICAgICBvcHRpb25zQ2hpbGQuZm9yRWFjaChjaGlsZCA9PiB7XHJcbiAgICAgICAgICAgIGNoaWxkLnNjYWxlID0gMC42O1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB0aGlzLkNUQV9sb2dvLnNjYWxlID0gMC4zO1xyXG5cclxuXHJcbiAgICAgICAgdGhpcy5zcGVlZExpbmUuc2NhbGUgPSAwLjM7XHJcbiAgICAgICAgdGhpcy5zcGVlZExpbmUueSA9IC05MDtcclxuICAgICAgICAvLyBpZiAoaGVpZ2h0IC8gd2lkdGggPiAxLjUpIHtcclxuICAgICAgICAgIFxyXG4gICAgICAgIC8vICAgICB0aGlzLkNvaW5Db250cm9sbGVyLm5vZGUuc2NhbGUgPSAwLjg7XHJcblxyXG4gICAgICAgIC8vICAgICB0aGlzLmFsbHlCYXNlLm5vZGUuc2NhbGUgPSAwLjg1O1xyXG4gICAgICAgIC8vICAgICB0aGlzLmFsbHlCYXNlLmdldENvbXBvbmVudChjYy5XaWRnZXQpLnRvcCA9IDIyMDtcclxuICAgICAgICAvLyAgICAgdGhpcy5hbGx5QmFzZS5nZXRDb21wb25lbnQoY2MuV2lkZ2V0KS5sZWZ0ID0gMzA7XHJcbiAgICAgICAgLy8gICAgIHRoaXMuYWxseUJhc2Uubm9kZS5nZXRDaGlsZEJ5TmFtZShcImJhc2VcIikuc2V0U2NhbGUoMC4yNSwgMC4yNSlcclxuICAgIFxyXG4gICAgICAgIC8vICAgICB0aGlzLmVuZW15QmFzZS5ub2RlLnNjYWxlID0gMC44NTtcclxuICAgICAgICAvLyAgICAgdGhpcy5lbmVteUJhc2UuZ2V0Q29tcG9uZW50KGNjLldpZGdldCkudG9wID0gMjIwO1xyXG4gICAgICAgIC8vICAgICB0aGlzLmVuZW15QmFzZS5nZXRDb21wb25lbnQoY2MuV2lkZ2V0KS5yaWdodCA9IDMwO1xyXG4gICAgICAgIC8vICAgICB0aGlzLmVuZW15QmFzZS5ub2RlLmdldENoaWxkQnlOYW1lKFwiYmFzZVwiKS5zZXRTY2FsZSgtMC4yNSwgMC4yNSk7XHJcbiAgICAgICAgLy8gICAgIC8vIHRoaXMuRnJhbWVGb29kLnNldFNjYWxlKDEwLCAwLjEzKTtcclxuICAgICAgICAvLyAgICAgLy8gdGhpcy5GcmFtZUZvb2QuZ2V0Q29tcG9uZW50KGNjLldpZGdldCkuYm90dG9tID0gLTU7XHJcbiAgICAgICAgLy8gICAgIC8vIHRoaXMuTG9hZEZvb2Quc2V0U2NhbGUoMC4xMiwgMC4xMik7XHJcbiAgICAgICAgLy8gICAgIC8vIHRoaXMuTG9hZEZvb2QuZ2V0Q29tcG9uZW50KGNjLldpZGdldCkubGVmdCA9IC0yO1xyXG4gICAgICAgIC8vICAgICAvLyB0aGlzLkxvYWRGb29kLmdldENvbXBvbmVudChjYy5XaWRnZXQpLmJvdHRvbSA9IC0yO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAvLyAgICAgdGhpcy5PcHRpb25zX0xheW91dC5zZXRTY2FsZSgxLCAxKTtcclxuICAgICAgICAvLyAgICAgbGV0IG9wdGlvbnNXaWRnZXQgPSB0aGlzLk9wdGlvbnNfTGF5b3V0LmdldENvbXBvbmVudChjYy5XaWRnZXQpO1xyXG4gICAgICAgIC8vICAgICBsZXQgb3B0aW9uc0xheW91dCA9IHRoaXMuT3B0aW9uc19MYXlvdXQuZ2V0Q29tcG9uZW50KGNjLkxheW91dCk7XHJcbiAgICAgICAgLy8gICAgIC8vIGxldCBvcHRpb25zQ2hpbGQgPSB0aGlzLk9wdGlvbnNfTGF5b3V0LmNoaWxkcmVuO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAvLyAgICAgb3B0aW9uc1dpZGdldC5pc0FsaWduSG9yaXpvbnRhbENlbnRlciA9IHRydWU7XHJcbiAgICAgICAgLy8gICAgIG9wdGlvbnNXaWRnZXQuaXNBbGlnblJpZ2h0ID0gZmFsc2U7XHJcbiAgICAgICAgLy8gICAgIC8vIG9wdGlvbnNXaWRnZXQuaXNBbGlnbkxlZnQgPSBmYWxzZTtcclxuICAgICAgICAvLyAgICAgLy8gb3B0aW9uc1dpZGdldC5yaWdodCA9IDMwO1xyXG4gICAgICAgIC8vICAgICAvLyBvcHRpb25zV2lkZ2V0LmJvdHRvbSA9IDM1O1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAvLyAgICAgb3B0aW9uc0xheW91dC5zcGFjaW5nWCA9IDcwO1xyXG4gICAgICAgIC8vICAgICAvLyBvcHRpb25zQ2hpbGQuZm9yRWFjaChjaGlsZCA9PiB7XHJcbiAgICAgICAgLy8gICAgIC8vICAgICBjaGlsZC5uYW1lLmluY2x1ZGVzKFwiT3BcIikgPyBjaGlsZC5zY2FsZSA9IDAuNSA6IGNoaWxkLnNjYWxlID0gMC4yO1xyXG4gICAgICAgIC8vICAgICAvLyB9KTtcclxuICAgICAgICAvLyB9IGVsc2Uge1xyXG5cclxuICAgICAgICAvLyAgICAgdGhpcy5Db2luQ29udHJvbGxlci5ub2RlLnNjYWxlID0gMC44O1xyXG5cclxuICAgICAgICAvLyAgICAgdGhpcy5hbGx5QmFzZS5ub2RlLnNjYWxlID0gMC44NTtcclxuICAgICAgICAvLyAgICAgdGhpcy5hbGx5QmFzZS5nZXRDb21wb25lbnQoY2MuV2lkZ2V0KS50b3AgPSAyMjA7XHJcbiAgICAgICAgLy8gICAgIHRoaXMuYWxseUJhc2UuZ2V0Q29tcG9uZW50KGNjLldpZGdldCkubGVmdCA9IDMwO1xyXG4gICAgICAgIC8vICAgICB0aGlzLmFsbHlCYXNlLm5vZGUuZ2V0Q2hpbGRCeU5hbWUoXCJiYXNlXCIpLnNldFNjYWxlKDAuMjUsIDAuMjUpXHJcbiAgICBcclxuICAgICAgICAvLyAgICAgdGhpcy5lbmVteUJhc2Uubm9kZS5zY2FsZSA9IDAuODU7XHJcbiAgICAgICAgLy8gICAgIHRoaXMuZW5lbXlCYXNlLmdldENvbXBvbmVudChjYy5XaWRnZXQpLnRvcCA9IDIyMDtcclxuICAgICAgICAvLyAgICAgdGhpcy5lbmVteUJhc2UuZ2V0Q29tcG9uZW50KGNjLldpZGdldCkucmlnaHQgPSAzMDtcclxuICAgICAgICAvLyAgICAgdGhpcy5lbmVteUJhc2Uubm9kZS5nZXRDaGlsZEJ5TmFtZShcImJhc2VcIikuc2V0U2NhbGUoLTAuMjUsIDAuMjUpO1xyXG4gICAgICAgIC8vICAgICAvLyB0aGlzLkZyYW1lRm9vZC5zZXRTY2FsZSgxMCwgMC4xMyk7XHJcbiAgICAgICAgLy8gICAgIC8vIHRoaXMuRnJhbWVGb29kLmdldENvbXBvbmVudChjYy5XaWRnZXQpLmJvdHRvbSA9IC01O1xyXG4gICAgICAgIC8vICAgICAvLyB0aGlzLkxvYWRGb29kLnNldFNjYWxlKDAuMTIsIDAuMTIpO1xyXG4gICAgICAgIC8vICAgICAvLyB0aGlzLkxvYWRGb29kLmdldENvbXBvbmVudChjYy5XaWRnZXQpLmxlZnQgPSAtMjtcclxuICAgICAgICAvLyAgICAgLy8gdGhpcy5Mb2FkRm9vZC5nZXRDb21wb25lbnQoY2MuV2lkZ2V0KS5ib3R0b20gPSAtMjtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgLy8gICAgIHRoaXMuT3B0aW9uc19MYXlvdXQuc2V0U2NhbGUoMSwgMSk7XHJcbiAgICAgICAgLy8gICAgIGxldCBvcHRpb25zV2lkZ2V0ID0gdGhpcy5PcHRpb25zX0xheW91dC5nZXRDb21wb25lbnQoY2MuV2lkZ2V0KTtcclxuICAgICAgICAvLyAgICAgLy8gbGV0IG9wdGlvbnNMYXlvdXQgPSB0aGlzLk9wdGlvbnNfTGF5b3V0LmdldENvbXBvbmVudChjYy5MYXlvdXQpO1xyXG4gICAgICAgIC8vICAgICAvLyBsZXQgb3B0aW9uc0NoaWxkID0gdGhpcy5PcHRpb25zX0xheW91dC5jaGlsZHJlbjtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgLy8gICAgIG9wdGlvbnNXaWRnZXQuaXNBbGlnbkhvcml6b250YWxDZW50ZXIgPSB0cnVlO1xyXG4gICAgICAgIC8vICAgICBvcHRpb25zV2lkZ2V0LmlzQWxpZ25SaWdodCA9IGZhbHNlO1xyXG4gICAgICAgIC8vICAgICAvLyBvcHRpb25zV2lkZ2V0LmlzQWxpZ25MZWZ0ID0gZmFsc2U7XHJcbiAgICAgICAgLy8gICAgIC8vIG9wdGlvbnNXaWRnZXQucmlnaHQgPSAzMDtcclxuICAgICAgICAvLyAgICAgLy8gb3B0aW9uc1dpZGdldC5ib3R0b20gPSAzNTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgLy8gICAgIC8vIG9wdGlvbnNMYXlvdXQuc3BhY2luZ1ggPSA1MDtcclxuICAgICAgICAvLyAgICAgLy8gb3B0aW9uc0NoaWxkLmZvckVhY2goY2hpbGQgPT4ge1xyXG4gICAgICAgIC8vICAgICAvLyAgICAgY2hpbGQubmFtZS5pbmNsdWRlcyhcIk9wXCIpID8gY2hpbGQuc2NhbGUgPSAwLjUgOiBjaGlsZC5zY2FsZSA9IDAuMjtcclxuICAgICAgICAvLyAgICAgLy8gfSk7XHJcbiAgICAgICAgLy8gfVxyXG4gICAgfVxyXG5cclxuXHJcbiAgICBwcm90ZWN0ZWQgdXBkYXRlKGR0OiBudW1iZXIpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLmhhbmRsZVJvdGF0ZSgpO1xyXG4gICAgfVxyXG59XHJcbiJdfQ==
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/Plugin/AudioManager.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '4c7cf9rDSJL36cJtz1lUze/', 'AudioManager');
// Script/Plugin/AudioManager.ts

"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var constants_1 = require("../Data/constants");
var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
var AudioManager = /** @class */ (function (_super) {
    __extends(AudioManager, _super);
    function AudioManager() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        // sound 
        _this.bgSound = null;
        _this.clickSound = null;
        _this.buySound = null;
        _this.coinSound = null;
        _this.failSound = null;
        _this.winSound = null;
        _this.Lv2_Kinife = null;
        _this.Lv2_Gun = null;
        _this.Lv2_Tank = null;
        _this.Bg_Attack = null;
        return _this;
    }
    AudioManager.prototype.start = function () {
    };
    AudioManager.prototype.playSound = function (soundName) {
        this.normalNetwork(soundName);
    };
    AudioManager.prototype.normalNetwork = function (soundName) {
        if (constants_1.Constants.ironSource.SoundState && !constants_1.Constants.ironSource.isEndGame) {
            switch (soundName) {
                case "bgSound":
                    this.bgSound.play();
                    break;
                case "Bg_Attack":
                    this.Bg_Attack.play();
                    break;
                case "clickSound":
                    this.clickSound.play();
                    break;
                case "buySound":
                    this.buySound.play();
                    break;
                case "coinSound":
                    this.coinSound.play();
                    break;
                case "failSound":
                    this.failSound.play();
                    break;
                case "winSound":
                    this.winSound.play();
                    break;
                case "Lv2_Kinife":
                    this.Lv2_Kinife.play();
                    break;
                case "Lv2_Gun":
                    this.Lv2_Gun.play();
                    break;
                case "Lv2_Tank":
                    this.Lv2_Tank.play();
                    break;
                default:
                    break;
            }
        }
    };
    AudioManager.prototype.stopSound = function (soundName) {
        switch (soundName) {
            case "bgSound":
                this.bgSound.stop();
                break;
            case "Bg_Attack":
                this.Bg_Attack.stop();
                break;
            case "clickSound":
                this.clickSound.stop();
                break;
            case "buySound":
                this.buySound.stop();
                break;
            case "coinSound":
                this.coinSound.stop();
                break;
            case "failSound":
                this.failSound.stop();
                break;
            case "winSound":
                this.winSound.stop();
                break;
            case "Lv2_Kinife":
                this.Lv2_Kinife.stop();
                break;
            case "Lv2_Gun":
                this.Lv2_Gun.stop();
                break;
            case "Lv2_Tank":
                this.Lv2_Tank.stop();
                break;
            default:
                break;
        }
    };
    AudioManager.prototype.stopAllSound = function () {
        this.Lv2_Kinife.stop();
        this.Lv2_Gun.stop();
        this.Lv2_Tank.stop();
        this.bgSound.stop();
        this.clickSound.stop();
        this.buySound.stop();
        this.coinSound.stop();
        this.Bg_Attack.stop();
    };
    __decorate([
        property(cc.AudioSource)
    ], AudioManager.prototype, "bgSound", void 0);
    __decorate([
        property(cc.AudioSource)
    ], AudioManager.prototype, "clickSound", void 0);
    __decorate([
        property(cc.AudioSource)
    ], AudioManager.prototype, "buySound", void 0);
    __decorate([
        property(cc.AudioSource)
    ], AudioManager.prototype, "coinSound", void 0);
    __decorate([
        property(cc.AudioSource)
    ], AudioManager.prototype, "failSound", void 0);
    __decorate([
        property(cc.AudioSource)
    ], AudioManager.prototype, "winSound", void 0);
    __decorate([
        property(cc.AudioSource)
    ], AudioManager.prototype, "Lv2_Kinife", void 0);
    __decorate([
        property(cc.AudioSource)
    ], AudioManager.prototype, "Lv2_Gun", void 0);
    __decorate([
        property(cc.AudioSource)
    ], AudioManager.prototype, "Lv2_Tank", void 0);
    __decorate([
        property(cc.AudioSource)
    ], AudioManager.prototype, "Bg_Attack", void 0);
    AudioManager = __decorate([
        ccclass
    ], AudioManager);
    return AudioManager;
}(cc.Component));
exports.default = AudioManager;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/Controller/TouchAreaController.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '85711X2lIBGPIPjaJXFSYaE', 'TouchAreaController');
// Script/Controller/TouchAreaController.ts

"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TouchAreaController = void 0;
var constants_1 = require("../Data/constants");
var IronSource_1 = require("../Data/IronSource");
var AudioManager_1 = require("../Plugin/AudioManager");
var GameController_1 = require("./GameController");
var GamePlay_1 = require("./GamePlay");
var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
var TouchAreaController = /** @class */ (function (_super) {
    __extends(TouchAreaController, _super);
    function TouchAreaController() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        // Component
        _this.IronSource = null;
        _this.AudioManager = null;
        _this.GameController = null;
        _this.GamePlay = null;
        // Node
        _this.CTA = null;
        _this.hidemask = null;
        _this.hand = null;
        _this.btn_SpawnArmys = [];
        _this.btn_install = null;
        _this.btn_upgrade = null;
        _this.btn_BuyArmys = [];
        _this.ps_upgrade = [];
        _this.Lv1Troops = [];
        _this.Lv2Troops = [];
        return _this;
    }
    TouchAreaController.prototype.onLoad = function () {
    };
    TouchAreaController.prototype.start = function () {
        this.registerEvent();
        // this.Lv2Troops.forEach(troop => troop.active = false);
    };
    TouchAreaController.prototype.registerEvent = function () {
        // hidemask
        // this.hidemask.on(cc.Node.EventType.TOUCH_START, this.GameController.installHandle, this);
        var _this = this;
        var _loop_1 = function (index) {
            var btn = this_1.btn_SpawnArmys[index];
            btn.on(cc.Node.EventType.TOUCH_START, function () {
                if (!constants_1.Constants.isCanTouch)
                    return;
                if (constants_1.Constants.isToStore) {
                    _this.GameController.installHandle();
                    return;
                }
                if (constants_1.Constants.isLoose || constants_1.Constants.isWin || _this.CTA.active)
                    return;
                _this.AudioManager.playSound(constants_1.Constants.SoundTrack.clickSound);
                _this.GamePlay.spawnArmy(index + 1);
                _this.hand.active = false;
                // this.IronSource.handleIronSourcePlaySound();
            }, this_1);
        };
        var this_1 = this;
        // btn spawn army
        for (var index = 0; index < this.btn_SpawnArmys.length; index++) {
            _loop_1(index);
        }
        ;
        var _loop_2 = function (index) {
            var btn = this_2.btn_BuyArmys[index];
            btn.on(cc.Node.EventType.TOUCH_START, function () {
                if (constants_1.Constants.isToStore) {
                    _this.GameController.installHandle();
                    return;
                }
                // handle buy lv2 army
                if (index === 0) {
                    if (constants_1.Constants.currentCoin >= 60) {
                        _this.AudioManager.playSound(constants_1.Constants.SoundTrack.buySound);
                        console.log("buyed");
                        constants_1.Constants.isCanBuyArmyLv2 = true;
                        constants_1.Constants.enemyDie -= 2;
                        _this.btn_SpawnArmys[index + 1].getChildByName("frame").active = true;
                        btn.active = false;
                    }
                    else {
                        console.log("-- can not buy");
                    }
                }
                // handle buy lv3 army
                else {
                    if (constants_1.Constants.currentCoin >= 90) {
                        _this.AudioManager.playSound(constants_1.Constants.SoundTrack.buySound);
                        console.log("buyed");
                        constants_1.Constants.isCanBuyArmyLv3 = true;
                        constants_1.Constants.enemyDie -= 3;
                        _this.btn_SpawnArmys[index + 1].getChildByName("frame").active = true;
                        btn.active = false;
                    }
                    else {
                        console.log("-- can not buy");
                    }
                }
            }, this_2);
        };
        var this_2 = this;
        // btn buy army
        for (var index = 0; index < this.btn_BuyArmys.length; index++) {
            _loop_2(index);
        }
        // btn upgrade
        // this.btn_upgrade.on(cc.Node.EventType.TOUCH_START, () => {
        //   this.AudioManager.playSound(Constants.SoundTrack.UpgradeSound);
        //   if (Constants.currentCoin >= 120) {
        //     console.log("Upgraded");
        //     Constants.isUpgrade = true;
        //     Constants.enemyDie -= 4;
        //     this.AudioManager.playSound(Constants.SoundTrack.UpgradeSound);
        //     this.btn_upgrade.parent.active = false;
        //     this.ps_upgrade.forEach(ps => ps.resetSystem());
        //     this.Lv2Troops.forEach(troop => troop.active = true);
        //     this.Lv1Troops.forEach(troop => troop.active = false);
        //   } else {
        //     console.log("Fail");
        //   }
        // }, this);
        // btn install
        // this.btn_install.on(cc.Node.EventType.TOUCH_START, this.GameController.installHandle, this);
    };
    __decorate([
        property(IronSource_1.default)
    ], TouchAreaController.prototype, "IronSource", void 0);
    __decorate([
        property(AudioManager_1.default)
    ], TouchAreaController.prototype, "AudioManager", void 0);
    __decorate([
        property(GameController_1.GameController)
    ], TouchAreaController.prototype, "GameController", void 0);
    __decorate([
        property(GamePlay_1.default)
    ], TouchAreaController.prototype, "GamePlay", void 0);
    __decorate([
        property(cc.Node)
    ], TouchAreaController.prototype, "CTA", void 0);
    __decorate([
        property(cc.Node)
    ], TouchAreaController.prototype, "hidemask", void 0);
    __decorate([
        property(cc.Node)
    ], TouchAreaController.prototype, "hand", void 0);
    __decorate([
        property([cc.Node])
    ], TouchAreaController.prototype, "btn_SpawnArmys", void 0);
    __decorate([
        property(cc.Node)
    ], TouchAreaController.prototype, "btn_install", void 0);
    __decorate([
        property(cc.Node)
    ], TouchAreaController.prototype, "btn_upgrade", void 0);
    __decorate([
        property([cc.Node])
    ], TouchAreaController.prototype, "btn_BuyArmys", void 0);
    __decorate([
        property([cc.ParticleSystem])
    ], TouchAreaController.prototype, "ps_upgrade", void 0);
    __decorate([
        property([cc.Node])
    ], TouchAreaController.prototype, "Lv1Troops", void 0);
    __decorate([
        property([cc.Node])
    ], TouchAreaController.prototype, "Lv2Troops", void 0);
    TouchAreaController = __decorate([
        ccclass
    ], TouchAreaController);
    return TouchAreaController;
}(cc.Component));
exports.TouchAreaController = TouchAreaController;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/neutrinoparticles/components/NeutrinoEffect_Blast03.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'a41a7n9TPhO/rNezrKbq1ux', 'NeutrinoEffect_Blast03');
// neutrinoparticles/components/NeutrinoEffect_Blast03.ts

"use strict";
// !!! This file is generated by NeutrinoParticles extension package.
// !!! Don't modify it manually.
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var NeutrinoEffect = require("../exported_effects/Blast03.js");
var textures_1 = require("../textures");
var NeutrinoComponent_1 = require("NeutrinoComponent");
var NeutrinoAssembler_1 = require("NeutrinoAssembler");
var _a = cc._decorator, ccclass = _a.ccclass, executeInEditMode = _a.executeInEditMode, playOnFocus = _a.playOnFocus, menu = _a.menu;
var NeutrinoEffectComponent = /** @class */ (function (_super) {
    __extends(NeutrinoEffectComponent, _super);
    function NeutrinoEffectComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    NeutrinoEffectComponent.prototype.getEffectClass = function () { return NeutrinoEffect; };
    NeutrinoEffectComponent.prototype.getTexturesDatabase = function () { return textures_1.default; };
    NeutrinoEffectComponent = __decorate([
        ccclass,
        executeInEditMode,
        playOnFocus,
        menu('i18n:MAIN_MENU.component.renderers/NeutrinoComponent/Blast03')
    ], NeutrinoEffectComponent);
    return NeutrinoEffectComponent;
}(NeutrinoComponent_1.default));
exports.default = NeutrinoEffectComponent;
cc.Assembler.register(NeutrinoEffectComponent, NeutrinoAssembler_1.default);

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcbmV1dHJpbm9wYXJ0aWNsZXNcXGNvbXBvbmVudHNcXE5ldXRyaW5vRWZmZWN0X0JsYXN0MDMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLHFFQUFxRTtBQUNyRSxnQ0FBZ0M7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUVoQywrREFBaUU7QUFDakUsd0NBQW1DO0FBQ25DLHVEQUFrRDtBQUNsRCx1REFBa0Q7QUFFNUMsSUFBQSxLQUFrRCxFQUFFLENBQUMsVUFBVSxFQUE5RCxPQUFPLGFBQUEsRUFBRSxpQkFBaUIsdUJBQUEsRUFBRSxXQUFXLGlCQUFBLEVBQUUsSUFBSSxVQUFpQixDQUFDO0FBTXRFO0lBQXFELDJDQUFpQjtJQUF0RTs7SUFHQSxDQUFDO0lBRkEsZ0RBQWMsR0FBZCxjQUFtQixPQUFPLGNBQWMsQ0FBQyxDQUFDLENBQUM7SUFDM0MscURBQW1CLEdBQW5CLGNBQXdCLE9BQU8sa0JBQVEsQ0FBQyxDQUFDLENBQUM7SUFGdEIsdUJBQXVCO1FBSjNDLE9BQU87UUFDUCxpQkFBaUI7UUFDakIsV0FBVztRQUNYLElBQUksQ0FBQyw4REFBOEQsQ0FBQztPQUNoRCx1QkFBdUIsQ0FHM0M7SUFBRCw4QkFBQztDQUhELEFBR0MsQ0FIb0QsMkJBQWlCLEdBR3JFO2tCQUhvQix1QkFBdUI7QUFLNUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsdUJBQXVCLEVBQUUsMkJBQWlCLENBQUMsQ0FBQyIsImZpbGUiOiIiLCJzb3VyY2VSb290IjoiLyIsInNvdXJjZXNDb250ZW50IjpbIi8vICEhISBUaGlzIGZpbGUgaXMgZ2VuZXJhdGVkIGJ5IE5ldXRyaW5vUGFydGljbGVzIGV4dGVuc2lvbiBwYWNrYWdlLlxuLy8gISEhIERvbid0IG1vZGlmeSBpdCBtYW51YWxseS5cblxuaW1wb3J0ICogYXMgTmV1dHJpbm9FZmZlY3QgZnJvbSAnLi4vZXhwb3J0ZWRfZWZmZWN0cy9CbGFzdDAzLmpzJztcbmltcG9ydCB0ZXh0dXJlcyBmcm9tICcuLi90ZXh0dXJlcyc7XG5pbXBvcnQgTmV1dHJpbm9Db21wb25lbnQgZnJvbSAnTmV1dHJpbm9Db21wb25lbnQnO1xuaW1wb3J0IE5ldXRyaW5vQXNzZW1ibGVyIGZyb20gJ05ldXRyaW5vQXNzZW1ibGVyJztcblxuY29uc3Qge2NjY2xhc3MsIGV4ZWN1dGVJbkVkaXRNb2RlLCBwbGF5T25Gb2N1cywgbWVudX0gPSBjYy5fZGVjb3JhdG9yO1xuXG5AY2NjbGFzc1xuQGV4ZWN1dGVJbkVkaXRNb2RlXG5AcGxheU9uRm9jdXNcbkBtZW51KCdpMThuOk1BSU5fTUVOVS5jb21wb25lbnQucmVuZGVyZXJzL05ldXRyaW5vQ29tcG9uZW50L0JsYXN0MDMnKVxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTmV1dHJpbm9FZmZlY3RDb21wb25lbnQgZXh0ZW5kcyBOZXV0cmlub0NvbXBvbmVudCB7XG5cdGdldEVmZmVjdENsYXNzKCkgeyByZXR1cm4gTmV1dHJpbm9FZmZlY3Q7IH1cblx0Z2V0VGV4dHVyZXNEYXRhYmFzZSgpIHsgcmV0dXJuIHRleHR1cmVzOyB9XG59XG5cbmNjLkFzc2VtYmxlci5yZWdpc3RlcihOZXV0cmlub0VmZmVjdENvbXBvbmVudCwgTmV1dHJpbm9Bc3NlbWJsZXIpO1xuIl19
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/neutrinoparticles/exported_effects/Fireworks01.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'ad3f8kVt/1CIb3WT4UQFhrL', 'Fireworks01');
// neutrinoparticles/exported_effects/Fireworks01.js

"use strict";

// b27726ce-45eb-46cf-8709-409a1454ec2d
(function (root, factory) {
  if (typeof exports === 'object' && typeof module !== 'undefined') {
    module.exports = factory();
  } else if (typeof define === 'function' && define.amd) {
    define(['exports'], function (exports) {
      (root.NeutrinoEffect = exports)['Fireworks01'] = factory();
    });
  } else {
    var namespace = root.NeutrinoEffect || (root.NeutrinoEffect = {});
    namespace.__last__ = namespace['Fireworks01'] = factory();
  }
})(typeof self !== 'undefined' ? self : void 0, function () {
  function Fireworks01(ctx) {
    var Db = this;

    var ne = function ne(Ld, Bd) {
      this.Ld = Ld;
      this.Bd = Bd;

      if (this.Bd.we.pe.length > 0) {
        this.we = this.Bd.we.pe[0];
        this.Lc = [ne.prototype.Ec, ne.prototype.Fc][this.we.xe];
      } else this.we = null;
    };

    ne.prototype = {
      Ec: function Ec(fe, Ab, Xb) {
        var Gc = ctx.ib(Xb.Md);
        var Hc = Math.cos(Gc);
        var Ic = Math.sin(Gc);
        var ye = ctx.Ae(Xb.Nd[0]);
        var ze = ctx.Ae(Xb.Nd[1]);
        fe.
        /**/
        transform(ye * Hc, ye * Ic, ze * -Ic, ze * Hc, Ab[0], Ab[1]);
      },
      Fc: function Fc(fe, Ab, Xb) {
        var q = Xb.Mc;
        var z2 = 2.0 * q[2] * q[2];
        var xy = 2.0 * q[0] * q[1];
        var wz = 2.0 * q[3] * q[2];
        var ye = ctx.Ae(Xb.Nd[0]);
        var ze = ctx.Ae(Xb.Nd[1]);
        fe.
        /**/
        transform(ye * (1.0 - 2.0 * q[1] * q[1] - z2), ye * (xy + wz), ze * (wz - xy), ze * (2.0 * q[0] * q[0] + z2 - 1.0), Ab[0], Ab[1]);
      },
      Pc: function Pc(fe, Xb, ge) {
        Xb.vc(fe, -1, ge);

        if (this.we) {
          if (this.Be != null && !Xb.oc) {
            if (Xb.Od > 0.001) {
              var De = Math.floor(Xb.Qc % this.we.Rc);
              var Ee = Math.floor(Xb.Qc / this.we.Rc);
              var Ab = Xb.Ab.slice();
              var Nd = Xb.Nd.slice();

              if (!ge || ge.
              /**/
              transform(Ab, Nd)) {
                var df = Math.abs(Nd[0]);
                var ef = Math.abs(Nd[1]);

                if (df > 0.001 && ef > 0.001) {
                  fe.save();
                  this.Lc(fe, Ab, Xb);
                  fe.translate(-df * Xb.Pd[0], -ef * (1 - Xb.Pd[1]));
                  fe.globalAlpha *= Xb.Od;

                  if (Xb.gf[0] < 0.999 || Xb.gf[1] < 0.999 || Xb.gf[2] < 0.999) {
                    if (df >= 1 && ef >= 1) {
                      var Ye = df < this.Tc ? df : this.Tc;
                      var Ze = ef < this.Uc ? ef : this.Uc;
                      ctx.af(Ye, Ze);
                      ctx.bf.globalCompositeOperation = "copy";
                      ctx.bf.drawImage(this.Be.image, this.Be.x + this.Tc * De, this.Be.y + this.Uc * Ee, this.Tc, this.Uc, 0, 0, Ye, Ze);
                      ctx.bf.globalCompositeOperation = "multiply";
                      ctx.bf.fillStyle = ctx.ff(Xb.gf);
                      ctx.bf.fillRect(0, 0, Ye, Ze);
                      ctx.bf.globalCompositeOperation = "destination-atop";
                      ctx.bf.drawImage(this.Be.image, this.Be.x + this.Tc * De, this.Be.y + this.Uc * Ee, this.Tc, this.Uc, 0, 0, Ye, Ze);
                      fe.drawImage(ctx.cf, 0, 0, Ye, Ze, 0, 0, df, ef);
                    }
                  } else {
                    fe.drawImage(this.Be.image, this.Be.x + this.Tc * De, this.Be.y + this.Uc * Ee, this.Tc, this.Uc, 0, 0, df, ef);
                  }

                  fe.restore();
                }
              }
            }
          }
        }

        Xb.vc(fe, 1, ge);
      },
      Hd: function Hd(fe, ge) {
        fe.save();

        if (this.we) {
          fe.globalCompositeOperation = this.Ld.materials[this.Ld.
          /**/
          model.renderStyles[this.we.renderStyleIndex].materialIndex];
          this.Be = this.Ld.textureDescs[this.Ld.
          /**/
          model.renderStyles[this.we.renderStyleIndex].textureIndices[0]];
        } else {
          this.Be = null;
        }

        if (this.Be) {
          this.Tc = this.Be.width / this.we.Rc;
          this.Uc = this.Be.height / this.we.Sc;
        }

        function kd(a, b) {
          if (a.Ab[2] > b.Ab[2]) return 1;
          if (a.Ab[2] < b.Ab[2]) return -1;
          return 0;
        }

        switch (this.Bd.Vc) {
          case 0:
            for (var Wb = 0; Wb < this.Bd.tc.length; ++Wb) {
              this.Pc(fe, this.Bd.tc[Wb], ge);
            }

            break;

          case 1:
            for (var Wb = this.Bd.tc.length; Wb-- > 0;) {
              this.Pc(fe, this.Bd.tc[Wb], ge);
            }

            break;

          case 2:
            this.Bd.tc.sort(kd);

            for (var Wb = 0; Wb < this.Bd.tc.length; ++Wb) {
              this.Pc(fe, this.Bd.tc[Wb], ge);
            }

            break;
        }

        fe.restore();
      }
    };

    var oe = function oe(Ld, Bd) {
      this.Ld = Ld;
      this.Bd = Bd;
      if (this.Bd.we.pe.length > 0) this.we = this.Bd.we.pe[0];else this.we = null;
      this.vertex = [{
        /**/
        position: [0.0, 0.0, 0.0],

        /**/
        color: [0, 0, 0, 0],

        /**/
        texCoords: [[0.0, 0.0]]
      }, {
        /**/
        position: [0.0, 0.0, 0.0],

        /**/
        color: [0, 0, 0, 0],

        /**/
        texCoords: [[0.0, 0.0]]
      }, {
        /**/
        position: [0.0, 0.0, 0.0],

        /**/
        color: [0, 0, 0, 0],

        /**/
        texCoords: [[0.0, 0.0]]
      }, {
        /**/
        position: [0.0, 0.0, 0.0],

        /**/
        color: [0, 0, 0, 0],

        /**/
        texCoords: [[0.0, 0.0]]
      }];
    };

    oe.prototype = {
      qe: function qe(Xb, se, re, te, renderBuffer) {
        Xb.Ce(-1, se, re, te, renderBuffer);

        if (this.we) {
          if (!Xb.oc) {
            var v0 = this.vertex[0];
            var v1 = this.vertex[1];
            var v2 = this.vertex[2];
            var v3 = this.vertex[3];
            var Fe = [],
                Ge = [];

            if (this.we.xe == 0) {
              var a = ctx.ib(Xb.Md);
              var s = -Math.sin(a);
              var c = Math.cos(a);
              Fe[0] = se[0] * c + re[0] * s;
              Fe[1] = se[1] * c + re[1] * s;
              Fe[2] = se[2] * c + re[2] * s;
              Ge[0] = -se[0] * s + re[0] * c;
              Ge[1] = -se[1] * s + re[1] * c;
              Ge[2] = -se[2] * s + re[2] * c;
            } else {
              var q = Xb.Mc;
              var z2 = 2.0 * q[2] * q[2];
              var xy = 2.0 * q[0] * q[1];
              var wz = 2.0 * q[3] * q[2];
              Fe[0] = 1.0 - 2.0 * q[1] * q[1] - z2;
              Fe[1] = xy + wz;
              Fe[2] = 2.0 * q[0] * q[2] - 2.0 * q[3] * q[1];
              Ge[0] = xy - wz;
              Ge[1] = 1.0 - 2.0 * q[0] * q[0] - z2;
              Ge[2] = 2.0 * q[1] * q[2] + 2.0 * q[3] * q[0];
            }

            var He = [],
                Ie = [],
                Je = [],
                Ke = [];
            ctx.u(He, Fe, -Xb.Nd[0] * Xb.Pd[0]);
            ctx.u(Ie, Fe, Xb.Nd[0] * (1.0 - Xb.Pd[0]));
            ctx.u(Je, Ge, -Xb.Nd[1] * Xb.Pd[1]);
            ctx.u(Ke, Ge, Xb.Nd[1] * (1.0 - Xb.Pd[1]));
            ctx.c(v0.
            /**/
            position, He, Je);
            ctx.c(v0.
            /**/
            position, v0.
            /**/
            position, Xb.Ab);
            ctx.c(v1.
            /**/
            position, He, Ke);
            ctx.c(v1.
            /**/
            position, v1.
            /**/
            position, Xb.Ab);
            ctx.c(v2.
            /**/
            position, Ie, Ke);
            ctx.c(v2.
            /**/
            position, v2.
            /**/
            position, Xb.Ab);
            ctx.c(v3.
            /**/
            position, Ie, Je);
            ctx.c(v3.
            /**/
            position, v3.
            /**/
            position, Xb.Ab);
            {
              var rgb = ctx.v(Xb.gf, 255);
              v0.
              /**/
              color = v1.
              /**/
              color = v2.
              /**/
              color = v3.
              /**/
              color = [rgb[0], rgb[1], rgb[2], Xb.Od * 255];
            }
            {
              var De = Math.floor(Xb.Qc % this.we.Rc);
              var Ee = Math.floor(Xb.Qc / this.we.Rc);
              var Pe, Qe, Re, Se;
              var We = this.Ld.texturesRemap[this.Ld.
              /**/
              model.renderStyles[this.we.renderStyleIndex].textureIndices[0]];

              if (We) {
                var Ue = We.width / this.we.Rc;
                var Ve = We.height / this.we.Sc;
                var Pe = We.x + De * Ue;
                var Qe = Pe + Ue;
                var Re = We.y + We.height - Ee * Ve;
                var Se = Re - Ve;
              } else {
                var Ue = 1.0 / this.we.Rc;
                var Ve = 1.0 / this.we.Sc;
                var Pe = De * Ue;
                var Qe = Pe + Ue;
                var Re = 1.0 - Ee * Ve;
                var Se = Re - Ve;
              }

              v0.
              /**/
              texCoords[0] = [Pe, Se];
              v1.
              /**/
              texCoords[0] = [Pe, Re];
              v2.
              /**/
              texCoords[0] = [Qe, Re];
              v3.
              /**/
              texCoords[0] = [Qe, Se];
            }

            if (renderBuffer.beforeQuad) {
              renderBuffer.beforeQuad(this.we.renderStyleIndex);
            }

            renderBuffer.pushVertex(v0);
            renderBuffer.pushVertex(v1);
            renderBuffer.pushVertex(v2);
            renderBuffer.pushVertex(v3);

            if (!renderBuffer.__lastRenderCall) {
              renderBuffer.__lastRenderCall = new ctx.RenderCall(0, 6, this.we.renderStyleIndex);
            } else {
              var lastRenderCall = renderBuffer.__lastRenderCall;

              if (lastRenderCall.renderStyleIndex == this.we.renderStyleIndex) {
                lastRenderCall.numIndices += 6;
              } else {
                renderBuffer.pushRenderCall(lastRenderCall);
                renderBuffer.__lastRenderCall = new ctx.RenderCall(lastRenderCall.startIndex + lastRenderCall.numIndices, 6, this.we.renderStyleIndex);
              }
            }
          }
        }

        Xb.Ce(1, se, re, te, renderBuffer);
      },
      ue: function ue(se, re, te, renderBuffer) {
        switch (this.Bd.Vc) {
          case 0:
            for (var Wb = 0; Wb < this.Bd.tc.length; ++Wb) {
              this.qe(this.Bd.tc[Wb], se, re, te, renderBuffer);
            }

            break;

          case 1:
            for (var Wb = this.Bd.tc.length; Wb-- > 0;) {
              this.qe(this.Bd.tc[Wb], se, re, te, renderBuffer);
            }

            break;

          case 2:
            this.Bd.tc.forEach(function (Xb) {
              Xb.depth = ctx.H(te, Xb.Ab);
            });
            this.Bd.tc.sort(function (a, b) {
              if (a.depth < b.depth) return 1;
              if (a.depth > b.depth) return -1;
              return 0;
            });
            this.Bd.tc.forEach(function (Xb) {
              this.qe(Xb, se, re, te, renderBuffer);
            }, this);
            break;
        }
      }
    };

    var ld = function ld(Ld, we, ve) {
      var Vb = this;
      this.Ld = Ld;
      this.we = we; // Eb

      function Eb() {
        this.Fb = 0;
        this.Gb = 1;
        this.Hb = null;
        this.Ib = null;
        this.Kb = 0;
        this.Lb = 1;
        Vb.we.Mb(this); // IMPL

        this.Nb = function () {
          this.Ob = this.Gb;
          this.Fb = 0;
        };

        this.Nb();
      }

      Eb.prototype = {
        Jd: function Jd() {
          this.Nb();
        },
        Id: function Id(Qb, Ab, Mc) {
          Vb.we.Pb(Qb, Vb, this); // IMPL

          var Rb = Vb.Rb;
          var systemTime = Ld.Rb;
          var Sb = Qb;
          var ic = 0;

          if (this.zb > 0.000001) {
            var Tb = this.Ob + Qb * this.zb;

            while (Tb >= 1.0) {
              var Ub = this.zb < 0.001 ? 0.0 : (1.0 - this.Ob) / this.zb;
              Sb -= Ub;
              Rb += Ub;
              systemTime += Ub;

              if (this.Hb != null && Rb > this.Hb) {
                Vb.disactivate();
                break;
              }

              Vb.Rb = Rb;
              Ld.Rb = systemTime;
              if (Ab && Qb > 0) ctx.ab(Vb.Ab, Ab, Vb.Bb, Sb / Qb);
              if (Mc && Qb > 0) ctx.slerpq(Vb.Mc, Mc, Vb.prevRotation, Sb / Qb); // for the future when Jb would be external

              this.Lb = this.Jb;

              for (var Wb = 0; Wb < this.Jb; ++Wb) {
                if (Vb.sc.length == 0) break;
                if (this.Jb == 1) this.Kb = 0;else this.Kb = Wb / (this.Jb - 1);
                var Xb = Vb.sc.pop();
                Vb.tc.unshift(Xb);
                if (Wb == 0) Xb.Yb();else Xb.Zb();
                Xb.Id(Sb);
                ++ic;
              }

              this.Ob = 0.0;
              Tb -= 1.0;

              if (this.Ib != null && ++this.Fb >= this.Ib) {
                Vb.disactivate();
                break;
              }
            }

            this.Ob = Tb;
          }

          Rb += Sb;
          Vb.Rb = Rb;
          if (Ab) ctx.T(Vb.Ab, Ab);
          if (Mc) ctx.U(Vb.Mc, Mc);
          return ic;
        }
      }; // ac

      function ac() {
        this.Gb = 1;
        this.Kb = 0;
        this.Lb = 1;
        Vb.we.Mb(this); // IMPL

        this.Nb = function () {
          this.bc = this.Gb;
        };

        this.Nb();
      }

      ac.prototype = {
        Jd: function Jd() {
          this.Nb();
        },
        Id: function Id(Qb, Ab, Mc) {
          Vb.we.Pb(Qb, Vb, this); // IMPL

          var cc = Vb.Rb;
          var dc = cc + Qb;
          var systemTimeBeforeFrame = Ld.Rb;
          var systemTimeAfterFrame = systemTimeBeforeFrame + Qb;
          var ec = Ab ? ctx.O(ctx.h(Ab, Vb.Bb)) : 0;
          var ic = 0;

          if (ec > 0.000001) {
            var fc = ec / this.rd;
            var Tb = this.bc + fc;
            var hc = fc < 0.001 ? 1.0 - this.bc : (1.0 - this.bc) / fc;
            var jc = [];

            while (Tb > 1.0) {
              var kc = cc + hc * Qb;
              if (Ab) ctx.ab(jc, Vb.Bb, Ab, hc);
              Vb.Rb = kc;
              ctx.T(Vb.Ab, jc);
              Ld.Rb = ctx.X(systemTimeBeforeFrame, systemTimeAfterFrame, hc); // for the future when Jb would be external

              this.Lb = this.Jb;

              for (var Wb = 0; Wb < this.Jb; ++Wb) {
                if (Vb.sc.length == 0) break;
                if (this.Jb == 1) this.Kb = 0;else this.Kb = Wb / (this.Jb - 1);
                var Xb = Vb.sc.pop();
                Vb.tc.unshift(Xb);
                if (Wb == 0) Xb.Yb();else Xb.Zb();
                Xb.Id(Qb * (1.0 - hc));
                ++ic;
              }

              hc += 1.0 / fc;
              Tb -= 1.0;
            }

            this.bc = Tb;
          }

          Vb.Rb = dc;
          if (Ab) ctx.T(Vb.Ab, Ab);
          if (Mc) ctx.U(Vb.Mc, Mc);
          return ic;
        }
      }; // mc

      function mc() {
        this.Ab = [];
        this.Pd = [];
        this.Nd = [];
        this.gf = [];
        this.Kc = [];
      }

      mc.prototype = {
        nc: function nc() {
          this.oc = false;

          for (var i = 0; i < this.Kc.length; ++i) {
            var pc = this.Kc[i];
            pc.Bd.Jd(this.Ab, null);
            if (pc.Ad.sd) pc.Bd.disactivate();
          }
        },
        Yb: function Yb() {
          Vb.we.fd(Vb, this); // IMPL

          this.nc();
        },
        Zb: function Zb() {
          Vb.we.gd(Vb, this); // IMPL

          this.nc();
        },
        Id: function Id(Qb) {
          Vb.we.qc(Qb, Vb, this); // IMPL

          this.rc(Qb);
        },
        pc: function pc(je) {
          return this.Kc[je].Bd;
        },
        rc: function rc(Qb) {
          for (var i = 0; i < this.Kc.length; i++) {
            this.Kc[i].Bd.Id(Qb, this.Ab, null);
          }
        },
        uc: function uc(md, nd) {
          this.Kc.push({
            Bd: new ld(Ld, md, ve),
            Ad: nd
          });
        },
        vc: function vc(fe, xc, ge) {
          for (var i = 0; i < this.Kc.length; ++i) {
            var pc = this.Kc[i];
            if (xc == pc.Ad.xc) pc.Bd.Hd(fe, ge);
          }
        },
        Ce: function Ce(xc, se, re, te, renderBuffer) {
          for (var i = 0; i < this.Kc.length; ++i) {
            var pc = this.Kc[i];
            if (xc == pc.Ad.xc) pc.Bd.ue(se, re, te, renderBuffer);
          }
        },
        wc: function wc(fe) {
          this.oc = true;

          for (var i = 0; i < this.Kc.length; ++i) {
            var pc = this.Kc[i];

            if (pc.Ad.sd) {
              pc.Bd.activate();
              pc.Bd.Id(0);
            } else pc.Bd.disactivate();
          }
        },
        yc: function yc(Gd) {
          for (var i = 0; i < this.Kc.length; ++i) {
            this.Kc[i].Bd.Ed(Gd);
          }
        }
      }; // zc

      function zc() {}

      zc.prototype.Ac = function (Xb) {
        return Vb.we.Cc(Vb, Xb, this); // IMPL
      }; // ld Ad


      this.Ab = [];
      this.Bb = [];
      this.Mc = [];
      this.prevRotation = [];
      this.tc = [];
      this.sc = [];
      this.Wc = new zc();
      this.construct = new ve(this.Ld, this);
      this.Yc = [];
      this.ad = [];

      this.dd = function () {
        this.vd = new Eb();
      };

      this.ed = function () {
        this.vd = new ac();
      };

      this.we.ud(this); // IMPL

      for (var Wb = 0; Wb < this.jd; ++Wb) {
        var Xb = new mc();

        for (var id = 0; id < this.Yc.length; ++id) {
          var hd = this.Yc[id];
          Xb.uc(hd.Db, hd.Ad);
        }

        this.sc.push(Xb);
      }

      this.Nb = function (Ab, Mc) {
        ctx.T(this.Ab, Ab ? Ab : [0, 0, 0]);
        ctx.T(this.Bb, this.Ab);
        ctx.U(this.Mc, Mc ? Mc : [0, 0, 0, 1]);
        ctx.U(this.prevRotation, this.Mc);
        this.Rb = 0.0;
        this.wd = 0.0;
        this.Zc = true;
        this.paused_ = false;
        this.generatorsPaused_ = false;
        ctx.W(this.ad, 0, 0, 0);
      };
    };

    ld.prototype.Jd = function (Ab, Mc) {
      this.Nb(Ab, Mc);
      this.sc.push.apply(this.sc, this.tc);
      this.tc.length = 0;
      this.vd.Jd();
    };

    ld.prototype.Id = function (Qb, Ab, Mc) {
      if (this.paused_) {
        this.Td(Ab, Mc);
        return;
      }

      this.wd = this.Rb;

      if (Ab) {
        ctx.T(this.Bb, this.Ab);

        if (Qb > 0.0001) {
          var shift = [];
          ctx.g(shift, Ab, this.Bb);
          ctx.T(this.ad, shift);
          ctx.w(this.ad, this.ad, Qb);
        } else {
          ctx.W(this.ad, 0, 0, 0);
        }
      } else {
        ctx.W(this.ad, 0, 0, 0);
      }

      if (Mc) {
        ctx.U(this.prevRotation, this.Mc);
      }

      var ic;

      if (this.Zc && !this.generatorsPaused_) {
        ic = this.vd.Id(Qb, Ab, Mc);
      } else {
        if (Ab) ctx.T(this.Ab, Ab);
        if (Mc) ctx.U(this.Mc, Mc);
        ic = 0;
        this.Rb += Qb;
      }

      for (var Wb = ic; Wb < this.tc.length;) {
        var Xb = this.tc[Wb];

        if (!Xb.oc) {
          Xb.Id(Qb);

          if (this.Wc.Ac(this.tc[Wb])) {
            Xb.wc();
            if (this.xd(Wb)) continue;
          }
        } else {
          Xb.rc(Qb);
          if (this.xd(Wb)) continue;
        }

        ++Wb;
      }
    };

    ld.prototype.xd = function (je) {
      var Xb = this.tc[je];
      var ready = true;

      for (var id = 0; id < Xb.Kc.length; ++id) {
        var Bd = Xb.Kc[id].Bd;

        if (Bd.activated() || Bd.tc.length > 0) {
          ready = false;
          break;
        }
      }

      if (ready) {
        this.sc.push(this.tc[je]);
        this.tc.splice(je, 1);
        return true;
      }

      return false;
    };

    ld.prototype.Hd = function (fe, ge) {
      this.construct.Hd(fe, ge);
    };

    ld.prototype.ue = function (se, re, te, renderBuffer) {
      this.construct.ue(se, re, te, renderBuffer);
    };

    ld.prototype.Td = function (Ab, Mc) {
      this.wd = this.Rb;

      if (Ab) {
        ctx.T(this.Bb, this.Ab);
        ctx.T(this.Ab, Ab);
      }

      if (Mc) {
        ctx.U(this.prevRotation, this.Mc);
        ctx.U(this.Mc, Mc);
      }
    };

    ld.prototype.uc = function (md, nd) {
      this.Yc.push({
        Db: md,
        Ad: nd
      });
    };

    ld.prototype.
    /**/
    pause = function () {
      this.paused_ = true;
    };

    ld.prototype.
    /**/
    unpause = function () {
      this.paused_ = false;
    };

    ld.prototype.
    /**/
    paused = function () {
      return this.paused_;
    };

    ld.prototype.
    /**/
    pauseGenerators = function () {
      this.generatorsPaused_ = true;
    };

    ld.prototype.
    /**/
    unpauseGenerators = function () {
      this.generatorsPaused_ = false;
    };

    ld.prototype.
    /**/
    generatorsPaused = function () {
      return this.generatorsPaused_;
    };

    ld.prototype.activate = function () {
      this.Zc = true;
    };

    ld.prototype.disactivate = function () {
      this.Zc = false;
    };

    ld.prototype.activated = function () {
      return this.Zc;
    };

    ld.prototype.
    /**/
    getNumParticles = function () {
      return this.tc.length;
    };

    var ke = function ke() {
      var Cb = this;

      this._init = function (we, Ab, Mc, ve, options) {
        this.
        /**/
        model = we;
        this.Ab = [];
        this.Mc = []; // ke Ad

        this.od = [];

        this.pd = function (md) {
          var Bd = new ld(this, md, ve);
          Bd.Nb(this.Ab, this.Mc);
          this["_".concat(md.name)] = Bd;
          this.od.push(Bd);
        };

        this.Nb = function (Ab, Mc) {
          this.Cd = 0.0;
          this.Rb = 0.0;
          ctx.T(this.Ab, Ab ? Ab : [0, 0, 0]);
          ctx.U(this.Mc, Mc ? Mc : [0, 0, 0, 1]);
        };

        this.Nb(Ab, Mc);
        this.
        /**/
        model.qd(this); // IMPL

        this._presimNeeded = true;

        if (options.generatorsPaused) {
          this.
          /**/
          pauseGeneratorsInAllEmitters();
        }

        if (options.paused) {
          this.
          /**/
          pauseAllEmitters();
        } else {
          this.zeroUpdate();
          this.updateFixed(this.Ud, Ab, Mc, this.presimFrameTime);
          this._presimNeeded = false;
        }
      };
    };

    ke.prototype.
    /**/
    restart = function (
    /**/
    position,
    /**/
    rotation,
    /**/
    options) {
      this.Nb(
      /**/
      position ?
      /**/
      position : this.Ab,
      /**/
      rotation ?
      /**/
      rotation : this.Mc);
      this._presimNeeded = true;

      for (var i = 0; i < this.od.length; ++i) {
        this.od[i].Jd(this.Ab, this.Mc);
      }

      this._presimNeeded = true;

      if (options && options.generatorsPaused) {
        this.
        /**/
        pauseGeneratorsInAllEmitters();
      }

      if (options && options.paused) {
        this.
        /**/
        pauseAllEmitters();
      } else {
        this.zeroUpdate();
        this.updateFixed(this.Ud, this.Ab, this.Mc, this.presimFrameTime);
        this._presimNeeded = false;
      }
    };

    ke.prototype.zeroUpdate = function () {
      for (var i = 0; i < this.od.length; ++i) {
        this.od[i].Id(0, this.Ab, this.Mc);
      }
    };

    ke.prototype.
    /**/
    update = function (
    /**/
    dt,
    /**/
    position,
    /**/
    rotation) {
      if (this.Dd > 0.0) this.updateFixed(
      /**/
      dt,
      /**/
      position,
      /**/
      rotation, this.Dd);else this.updateFlex(
      /**/
      dt,
      /**/
      position,
      /**/
      rotation);
    };

    ke.prototype.updateFixed = function (
    /**/
    dt,
    /**/
    position,
    /**/
    rotation,
    /**/
    frameTime) {
      var updatedTime = 0.0;
      var hc = [];
      ctx.T(hc, this.Ab);
      var frameRotation = [];
      ctx.U(frameRotation, this.Mc);
      if (
      /**/
      position && ctx.equalv3_(
      /**/
      position, this.Ab))
        /**/
        position = null;
      if (
      /**/
      rotation && ctx.equalq_(
      /**/
      rotation, this.Mc))
        /**/
        rotation = null;

      while (
      /**/
      dt - updatedTime + this.Cd >=
      /**/
      frameTime) {
        var cc = this.Rb;
        if (
        /**/
        position) ctx.ab(hc, this.Ab,
        /**/
        position, updatedTime /
        /**/
        dt);
        if (
        /**/
        rotation) ctx.slerpq(frameRotation, this.Mc,
        /**/
        rotation, updatedTime /
        /**/
        dt);

        for (var i = 0; i < this.od.length; ++i) {
          this.od[i].Id(
          /**/
          frameTime, hc, frameRotation);
          this.Rb = cc;
        }

        updatedTime +=
        /**/
        frameTime - this.Cd;
        this.Cd = 0.0;
        this.Rb = cc +
        /**/
        frameTime;
      }

      if (
      /**/
      position) ctx.T(this.Ab,
      /**/
      position);
      if (
      /**/
      rotation) ctx.U(this.Mc,
      /**/
      rotation);
      this.Cd +=
      /**/
      dt - updatedTime;
    };

    ke.prototype.updateFlex = function (
    /**/
    dt,
    /**/
    position,
    /**/
    rotation) {
      var cc = this.Rb;

      for (var i = 0; i < this.od.length; ++i) {
        this.od[i].Id(
        /**/
        dt,
        /**/
        position,
        /**/
        rotation);
        this.Rb = cc;
      }

      this.Rb = cc +
      /**/
      dt;
      if (
      /**/
      position) ctx.T(this.Ab,
      /**/
      position);
      if (
      /**/
      rotation) ctx.U(this.Mc,
      /**/
      rotation);
    };

    ke.prototype.
    /**/
    resetPosition = function (
    /**/
    position,
    /**/
    rotation) {
      if (
      /**/
      position) ctx.T(this.Ab,
      /**/
      position);
      if (
      /**/
      rotation) ctx.U(this.Mc,
      /**/
      rotation);

      for (var i = 0; i < this.od.length; ++i) {
        this.od[i].Td(this.Ab, this.Mc);
      }
    };

    ke.prototype.
    /**/
    setPropertyInAllEmitters = function (
    /**/
    name,
    /**/
    value) {
      var propName = "_".concat(
      /**/
      name);

      if (
      /**/
      value instanceof Array) {
        if (
        /**/
        value.length == 2) {
          for (var i = 0; i < this.od.length; ++i) {
            ctx.S(this.od[i][propName],
            /**/
            value);
          }
        } else {
          for (var i = 0; i < this.od.length; ++i) {
            ctx.T(this.od[i][propName],
            /**/
            value);
          }
        }
      } else {
        for (var i = 0; i < this.od.length; ++i) {
          this.od[i][propName] =
          /**/
          value;
        }
      }
    };

    ke.prototype.
    /**/
    pauseAllEmitters = function () {
      for (var i = 0; i < this.od.length; ++i) {
        this.od[i].
        /**/
        pause();
      }
    };

    ke.prototype.
    /**/
    unpauseAllEmitters = function () {
      for (var i = 0; i < this.od.length; ++i) {
        this.od[i].
        /**/
        unpause();
      }

      this.zeroUpdate();

      if (this._presimNeeded) {
        this.updateFixed(this.Ud, this.Ab, this.Mc, this.presimFrameTime);
        this._presimNeeded = false;
      }
    };

    ke.prototype.
    /**/
    areAllEmittersPaused = function () {
      for (var i = 0; i < this.od.length; ++i) {
        if (!this.od[i].paused()) return false;
      }

      return true;
    };

    ke.prototype.
    /**/
    pauseGeneratorsInAllEmitters = function () {
      for (var i = 0; i < this.od.length; ++i) {
        this.od[i].
        /**/
        pauseGenerators();
      }
    };

    ke.prototype.
    /**/
    unpauseGeneratorsInAllEmitters = function () {
      for (var i = 0; i < this.od.length; ++i) {
        this.od[i].
        /**/
        unpauseGenerators();
      }
    };

    ke.prototype.
    /**/
    areGeneratorsInAllEmittersPaused = function () {
      for (var i = 0; i < this.od.length; ++i) {
        if (!this.od[i].generatorsPaused()) return false;
      }

      return true;
    };

    ke.prototype.
    /**/
    getNumParticles = function () {
      var numParticles = 0;

      for (var i = 0; i < this.od.length; ++i) {
        numParticles += this.od[i].getNumParticles();
      }

      return numParticles;
    };

    var le = function le() {
      this._init = function (we, Ab, Mc, renderBuffer, options) {
        le.prototype._init.call(this, we, Ab, Mc, oe, options);

        this.texturesRemap = [];
        var indices = [];
        {
          var verDisp;

          for (var Wb = 0; Wb < this.
          /**/
          model.Xe; ++Wb) {
            verDisp = Wb * 4;
            indices.push(verDisp + 0, verDisp + 3, verDisp + 1, verDisp + 1, verDisp + 3, verDisp + 2);
          }
        }
        this.renderBuffer = renderBuffer;
        this.renderBuffer.initialize(this.
        /**/
        model.Xe * 4, [2], indices, this.
        /**/
        model.Xe);
        this.renderBuffer.__numIndices = 0;
      };
    };

    le.prototype = new ke();

    le.prototype.
    /**/
    fillGeometryBuffers = function (
    /**/
    cameraRight,
    /**/
    cameraUp,
    /**/
    cameraDir) {
      this.renderBuffer.cleanup();
      this.renderBuffer.__lastRenderCall = null;
      this.od.forEach(function (Bd) {
        Bd.ue(
        /**/
        cameraRight,
        /**/
        cameraUp,
        /**/
        cameraDir, this.renderBuffer);
      }, this);
      if (this.renderBuffer.__lastRenderCall) this.renderBuffer.pushRenderCall(this.renderBuffer.__lastRenderCall);
    };

    var me = function me() {
      this._init = function (we, Ab, Mc, options) {
        me.prototype._init.call(this, we, Ab, Mc, ne, options);

        this.materials = [];
        this.
        /**/
        model.materials.forEach(function (value) {
          this.materials.push(['source-over', 'lighter', 'multiply'][value]);
        }, this);
        this.
        /**/
        textureDescs = [];
      };
    };

    me.prototype = new ke();

    me.prototype.
    /**/
    draw = function (
    /**/
    context,
    /**/
    camera) {
      for (var i = 0; i < this.od.length; ++i) {
        this.od[i].Hd(
        /**/
        context,
        /**/
        camera);
      }
    };

    this.createWGLInstance = function (
    /**/
    position,
    /**/
    rotation,
    /**/
    renderBuffer,
    /**/
    options) {
      var Ld = new le();

      Ld._init(this,
      /**/
      position,
      /**/
      rotation,
      /**/
      renderBuffer,
      /**/
      options || {});

      return Ld;
    };

    this.createCanvas2DInstance = function (
    /**/
    position,
    /**/
    rotation,
    /**/
    options) {
      var Ld = new me();

      Ld._init(this,
      /**/
      position,
      /**/
      rotation,
      /**/
      options || {});

      return Ld;
    };

    this.textures = ['fx/fireworks/sparks5x3_long.png', 'fx/fireworks/sparks2x3_violet.png'];
    this.materials = [1, 0];
    this.renderStyles = [{
      materialIndex: 0,
      textureIndices: [0]
    }, {
      materialIndex: 1,
      textureIndices: [1]
    }];
    this.Xe = 90600;

    function Emitter_Stripe_child() {
      var _1 = [],
          _5 = [],
          _7 = [],
          _9 = [],
          _10 = [],
          _10fs = [],
          _10vs = [],
          _10rw = [],
          _10rwn = [],
          _10rwl,
          _10v = [],
          _10p = [],
          _10dtl,
          _10dtp,
          _10df,
          _10fsd = [],
          _12 = [],
          _12i = [],
          _13,
          _11,
          _14,
          _15,
          _15i0,
          _15s0 = [],
          _16,
          _17,
          _17i0,
          _17s0 = [],
          _18,
          _18i0,
          _18s0 = [],
          _19;

      this.pe = [{
        xe: 1,
        Rc: 5,
        Sc: 3,
        renderStyleIndex: 0
      }];
      this.name = "Stripe_child";

      this.ud = function (Bd) {
        Bd._Rotation = [0, 0, 0, 1];
        Bd._Texture = 0;
        Bd.ed();
        Bd._15 = [[[0.48177, 0.934782, 0.982708, 0.96819, 0.923457, 0.860987, 0.787211, 0.706007, 0.619964, 0.530944, 0.440381, 0.349431, 0.259076, 0.170188, 0.0835716, 0, 0]]];
        Bd._17 = [[[1, 0, 0]]];
        Bd._18 = [[[0, 2.0657, 2.78929, 3.28572, 3.66181, 3.95916, 4.1992, 4.39469, 4.55401, 4.68298, 4.78584, 4.86582, 4.92541, 4.96661, 4.99103, 5, 5]]];
        Bd.jd = 300;
        Bd.Vc = 0;
      };

      this.Mb = function (vd) {
        vd.rd = 1;
        vd.Gb = 1;
        vd.Jb = 1;
      };

      this.Pb = function (Qb, Bd, vd) {
        vd.rd = 1;
      };

      this.fd = function (Bd, Xb) {
        Xb.Mc = [];
        Xb._ = 0.0;
        ctx.W(_1, 0, 0, 0);
        Xb._2 = [];
        ctx.c(Xb._2, Bd.Ab, _1);
        Xb._3 = 0;
        Xb._4 = [];
        ctx.U(Xb._4, Bd._Rotation);
        ctx.randv3gen(_5, 1, Bd.Ld.rand);
        Xb._6 = [];
        ctx.T(Xb._6, _5);
        ctx.randv3gen(_7, 10, Bd.Ld.rand);
        Xb._8 = [];
        ctx.T(Xb._8, _7);
        ctx.T(Xb.Ab, Xb._2);
      };

      this.gd = function (Bd, Xb) {
        Xb.Mc = [];
        Xb._ = 0.0;
        ctx.W(_1, 0, 0, 0);
        Xb._2 = [];
        ctx.c(Xb._2, Bd.Ab, _1);
        Xb._3 = 0;
        Xb._4 = [];
        ctx.U(Xb._4, Bd._Rotation);
        ctx.randv3gen(_5, 1, Bd.Ld.rand);
        Xb._6 = [];
        ctx.T(Xb._6, _5);
        ctx.randv3gen(_7, 10, Bd.Ld.rand);
        Xb._8 = [];
        ctx.T(Xb._8, _7);
        ctx.T(Xb.Ab, Xb._2);
      };

      this.qc = function (Qb, Bd, Xb) {
        Xb._ += Qb;
        ctx.W(_9, 0, 50, 0);
        ctx.T(_10fs, _9);
        ctx.T(_10vs, [0, 0, 0]);
        _10dtl = Qb;
        ctx.T(_10v, Xb._8);
        ctx.T(_10p, Xb._2);

        while (_10dtl > 0.0001) {
          _10dtp = _10dtl;
          ctx.T(_10fsd, _10fs);
          ctx.g(_10rw, _10vs, _10v);
          _10rwl = ctx.P(_10rw);

          if (_10rwl > 0.0001) {
            _10rwl = Math.sqrt(_10rwl);
            ctx.w(_10rwn, _10rw, _10rwl);
            _10df = 0.01 * 1 * _10rwl;
            if (_10df * _10dtp > 0.2) _10dtp = 0.2 / _10df;
            ctx.c(_10fsd, _10fsd, ctx.v(_10rwn, _10rwl * _10df));
          }

          ctx.c(_10v, _10v, ctx.v(_10fsd, _10dtp));
          ctx.c(_10p, _10p, ctx.v(_10v, _10dtp));
          _10dtl -= _10dtp;
        }

        ctx.T(Xb._2, _10p);
        ctx.T(Xb._8, _10v);
        ctx.T(Xb.Ab, Xb._2);
        ctx.Q(_12i, Xb._6);
        ctx.qb(_12, _12i, Xb._3);
        _13 = 7;
        _11 = 1;
        _14 = Xb._ / _11;
        _15i0 = _14 < 0 ? 0 : _14 > 1 ? 1 : _14;
        ctx.V(_15s0, 0, (_15i0 - 0) * 15);
        _15 = Db.nb(Bd._15[0][_15s0[0]], _15s0[1]);
        _16 = _13 * _15;
        _17i0 = _14 < 0 ? 0 : _14 > 1 ? 1 : _14;
        ctx.V(_17s0, 0, (_17i0 - 0) * 1);
        _17 = Db.nb(Bd._17[0][_17s0[0]], _17s0[1]);
        _18i0 = _14 < 0 ? 0 : _14 > 1 ? 0 + (_14 - 0) % 1 : _14;
        ctx.V(_18s0, 0, (_18i0 - 0) * 15);
        _18 = Db.nb(Bd._18[0][_18s0[0]], _18s0[1]);
        _19 = Bd._Texture * 5 + _18;
        ctx.S(Xb.Pd, [0.5, 0.5]);
        ctx.U(Xb.Mc, _12);
        ctx.V(Xb.Nd, _16, _16);
        ctx.T(Xb.gf, [1, 1, 1]);
        Xb.Od = _17;
        Xb.Qc = _19 < 0 ? 0 : _19 >= 15 ? 14 : _19;
      };

      this.Cc = function (Bd, Xb, Wc) {
        _11 = 1;
        if (Xb._ > _11) return true;
        return false;
      };
    }

    function Emitter_Stripe_parent() {
      var _1 = [],
          _3,
          _5 = [],
          _7 = [],
          _7x = [],
          _7y = [],
          _7z = [],
          _8,
          _8i0,
          _8s0 = [],
          _9 = [],
          _10 = [],
          _10fs = [],
          _10vs = [],
          _10rw = [],
          _10rwn = [],
          _10rwl,
          _10v = [],
          _10p = [],
          _10dtl,
          _10dtp,
          _10df,
          _10fsd = [],
          _11;

      this.pe = [];
      this.name = "Stripe_parent";

      this.ud = function (Bd) {
        Bd._Texture = 0;
        Bd.dd();
        Bd.uc(new Emitter_Stripe_child(), {
          xc: 1,
          sd: false
        });
        Bd._8 = [[[0, 0.0314964, 0.136246, 0.328507, 0.59644, 0.890682, 1.16035, 1.38407, 1.56152, 1.69908, 1.80373, 1.88132, 1.93649, 1.97287, 1.9933, 2, 2]]];
        Bd.jd = 100;
        Bd.Vc = 0;
      };

      this.Mb = function (vd) {
        vd.zb = 5;
        vd.Gb = 0.94;
        vd.Jb = 60;
        vd.Ib = 1;
      };

      this.Pb = function (Qb, Bd, vd) {
        vd.zb = 5;
      };

      this.fd = function (Bd, Xb) {
        Xb._ = 0.0;
        ctx.W(_1, 0, -0, 0);
        Xb._2 = [];
        ctx.rb(Xb._2, _1, Bd.Mc);
        ctx.c(Xb._2, Bd.Ab, Xb._2);
        _3 = 0 + Bd.Ld.rand() * (5 - 0);
        Xb._4 = _3;
        ctx.randv3gen(_5, 1000, Bd.Ld.rand);
        Xb._6 = [];
        ctx.rb(Xb._6, _5, Bd.Mc);
        ctx.c(Xb._6, Bd.ad, Xb._6);
        ctx.T(Xb.Ab, Xb._2);
        ctx.Q(_7z, [0, 0, 1]);
        ctx.I(_7x, Xb._6, _7z);
        ctx.Q(_7x, _7x);
        ctx.I(_7y, _7z, _7x);
        ctx.pb(_7, _7x, _7y, _7z);
        Xb.pc(0)._Rotation = _7;
        Xb.pc(0)._Texture = Bd._Texture;
      };

      this.gd = function (Bd, Xb) {
        Xb._ = 0.0;
        ctx.W(_1, 0, -0, 0);
        Xb._2 = [];
        ctx.rb(Xb._2, _1, Bd.Mc);
        ctx.c(Xb._2, Bd.Ab, Xb._2);
        _3 = 0 + Bd.Ld.rand() * (5 - 0);
        Xb._4 = _3;
        ctx.randv3gen(_5, 1000, Bd.Ld.rand);
        Xb._6 = [];
        ctx.rb(Xb._6, _5, Bd.Mc);
        ctx.c(Xb._6, Bd.ad, Xb._6);
        ctx.T(Xb.Ab, Xb._2);
        ctx.Q(_7z, [0, 0, 1]);
        ctx.I(_7x, Xb._6, _7z);
        ctx.Q(_7x, _7x);
        ctx.I(_7y, _7z, _7x);
        ctx.pb(_7, _7x, _7y, _7z);
        Xb.pc(0)._Rotation = _7;
        Xb.pc(0)._Texture = Bd._Texture;
      };

      this.qc = function (Qb, Bd, Xb) {
        Xb._ += Qb;
        _8i0 = Bd.Rb < 0 ? 0 : Bd.Rb > 1 ? 1 : Bd.Rb;
        ctx.V(_8s0, 0, (_8i0 - 0) * 15);
        _8 = Db.nb(Bd._8[0][_8s0[0]], _8s0[1]);
        ctx.W(_9, 0, 100, 0);
        ctx.T(_10fs, _9);
        ctx.T(_10vs, [0, 0, 0]);
        _10dtl = Qb;
        ctx.T(_10v, Xb._6);
        ctx.T(_10p, Xb._2);

        while (_10dtl > 0.0001) {
          _10dtp = _10dtl;
          ctx.T(_10fsd, _10fs);
          ctx.g(_10rw, _10vs, _10v);
          _10rwl = ctx.P(_10rw);

          if (_10rwl > 0.0001) {
            _10rwl = Math.sqrt(_10rwl);
            ctx.w(_10rwn, _10rw, _10rwl);
            _10df = 0.01 * _8 * _10rwl;
            if (_10df * _10dtp > 0.2) _10dtp = 0.2 / _10df;
            ctx.c(_10fsd, _10fsd, ctx.v(_10rwn, _10rwl * _10df));
          }

          ctx.c(_10v, _10v, ctx.v(_10fsd, _10dtp));
          ctx.c(_10p, _10p, ctx.v(_10v, _10dtp));
          _10dtl -= _10dtp;
        }

        ctx.T(Xb._2, _10p);
        ctx.T(Xb._6, _10v);
        ctx.T(Xb.Ab, Xb._2);
        ctx.Q(_7z, [0, 0, 1]);
        ctx.I(_7x, Xb._6, _7z);
        ctx.Q(_7x, _7x);
        ctx.I(_7y, _7z, _7x);
        ctx.pb(_7, _7x, _7y, _7z);
        Xb.pc(0)._Rotation = _7;
        Xb.pc(0)._Texture = Bd._Texture;
      };

      this.Cc = function (Bd, Xb, Wc) {
        _11 = 1;
        if (Xb._ > _11) return true;
        return false;
      };
    }

    function Emitter_Sparks() {
      var _,
          _i0,
          _s0 = [],
          _2 = [],
          _4,
          _6,
          _8,
          _10,
          _12 = [],
          _14 = [],
          _15,
          _16,
          _17,
          _17i0,
          _17s0 = [],
          _18,
          _19;

      this.pe = [{
        xe: 0,
        Rc: 2,
        Sc: 3,
        renderStyleIndex: 1
      }];
      this.name = "Sparks";

      this.ud = function (Bd) {
        Bd._Texture = 0;
        Bd._ = [[[0, 0, 0], [2, 2, 2]]];
        Bd.dd();
        Bd._17 = [[[0, 0.149709, 0.460975, 0.803237, 1.08303, 1.29919, 1.46717, 1.59926, 1.7039, 1.7869, 1.85236, 1.90328, 1.94194, 1.97007, 1.98906, 2, 2], [2, 1.66994, 1.37363, 1.11535, 0.895215, 0.710443, 0.556908, 0.430206, 0.326245, 0.241465, 0.172875, 0.118, 0.0748067, 0.0416215, 0.0170665, 0, 0], [0, 0.822571, 0.822571], [0.822571, 0.230368, 0.230368], [0.230368, 0.7, 0.7], [0.7, 0, 0], [0, 0.6, 0.6], [0.6, 0, 0]]];
        Bd.jd = 100;
        Bd.Vc = 0;
      };

      this.Mb = function (vd) {
        vd.zb = 5;
        vd.Gb = 1;
        vd.Jb = 100;
        vd.Ib = 1;
      };

      this.Pb = function (Qb, Bd, vd) {
        _i0 = Bd.Rb < 0 ? 0 : Bd.Rb > 2 ? 2 : Bd.Rb;
        _i0 < 0.9 ? ctx.V(_s0, 0, (_i0 - 0) * 1.11111) : ctx.V(_s0, 1, (_i0 - 0.9) * 0.909091);
        _ = Db.nb(Bd._[0][_s0[0]], _s0[1]);
        vd.zb = _;
      };

      this.fd = function (Bd, Xb) {
        Xb._1 = 0.0;
        ctx.randv3gen(_2, 300, Bd.Ld.rand);
        Xb._3 = [];
        ctx.rb(Xb._3, _2, Bd.Mc);
        ctx.c(Xb._3, Bd.Ab, Xb._3);
        _4 = 0 + Bd.Ld.rand() * (360 - 0);
        Xb._5 = _4;
        _6 = 0 + Bd.Ld.rand() * (2 - 0);
        Xb._7 = _6;
        _8 = 20 + Bd.Ld.rand() * (40 - 20);
        Xb._9 = _8;
        _10 = 1.5 + Bd.Ld.rand() * (3 - 1.5);
        Xb._11 = _10;
        ctx.W(_12, 0, 20, 0);
        Xb._13 = [];
        ctx.rb(Xb._13, _12, Bd.Mc);
        ctx.c(Xb._13, Bd.ad, Xb._13);
        ctx.T(Xb.Ab, Xb._3);
      };

      this.gd = function (Bd, Xb) {
        Xb._1 = 0.0;
        ctx.randv3gen(_2, 300, Bd.Ld.rand);
        Xb._3 = [];
        ctx.rb(Xb._3, _2, Bd.Mc);
        ctx.c(Xb._3, Bd.Ab, Xb._3);
        _4 = 0 + Bd.Ld.rand() * (360 - 0);
        Xb._5 = _4;
        _6 = 0 + Bd.Ld.rand() * (2 - 0);
        Xb._7 = _6;
        _8 = 20 + Bd.Ld.rand() * (40 - 20);
        Xb._9 = _8;
        _10 = 1.5 + Bd.Ld.rand() * (3 - 1.5);
        Xb._11 = _10;
        ctx.W(_12, 0, 20, 0);
        Xb._13 = [];
        ctx.rb(Xb._13, _12, Bd.Mc);
        ctx.c(Xb._13, Bd.ad, Xb._13);
        ctx.T(Xb.Ab, Xb._3);
      };

      this.qc = function (Qb, Bd, Xb) {
        Xb._1 += Qb;
        ctx.T(_14, Xb._13);
        ctx.u(_14, _14, Qb);
        ctx.c(_14, _14, Xb._3);
        ctx.T(Xb._3, _14);
        _15 = Xb._5 + Qb * 90;
        Xb._5 = _15;
        ctx.T(Xb.Ab, Xb._3);
        _16 = Xb._1 / Xb._11;
        _17i0 = _16 < 0 ? 0 : _16 > 1 ? 1 : _16;
        _17i0 < 0.744689 ? _17i0 < 0.6 ? _17i0 < 0.0577704 ? ctx.V(_17s0, 0, (_17i0 - 0) * 259.648) : ctx.V(_17s0, 1, (_17i0 - 0.0577704) * 27.6636) : _17i0 < 0.631187 ? ctx.V(_17s0, 2, (_17i0 - 0.6) * 32.0646) : ctx.V(_17s0, 3, (_17i0 - 0.631187) * 8.81045) : _17i0 < 0.9 ? _17i0 < 0.772 ? ctx.V(_17s0, 4, (_17i0 - 0.744689) * 36.6147) : ctx.V(_17s0, 5, (_17i0 - 0.772) * 7.8125) : _17i0 < 0.942044 ? ctx.V(_17s0, 6, (_17i0 - 0.9) * 23.7848) : ctx.V(_17s0, 7, (_17i0 - 0.942044) * 17.2544);
        _17 = Db.nb(Bd._17[0][_17s0[0]], _17s0[1]);
        _18 = Xb._9 * _17;
        _19 = Bd._Texture * 2 + Xb._7;
        ctx.S(Xb.Pd, [0.5, 0.5]);
        Xb.Md = Xb._5;
        ctx.V(Xb.Nd, _18, _18);
        ctx.T(Xb.gf, [1, 1, 1]);
        Xb.Od = 1;
        Xb.Qc = _19 < 0 ? 0 : _19 >= 6 ? 5 : _19;
      };

      this.Cc = function (Bd, Xb, Wc) {
        if (Xb._1 > Xb._11) return true;
        return false;
      };
    }

    function Emitter_Splash() {
      var _1 = [],
          _5,
          _4,
          _6,
          _7,
          _7i0,
          _7s0 = [],
          _8,
          _9;

      this.pe = [{
        xe: 0,
        Rc: 5,
        Sc: 3,
        renderStyleIndex: 0
      }];
      this.name = "Splash";

      this.ud = function (Bd) {
        Bd.dd();
        Bd._7 = [[[0, 1, 1], [1, 0.990835, 0.969351, 0.938093, 0.898586, 0.851781, 0.798265, 0.738368, 0.672217, 0.599762, 0.520766, 0.43479, 0.341128, 0.238703, 0.125869, 0, 0]]];
        Bd.jd = 100;
        Bd.Vc = 0;
      };

      this.Mb = function (vd) {
        vd.zb = 5;
        vd.Gb = 1;
        vd.Jb = 1;
        vd.Ib = 1;
      };

      this.Pb = function (Qb, Bd, vd) {
        vd.zb = 5;
      };

      this.fd = function (Bd, Xb) {
        Xb._ = 0.0;
        ctx.W(_1, 0, 0, 0);
        Xb._2 = [];
        ctx.rb(Xb._2, _1, Bd.Mc);
        ctx.c(Xb._2, Bd.Ab, Xb._2);
        Xb._3 = 0;
        ctx.T(Xb.Ab, Xb._2);
      };

      this.gd = function (Bd, Xb) {
        Xb._ = 0.0;
        ctx.W(_1, 0, 0, 0);
        Xb._2 = [];
        ctx.rb(Xb._2, _1, Bd.Mc);
        ctx.c(Xb._2, Bd.Ab, Xb._2);
        Xb._3 = 0;
        ctx.T(Xb.Ab, Xb._2);
      };

      this.qc = function (Qb, Bd, Xb) {
        Xb._ += Qb;
        ctx.T(Xb.Ab, Xb._2);
        _5 = 300;
        _4 = 0.3;
        _6 = Xb._ / _4;
        _7i0 = _6 < 0 ? 0 : _6 > 1 ? 1 : _6;
        _7i0 < 0.1 ? ctx.V(_7s0, 0, (_7i0 - 0) * 10) : ctx.V(_7s0, 1, (_7i0 - 0.1) * 16.6667);
        _7 = Db.nb(Bd._7[0][_7s0[0]], _7s0[1]);
        _8 = _5 * _7;
        _9 = 0;
        ctx.S(Xb.Pd, [0.5, 0.5]);
        Xb.Md = Xb._3;
        ctx.V(Xb.Nd, _8, _8);
        ctx.T(Xb.gf, [1, 1, 1]);
        Xb.Od = 1;
        Xb.Qc = _9 < 0 ? 0 : _9 >= 15 ? 14 : _9;
      };

      this.Cc = function (Bd, Xb, Wc) {
        _4 = 0.3;
        if (Xb._ > _4) return true;
        return false;
      };
    }

    function Emitter_Fireworks_parent() {
      var _,
          _i0,
          _s0 = [],
          _2,
          _3 = [],
          _3i,
          _3s = [],
          _4 = [],
          _4i,
          _4s = [],
          _5,
          _6 = [],
          _7 = [],
          _10,
          _11,
          _11i0,
          _11s0 = [],
          _13;

      this.pe = [];
      this.name = "Fireworks_parent";

      this.ud = function (Bd) {
        Bd._ = [[[1.47301, 1.47301, 1.47301], [0, 0, 0]]];
        Bd.dd();
        Bd._3 = [[[-383.168, 98.272], [-383.168, -101.728], [-383.168, -101.728]]];
        Bd._4 = [[[405.632, 91.36], [405.632, -108.64], [405.632, -108.64]]];
        Bd._11 = [[[0, 0, 0], [1, 1, 1], [2, 2, 2]]];
        Bd.uc(new Emitter_Stripe_parent(), {
          xc: 1,
          sd: false
        });
        Bd.uc(new Emitter_Sparks(), {
          xc: 1,
          sd: false
        });
        Bd.uc(new Emitter_Splash(), {
          xc: 1,
          sd: false
        });
        Bd.jd = 3;
        Bd.Vc = 0;
      };

      this.Mb = function (vd) {
        vd.zb = 5;
        vd.Gb = 1;
        vd.Jb = 1;
      };

      this.Pb = function (Qb, Bd, vd) {
        _i0 = Bd.Ld.Rb < 0 ? 0 : Bd.Ld.Rb > 5.99432 ? 0 + (Bd.Ld.Rb - 0) % 5.99432 : Bd.Ld.Rb;
        _i0 < 1.50077 ? ctx.V(_s0, 0, (_i0 - 0) * 0.666323) : ctx.V(_s0, 1, (_i0 - 1.50077) * 0.222541);
        _ = Db.nb(Bd._[0][_s0[0]], _s0[1]);
        vd.zb = _;
      };

      this.fd = function (Bd, Xb) {
        Xb._1 = 0.0;
        _2 = 0 + Bd.Ld.rand() * (1 - 0);
        _3i = Db.kb(_2);
        ctx.V(_3s, 0, (_3i - 0) * 1);
        Db.lb(_3, Bd._3[_3s[0]], _3s[1]);
        _4i = Db.kb(_2);
        ctx.V(_4s, 0, (_4i - 0) * 1);
        Db.lb(_4, Bd._4[_4s[0]], _4s[1]);
        _5 = 0 + Bd.Ld.rand() * (1 - 0);
        ctx.Y(_6, _3, _4, _5);
        ctx.W(_7, _6[0], _6[1], 0);
        Xb._8 = [];
        ctx.rb(Xb._8, _7, Bd.Mc);
        ctx.c(Xb._8, Bd.Ab, Xb._8);
        Xb._9 = 0;
        _10 = 0 + Bd.Ld.rand() * (1 - 0);
        _11i0 = _10 < 0 ? 0 : _10 > 1 ? 1 : _10;
        _11i0 < 0.710626 ? _11i0 < 0.388302 ? ctx.V(_11s0, 0, (_11i0 - 0) * 2.57531) : ctx.V(_11s0, 1, (_11i0 - 0.388302) * 3.10247) : ctx.V(_11s0, 2, (_11i0 - 0.710626) * 3.45573);
        _11 = Db.nb(Bd._11[0][_11s0[0]], _11s0[1]);
        Xb._12 = _11;
        ctx.T(Xb.Ab, Xb._8);
        Xb.pc(0)._Texture = Xb._12;
        Xb.pc(1)._Texture = Xb._12;
      };

      this.gd = function (Bd, Xb) {
        Xb._1 = 0.0;
        _2 = 0 + Bd.Ld.rand() * (1 - 0);
        _3i = Db.kb(_2);
        ctx.V(_3s, 0, (_3i - 0) * 1);
        Db.lb(_3, Bd._3[_3s[0]], _3s[1]);
        _4i = Db.kb(_2);
        ctx.V(_4s, 0, (_4i - 0) * 1);
        Db.lb(_4, Bd._4[_4s[0]], _4s[1]);
        _5 = 0 + Bd.Ld.rand() * (1 - 0);
        ctx.Y(_6, _3, _4, _5);
        ctx.W(_7, _6[0], _6[1], 0);
        Xb._8 = [];
        ctx.rb(Xb._8, _7, Bd.Mc);
        ctx.c(Xb._8, Bd.Ab, Xb._8);
        Xb._9 = 0;
        _10 = 0 + Bd.Ld.rand() * (1 - 0);
        _11i0 = _10 < 0 ? 0 : _10 > 1 ? 1 : _10;
        _11i0 < 0.710626 ? _11i0 < 0.388302 ? ctx.V(_11s0, 0, (_11i0 - 0) * 2.57531) : ctx.V(_11s0, 1, (_11i0 - 0.388302) * 3.10247) : ctx.V(_11s0, 2, (_11i0 - 0.710626) * 3.45573);
        _11 = Db.nb(Bd._11[0][_11s0[0]], _11s0[1]);
        Xb._12 = _11;
        ctx.T(Xb.Ab, Xb._8);
        Xb.pc(0)._Texture = Xb._12;
        Xb.pc(1)._Texture = Xb._12;
      };

      this.qc = function (Qb, Bd, Xb) {
        Xb._1 += Qb;
        ctx.T(Xb.Ab, Xb._8);
        Xb.pc(0)._Texture = Xb._12;
        Xb.pc(1)._Texture = Xb._12;
      };

      this.Cc = function (Bd, Xb, Wc) {
        _13 = 2;
        if (Xb._1 > _13) return true;
        return false;
      };
    }

    this.qd = function (Ld) {
      Ld.Dd = 0.0333333;
      Ld.Ud = 0;
      Ld.presimFrameTime = 0.1;

      Ld.rand = function () {
        return Math.random();
      };

      Ld.pd(new Emitter_Fireworks_parent());
    };

    this.kb = function (v) {
      return v < 0 ? 0 : v > 1 ? 1 : v;
    };

    this.lb = function (r, path, je) {
      var indexInt = Math.floor(je);
      var lerp = je - indexInt;
      ctx.Y(r, path[indexInt], path[indexInt + 1], lerp);
    };

    this.nb = function (funcValues, je) {
      var indexInt = Math.floor(je);
      var nextInt = indexInt + 1;
      return ctx.X(funcValues[indexInt], funcValues[nextInt], je - indexInt);
    };
  }

  return Fireworks01;
});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/neutrinoparticles/exported_effects/Sparks_epic.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '19935/j0w9Fy5yK4u+rWHjs', 'Sparks_epic');
// neutrinoparticles/exported_effects/Sparks_epic.js

"use strict";

// 17afc3d4-2c52-414f-9114-99159fbc63f9
(function (root, factory) {
  if (typeof exports === 'object' && typeof module !== 'undefined') {
    module.exports = factory();
  } else if (typeof define === 'function' && define.amd) {
    define(['exports'], function (exports) {
      (root.NeutrinoEffect = exports)['Sparks_epic'] = factory();
    });
  } else {
    var namespace = root.NeutrinoEffect || (root.NeutrinoEffect = {});
    namespace.__last__ = namespace['Sparks_epic'] = factory();
  }
})(typeof self !== 'undefined' ? self : void 0, function () {
  function Sparks_epic(ctx) {
    var Db = this;

    var ne = function ne(Ld, Bd) {
      this.Ld = Ld;
      this.Bd = Bd;

      if (this.Bd.we.pe.length > 0) {
        this.we = this.Bd.we.pe[0];
        this.Lc = [ne.prototype.Ec, ne.prototype.Fc][this.we.xe];
      } else this.we = null;
    };

    ne.prototype = {
      Ec: function Ec(fe, Ab, Xb) {
        var Gc = ctx.ib(Xb.Md);
        var Hc = Math.cos(Gc);
        var Ic = Math.sin(Gc);
        var ye = ctx.Ae(Xb.Nd[0]);
        var ze = ctx.Ae(Xb.Nd[1]);
        fe.
        /**/
        transform(ye * Hc, ye * Ic, ze * -Ic, ze * Hc, Ab[0], Ab[1]);
      },
      Fc: function Fc(fe, Ab, Xb) {
        var q = Xb.Mc;
        var z2 = 2.0 * q[2] * q[2];
        var xy = 2.0 * q[0] * q[1];
        var wz = 2.0 * q[3] * q[2];
        var ye = ctx.Ae(Xb.Nd[0]);
        var ze = ctx.Ae(Xb.Nd[1]);
        fe.
        /**/
        transform(ye * (1.0 - 2.0 * q[1] * q[1] - z2), ye * (xy + wz), ze * (wz - xy), ze * (2.0 * q[0] * q[0] + z2 - 1.0), Ab[0], Ab[1]);
      },
      Pc: function Pc(fe, Xb, ge) {
        Xb.vc(fe, -1, ge);

        if (this.we) {
          if (this.Be != null && !Xb.oc) {
            if (Xb.Od > 0.001) {
              var De = Math.floor(Xb.Qc % this.we.Rc);
              var Ee = Math.floor(Xb.Qc / this.we.Rc);
              var Ab = Xb.Ab.slice();
              var Nd = Xb.Nd.slice();

              if (!ge || ge.
              /**/
              transform(Ab, Nd)) {
                var df = Math.abs(Nd[0]);
                var ef = Math.abs(Nd[1]);

                if (df > 0.001 && ef > 0.001) {
                  fe.save();
                  this.Lc(fe, Ab, Xb);
                  fe.translate(-df * Xb.Pd[0], -ef * (1 - Xb.Pd[1]));
                  fe.globalAlpha *= Xb.Od;

                  if (Xb.gf[0] < 0.999 || Xb.gf[1] < 0.999 || Xb.gf[2] < 0.999) {
                    if (df >= 1 && ef >= 1) {
                      var Ye = df < this.Tc ? df : this.Tc;
                      var Ze = ef < this.Uc ? ef : this.Uc;
                      ctx.af(Ye, Ze);
                      ctx.bf.globalCompositeOperation = "copy";
                      ctx.bf.drawImage(this.Be.image, this.Be.x + this.Tc * De, this.Be.y + this.Uc * Ee, this.Tc, this.Uc, 0, 0, Ye, Ze);
                      ctx.bf.globalCompositeOperation = "multiply";
                      ctx.bf.fillStyle = ctx.ff(Xb.gf);
                      ctx.bf.fillRect(0, 0, Ye, Ze);
                      ctx.bf.globalCompositeOperation = "destination-atop";
                      ctx.bf.drawImage(this.Be.image, this.Be.x + this.Tc * De, this.Be.y + this.Uc * Ee, this.Tc, this.Uc, 0, 0, Ye, Ze);
                      fe.drawImage(ctx.cf, 0, 0, Ye, Ze, 0, 0, df, ef);
                    }
                  } else {
                    fe.drawImage(this.Be.image, this.Be.x + this.Tc * De, this.Be.y + this.Uc * Ee, this.Tc, this.Uc, 0, 0, df, ef);
                  }

                  fe.restore();
                }
              }
            }
          }
        }

        Xb.vc(fe, 1, ge);
      },
      Hd: function Hd(fe, ge) {
        fe.save();

        if (this.we) {
          fe.globalCompositeOperation = this.Ld.materials[this.Ld.
          /**/
          model.renderStyles[this.we.renderStyleIndex].materialIndex];
          this.Be = this.Ld.textureDescs[this.Ld.
          /**/
          model.renderStyles[this.we.renderStyleIndex].textureIndices[0]];
        } else {
          this.Be = null;
        }

        if (this.Be) {
          this.Tc = this.Be.width / this.we.Rc;
          this.Uc = this.Be.height / this.we.Sc;
        }

        function kd(a, b) {
          if (a.Ab[2] > b.Ab[2]) return 1;
          if (a.Ab[2] < b.Ab[2]) return -1;
          return 0;
        }

        switch (this.Bd.Vc) {
          case 0:
            for (var Wb = 0; Wb < this.Bd.tc.length; ++Wb) {
              this.Pc(fe, this.Bd.tc[Wb], ge);
            }

            break;

          case 1:
            for (var Wb = this.Bd.tc.length; Wb-- > 0;) {
              this.Pc(fe, this.Bd.tc[Wb], ge);
            }

            break;

          case 2:
            this.Bd.tc.sort(kd);

            for (var Wb = 0; Wb < this.Bd.tc.length; ++Wb) {
              this.Pc(fe, this.Bd.tc[Wb], ge);
            }

            break;
        }

        fe.restore();
      }
    };

    var oe = function oe(Ld, Bd) {
      this.Ld = Ld;
      this.Bd = Bd;
      if (this.Bd.we.pe.length > 0) this.we = this.Bd.we.pe[0];else this.we = null;
      this.vertex = [{
        /**/
        position: [0.0, 0.0, 0.0],

        /**/
        color: [0, 0, 0, 0],

        /**/
        texCoords: [[0.0, 0.0]]
      }, {
        /**/
        position: [0.0, 0.0, 0.0],

        /**/
        color: [0, 0, 0, 0],

        /**/
        texCoords: [[0.0, 0.0]]
      }, {
        /**/
        position: [0.0, 0.0, 0.0],

        /**/
        color: [0, 0, 0, 0],

        /**/
        texCoords: [[0.0, 0.0]]
      }, {
        /**/
        position: [0.0, 0.0, 0.0],

        /**/
        color: [0, 0, 0, 0],

        /**/
        texCoords: [[0.0, 0.0]]
      }];
    };

    oe.prototype = {
      qe: function qe(Xb, se, re, te, renderBuffer) {
        Xb.Ce(-1, se, re, te, renderBuffer);

        if (this.we) {
          if (!Xb.oc) {
            var v0 = this.vertex[0];
            var v1 = this.vertex[1];
            var v2 = this.vertex[2];
            var v3 = this.vertex[3];
            var Fe = [],
                Ge = [];

            if (this.we.xe == 0) {
              var a = ctx.ib(Xb.Md);
              var s = -Math.sin(a);
              var c = Math.cos(a);
              Fe[0] = se[0] * c + re[0] * s;
              Fe[1] = se[1] * c + re[1] * s;
              Fe[2] = se[2] * c + re[2] * s;
              Ge[0] = -se[0] * s + re[0] * c;
              Ge[1] = -se[1] * s + re[1] * c;
              Ge[2] = -se[2] * s + re[2] * c;
            } else {
              var q = Xb.Mc;
              var z2 = 2.0 * q[2] * q[2];
              var xy = 2.0 * q[0] * q[1];
              var wz = 2.0 * q[3] * q[2];
              Fe[0] = 1.0 - 2.0 * q[1] * q[1] - z2;
              Fe[1] = xy + wz;
              Fe[2] = 2.0 * q[0] * q[2] - 2.0 * q[3] * q[1];
              Ge[0] = xy - wz;
              Ge[1] = 1.0 - 2.0 * q[0] * q[0] - z2;
              Ge[2] = 2.0 * q[1] * q[2] + 2.0 * q[3] * q[0];
            }

            var He = [],
                Ie = [],
                Je = [],
                Ke = [];
            ctx.u(He, Fe, -Xb.Nd[0] * Xb.Pd[0]);
            ctx.u(Ie, Fe, Xb.Nd[0] * (1.0 - Xb.Pd[0]));
            ctx.u(Je, Ge, -Xb.Nd[1] * Xb.Pd[1]);
            ctx.u(Ke, Ge, Xb.Nd[1] * (1.0 - Xb.Pd[1]));
            ctx.c(v0.
            /**/
            position, He, Je);
            ctx.c(v0.
            /**/
            position, v0.
            /**/
            position, Xb.Ab);
            ctx.c(v1.
            /**/
            position, He, Ke);
            ctx.c(v1.
            /**/
            position, v1.
            /**/
            position, Xb.Ab);
            ctx.c(v2.
            /**/
            position, Ie, Ke);
            ctx.c(v2.
            /**/
            position, v2.
            /**/
            position, Xb.Ab);
            ctx.c(v3.
            /**/
            position, Ie, Je);
            ctx.c(v3.
            /**/
            position, v3.
            /**/
            position, Xb.Ab);
            {
              var rgb = ctx.v(Xb.gf, 255);
              v0.
              /**/
              color = v1.
              /**/
              color = v2.
              /**/
              color = v3.
              /**/
              color = [rgb[0], rgb[1], rgb[2], Xb.Od * 255];
            }
            {
              var De = Math.floor(Xb.Qc % this.we.Rc);
              var Ee = Math.floor(Xb.Qc / this.we.Rc);
              var Pe, Qe, Re, Se;
              var We = this.Ld.texturesRemap[this.Ld.
              /**/
              model.renderStyles[this.we.renderStyleIndex].textureIndices[0]];

              if (We) {
                var Ue = We.width / this.we.Rc;
                var Ve = We.height / this.we.Sc;
                var Pe = We.x + De * Ue;
                var Qe = Pe + Ue;
                var Re = We.y + We.height - Ee * Ve;
                var Se = Re - Ve;
              } else {
                var Ue = 1.0 / this.we.Rc;
                var Ve = 1.0 / this.we.Sc;
                var Pe = De * Ue;
                var Qe = Pe + Ue;
                var Re = 1.0 - Ee * Ve;
                var Se = Re - Ve;
              }

              v0.
              /**/
              texCoords[0] = [Pe, Se];
              v1.
              /**/
              texCoords[0] = [Pe, Re];
              v2.
              /**/
              texCoords[0] = [Qe, Re];
              v3.
              /**/
              texCoords[0] = [Qe, Se];
            }

            if (renderBuffer.beforeQuad) {
              renderBuffer.beforeQuad(this.we.renderStyleIndex);
            }

            renderBuffer.pushVertex(v0);
            renderBuffer.pushVertex(v1);
            renderBuffer.pushVertex(v2);
            renderBuffer.pushVertex(v3);

            if (!renderBuffer.__lastRenderCall) {
              renderBuffer.__lastRenderCall = new ctx.RenderCall(0, 6, this.we.renderStyleIndex);
            } else {
              var lastRenderCall = renderBuffer.__lastRenderCall;

              if (lastRenderCall.renderStyleIndex == this.we.renderStyleIndex) {
                lastRenderCall.numIndices += 6;
              } else {
                renderBuffer.pushRenderCall(lastRenderCall);
                renderBuffer.__lastRenderCall = new ctx.RenderCall(lastRenderCall.startIndex + lastRenderCall.numIndices, 6, this.we.renderStyleIndex);
              }
            }
          }
        }

        Xb.Ce(1, se, re, te, renderBuffer);
      },
      ue: function ue(se, re, te, renderBuffer) {
        switch (this.Bd.Vc) {
          case 0:
            for (var Wb = 0; Wb < this.Bd.tc.length; ++Wb) {
              this.qe(this.Bd.tc[Wb], se, re, te, renderBuffer);
            }

            break;

          case 1:
            for (var Wb = this.Bd.tc.length; Wb-- > 0;) {
              this.qe(this.Bd.tc[Wb], se, re, te, renderBuffer);
            }

            break;

          case 2:
            this.Bd.tc.forEach(function (Xb) {
              Xb.depth = ctx.H(te, Xb.Ab);
            });
            this.Bd.tc.sort(function (a, b) {
              if (a.depth < b.depth) return 1;
              if (a.depth > b.depth) return -1;
              return 0;
            });
            this.Bd.tc.forEach(function (Xb) {
              this.qe(Xb, se, re, te, renderBuffer);
            }, this);
            break;
        }
      }
    };

    var ld = function ld(Ld, we, ve) {
      var Vb = this;
      this.Ld = Ld;
      this.we = we; // Eb

      function Eb() {
        this.Fb = 0;
        this.Gb = 1;
        this.Hb = null;
        this.Ib = null;
        this.Kb = 0;
        this.Lb = 1;
        Vb.we.Mb(this); // IMPL

        this.Nb = function () {
          this.Ob = this.Gb;
          this.Fb = 0;
        };

        this.Nb();
      }

      Eb.prototype = {
        Jd: function Jd() {
          this.Nb();
        },
        Id: function Id(Qb, Ab, Mc) {
          Vb.we.Pb(Qb, Vb, this); // IMPL

          var Rb = Vb.Rb;
          var systemTime = Ld.Rb;
          var Sb = Qb;
          var ic = 0;

          if (this.zb > 0.000001) {
            var Tb = this.Ob + Qb * this.zb;

            while (Tb >= 1.0) {
              var Ub = this.zb < 0.001 ? 0.0 : (1.0 - this.Ob) / this.zb;
              Sb -= Ub;
              Rb += Ub;
              systemTime += Ub;

              if (this.Hb != null && Rb > this.Hb) {
                Vb.disactivate();
                break;
              }

              Vb.Rb = Rb;
              Ld.Rb = systemTime;
              if (Ab && Qb > 0) ctx.ab(Vb.Ab, Ab, Vb.Bb, Sb / Qb);
              if (Mc && Qb > 0) ctx.slerpq(Vb.Mc, Mc, Vb.prevRotation, Sb / Qb); // for the future when Jb would be external

              this.Lb = this.Jb;

              for (var Wb = 0; Wb < this.Jb; ++Wb) {
                if (Vb.sc.length == 0) break;
                if (this.Jb == 1) this.Kb = 0;else this.Kb = Wb / (this.Jb - 1);
                var Xb = Vb.sc.pop();
                Vb.tc.unshift(Xb);
                if (Wb == 0) Xb.Yb();else Xb.Zb();
                Xb.Id(Sb);
                ++ic;
              }

              this.Ob = 0.0;
              Tb -= 1.0;

              if (this.Ib != null && ++this.Fb >= this.Ib) {
                Vb.disactivate();
                break;
              }
            }

            this.Ob = Tb;
          }

          Rb += Sb;
          Vb.Rb = Rb;
          if (Ab) ctx.T(Vb.Ab, Ab);
          if (Mc) ctx.U(Vb.Mc, Mc);
          return ic;
        }
      }; // ac

      function ac() {
        this.Gb = 1;
        this.Kb = 0;
        this.Lb = 1;
        Vb.we.Mb(this); // IMPL

        this.Nb = function () {
          this.bc = this.Gb;
        };

        this.Nb();
      }

      ac.prototype = {
        Jd: function Jd() {
          this.Nb();
        },
        Id: function Id(Qb, Ab, Mc) {
          Vb.we.Pb(Qb, Vb, this); // IMPL

          var cc = Vb.Rb;
          var dc = cc + Qb;
          var systemTimeBeforeFrame = Ld.Rb;
          var systemTimeAfterFrame = systemTimeBeforeFrame + Qb;
          var ec = Ab ? ctx.O(ctx.h(Ab, Vb.Bb)) : 0;
          var ic = 0;

          if (ec > 0.000001) {
            var fc = ec / this.rd;
            var Tb = this.bc + fc;
            var hc = fc < 0.001 ? 1.0 - this.bc : (1.0 - this.bc) / fc;
            var jc = [];

            while (Tb > 1.0) {
              var kc = cc + hc * Qb;
              if (Ab) ctx.ab(jc, Vb.Bb, Ab, hc);
              Vb.Rb = kc;
              ctx.T(Vb.Ab, jc);
              Ld.Rb = ctx.X(systemTimeBeforeFrame, systemTimeAfterFrame, hc); // for the future when Jb would be external

              this.Lb = this.Jb;

              for (var Wb = 0; Wb < this.Jb; ++Wb) {
                if (Vb.sc.length == 0) break;
                if (this.Jb == 1) this.Kb = 0;else this.Kb = Wb / (this.Jb - 1);
                var Xb = Vb.sc.pop();
                Vb.tc.unshift(Xb);
                if (Wb == 0) Xb.Yb();else Xb.Zb();
                Xb.Id(Qb * (1.0 - hc));
                ++ic;
              }

              hc += 1.0 / fc;
              Tb -= 1.0;
            }

            this.bc = Tb;
          }

          Vb.Rb = dc;
          if (Ab) ctx.T(Vb.Ab, Ab);
          if (Mc) ctx.U(Vb.Mc, Mc);
          return ic;
        }
      }; // mc

      function mc() {
        this.Ab = [];
        this.Pd = [];
        this.Nd = [];
        this.gf = [];
        this.Kc = [];
      }

      mc.prototype = {
        nc: function nc() {
          this.oc = false;

          for (var i = 0; i < this.Kc.length; ++i) {
            var pc = this.Kc[i];
            pc.Bd.Jd(this.Ab, null);
            if (pc.Ad.sd) pc.Bd.disactivate();
          }
        },
        Yb: function Yb() {
          Vb.we.fd(Vb, this); // IMPL

          this.nc();
        },
        Zb: function Zb() {
          Vb.we.gd(Vb, this); // IMPL

          this.nc();
        },
        Id: function Id(Qb) {
          Vb.we.qc(Qb, Vb, this); // IMPL

          this.rc(Qb);
        },
        pc: function pc(je) {
          return this.Kc[je].Bd;
        },
        rc: function rc(Qb) {
          for (var i = 0; i < this.Kc.length; i++) {
            this.Kc[i].Bd.Id(Qb, this.Ab, null);
          }
        },
        uc: function uc(md, nd) {
          this.Kc.push({
            Bd: new ld(Ld, md, ve),
            Ad: nd
          });
        },
        vc: function vc(fe, xc, ge) {
          for (var i = 0; i < this.Kc.length; ++i) {
            var pc = this.Kc[i];
            if (xc == pc.Ad.xc) pc.Bd.Hd(fe, ge);
          }
        },
        Ce: function Ce(xc, se, re, te, renderBuffer) {
          for (var i = 0; i < this.Kc.length; ++i) {
            var pc = this.Kc[i];
            if (xc == pc.Ad.xc) pc.Bd.ue(se, re, te, renderBuffer);
          }
        },
        wc: function wc(fe) {
          this.oc = true;

          for (var i = 0; i < this.Kc.length; ++i) {
            var pc = this.Kc[i];

            if (pc.Ad.sd) {
              pc.Bd.activate();
              pc.Bd.Id(0);
            } else pc.Bd.disactivate();
          }
        },
        yc: function yc(Gd) {
          for (var i = 0; i < this.Kc.length; ++i) {
            this.Kc[i].Bd.Ed(Gd);
          }
        }
      }; // zc

      function zc() {}

      zc.prototype.Ac = function (Xb) {
        return Vb.we.Cc(Vb, Xb, this); // IMPL
      }; // ld Ad


      this.Ab = [];
      this.Bb = [];
      this.Mc = [];
      this.prevRotation = [];
      this.tc = [];
      this.sc = [];
      this.Wc = new zc();
      this.construct = new ve(this.Ld, this);
      this.Yc = [];
      this.ad = [];

      this.dd = function () {
        this.vd = new Eb();
      };

      this.ed = function () {
        this.vd = new ac();
      };

      this.we.ud(this); // IMPL

      for (var Wb = 0; Wb < this.jd; ++Wb) {
        var Xb = new mc();

        for (var id = 0; id < this.Yc.length; ++id) {
          var hd = this.Yc[id];
          Xb.uc(hd.Db, hd.Ad);
        }

        this.sc.push(Xb);
      }

      this.Nb = function (Ab, Mc) {
        ctx.T(this.Ab, Ab ? Ab : [0, 0, 0]);
        ctx.T(this.Bb, this.Ab);
        ctx.U(this.Mc, Mc ? Mc : [0, 0, 0, 1]);
        ctx.U(this.prevRotation, this.Mc);
        this.Rb = 0.0;
        this.wd = 0.0;
        this.Zc = true;
        this.paused_ = false;
        this.generatorsPaused_ = false;
        ctx.W(this.ad, 0, 0, 0);
      };
    };

    ld.prototype.Jd = function (Ab, Mc) {
      this.Nb(Ab, Mc);
      this.sc.push.apply(this.sc, this.tc);
      this.tc.length = 0;
      this.vd.Jd();
    };

    ld.prototype.Id = function (Qb, Ab, Mc) {
      if (this.paused_) {
        this.Td(Ab, Mc);
        return;
      }

      this.wd = this.Rb;

      if (Ab) {
        ctx.T(this.Bb, this.Ab);

        if (Qb > 0.0001) {
          var shift = [];
          ctx.g(shift, Ab, this.Bb);
          ctx.T(this.ad, shift);
          ctx.w(this.ad, this.ad, Qb);
        } else {
          ctx.W(this.ad, 0, 0, 0);
        }
      } else {
        ctx.W(this.ad, 0, 0, 0);
      }

      if (Mc) {
        ctx.U(this.prevRotation, this.Mc);
      }

      var ic;

      if (this.Zc && !this.generatorsPaused_) {
        ic = this.vd.Id(Qb, Ab, Mc);
      } else {
        if (Ab) ctx.T(this.Ab, Ab);
        if (Mc) ctx.U(this.Mc, Mc);
        ic = 0;
        this.Rb += Qb;
      }

      for (var Wb = ic; Wb < this.tc.length;) {
        var Xb = this.tc[Wb];

        if (!Xb.oc) {
          Xb.Id(Qb);

          if (this.Wc.Ac(this.tc[Wb])) {
            Xb.wc();
            if (this.xd(Wb)) continue;
          }
        } else {
          Xb.rc(Qb);
          if (this.xd(Wb)) continue;
        }

        ++Wb;
      }
    };

    ld.prototype.xd = function (je) {
      var Xb = this.tc[je];
      var ready = true;

      for (var id = 0; id < Xb.Kc.length; ++id) {
        var Bd = Xb.Kc[id].Bd;

        if (Bd.activated() || Bd.tc.length > 0) {
          ready = false;
          break;
        }
      }

      if (ready) {
        this.sc.push(this.tc[je]);
        this.tc.splice(je, 1);
        return true;
      }

      return false;
    };

    ld.prototype.Hd = function (fe, ge) {
      this.construct.Hd(fe, ge);
    };

    ld.prototype.ue = function (se, re, te, renderBuffer) {
      this.construct.ue(se, re, te, renderBuffer);
    };

    ld.prototype.Td = function (Ab, Mc) {
      this.wd = this.Rb;

      if (Ab) {
        ctx.T(this.Bb, this.Ab);
        ctx.T(this.Ab, Ab);
      }

      if (Mc) {
        ctx.U(this.prevRotation, this.Mc);
        ctx.U(this.Mc, Mc);
      }
    };

    ld.prototype.uc = function (md, nd) {
      this.Yc.push({
        Db: md,
        Ad: nd
      });
    };

    ld.prototype.
    /**/
    pause = function () {
      this.paused_ = true;
    };

    ld.prototype.
    /**/
    unpause = function () {
      this.paused_ = false;
    };

    ld.prototype.
    /**/
    paused = function () {
      return this.paused_;
    };

    ld.prototype.
    /**/
    pauseGenerators = function () {
      this.generatorsPaused_ = true;
    };

    ld.prototype.
    /**/
    unpauseGenerators = function () {
      this.generatorsPaused_ = false;
    };

    ld.prototype.
    /**/
    generatorsPaused = function () {
      return this.generatorsPaused_;
    };

    ld.prototype.activate = function () {
      this.Zc = true;
    };

    ld.prototype.disactivate = function () {
      this.Zc = false;
    };

    ld.prototype.activated = function () {
      return this.Zc;
    };

    ld.prototype.
    /**/
    getNumParticles = function () {
      return this.tc.length;
    };

    var ke = function ke() {
      var Cb = this;

      this._init = function (we, Ab, Mc, ve, options) {
        this.
        /**/
        model = we;
        this.Ab = [];
        this.Mc = []; // ke Ad

        this.od = [];

        this.pd = function (md) {
          var Bd = new ld(this, md, ve);
          Bd.Nb(this.Ab, this.Mc);
          this["_".concat(md.name)] = Bd;
          this.od.push(Bd);
        };

        this.Nb = function (Ab, Mc) {
          this.Cd = 0.0;
          this.Rb = 0.0;
          ctx.T(this.Ab, Ab ? Ab : [0, 0, 0]);
          ctx.U(this.Mc, Mc ? Mc : [0, 0, 0, 1]);
        };

        this.Nb(Ab, Mc);
        this.
        /**/
        model.qd(this); // IMPL

        this._presimNeeded = true;

        if (options.generatorsPaused) {
          this.
          /**/
          pauseGeneratorsInAllEmitters();
        }

        if (options.paused) {
          this.
          /**/
          pauseAllEmitters();
        } else {
          this.zeroUpdate();
          this.updateFixed(this.Ud, Ab, Mc, this.presimFrameTime);
          this._presimNeeded = false;
        }
      };
    };

    ke.prototype.
    /**/
    restart = function (
    /**/
    position,
    /**/
    rotation,
    /**/
    options) {
      this.Nb(
      /**/
      position ?
      /**/
      position : this.Ab,
      /**/
      rotation ?
      /**/
      rotation : this.Mc);
      this._presimNeeded = true;

      for (var i = 0; i < this.od.length; ++i) {
        this.od[i].Jd(this.Ab, this.Mc);
      }

      this._presimNeeded = true;

      if (options && options.generatorsPaused) {
        this.
        /**/
        pauseGeneratorsInAllEmitters();
      }

      if (options && options.paused) {
        this.
        /**/
        pauseAllEmitters();
      } else {
        this.zeroUpdate();
        this.updateFixed(this.Ud, this.Ab, this.Mc, this.presimFrameTime);
        this._presimNeeded = false;
      }
    };

    ke.prototype.zeroUpdate = function () {
      for (var i = 0; i < this.od.length; ++i) {
        this.od[i].Id(0, this.Ab, this.Mc);
      }
    };

    ke.prototype.
    /**/
    update = function (
    /**/
    dt,
    /**/
    position,
    /**/
    rotation) {
      if (this.Dd > 0.0) this.updateFixed(
      /**/
      dt,
      /**/
      position,
      /**/
      rotation, this.Dd);else this.updateFlex(
      /**/
      dt,
      /**/
      position,
      /**/
      rotation);
    };

    ke.prototype.updateFixed = function (
    /**/
    dt,
    /**/
    position,
    /**/
    rotation,
    /**/
    frameTime) {
      var updatedTime = 0.0;
      var hc = [];
      ctx.T(hc, this.Ab);
      var frameRotation = [];
      ctx.U(frameRotation, this.Mc);
      if (
      /**/
      position && ctx.equalv3_(
      /**/
      position, this.Ab))
        /**/
        position = null;
      if (
      /**/
      rotation && ctx.equalq_(
      /**/
      rotation, this.Mc))
        /**/
        rotation = null;

      while (
      /**/
      dt - updatedTime + this.Cd >=
      /**/
      frameTime) {
        var cc = this.Rb;
        if (
        /**/
        position) ctx.ab(hc, this.Ab,
        /**/
        position, updatedTime /
        /**/
        dt);
        if (
        /**/
        rotation) ctx.slerpq(frameRotation, this.Mc,
        /**/
        rotation, updatedTime /
        /**/
        dt);

        for (var i = 0; i < this.od.length; ++i) {
          this.od[i].Id(
          /**/
          frameTime, hc, frameRotation);
          this.Rb = cc;
        }

        updatedTime +=
        /**/
        frameTime - this.Cd;
        this.Cd = 0.0;
        this.Rb = cc +
        /**/
        frameTime;
      }

      if (
      /**/
      position) ctx.T(this.Ab,
      /**/
      position);
      if (
      /**/
      rotation) ctx.U(this.Mc,
      /**/
      rotation);
      this.Cd +=
      /**/
      dt - updatedTime;
    };

    ke.prototype.updateFlex = function (
    /**/
    dt,
    /**/
    position,
    /**/
    rotation) {
      var cc = this.Rb;

      for (var i = 0; i < this.od.length; ++i) {
        this.od[i].Id(
        /**/
        dt,
        /**/
        position,
        /**/
        rotation);
        this.Rb = cc;
      }

      this.Rb = cc +
      /**/
      dt;
      if (
      /**/
      position) ctx.T(this.Ab,
      /**/
      position);
      if (
      /**/
      rotation) ctx.U(this.Mc,
      /**/
      rotation);
    };

    ke.prototype.
    /**/
    resetPosition = function (
    /**/
    position,
    /**/
    rotation) {
      if (
      /**/
      position) ctx.T(this.Ab,
      /**/
      position);
      if (
      /**/
      rotation) ctx.U(this.Mc,
      /**/
      rotation);

      for (var i = 0; i < this.od.length; ++i) {
        this.od[i].Td(this.Ab, this.Mc);
      }
    };

    ke.prototype.
    /**/
    setPropertyInAllEmitters = function (
    /**/
    name,
    /**/
    value) {
      var propName = "_".concat(
      /**/
      name);

      if (
      /**/
      value instanceof Array) {
        if (
        /**/
        value.length == 2) {
          for (var i = 0; i < this.od.length; ++i) {
            ctx.S(this.od[i][propName],
            /**/
            value);
          }
        } else {
          for (var i = 0; i < this.od.length; ++i) {
            ctx.T(this.od[i][propName],
            /**/
            value);
          }
        }
      } else {
        for (var i = 0; i < this.od.length; ++i) {
          this.od[i][propName] =
          /**/
          value;
        }
      }
    };

    ke.prototype.
    /**/
    pauseAllEmitters = function () {
      for (var i = 0; i < this.od.length; ++i) {
        this.od[i].
        /**/
        pause();
      }
    };

    ke.prototype.
    /**/
    unpauseAllEmitters = function () {
      for (var i = 0; i < this.od.length; ++i) {
        this.od[i].
        /**/
        unpause();
      }

      this.zeroUpdate();

      if (this._presimNeeded) {
        this.updateFixed(this.Ud, this.Ab, this.Mc, this.presimFrameTime);
        this._presimNeeded = false;
      }
    };

    ke.prototype.
    /**/
    areAllEmittersPaused = function () {
      for (var i = 0; i < this.od.length; ++i) {
        if (!this.od[i].paused()) return false;
      }

      return true;
    };

    ke.prototype.
    /**/
    pauseGeneratorsInAllEmitters = function () {
      for (var i = 0; i < this.od.length; ++i) {
        this.od[i].
        /**/
        pauseGenerators();
      }
    };

    ke.prototype.
    /**/
    unpauseGeneratorsInAllEmitters = function () {
      for (var i = 0; i < this.od.length; ++i) {
        this.od[i].
        /**/
        unpauseGenerators();
      }
    };

    ke.prototype.
    /**/
    areGeneratorsInAllEmittersPaused = function () {
      for (var i = 0; i < this.od.length; ++i) {
        if (!this.od[i].generatorsPaused()) return false;
      }

      return true;
    };

    ke.prototype.
    /**/
    getNumParticles = function () {
      var numParticles = 0;

      for (var i = 0; i < this.od.length; ++i) {
        numParticles += this.od[i].getNumParticles();
      }

      return numParticles;
    };

    var le = function le() {
      this._init = function (we, Ab, Mc, renderBuffer, options) {
        le.prototype._init.call(this, we, Ab, Mc, oe, options);

        this.texturesRemap = [];
        var indices = [];
        {
          var verDisp;

          for (var Wb = 0; Wb < this.
          /**/
          model.Xe; ++Wb) {
            verDisp = Wb * 4;
            indices.push(verDisp + 0, verDisp + 3, verDisp + 1, verDisp + 1, verDisp + 3, verDisp + 2);
          }
        }
        this.renderBuffer = renderBuffer;
        this.renderBuffer.initialize(this.
        /**/
        model.Xe * 4, [2], indices, this.
        /**/
        model.Xe);
        this.renderBuffer.__numIndices = 0;
      };
    };

    le.prototype = new ke();

    le.prototype.
    /**/
    fillGeometryBuffers = function (
    /**/
    cameraRight,
    /**/
    cameraUp,
    /**/
    cameraDir) {
      this.renderBuffer.cleanup();
      this.renderBuffer.__lastRenderCall = null;
      this.od.forEach(function (Bd) {
        Bd.ue(
        /**/
        cameraRight,
        /**/
        cameraUp,
        /**/
        cameraDir, this.renderBuffer);
      }, this);
      if (this.renderBuffer.__lastRenderCall) this.renderBuffer.pushRenderCall(this.renderBuffer.__lastRenderCall);
    };

    var me = function me() {
      this._init = function (we, Ab, Mc, options) {
        me.prototype._init.call(this, we, Ab, Mc, ne, options);

        this.materials = [];
        this.
        /**/
        model.materials.forEach(function (value) {
          this.materials.push(['source-over', 'lighter', 'multiply'][value]);
        }, this);
        this.
        /**/
        textureDescs = [];
      };
    };

    me.prototype = new ke();

    me.prototype.
    /**/
    draw = function (
    /**/
    context,
    /**/
    camera) {
      for (var i = 0; i < this.od.length; ++i) {
        this.od[i].Hd(
        /**/
        context,
        /**/
        camera);
      }
    };

    this.createWGLInstance = function (
    /**/
    position,
    /**/
    rotation,
    /**/
    renderBuffer,
    /**/
    options) {
      var Ld = new le();

      Ld._init(this,
      /**/
      position,
      /**/
      rotation,
      /**/
      renderBuffer,
      /**/
      options || {});

      return Ld;
    };

    this.createCanvas2DInstance = function (
    /**/
    position,
    /**/
    rotation,
    /**/
    options) {
      var Ld = new me();

      Ld._init(this,
      /**/
      position,
      /**/
      rotation,
      /**/
      options || {});

      return Ld;
    };

    this.textures = ['spark_orange_glow.png'];
    this.materials = [1];
    this.renderStyles = [{
      materialIndex: 0,
      textureIndices: [0]
    }];
    this.Xe = 800;

    function Emitter_DefaultEmitter() {
      var _1,
          _2 = [],
          _2i,
          _2s = [],
          _3,
          _4 = [],
          _6 = [],
          _8 = [],
          _8i0,
          _8s0 = [],
          _8i1,
          _8s1 = [],
          _8i2,
          _8s2 = [],
          _10,
          _12,
          _13,
          _14 = [],
          _16,
          _18,
          _19,
          _19i0,
          _19s0 = [],
          _20 = [],
          _20a = [],
          _20i = [],
          _21 = [],
          _21fs = [],
          _21vs = [],
          _21rw = [],
          _21rwn = [],
          _21rwl,
          _21v = [],
          _21p = [],
          _21dtl,
          _21dtp,
          _21df,
          _21fsd = [],
          _22 = [],
          _22x = [],
          _22y = [],
          _22z = [],
          _23,
          _24 = [],
          _24i0,
          _24s0 = [],
          _24i1,
          _24s1 = [],
          _25,
          _26 = [],
          _26i0,
          _26s0 = [],
          _26i1,
          _26s1 = [],
          _26i2,
          _26s2 = [],
          _27,
          _27i0,
          _27s0 = [];

      this.pe = [{
        xe: 1,
        Rc: 1,
        Sc: 1,
        renderStyleIndex: 0
      }];
      this.name = "DefaultEmitter";

      this.ud = function (Bd) {
        Bd.dd();
        Bd._2 = [[[-474.8, 357.544], [560.536, 358], [560.536, 358]]];
        Bd._8 = [[[0, 0, 0]], [[-500, -200, -200], [-200, -500, -500]], [[0, 0, 0]]];
        Bd._19 = [[[1000, 840.98, 754.461, 730.229, 756.67, 821.18, 910.671, 1012.09, 1112.92, 1201.56, 1267.68, 1302.38, 1298.22, 1249.27, 1150.97, 1000, 1000]]];
        Bd._24 = [[[1, 1, 1]], [[0.4, 0.406561, 0.421334, 0.443034, 0.470859, 0.504328, 0.543192, 0.587403, 0.637113, 0.692703, 0.754872, 0.824812, 0.904612, 0.998302, 1.11553, 1.3, 1.3]]];
        Bd._26 = [[[1, 1, 1]], [[0.5, 1, 1]], [[0.5, 1, 1]]];
        Bd._27 = [[[0, 1, 1], [1, 1, 1], [1, 0.3, 0.3], [0.3, 0.3, 0.3], [0.3, 1, 1], [1, 1, 1], [1, 0, 0]]];
        Bd.jd = 800;
        Bd.Vc = 0;
      };

      this.Mb = function (vd) {
        vd.zb = 250;
        vd.Gb = 1;
        vd.Jb = 1;
      };

      this.Pb = function (Qb, Bd, vd) {
        vd.zb = 250;
      };

      this.fd = function (Bd, Xb) {
        Xb.Mc = [];
        Xb._ = 0.0;
        _1 = 0 + Bd.Ld.rand() * (1 - 0);
        _2i = Db.kb(_1);
        ctx.V(_2s, 0, (_2i - 0) * 1);
        Db.lb(_2, Bd._2[_2s[0]], _2s[1]);
        _3 = -500 + Bd.Ld.rand() * (500 - -500);
        ctx.W(_4, _2[0], _2[1], _3);
        Xb._5 = [];
        ctx.c(Xb._5, Bd.Ab, _4);
        ctx.randv3gen(_6, 600, Bd.Ld.rand);
        Xb._7 = [];
        ctx.T(Xb._7, _6);
        _8i0 = Bd.Rb < 0 ? 0 : Bd.Rb > 1 ? 1 : Bd.Rb;
        ctx.V(_8s0, 0, (_8i0 - 0) * 1);
        _8i1 = Bd.Rb < 0 ? 0 : Bd.Rb > 4 ? 0 + (Bd.Rb - 0) % 4 : Bd.Rb;
        _8i1 < 2 ? ctx.V(_8s1, 0, (_8i1 - 0) * 0.5) : ctx.V(_8s1, 1, (_8i1 - 2) * 0.5);
        _8i2 = Bd.Rb < 0 ? 0 : Bd.Rb > 1 ? 1 : Bd.Rb;
        ctx.V(_8s2, 0, (_8i2 - 0) * 1);
        ctx.W(_8, Db.nb(Bd._8[0][_8s0[0]], _8s0[1]), Db.nb(Bd._8[1][_8s1[0]], _8s1[1]), Db.nb(Bd._8[2][_8s2[0]], _8s2[1]));
        Xb._9 = [];
        ctx.T(Xb._9, _8);
        _10 = 3 + Bd.Ld.rand() * (4 - 3);
        Xb._11 = _10;
        _12 = 10 + Bd.Ld.rand() * (15 - 10);
        _13 = 10 + Bd.Ld.rand() * (15 - 10);
        ctx.V(_14, _12, _13);
        Xb._15 = [];
        ctx.S(Xb._15, _14);
        _16 = 0.4 + Bd.Ld.rand() * (0.6 - 0.4);
        Xb._17 = _16;
        ctx.T(Xb.Ab, Xb._5);
      };

      this.gd = function (Bd, Xb) {
        Xb.Mc = [];
        Xb._ = 0.0;
        _1 = 0 + Bd.Ld.rand() * (1 - 0);
        _2i = Db.kb(_1);
        ctx.V(_2s, 0, (_2i - 0) * 1);
        Db.lb(_2, Bd._2[_2s[0]], _2s[1]);
        _3 = -500 + Bd.Ld.rand() * (500 - -500);
        ctx.W(_4, _2[0], _2[1], _3);
        Xb._5 = [];
        ctx.c(Xb._5, Bd.Ab, _4);
        ctx.randv3gen(_6, 600, Bd.Ld.rand);
        Xb._7 = [];
        ctx.T(Xb._7, _6);
        _8i0 = Bd.Rb < 0 ? 0 : Bd.Rb > 1 ? 1 : Bd.Rb;
        ctx.V(_8s0, 0, (_8i0 - 0) * 1);
        _8i1 = Bd.Rb < 0 ? 0 : Bd.Rb > 4 ? 0 + (Bd.Rb - 0) % 4 : Bd.Rb;
        _8i1 < 2 ? ctx.V(_8s1, 0, (_8i1 - 0) * 0.5) : ctx.V(_8s1, 1, (_8i1 - 2) * 0.5);
        _8i2 = Bd.Rb < 0 ? 0 : Bd.Rb > 1 ? 1 : Bd.Rb;
        ctx.V(_8s2, 0, (_8i2 - 0) * 1);
        ctx.W(_8, Db.nb(Bd._8[0][_8s0[0]], _8s0[1]), Db.nb(Bd._8[1][_8s1[0]], _8s1[1]), Db.nb(Bd._8[2][_8s2[0]], _8s2[1]));
        Xb._9 = [];
        ctx.T(Xb._9, _8);
        _10 = 3 + Bd.Ld.rand() * (4 - 3);
        Xb._11 = _10;
        _12 = 10 + Bd.Ld.rand() * (15 - 10);
        _13 = 10 + Bd.Ld.rand() * (15 - 10);
        ctx.V(_14, _12, _13);
        Xb._15 = [];
        ctx.S(Xb._15, _14);
        _16 = 0.4 + Bd.Ld.rand() * (0.6 - 0.4);
        Xb._17 = _16;
        ctx.T(Xb.Ab, Xb._5);
      };

      this.qc = function (Qb, Bd, Xb) {
        Xb._ += Qb;
        _18 = Xb._ / Xb._11;
        _19i0 = _18 < 0 ? 0 : _18 > 1 ? 1 : _18;
        ctx.V(_19s0, 0, (_19i0 - 0) * 15);
        _19 = Db.nb(Bd._19[0][_19s0[0]], _19s0[1]);
        ctx.u(_20a, [200, 100, 60], Bd.Ld.Rb);
        ctx.c(_20a, _20a, Xb._5);
        ctx.u(_20i, _20a, 1.0 / 2000);
        ctx.xb(_20, _20i);
        ctx.k(_20, _20, [0.0078125, 0.0078125, 0.0078125]);
        ctx.c(_20, _20, [-1, -1, -1]);
        ctx.u(_20, _20, _19);
        ctx.T(_21fs, _20);
        ctx.c(_21fs, _21fs, Xb._9);
        ctx.T(_21vs, [0, 0, 0]);
        _21dtl = Qb;
        ctx.T(_21v, Xb._7);
        ctx.T(_21p, Xb._5);

        while (_21dtl > 0.0001) {
          _21dtp = _21dtl;
          ctx.T(_21fsd, _21fs);
          ctx.g(_21rw, _21vs, _21v);
          _21rwl = ctx.P(_21rw);

          if (_21rwl > 0.0001) {
            _21rwl = Math.sqrt(_21rwl);
            ctx.w(_21rwn, _21rw, _21rwl);
            _21df = 0.01 * Xb._17 * _21rwl;
            if (_21df * _21dtp > 0.2) _21dtp = 0.2 / _21df;
            ctx.c(_21fsd, _21fsd, ctx.v(_21rwn, _21rwl * _21df));
          }

          ctx.c(_21v, _21v, ctx.v(_21fsd, _21dtp));
          ctx.c(_21p, _21p, ctx.v(_21v, _21dtp));
          _21dtl -= _21dtp;
        }

        ctx.T(Xb._5, _21p);
        ctx.T(Xb._7, _21v);
        ctx.T(Xb.Ab, Xb._5);
        ctx.Q(_22z, [0, 0, 1]);
        ctx.I(_22x, Xb._7, _22z);
        ctx.Q(_22x, _22x);
        ctx.I(_22y, _22z, _22x);
        ctx.pb(_22, _22x, _22y, _22z);
        _23 = ctx.O(Xb._7);
        _24i0 = _23 < 0 ? 0 : _23 > 1 ? 1 : _23;
        ctx.V(_24s0, 0, (_24i0 - 0) * 1);
        _24i1 = _23 < 200 ? 200 : _23 > 400 ? 400 : _23;
        ctx.V(_24s1, 0, (_24i1 - 200) * 0.075);
        ctx.V(_24, Db.nb(Bd._24[0][_24s0[0]], _24s0[1]), Db.nb(Bd._24[1][_24s1[0]], _24s1[1]));
        _25 = ctx.j(Xb._15, _24);
        _18 = Xb._ / Xb._11;
        _26i0 = _18 < 0 ? 0 : _18 > 1 ? 1 : _18;
        ctx.V(_26s0, 0, (_26i0 - 0) * 1);
        _26i1 = _18 < 0 ? 0 : _18 > 1 ? 1 : _18;
        ctx.V(_26s1, 0, (_26i1 - 0) * 1);
        _26i2 = _18 < 0 ? 0 : _18 > 1 ? 1 : _18;
        ctx.V(_26s2, 0, (_26i2 - 0) * 1);
        ctx.W(_26, Db.nb(Bd._26[0][_26s0[0]], _26s0[1]), Db.nb(Bd._26[1][_26s1[0]], _26s1[1]), Db.nb(Bd._26[2][_26s2[0]], _26s2[1]));
        _27i0 = _18 < 0.1 ? 0.1 : _18 > 1 ? 1 : _18;
        _27i0 < 0.550358 ? _27i0 < 0.412479 ? _27i0 < 0.2 ? ctx.V(_27s0, 0, (_27i0 - 0.1) * 10) : ctx.V(_27s0, 1, (_27i0 - 0.2) * 4.70635) : _27i0 < 0.473283 ? ctx.V(_27s0, 2, (_27i0 - 0.412479) * 16.4463) : ctx.V(_27s0, 3, (_27i0 - 0.473283) * 12.9744) : _27i0 < 0.9 ? _27i0 < 0.6 ? ctx.V(_27s0, 4, (_27i0 - 0.550358) * 20.1442) : ctx.V(_27s0, 5, (_27i0 - 0.6) * 3.33333) : ctx.V(_27s0, 6, (_27i0 - 0.9) * 10);
        _27 = Db.nb(Bd._27[0][_27s0[0]], _27s0[1]);
        ctx.S(Xb.Pd, [0.5, 0.5]);
        ctx.U(Xb.Mc, _22);
        ctx.S(Xb.Nd, _25);
        ctx.T(Xb.gf, _26);
        Xb.Od = _27;
        Xb.Qc = 0;
      };

      this.Cc = function (Bd, Xb, Wc) {
        if (Xb._ > Xb._11) return true;
        return false;
      };
    }

    this.qd = function (Ld) {
      Ld.Dd = 0.0333333;
      Ld.Ud = 5;
      Ld.presimFrameTime = 0.1;

      Ld.rand = function () {
        return Math.random();
      };

      Ld.pd(new Emitter_DefaultEmitter());
    };

    this.kb = function (v) {
      return v < 0 ? 0 : v > 1 ? 1 : v;
    };

    this.lb = function (r, path, je) {
      var indexInt = Math.floor(je);
      var lerp = je - indexInt;
      ctx.Y(r, path[indexInt], path[indexInt + 1], lerp);
    };

    this.nb = function (funcValues, je) {
      var indexInt = Math.floor(je);
      var nextInt = indexInt + 1;
      return ctx.X(funcValues[indexInt], funcValues[nextInt], je - indexInt);
    };
  }

  return Sparks_epic;
});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/neutrinoparticles/components/NeutrinoEffect_Sparks_epic.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'bdd545RSuZF7oFlt6Q9aACj', 'NeutrinoEffect_Sparks_epic');
// neutrinoparticles/components/NeutrinoEffect_Sparks_epic.ts

"use strict";
// !!! This file is generated by NeutrinoParticles extension package.
// !!! Don't modify it manually.
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var NeutrinoEffect = require("../exported_effects/Sparks_epic.js");
var textures_1 = require("../textures");
var NeutrinoComponent_1 = require("NeutrinoComponent");
var NeutrinoAssembler_1 = require("NeutrinoAssembler");
var _a = cc._decorator, ccclass = _a.ccclass, executeInEditMode = _a.executeInEditMode, playOnFocus = _a.playOnFocus, menu = _a.menu;
var NeutrinoEffectComponent = /** @class */ (function (_super) {
    __extends(NeutrinoEffectComponent, _super);
    function NeutrinoEffectComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    NeutrinoEffectComponent.prototype.getEffectClass = function () { return NeutrinoEffect; };
    NeutrinoEffectComponent.prototype.getTexturesDatabase = function () { return textures_1.default; };
    NeutrinoEffectComponent = __decorate([
        ccclass,
        executeInEditMode,
        playOnFocus,
        menu('i18n:MAIN_MENU.component.renderers/NeutrinoComponent/Sparks_epic')
    ], NeutrinoEffectComponent);
    return NeutrinoEffectComponent;
}(NeutrinoComponent_1.default));
exports.default = NeutrinoEffectComponent;
cc.Assembler.register(NeutrinoEffectComponent, NeutrinoAssembler_1.default);

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcbmV1dHJpbm9wYXJ0aWNsZXNcXGNvbXBvbmVudHNcXE5ldXRyaW5vRWZmZWN0X1NwYXJrc19lcGljLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSxxRUFBcUU7QUFDckUsZ0NBQWdDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFFaEMsbUVBQXFFO0FBQ3JFLHdDQUFtQztBQUNuQyx1REFBa0Q7QUFDbEQsdURBQWtEO0FBRTVDLElBQUEsS0FBa0QsRUFBRSxDQUFDLFVBQVUsRUFBOUQsT0FBTyxhQUFBLEVBQUUsaUJBQWlCLHVCQUFBLEVBQUUsV0FBVyxpQkFBQSxFQUFFLElBQUksVUFBaUIsQ0FBQztBQU10RTtJQUFxRCwyQ0FBaUI7SUFBdEU7O0lBR0EsQ0FBQztJQUZBLGdEQUFjLEdBQWQsY0FBbUIsT0FBTyxjQUFjLENBQUMsQ0FBQyxDQUFDO0lBQzNDLHFEQUFtQixHQUFuQixjQUF3QixPQUFPLGtCQUFRLENBQUMsQ0FBQyxDQUFDO0lBRnRCLHVCQUF1QjtRQUozQyxPQUFPO1FBQ1AsaUJBQWlCO1FBQ2pCLFdBQVc7UUFDWCxJQUFJLENBQUMsa0VBQWtFLENBQUM7T0FDcEQsdUJBQXVCLENBRzNDO0lBQUQsOEJBQUM7Q0FIRCxBQUdDLENBSG9ELDJCQUFpQixHQUdyRTtrQkFIb0IsdUJBQXVCO0FBSzVDLEVBQUUsQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLHVCQUF1QixFQUFFLDJCQUFpQixDQUFDLENBQUMiLCJmaWxlIjoiIiwic291cmNlUm9vdCI6Ii8iLCJzb3VyY2VzQ29udGVudCI6WyIvLyAhISEgVGhpcyBmaWxlIGlzIGdlbmVyYXRlZCBieSBOZXV0cmlub1BhcnRpY2xlcyBleHRlbnNpb24gcGFja2FnZS5cbi8vICEhISBEb24ndCBtb2RpZnkgaXQgbWFudWFsbHkuXG5cbmltcG9ydCAqIGFzIE5ldXRyaW5vRWZmZWN0IGZyb20gJy4uL2V4cG9ydGVkX2VmZmVjdHMvU3BhcmtzX2VwaWMuanMnO1xuaW1wb3J0IHRleHR1cmVzIGZyb20gJy4uL3RleHR1cmVzJztcbmltcG9ydCBOZXV0cmlub0NvbXBvbmVudCBmcm9tICdOZXV0cmlub0NvbXBvbmVudCc7XG5pbXBvcnQgTmV1dHJpbm9Bc3NlbWJsZXIgZnJvbSAnTmV1dHJpbm9Bc3NlbWJsZXInO1xuXG5jb25zdCB7Y2NjbGFzcywgZXhlY3V0ZUluRWRpdE1vZGUsIHBsYXlPbkZvY3VzLCBtZW51fSA9IGNjLl9kZWNvcmF0b3I7XG5cbkBjY2NsYXNzXG5AZXhlY3V0ZUluRWRpdE1vZGVcbkBwbGF5T25Gb2N1c1xuQG1lbnUoJ2kxOG46TUFJTl9NRU5VLmNvbXBvbmVudC5yZW5kZXJlcnMvTmV1dHJpbm9Db21wb25lbnQvU3BhcmtzX2VwaWMnKVxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTmV1dHJpbm9FZmZlY3RDb21wb25lbnQgZXh0ZW5kcyBOZXV0cmlub0NvbXBvbmVudCB7XG5cdGdldEVmZmVjdENsYXNzKCkgeyByZXR1cm4gTmV1dHJpbm9FZmZlY3Q7IH1cblx0Z2V0VGV4dHVyZXNEYXRhYmFzZSgpIHsgcmV0dXJuIHRleHR1cmVzOyB9XG59XG5cbmNjLkFzc2VtYmxlci5yZWdpc3RlcihOZXV0cmlub0VmZmVjdENvbXBvbmVudCwgTmV1dHJpbm9Bc3NlbWJsZXIpO1xuIl19
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/neutrinoparticles/components/NeutrinoEffect_Sparks burst.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'f2c3fF7byFLaqaoklBp3huE', 'NeutrinoEffect_Sparks burst');
// neutrinoparticles/components/NeutrinoEffect_Sparks burst.ts

"use strict";
// !!! This file is generated by NeutrinoParticles extension package.
// !!! Don't modify it manually.
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var NeutrinoEffect = require("../exported_effects/Sparks burst.js");
var textures_1 = require("../textures");
var NeutrinoComponent_1 = require("NeutrinoComponent");
var NeutrinoAssembler_1 = require("NeutrinoAssembler");
var _a = cc._decorator, ccclass = _a.ccclass, executeInEditMode = _a.executeInEditMode, playOnFocus = _a.playOnFocus, menu = _a.menu;
var NeutrinoEffectComponent = /** @class */ (function (_super) {
    __extends(NeutrinoEffectComponent, _super);
    function NeutrinoEffectComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    NeutrinoEffectComponent.prototype.getEffectClass = function () { return NeutrinoEffect; };
    NeutrinoEffectComponent.prototype.getTexturesDatabase = function () { return textures_1.default; };
    NeutrinoEffectComponent = __decorate([
        ccclass,
        executeInEditMode,
        playOnFocus,
        menu('i18n:MAIN_MENU.component.renderers/NeutrinoComponent/Sparks burst')
    ], NeutrinoEffectComponent);
    return NeutrinoEffectComponent;
}(NeutrinoComponent_1.default));
exports.default = NeutrinoEffectComponent;
cc.Assembler.register(NeutrinoEffectComponent, NeutrinoAssembler_1.default);

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcbmV1dHJpbm9wYXJ0aWNsZXNcXGNvbXBvbmVudHNcXE5ldXRyaW5vRWZmZWN0X1NwYXJrcyBidXJzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7O0FBQUEscUVBQXFFO0FBQ3JFLGdDQUFnQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBRWhDLG9FQUFzRTtBQUN0RSx3Q0FBbUM7QUFDbkMsdURBQWtEO0FBQ2xELHVEQUFrRDtBQUU1QyxJQUFBLEtBQWtELEVBQUUsQ0FBQyxVQUFVLEVBQTlELE9BQU8sYUFBQSxFQUFFLGlCQUFpQix1QkFBQSxFQUFFLFdBQVcsaUJBQUEsRUFBRSxJQUFJLFVBQWlCLENBQUM7QUFNdEU7SUFBcUQsMkNBQWlCO0lBQXRFOztJQUdBLENBQUM7SUFGQSxnREFBYyxHQUFkLGNBQW1CLE9BQU8sY0FBYyxDQUFDLENBQUMsQ0FBQztJQUMzQyxxREFBbUIsR0FBbkIsY0FBd0IsT0FBTyxrQkFBUSxDQUFDLENBQUMsQ0FBQztJQUZ0Qix1QkFBdUI7UUFKM0MsT0FBTztRQUNQLGlCQUFpQjtRQUNqQixXQUFXO1FBQ1gsSUFBSSxDQUFDLG1FQUFtRSxDQUFDO09BQ3JELHVCQUF1QixDQUczQztJQUFELDhCQUFDO0NBSEQsQUFHQyxDQUhvRCwyQkFBaUIsR0FHckU7a0JBSG9CLHVCQUF1QjtBQUs1QyxFQUFFLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyx1QkFBdUIsRUFBRSwyQkFBaUIsQ0FBQyxDQUFDIiwiZmlsZSI6IiIsInNvdXJjZVJvb3QiOiIvIiwic291cmNlc0NvbnRlbnQiOlsiLy8gISEhIFRoaXMgZmlsZSBpcyBnZW5lcmF0ZWQgYnkgTmV1dHJpbm9QYXJ0aWNsZXMgZXh0ZW5zaW9uIHBhY2thZ2UuXG4vLyAhISEgRG9uJ3QgbW9kaWZ5IGl0IG1hbnVhbGx5LlxuXG5pbXBvcnQgKiBhcyBOZXV0cmlub0VmZmVjdCBmcm9tICcuLi9leHBvcnRlZF9lZmZlY3RzL1NwYXJrcyBidXJzdC5qcyc7XG5pbXBvcnQgdGV4dHVyZXMgZnJvbSAnLi4vdGV4dHVyZXMnO1xuaW1wb3J0IE5ldXRyaW5vQ29tcG9uZW50IGZyb20gJ05ldXRyaW5vQ29tcG9uZW50JztcbmltcG9ydCBOZXV0cmlub0Fzc2VtYmxlciBmcm9tICdOZXV0cmlub0Fzc2VtYmxlcic7XG5cbmNvbnN0IHtjY2NsYXNzLCBleGVjdXRlSW5FZGl0TW9kZSwgcGxheU9uRm9jdXMsIG1lbnV9ID0gY2MuX2RlY29yYXRvcjtcblxuQGNjY2xhc3NcbkBleGVjdXRlSW5FZGl0TW9kZVxuQHBsYXlPbkZvY3VzXG5AbWVudSgnaTE4bjpNQUlOX01FTlUuY29tcG9uZW50LnJlbmRlcmVycy9OZXV0cmlub0NvbXBvbmVudC9TcGFya3MgYnVyc3QnKVxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTmV1dHJpbm9FZmZlY3RDb21wb25lbnQgZXh0ZW5kcyBOZXV0cmlub0NvbXBvbmVudCB7XG5cdGdldEVmZmVjdENsYXNzKCkgeyByZXR1cm4gTmV1dHJpbm9FZmZlY3Q7IH1cblx0Z2V0VGV4dHVyZXNEYXRhYmFzZSgpIHsgcmV0dXJuIHRleHR1cmVzOyB9XG59XG5cbmNjLkFzc2VtYmxlci5yZWdpc3RlcihOZXV0cmlub0VmZmVjdENvbXBvbmVudCwgTmV1dHJpbm9Bc3NlbWJsZXIpO1xuIl19
//------QC-SOURCE-SPLIT------
