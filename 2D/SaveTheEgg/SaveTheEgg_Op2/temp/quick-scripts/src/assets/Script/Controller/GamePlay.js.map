{"version":3,"sources":["assets\\Script\\Controller\\GamePlay.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import { Constants } from \"../Data/constants\";\r\nimport AudioManager from \"../Plugin/AudioManager\";\r\nimport { GameController } from \"./GameController\";\r\nimport NodesController from \"./NodesController\";\r\n// import * as PF from \"pathfinding\";\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class GamePlay extends cc.Component {\r\n\r\n    // Script\r\n    @property(NodesController)\r\n    NodesController: NodesController = null;\r\n    @property(AudioManager)\r\n    AudioManager: AudioManager = null;\r\n    @property(GameController)\r\n    GameController: GameController = null;\r\n\r\n\r\n    // Component\r\n\r\n\r\n    // Node\r\n    @property(cc.Graphics)\r\n    graphic: cc.Graphics = null;\r\n    pathFinding_Grid: any = null;\r\n    pathFinding_Nodes: any = [];\r\n\r\n    // State\r\n    curentPosition: cc.Vec2 = null;\r\n    currentHint: cc.Node = null;\r\n    currentPencil: cc.Graphics = null;\r\n    curerntPoint: cc.Node = null;\r\n    isHit: boolean = false;\r\n    isHint: boolean = false;\r\n\r\n\r\n    protected onLoad(): void {\r\n        let physics = cc.director.getPhysicsManager();\r\n        physics.enabled = true;\r\n        // physics.debugDrawFlags = cc.PhysicsManager.DrawBits.e_shapeBit\r\n    }\r\n\r\n\r\n    protected start(): void {\r\n        this.NodesController.CTA.active = false;\r\n\r\n        // this.AudioManager.playSound(Constants.SoundTrack.bgSound);\r\n        this.handleGamePlay();\r\n        Constants.isCanTouch = true;\r\n\r\n        // Path Finding\r\n        // this.drawGrid();\r\n        // this.checkGridCollide();\r\n        // -------------------\r\n    }\r\n\r\n\r\n    // private drawGrid(): void {\r\n    //     this.pathFinding_Grid = new PF.Grid(400, 400);\r\n    //     this.pathFinding_Nodes = this.pathFinding_Grid.nodes;\r\n    //     this.graphic.node.y = -400 / 2;\r\n    //     this.graphic.node.x = -400 / 2;\r\n\r\n    //     console.log(this.pathFinding_Grid);\r\n        \r\n    //     // Đặt màu và độ dày của đường vẽ\r\n    //     this.graphic.strokeColor = cc.Color.BLACK;\r\n    //     this.graphic.lineWidth = 4;\r\n\r\n    //     // Vẽ lưới\r\n    //     for (let i = 0; i <= 400; i += 5) {\r\n    //         // Vẽ dòng ngang\r\n    //         this.graphic.moveTo(0, i);\r\n    //         this.graphic.lineTo(400, i);\r\n\r\n    //         // Vẽ dòng dọc\r\n    //         this.graphic.moveTo(i, 0);\r\n    //         this.graphic.lineTo(i, 400);\r\n    //     }\r\n\r\n    //     // Áp dụng các đường vẽ\r\n    //     this.graphic.stroke();\r\n    // }\r\n\r\n\r\n    // private checkGridCollide(): void {\r\n    //     let environmentColliders: cc.PhysicsPolygonCollider = this.NodesController.Environment.getComponent(cc.PhysicsPolygonCollider);\r\n    //     let points = environmentColliders.points;\r\n\r\n    //     this.pathFinding_Nodes.forEach(node => {\r\n    //         if (this.isPointInPolygon(node, points)) {\r\n    //             console.log('Node va chạm:', node);\r\n    //         } else {\r\n    //             console.log(\"0 va\");\r\n    //         }\r\n    //     });\r\n    // }\r\n\r\n\r\n    // private isPointInPolygon(point, polygon): boolean {\r\n    //     let x = point.x, y = point.y;\r\n    \r\n    //     let inside = false;\r\n    //     for (let i = 0, j = polygon.length - 1; i < polygon.length; j = i++) {\r\n    //         let xi = polygon[i].x, yi = polygon[i].y;\r\n    //         let xj = polygon[j].x, yj = polygon[j].y;\r\n    \r\n    //         let intersect = ((yi > y) !== (yj > y))\r\n    //             && (x < (xj - xi) * (y - yi) / (yj - yi) + xi);\r\n    //         if (intersect) inside = !inside;\r\n    //     }\r\n    \r\n    //     return inside;\r\n    // }\r\n\r\n\r\n    private handleGamePlay(): void {\r\n        Constants.CharacterPos = this.NodesController.Spine_Character.node.getPosition()\r\n        this.registerEvent();\r\n    }\r\n\r\n\r\n    private registerEvent(): void {\r\n\r\n    }\r\n\r\n\r\n    public handleIronSourcePlaySound(): void {\r\n        if (Constants.ironSource.isPlayBgSound) {\r\n            return;\r\n        }\r\n\r\n        if (Constants.ironSource.SoundState) {\r\n            this.AudioManager.playSound(Constants.SoundTrack.bgSound);\r\n        }\r\n\r\n        Constants.ironSource.isPlayBgSound = true;\r\n    }\r\n\r\n\r\n    private handleMuteSoundIronSource(): void {\r\n        Constants.ironSource.State = parseInt(localStorage.getItem(\"cocosSoundState\"), 10)\r\n\r\n        if (Constants.ironSource.State) {\r\n            if (Constants.ironSource.State === 1 && !Constants.ironSource.SoundState && !Constants.ironSource.isEndGame) {\r\n                Constants.ironSource.SoundState = true;\r\n                this.AudioManager.playSound(Constants.SoundTrack.bgSound);\r\n            }\r\n\r\n            if (Constants.ironSource.State === 2 && Constants.ironSource.SoundState) {\r\n                Constants.ironSource.SoundState = false;\r\n                this.AudioManager.stopAllSound();\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    private characterHit(): void {\r\n        this.isHit = true;\r\n        this.NodesController.Spine_Character.setAnimation(0, \"being_hit\", true);\r\n        this.AudioManager.playSound(Constants.SoundTrack.crySound);\r\n\r\n        this.scheduleOnce(() => {\r\n            this.NodesController.CTA.active = true;\r\n            this.NodesController.CTA.getComponent(cc.Animation).play(\"CTA_Anim\");\r\n            this.AudioManager.playSound(Constants.SoundTrack.loseSound);\r\n\r\n            this.NodesController.CTA_button.on(cc.Node.EventType.TOUCH_START, this.GameController.installHandle, this);\r\n\r\n            // mtg & applovin\r\n            // this.NodesController.CTA_Overlay.on(cc.Node.EventType.TOUCH_START, this.GameController.installHandle, this);\r\n        }, 1)\r\n    }\r\n\r\n\r\n    private unactiveHint(): void {\r\n        this.isHint = true;\r\n        this.handleIronSourcePlaySound();\r\n        this.NodesController.Hint.active = false;\r\n    }\r\n\r\n\r\n    protected update(dt: number): void {\r\n        // this.handleMuteSoundIronSource();\r\n        Constants.isHit && !this.isHit && this.characterHit();\r\n        window.isStartDraw && !this.isHint && this.unactiveHint();\r\n\r\n        this.handleMuteSoundIronSource();\r\n    }\r\n}\r\n"]}