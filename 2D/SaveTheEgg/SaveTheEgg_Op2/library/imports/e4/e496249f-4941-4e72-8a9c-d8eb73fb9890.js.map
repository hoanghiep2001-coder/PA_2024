{"version":3,"sources":["assets\\Script\\Controller\\GamePlay.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA,+CAA8C;AAC9C,uDAAkD;AAClD,mDAAkD;AAClD,qDAAgD;AAE1C,IAAA,KAAwB,EAAE,CAAC,UAAU,EAAnC,OAAO,aAAA,EAAE,QAAQ,cAAkB,CAAC;AAG5C;IAAsC,4BAAY;IAAlD;QAAA,qEAiFC;QA/EG,SAAS;QAET,qBAAe,GAAoB,IAAI,CAAC;QAExC,kBAAY,GAAiB,IAAI,CAAC;QAElC,oBAAc,GAAmB,IAAI,CAAC;QAGtC,YAAY;QAGZ,OAAO;QAGP,QAAQ;QACR,oBAAc,GAAY,IAAI,CAAC;QAC/B,iBAAW,GAAY,IAAI,CAAC;QAC5B,mBAAa,GAAgB,IAAI,CAAC;QAClC,kBAAY,GAAY,IAAI,CAAC;;IA4DjC,CAAC;IAzDa,yBAAM,GAAhB;QACI,IAAI,OAAO,GAAG,EAAE,CAAC,QAAQ,CAAC,iBAAiB,EAAE,CAAC;QAC9C,OAAO,CAAC,OAAO,GAAG,IAAI,CAAC;IAC3B,CAAC;IAGS,wBAAK,GAAf;QACI,6DAA6D;QAC7D,IAAI,CAAC,cAAc,EAAE,CAAC;QACtB,qBAAS,CAAC,UAAU,GAAG,IAAI,CAAC;IAChC,CAAC;IAGO,iCAAc,GAAtB;QACI,IAAI,CAAC,aAAa,EAAE,CAAC;IACzB,CAAC;IAGO,gCAAa,GAArB;IAEA,CAAC;IAGM,4CAAyB,GAAhC;QACI,IAAI,qBAAS,CAAC,UAAU,CAAC,aAAa,EAAE;YACpC,OAAO;SACV;QAED,IAAI,qBAAS,CAAC,UAAU,CAAC,UAAU,EAAE;YACjC,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,qBAAS,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;SAC7D;QAED,qBAAS,CAAC,UAAU,CAAC,aAAa,GAAG,IAAI,CAAC;IAC9C,CAAC;IAGO,4CAAyB,GAAjC;QACI,qBAAS,CAAC,UAAU,CAAC,KAAK,GAAG,QAAQ,CAAC,YAAY,CAAC,OAAO,CAAC,iBAAiB,CAAC,EAAE,EAAE,CAAC,CAAA;QAElF,IAAI,qBAAS,CAAC,UAAU,CAAC,KAAK,EAAE;YAC5B,IAAI,qBAAS,CAAC,UAAU,CAAC,KAAK,KAAK,CAAC,IAAI,CAAC,qBAAS,CAAC,UAAU,CAAC,UAAU,IAAI,CAAC,qBAAS,CAAC,UAAU,CAAC,SAAS,EAAE;gBACzG,qBAAS,CAAC,UAAU,CAAC,UAAU,GAAG,IAAI,CAAC;gBACvC,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,qBAAS,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;aAC7D;YAED,IAAI,qBAAS,CAAC,UAAU,CAAC,KAAK,KAAK,CAAC,IAAI,qBAAS,CAAC,UAAU,CAAC,UAAU,EAAE;gBACrE,qBAAS,CAAC,UAAU,CAAC,UAAU,GAAG,KAAK,CAAC;gBACxC,IAAI,CAAC,YAAY,CAAC,YAAY,EAAE,CAAC;aACpC;SACJ;IACL,CAAC;IAIS,yBAAM,GAAhB,UAAiB,EAAU;QACvB,oCAAoC;IACxC,CAAC;IA5ED;QADC,QAAQ,CAAC,yBAAe,CAAC;qDACc;IAExC;QADC,QAAQ,CAAC,sBAAY,CAAC;kDACW;IAElC;QADC,QAAQ,CAAC,+BAAc,CAAC;oDACa;IARrB,QAAQ;QAD5B,OAAO;OACa,QAAQ,CAiF5B;IAAD,eAAC;CAjFD,AAiFC,CAjFqC,EAAE,CAAC,SAAS,GAiFjD;kBAjFoB,QAAQ","file":"","sourceRoot":"/","sourcesContent":["import { Constants } from \"../Data/constants\";\r\nimport AudioManager from \"../Plugin/AudioManager\";\r\nimport { GameController } from \"./GameController\";\r\nimport NodesController from \"./NodesController\";\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class GamePlay extends cc.Component {\r\n\r\n    // Script\r\n    @property(NodesController)\r\n    NodesController: NodesController = null;\r\n    @property(AudioManager)\r\n    AudioManager: AudioManager = null;\r\n    @property(GameController)\r\n    GameController: GameController = null;\r\n\r\n\r\n    // Component\r\n\r\n\r\n    // Node\r\n\r\n\r\n    // State\r\n    curentPosition: cc.Vec2 = null;\r\n    currentHint: cc.Node = null;\r\n    currentPencil: cc.Graphics = null;\r\n    curerntPoint: cc.Node = null;\r\n\r\n\r\n    protected onLoad(): void {\r\n        let physics = cc.director.getPhysicsManager();\r\n        physics.enabled = true;\r\n    }\r\n\r\n\r\n    protected start(): void {\r\n        // this.AudioManager.playSound(Constants.SoundTrack.bgSound);\r\n        this.handleGamePlay();\r\n        Constants.isCanTouch = true;\r\n    }\r\n\r\n\r\n    private handleGamePlay(): void {\r\n        this.registerEvent();\r\n    }\r\n\r\n\r\n    private registerEvent(): void {\r\n\r\n    }\r\n\r\n\r\n    public handleIronSourcePlaySound(): void {\r\n        if (Constants.ironSource.isPlayBgSound) {\r\n            return;\r\n        }\r\n\r\n        if (Constants.ironSource.SoundState) {\r\n            this.AudioManager.playSound(Constants.SoundTrack.bgSound);\r\n        }\r\n\r\n        Constants.ironSource.isPlayBgSound = true;\r\n    }\r\n\r\n\r\n    private handleMuteSoundIronSource(): void {\r\n        Constants.ironSource.State = parseInt(localStorage.getItem(\"cocosSoundState\"), 10)\r\n\r\n        if (Constants.ironSource.State) {\r\n            if (Constants.ironSource.State === 1 && !Constants.ironSource.SoundState && !Constants.ironSource.isEndGame) {\r\n                Constants.ironSource.SoundState = true;\r\n                this.AudioManager.playSound(Constants.SoundTrack.bgSound);\r\n            }\r\n\r\n            if (Constants.ironSource.State === 2 && Constants.ironSource.SoundState) {\r\n                Constants.ironSource.SoundState = false;\r\n                this.AudioManager.stopAllSound();\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n    protected update(dt: number): void {\r\n        // this.handleMuteSoundIronSource();\r\n    }\r\n}\r\n"]}