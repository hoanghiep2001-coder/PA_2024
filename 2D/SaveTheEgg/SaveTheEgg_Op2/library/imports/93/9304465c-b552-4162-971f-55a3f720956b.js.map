{"version":3,"sources":["assets\\Script\\Controller\\GraphicsContro.js"],"names":["cc","Class","Component","properties","graphics","line_point","Vec2","onLoad","node","width","height","getComponent","Graphics","start","window","PointPos","v2","onTouch","on","Node","EventType","TOUCH_START","touch_start","TOUCH_MOVE","touch_move","TOUCH_END","touch_end","TOUCH_CANCEL","offTouch","off","event","StateForJs","isCanDraw","pos","convertToNodeSpaceAR","getLocation","isStartDraw","moveTo","x","y","push","lineTo","updateStrokeColor","stroke","isTouchWall","clear","simplifiedPoints","simplifyPath","isDraw","createRigibody","strokeColor","Color","RED","BLACK","rigibodyLogic","addComponent","RigidBody","gravityScale","physicsLine","lineWidth","points","friction","density","tag","apply","checkStraightLine","touchPoints","length","A","B","C","tolerance","sqTolerance","undefined","simplifyDouglasPeucker","len","ArrayConstructor","Uint8Array","Array","markers","first","last","stack","newPoints","i","maxSqDist","sqDist","index","getSqSegDist","pop","p","p1","p2","dx","dy","t","checkIsCanDraw","lastPoint","nowPoint","sub","mag"],"mappings":"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","sourceRoot":"/","sourcesContent":["import { StateForJs } from \"../Data/StateForJS\";\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        graphics: null,\r\n        line_point: [cc.Vec2],\r\n    },\r\n\r\n    onLoad() {\r\n        this.node.width = 5000;\r\n        this.node.height = 5000;\r\n        this.graphics = this.getComponent(cc.Graphics);\r\n    },\r\n\r\n    start() {\r\n        window.PointPos = cc.v2(-50, 100);\r\n        this.onTouch();\r\n    },\r\n    \r\n    onTouch() {\r\n        this.node.on(cc.Node.EventType.TOUCH_START, this.touch_start, this);\r\n        this.node.on(cc.Node.EventType.TOUCH_MOVE, this.touch_move, this);\r\n        this.node.on(cc.Node.EventType.TOUCH_END, this.touch_end, this);\r\n        this.node.on(cc.Node.EventType.TOUCH_CANCEL, this.touch_end, this);\r\n    },\r\n\r\n    offTouch() {\r\n        this.node.off(cc.Node.EventType.TOUCH_START);\r\n        this.node.off(cc.Node.EventType.TOUCH_MOVE);\r\n        this.node.off(cc.Node.EventType.TOUCH_END);\r\n        this.node.off(cc.Node.EventType.TOUCH_CANCEL);\r\n    },\r\n\r\n    touch_start(event) {\r\n        if (!StateForJs.isCanDraw) {\r\n            return;\r\n        }\r\n\r\n        let pos = this.node.convertToNodeSpaceAR(event.getLocation());\r\n        window.isStartDraw = true;\r\n        window.PointPos = pos;\r\n        this.graphics.moveTo(pos.x, pos.y);\r\n        this.line_point.push(cc.v2(pos.x, pos.y));\r\n    },\r\n\r\n    touch_move(event) {\r\n        if (!StateForJs.isCanDraw) {\r\n            return;\r\n        }\r\n\r\n        let pos = this.node.convertToNodeSpaceAR(event.getLocation());\r\n        window.PointPos = pos;\r\n        this.graphics.lineTo(pos.x, pos.y);\r\n        this.line_point.push(cc.v2(pos.x, pos.y));\r\n\r\n        this.updateStrokeColor();\r\n        this.graphics.stroke();\r\n    },\r\n\r\n    touch_end(event) {\r\n        if (window.isTouchWall) {\r\n            StateForJs.isCanDraw = true;\r\n            window.isTouchWall = false;\r\n            this.line_point = [];\r\n            this.graphics.clear();\r\n            return;\r\n        }\r\n\r\n        if (!StateForJs.isCanDraw) {\r\n            return;\r\n        }\r\n\r\n        // Rút gọn đường vẽ\r\n        let simplifiedPoints = this.simplifyPath(this.line_point, 2);  // Sử dụng độ tolerance phù hợp\r\n\r\n        StateForJs.isCanDraw = false;\r\n        window.isDraw = true;\r\n        window.isTouchWall = false;\r\n        this.createRigibody(simplifiedPoints);\r\n        this.offTouch();\r\n    },\r\n\r\n    updateStrokeColor() {\r\n        if (window.isTouchWall) {\r\n            this.graphics.strokeColor = cc.Color.RED;\r\n        } else {\r\n            this.graphics.strokeColor = cc.Color.BLACK;\r\n        }\r\n    },\r\n\r\n    createRigibody(simplifiedPoints) {\r\n        this.rigibodyLogic = this.addComponent(cc.RigidBody);\r\n        this.rigibodyLogic.gravityScale = 2;\r\n\r\n        this.physicsLine = this.addComponent(\"MyPhysicsCollider\");\r\n        this.physicsLine.lineWidth = 7;\r\n        this.physicsLine.points = simplifiedPoints;  // Sử dụng điểm đã rút gọn\r\n        this.physicsLine.friction = 0;\r\n        this.physicsLine.density = 100;\r\n        this.physicsLine.tag = 4;\r\n        this.physicsLine.apply();\r\n    },\r\n\r\n    checkStraightLine(touchPoints) {\r\n        if (touchPoints.length < 3) {\r\n            return false;\r\n        }\r\n\r\n        let A = touchPoints[touchPoints.length - 3];\r\n        let B = touchPoints[touchPoints.length - 2];\r\n        let C = touchPoints[touchPoints.length - 1];\r\n\r\n        return (B.x - A.x) * (C.y - A.y) === (B.y - A.y) * (C.x - A.x);\r\n    },\r\n\r\n    simplifyPath(points, tolerance) {\r\n        if (points.length < 3) return points;\r\n\r\n        let sqTolerance = tolerance !== undefined ? tolerance * tolerance : 1;\r\n        points = this.simplifyDouglasPeucker(points, sqTolerance);\r\n\r\n        return points;\r\n    },\r\n\r\n    simplifyDouglasPeucker(points, sqTolerance) {\r\n        let len = points.length,\r\n            ArrayConstructor = typeof Uint8Array !== 'undefined' ? Uint8Array : Array,\r\n            markers = new ArrayConstructor(len),\r\n            first = 0,\r\n            last = len - 1,\r\n            stack = [],\r\n            newPoints = [],\r\n            i, maxSqDist, sqDist, index;\r\n\r\n        markers[first] = markers[last] = 1;\r\n\r\n        while (last) {\r\n            maxSqDist = 0;\r\n\r\n            for (i = first + 1; i < last; i++) {\r\n                sqDist = this.getSqSegDist(points[i], points[first], points[last]);\r\n\r\n                if (sqDist > maxSqDist) {\r\n                    index = i;\r\n                    maxSqDist = sqDist;\r\n                }\r\n            }\r\n\r\n            if (maxSqDist > sqTolerance) {\r\n                markers[index] = 1;\r\n                stack.push(first, index, index, last);\r\n            }\r\n\r\n            last = stack.pop();\r\n            first = stack.pop();\r\n        }\r\n\r\n        for (i = 0; i < len; i++) {\r\n            if (markers[i]) {\r\n                newPoints.push(points[i]);\r\n            }\r\n        }\r\n\r\n        return newPoints;\r\n    },\r\n\r\n    getSqSegDist(p, p1, p2) {\r\n        let x = p1.x,\r\n            y = p1.y,\r\n            dx = p2.x - x,\r\n            dy = p2.y - y;\r\n\r\n        if (dx !== 0 || dy !== 0) {\r\n            let t = ((p.x - x) * dx + (p.y - y) * dy) / (dx * dx + dy * dy);\r\n\r\n            if (t > 1) {\r\n                x = p2.x;\r\n                y = p2.y;\r\n            } else if (t > 0) {\r\n                x += dx * t;\r\n                y += dy * t;\r\n            }\r\n        }\r\n\r\n        dx = p.x - x;\r\n        dy = p.y - y;\r\n\r\n        return dx * dx + dy * dy;\r\n    },\r\n\r\n    checkIsCanDraw(lastPoint, nowPoint) {\r\n        return lastPoint.sub(nowPoint).mag() >= 20;\r\n    },\r\n});\r\n"]}