{"version":3,"sources":["assets\\Script\\Controller\\TouchAreaController.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA,+CAA8C;AAC9C,uDAAkD;AAClD,qDAAgD;AAE1C,IAAA,KAAsB,EAAE,CAAC,UAAU,EAAlC,OAAO,aAAA,EAAE,QAAQ,cAAiB,CAAC;AAG1C;IAAiD,uCAAY;IAA7D;QAAA,qEAsEC;QAnEG,qBAAe,GAAoB,IAAI,CAAC;QAExC,kBAAY,GAAiB,IAAI,CAAC;QAGlC,YAAM,GAAc,EAAE,CAAC;;IA8D3B,CAAC;IA3Da,mCAAK,GAAf;QACI,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,EAAE,CAAC,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,WAAW,EAAE,IAAI,CAAC,kBAAkB,EAAE,IAAI,CAAC,CAAC;QAC/F,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,EAAE,CAAC,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,UAAU,EAAE,IAAI,CAAC,iBAAiB,EAAE,IAAI,CAAC,CAAC;QAC7F,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,EAAE,CAAC,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,SAAS,EAAE,IAAI,CAAC,gBAAgB,EAAE,IAAI,CAAC,CAAC;QAC3F,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,EAAE,CAAC,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,YAAY,EAAE,IAAI,CAAC,gBAAgB,EAAE,IAAI,CAAC,CAAC;IAClG,CAAC;IAGO,gDAAkB,GAA1B,UAA2B,CAAW;QAClC,IAAI,CAAC,qBAAS,CAAC,UAAU,EAAE;YACvB,OAAO;SACV;QAED,qBAAS,CAAC,eAAe,GAAG,CAAC,CAAC,WAAW,EAAE,CAAC;QAC5C,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,qBAAS,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC;QAC5D,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,IAAI,GAAG,IAAI,CAAC;QAExC,oCAAoC;IACxC,CAAC;IAGO,+CAAiB,GAAzB,UAA0B,CAAW;QACjC,IAAI,CAAC,qBAAS,CAAC,UAAU,EAAE;YACvB,OAAO;SACV;QAED,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC;QAClE,IAAI,CAAC,cAAc,EAAE,CAAC;QACtB,wCAAwC;QACxC,0DAA0D;QAC1D,4FAA4F;QAC5F,KAAK;QACL,wCAAwC;QACxC,gDAAgD;QAChD,kFAAkF;QAClF,KAAK;QAEL,qBAAS,CAAC,eAAe,GAAG,CAAC,CAAC,WAAW,EAAE,CAAC;QAC5C,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC;IAC3C,CAAC;IAGO,8CAAgB,GAAxB;QACI,IAAI,CAAC,qBAAS,CAAC,UAAU,EAAE;YACvB,OAAO;SACV;QAED,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;QACnD,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,qBAAS,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC;IAChE,CAAC;IAGO,4CAAc,GAAtB;QACI,kEAAkE;QAElE,oCAAoC;QACpC,qCAAqC;IACzC,CAAC;IAjED;QADC,QAAQ,CAAC,yBAAe,CAAC;gEACc;IAExC;QADC,QAAQ,CAAC,sBAAY,CAAC;6DACW;IALjB,mBAAmB;QADvC,OAAO;OACa,mBAAmB,CAsEvC;IAAD,0BAAC;CAtED,AAsEC,CAtEgD,EAAE,CAAC,SAAS,GAsE5D;kBAtEoB,mBAAmB","file":"","sourceRoot":"/","sourcesContent":["import { Constants } from \"../Data/constants\";\r\nimport AudioManager from \"../Plugin/AudioManager\";\r\nimport NodesController from \"./NodesController\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class TouchAreaController extends cc.Component {\r\n\r\n    @property(NodesController)\r\n    NodesController: NodesController = null;\r\n    @property(AudioManager)\r\n    AudioManager: AudioManager = null;\r\n\r\n\r\n    points: cc.Vec2[] = [];\r\n\r\n\r\n    protected start(): void {\r\n        this.NodesController.HideMask.on(cc.Node.EventType.TOUCH_START, this.handleBgTouchStart, this);\r\n        this.NodesController.HideMask.on(cc.Node.EventType.TOUCH_MOVE, this.handleBgTouchMove, this);\r\n        this.NodesController.HideMask.on(cc.Node.EventType.TOUCH_END, this.handleBgTouchEnd, this);\r\n        this.NodesController.HideMask.on(cc.Node.EventType.TOUCH_CANCEL, this.handleBgTouchEnd, this);\r\n    }\r\n\r\n\r\n    private handleBgTouchStart(e: cc.Touch): void {\r\n        if (!Constants.isCanTouch) {\r\n            return;\r\n        }\r\n\r\n        Constants.currentPosition = e.getLocation();\r\n        this.AudioManager.playSound(Constants.SoundTrack.drawSound);\r\n        this.AudioManager.drawSound.loop = true;\r\n\r\n        // this.handleIronSourcePlaySound();\r\n    }\r\n\r\n\r\n    private handleBgTouchMove(e: cc.Touch): void {\r\n        if (!Constants.isCanTouch) {\r\n            return;\r\n        } \r\n\r\n        this.points.push(this.node.convertToNodeSpaceAR(e.getLocation()));\r\n        this.handleDrawLine();\r\n        // this.NodesController.Graphics.moveTo(\r\n        //     Constants.currentPosition.x - cc.winSize.width / 2,\r\n        //     Constants.currentPosition.y - cc.winSize.height / 2 - Constants.Responsive.calculated\r\n        // );\r\n        // this.NodesController.Graphics.lineTo(\r\n        //     e.getLocation().x - cc.winSize.width / 2,\r\n        //     e.getLocation().y - cc.winSize.height / 2 - Constants.Responsive.calculated\r\n        // );\r\n        \r\n        Constants.currentPosition = e.getLocation();\r\n        this.NodesController.Graphics.stroke();\r\n    }\r\n\r\n\r\n    private handleBgTouchEnd(): void {\r\n        if (!Constants.isCanTouch) {\r\n            return;\r\n        }\r\n\r\n        console.log(this.NodesController.Graphics.lineCap);\r\n        this.AudioManager.stopSound(Constants.SoundTrack.drawSound);\r\n    }\r\n\r\n\r\n    private handleDrawLine(): void {\r\n        // let newPoint = cc.instantiate(this.NodesController.LinePrefab);\r\n\r\n        // newPoint.setPosition(this.points)\r\n        // this.NodesController.LineContainer\r\n    }\r\n\r\n}\r\n"]}