
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/Controller/GraphicsContro.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '93044ZctVJBYpcfVaP3IJVr', 'GraphicsContro');
// Script/Controller/GraphicsContro.js

"use strict";

var _StateForJS = require("../Data/StateForJS");

cc.Class({
  "extends": cc.Component,
  properties: {
    graphics: null,
    line_point: [cc.Vec2]
  },
  onLoad: function onLoad() {
    this.node.width = 5000;
    this.node.height = 5000;
    this.graphics = this.getComponent(cc.Graphics);
    this.currentDrawTime = 0;
  },
  start: function start() {
    window.PointPos = cc.v2(-60, 65);
    this.onTouch();
  },
  onTouch: function onTouch() {
    this.node.on(cc.Node.EventType.TOUCH_START, this.touch_start, this);
    this.node.on(cc.Node.EventType.TOUCH_MOVE, this.touch_move, this);
    this.node.on(cc.Node.EventType.TOUCH_END, this.touch_end, this);
    this.node.on(cc.Node.EventType.TOUCH_CANCEL, this.touch_end, this);
  },
  offTouch: function offTouch() {
    this.node.off(cc.Node.EventType.TOUCH_START);
    this.node.off(cc.Node.EventType.TOUCH_MOVE);
    this.node.off(cc.Node.EventType.TOUCH_END);
    this.node.off(cc.Node.EventType.TOUCH_CANCEL);
  },
  touch_start: function touch_start(event) {
    if (!_StateForJS.StateForJs.isCanDraw || _StateForJS.StateForJs.isToStore) {
      return;
    }

    var pos = this.node.convertToNodeSpaceAR(event.getLocation());
    window.isStartDraw = true;
    window.PointPos = pos;
    this.graphics.moveTo(pos.x, pos.y);
    this.line_point.push(cc.v2(pos.x, pos.y));
  },
  touch_move: function touch_move(event) {
    if (!_StateForJS.StateForJs.isCanDraw || _StateForJS.StateForJs.isToStore) {
      return;
    }

    this.currentDrawTime += 1; // if(window.currentLv === 2 && this.currentDrawTime >= 8) {
    //     window.changeEggRigidbodyType = true;
    //     window.stopDrawSound = true;
    //     this.touch_end();
    //     return;
    // }

    var pos = this.node.convertToNodeSpaceAR(event.getLocation());
    window.PointPos = pos;
    this.graphics.lineTo(pos.x, pos.y);
    this.line_point.push(cc.v2(pos.x, pos.y));
    this.updateStrokeColor();
    this.graphics.stroke();
  },
  touch_end: function touch_end(event) {
    if (window.isTouchWall) {
      _StateForJS.StateForJs.isCanDraw = true; // window.isTouchWall = false;

      window.isDraw = false;
      this.line_point = [];
      this.graphics.clear();
      return;
    }

    if (!_StateForJS.StateForJs.isCanDraw || _StateForJS.StateForJs.isToStore) {
      return;
    } // Rút gọn đường vẽ


    var simplifiedPoints = this.simplifyPath(this.line_point, 4); // Sử dụng độ tolerance phù hợp

    _StateForJS.StateForJs.isCanDraw = false;
    window.isDraw = true;
    window.isTouchWall = false;
    this.createRigibody(simplifiedPoints);
    this.offTouch();
  },
  updateStrokeColor: function updateStrokeColor() {
    if (window.isTouchWall) {
      this.graphics.strokeColor = cc.Color.RED;
    } else {
      this.graphics.strokeColor = cc.Color.BLACK;
    }
  },
  createRigibody: function createRigibody(simplifiedPoints) {
    this.rigibodyLogic = this.addComponent(cc.RigidBody);
    this.rigibodyLogic.gravityScale = 0.4;
    this.physicsLine = this.addComponent("MyPhysicsCollider");
    this.physicsLine.lineWidth = 7;
    this.physicsLine.points = simplifiedPoints; // Sử dụng điểm đã rút gọn

    this.physicsLine.friction = 0;
    this.physicsLine.density = 0;
    this.physicsLine.tag = 4;
    this.physicsLine.apply();
  },
  simplifyPath: function simplifyPath(points, tolerance) {
    if (points.length < 3) return points;
    var sqTolerance = tolerance !== undefined ? tolerance * tolerance : 1;
    points = this.simplifyDouglasPeucker(points, sqTolerance);
    return points;
  },
  simplifyDouglasPeucker: function simplifyDouglasPeucker(points, sqTolerance) {
    var len = points.length,
        ArrayConstructor = typeof Uint8Array !== 'undefined' ? Uint8Array : Array,
        markers = new ArrayConstructor(len),
        first = 0,
        last = len - 1,
        stack = [],
        newPoints = [],
        i,
        maxSqDist,
        sqDist,
        index;
    markers[first] = markers[last] = 1;

    while (last) {
      maxSqDist = 0;

      for (i = first + 1; i < last; i++) {
        sqDist = this.getSqSegDist(points[i], points[first], points[last]);

        if (sqDist > maxSqDist) {
          index = i;
          maxSqDist = sqDist;
        }
      }

      if (maxSqDist > sqTolerance) {
        markers[index] = 1;
        stack.push(first, index, index, last);
      }

      last = stack.pop();
      first = stack.pop();
    }

    for (i = 0; i < len; i++) {
      if (markers[i]) {
        newPoints.push(points[i]);
      }
    }

    return newPoints;
  },
  getSqSegDist: function getSqSegDist(p, p1, p2) {
    var x = p1.x,
        y = p1.y,
        dx = p2.x - x,
        dy = p2.y - y;

    if (dx !== 0 || dy !== 0) {
      var t = ((p.x - x) * dx + (p.y - y) * dy) / (dx * dx + dy * dy);

      if (t > 1) {
        x = p2.x;
        y = p2.y;
      } else if (t > 0) {
        x += dx * t;
        y += dy * t;
      }
    }

    dx = p.x - x;
    dy = p.y - y;
    return dx * dx + dy * dy;
  },
  checkIsCanDraw: function checkIsCanDraw(lastPoint, nowPoint) {
    return lastPoint.sub(nowPoint).mag() >= 20;
  }
});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0XFxDb250cm9sbGVyXFxHcmFwaGljc0NvbnRyby5qcyJdLCJuYW1lcyI6WyJjYyIsIkNsYXNzIiwiQ29tcG9uZW50IiwicHJvcGVydGllcyIsImdyYXBoaWNzIiwibGluZV9wb2ludCIsIlZlYzIiLCJvbkxvYWQiLCJub2RlIiwid2lkdGgiLCJoZWlnaHQiLCJnZXRDb21wb25lbnQiLCJHcmFwaGljcyIsImN1cnJlbnREcmF3VGltZSIsInN0YXJ0Iiwid2luZG93IiwiUG9pbnRQb3MiLCJ2MiIsIm9uVG91Y2giLCJvbiIsIk5vZGUiLCJFdmVudFR5cGUiLCJUT1VDSF9TVEFSVCIsInRvdWNoX3N0YXJ0IiwiVE9VQ0hfTU9WRSIsInRvdWNoX21vdmUiLCJUT1VDSF9FTkQiLCJ0b3VjaF9lbmQiLCJUT1VDSF9DQU5DRUwiLCJvZmZUb3VjaCIsIm9mZiIsImV2ZW50IiwiU3RhdGVGb3JKcyIsImlzQ2FuRHJhdyIsImlzVG9TdG9yZSIsInBvcyIsImNvbnZlcnRUb05vZGVTcGFjZUFSIiwiZ2V0TG9jYXRpb24iLCJpc1N0YXJ0RHJhdyIsIm1vdmVUbyIsIngiLCJ5IiwicHVzaCIsImxpbmVUbyIsInVwZGF0ZVN0cm9rZUNvbG9yIiwic3Ryb2tlIiwiaXNUb3VjaFdhbGwiLCJpc0RyYXciLCJjbGVhciIsInNpbXBsaWZpZWRQb2ludHMiLCJzaW1wbGlmeVBhdGgiLCJjcmVhdGVSaWdpYm9keSIsInN0cm9rZUNvbG9yIiwiQ29sb3IiLCJSRUQiLCJCTEFDSyIsInJpZ2lib2R5TG9naWMiLCJhZGRDb21wb25lbnQiLCJSaWdpZEJvZHkiLCJncmF2aXR5U2NhbGUiLCJwaHlzaWNzTGluZSIsImxpbmVXaWR0aCIsInBvaW50cyIsImZyaWN0aW9uIiwiZGVuc2l0eSIsInRhZyIsImFwcGx5IiwidG9sZXJhbmNlIiwibGVuZ3RoIiwic3FUb2xlcmFuY2UiLCJ1bmRlZmluZWQiLCJzaW1wbGlmeURvdWdsYXNQZXVja2VyIiwibGVuIiwiQXJyYXlDb25zdHJ1Y3RvciIsIlVpbnQ4QXJyYXkiLCJBcnJheSIsIm1hcmtlcnMiLCJmaXJzdCIsImxhc3QiLCJzdGFjayIsIm5ld1BvaW50cyIsImkiLCJtYXhTcURpc3QiLCJzcURpc3QiLCJpbmRleCIsImdldFNxU2VnRGlzdCIsInBvcCIsInAiLCJwMSIsInAyIiwiZHgiLCJkeSIsInQiLCJjaGVja0lzQ2FuRHJhdyIsImxhc3RQb2ludCIsIm5vd1BvaW50Iiwic3ViIiwibWFnIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQUFBOztBQUVBQSxFQUFFLENBQUNDLEtBQUgsQ0FBUztBQUNMLGFBQVNELEVBQUUsQ0FBQ0UsU0FEUDtBQUdMQyxFQUFBQSxVQUFVLEVBQUU7QUFDUkMsSUFBQUEsUUFBUSxFQUFFLElBREY7QUFFUkMsSUFBQUEsVUFBVSxFQUFFLENBQUNMLEVBQUUsQ0FBQ00sSUFBSjtBQUZKLEdBSFA7QUFTTEMsRUFBQUEsTUFUSyxvQkFTSTtBQUNMLFNBQUtDLElBQUwsQ0FBVUMsS0FBVixHQUFrQixJQUFsQjtBQUNBLFNBQUtELElBQUwsQ0FBVUUsTUFBVixHQUFtQixJQUFuQjtBQUNBLFNBQUtOLFFBQUwsR0FBZ0IsS0FBS08sWUFBTCxDQUFrQlgsRUFBRSxDQUFDWSxRQUFyQixDQUFoQjtBQUNBLFNBQUtDLGVBQUwsR0FBdUIsQ0FBdkI7QUFDSCxHQWRJO0FBaUJMQyxFQUFBQSxLQWpCSyxtQkFpQkc7QUFDSkMsSUFBQUEsTUFBTSxDQUFDQyxRQUFQLEdBQWtCaEIsRUFBRSxDQUFDaUIsRUFBSCxDQUFNLENBQUMsRUFBUCxFQUFXLEVBQVgsQ0FBbEI7QUFDQSxTQUFLQyxPQUFMO0FBQ0gsR0FwQkk7QUF1QkxBLEVBQUFBLE9BdkJLLHFCQXVCSztBQUNOLFNBQUtWLElBQUwsQ0FBVVcsRUFBVixDQUFhbkIsRUFBRSxDQUFDb0IsSUFBSCxDQUFRQyxTQUFSLENBQWtCQyxXQUEvQixFQUE0QyxLQUFLQyxXQUFqRCxFQUE4RCxJQUE5RDtBQUNBLFNBQUtmLElBQUwsQ0FBVVcsRUFB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d01MRSxFQUFBQSxjQXhNSywwQkF3TVVDLFNBeE1WLEVBd01xQkMsUUF4TXJCLEVBd00rQjtBQUNoQyxXQUFPRCxTQUFTLENBQUNFLEdBQVYsQ0FBY0QsUUFBZCxFQUF3QkUsR0FBeEIsTUFBaUMsRUFBeEM7QUFDSDtBQTFNSSxDQUFUIiwic291cmNlUm9vdCI6Ii8iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTdGF0ZUZvckpzIH0gZnJvbSBcIi4uL0RhdGEvU3RhdGVGb3JKU1wiO1xyXG5cclxuY2MuQ2xhc3Moe1xyXG4gICAgZXh0ZW5kczogY2MuQ29tcG9uZW50LFxyXG5cclxuICAgIHByb3BlcnRpZXM6IHtcclxuICAgICAgICBncmFwaGljczogbnVsbCxcclxuICAgICAgICBsaW5lX3BvaW50OiBbY2MuVmVjMl0sXHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICBvbkxvYWQoKSB7XHJcbiAgICAgICAgdGhpcy5ub2RlLndpZHRoID0gNTAwMDtcclxuICAgICAgICB0aGlzLm5vZGUuaGVpZ2h0ID0gNTAwMDtcclxuICAgICAgICB0aGlzLmdyYXBoaWNzID0gdGhpcy5nZXRDb21wb25lbnQoY2MuR3JhcGhpY3MpO1xyXG4gICAgICAgIHRoaXMuY3VycmVudERyYXdUaW1lID0gMDtcclxuICAgIH0sXHJcblxyXG5cclxuICAgIHN0YXJ0KCkge1xyXG4gICAgICAgIHdpbmRvdy5Qb2ludFBvcyA9IGNjLnYyKC02MCwgNjUpO1xyXG4gICAgICAgIHRoaXMub25Ub3VjaCgpO1xyXG4gICAgfSxcclxuICAgIFxyXG5cclxuICAgIG9uVG91Y2goKSB7XHJcbiAgICAgICAgdGhpcy5ub2RlLm9uKGNjLk5vZGUuRXZlbnRUeXBlLlRPVUNIX1NUQVJULCB0aGlzLnRvdWNoX3N0YXJ0LCB0aGlzKTtcclxuICAgICAgICB0aGlzLm5vZGUub24oY2MuTm9kZS5FdmVudFR5cGUuVE9VQ0hfTU9WRSwgdGhpcy50b3VjaF9tb3ZlLCB0aGlzKTtcclxuICAgICAgICB0aGlzLm5vZGUub24oY2MuTm9kZS5FdmVudFR5cGUuVE9VQ0hfRU5ELCB0aGlzLnRvdWNoX2VuZCwgdGhpcyk7XHJcbiAgICAgICAgdGhpcy5ub2RlLm9uKGNjLk5vZGUuRXZlbnRUeXBlLlRPVUNIX0NBTkNFTCwgdGhpcy50b3VjaF9lbmQsIHRoaXMpO1xyXG4gICAgfSxcclxuXHJcblxyXG4gICAgb2ZmVG91Y2goKSB7XHJcbiAgICAgICAgdGhpcy5ub2RlLm9mZihjYy5Ob2RlLkV2ZW50VHlwZS5UT1VDSF9TVEFSVCk7XHJcbiAgICAgICAgdGhpcy5ub2RlLm9mZihjYy5Ob2RlLkV2ZW50VHlwZS5UT1VDSF9NT1ZFKTtcclxuICAgICAgICB0aGlzLm5vZGUub2ZmKGNjLk5vZGUuRXZlbnRUeXBlLlRPVUNIX0VORCk7XHJcbiAgICAgICAgdGhpcy5ub2RlLm9mZihjYy5Ob2RlLkV2ZW50VHlwZS5UT1VDSF9DQU5DRUwpO1xyXG4gICAgfSxcclxuXHJcblxyXG4gICAgdG91Y2hfc3RhcnQoZXZlbnQpIHtcclxuICAgICAgICBpZiAoIVN0YXRlRm9ySnMuaXNDYW5EcmF3IHx8IFN0YXRlRm9ySnMuaXNUb1N0b3JlKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCBwb3MgPSB0aGlzLm5vZGUuY29udmVydFRvTm9kZVNwYWNlQVIoZXZlbnQuZ2V0TG9jYXRpb24oKSk7XHJcbiAgICAgICAgd2luZG93LmlzU3RhcnREcmF3ID0gdHJ1ZTtcclxuICAgICAgICB3aW5kb3cuUG9pbnRQb3MgPSBwb3M7XHJcbiAgICAgICAgdGhpcy5ncmFwaGljcy5tb3ZlVG8ocG9zLngsIHBvcy55KTtcclxuICAgICAgICB0aGlzLmxpbmVfcG9pbnQucHVzaChjYy52Mihwb3MueCwgcG9zLnkpKTtcclxuICAgIH0sXHJcblxyXG5cclxuICAgIHRvdWNoX21vdmUoZXZlbnQpIHtcclxuICAgICAgICBpZiAoIVN0YXRlRm9ySnMuaXNDYW5EcmF3IHx8IFN0YXRlRm9ySnMuaXNUb1N0b3JlKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuY3VycmVudERyYXdUaW1lICs9IDE7XHJcblxyXG4gICAgICAgIC8vIGlmKHdpbmRvdy5jdXJyZW50THYgPT09IDIgJiYgdGhpcy5jdXJyZW50RHJhd1RpbWUgPj0gOCkge1xyXG4gICAgICAgIC8vICAgICB3aW5kb3cuY2hhbmdlRWdnUmlnaWRib2R5VHlwZSA9IHRydWU7XHJcbiAgICAgICAgLy8gICAgIHdpbmRvdy5zdG9wRHJhd1NvdW5kID0gdHJ1ZTtcclxuICAgICAgICAvLyAgICAgdGhpcy50b3VjaF9lbmQoKTtcclxuICAgICAgICAvLyAgICAgcmV0dXJuO1xyXG4gICAgICAgIC8vIH1cclxuXHJcbiAgICAgICAgbGV0IHBvcyA9IHRoaXMubm9kZS5jb252ZXJ0VG9Ob2RlU3BhY2VBUihldmVudC5nZXRMb2NhdGlvbigpKTtcclxuICAgICAgICB3aW5kb3cuUG9pbnRQb3MgPSBwb3M7XHJcbiAgICAgICAgdGhpcy5ncmFwaGljcy5saW5lVG8ocG9zLngsIHBvcy55KTtcclxuICAgICAgICB0aGlzLmxpbmVfcG9pbnQucHVzaChjYy52Mihwb3MueCwgcG9zLnkpKTtcclxuXHJcbiAgICAgICAgdGhpcy51cGRhdGVTdHJva2VDb2xvcigpO1xyXG4gICAgICAgIHRoaXMuZ3JhcGhpY3Muc3Ryb2tlKCk7XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICB0b3VjaF9lbmQoZXZlbnQpIHtcclxuICAgICAgICBpZiAod2luZG93LmlzVG91Y2hXYWxsKSB7XHJcbiAgICAgICAgICAgIFN0YXRlRm9ySnMuaXNDYW5EcmF3ID0gdHJ1ZTtcclxuICAgICAgICAgICAgLy8gd2luZG93LmlzVG91Y2hXYWxsID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHdpbmRvdy5pc0RyYXcgPSBmYWxzZTtcclxuICAgICAgICAgICAgdGhpcy5saW5lX3BvaW50ID0gW107XHJcbiAgICAgICAgICAgIHRoaXMuZ3JhcGhpY3MuY2xlYXIoKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKCFTdGF0ZUZvckpzLmlzQ2FuRHJhdyB8fCBTdGF0ZUZvckpzLmlzVG9TdG9yZSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBSw7p0IGfhu41uIMSRxrDhu51uZyB24bq9XHJcbiAgICAgICAgbGV0IHNpbXBsaWZpZWRQb2ludHMgPSB0aGlzLnNpbXBsaWZ5UGF0aCh0aGlzLmxpbmVfcG9pbnQsIDQpOyAgLy8gU+G7rSBk4bulbmcgxJHhu5kgdG9sZXJhbmNlIHBow7kgaOG7o3BcclxuICAgICAgICBTdGF0ZUZvckpzLmlzQ2FuRHJhdyA9IGZhbHNlO1xyXG4gICAgICAgIHdpbmRvdy5pc0RyYXcgPSB0cnVlO1xyXG4gICAgICAgIHdpbmRvdy5pc1RvdWNoV2FsbCA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuY3JlYXRlUmlnaWJvZHkoc2ltcGxpZmllZFBvaW50cyk7XHJcbiAgICAgICAgdGhpcy5vZmZUb3VjaCgpO1xyXG4gICAgfSxcclxuXHJcblxyXG4gICAgdXBkYXRlU3Ryb2tlQ29sb3IoKSB7XHJcbiAgICAgICAgaWYgKHdpbmRvdy5pc1RvdWNoV2FsbCkge1xyXG4gICAgICAgICAgICB0aGlzLmdyYXBoaWNzLnN0cm9rZUNvbG9yID0gY2MuQ29sb3IuUkVEO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuZ3JhcGhpY3Muc3Ryb2tlQ29sb3IgPSBjYy5Db2xvci5CTEFDSztcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICBjcmVhdGVSaWdpYm9keShzaW1wbGlmaWVkUG9pbnRzKSB7XHJcbiAgICAgICAgdGhpcy5yaWdpYm9keUxvZ2ljID0gdGhpcy5hZGRDb21wb25lbnQoY2MuUmlnaWRCb2R5KTtcclxuICAgICAgICB0aGlzLnJpZ2lib2R5TG9naWMuZ3Jhdml0eVNjYWxlID0gMC40O1xyXG5cclxuICAgICAgICB0aGlzLnBoeXNpY3NMaW5lID0gdGhpcy5hZGRDb21wb25lbnQoXCJNeVBoeXNpY3NDb2xsaWRlclwiKTtcclxuICAgICAgICB0aGlzLnBoeXNpY3NMaW5lLmxpbmVXaWR0aCA9IDc7XHJcbiAgICAgICAgdGhpcy5waHlzaWNzTGluZS5wb2ludHMgPSBzaW1wbGlmaWVkUG9pbnRzOyAgLy8gU+G7rSBk4bulbmcgxJFp4buDbSDEkcOjIHLDunQgZ+G7jW5cclxuICAgICAgICB0aGlzLnBoeXNpY3NMaW5lLmZyaWN0aW9uID0gMDtcclxuICAgICAgICB0aGlzLnBoeXNpY3NMaW5lLmRlbnNpdHkgPSAwO1xyXG4gICAgICAgIHRoaXMucGh5c2ljc0xpbmUudGFnID0gNDtcclxuICAgICAgICB0aGlzLnBoeXNpY3NMaW5lLmFwcGx5KCk7XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICBzaW1wbGlmeVBhdGgocG9pbnRzLCB0b2xlcmFuY2UpIHtcclxuICAgICAgICBpZiAocG9pbnRzLmxlbmd0aCA8IDMpIHJldHVybiBwb2ludHM7XHJcblxyXG4gICAgICAgIGxldCBzcVRvbGVyYW5jZSA9IHRvbGVyYW5jZSAhPT0gdW5kZWZpbmVkID8gdG9sZXJhbmNlICogdG9sZXJhbmNlIDogMTtcclxuICAgICAgICBwb2ludHMgPSB0aGlzLnNpbXBsaWZ5RG91Z2xhc1BldWNrZXIocG9pbnRzLCBzcVRvbGVyYW5jZSk7XHJcblxyXG4gICAgICAgIHJldHVybiBwb2ludHM7XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICBzaW1wbGlmeURvdWdsYXNQZXVja2VyKHBvaW50cywgc3FUb2xlcmFuY2UpIHtcclxuICAgICAgICBsZXQgbGVuID0gcG9pbnRzLmxlbmd0aCxcclxuICAgICAgICAgICAgQXJyYXlDb25zdHJ1Y3RvciA9IHR5cGVvZiBVaW50OEFycmF5ICE9PSAndW5kZWZpbmVkJyA/IFVpbnQ4QXJyYXkgOiBBcnJheSxcclxuICAgICAgICAgICAgbWFya2VycyA9IG5ldyBBcnJheUNvbnN0cnVjdG9yKGxlbiksXHJcbiAgICAgICAgICAgIGZpcnN0ID0gMCxcclxuICAgICAgICAgICAgbGFzdCA9IGxlbiAtIDEsXHJcbiAgICAgICAgICAgIHN0YWNrID0gW10sXHJcbiAgICAgICAgICAgIG5ld1BvaW50cyA9IFtdLFxyXG4gICAgICAgICAgICBpLCBtYXhTcURpc3QsIHNxRGlzdCwgaW5kZXg7XHJcblxyXG4gICAgICAgIG1hcmtlcnNbZmlyc3RdID0gbWFya2Vyc1tsYXN0XSA9IDE7XHJcblxyXG4gICAgICAgIHdoaWxlIChsYXN0KSB7XHJcbiAgICAgICAgICAgIG1heFNxRGlzdCA9IDA7XHJcblxyXG4gICAgICAgICAgICBmb3IgKGkgPSBmaXJzdCArIDE7IGkgPCBsYXN0OyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHNxRGlzdCA9IHRoaXMuZ2V0U3FTZWdEaXN0KHBvaW50c1tpXSwgcG9pbnRzW2ZpcnN0XSwgcG9pbnRzW2xhc3RdKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoc3FEaXN0ID4gbWF4U3FEaXN0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaW5kZXggPSBpO1xyXG4gICAgICAgICAgICAgICAgICAgIG1heFNxRGlzdCA9IHNxRGlzdDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKG1heFNxRGlzdCA+IHNxVG9sZXJhbmNlKSB7XHJcbiAgICAgICAgICAgICAgICBtYXJrZXJzW2luZGV4XSA9IDE7XHJcbiAgICAgICAgICAgICAgICBzdGFjay5wdXNoKGZpcnN0LCBpbmRleCwgaW5kZXgsIGxhc3QpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBsYXN0ID0gc3RhY2sucG9wKCk7XHJcbiAgICAgICAgICAgIGZpcnN0ID0gc3RhY2sucG9wKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKG1hcmtlcnNbaV0pIHtcclxuICAgICAgICAgICAgICAgIG5ld1BvaW50cy5wdXNoKHBvaW50c1tpXSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBuZXdQb2ludHM7XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICBnZXRTcVNlZ0Rpc3QocCwgcDEsIHAyKSB7XHJcbiAgICAgICAgbGV0IHggPSBwMS54LFxyXG4gICAgICAgICAgICB5ID0gcDEueSxcclxuICAgICAgICAgICAgZHggPSBwMi54IC0geCxcclxuICAgICAgICAgICAgZHkgPSBwMi55IC0geTtcclxuXHJcbiAgICAgICAgaWYgKGR4ICE9PSAwIHx8IGR5ICE9PSAwKSB7XHJcbiAgICAgICAgICAgIGxldCB0ID0gKChwLnggLSB4KSAqIGR4ICsgKHAueSAtIHkpICogZHkpIC8gKGR4ICogZHggKyBkeSAqIGR5KTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0ID4gMSkge1xyXG4gICAgICAgICAgICAgICAgeCA9IHAyLng7XHJcbiAgICAgICAgICAgICAgICB5ID0gcDIueTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmICh0ID4gMCkge1xyXG4gICAgICAgICAgICAgICAgeCArPSBkeCAqIHQ7XHJcbiAgICAgICAgICAgICAgICB5ICs9IGR5ICogdDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZHggPSBwLnggLSB4O1xyXG4gICAgICAgIGR5ID0gcC55IC0geTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGR4ICogZHggKyBkeSAqIGR5O1xyXG4gICAgfSxcclxuXHJcbiAgICBjaGVja0lzQ2FuRHJhdyhsYXN0UG9pbnQsIG5vd1BvaW50KSB7XHJcbiAgICAgICAgcmV0dXJuIGxhc3RQb2ludC5zdWIobm93UG9pbnQpLm1hZygpID49IDIwO1xyXG4gICAgfSxcclxufSk7XHJcbiJdfQ==