
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/__qc_index__.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}
require('./assets/Script/Controller/Bee');
require('./assets/Script/Controller/EggController');
require('./assets/Script/Controller/GameController');
require('./assets/Script/Controller/GamePlay');
require('./assets/Script/Controller/GraphicsContro');
require('./assets/Script/Controller/NodesController');
require('./assets/Script/Controller/PointController');
require('./assets/Script/Controller/TouchController');
require('./assets/Script/Data/GameOption');
require('./assets/Script/Data/Interfaces');
require('./assets/Script/Data/StateForJS');
require('./assets/Script/Data/constants');
require('./assets/Script/Plugin/Astar');
require('./assets/Script/Plugin/AudioManager');
require('./assets/Script/Plugin/Grid');
require('./assets/Script/Plugin/MyPhysicsCollider');
require('./assets/Script/Plugin/PathFinding');
require('./assets/Script/Plugin/Responsive');
require('./assets/Script/Plugin/Ultils');
require('./assets/neutrinoparticles/components/NeutrinoEffect_Bubbles');
require('./assets/neutrinoparticles/components/NeutrinoEffect_Fireworks01');
require('./assets/neutrinoparticles/components/NeutrinoEffect_Fireworks02');
require('./assets/neutrinoparticles/components/NeutrinoEffect_Sparks burst');
require('./assets/neutrinoparticles/exported_effects/Bubbles');
require('./assets/neutrinoparticles/exported_effects/Fireworks01');
require('./assets/neutrinoparticles/exported_effects/Fireworks02');
require('./assets/neutrinoparticles/exported_effects/Sparks burst');
require('./assets/neutrinoparticles/textures');
require('./neutrinoparticles-runtime/NeutrinoAssembler');
require('./neutrinoparticles-runtime/NeutrinoAssemblerJSB');
require('./neutrinoparticles-runtime/NeutrinoAssemblerWebGL');
require('./neutrinoparticles-runtime/NeutrinoComponent');
require('./neutrinoparticles-runtime/NeutrinoContext');
require('./neutrinoparticles-runtime/NeutrinoSettings');
require('./neutrinoparticles-runtime/neutrinoparticles.js/neutrinoparticles.umd');

                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/neutrinoparticles-runtime/NeutrinoAssemblerJSB.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '908f2U8uBBKHLoXjGNOOkv8', 'NeutrinoAssemblerJSB');
// NeutrinoAssemblerJSB.ts

"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var renderer = cc.renderer;
//const gfx = renderer.renderEngine.gfx;
var quadIndices = [0, 1, 3, 1, 2, 3];
var numQuadVertices = 4;
var maxQuadsInDrawCall = 512;
var maxVerticesInDrawCall = numQuadVertices * maxQuadsInDrawCall;
var maxIndicesInDrawCall = quadIndices.length * maxQuadsInDrawCall;
var NeutrinoAssembler = /** @class */ (function (_super) {
    __extends(NeutrinoAssembler, _super);
    function NeutrinoAssembler() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._currentVertex = 0;
        _this._renderStyleIndex = null;
        _this._worldScale = new cc.Vec3();
        return _this;
    }
    NeutrinoAssembler._checkAndCreateCurrentBuffer = function () {
        var bufIndex = NeutrinoAssembler._bufferIndex;
        if (!NeutrinoAssembler._vertexBuffers[bufIndex]) {
            NeutrinoAssembler._vertexBuffers[bufIndex] = new ArrayBuffer(NeutrinoAssembler._vertexFormat._bytes *
                maxVerticesInDrawCall);
            NeutrinoAssembler._vertexFloatBuffers[bufIndex] = new Float32Array(NeutrinoAssembler._vertexBuffers[bufIndex]);
            NeutrinoAssembler._vertexUint32Buffers[bufIndex] = new Uint32Array(NeutrinoAssembler._vertexBuffers[bufIndex]);
        }
        if (!NeutrinoAssembler._indexBuffers[bufIndex]) {
            NeutrinoAssembler._indexBuffers[bufIndex] = new Uint16Array(maxIndicesInDrawCall);
        }
    };
    NeutrinoAssembler._incBuffer = function () {
        ++NeutrinoAssembler._bufferIndex;
        NeutrinoAssembler._numBufferVertices = 0;
        NeutrinoAssembler._numBufferIndices = 0;
        NeutrinoAssembler._startBufferVertex = 0;
        NeutrinoAssembler._startBufferIndex = 0;
        NeutrinoAssembler._checkAndCreateCurrentBuffer();
    };
    NeutrinoAssembler.prototype._prepareForGeometry = function (numVertices, numIndices) {
        if (NeutrinoAssembler._numBufferVertices + numVertices == maxVerticesInDrawCall) {
            var i = 0;
        }
        if (NeutrinoAssembler._numBufferVertices + numVertices > maxVerticesInDrawCall
            || NeutrinoAssembler._numBufferIndices + numIndices > maxIndicesInDrawCall) {
            this._finishDrawCall();
            NeutrinoAssembler._incBuffer();
        }
    };
    NeutrinoAssembler.prototype._commitGeometry = function (numVertices, numIndices) {
        NeutrinoAssembler._numBufferVertices += numVertices;
        NeutrinoAssembler._numBufferIndices += numIndices;
    };
    NeutrinoAssembler._resetGeometryBuffers = function () {
        this._bufferIndex = 0;
        this._numBufferVertices = 0;
        this._numBufferIndices = 0;
        this._startBufferVertex = 0;
        this._startBufferIndex = 0;
        this._checkAndCreateCurrentBuffer();
    };
    NeutrinoAssembler.prototype._finishDrawCall = function () {
        if (NeutrinoAssembler._startBufferIndex === NeutrinoAssembler._numBufferIndices) {
            return;
        }
        var bufIndex = NeutrinoAssembler._bufferIndex;
        var subVertices = new Float32Array(NeutrinoAssembler._vertexBuffers[bufIndex], NeutrinoAssembler._startBufferVertex * NeutrinoAssembler._vertexFormat._bytes, ((NeutrinoAssembler._numBufferVertices - NeutrinoAssembler._startBufferVertex) * NeutrinoAssembler._vertexFormat._bytes) / 4);
        var subIndices = new Uint16Array(NeutrinoAssembler._indexBuffers[bufIndex].buffer, NeutrinoAssembler._startBufferIndex * 2, NeutrinoAssembler._numBufferIndices - NeutrinoAssembler._startBufferIndex);
        this.updateIAData(this._drawCallIndex, NeutrinoAssembler._vertexFormat._nativeObj, subVertices, subIndices);
        var effect = this._renderComp.materials[this._renderStyleIndex].effect;
        this.updateEffect(this._drawCallIndex, effect._nativeObj);
        NeutrinoAssembler._startBufferVertex = NeutrinoAssembler._numBufferVertices;
        NeutrinoAssembler._startBufferIndex = NeutrinoAssembler._numBufferIndices;
        ++this._drawCallIndex;
    };
    NeutrinoAssembler.prototype.updateRenderData = function (comp) {
        this.fillBuffers(comp);
        comp.node._renderFlag |= cc.RenderFlow.FLAG_UPDATE_RENDER_DATA;
    };
    NeutrinoAssembler.prototype.fillBuffers = function (comp) {
        if (!comp._neutrinoEffect || !comp.context.loaded()) {
            return;
        }
        this.reset(); // CustomAssembler.reset()
        NeutrinoAssembler._resetGeometryBuffers();
        this._drawCallIndex = 0;
        this._currentVertex = 0;
        this._renderStyleIndex = null;
        this._worldScale = comp._worldScale;
        comp._neutrinoEffect.fillGeometryBuffers([1, 0, 0], [0, 1, 0], [0, 0, -1]);
        this._finishDrawCall();
    };
    // Methods called by neutrinoEffect
    NeutrinoAssembler.prototype.initialize = function (maxNumVertices, texChannels, indices, maxNumRenderCalls) {
    };
    NeutrinoAssembler.prototype.beforeQuad = function (renderStyleIndex) {
        if (this._renderStyleIndex !== renderStyleIndex) {
            this._finishDrawCall();
            this._renderStyleIndex = renderStyleIndex;
        }
        this._prepareForGeometry(numQuadVertices, quadIndices.length);
    };
    NeutrinoAssembler.prototype.pushVertex = function (vertex) {
        var bufIndex = NeutrinoAssembler._bufferIndex;
        var floatsPerVertex = NeutrinoAssembler._vertexFormat._bytes / 4;
        var floatsBuffer = NeutrinoAssembler._vertexFloatBuffers[bufIndex];
        var uintsBuffer = NeutrinoAssembler._vertexUint32Buffers[bufIndex];
        var floatsStart = (NeutrinoAssembler._numBufferVertices + this._currentVertex) * floatsPerVertex;
        var x = vertex.position[0] * this._worldScale.x;
        var y = vertex.position[1] * this._worldScale.y;
        var z = vertex.position[2] * this._worldScale.z;
        floatsBuffer[floatsStart++] = x;
        floatsBuffer[floatsStart++] = y;
        floatsBuffer[floatsStart++] = z;
        floatsBuffer[floatsStart++] = vertex.texCoords[0][0];
        floatsBuffer[floatsStart++] = 1.0 - vertex.texCoords[0][1];
        uintsBuffer[floatsStart++] =
            (vertex.color[0]) |
                (vertex.color[1] << 8) |
                (vertex.color[2] << 16) |
                (vertex.color[3] << 24);
        ++this._currentVertex;
        if (this._currentVertex == 4) {
            var idicesBuffer = NeutrinoAssembler._indexBuffers[bufIndex];
            for (var i = 0; i < quadIndices.length; ++i) {
                idicesBuffer[NeutrinoAssembler._numBufferIndices + i] =
                    (NeutrinoAssembler._numBufferVertices - NeutrinoAssembler._startBufferVertex)
                        + quadIndices[i];
            }
            this._commitGeometry(numQuadVertices, quadIndices.length);
            this._currentVertex = 0;
        }
    };
    NeutrinoAssembler.prototype.pushRenderCall = function (rc) {
    };
    NeutrinoAssembler.prototype.cleanup = function () {
    };
    NeutrinoAssembler._vertexFormat = cc.gfx.VertexFormat.XYZ_UV_Color;
    NeutrinoAssembler._vertexBuffers = [];
    NeutrinoAssembler._vertexFloatBuffers = [];
    NeutrinoAssembler._vertexUint32Buffers = [];
    NeutrinoAssembler._indexBuffers = [];
    return NeutrinoAssembler;
}(cc.MeshRenderer.__assembler__));
exports.default = NeutrinoAssembler;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBhY2thZ2VzXFxuZXV0cmlub3BhcnRpY2xlc1xccnVudGltZVxcTmV1dHJpbm9Bc3NlbWJsZXJKU0IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBRUEsSUFBTSxRQUFRLEdBQVEsRUFBRSxDQUFDLFFBQVEsQ0FBQztBQUNsQyx3Q0FBd0M7QUFFeEMsSUFBTSxXQUFXLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQ3ZDLElBQU0sZUFBZSxHQUFHLENBQUMsQ0FBQztBQUMxQixJQUFNLGtCQUFrQixHQUFHLEdBQUcsQ0FBQztBQUMvQixJQUFNLHFCQUFxQixHQUFHLGVBQWUsR0FBRyxrQkFBa0IsQ0FBQztBQUNuRSxJQUFNLG9CQUFvQixHQUFHLFdBQVcsQ0FBQyxNQUFNLEdBQUcsa0JBQWtCLENBQUM7QUFFckU7SUFBK0MscUNBQTZCO0lBQTVFO1FBQUEscUVBZ0xDO1FBL0tHLG9CQUFjLEdBQUcsQ0FBQyxDQUFDO1FBQ25CLHVCQUFpQixHQUFHLElBQUksQ0FBQztRQUN6QixpQkFBVyxHQUFHLElBQUksRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDOztJQTZLaEMsQ0FBQztJQTlKVSw4Q0FBNEIsR0FBbkM7UUFDSSxJQUFNLFFBQVEsR0FBRyxpQkFBaUIsQ0FBQyxZQUFZLENBQUM7UUFFaEQsSUFBSSxDQUFDLGlCQUFpQixDQUFDLGNBQWMsQ0FBQyxRQUFRLENBQUMsRUFBRTtZQUM3QyxpQkFBaUIsQ0FBQyxjQUFjLENBQUMsUUFBUSxDQUFDLEdBQUcsSUFBSSxXQUFXLENBQUMsaUJBQWlCLENBQUMsYUFBYSxDQUFDLE1BQU07Z0JBQy9GLHFCQUFxQixDQUFDLENBQUM7WUFDM0IsaUJBQWlCLENBQUMsbUJBQW1CLENBQUMsUUFBUSxDQUFDLEdBQUcsSUFBSSxZQUFZLENBQUMsaUJBQWlCLENBQUMsY0FB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QUM7WUFFL0QsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFdBQVcsQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLEVBQUU7Z0JBQ3pDLFlBQVksQ0FBQyxpQkFBaUIsQ0FBQyxpQkFBaUIsR0FBRyxDQUFDLENBQUM7b0JBQ2pELENBQUMsaUJBQWlCLENBQUMsa0JBQWtCLEdBQUcsaUJBQWlCLENBQUMsa0JBQWtCLENBQUM7MEJBQzNFLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQzthQUN4QjtZQUVELElBQUksQ0FBQyxlQUFlLENBQUMsZUFBZSxFQUFFLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUMxRCxJQUFJLENBQUMsY0FBYyxHQUFHLENBQUMsQ0FBQztTQUMzQjtJQUNMLENBQUM7SUFFRCwwQ0FBYyxHQUFkLFVBQWUsRUFBRTtJQUNqQixDQUFDO0lBRUQsbUNBQU8sR0FBUDtJQUNBLENBQUM7SUExS00sK0JBQWEsR0FBRyxFQUFFLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxZQUFZLENBQUM7SUFDakQsZ0NBQWMsR0FBa0IsRUFBRSxDQUFDO0lBQ25DLHFDQUFtQixHQUFtQixFQUFFLENBQUM7SUFDekMsc0NBQW9CLEdBQWtCLEVBQUUsQ0FBQztJQUN6QywrQkFBYSxHQUFrQixFQUFFLENBQUM7SUF1SzdDLHdCQUFDO0NBaExELEFBZ0xDLENBaEw4QyxFQUFFLENBQUMsWUFBWSxDQUFDLGFBQWEsR0FnTDNFO2tCQWhMb0IsaUJBQWlCIiwiZmlsZSI6IiIsInNvdXJjZVJvb3QiOiIvIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IE5ldXRyaW5vQ29tcG9uZW50IGZyb20gJy4vTmV1dHJpbm9Db21wb25lbnQnO1xyXG5cclxuY29uc3QgcmVuZGVyZXIgPSA8YW55PmNjLnJlbmRlcmVyO1xyXG4vL2NvbnN0IGdmeCA9IHJlbmRlcmVyLnJlbmRlckVuZ2luZS5nZng7XHJcblxyXG5jb25zdCBxdWFkSW5kaWNlcyA9IFswLCAxLCAzLCAxLCAyLCAzXTtcclxuY29uc3QgbnVtUXVhZFZlcnRpY2VzID0gNDtcclxuY29uc3QgbWF4UXVhZHNJbkRyYXdDYWxsID0gNTEyO1xyXG5jb25zdCBtYXhWZXJ0aWNlc0luRHJhd0NhbGwgPSBudW1RdWFkVmVydGljZXMgKiBtYXhRdWFkc0luRHJhd0NhbGw7XHJcbmNvbnN0IG1heEluZGljZXNJbkRyYXdDYWxsID0gcXVhZEluZGljZXMubGVuZ3RoICogbWF4UXVhZHNJbkRyYXdDYWxsO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTmV1dHJpbm9Bc3NlbWJsZXIgZXh0ZW5kcyBjYy5NZXNoUmVuZGVyZXIuX19hc3NlbWJsZXJfXyB7XHJcbiAgICBfY3VycmVudFZlcnRleCA9IDA7XHJcbiAgICBfcmVuZGVyU3R5bGVJbmRleCA9IG51bGw7XHJcbiAgICBfd29ybGRTY2FsZSA9IG5ldyBjYy5WZWMzKCk7XHJcblxyXG4gICAgc3RhdGljIF92ZXJ0ZXhGb3JtYXQgPSBjYy5nZnguVmVydGV4Rm9ybWF0LlhZWl9VVl9Db2xvcjtcclxuICAgIHN0YXRpYyBfdmVydGV4QnVmZmVyczogQXJyYXlCdWZmZXJbXSA9IFtdO1xyXG4gICAgc3RhdGljIF92ZXJ0ZXhGbG9hdEJ1ZmZlcnM6IEZsb2F0MzJBcnJheVtdID0gW107XHJcbiAgICBzdGF0aWMgX3ZlcnRleFVpbnQzMkJ1ZmZlcnM6IFVpbnQzMkFycmF5W10gPSBbXTtcclxuICAgIHN0YXRpYyBfaW5kZXhCdWZmZXJzOiBVaW50MTZBcnJheVtdID0gW107XHJcbiAgICBzdGF0aWMgX2J1ZmZlckluZGV4OiBudW1iZXI7XHJcbiAgICBzdGF0aWMgX251bUJ1ZmZlclZlcnRpY2VzOiBudW1iZXI7XHJcbiAgICBzdGF0aWMgX251bUJ1ZmZlckluZGljZXM6IG51bWJlcjtcclxuICAgIHN0YXRpYyBfc3RhcnRCdWZmZXJWZXJ0ZXg6IG51bWJlcjtcclxuICAgIHN0YXRpYyBfc3RhcnRCdWZmZXJJbmRleDogbnVtYmVyO1xyXG5cclxuICAgIF9kcmF3Q2FsbEluZGV4OiBudW1iZXI7XHJcblxyXG4gICAgc3RhdGljIF9jaGVja0FuZENyZWF0ZUN1cnJlbnRCdWZmZXIoKSB7XHJcbiAgICAgICAgY29uc3QgYnVmSW5kZXggPSBOZXV0cmlub0Fzc2VtYmxlci5fYnVmZmVySW5kZXg7XHJcblxyXG4gICAgICAgIGlmICghTmV1dHJpbm9Bc3NlbWJsZXIuX3ZlcnRleEJ1ZmZlcnNbYnVmSW5kZXhdKSB7XHJcbiAgICAgICAgICAgIE5ldXRyaW5vQXNzZW1ibGVyLl92ZXJ0ZXhCdWZmZXJzW2J1ZkluZGV4XSA9IG5ldyBBcnJheUJ1ZmZlcihOZXV0cmlub0Fzc2VtYmxlci5fdmVydGV4Rm9ybWF0Ll9ieXRlcyAqXHJcbiAgICAgICAgICAgICAgICBtYXhWZXJ0aWNlc0luRHJhd0NhbGwpO1xyXG4gICAgICAgICAgICBOZXV0cmlub0Fzc2VtYmxlci5fdmVydGV4RmxvYXRCdWZmZXJzW2J1ZkluZGV4XSA9IG5ldyBGbG9hdDMyQXJyYXkoTmV1dHJpbm9Bc3NlbWJsZXIuX3ZlcnRleEJ1ZmZlcnNbYnVmSW5kZXhdKTtcclxuICAgICAgICAgICAgTmV1dHJpbm9Bc3NlbWJsZXIuX3ZlcnRleFVpbnQzMkJ1ZmZlcnNbYnVmSW5kZXhdID0gbmV3IFVpbnQzMkFycmF5KE5ldXRyaW5vQXNzZW1ibGVyLl92ZXJ0ZXhCdWZmZXJzW2J1ZkluZGV4XSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoIU5ldXRyaW5vQXNzZW1ibGVyLl9pbmRleEJ1ZmZlcnNbYnVmSW5kZXhdKSB7XHJcbiAgICAgICAgICAgIE5ldXRyaW5vQXNzZW1ibGVyLl9pbmRleEJ1ZmZlcnNbYnVmSW5kZXhdID0gbmV3IFVpbnQxNkFycmF5KG1heEluZGljZXNJbkRyYXdDYWxsKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIF9pbmNCdWZmZXIoKSB7XHJcbiAgICAgICAgKytOZXV0cmlub0Fzc2VtYmxlci5fYnVmZmVySW5kZXg7XHJcbiAgICAgICAgTmV1dHJpbm9Bc3NlbWJsZXIuX251bUJ1ZmZlclZlcnRpY2VzID0gMDtcclxuICAgICAgICBOZXV0cmlub0Fzc2VtYmxlci5fbnVtQnVmZmVySW5kaWNlcyA9IDA7XHJcbiAgICAgICAgTmV1dHJpbm9Bc3NlbWJsZXIuX3N0YXJ0QnVmZmVyVmVydGV4ID0gMDtcclxuICAgICAgICBOZXV0cmlub0Fzc2VtYmxlci5fc3RhcnRCdWZmZXJJbmRleCA9IDA7XHJcbiAgICAgICAgTmV1dHJpbm9Bc3NlbWJsZXIuX2NoZWNrQW5kQ3JlYXRlQ3VycmVudEJ1ZmZlcigpO1xyXG4gICAgfVxyXG5cclxuICAgIF9wcmVwYXJlRm9yR2VvbWV0cnkobnVtVmVydGljZXM6IG51bWJlciwgbnVtSW5kaWNlczogbnVtYmVyKSB7XHJcbiAgICAgICAgaWYgKE5ldXRyaW5vQXNzZW1ibGVyLl9udW1CdWZmZXJWZXJ0aWNlcyArIG51bVZlcnRpY2VzID09IG1heFZlcnRpY2VzSW5EcmF3Q2FsbCkge1xyXG4gICAgICAgICAgICBjb25zdCBpID0gMDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChOZXV0cmlub0Fzc2VtYmxlci5fbnVtQnVmZmVyVmVydGljZXMgKyBudW1WZXJ0aWNlcyA+IG1heFZlcnRpY2VzSW5EcmF3Q2FsbFxyXG4gICAgICAgICAgICB8fCBOZXV0cmlub0Fzc2VtYmxlci5fbnVtQnVmZmVySW5kaWNlcyArIG51bUluZGljZXMgPiBtYXhJbmRpY2VzSW5EcmF3Q2FsbCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fZmluaXNoRHJhd0NhbGwoKTtcclxuICAgICAgICAgICAgICAgIE5ldXRyaW5vQXNzZW1ibGVyLl9pbmNCdWZmZXIoKTtcclxuICAgICAgICAgICAgfSAgICAgICAgXHJcbiAgICB9XHJcblxyXG4gICAgX2NvbW1pdEdlb21ldHJ5KG51bVZlcnRpY2VzOiBudW1iZXIsIG51bUluZGljZXM6IG51bWJlcikge1xyXG4gICAgICAgIE5ldXRyaW5vQXNzZW1ibGVyLl9udW1CdWZmZXJWZXJ0aWNlcyArPSBudW1WZXJ0aWNlcztcclxuICAgICAgICBOZXV0cmlub0Fzc2VtYmxlci5fbnVtQnVmZmVySW5kaWNlcyArPSBudW1JbmRpY2VzO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBfcmVzZXRHZW9tZXRyeUJ1ZmZlcnMoKSB7XHJcbiAgICAgICAgXHJcbiAgICAgICAgdGhpcy5fYnVmZmVySW5kZXggPSAwO1xyXG4gICAgICAgIHRoaXMuX251bUJ1ZmZlclZlcnRpY2VzID0gMDtcclxuICAgICAgICB0aGlzLl9udW1CdWZmZXJJbmRpY2VzID0gMDtcclxuICAgICAgICB0aGlzLl9zdGFydEJ1ZmZlclZlcnRleCA9IDA7XHJcbiAgICAgICAgdGhpcy5fc3RhcnRCdWZmZXJJbmRleCA9IDA7XHJcbiAgICAgICAgdGhpcy5fY2hlY2tBbmRDcmVhdGVDdXJyZW50QnVmZmVyKCk7XHJcbiAgICB9XHJcblxyXG4gICAgX2ZpbmlzaERyYXdDYWxsKCkge1xyXG4gICAgICAgIGlmIChOZXV0cmlub0Fzc2VtYmxlci5fc3RhcnRCdWZmZXJJbmRleCA9PT0gTmV1dHJpbm9Bc3NlbWJsZXIuX251bUJ1ZmZlckluZGljZXMpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgYnVmSW5kZXggPSBOZXV0cmlub0Fzc2VtYmxlci5fYnVmZmVySW5kZXg7XHJcblxyXG4gICAgICAgIGNvbnN0IHN1YlZlcnRpY2VzID0gbmV3IEZsb2F0MzJBcnJheShOZXV0cmlub0Fzc2VtYmxlci5fdmVydGV4QnVmZmVyc1tidWZJbmRleF0sXHJcbiAgICAgICAgICAgIE5ldXRyaW5vQXNzZW1ibGVyLl9zdGFydEJ1ZmZlclZlcnRleCAqIE5ldXRyaW5vQXNzZW1ibGVyLl92ZXJ0ZXhGb3JtYXQuX2J5dGVzLFxyXG4gICAgICAgICAgICAoKE5ldXRyaW5vQXNzZW1ibGVyLl9udW1CdWZmZXJWZXJ0aWNlcyAtIE5ldXRyaW5vQXNzZW1ibGVyLl9zdGFydEJ1ZmZlclZlcnRleCkgKiBOZXV0cmlub0Fzc2VtYmxlci5fdmVydGV4Rm9ybWF0Ll9ieXRlcykgLyA0KTtcclxuXHJcbiAgICAgICAgY29uc3Qgc3ViSW5kaWNlcyA9IG5ldyBVaW50MTZBcnJheShOZXV0cmlub0Fzc2VtYmxlci5faW5kZXhCdWZmZXJzW2J1ZkluZGV4XS5idWZmZXIsIFxyXG4gICAgICAgICAgICBOZXV0cmlub0Fzc2VtYmxlci5fc3RhcnRCdWZmZXJJbmRleCAqIDIsXHJcbiAgICAgICAgICAgIE5ldXRyaW5vQXNzZW1ibGVyLl9udW1CdWZmZXJJbmRpY2VzIC0gTmV1dHJpbm9Bc3NlbWJsZXIuX3N0YXJ0QnVmZmVySW5kZXgpO1xyXG5cclxuICAgICAgICB0aGlzLnVwZGF0ZUlBRGF0YSh0aGlzLl9kcmF3Q2FsbEluZGV4LCBOZXV0cmlub0Fzc2VtYmxlci5fdmVydGV4Rm9ybWF0Ll9uYXRpdmVPYmosXHJcbiAgICAgICAgICAgIHN1YlZlcnRpY2VzLCBzdWJJbmRpY2VzKTtcclxuXHJcbiAgICAgICAgY29uc3QgZWZmZWN0ID0gdGhpcy5fcmVuZGVyQ29tcC5tYXRlcmlhbHNbdGhpcy5fcmVuZGVyU3R5bGVJbmRleF0uZWZmZWN0O1xyXG4gICAgICAgIHRoaXMudXBkYXRlRWZmZWN0KHRoaXMuX2RyYXdDYWxsSW5kZXgsIGVmZmVjdC5fbmF0aXZlT2JqKTtcclxuXHJcbiAgICAgICAgTmV1dHJpbm9Bc3NlbWJsZXIuX3N0YXJ0QnVmZmVyVmVydGV4ID0gTmV1dHJpbm9Bc3NlbWJsZXIuX251bUJ1ZmZlclZlcnRpY2VzO1xyXG4gICAgICAgIE5ldXRyaW5vQXNzZW1ibGVyLl9zdGFydEJ1ZmZlckluZGV4ID0gTmV1dHJpbm9Bc3NlbWJsZXIuX251bUJ1ZmZlckluZGljZXM7XHJcbiAgICAgICAgKyt0aGlzLl9kcmF3Q2FsbEluZGV4O1xyXG4gICAgfVxyXG5cclxuICAgIHVwZGF0ZVJlbmRlckRhdGEgKGNvbXApIHsgXHJcbiAgICAgICAgdGhpcy5maWxsQnVmZmVycyhjb21wKTtcclxuICAgICAgICBjb21wLm5vZGUuX3JlbmRlckZsYWcgfD0gY2MuUmVuZGVyRmxvdy5GTEFHX1VQREFURV9SRU5ERVJfREFUQTtcclxuICAgIH1cclxuXHJcbiAgICBmaWxsQnVmZmVycyAoY29tcCkge1xyXG4gICAgICAgIGlmICghY29tcC5fbmV1dHJpbm9FZmZlY3QgfHwgIWNvbXAuY29udGV4dC5sb2FkZWQoKSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLnJlc2V0KCk7IC8vIEN1c3RvbUFzc2VtYmxlci5yZXNldCgpXHJcbiAgICAgICAgTmV1dHJpbm9Bc3NlbWJsZXIuX3Jlc2V0R2VvbWV0cnlCdWZmZXJzKCk7XHJcbiAgICAgICAgdGhpcy5fZHJhd0NhbGxJbmRleCA9IDA7XHJcbiAgICAgICAgdGhpcy5fY3VycmVudFZlcnRleCA9IDA7XHJcbiAgICAgICAgdGhpcy5fcmVuZGVyU3R5bGVJbmRleCA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5fd29ybGRTY2FsZSA9IGNvbXAuX3dvcmxkU2NhbGU7XHJcbiAgICAgICAgXHJcbiAgICAgICAgY29tcC5fbmV1dHJpbm9FZmZlY3QuZmlsbEdlb21ldHJ5QnVmZmVycyhbMSwgMCwgMF0sIFswLCAxLCAwXSwgWzAsIDAsIC0xXSk7XHJcbiAgICAgICAgdGhpcy5fZmluaXNoRHJhd0NhbGwoKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBNZXRob2RzIGNhbGxlZCBieSBuZXV0cmlub0VmZmVjdFxyXG5cclxuICAgIGluaXRpYWxpemUobWF4TnVtVmVydGljZXMsIHRleENoYW5uZWxzLCBpbmRpY2VzLCBtYXhOdW1SZW5kZXJDYWxscykge1xyXG4gICAgfVxyXG5cclxuICAgIGJlZm9yZVF1YWQocmVuZGVyU3R5bGVJbmRleCkge1xyXG4gICAgICAgIGlmICh0aGlzLl9yZW5kZXJTdHlsZUluZGV4ICE9PSByZW5kZXJTdHlsZUluZGV4KSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2ZpbmlzaERyYXdDYWxsKCk7XHJcbiAgICAgICAgICAgIHRoaXMuX3JlbmRlclN0eWxlSW5kZXggPSByZW5kZXJTdHlsZUluZGV4O1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICB0aGlzLl9wcmVwYXJlRm9yR2VvbWV0cnkobnVtUXVhZFZlcnRpY2VzLCBxdWFkSW5kaWNlcy5sZW5ndGgpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1c2hWZXJ0ZXgodmVydGV4KSB7XHJcbiAgICAgICAgY29uc3QgYnVmSW5kZXggPSBOZXV0cmlub0Fzc2VtYmxlci5fYnVmZmVySW5kZXg7XHJcbiAgICAgICAgY29uc3QgZmxvYXRzUGVyVmVydGV4ID0gTmV1dHJpbm9Bc3NlbWJsZXIuX3ZlcnRleEZvcm1hdC5fYnl0ZXMgLyA0O1xyXG4gICAgICAgIGNvbnN0IGZsb2F0c0J1ZmZlciA9IE5ldXRyaW5vQXNzZW1ibGVyLl92ZXJ0ZXhGbG9hdEJ1ZmZlcnNbYnVmSW5kZXhdO1xyXG4gICAgICAgIGNvbnN0IHVpbnRzQnVmZmVyID0gTmV1dHJpbm9Bc3NlbWJsZXIuX3ZlcnRleFVpbnQzMkJ1ZmZlcnNbYnVmSW5kZXhdO1xyXG5cclxuICAgICAgICBsZXQgZmxvYXRzU3RhcnQgPSAoTmV1dHJpbm9Bc3NlbWJsZXIuX251bUJ1ZmZlclZlcnRpY2VzICsgdGhpcy5fY3VycmVudFZlcnRleCkgKiBmbG9hdHNQZXJWZXJ0ZXg7XHJcblxyXG4gICAgICAgIGNvbnN0IHggPSB2ZXJ0ZXgucG9zaXRpb25bMF0gKiB0aGlzLl93b3JsZFNjYWxlLng7XHJcbiAgICAgICAgY29uc3QgeSA9IHZlcnRleC5wb3NpdGlvblsxXSAqIHRoaXMuX3dvcmxkU2NhbGUueTtcclxuICAgICAgICBjb25zdCB6ID0gdmVydGV4LnBvc2l0aW9uWzJdICogdGhpcy5fd29ybGRTY2FsZS56O1xyXG5cclxuICAgICAgICBmbG9hdHNCdWZmZXJbZmxvYXRzU3RhcnQrK10gPSB4O1xyXG4gICAgICAgIGZsb2F0c0J1ZmZlcltmbG9hdHNTdGFydCsrXSA9IHk7XHJcbiAgICAgICAgZmxvYXRzQnVmZmVyW2Zsb2F0c1N0YXJ0KytdID0gejtcclxuXHJcbiAgICAgICAgZmxvYXRzQnVmZmVyW2Zsb2F0c1N0YXJ0KytdID0gdmVydGV4LnRleENvb3Jkc1swXVswXTtcclxuICAgICAgICBmbG9hdHNCdWZmZXJbZmxvYXRzU3RhcnQrK10gPSAxLjAgLSB2ZXJ0ZXgudGV4Q29vcmRzWzBdWzFdO1xyXG5cclxuICAgICAgICB1aW50c0J1ZmZlcltmbG9hdHNTdGFydCsrXSA9IFxyXG4gICAgICAgICAgICAodmVydGV4LmNvbG9yWzBdKSB8XHJcbiAgICAgICAgICAgICh2ZXJ0ZXguY29sb3JbMV0gPDwgOCkgfFxyXG4gICAgICAgICAgICAodmVydGV4LmNvbG9yWzJdIDw8IDE2KSB8XHJcbiAgICAgICAgICAgICh2ZXJ0ZXguY29sb3JbM10gPDwgMjQpO1xyXG5cclxuICAgICAgICArK3RoaXMuX2N1cnJlbnRWZXJ0ZXg7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9jdXJyZW50VmVydGV4ID09IDQpIHtcclxuICAgICAgICAgICAgY29uc3QgaWRpY2VzQnVmZmVyID0gTmV1dHJpbm9Bc3NlbWJsZXIuX2luZGV4QnVmZmVyc1tidWZJbmRleF07XHJcblxyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHF1YWRJbmRpY2VzLmxlbmd0aDsgKytpKSB7XHJcbiAgICAgICAgICAgICAgICBpZGljZXNCdWZmZXJbTmV1dHJpbm9Bc3NlbWJsZXIuX251bUJ1ZmZlckluZGljZXMgKyBpXSA9IFxyXG4gICAgICAgICAgICAgICAgICAgIChOZXV0cmlub0Fzc2VtYmxlci5fbnVtQnVmZmVyVmVydGljZXMgLSBOZXV0cmlub0Fzc2VtYmxlci5fc3RhcnRCdWZmZXJWZXJ0ZXgpIFxyXG4gICAgICAgICAgICAgICAgICAgICsgcXVhZEluZGljZXNbaV07XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMuX2NvbW1pdEdlb21ldHJ5KG51bVF1YWRWZXJ0aWNlcywgcXVhZEluZGljZXMubGVuZ3RoKTtcclxuICAgICAgICAgICAgdGhpcy5fY3VycmVudFZlcnRleCA9IDA7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHB1c2hSZW5kZXJDYWxsKHJjKSB7XHJcbiAgICB9XHJcblxyXG4gICAgY2xlYW51cCgpIHtcclxuICAgIH1cclxufVxyXG4iXX0=
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/neutrinoparticles-runtime/neutrinoparticles.js/neutrinoparticles.umd.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'ab558HOKv9Bq5K2NwBWDZL+', 'neutrinoparticles.umd');
// neutrinoparticles.js/neutrinoparticles.umd.js

"use strict";

(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) : typeof define === 'function' && define.amd ? define(['exports'], factory) : (global = global || self, factory(global.Neutrino = {}));
})(void 0, function (exports) {
  'use strict';

  function Context() {
    var ctx = this;

    this.equalv3_ = function (a, b) {
      return a[0] == b[0] && a[1] == b[1] && a[2] == b[2];
    };

    this.equalq_ = function (a, b) {
      return a[0] == b[0] && a[1] == b[1] && a[2] == b[2] && a[3] == b[3];
    };

    this.a = function (r, a, b) {
      r[0] = a[0] + b[0];
      r[1] = a[1] + b[1];
    };

    this.b = function (a, b) {
      return [a[0] + b[0], a[1] + b[1]];
    };

    this.y = function (r, a, s) {
      r[0] = a[0] + s;
      r[1] = a[1] + s;
    };

    this.z = function (a, s) {
      return [a[0] + s, a[1] + s];
    };

    this.c = function (r, a, b) {
      r[0] = a[0] + b[0];
      r[1] = a[1] + b[1];
      r[2] = a[2] + b[2];
    };

    this.d = function (a, b) {
      return [a[0] + b[0], a[1] + b[1], a[2] + b[2]];
    };

    this.C = function (r, a, s) {
      r[0] = a[0] + s;
      r[1] = a[1] + s;
      r[2] = a[2] + s;
    };

    this.D = function (a, s) {
      return [a[0] + s, a[1] + s, a[2] + s];
    };

    this.addq = function (r, a, b) {
      r[0] = a[0] + b[0];
      r[1] = a[1] + b[1];
      r[2] = a[2] + b[2];
      r[3] = a[3] + b[3];
    };

    this.addq_ = function (a, b) {
      return [a[0] + b[0], a[1] + b[1], a[2] + b[2], a[3] + b[3]];
    };

    this.e = function (r, a, b) {
      r[0] = a[0] - b[0];
      r[1] = a[1] - b[1];
    };

    this.f = function (a, b) {
      return [a[0] - b[0], a[1] - b[1]];
    };

    this.A = function (r, a, s) {
      r[0] = a[0] - s;
      r[1] = a[1] - s;
    };

    this.B = function (a, s) {
      return [a[0] - s, a[1] - s];
    };

    this.nf = function (r, s, a) {
      r[0] = s - a[0];
      r[1] = s - a[1];
    };

    this.of = function (s, a) {
      return [s - a[0], s - a[1]];
    };

    this.g = function (r, a, b) {
      r[0] = a[0] - b[0];
      r[1] = a[1] - b[1];
      r[2] = a[2] - b[2];
    };

    this.h = function (a, b) {
      return [a[0] - b[0], a[1] - b[1], a[2] - b[2]];
    };

    this.E = function (r, a, s) {
      r[0] = a[0] - s;
      r[1] = a[1] - s;
      r[2] = a[2] - s;
    };

    this.F = function (a, s) {
      return [a[0] - s, a[1] - s, a[2] - s];
    };

    this.rf = function (r, s, a) {
      r[0] = s - a[0];
      r[1] = s - a[1];
      r[2] = s - a[2];
    };

    this.sf = function (s, a) {
      return [s - a[0], s - a[1], s - a[2]];
    };

    this.i = function (r, a, b) {
      r[0] = a[0] * b[0];
      r[1] = a[1] * b[1];
    };

    this.j = function (a, b) {
      return [a[0] * b[0], a[1] * b[1]];
    };

    this.k = function (r, a, b) {
      r[0] = a[0] * b[0];
      r[1] = a[1] * b[1];
      r[2] = a[2] * b[2];
    };

    this.l = function (a, b) {
      return [a[0] * b[0], a[1] * b[1], a[2] * b[2]];
    };

    this.m = function (r, a, b) {
      r[0] = a[0] / b[0];
      r[1] = a[1] / b[1];
    };

    this.n = function (a, b) {
      return [a[0] / b[0], a[1] / b[1]];
    };

    this.o = function (r, a, b) {
      r[0] = a[0] / b[0];
      r[1] = a[1] / b[1];
      r[2] = a[2] / b[2];
    };

    this.p = function (a, b) {
      return [a[0] / b[0], a[1] / b[1], a[2] / b[2]];
    };

    this.H = function (a, b) {
      return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
    };

    this.dotq_ = function (a, b) {
      return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];
    };

    this.q = function (r, a, s) {
      r[0] = a[0] * s;
      r[1] = a[1] * s;
    };

    this.r = function (a, s) {
      return [a[0] * s, a[1] * s];
    };

    this.s = function (r, a, s) {
      r[0] = a[0] / s;
      r[1] = a[1] / s;
    };

    this.t = function (a, s) {
      return [a[0] / s, a[1] / s];
    };

    this.u = function (r, a, s) {
      r[0] = a[0] * s;
      r[1] = a[1] * s;
      r[2] = a[2] * s;
    };

    this.v = function (a, s) {
      return [a[0] * s, a[1] * s, a[2] * s];
    };

    this.w = function (r, a, s) {
      r[0] = a[0] / s;
      r[1] = a[1] / s;
      r[2] = a[2] / s;
    };

    this.x = function (a, s) {
      return [a[0] / s, a[1] / s, a[2] / s];
    };

    this.y = function (r, a, s) {
      r[0] = a[0] + s;
      r[1] = a[1] + s;
    };

    this.z = function (a, s) {
      return [a[0] + s, a[1] + s];
    };

    this.A = function (r, a, s) {
      r[0] = a[0] - s;
      r[1] = a[1] - s;
    };

    this.B = function (a, s) {
      return [a[0] - s, a[1] - s];
    };

    this.G = function (a, b) {
      return a[0] * b[0] + a[1] * b[1];
    };

    this.H = function (a, b) {
      return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
    };

    this.I = function (r, a, b) {
      var ax = a[0],
          ay = a[1],
          az = a[2];
      var bx = b[0],
          by = b[1],
          bz = b[2];
      r[0] = ay * bz - az * by;
      r[1] = az * bx - ax * bz;
      r[2] = ax * by - ay * bx;
    };

    this.J = function (a, b) {
      var ax = a[0],
          ay = a[1],
          az = a[2];
      var bx = b[0],
          by = b[1],
          bz = b[2];
      return [ay * bz - az * by, az * bx - ax * bz, ax * by - ay * bx];
    };

    this.K = function (a) {
      return Math.sqrt(a[0] * a[0] + a[1] * a[1]);
    };

    this.L = function (a) {
      return a[0] * a[0] + a[1] * a[1];
    };

    this.M = function (r, a) {
      ctx.q(r, a, 1.0 / ctx.K(a));
    };

    this.N = function (a) {
      return ctx.r(a, 1.0 / ctx.K(a));
    };

    this.O = function (a) {
      return Math.sqrt(a[0] * a[0] + a[1] * a[1] + a[2] * a[2]);
    };

    this.P = function (a) {
      return a[0] * a[0] + a[1] * a[1] + a[2] * a[2];
    };

    this.Q = function (r, a) {
      ctx.u(r, a, 1.0 / ctx.O(a));
    };

    this.R = function (a) {
      return ctx.v(a, 1.0 / ctx.O(a));
    };

    this.S = function (r, a) {
      r[0] = a[0];
      r[1] = a[1];
    };

    this.T = function (r, a) {
      r[0] = a[0];
      r[1] = a[1];
      r[2] = a[2];
    };

    this.U = function (r, a) {
      r[0] = a[0];
      r[1] = a[1];
      r[2] = a[2];
      r[3] = a[3];
    };

    this.V = function (r, x, y) {
      r[0] = x;
      r[1] = y;
    };

    this.W = function (r, x, y, z) {
      r[0] = x;
      r[1] = y;
      r[2] = z;
    };

    this.X = function (a, b, i) {
      return a + (b - a) * i;
    };

    this.Y = function (r, a, b, i) {
      r[0] = a[0] + (b[0] - a[0]) * i;
      r[1] = a[1] + (b[1] - a[1]) * i;
    };

    this.Z = function (a, b, i) {
      return [a[0] + (b[0] - a[0]) * i, a[1] + (b[1] - a[1]) * i];
    };

    this.ab = function (r, a, b, i) {
      r[0] = a[0] + (b[0] - a[0]) * i;
      r[1] = a[1] + (b[1] - a[1]) * i;
      r[2] = a[2] + (b[2] - a[2]) * i;
    };

    this.bb = function (a, b, i) {
      return [a[0] + (b[0] - a[0]) * i, a[1] + (b[1] - a[1]) * i, a[2] + (b[2] - a[2]) * i];
    };

    this.slerpq = function (r, x, y, a) {
      var cosTheta = ctx.dotq_(x, y);
      var z = [];

      if (cosTheta < 0) {
        ctx.negq(z, y);
        cosTheta = -cosTheta;
      } else {
        ctx.U(z, y);
      }

      if (1.0 - cosTheta < Number.EPSILON) {
        r[0] = ctx.X(x[0], y[0], a);
        r[1] = ctx.X(x[1], y[1], a);
        r[2] = ctx.X(x[2], y[2], a);
        r[3] = ctx.X(x[3], y[3], a);
      } else {
        var Md = ctx.acos_(cosTheta);
        ctx.mulqscalar(r, ctx.addq_(ctx.mulqscalar_(x, ctx.sin_((1.0 - a) * Md)), ctx.mulqscalar_(z, ctx.sin_(a * Md))), 1.0 / ctx.sin_(Md));
      }
    };

    this.slerpq_ = function (x, y, a) {
      var r = [];
      slerpq(r, x, y, a);
      return r;
    }; //trigonometry


    this.acos_ = function (a) {
      return Math.acos(a);
    };

    this.sin_ = function (a) {
      return Math.sin(a);
    };

    this.cos_ = function (a) {
      return Math.cos(a);
    }; // random


    this.taus88 = function (seed) {
      if (!seed) seed = 0;
      var value0, value1, value2;

      this.seed = function (s0) {
        s0 &= 0xFFFFFFFF;
        value0 = s0 < 2 ? s0 + 2 : s0;
        value1 = s0 < 8 ? s0 + 8 : s0;
        value2 = s0 < 16 ? s0 + 16 : s0;
      };

      this.rand = function () {
        var b = ((value0 << 13 ^ value0) & 0xFFFFFFFF) >>> 19;
        value0 = ((value0 & 0xFFFFFFFE) << 12 ^ b) >>> 0;
        b = ((value1 << 2 ^ value1) & 0xFFFFFFFF) >>> 25;
        value1 = ((value1 & 0xFFFFFFF8) << 4 ^ b) >>> 0;
        b = ((value2 << 3 ^ value2) & 0xFFFFFFFF) >>> 11;
        value2 = ((value2 & 0xFFFFFFF0) << 17 ^ b) >>> 0;
        var engine = (value0 ^ value1 ^ value2) >>> 0;
        return engine / 4294967296.0;
      };

      this.seed(seed);
    };

    this.cb = function (r, radius) {
      this.randv2gen(r, radius, function () {
        return Math.random();
      });
    };

    this.randv2gen = function (r, radius, gen) {
      var Md = gen() * Math.PI * 2.0;
      r[0] = radius * ctx.cos_(Md);
      r[1] = radius * ctx.sin_(Md);
    };

    this.db = function (r, radius) {
      this.randv3gen(r, radius, function () {
        return Math.random();
      });
    };

    this.randv3gen = function (r, radius, gen) {
      var theta = gen() * Math.PI * 2.0;
      var z = -1.0 + gen() * 2.0;
      var sqrtInvZ2 = radius * Math.sqrt(1.0 - z * z);
      r[0] = sqrtInvZ2 * ctx.cos_(theta);
      r[1] = sqrtInvZ2 * ctx.sin_(theta);
      r[2] = radius * z;
    };

    this.yb = function (r, x, y, Nd, gen) {
      var dispx = x + gen() * Nd[0];
      var dispy = y + gen() * Nd[1];
      ctx.V(r, dispx, dispy);
    };

    this.eb = function (r, a) {
      ctx.V(-a[0], -a[1]);
    };

    this.fb = function (a) {
      return [-a[0], -a[1]];
    };

    this.gb = function (r, a) {
      ctx.W(-a[0], -a[1], -a[2]);
    };

    this.hb = function (a) {
      return [-a[0], -a[1], -a[2]];
    };

    this.negq = function (r, a) {
      r[0] = -a[0];
      r[1] = -a[1];
      r[2] = -a[2];
      r[3] = -a[3];
    };

    this.negq_ = function (a) {
      return [-a[0], -a[1], -a[2], -a[3]];
    };

    this.ib = function (degrees) {
      return degrees / 180.0 * Math.PI;
    };

    this.jb = function (radians) {
      return radians / Math.PI * 180.0;
    };

    this.Ae = function (value) {
      return value < 0 ? -1 : 1;
    };

    this.ob = function (x, y, z, q) {
      var x2 = 2.0 * q[0] * q[0];
      var y2 = 2.0 * q[1] * q[1];
      var z2 = 2.0 * q[2] * q[2];
      var xy = 2.0 * q[0] * q[1];
      var xz = 2.0 * q[0] * q[2];
      var yz = 2.0 * q[1] * q[2];
      var wz = 2.0 * q[3] * q[2];
      var wy = 2.0 * q[3] * q[1];
      var wx = 2.0 * q[3] * q[0];
      x[0] = 1.0 - y2 - z2;
      x[1] = xy + wz;
      x[2] = xz - wy;
      y[0] = xy - wz;
      y[1] = 1.0 - x2 - z2;
      y[2] = yz + wx;
      z[0] = xz + wy;
      z[1] = yz - wx;
      z[2] = 1.0 - x2 - y2;
    };

    this.pb = function (q, x, y, z) {
      var tr = x[0] + y[1] + z[2];

      if (tr > 0) {
        var S = Math.sqrt(tr + 1.0) * 2;
        q[3] = 0.25 * S;
        q[0] = (y[2] - z[1]) / S;
        q[1] = (z[0] - x[2]) / S;
        q[2] = (x[1] - y[0]) / S;
      } else if (x[0] > y[1] & x[0] > z[2]) {
        var S = Math.sqrt(1.0 + x[0] - y[1] - z[2]) * 2;
        q[3] = (y[2] - z[1]) / S;
        q[0] = 0.25 * S;
        q[1] = (x[1] + y[0]) / S;
        q[2] = (z[0] + x[2]) / S;
      } else if (y[1] > z[2]) {
        var S = Math.sqrt(1.0 + y[1] - x[0] - z[2]) * 2;
        q[3] = (z[0] - x[2]) / S;
        q[0] = (x[1] + y[0]) / S;
        q[1] = 0.25 * S;
        q[2] = (y[2] + z[1]) / S;
      } else {
        var S = Math.sqrt(1.0 + z[2] - x[0] - y[1]) * 2;
        q[3] = (x[1] - y[0]) / S;
        q[0] = (z[0] + x[2]) / S;
        q[1] = (y[2] + z[1]) / S;
        q[2] = 0.25 * S;
      }
    };

    this.
    /**/
    axes2quat = this.pb;

    this.qb = function (q, x, a) {
      var ha = ctx.ib(a) * 0.5,
          s = Math.sin(ha);
      q[0] = x[0] * s;
      q[1] = x[1] * s;
      q[2] = x[2] * s;
      q[3] = Math.cos(ha);
    };

    this.
    /**/
    axisangle2quat = this.qb;

    this.axisangle2quat_ = function (x, a) {
      var ha = ctx.ib(a) * 0.5,
          s = Math.sin(ha);
      return [x[0] * s, x[1] * s, x[2] * s, ctx.cos_(ha)];
    };

    this.
    /**/
    axisangle2quat_ = this.axisangle2quat_;

    this.rb = function (r, v, q) {
      var x = v[0];
      var y = v[1];
      var z = v[2];
      var qx = q[0];
      var qy = q[1];
      var qz = q[2];
      var qw = q[3];
      var ix = qw * x + qy * z - qz * y;
      var iy = qw * y + qz * x - qx * z;
      var iz = qw * z + qx * y - qy * x;
      var iw = -qx * x - qy * y - qz * z;
      r[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;
      r[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;
      r[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;
    };

    this.sb = function (r, a, b) {
      var qax = a[0],
          qay = a[1],
          qaz = a[2],
          qaw = a[3];
      var qbx = b[0],
          qby = b[1],
          qbz = b[2],
          qbw = b[3];
      r[0] = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;
      r[1] = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;
      r[2] = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;
      r[3] = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;
    };

    this.mulqscalar = function (r, a, s) {
      r[0] = a[0] * s;
      r[1] = a[1] * s;
      r[2] = a[2] * s;
      r[3] = a[3] * s;
    };

    this.mulqscalar_ = function (a, s) {
      return [a[0] * s, a[1] * s, a[2] * s, a[3] * s];
    };

    this.tb = function (r, Hf, degree, scale, v) {
      var rad = ctx.ib(degree);
      var cos = Math.cos(rad) * scale;
      var sin = Math.sin(rad) * scale;
      r[0] = Hf[0] + cos * v[0] - sin * v[1];
      r[1] = Hf[1] + sin * v[0] + cos * v[1];
    };

    this.ub = function (r, Hf, degree, scale, v) {
      var rad = ctx.ib(degree);
      var cos = Math.cos(rad) / scale;
      var sin = Math.sin(rad) / scale;
      r[0] = cos * v[0] + sin * v[1] - Hf[0] * cos - Hf[1] * sin;
      r[1] = cos * v[1] - sin * v[0] + Hf[0] * sin - Hf[1] * cos;
    };

    this.vb = function (val) {
      if (val < 0) return Math.floor(ctx.yd - 1 + val % ctx.yd);else return Math.floor(val % ctx.yd);
    };

    function colorCompToHex_(c) {
      return c < 16 ? "0" + c.toString(16) : c.toString(16);
    }

    this.ff = function (rgb) {
      return "#" + colorCompToHex_(Math.floor(rgb[0] * 255)) + colorCompToHex_(Math.floor(rgb[1] * 255)) + colorCompToHex_(Math.floor(rgb[2] * 255));
    };

    this.tf = function (vf, xf, yf, a, b, zf) {
      var ca = ctx.f(a, vf);
      var cb = ctx.f(b, vf);
      var wf = ctx.r(xf, yf);

      if (ca[0] < -wf[0] && cb[0] < -wf[0] || ca[0] > wf[0] && cb[0] > wf[0] || ca[1] < -wf[1] && cb[1] < -wf[1] || ca[1] > wf[1] && cb[1] > wf[1]) {
        return false;
      }

      if (ca[0] <= wf[0] && ca[0] >= -wf[0] && ca[1] <= wf[1] && ca[1] >= -wf[1]) return true;
      if (zf < 0.000001) return false;
      if (cb[0] <= wf[0] && cb[0] >= -wf[0] && cb[1] <= wf[1] && cb[1] >= -wf[1]) return true;
      var Af = ctx.f(b, a);
      ctx.s(Af, Af, zf);
      var Bf = [-Af[1], Af[0]];
      var Cf = Math.abs(ctx.G(Bf, cb));

      if (Math.abs(ctx.G(Bf, wf)) >= Cf) {
        var Df = [-xf[1], xf[0]];

        if (ctx.G(Df, ca) * ctx.G(Df, cb) <= 0.0) {
          return true;
        }
      } else if (Math.abs(ctx.G(Bf, [wf[0], -wf[1]])) >= Cf) {
        var _Df = [xf[1], xf[0]];

        if (ctx.G(_Df, ca) * ctx.G(_Df, cb) <= 0.0) {
          return true;
        }
      }

      return false;
    };

    this.uf = function (vf, xf, yf, a, b, zf, Ef) {
      var ca = ctx.f(a, vf);
      var cb = ctx.f(b, vf);
      var wf = ctx.r(xf, yf);
      if (zf < 0.000001) return false;

      if (ca[0] < -wf[0] && cb[0] < -wf[0] || ca[0] > wf[0] && cb[0] > wf[0] || ca[1] < -wf[1] && cb[1] < -wf[1] || ca[1] > wf[1] && cb[1] > wf[1]) {
        return false;
      }

      var Af = ctx.f(b, a);
      ctx.s(Af, Af, zf);
      var Bf = [-Af[1], Af[0]];
      var Cf = Math.abs(ctx.G(Bf, cb));

      if (Ef) {
        if (Math.abs(ctx.G(Bf, wf)) >= Cf) {
          var Df = [-xf[1], xf[0]];

          if (ctx.G(Df, ca) * ctx.G(Df, cb) <= 0.0) {
            return true;
          }
        }
      } else {
        if (Math.abs(ctx.G(Bf, [wf[0], -wf[1]])) >= Cf) {
          var _Df2 = [xf[1], xf[0]];

          if (ctx.G(_Df2, ca) * ctx.G(_Df2, cb) <= 0.0) {
            return true;
          }
        }
      }

      return false;
    };

    this.wb = function (r, x, y, z) {
      var rgbDisp = 3 * (y * ctx.yd + x);
      var view = ctx.zd[z];
      r[0] = view.getUint8(rgbDisp);
      r[1] = view.getUint8(rgbDisp + 1);
      r[2] = view.getUint8(rgbDisp + 2);
    };

    this.xb = function (r, Hf) {
      if (ctx.zd == null) {
        ctx.W(r, 128, 128, 128);
        return;
      }

      var scaledPosX = Hf[0] * ctx.yd;
      var scaledPosY = Hf[1] * ctx.yd;
      var scaledPosZ = Hf[2] * ctx.yd;
      var floorX = Math.floor(scaledPosX);
      var floorY = Math.floor(scaledPosY);
      var floorZ = Math.floor(scaledPosZ);
      var fracX = scaledPosX - floorX;
      var fracY = scaledPosY - floorY;
      var fracZ = scaledPosZ - floorZ;
      var noiseX = ctx.vb(floorX);
      var noiseX1 = ctx.vb(floorX + 1);
      var noiseY = ctx.vb(floorY);
      var noiseY1 = ctx.vb(floorY + 1);
      var noiseZ = ctx.vb(floorZ);
      var noiseZ1 = ctx.vb(floorZ + 1);
      var value000 = [],
          value001 = [],
          value010 = [],
          value011 = [],
          value100 = [],
          value101 = [],
          value110 = [],
          value111 = [];
      ctx.wb(value000, noiseX, noiseY, noiseZ);
      ctx.wb(value001, noiseX, noiseY, noiseZ1);
      ctx.wb(value010, noiseX, noiseY1, noiseZ);
      ctx.wb(value011, noiseX, noiseY1, noiseZ1);
      ctx.wb(value100, noiseX1, noiseY, noiseZ);
      ctx.wb(value101, noiseX1, noiseY, noiseZ1);
      ctx.wb(value110, noiseX1, noiseY1, noiseZ);
      ctx.wb(value111, noiseX1, noiseY1, noiseZ1);
      var value00 = [],
          value01 = [],
          value10 = [],
          value11 = [];
      ctx.ab(value00, value000, value001, fracZ);
      ctx.ab(value01, value010, value011, fracZ);
      ctx.ab(value10, value100, value101, fracZ);
      ctx.ab(value11, value110, value111, fracZ);
      var value0 = [],
          value1 = [];
      ctx.ab(value0, value00, value01, fracY);
      ctx.ab(value1, value10, value11, fracY);
      ctx.ab(r, value0, value1, fracX);
    };

    this.ImageDesc = function (image, x, y, width, height) {
      this.image = image;
      this.x = x;
      this.y = y;
      this.width = width;
      this.height = height;
    };

    this.RenderCall = function (startIndex, numIndices, renderStyleIndex) {
      this.startIndex = startIndex;
      this.numIndices = numIndices;
      this.renderStyleIndex = renderStyleIndex;
    };

    this.SubRect = function (x, y, width, height) {
      this.x = x;
      this.y = y;
      this.width = width;
      this.height = height;
    };

    this.Camera2D = function () {};

    this.Camera2D.prototype.tb = function (Hf, Nd) {
      return true;
    };

    this.Camera3D = function (
    /**/
    screenSize,
    /**/
    horizAngle) {
      this.Qd = ctx.r(
      /**/
      screenSize, 0.5);
      this.z = -(
      /**/
      screenSize[0] * 0.5) / Math.tan(ctx.ib(
      /**/
      horizAngle * 0.5));
    };

    this.Camera3D.prototype.
    /**/
    transform = function (
    /**/
    pos,
    /**/
    size) {
      if (
      /**/
      pos[2] < this.z) return false;
      var scale = -this.z / (
      /**/
      pos[2] - this.z);
      ctx.a(
      /**/
      pos, ctx.r(ctx.f(
      /**/
      pos, this.Qd), scale), this.Qd);
      ctx.q(
      /**/
      size,
      /**/
      size, scale);
      return true;
    };

    this.zd = null;
    this.yd = 0;

    this.initializeNoise = function (path, onloadcallback, onfailcallback) {
      if (!path) {
        alert("path should be defined");
      }

      if (this.zd != null) {
        onloadcallback();
        return;
      }

      if (path == null || path == undefined) path = this.defaultPath;
      var request = new XMLHttpRequest();
      request.open("GET", path + "neutrinoparticles.noise.bin", true);
      request.responseType = "arraybuffer";
      request.ctx = this;

      request.onreadystatechange = function () {
        if (request.readyState == 4) {
          if (request.status >= 200 && request.status < 300 || request.status == 304) {
            var zd = request.response;
            var ctx = request.ctx;
            var view = new DataView(zd, 0, 4);
            var planeSize = view.getUint32(0, true);
            ctx.zd = [];
            ctx.yd = planeSize;

            for (var planeIndex = 0; planeIndex < planeSize; ++planeIndex) {
              ctx.zd[planeIndex] = new DataView(zd, 4
              /*Nd*/
              + 3 * planeSize * planeSize * planeIndex);
            }

            if (onloadcallback) onloadcallback();
          } else {
            if (onfailcallback) onfailcallback();
          }
        }
      };

      request.send();
    };

    this.NoiseGenerator = function () {
      var catmullRom_ = function catmullRom_(p0, p1, p2, p3, t) {
        return 0.5 * (2.0 * p1 + (-p0 + p2) * t + (2.0 * p0 - 5.0 * p1 + 4.0 * p2 - p3) * t * t + (-p0 + 3.0 * p1 - 3.0 * p2 + p3) * (t * t * t));
      };

      var catmullRomv3_ = function catmullRomv3_(p0, p1, p2, p3, t) {
        return [catmullRom_(p0[0], p1[0], p2[0], p3[0], t), catmullRom_(p0[1], p1[1], p2[1], p3[1], t), catmullRom_(p0[2], p1[2], p2[2], p3[2], t)];
      };

      var clamp_ = function clamp_(a, from, to) {
        return a < from ? from : a > to ? to : a;
      };

      var imageSize = 64;
      var image = [];
      var tempBuffer = [];
      var tausGenerator = new ctx.taus88(120); // 120 - hardcoded starting seed

      var rand = function rand() {
        return tausGenerator.rand();
      };

      var amp = 0.7; // hardcoded amplitude of perlin zd

      var fadeDegree = 1.2; // hardcoded fade degree of each octave

      var prevStep = imageSize;
      var step, Nd, octSize, octSize2, octMaskSize, octPixels, octZ, octY; // mix step variables

      var numMixStepIterations = 0;
      var mixStepIteration = 0;

      for (var i = prevStep >>> 1; i > 0; i >>>= 1) {
        var _octSize = Math.floor(imageSize / i);

        numMixStepIterations += _octSize * _octSize;
      }

      var States = {
        INITIAL_FILL: 0,
        MIX_STEP_INIT: 1,
        MIX_STEP_PROCESS: 2,
        SCALING: 3,
        DATA_VIEWS: 4,
        FINISHED: 5
      };
      var Progress = {
        INIT: 0.01,
        MIX: 0.9,
        SCALING: 0.95,
        DATA_VIEWS: 1.0
      };
      var state = States.INITIAL_FILL;
      this.progress = 0.0;

      var initialFill = function initialFill() {
        for (var z = 0; z < imageSize; ++z) {
          var imageZ = image[z] = [];

          for (var y = 0; y < imageSize; ++y) {
            var imageZY = imageZ[y] = [];

            for (var x = 0; x < imageSize; ++x) {
              var imageZYX = imageZY[x] = [0.0, 0.0, 0.0];
            }
          }
        }

        state = States.MIX_STEP_INIT;
        this.progress = Progress.INIT;
      };

      var mixStepInit = function mixStepInit() {
        step = prevStep >>> 1;
        Nd = imageSize;
        octSize = Math.floor(Nd / step);
        octSize2 = octSize * octSize;
        octMaskSize = Math.max(octSize - 1, 1);
        octPixels = octSize * octSize * octSize;
        octZ = 0;
        octY = 0;

        for (var i = 0; i < octPixels; ++i) {
          tempBuffer[i] = []; // order is inverted to satisfy c++ obsolete order

          tempBuffer[i][2] = rand() * 2.0 - 1.0;
          tempBuffer[i][1] = rand() * 2.0 - 1.0;
          tempBuffer[i][0] = rand() * 2.0 - 1.0;
        }

        state = States.MIX_STEP_PROCESS;
      };

      var mixStepProcess = function mixStepProcess() {
        for (var octX = 0; octX < octSize; ++octX) {
          var octZ0 = octZ - 1 >>> 0 & octMaskSize;
          var octZ1 = octZ >>> 0 & octMaskSize;
          var octZ2 = octZ + 1 >>> 0 & octMaskSize;
          var octZ3 = octZ + 2 >>> 0 & octMaskSize;
          var octY0 = octY - 1 >>> 0 & octMaskSize;
          var octY1 = octY >>> 0 & octMaskSize;
          var octY2 = octY + 1 >>> 0 & octMaskSize;
          var octY3 = octY + 2 >>> 0 & octMaskSize;
          var octX0 = octX - 1 >>> 0 & octMaskSize;
          var octX1 = octX >>> 0 & octMaskSize;
          var octX2 = octX + 1 >>> 0 & octMaskSize;
          var octX3 = octX + 2 >>> 0 & octMaskSize;
          var values = //zyx
          [[[tempBuffer[octZ0 * octSize2 + octY0 * octSize + octX0], tempBuffer[octZ0 * octSize2 + octY0 * octSize + octX1], tempBuffer[octZ0 * octSize2 + octY0 * octSize + octX2], tempBuffer[octZ0 * octSize2 + octY0 * octSize + octX3]], [tempBuffer[octZ0 * octSize2 + octY1 * octSize + octX0], tempBuffer[octZ0 * octSize2 + octY1 * octSize + octX1], tempBuffer[octZ0 * octSize2 + octY1 * octSize + octX2], tempBuffer[octZ0 * octSize2 + octY1 * octSize + octX3]], [tempBuffer[octZ0 * octSize2 + octY2 * octSize + octX0], tempBuffer[octZ0 * octSize2 + octY2 * octSize + octX1], tempBuffer[octZ0 * octSize2 + octY2 * octSize + octX2], tempBuffer[octZ0 * octSize2 + octY2 * octSize + octX3]], [tempBuffer[octZ0 * octSize2 + octY3 * octSize + octX0], tempBuffer[octZ0 * octSize2 + octY3 * octSize + octX1], tempBuffer[octZ0 * octSize2 + octY3 * octSize + octX2], tempBuffer[octZ0 * octSize2 + octY3 * octSize + octX3]]], [[tempBuffer[octZ1 * octSize2 + octY0 * octSize + octX0], tempBuffer[octZ1 * octSize2 + octY0 * octSize + octX1], tempBuffer[octZ1 * octSize2 + octY0 * octSize + octX2], tempBuffer[octZ1 * octSize2 + octY0 * octSize + octX3]], [tempBuffer[octZ1 * octSize2 + octY1 * octSize + octX0], tempBuffer[octZ1 * octSize2 + octY1 * octSize + octX1], tempBuffer[octZ1 * octSize2 + octY1 * octSize + octX2], tempBuffer[octZ1 * octSize2 + octY1 * octSize + octX3]], [tempBuffer[octZ1 * octSize2 + octY2 * octSize + octX0], tempBuffer[octZ1 * octSize2 + octY2 * octSize + octX1], tempBuffer[octZ1 * octSize2 + octY2 * octSize + octX2], tempBuffer[octZ1 * octSize2 + octY2 * octSize + octX3]], [tempBuffer[octZ1 * octSize2 + octY3 * octSize + octX0], tempBuffer[octZ1 * octSize2 + octY3 * octSize + octX1], tempBuffer[octZ1 * octSize2 + octY3 * octSize + octX2], tempBuffer[octZ1 * octSize2 + octY3 * octSize + octX3]]], [[tempBuffer[octZ2 * octSize2 + octY0 * octSize + octX0], tempBuffer[octZ2 * octSize2 + octY0 * octSize + octX1], tempBuffer[octZ2 * octSize2 + octY0 * octSize + octX2], tempBuffer[octZ2 * octSize2 + octY0 * octSize + octX3]], [tempBuffer[octZ2 * octSize2 + octY1 * octSize + octX0], tempBuffer[octZ2 * octSize2 + octY1 * octSize + octX1], tempBuffer[octZ2 * octSize2 + octY1 * octSize + octX2], tempBuffer[octZ2 * octSize2 + octY1 * octSize + octX3]], [tempBuffer[octZ2 * octSize2 + octY2 * octSize + octX0], tempBuffer[octZ2 * octSize2 + octY2 * octSize + octX1], tempBuffer[octZ2 * octSize2 + octY2 * octSize + octX2], tempBuffer[octZ2 * octSize2 + octY2 * octSize + octX3]], [tempBuffer[octZ2 * octSize2 + octY3 * octSize + octX0], tempBuffer[octZ2 * octSize2 + octY3 * octSize + octX1], tempBuffer[octZ2 * octSize2 + octY3 * octSize + octX2], tempBuffer[octZ2 * octSize2 + octY3 * octSize + octX3]]], [[tempBuffer[octZ3 * octSize2 + octY0 * octSize + octX0], tempBuffer[octZ3 * octSize2 + octY0 * octSize + octX1], tempBuffer[octZ3 * octSize2 + octY0 * octSize + octX2], tempBuffer[octZ3 * octSize2 + octY0 * octSize + octX3]], [tempBuffer[octZ3 * octSize2 + octY1 * octSize + octX0], tempBuffer[octZ3 * octSize2 + octY1 * octSize + octX1], tempBuffer[octZ3 * octSize2 + octY1 * octSize + octX2], tempBuffer[octZ3 * octSize2 + octY1 * octSize + octX3]], [tempBuffer[octZ3 * octSize2 + octY2 * octSize + octX0], tempBuffer[octZ3 * octSize2 + octY2 * octSize + octX1], tempBuffer[octZ3 * octSize2 + octY2 * octSize + octX2], tempBuffer[octZ3 * octSize2 + octY2 * octSize + octX3]], [tempBuffer[octZ3 * octSize2 + octY3 * octSize + octX0], tempBuffer[octZ3 * octSize2 + octY3 * octSize + octX1], tempBuffer[octZ3 * octSize2 + octY3 * octSize + octX2], tempBuffer[octZ3 * octSize2 + octY3 * octSize + octX3]]]];

          for (var inZ = 0; inZ < step; ++inZ) {
            var interpZ = inZ / step;
            var imageZ = octZ * step + inZ;
            var valuesP = //yx
            [[catmullRomv3_(values[0][0][0], values[1][0][0], values[2][0][0], values[3][0][0], interpZ), catmullRomv3_(values[0][0][1], values[1][0][1], values[2][0][1], values[3][0][1], interpZ), catmullRomv3_(values[0][0][2], values[1][0][2], values[2][0][2], values[3][0][2], interpZ), catmullRomv3_(values[0][0][3], values[1][0][3], values[2][0][3], values[3][0][3], interpZ)], [catmullRomv3_(values[0][1][0], values[1][1][0], values[2][1][0], values[3][1][0], interpZ), catmullRomv3_(values[0][1][1], values[1][1][1], values[2][1][1], values[3][1][1], interpZ), catmullRomv3_(values[0][1][2], values[1][1][2], values[2][1][2], values[3][1][2], interpZ), catmullRomv3_(values[0][1][3], values[1][1][3], values[2][1][3], values[3][1][3], interpZ)], [catmullRomv3_(values[0][2][0], values[1][2][0], values[2][2][0], values[3][2][0], interpZ), catmullRomv3_(values[0][2][1], values[1][2][1], values[2][2][1], values[3][2][1], interpZ), catmullRomv3_(values[0][2][2], values[1][2][2], values[2][2][2], values[3][2][2], interpZ), catmullRomv3_(values[0][2][3], values[1][2][3], values[2][2][3], values[3][2][3], interpZ)], [catmullRomv3_(values[0][2][0], values[1][3][0], values[2][3][0], values[3][3][0], interpZ), catmullRomv3_(values[0][2][1], values[1][3][1], values[2][3][1], values[3][3][1], interpZ), catmullRomv3_(values[0][2][2], values[1][3][2], values[2][3][2], values[3][3][2], interpZ), catmullRomv3_(values[0][2][3], values[1][3][3], values[2][3][3], values[3][3][3], interpZ)]];

            for (var inY = 0; inY < step; ++inY) {
              var interpY = inY / step;
              var imageY = octY * step + inY;
              var value0 = catmullRomv3_(valuesP[0][0], valuesP[1][0], valuesP[2][0], valuesP[3][0], interpY);
              var value1 = catmullRomv3_(valuesP[0][1], valuesP[1][1], valuesP[2][1], valuesP[3][1], interpY);
              var value2 = catmullRomv3_(valuesP[0][2], valuesP[1][2], valuesP[2][2], valuesP[3][2], interpY);
              var value3 = catmullRomv3_(valuesP[0][3], valuesP[1][3], valuesP[2][3], valuesP[3][3], interpY);

              for (var inX = 0; inX < step; ++inX) {
                var interpX = inX / step;
                var imageX = octX * step + inX;
                var octResult = catmullRomv3_(value0, value1, value2, value3, interpX);
                var result = ctx.d(ctx.v(octResult, amp), image[imageZ][imageY][imageX]);
                var clampedResult = [clamp_(result[0], -1.0, 1.0), clamp_(result[1], -1.0, 1.0), clamp_(result[2], -1.0, 1.0)];
                image[imageZ][imageY][imageX] = clampedResult;
              }
            }
          }
        }

        mixStepIteration++;
        this.progress = Progress.INIT + (Progress.MIX - Progress.INIT) * (mixStepIteration / numMixStepIterations);
        octY++;

        if (octY >= octSize) {
          octY = 0;
          octZ++;

          if (octZ >= octSize) {
            octZ = 0;
            prevStep = step;
            amp = Math.pow(amp, fadeDegree);

            if (prevStep <= 1) {
              state = States.SCALING;
              this.progress = Progress.MIX;
            } else {
              state = States.MIX_STEP_INIT;
            }
          }
        }
      }; // hardcoded scaling of the image to make it more symethric


      var scaling = function scaling() {
        var low = [-1.0, -1.0, -1.0];
        var high = [0.5, 0.7, 1.0];

        for (var z = 0; z < imageSize; ++z) {
          var imageZ = image[z];

          for (var y = 0; y < imageSize; ++y) {
            var imageZY = imageZ[y];

            for (var x = 0; x < imageSize; ++x) {
              var imageZYX = imageZY[x];
              imageZYX[0] = ctx.X(low[0], high[0], imageZYX[0] * 0.5 + 0.5);
              imageZYX[1] = ctx.X(low[1], high[1], imageZYX[1] * 0.5 + 0.5);
              imageZYX[2] = ctx.X(low[2], high[2], imageZYX[2] * 0.5 + 0.5);
            }
          }
        }

        state = States.DATA_VIEWS;
        this.progress = Progress.SCALING;
      }; // filling zd DataViews


      var dataViews = function dataViews() {
        ctx.yd = imageSize;
        ctx.zd = [];

        for (var z = 0; z < imageSize; ++z) {
          var imageZ = image[z];
          var plane = new ArrayBuffer(imageSize * imageSize * 3);
          var view = new DataView(plane);

          for (var y = 0; y < imageSize; ++y) {
            var imageZY = imageZ[y];

            for (var x = 0; x < imageSize; ++x) {
              var imageZYX = imageZY[x];
              var rgbOffset = (y * imageSize + x) * 3;
              view.setUint8(rgbOffset + 0, Math.floor(clamp_(256.0 * (imageZYX[0] * 0.5 + 0.5) - 0.5, 0.0, 255.0)));
              view.setUint8(rgbOffset + 1, Math.floor(clamp_(256.0 * (imageZYX[1] * 0.5 + 0.5) - 0.5, 0.0, 255.0)));
              view.setUint8(rgbOffset + 2, Math.floor(clamp_(256.0 * (imageZYX[2] * 0.5 + 0.5) - 0.5, 0.0, 255.0)));
            }
          }

          ctx.zd[z] = view;
        }

        state = States.FINISHED;
        this.progress = Progress.DATA_VIEWS;
      };

      this.step = function () {
        switch (state) {
          case States.INITIAL_FILL:
            initialFill.call(this);
            break;

          case States.MIX_STEP_INIT:
            mixStepInit.call(this);
            break;

          case States.MIX_STEP_PROCESS:
            mixStepProcess.call(this);
            break;

          case States.SCALING:
            scaling.call(this);
            break;

          case States.DATA_VIEWS:
            dataViews.call(this);
            break;
        }

        return state == States.FINISHED;
      };
    };

    this.cf = document.createElement('canvas');
    this.cf.width = 0;
    this.cf.height = 0;
    this.bf = this.cf.getContext('2d');

    this.af = function (minWidth, minHeight) {
      if (this.cf.width < minWidth || this.cf.height < minHeight) {
        this.cf.width = minWidth;
        this.cf.height = minHeight;
        this.bf = this.cf.getContext('2d');
      }
    };

    this.effects = [];

    this.loadEffect = function (effectFilePath, onSuccessFunc, onFailFunc) {
      if (this.effects[effectFilePath] != undefined) {
        var effectModel = this.effects[effectFilePath];

        if (effectModel instanceof Array) {
          effectModel[effectModel.length] = [onSuccessFunc, onFailFunc];
          return;
        }

        onSuccessFunc(effectModel);
        return;
      }

      this.effects[effectFilePath] = [[onSuccessFunc, onFailFunc]];
      var request = new XMLHttpRequest();
      request.open("GET", effectFilePath, true);
      request.responseType = "text";
      request.ctx = this;

      request.onreadystatechange = function () {
        if (request.readyState == 4) {
          var callbacks = this.ctx.effects[effectFilePath];

          if (request.status >= 200 && request.status < 300 || request.status == 304) {
            var evalText = "(function(ctx) {\n" + request.responseText + "\nreturn new NeutrinoEffect(ctx);\n})(this.ctx);";
            var effectModel = eval(evalText);
            this.ctx.effects[effectFilePath] = effectModel;
            callbacks.forEach(function (callback) {
              callback[0](effectModel);
            });
          } else {
            callbacks.forEach(function (callback) {
              callback[1]();
            });
          }
        }
      };

      request.send();
    };

    this.removeEffect = function (effectFilePath) {
      delete this.effects[effectFilePath];
    };
  }

  exports.Context = Context;
  Object.defineProperty(exports, '__esModule', {
    value: true
  });
}); //# sourceMappingURL=neutrinoparticles.umd.js.map

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBhY2thZ2VzXFxuZXV0cmlub3BhcnRpY2xlc1xccnVudGltZVxcbmV1dHJpbm9wYXJ0aWNsZXMuanNcXG5ldXRyaW5vcGFydGljbGVzLnVtZC5qcyJdLCJuYW1lcyI6WyJnbG9iYWwiLCJmYWN0b3J5IiwiZXhwb3J0cyIsIm1vZHVsZSIsImRlZmluZSIsImFtZCIsInNlbGYiLCJOZXV0cmlubyIsIkNvbnRleHQiLCJjdHgiLCJlcXVhbHYzXyIsImEiLCJiIiwiZXF1YWxxXyIsInIiLCJ5IiwicyIsInoiLCJjIiwiZCIsIkMiLCJEIiwiYWRkcSIsImFkZHFfIiwiZSIsImYiLCJBIiwiQiIsIm5mIiwib2YiLCJnIiwiaCIsIkUiLCJGIiwicmYiLCJzZiIsImkiLCJqIiwiayIsImwiLCJtIiwibiIsIm8iLCJwIiwiSCIsImRvdHFfIiwicSIsInQiLCJ1IiwidiIsInciLCJ4IiwiRyIsIkkiLCJheCIsImF5IiwiYXoiLCJieCIsImJ5IiwiYnoiLCJKIiwiSyIsIk1hdGgiLCJzcXJ0IiwiTCIsIk0iLCJOIiwiTyIsIlAiLCJRIiwiUiIsIlMiLCJUIiwiVSIsIlYiLCJXIiwiWCIsIlkiLCJaIiwiYWIiLCJiYiIsInNsZXJwcSIsImNvc1RoZXRhIiwibmVncSIsIk51bWJlciIsIkVQU0lMT04iLCJNZCIsImFjb3NfIiwibXVscXNjYWxhciIsIm11bHFzY2FsYXJfIiwic2luXyIsInNsZXJwcV8iLCJhY29zIiwic2luIiwiY29zXyIsImNvcyIsInRhdXM4OCIsInNlZWQiLCJ2YWx1ZTAiLCJ2YWx1ZTEiLCJ2YWx1ZTIiLCJzMCIsInJhbmQiLCJlbmdpbmUiLCJjYiIsInJhZGl1cyIsInJhbmR2MmdlbiIsInJhbmRvbSIsImdlbiIsIlBJIiwiZGIiLCJyYW5kdjNnZW4iLCJ0aGV0YSIsInNxcnRJbnZaMiIsInliIiwiTmQiLCJkaXNweCIsImRpc3B5IiwiZWIiLCJmYiIsImdiIiwiaGIiLCJuZWdxXyIsImliIiwiZGVncmVlcyIsImpiIiwicmFkaWFucyIsIkFlIiwidmFsdWUiLCJvYiIsIngyIiwieTIiLCJ6MiIsInh5IiwieHoiLCJ5eiIsInd6Iiwid3kiLCJ3eCIsInBiIiwidHIiLCJheGVzMnF1YXQiLCJxYiIsImhhIiwiYXhpc2FuZ2xlMnF1YXQiLCJheGlzYW5nbGUycXVhdF8iLCJyYiIsInF4IiwicXkiLCJxeiIsInF3IiwiaXgiLCJpeSIsIml6IiwiaXciLCJzYiIsInFheCIsInFheSIsInFheiIsInFhdyIsInFieCIsInFieSIsInFieiIsInFidyIsInRiIiwiSGYiLCJkZWdyZWUiLCJzY2FsZSIsInJhZCIsInViIiwidmIiLCJ2YWwiLCJmbG9vciIsInlkIiwiY29sb3JDb21wVG9IZXhfIiwidG9TdHJpbmciLCJmZiIsInJnYiIsInRmIiwidmYiLCJ4ZiIsInlmIiwiemYiLCJjYSIsIndmIiwiQWYiLCJCZiIsIkNmIiwiYWJzIiwiRGYiLCJfRGYiLCJ1ZiIsIkVmIiwiX0RmMiIsIndiIiwicmdiRGlzcCIsInZpZXciLCJ6ZCIsImdldFVpbnQ4IiwieGIiLCJzY2FsZWRQb3NYIiwic2NhbGVkUG9zWSIsInNjYWxlZFBvc1oiLCJmbG9vclgiLCJmbG9vclkiLCJmbG9vcloiLCJmcmFjWCIsImZyYWNZIiwiZnJhY1oiLCJub2lzZVgiLCJub2lzZVgxIiwibm9pc2VZIiwibm9pc2VZMSIsIm5vaXNlWiIsIm5vaXNlWjEiLCJ2YWx1ZTAwMCIsInZhbHVlMDAxIiwidmFsdWUwMTAiLCJ2YWx1ZTAxMSIsInZhbHVlMTAwIiwidmFsdWUxMDEiLCJ2YWx1ZTExMCIsInZhbHVlMTExIiwidmFsdWUwMCIsInZhbHVlMDEiLCJ2YWx1ZTEwIiwidmFsdWUxMSIsIkltYWdlRGVzYyIsImltYWdlIiwid2lkdGgiLCJoZWlnaHQiLCJSZW5kZXJDYWxsIiwic3RhcnRJbmRleCIsIm51bUluZGljZXMiLCJyZW5kZXJTdHlsZUluZGV4IiwiU3ViUmVjdCIsIkNhbWVyYTJEIiwicHJvdG90eXBlIiwiQ2FtZXJhM0QiLCJzY3JlZW5TaXplIiwiaG9yaXpBbmdsZSIsIlFkIiwidGFuIiwidHJhbnNmb3JtIiwicG9zIiwic2l6ZSIsImluaXRpYWxpemVOb2lzZSIsInBhdGgiLCJvbmxvYWRjYWxsYmFjayIsIm9uZmFpbGNhbGxiYWNrIiwiYWxlcnQiLCJ1bmRlZmluZWQiLCJkZWZhdWx0UGF0aCIsInJlcXVlc3QiLCJYTUxIdHRwUmVxdWVzdCIsIm9wZW4iLCJyZXNwb25zZVR5cGUiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJyZWFkeVN0YXRlIiwic3RhdHVzIiwicmVzcG9uc2UiLCJEYXRhVmlldyIsInBsYW5lU2l6ZSIsImdldFVpbnQzMiIsInBsYW5lSW5kZXgiLCJzZW5kIiwiTm9pc2VHZW5lcmF0b3IiLCJjYXRtdWxsUm9tXyIsInAwIiwicDEiLCJwMiIsInAzIiwiY2F0bXVsbFJvbXYzXyIsImNsYW1wXyIsImZyb20iLCJ0byIsImltYWdlU2l6ZSIsInRlbXBCdWZmZXIiLCJ0YXVzR2VuZXJhdG9yIiwiYW1wIiwiZmFkZURlZ3JlZSIsInByZXZTdGVwIiwic3RlcCIsIm9jdFNpemUiLCJvY3RTaXplMiIsIm9jdE1hc2tTaXplIiwib2N0UGl4ZWxzIiwib2N0WiIsIm9jdFkiLCJudW1NaXhTdGVwSXRlcmF0aW9ucyIsIm1peFN0ZXBJdGVyYXRpb24iLCJfb2N0U2l6ZSIsIlN0YXRlcyIsIklOSVRJQUxfRklMTCIsIk1JWF9TVEVQX0lOSVQiLCJNSVhfU1RFUF9QUk9DRVNTIiwiU0NBTElORyIsIkRBVEFfVklFV1MiLCJGSU5JU0hFRCIsIlByb2dyZXNzIiwiSU5JVCIsIk1JWCIsInN0YXRlIiwicHJvZ3Jlc3MiLCJpbml0aWFsRmlsbCIsImltYWdlWiIsImltYWdlWlkiLCJpbWFnZVpZWCIsIm1peFN0ZXBJbml0IiwibWF4IiwibWl4U3RlcFByb2Nlc3MiLCJvY3RYIiwib2N0WjAiLCJvY3RaMSIsIm9jdFoyIiwib2N0WjMiLCJvY3RZMCIsIm9jdFkxIiwib2N0WTIiLCJvY3RZMyIsIm9jdFgwIiwib2N0WDEiLCJvY3RYMiIsIm9jdFgzIiwidmFsdWVzIiwiaW5aIiwiaW50ZXJwWiIsInZhbHVlc1AiLCJpblkiLCJpbnRlcnBZIiwiaW1hZ2VZIiwidmFsdWUzIiwiaW5YIiwiaW50ZXJwWCIsImltYWdlWCIsIm9jdFJlc3VsdCIsInJlc3VsdCIsImNsYW1wZWRSZXN1bHQiLCJwb3ciLCJzY2FsaW5nIiwibG93IiwiaGlnaCIsImRhdGFWaWV3cyIsInBsYW5lIiwiQXJyYXlCdWZmZXIiLCJyZ2JPZmZzZXQiLCJzZXRVaW50OCIsImNhbGwiLCJjZiIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsImJmIiwiZ2V0Q29udGV4dCIsImFmIiwibWluV2lkdGgiLCJtaW5IZWlnaHQiLCJlZmZlY3RzIiwibG9hZEVmZmVjdCIsImVmZmVjdEZpbGVQYXRoIiwib25TdWNjZXNzRnVuYyIsIm9uRmFpbEZ1bmMiLCJlZmZlY3RNb2RlbCIsIkFycmF5IiwibGVuZ3RoIiwiY2FsbGJhY2tzIiwiZXZhbFRleHQiLCJyZXNwb25zZVRleHQiLCJldmFsIiwiZm9yRWFjaCIsImNhbGxiYWNrIiwicmVtb3ZlRWZmZWN0IiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUMsV0FBVUEsTUFBVixFQUFrQkMsT0FBbEIsRUFBMkI7QUFDM0IsU0FBT0MsT0FBUCxLQUFtQixRQUFuQixJQUErQixPQUFPQyxNQUFQLEtBQWtCLFdBQWpELEdBQStERixPQUFPLENBQUNDLE9BQUQsQ0FBdEUsR0FDQSxPQUFPRSxNQUFQLEtBQWtCLFVBQWxCLElBQWdDQSxNQUFNLENBQUNDLEdBQXZDLEdBQTZDRCxNQUFNLENBQUMsQ0FBQyxTQUFELENBQUQsRUFBY0gsT0FBZCxDQUFuRCxJQUNDRCxNQUFNLEdBQUdBLE1BQU0sSUFBSU0sSUFBbkIsRUFBeUJMLE9BQU8sQ0FBQ0QsTUFBTSxDQUFDTyxRQUFQLEdBQWtCLEVBQW5CLENBRGpDLENBREE7QUFHQSxDQUpBLFVBSVEsVUFBVUwsT0FBVixFQUFtQjtBQUFFOztBQUU3QixXQUFTTSxPQUFULEdBQW1CO0FBQ2pCLFFB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QixJQUF5Qk4sT0FBTyxDQUFDTSxNQUFSLEdBQWlCLEdBQTFDLElBQWlETixPQUFPLENBQUNNLE1BQVIsSUFBa0IsR0FBdkUsRUFBNEU7QUFFMUUsZ0JBQUkwRyxRQUFRLEdBQUcsdUJBQ2ZoSCxPQUFPLENBQUNpSCxZQURPLEdBRWYsa0RBRkE7QUFHQSxnQkFBSUwsV0FBVyxHQUFHTSxJQUFJLENBQUNGLFFBQUQsQ0FBdEI7QUFDQSxpQkFBS3BXLEdBQUwsQ0FBUzJWLE9BQVQsQ0FBaUJFLGNBQWpCLElBQW1DRyxXQUFuQztBQUVBRyxZQUFBQSxTQUFTLENBQUNJLE9BQVYsQ0FBa0IsVUFBVUMsUUFBVixFQUFvQjtBQUNwQ0EsY0FBQUEsUUFBUSxDQUFDLENBQUQsQ0FBUixDQUFZUixXQUFaO0FBQ0QsYUFGRDtBQUlELFdBWkQsTUFZTztBQUNMRyxZQUFBQSxTQUFTLENBQUNJLE9BQVYsQ0FBa0IsVUFBVUMsUUFBVixFQUFvQjtBQUNwQ0EsY0FBQUEsUUFBUSxDQUFDLENBQUQsQ0FBUjtBQUNELGFBRkQ7QUFHRDtBQUNGO0FBQ0YsT0F0QkQ7O0FBd0JBcEgsTUFBQUEsT0FBTyxDQUFDWSxJQUFSO0FBQ0QsS0E5Q0Q7O0FBZ0RBLFNBQUt5RyxZQUFMLEdBQW9CLFVBQVVaLGNBQVYsRUFBMEI7QUFDNUMsYUFBTyxLQUFLRixPQUFMLENBQWFFLGNBQWIsQ0FBUDtBQUNELEtBRkQ7QUFHRDs7QUFFRHBXLEVBQUFBLE9BQU8sQ0FBQ00sT0FBUixHQUFrQkEsT0FBbEI7QUFFQTJXLEVBQUFBLE1BQU0sQ0FBQ0MsY0FBUCxDQUFzQmxYLE9BQXRCLEVBQStCLFlBQS9CLEVBQTZDO0FBQUU4SCxJQUFBQSxLQUFLLEVBQUU7QUFBVCxHQUE3QztBQUVBLENBN3lDQSxDQUFELEVBOHlDQSIsInNvdXJjZVJvb3QiOiIvIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcclxuXHR0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgPyBmYWN0b3J5KGV4cG9ydHMpIDpcclxuXHR0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWydleHBvcnRzJ10sIGZhY3RvcnkpIDpcclxuXHQoZ2xvYmFsID0gZ2xvYmFsIHx8IHNlbGYsIGZhY3RvcnkoZ2xvYmFsLk5ldXRyaW5vID0ge30pKTtcclxufSh0aGlzLCAoZnVuY3Rpb24gKGV4cG9ydHMpIHsgJ3VzZSBzdHJpY3QnO1xyXG5cclxuXHRmdW5jdGlvbiBDb250ZXh0KCkge1xyXG5cdCAgdmFyIGN0eCA9IHRoaXM7XHJcblxyXG5cdCAgdGhpcy5lcXVhbHYzXyA9IGZ1bmN0aW9uIChhLCBiKSB7XHJcblx0ICAgIHJldHVybiBhWzBdID09IGJbMF0gJiYgYVsxXSA9PSBiWzFdICYmIGFbMl0gPT0gYlsyXTtcclxuXHQgIH07XHJcblxyXG5cdCAgdGhpcy5lcXVhbHFfID0gZnVuY3Rpb24gKGEsIGIpIHtcclxuXHQgICAgcmV0dXJuIGFbMF0gPT0gYlswXSAmJiBhWzFdID09IGJbMV0gJiYgYVsyXSA9PSBiWzJdICYmIGFbM10gPT0gYlszXTtcclxuXHQgIH07XHJcblxyXG5cdCAgdGhpcy5hID0gZnVuY3Rpb24gKHIsIGEsIGIpIHtcclxuXHQgICAgclswXSA9IGFbMF0gKyBiWzBdO1xyXG5cdCAgICByWzFdID0gYVsxXSArIGJbMV07XHJcblx0ICB9O1xyXG5cclxuXHQgIHRoaXMuYiA9IGZ1bmN0aW9uIChhLCBiKSB7XHJcblx0ICAgIHJldHVybiBbYVswXSArIGJbMF0sIGFbMV0gKyBiWzFdXTtcclxuXHQgIH07XHJcblxyXG5cdCAgdGhpcy55ID0gZnVuY3Rpb24gKHIsIGEsIHMpIHtcclxuXHQgICAgclswXSA9IGFbMF0gKyBzO1xyXG5cdCAgICByWzFdID0gYVsxXSArIHM7XHJcblx0ICB9O1xyXG5cclxuXHQgIHRoaXMueiA9IGZ1bmN0aW9uIChhLCBzKSB7XHJcblx0ICAgIHJldHVybiBbYVswXSArIHMsIGFbMV0gKyBzXTtcclxuXHQgIH07XHJcblxyXG5cdCAgdGhpcy5jID0gZnVuY3Rpb24gKHIsIGEsIGIpIHtcclxuXHQgICAgclswXSA9IGFbMF0gKyBiWzBdO1xyXG5cdCAgICByWzFdID0gYVsxXSArIGJbMV07XHJcblx0ICAgIHJbMl0gPSBhWzJdICsgYlsyXTtcclxuXHQgIH07XHJcblxyXG5cdCAgdGhpcy5kID0gZnVuY3Rpb24gKGEsIGIpIHtcclxuXHQgICAgcmV0dXJuIFthWzBdICsgYlswXSwgYVsxXSArIGJbMV0sIGFbMl0gKyBiWzJdXTtcclxuXHQgIH07XHJcblxyXG5cdCAgdGhpcy5DID0gZnVuY3Rpb24gKHIsIGEsIHMpIHtcclxuXHQgICAgclswXSA9IGFbMF0gKyBzO1xyXG5cdCAgICByWzFdID0gYVsxXSArIHM7XHJcblx0ICAgIHJbMl0gPSBhWzJdICsgcztcclxuXHQgIH07XHJcblxyXG5cdCAgdGhpcy5EID0gZnVuY3Rpb24gKGEsIHMpIHtcclxuXHQgICAgcmV0dXJuIFthWzBdICsgcywgYVsxXSArIHMsIGFbMl0gKyBzXTtcclxuXHQgIH07XHJcblxyXG5cdCAgdGhpcy5hZGRxID0gZnVuY3Rpb24gKHIsIGEsIGIpIHtcclxuXHQgICAgclswXSA9IGFbMF0gKyBiWzBdO1xyXG5cdCAgICByWzFdID0gYVsxXSArIGJbMV07XHJcblx0ICAgIHJbMl0gPSBhWzJdICsgYlsyXTtcclxuXHQgICAgclszXSA9IGFbM10gKyBiWzNdO1xyXG5cdCAgfTtcclxuXHJcblx0ICB0aGlzLmFkZHFfID0gZnVuY3Rpb24gKGEsIGIpIHtcclxuXHQgICAgcmV0dXJuIFthWzBdICsgYlswXSwgYVsxXSArIGJbMV0sIGFbMl0gKyBiWzJdLCBhWzNdICsgYlszXV07XHJcblx0ICB9O1xyXG5cclxuXHQgIHRoaXMuZSA9IGZ1bmN0aW9uIChyLCBhLCBiKSB7XHJcblx0ICAgIHJbMF0gPSBhWzBdIC0gYlswXTtcclxuXHQgICAgclsxXSA9IGFbMV0gLSBiWzFdO1xyXG5cdCAgfTtcclxuXHJcblx0ICB0aGlzLmYgPSBmdW5jdGlvbiAoYSwgYikge1xyXG5cdCAgICByZXR1cm4gW2FbMF0gLSBiWzBdLCBhWzFdIC0gYlsxXV07XHJcblx0ICB9O1xyXG5cclxuXHQgIHRoaXMuQSA9IGZ1bmN0aW9uIChyLCBhLCBzKSB7XHJcblx0ICAgIHJbMF0gPSBhWzBdIC0gcztcclxuXHQgICAgclsxXSA9IGFbMV0gLSBzO1xyXG5cdCAgfTtcclxuXHJcblx0ICB0aGlzLkIgPSBmdW5jdGlvbiAoYSwgcykge1xyXG5cdCAgICByZXR1cm4gW2FbMF0gLSBzLCBhWzFdIC0gc107XHJcblx0ICB9O1xyXG5cclxuXHQgIHRoaXMubmYgPSBmdW5jdGlvbiAociwgcywgYSkge1xyXG5cdCAgICByWzBdID0gcyAtIGFbMF07XHJcblx0ICAgIHJbMV0gPSBzIC0gYVsxXTtcclxuXHQgIH07XHJcblxyXG5cdCAgdGhpcy5vZiA9IGZ1bmN0aW9uIChzLCBhKSB7XHJcblx0ICAgIHJldHVybiBbcyAtIGFbMF0sIHMgLSBhWzFdXTtcclxuXHQgIH07XHJcblxyXG5cdCAgdGhpcy5nID0gZnVuY3Rpb24gKHIsIGEsIGIpIHtcclxuXHQgICAgclswXSA9IGFbMF0gLSBiWzBdO1xyXG5cdCAgICByWzFdID0gYVsxXSAtIGJbMV07XHJcblx0ICAgIHJbMl0gPSBhWzJdIC0gYlsyXTtcclxuXHQgIH07XHJcblxyXG5cdCAgdGhpcy5oID0gZnVuY3Rpb24gKGEsIGIpIHtcclxuXHQgICAgcmV0dXJuIFthWzBdIC0gYlswXSwgYVsxXSAtIGJbMV0sIGFbMl0gLSBiWzJdXTtcclxuXHQgIH07XHJcblxyXG5cdCAgdGhpcy5FID0gZnVuY3Rpb24gKHIsIGEsIHMpIHtcclxuXHQgICAgclswXSA9IGFbMF0gLSBzO1xyXG5cdCAgICByWzFdID0gYVsxXSAtIHM7XHJcblx0ICAgIHJbMl0gPSBhWzJdIC0gcztcclxuXHQgIH07XHJcblxyXG5cdCAgdGhpcy5GID0gZnVuY3Rpb24gKGEsIHMpIHtcclxuXHQgICAgcmV0dXJuIFthWzBdIC0gcywgYVsxXSAtIHMsIGFbMl0gLSBzXTtcclxuXHQgIH07XHJcblxyXG5cdCAgdGhpcy5yZiA9IGZ1bmN0aW9uIChyLCBzLCBhKSB7XHJcblx0ICAgIHJbMF0gPSBzIC0gYVswXTtcclxuXHQgICAgclsxXSA9IHMgLSBhWzFdO1xyXG5cdCAgICByWzJdID0gcyAtIGFbMl07XHJcblx0ICB9O1xyXG5cclxuXHQgIHRoaXMuc2YgPSBmdW5jdGlvbiAocywgYSkge1xyXG5cdCAgICByZXR1cm4gW3MgLSBhWzBdLCBzIC0gYVsxXSwgcyAtIGFbMl1dO1xyXG5cdCAgfTtcclxuXHJcblx0ICB0aGlzLmkgPSBmdW5jdGlvbiAociwgYSwgYikge1xyXG5cdCAgICByWzBdID0gYVswXSAqIGJbMF07XHJcblx0ICAgIHJbMV0gPSBhWzFdICogYlsxXTtcclxuXHQgIH07XHJcblxyXG5cdCAgdGhpcy5qID0gZnVuY3Rpb24gKGEsIGIpIHtcclxuXHQgICAgcmV0dXJuIFthWzBdICogYlswXSwgYVsxXSAqIGJbMV1dO1xyXG5cdCAgfTtcclxuXHJcblx0ICB0aGlzLmsgPSBmdW5jdGlvbiAociwgYSwgYikge1xyXG5cdCAgICByWzBdID0gYVswXSAqIGJbMF07XHJcblx0ICAgIHJbMV0gPSBhWzFdICogYlsxXTtcclxuXHQgICAgclsyXSA9IGFbMl0gKiBiWzJdO1xyXG5cdCAgfTtcclxuXHJcblx0ICB0aGlzLmwgPSBmdW5jdGlvbiAoYSwgYikge1xyXG5cdCAgICByZXR1cm4gW2FbMF0gKiBiWzBdLCBhWzFdICogYlsxXSwgYVsyXSAqIGJbMl1dO1xyXG5cdCAgfTtcclxuXHJcblx0ICB0aGlzLm0gPSBmdW5jdGlvbiAociwgYSwgYikge1xyXG5cdCAgICByWzBdID0gYVswXSAvIGJbMF07XHJcblx0ICAgIHJbMV0gPSBhWzFdIC8gYlsxXTtcclxuXHQgIH07XHJcblxyXG5cdCAgdGhpcy5uID0gZnVuY3Rpb24gKGEsIGIpIHtcclxuXHQgICAgcmV0dXJuIFthWzBdIC8gYlswXSwgYVsxXSAvIGJbMV1dO1xyXG5cdCAgfTtcclxuXHJcblx0ICB0aGlzLm8gPSBmdW5jdGlvbiAociwgYSwgYikge1xyXG5cdCAgICByWzBdID0gYVswXSAvIGJbMF07XHJcblx0ICAgIHJbMV0gPSBhWzFdIC8gYlsxXTtcclxuXHQgICAgclsyXSA9IGFbMl0gLyBiWzJdO1xyXG5cdCAgfTtcclxuXHJcblx0ICB0aGlzLnAgPSBmdW5jdGlvbiAoYSwgYikge1xyXG5cdCAgICByZXR1cm4gW2FbMF0gLyBiWzBdLCBhWzFdIC8gYlsxXSwgYVsyXSAvIGJbMl1dO1xyXG5cdCAgfTtcclxuXHJcblx0ICB0aGlzLkggPSBmdW5jdGlvbiAoYSwgYikge1xyXG5cdCAgICByZXR1cm4gYVswXSAqIGJbMF0gKyBhWzFdICogYlsxXSArIGFbMl0gKiBiWzJdO1xyXG5cdCAgfTtcclxuXHJcblx0ICB0aGlzLmRvdHFfID0gZnVuY3Rpb24gKGEsIGIpIHtcclxuXHQgICAgcmV0dXJuIGFbMF0gKiBiWzBdICsgYVsxXSAqIGJbMV0gKyBhWzJdICogYlsyXSArIGFbM10gKiBiWzNdO1xyXG5cdCAgfTtcclxuXHJcblx0ICB0aGlzLnEgPSBmdW5jdGlvbiAociwgYSwgcykge1xyXG5cdCAgICByWzBdID0gYVswXSAqIHM7XHJcblx0ICAgIHJbMV0gPSBhWzFdICogcztcclxuXHQgIH07XHJcblxyXG5cdCAgdGhpcy5yID0gZnVuY3Rpb24gKGEsIHMpIHtcclxuXHQgICAgcmV0dXJuIFthWzBdICogcywgYVsxXSAqIHNdO1xyXG5cdCAgfTtcclxuXHJcblx0ICB0aGlzLnMgPSBmdW5jdGlvbiAociwgYSwgcykge1xyXG5cdCAgICByWzBdID0gYVswXSAvIHM7XHJcblx0ICAgIHJbMV0gPSBhWzFdIC8gcztcclxuXHQgIH07XHJcblxyXG5cdCAgdGhpcy50ID0gZnVuY3Rpb24gKGEsIHMpIHtcclxuXHQgICAgcmV0dXJuIFthWzBdIC8gcywgYVsxXSAvIHNdO1xyXG5cdCAgfTtcclxuXHJcblx0ICB0aGlzLnUgPSBmdW5jdGlvbiAociwgYSwgcykge1xyXG5cdCAgICByWzBdID0gYVswXSAqIHM7XHJcblx0ICAgIHJbMV0gPSBhWzFdICogcztcclxuXHQgICAgclsyXSA9IGFbMl0gKiBzO1xyXG5cdCAgfTtcclxuXHJcblx0ICB0aGlzLnYgPSBmdW5jdGlvbiAoYSwgcykge1xyXG5cdCAgICByZXR1cm4gW2FbMF0gKiBzLCBhWzFdICogcywgYVsyXSAqIHNdO1xyXG5cdCAgfTtcclxuXHJcblx0ICB0aGlzLncgPSBmdW5jdGlvbiAociwgYSwgcykge1xyXG5cdCAgICByWzBdID0gYVswXSAvIHM7XHJcblx0ICAgIHJbMV0gPSBhWzFdIC8gcztcclxuXHQgICAgclsyXSA9IGFbMl0gLyBzO1xyXG5cdCAgfTtcclxuXHJcblx0ICB0aGlzLnggPSBmdW5jdGlvbiAoYSwgcykge1xyXG5cdCAgICByZXR1cm4gW2FbMF0gLyBzLCBhWzFdIC8gcywgYVsyXSAvIHNdO1xyXG5cdCAgfTtcclxuXHJcblx0ICB0aGlzLnkgPSBmdW5jdGlvbiAociwgYSwgcykge1xyXG5cdCAgICByWzBdID0gYVswXSArIHM7XHJcblx0ICAgIHJbMV0gPSBhWzFdICsgcztcclxuXHQgIH07XHJcblxyXG5cdCAgdGhpcy56ID0gZnVuY3Rpb24gKGEsIHMpIHtcclxuXHQgICAgcmV0dXJuIFthWzBdICsgcywgYVsxXSArIHNdO1xyXG5cdCAgfTtcclxuXHJcblx0ICB0aGlzLkEgPSBmdW5jdGlvbiAociwgYSwgcykge1xyXG5cdCAgICByWzBdID0gYVswXSAtIHM7XHJcblx0ICAgIHJbMV0gPSBhWzFdIC0gcztcclxuXHQgIH07XHJcblxyXG5cdCAgdGhpcy5CID0gZnVuY3Rpb24gKGEsIHMpIHtcclxuXHQgICAgcmV0dXJuIFthWzBdIC0gcywgYVsxXSAtIHNdO1xyXG5cdCAgfTtcclxuXHJcblx0ICB0aGlzLkcgPSBmdW5jdGlvbiAoYSwgYikge1xyXG5cdCAgICByZXR1cm4gYVswXSAqIGJbMF0gKyBhWzFdICogYlsxXTtcclxuXHQgIH07XHJcblxyXG5cdCAgdGhpcy5IID0gZnVuY3Rpb24gKGEsIGIpIHtcclxuXHQgICAgcmV0dXJuIGFbMF0gKiBiWzBdICsgYVsxXSAqIGJbMV0gKyBhWzJdICogYlsyXTtcclxuXHQgIH07XHJcblxyXG5cdCAgdGhpcy5JID0gZnVuY3Rpb24gKHIsIGEsIGIpIHtcclxuXHQgICAgdmFyIGF4ID0gYVswXSxheSA9IGFbMV0sYXogPSBhWzJdO1xyXG5cdCAgICB2YXIgYnggPSBiWzBdLGJ5ID0gYlsxXSxieiA9IGJbMl07XHJcblxyXG5cdCAgICByWzBdID0gYXkgKiBieiAtIGF6ICogYnk7XHJcblx0ICAgIHJbMV0gPSBheiAqIGJ4IC0gYXggKiBiejtcclxuXHQgICAgclsyXSA9IGF4ICogYnkgLSBheSAqIGJ4O1xyXG5cdCAgfTtcclxuXHJcblx0ICB0aGlzLkogPSBmdW5jdGlvbiAoYSwgYikge1xyXG5cdCAgICB2YXIgYXggPSBhWzBdLGF5ID0gYVsxXSxheiA9IGFbMl07XHJcblx0ICAgIHZhciBieCA9IGJbMF0sYnkgPSBiWzFdLGJ6ID0gYlsyXTtcclxuXHJcblx0ICAgIHJldHVybiBbYXkgKiBieiAtIGF6ICogYnksXHJcblx0ICAgIGF6ICogYnggLSBheCAqIGJ6LFxyXG5cdCAgICBheCAqIGJ5IC0gYXkgKiBieF07XHJcblx0ICB9O1xyXG5cclxuXHQgIHRoaXMuSyA9IGZ1bmN0aW9uIChhKSB7XHJcblx0ICAgIHJldHVybiBNYXRoLnNxcnQoYVswXSAqIGFbMF0gKyBhWzFdICogYVsxXSk7XHJcblx0ICB9O1xyXG5cclxuXHQgIHRoaXMuTCA9IGZ1bmN0aW9uIChhKSB7XHJcblx0ICAgIHJldHVybiBhWzBdICogYVswXSArIGFbMV0gKiBhWzFdO1xyXG5cdCAgfTtcclxuXHJcblx0ICB0aGlzLk0gPSBmdW5jdGlvbiAociwgYSkge1xyXG5cdCAgICBjdHgucShyLCBhLCAxLjAgLyBjdHguSyhhKSk7XHJcblx0ICB9O1xyXG5cclxuXHQgIHRoaXMuTiA9IGZ1bmN0aW9uIChhKSB7XHJcblx0ICAgIHJldHVybiBjdHgucihhLCAxLjAgLyBjdHguSyhhKSk7XHJcblx0ICB9O1xyXG5cclxuXHQgIHRoaXMuTyA9IGZ1bmN0aW9uIChhKSB7XHJcblx0ICAgIHJldHVybiBNYXRoLnNxcnQoYVswXSAqIGFbMF0gKyBhWzFdICogYVsxXSArIGFbMl0gKiBhWzJdKTtcclxuXHQgIH07XHJcblxyXG5cdCAgdGhpcy5QID0gZnVuY3Rpb24gKGEpIHtcclxuXHQgICAgcmV0dXJuIGFbMF0gKiBhWzBdICsgYVsxXSAqIGFbMV0gKyBhWzJdICogYVsyXTtcclxuXHQgIH07XHJcblxyXG5cdCAgdGhpcy5RID0gZnVuY3Rpb24gKHIsIGEpIHtcclxuXHQgICAgY3R4LnUociwgYSwgMS4wIC8gY3R4Lk8oYSkpO1xyXG5cdCAgfTtcclxuXHJcblx0ICB0aGlzLlIgPSBmdW5jdGlvbiAoYSkge1xyXG5cdCAgICByZXR1cm4gY3R4LnYoYSwgMS4wIC8gY3R4Lk8oYSkpO1xyXG5cdCAgfTtcclxuXHJcblx0ICB0aGlzLlMgPSBmdW5jdGlvbiAociwgYSkge1xyXG5cdCAgICByWzBdID0gYVswXTtcclxuXHQgICAgclsxXSA9IGFbMV07XHJcblx0ICB9O1xyXG5cclxuXHQgIHRoaXMuVCA9IGZ1bmN0aW9uIChyLCBhKSB7XHJcblx0ICAgIHJbMF0gPSBhWzBdO1xyXG5cdCAgICByWzFdID0gYVsxXTtcclxuXHQgICAgclsyXSA9IGFbMl07XHJcblx0ICB9O1xyXG5cclxuXHQgIHRoaXMuVSA9IGZ1bmN0aW9uIChyLCBhKSB7XHJcblx0ICAgIHJbMF0gPSBhWzBdO1xyXG5cdCAgICByWzFdID0gYVsxXTtcclxuXHQgICAgclsyXSA9IGFbMl07XHJcblx0ICAgIHJbM10gPSBhWzNdO1xyXG5cdCAgfTtcclxuXHJcblx0ICB0aGlzLlYgPSBmdW5jdGlvbiAociwgeCwgeSkge1xyXG5cdCAgICByWzBdID0geDtcclxuXHQgICAgclsxXSA9IHk7XHJcblx0ICB9O1xyXG5cclxuXHQgIHRoaXMuVyA9IGZ1bmN0aW9uIChyLCB4LCB5LCB6KSB7XHJcblx0ICAgIHJbMF0gPSB4O1xyXG5cdCAgICByWzFdID0geTtcclxuXHQgICAgclsyXSA9IHo7XHJcblx0ICB9O1xyXG5cclxuXHQgIHRoaXMuWCA9IGZ1bmN0aW9uIChhLCBiLCBpKSB7XHJcblx0ICAgIHJldHVybiBhICsgKGIgLSBhKSAqIGk7XHJcblx0ICB9O1xyXG5cclxuXHQgIHRoaXMuWSA9IGZ1bmN0aW9uIChyLCBhLCBiLCBpKSB7XHJcblx0ICAgIHJbMF0gPSBhWzBdICsgKGJbMF0gLSBhWzBdKSAqIGk7XHJcblx0ICAgIHJbMV0gPSBhWzFdICsgKGJbMV0gLSBhWzFdKSAqIGk7XHJcblx0ICB9O1xyXG5cclxuXHQgIHRoaXMuWiA9IGZ1bmN0aW9uIChhLCBiLCBpKSB7XHJcblx0ICAgIHJldHVybiBbYVswXSArIChiWzBdIC0gYVswXSkgKiBpLFxyXG5cdCAgICBhWzFdICsgKGJbMV0gLSBhWzFdKSAqIGldO1xyXG5cdCAgfTtcclxuXHJcblx0ICB0aGlzLmFiID0gZnVuY3Rpb24gKHIsIGEsIGIsIGkpIHtcclxuXHQgICAgclswXSA9IGFbMF0gKyAoYlswXSAtIGFbMF0pICogaTtcclxuXHQgICAgclsxXSA9IGFbMV0gKyAoYlsxXSAtIGFbMV0pICogaTtcclxuXHQgICAgclsyXSA9IGFbMl0gKyAoYlsyXSAtIGFbMl0pICogaTtcclxuXHQgIH07XHJcblxyXG5cdCAgdGhpcy5iYiA9IGZ1bmN0aW9uIChhLCBiLCBpKSB7XHJcblx0ICAgIHJldHVybiBbYVswXSArIChiWzBdIC0gYVswXSkgKiBpLFxyXG5cdCAgICBhWzFdICsgKGJbMV0gLSBhWzFdKSAqIGksXHJcblx0ICAgIGFbMl0gKyAoYlsyXSAtIGFbMl0pICogaV07XHJcblx0ICB9O1xyXG5cclxuXHQgIHRoaXMuc2xlcnBxID0gZnVuY3Rpb24gKHIsIHgsIHksIGEpIHtcclxuXHQgICAgdmFyIGNvc1RoZXRhID0gY3R4LmRvdHFfKHgsIHkpO1xyXG5cclxuXHQgICAgdmFyIHogPSBbXTtcclxuXHJcblx0ICAgIGlmIChjb3NUaGV0YSA8IDApIHtcclxuXHQgICAgICBjdHgubmVncSh6LCB5KTtcclxuXHQgICAgICBjb3NUaGV0YSA9IC1jb3NUaGV0YTtcclxuXHQgICAgfSBlbHNlXHJcblx0ICAgIHtcclxuXHQgICAgICBjdHguVSh6LCB5KTtcclxuXHQgICAgfVxyXG5cclxuXHQgICAgaWYgKDEuMCAtIGNvc1RoZXRhIDwgTnVtYmVyLkVQU0lMT04pIHtcclxuXHQgICAgICByWzBdID0gY3R4LlgoeFswXSwgeVswXSwgYSk7XHJcblx0ICAgICAgclsxXSA9IGN0eC5YKHhbMV0sIHlbMV0sIGEpO1xyXG5cdCAgICAgIHJbMl0gPSBjdHguWCh4WzJdLCB5WzJdLCBhKTtcclxuXHQgICAgICByWzNdID0gY3R4LlgoeFszXSwgeVszXSwgYSk7XHJcblx0ICAgIH0gZWxzZVxyXG5cdCAgICB7XHJcblx0ICAgICAgdmFyIE1kID0gY3R4LmFjb3NfKGNvc1RoZXRhKTtcclxuXHJcblx0ICAgICAgY3R4Lm11bHFzY2FsYXIociwgY3R4LmFkZHFfKGN0eC5tdWxxc2NhbGFyXyh4LCBjdHguc2luXygoMS4wIC0gYSkgKiBNZCkpLCBjdHgubXVscXNjYWxhcl8oeiwgY3R4LnNpbl8oYSAqIE1kKSkpLFxyXG5cdCAgICAgIDEuMCAvIGN0eC5zaW5fKE1kKSk7XHJcblx0ICAgIH1cclxuXHQgIH07XHJcblxyXG5cdCAgdGhpcy5zbGVycHFfID0gZnVuY3Rpb24gKHgsIHksIGEpIHtcclxuXHQgICAgdmFyIHIgPSBbXTtcclxuXHQgICAgc2xlcnBxKHIsIHgsIHksIGEpO1xyXG5cdCAgICByZXR1cm4gcjtcclxuXHQgIH07XHJcblxyXG5cdCAgLy90cmlnb25vbWV0cnlcclxuXHJcblx0ICB0aGlzLmFjb3NfID0gZnVuY3Rpb24gKGEpIHtcclxuXHQgICAgcmV0dXJuIE1hdGguYWNvcyhhKTtcclxuXHQgIH07XHJcblxyXG5cdCAgdGhpcy5zaW5fID0gZnVuY3Rpb24gKGEpIHtcclxuXHQgICAgcmV0dXJuIE1hdGguc2luKGEpO1xyXG5cdCAgfTtcclxuXHJcblx0ICB0aGlzLmNvc18gPSBmdW5jdGlvbiAoYSkge1xyXG5cdCAgICByZXR1cm4gTWF0aC5jb3MoYSk7XHJcblx0ICB9O1xyXG5cclxuXHQgIC8vIHJhbmRvbVxyXG5cclxuXHQgIHRoaXMudGF1czg4ID0gZnVuY3Rpb24gKHNlZWQpXHJcblx0ICB7XHJcblx0ICAgIGlmICghc2VlZClcclxuXHQgICAgc2VlZCA9IDA7XHJcblxyXG5cdCAgICB2YXIgdmFsdWUwLCB2YWx1ZTEsIHZhbHVlMjtcclxuXHJcblx0ICAgIHRoaXMuc2VlZCA9IGZ1bmN0aW9uIChzMCkge1xyXG5cdCAgICAgIHMwICY9IDB4RkZGRkZGRkY7XHJcblxyXG5cdCAgICAgIHZhbHVlMCA9IHMwIDwgMiA/IHMwICsgMiA6IHMwO1xyXG5cdCAgICAgIHZhbHVlMSA9IHMwIDwgOCA/IHMwICsgOCA6IHMwO1xyXG5cdCAgICAgIHZhbHVlMiA9IHMwIDwgMTYgPyBzMCArIDE2IDogczA7XHJcblx0ICAgIH07XHJcblxyXG5cdCAgICB0aGlzLnJhbmQgPSBmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgdmFyIGIgPSAoKHZhbHVlMCA8PCAxMyBeIHZhbHVlMCkgJiAweEZGRkZGRkZGKSA+Pj4gMTk7XHJcblx0ICAgICAgdmFsdWUwID0gKCh2YWx1ZTAgJiAweEZGRkZGRkZFKSA8PCAxMiBeIGIpID4+PiAwO1xyXG5cclxuXHQgICAgICBiID0gKCh2YWx1ZTEgPDwgMiBeIHZhbHVlMSkgJiAweEZGRkZGRkZGKSA+Pj4gMjU7XHJcblx0ICAgICAgdmFsdWUxID0gKCh2YWx1ZTEgJiAweEZGRkZGRkY4KSA8PCA0IF4gYikgPj4+IDA7XHJcblxyXG5cdCAgICAgIGIgPSAoKHZhbHVlMiA8PCAzIF4gdmFsdWUyKSAmIDB4RkZGRkZGRkYpID4+PiAxMTtcclxuXHQgICAgICB2YWx1ZTIgPSAoKHZhbHVlMiAmIDB4RkZGRkZGRjApIDw8IDE3IF4gYikgPj4+IDA7XHJcblxyXG5cdCAgICAgIHZhciBlbmdpbmUgPSAodmFsdWUwIF4gdmFsdWUxIF4gdmFsdWUyKSA+Pj4gMDtcclxuXHQgICAgICByZXR1cm4gZW5naW5lIC8gNDI5NDk2NzI5Ni4wO1xyXG5cdCAgICB9O1xyXG5cclxuXHQgICAgdGhpcy5zZWVkKHNlZWQpO1xyXG5cdCAgfTtcclxuXHJcblx0ICB0aGlzLmNiID0gZnVuY3Rpb24gKHIsIHJhZGl1cykge1xyXG5cdCAgICB0aGlzLnJhbmR2MmdlbihyLCByYWRpdXMsIGZ1bmN0aW9uICgpIHtyZXR1cm4gTWF0aC5yYW5kb20oKTt9KTtcclxuXHQgIH07XHJcblxyXG5cdCAgdGhpcy5yYW5kdjJnZW4gPSBmdW5jdGlvbiAociwgcmFkaXVzLCBnZW4pIHtcclxuXHQgICAgdmFyIE1kID0gZ2VuKCkgKiBNYXRoLlBJICogMi4wO1xyXG5cdCAgICByWzBdID0gcmFkaXVzICogY3R4LmNvc18oTWQpO1xyXG5cdCAgICByWzFdID0gcmFkaXVzICogY3R4LnNpbl8oTWQpO1xyXG5cdCAgfTtcclxuXHJcblx0ICB0aGlzLmRiID0gZnVuY3Rpb24gKHIsIHJhZGl1cykge1xyXG5cdCAgICB0aGlzLnJhbmR2M2dlbihyLCByYWRpdXMsIGZ1bmN0aW9uICgpIHtyZXR1cm4gTWF0aC5yYW5kb20oKTt9KTtcclxuXHQgIH07XHJcblxyXG5cdCAgdGhpcy5yYW5kdjNnZW4gPSBmdW5jdGlvbiAociwgcmFkaXVzLCBnZW4pIHtcclxuXHQgICAgdmFyIHRoZXRhID0gZ2VuKCkgKiBNYXRoLlBJICogMi4wO1xyXG5cdCAgICB2YXIgeiA9IC0xLjAgKyBnZW4oKSAqIDIuMDtcclxuXHQgICAgdmFyIHNxcnRJbnZaMiA9IHJhZGl1cyAqIE1hdGguc3FydCgxLjAgLSB6ICogeik7XHJcblx0ICAgIHJbMF0gPSBzcXJ0SW52WjIgKiBjdHguY29zXyh0aGV0YSk7XHJcblx0ICAgIHJbMV0gPSBzcXJ0SW52WjIgKiBjdHguc2luXyh0aGV0YSk7XHJcblx0ICAgIHJbMl0gPSByYWRpdXMgKiB6O1xyXG5cdCAgfTtcclxuXHJcblx0ICB0aGlzLnliID0gZnVuY3Rpb24gKHIsIHgsIHksIE5kLCBnZW4pIHtcclxuXHQgICAgdmFyIGRpc3B4ID0geCArIGdlbigpICogTmRbMF07XHJcblx0ICAgIHZhciBkaXNweSA9IHkgKyBnZW4oKSAqIE5kWzFdO1xyXG5cdCAgICBjdHguVihyLCBkaXNweCwgZGlzcHkpO1xyXG5cdCAgfTtcclxuXHJcblx0ICB0aGlzLmViID0gZnVuY3Rpb24gKHIsIGEpIHtcclxuXHQgICAgY3R4LlYoLWFbMF0sIC1hWzFdKTtcclxuXHQgIH07XHJcblxyXG5cdCAgdGhpcy5mYiA9IGZ1bmN0aW9uIChhKSB7XHJcblx0ICAgIHJldHVybiBbLWFbMF0sIC1hWzFdXTtcclxuXHQgIH07XHJcblxyXG5cdCAgdGhpcy5nYiA9IGZ1bmN0aW9uIChyLCBhKSB7XHJcblx0ICAgIGN0eC5XKC1hWzBdLCAtYVsxXSwgLWFbMl0pO1xyXG5cdCAgfTtcclxuXHJcblx0ICB0aGlzLmhiID0gZnVuY3Rpb24gKGEpIHtcclxuXHQgICAgcmV0dXJuIFstYVswXSwgLWFbMV0sIC1hWzJdXTtcclxuXHQgIH07XHJcblxyXG5cdCAgdGhpcy5uZWdxID0gZnVuY3Rpb24gKHIsIGEpIHtcclxuXHQgICAgclswXSA9IC1hWzBdO1xyXG5cdCAgICByWzFdID0gLWFbMV07XHJcblx0ICAgIHJbMl0gPSAtYVsyXTtcclxuXHQgICAgclszXSA9IC1hWzNdO1xyXG5cdCAgfTtcclxuXHJcblx0ICB0aGlzLm5lZ3FfID0gZnVuY3Rpb24gKGEpIHtcclxuXHQgICAgcmV0dXJuIFstYVswXSwgLWFbMV0sIC1hWzJdLCAtYVszXV07XHJcblx0ICB9O1xyXG5cclxuXHQgIHRoaXMuaWIgPSBmdW5jdGlvbiAoZGVncmVlcykge1xyXG5cdCAgICByZXR1cm4gZGVncmVlcyAvIDE4MC4wICogTWF0aC5QSTtcclxuXHQgIH07XHJcblxyXG5cdCAgdGhpcy5qYiA9IGZ1bmN0aW9uIChyYWRpYW5zKSB7XHJcblx0ICAgIHJldHVybiByYWRpYW5zIC8gTWF0aC5QSSAqIDE4MC4wO1xyXG5cdCAgfTtcclxuXHJcblx0ICB0aGlzLkFlID0gZnVuY3Rpb24gKHZhbHVlKSB7XHJcblx0ICAgIHJldHVybiB2YWx1ZSA8IDAgPyAtMSA6IDE7XHJcblx0ICB9O1xyXG5cclxuXHQgIHRoaXMub2IgPSBmdW5jdGlvbiAoeCwgeSwgeiwgcSkge1xyXG5cdCAgICB2YXIgeDIgPSAyLjAgKiBxWzBdICogcVswXTtcclxuXHQgICAgdmFyIHkyID0gMi4wICogcVsxXSAqIHFbMV07XHJcblx0ICAgIHZhciB6MiA9IDIuMCAqIHFbMl0gKiBxWzJdO1xyXG5cdCAgICB2YXIgeHkgPSAyLjAgKiBxWzBdICogcVsxXTtcclxuXHQgICAgdmFyIHh6ID0gMi4wICogcVswXSAqIHFbMl07XHJcblx0ICAgIHZhciB5eiA9IDIuMCAqIHFbMV0gKiBxWzJdO1xyXG5cdCAgICB2YXIgd3ogPSAyLjAgKiBxWzNdICogcVsyXTtcclxuXHQgICAgdmFyIHd5ID0gMi4wICogcVszXSAqIHFbMV07XHJcblx0ICAgIHZhciB3eCA9IDIuMCAqIHFbM10gKiBxWzBdO1xyXG5cclxuXHQgICAgeFswXSA9IDEuMCAtIHkyIC0gejI7XHJcblx0ICAgIHhbMV0gPSB4eSArIHd6O1xyXG5cdCAgICB4WzJdID0geHogLSB3eTtcclxuXHJcblx0ICAgIHlbMF0gPSB4eSAtIHd6O1xyXG5cdCAgICB5WzFdID0gMS4wIC0geDIgLSB6MjtcclxuXHQgICAgeVsyXSA9IHl6ICsgd3g7XHJcblxyXG5cdCAgICB6WzBdID0geHogKyB3eTtcclxuXHQgICAgelsxXSA9IHl6IC0gd3g7XHJcblx0ICAgIHpbMl0gPSAxLjAgLSB4MiAtIHkyO1xyXG5cdCAgfTtcclxuXHJcblx0ICB0aGlzLnBiID0gZnVuY3Rpb24gKHEsIHgsIHksIHopIHtcclxuXHQgICAgdmFyIHRyID0geFswXSArIHlbMV0gKyB6WzJdO1xyXG5cclxuXHQgICAgaWYgKHRyID4gMCkge1xyXG5cdCAgICAgIHZhciBTID0gTWF0aC5zcXJ0KHRyICsgMS4wKSAqIDI7XHJcblx0ICAgICAgcVszXSA9IDAuMjUgKiBTO1xyXG5cdCAgICAgIHFbMF0gPSAoeVsyXSAtIHpbMV0pIC8gUztcclxuXHQgICAgICBxWzFdID0gKHpbMF0gLSB4WzJdKSAvIFM7XHJcblx0ICAgICAgcVsyXSA9ICh4WzFdIC0geVswXSkgLyBTO1xyXG5cdCAgICB9IGVsc2UgaWYgKHhbMF0gPiB5WzFdICYgeFswXSA+IHpbMl0pIHtcclxuXHQgICAgICB2YXIgUyA9IE1hdGguc3FydCgxLjAgKyB4WzBdIC0geVsxXSAtIHpbMl0pICogMjtcclxuXHQgICAgICBxWzNdID0gKHlbMl0gLSB6WzFdKSAvIFM7XHJcblx0ICAgICAgcVswXSA9IDAuMjUgKiBTO1xyXG5cdCAgICAgIHFbMV0gPSAoeFsxXSArIHlbMF0pIC8gUztcclxuXHQgICAgICBxWzJdID0gKHpbMF0gKyB4WzJdKSAvIFM7XHJcblx0ICAgIH0gZWxzZSBpZiAoeVsxXSA+IHpbMl0pIHtcclxuXHQgICAgICB2YXIgUyA9IE1hdGguc3FydCgxLjAgKyB5WzFdIC0geFswXSAtIHpbMl0pICogMjtcclxuXHQgICAgICBxWzNdID0gKHpbMF0gLSB4WzJdKSAvIFM7XHJcblx0ICAgICAgcVswXSA9ICh4WzFdICsgeVswXSkgLyBTO1xyXG5cdCAgICAgIHFbMV0gPSAwLjI1ICogUztcclxuXHQgICAgICBxWzJdID0gKHlbMl0gKyB6WzFdKSAvIFM7XHJcblx0ICAgIH0gZWxzZSB7XHJcblx0ICAgICAgdmFyIFMgPSBNYXRoLnNxcnQoMS4wICsgelsyXSAtIHhbMF0gLSB5WzFdKSAqIDI7XHJcblx0ICAgICAgcVszXSA9ICh4WzFdIC0geVswXSkgLyBTO1xyXG5cdCAgICAgIHFbMF0gPSAoelswXSArIHhbMl0pIC8gUztcclxuXHQgICAgICBxWzFdID0gKHlbMl0gKyB6WzFdKSAvIFM7XHJcblx0ICAgICAgcVsyXSA9IDAuMjUgKiBTO1xyXG5cdCAgICB9XHJcblx0ICB9O1xyXG5cclxuXHQgIHRoaXMuIC8qKi9heGVzMnF1YXQgPSB0aGlzLnBiO1xyXG5cclxuXHQgIHRoaXMucWIgPSBmdW5jdGlvbiAocSwgeCwgYSkge1xyXG5cdCAgICB2YXIgaGEgPSBjdHguaWIoYSkgKiAwLjUscyA9IE1hdGguc2luKGhhKTtcclxuXHQgICAgcVswXSA9IHhbMF0gKiBzO1xyXG5cdCAgICBxWzFdID0geFsxXSAqIHM7XHJcblx0ICAgIHFbMl0gPSB4WzJdICogcztcclxuXHQgICAgcVszXSA9IE1hdGguY29zKGhhKTtcclxuXHQgIH07XHJcblxyXG5cdCAgdGhpcy4gLyoqL2F4aXNhbmdsZTJxdWF0ID0gdGhpcy5xYjtcclxuXHJcblx0ICB0aGlzLmF4aXNhbmdsZTJxdWF0XyA9IGZ1bmN0aW9uICh4LCBhKSB7XHJcblx0ICAgIHZhciBoYSA9IGN0eC5pYihhKSAqIDAuNSxzID0gTWF0aC5zaW4oaGEpO1xyXG5cdCAgICByZXR1cm4gW3hbMF0gKiBzLCB4WzFdICogcywgeFsyXSAqIHMsIGN0eC5jb3NfKGhhKV07XHJcblx0ICB9O1xyXG5cclxuXHQgIHRoaXMuIC8qKi9heGlzYW5nbGUycXVhdF8gPSB0aGlzLmF4aXNhbmdsZTJxdWF0XztcclxuXHJcblx0ICB0aGlzLnJiID0gZnVuY3Rpb24gKHIsIHYsIHEpIHtcclxuXHQgICAgdmFyIHggPSB2WzBdO1xyXG5cdCAgICB2YXIgeSA9IHZbMV07XHJcblx0ICAgIHZhciB6ID0gdlsyXTtcclxuXHJcblx0ICAgIHZhciBxeCA9IHFbMF07XHJcblx0ICAgIHZhciBxeSA9IHFbMV07XHJcblx0ICAgIHZhciBxeiA9IHFbMl07XHJcblx0ICAgIHZhciBxdyA9IHFbM107XHJcblxyXG5cdCAgICB2YXIgaXggPSBxdyAqIHggKyBxeSAqIHogLSBxeiAqIHk7XHJcblx0ICAgIHZhciBpeSA9IHF3ICogeSArIHF6ICogeCAtIHF4ICogejtcclxuXHQgICAgdmFyIGl6ID0gcXcgKiB6ICsgcXggKiB5IC0gcXkgKiB4O1xyXG5cdCAgICB2YXIgaXcgPSAtcXggKiB4IC0gcXkgKiB5IC0gcXogKiB6O1xyXG5cclxuXHQgICAgclswXSA9IGl4ICogcXcgKyBpdyAqIC1xeCArIGl5ICogLXF6IC0gaXogKiAtcXk7XHJcblx0ICAgIHJbMV0gPSBpeSAqIHF3ICsgaXcgKiAtcXkgKyBpeiAqIC1xeCAtIGl4ICogLXF6O1xyXG5cdCAgICByWzJdID0gaXogKiBxdyArIGl3ICogLXF6ICsgaXggKiAtcXkgLSBpeSAqIC1xeDtcclxuXHQgIH07XHJcblxyXG5cdCAgdGhpcy5zYiA9IGZ1bmN0aW9uIChyLCBhLCBiKSB7XHJcblx0ICAgIHZhciBxYXggPSBhWzBdLHFheSA9IGFbMV0scWF6ID0gYVsyXSxxYXcgPSBhWzNdO1xyXG5cdCAgICB2YXIgcWJ4ID0gYlswXSxxYnkgPSBiWzFdLHFieiA9IGJbMl0scWJ3ID0gYlszXTtcclxuXHJcblx0ICAgIHJbMF0gPSBxYXggKiBxYncgKyBxYXcgKiBxYnggKyBxYXkgKiBxYnogLSBxYXogKiBxYnk7XHJcblx0ICAgIHJbMV0gPSBxYXkgKiBxYncgKyBxYXcgKiBxYnkgKyBxYXogKiBxYnggLSBxYXggKiBxYno7XHJcblx0ICAgIHJbMl0gPSBxYXogKiBxYncgKyBxYXcgKiBxYnogKyBxYXggKiBxYnkgLSBxYXkgKiBxYng7XHJcblx0ICAgIHJbM10gPSBxYXcgKiBxYncgLSBxYXggKiBxYnggLSBxYXkgKiBxYnkgLSBxYXogKiBxYno7XHJcblx0ICB9O1xyXG5cclxuXHQgIHRoaXMubXVscXNjYWxhciA9IGZ1bmN0aW9uIChyLCBhLCBzKSB7XHJcblx0ICAgIHJbMF0gPSBhWzBdICogcztcclxuXHQgICAgclsxXSA9IGFbMV0gKiBzO1xyXG5cdCAgICByWzJdID0gYVsyXSAqIHM7XHJcblx0ICAgIHJbM10gPSBhWzNdICogcztcclxuXHQgIH07XHJcblxyXG5cdCAgdGhpcy5tdWxxc2NhbGFyXyA9IGZ1bmN0aW9uIChhLCBzKSB7XHJcblx0ICAgIHJldHVybiBbYVswXSAqIHMsIGFbMV0gKiBzLCBhWzJdICogcywgYVszXSAqIHNdO1xyXG5cdCAgfTtcclxuXHJcblx0ICB0aGlzLnRiID0gZnVuY3Rpb24gKHIsIEhmLCBkZWdyZWUsIHNjYWxlLCB2KSB7XHJcblx0ICAgIHZhciByYWQgPSBjdHguaWIoZGVncmVlKTtcclxuXHQgICAgdmFyIGNvcyA9IE1hdGguY29zKHJhZCkgKiBzY2FsZTtcclxuXHQgICAgdmFyIHNpbiA9IE1hdGguc2luKHJhZCkgKiBzY2FsZTtcclxuXHQgICAgclswXSA9IEhmWzBdICsgY29zICogdlswXSAtIHNpbiAqIHZbMV07XHJcblx0ICAgIHJbMV0gPSBIZlsxXSArIHNpbiAqIHZbMF0gKyBjb3MgKiB2WzFdO1xyXG5cdCAgfTtcclxuXHJcblx0ICB0aGlzLnViID0gZnVuY3Rpb24gKHIsIEhmLCBkZWdyZWUsIHNjYWxlLCB2KSB7XHJcblx0ICAgIHZhciByYWQgPSBjdHguaWIoZGVncmVlKTtcclxuXHQgICAgdmFyIGNvcyA9IE1hdGguY29zKHJhZCkgLyBzY2FsZTtcclxuXHQgICAgdmFyIHNpbiA9IE1hdGguc2luKHJhZCkgLyBzY2FsZTtcclxuXHJcblx0ICAgIHJbMF0gPSBjb3MgKiB2WzBdICsgc2luICogdlsxXSAtIEhmWzBdICogY29zIC0gSGZbMV0gKiBzaW47XHJcblx0ICAgIHJbMV0gPSBjb3MgKiB2WzFdIC0gc2luICogdlswXSArIEhmWzBdICogc2luIC0gSGZbMV0gKiBjb3M7XHJcblx0ICB9O1xyXG5cclxuXHQgIHRoaXMudmIgPSBmdW5jdGlvbiAodmFsKSB7XHJcblx0ICAgIGlmICh2YWwgPCAwKVxyXG5cdCAgICByZXR1cm4gTWF0aC5mbG9vcihjdHgueWQgLSAxICsgdmFsICUgY3R4LnlkKTtlbHNlXHJcblxyXG5cdCAgICByZXR1cm4gTWF0aC5mbG9vcih2YWwgJSBjdHgueWQpO1xyXG5cdCAgfTtcclxuXHJcblx0ICBmdW5jdGlvbiBjb2xvckNvbXBUb0hleF8oYykge1xyXG5cdCAgICByZXR1cm4gYyA8IDE2ID8gXCIwXCIgKyBjLnRvU3RyaW5nKDE2KSA6IGMudG9TdHJpbmcoMTYpO1xyXG5cdCAgfVxyXG5cclxuXHQgIHRoaXMuZmYgPSBmdW5jdGlvbiAocmdiKSB7XHJcblx0ICAgIHJldHVybiBcIiNcIiArXHJcblx0ICAgIGNvbG9yQ29tcFRvSGV4XyhNYXRoLmZsb29yKHJnYlswXSAqIDI1NSkpICtcclxuXHQgICAgY29sb3JDb21wVG9IZXhfKE1hdGguZmxvb3IocmdiWzFdICogMjU1KSkgK1xyXG5cdCAgICBjb2xvckNvbXBUb0hleF8oTWF0aC5mbG9vcihyZ2JbMl0gKiAyNTUpKTtcclxuXHQgIH07XHJcblxyXG5cdCAgdGhpcy50ZiA9IGZ1bmN0aW9uICh2ZiwgeGYsIHlmLCBhLCBiLCB6Zikge1xyXG5cdCAgICB2YXIgY2EgPSBjdHguZihhLCB2Zik7XHJcblx0ICAgIHZhciBjYiA9IGN0eC5mKGIsIHZmKTtcclxuXHJcblx0ICAgIHZhciB3ZiA9IGN0eC5yKHhmLCB5Zik7XHJcblxyXG5cdCAgICBpZiAoY2FbMF0gPCAtd2ZbMF0gJiYgY2JbMF0gPCAtd2ZbMF0gfHxcclxuXHQgICAgY2FbMF0gPiB3ZlswXSAmJiBjYlswXSA+IHdmWzBdIHx8XHJcblx0ICAgIGNhWzFdIDwgLXdmWzFdICYmIGNiWzFdIDwgLXdmWzFdIHx8XHJcblx0ICAgIGNhWzFdID4gd2ZbMV0gJiYgY2JbMV0gPiB3ZlsxXSlcclxuXHQgICAge1xyXG5cdCAgICAgIHJldHVybiBmYWxzZTtcclxuXHQgICAgfVxyXG5cclxuXHQgICAgaWYgKGNhWzBdIDw9IHdmWzBdICYmIGNhWzBdID49IC13ZlswXSAmJiBjYVsxXSA8PSB3ZlsxXSAmJiBjYVsxXSA+PSAtd2ZbMV0pXHJcblx0ICAgIHJldHVybiB0cnVlO1xyXG5cclxuXHQgICAgaWYgKHpmIDwgMC4wMDAwMDEpXHJcblx0ICAgIHJldHVybiBmYWxzZTtcclxuXHJcblx0ICAgIGlmIChjYlswXSA8PSB3ZlswXSAmJiBjYlswXSA+PSAtd2ZbMF0gJiYgY2JbMV0gPD0gd2ZbMV0gJiYgY2JbMV0gPj0gLXdmWzFdKVxyXG5cdCAgICByZXR1cm4gdHJ1ZTtcclxuXHJcblx0ICAgIHZhciBBZiA9IGN0eC5mKGIsIGEpO2N0eC5zKEFmLCBBZiwgemYpO1xyXG5cdCAgICB2YXIgQmYgPSBbLUFmWzFdLCBBZlswXV07XHJcblx0ICAgIHZhciBDZiA9IE1hdGguYWJzKGN0eC5HKEJmLCBjYikpO1xyXG5cclxuXHQgICAgaWYgKE1hdGguYWJzKGN0eC5HKEJmLCB3ZikpID49IENmKSB7XHJcblx0ICAgICAgdmFyIERmID0gWy14ZlsxXSwgeGZbMF1dO1xyXG5cdCAgICAgIGlmIChjdHguRyhEZiwgY2EpICogY3R4LkcoRGYsIGNiKSA8PSAwLjApIHtcclxuXHQgICAgICAgIHJldHVybiB0cnVlO1xyXG5cdCAgICAgIH1cclxuXHQgICAgfSBlbHNlIGlmIChNYXRoLmFicyhjdHguRyhCZiwgW3dmWzBdLCAtd2ZbMV1dKSkgPj0gQ2YpIHtcclxuXHQgICAgICB2YXIgX0RmID0gW3hmWzFdLCB4ZlswXV07XHJcblx0ICAgICAgaWYgKGN0eC5HKF9EZiwgY2EpICogY3R4LkcoX0RmLCBjYikgPD0gMC4wKSB7XHJcblx0ICAgICAgICByZXR1cm4gdHJ1ZTtcclxuXHQgICAgICB9XHJcblx0ICAgIH1cclxuXHJcblx0ICAgIHJldHVybiBmYWxzZTtcclxuXHQgIH07XHJcblxyXG5cdCAgdGhpcy51ZiA9IGZ1bmN0aW9uICh2ZiwgeGYsIHlmLCBhLCBiLCB6ZiwgRWYpIHtcclxuXHQgICAgdmFyIGNhID0gY3R4LmYoYSwgdmYpO1xyXG5cdCAgICB2YXIgY2IgPSBjdHguZihiLCB2Zik7XHJcblxyXG5cdCAgICB2YXIgd2YgPSBjdHgucih4ZiwgeWYpO1xyXG5cclxuXHQgICAgaWYgKHpmIDwgMC4wMDAwMDEpXHJcblx0ICAgIHJldHVybiBmYWxzZTtcclxuXHJcblx0ICAgIGlmIChjYVswXSA8IC13ZlswXSAmJiBjYlswXSA8IC13ZlswXSB8fFxyXG5cdCAgICBjYVswXSA+IHdmWzBdICYmIGNiWzBdID4gd2ZbMF0gfHxcclxuXHQgICAgY2FbMV0gPCAtd2ZbMV0gJiYgY2JbMV0gPCAtd2ZbMV0gfHxcclxuXHQgICAgY2FbMV0gPiB3ZlsxXSAmJiBjYlsxXSA+IHdmWzFdKVxyXG5cdCAgICB7XHJcblx0ICAgICAgcmV0dXJuIGZhbHNlO1xyXG5cdCAgICB9XHJcblxyXG5cdCAgICB2YXIgQWYgPSBjdHguZihiLCBhKTtjdHgucyhBZiwgQWYsIHpmKTtcclxuXHQgICAgdmFyIEJmID0gWy1BZlsxXSwgQWZbMF1dO1xyXG5cdCAgICB2YXIgQ2YgPSBNYXRoLmFicyhjdHguRyhCZiwgY2IpKTtcclxuXHJcblx0ICAgIGlmIChFZikge1xyXG5cdCAgICAgIGlmIChNYXRoLmFicyhjdHguRyhCZiwgd2YpKSA+PSBDZikge1xyXG5cdCAgICAgICAgdmFyIERmID0gWy14ZlsxXSwgeGZbMF1dO1xyXG5cdCAgICAgICAgaWYgKGN0eC5HKERmLCBjYSkgKiBjdHguRyhEZiwgY2IpIDw9IDAuMCkge1xyXG5cdCAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuXHQgICAgICAgIH1cclxuXHQgICAgICB9XHJcblx0ICAgIH0gZWxzZSB7XHJcblx0ICAgICAgaWYgKE1hdGguYWJzKGN0eC5HKEJmLCBbd2ZbMF0sIC13ZlsxXV0pKSA+PSBDZikge1xyXG5cdCAgICAgICAgdmFyIF9EZjIgPSBbeGZbMV0sIHhmWzBdXTtcclxuXHQgICAgICAgIGlmIChjdHguRyhfRGYyLCBjYSkgKiBjdHguRyhfRGYyLCBjYikgPD0gMC4wKSB7XHJcblx0ICAgICAgICAgIHJldHVybiB0cnVlO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgIH1cclxuXHQgICAgfVxyXG5cclxuXHQgICAgcmV0dXJuIGZhbHNlO1xyXG5cdCAgfTtcclxuXHJcblx0ICB0aGlzLndiID0gZnVuY3Rpb24gKHIsIHgsIHksIHopIHtcclxuXHQgICAgdmFyIHJnYkRpc3AgPSAzICogKHkgKiBjdHgueWQgKyB4KTtcclxuXHQgICAgdmFyIHZpZXcgPSBjdHguemRbel07XHJcblxyXG5cdCAgICByWzBdID0gdmlldy5nZXRVaW50OChyZ2JEaXNwKTtcclxuXHQgICAgclsxXSA9IHZpZXcuZ2V0VWludDgocmdiRGlzcCArIDEpO1xyXG5cdCAgICByWzJdID0gdmlldy5nZXRVaW50OChyZ2JEaXNwICsgMik7XHJcblx0ICB9O1xyXG5cclxuXHQgIHRoaXMueGIgPSBmdW5jdGlvbiAociwgSGYpIHtcclxuXHQgICAgaWYgKGN0eC56ZCA9PSBudWxsKSB7XHJcblx0ICAgICAgY3R4LlcociwgMTI4LCAxMjgsIDEyOCk7XHJcblx0ICAgICAgcmV0dXJuO1xyXG5cdCAgICB9XHJcblxyXG5cdCAgICB2YXIgc2NhbGVkUG9zWCA9IEhmWzBdICogY3R4LnlkO1xyXG5cdCAgICB2YXIgc2NhbGVkUG9zWSA9IEhmWzFdICogY3R4LnlkO1xyXG5cdCAgICB2YXIgc2NhbGVkUG9zWiA9IEhmWzJdICogY3R4LnlkO1xyXG5cclxuXHQgICAgdmFyIGZsb29yWCA9IE1hdGguZmxvb3Ioc2NhbGVkUG9zWCk7XHJcblx0ICAgIHZhciBmbG9vclkgPSBNYXRoLmZsb29yKHNjYWxlZFBvc1kpO1xyXG5cdCAgICB2YXIgZmxvb3JaID0gTWF0aC5mbG9vcihzY2FsZWRQb3NaKTtcclxuXHJcblx0ICAgIHZhciBmcmFjWCA9IHNjYWxlZFBvc1ggLSBmbG9vclg7XHJcblx0ICAgIHZhciBmcmFjWSA9IHNjYWxlZFBvc1kgLSBmbG9vclk7XHJcblx0ICAgIHZhciBmcmFjWiA9IHNjYWxlZFBvc1ogLSBmbG9vclo7XHJcblxyXG5cdCAgICB2YXIgbm9pc2VYID0gY3R4LnZiKGZsb29yWCk7XHJcblx0ICAgIHZhciBub2lzZVgxID0gY3R4LnZiKGZsb29yWCArIDEpO1xyXG5cdCAgICB2YXIgbm9pc2VZID0gY3R4LnZiKGZsb29yWSk7XHJcblx0ICAgIHZhciBub2lzZVkxID0gY3R4LnZiKGZsb29yWSArIDEpO1xyXG5cdCAgICB2YXIgbm9pc2VaID0gY3R4LnZiKGZsb29yWik7XHJcblx0ICAgIHZhciBub2lzZVoxID0gY3R4LnZiKGZsb29yWiArIDEpO1xyXG5cclxuXHQgICAgdmFyIHZhbHVlMDAwID0gW10sdmFsdWUwMDEgPSBbXSx2YWx1ZTAxMCA9IFtdLHZhbHVlMDExID0gW10sXHJcblx0ICAgIHZhbHVlMTAwID0gW10sdmFsdWUxMDEgPSBbXSx2YWx1ZTExMCA9IFtdLHZhbHVlMTExID0gW107XHJcblxyXG5cdCAgICBjdHgud2IodmFsdWUwMDAsIG5vaXNlWCwgbm9pc2VZLCBub2lzZVopO1xyXG5cdCAgICBjdHgud2IodmFsdWUwMDEsIG5vaXNlWCwgbm9pc2VZLCBub2lzZVoxKTtcclxuXHQgICAgY3R4LndiKHZhbHVlMDEwLCBub2lzZVgsIG5vaXNlWTEsIG5vaXNlWik7XHJcblx0ICAgIGN0eC53Yih2YWx1ZTAxMSwgbm9pc2VYLCBub2lzZVkxLCBub2lzZVoxKTtcclxuXHQgICAgY3R4LndiKHZhbHVlMTAwLCBub2lzZVgxLCBub2lzZVksIG5vaXNlWik7XHJcblx0ICAgIGN0eC53Yih2YWx1ZTEwMSwgbm9pc2VYMSwgbm9pc2VZLCBub2lzZVoxKTtcclxuXHQgICAgY3R4LndiKHZhbHVlMTEwLCBub2lzZVgxLCBub2lzZVkxLCBub2lzZVopO1xyXG5cdCAgICBjdHgud2IodmFsdWUxMTEsIG5vaXNlWDEsIG5vaXNlWTEsIG5vaXNlWjEpO1xyXG5cclxuXHQgICAgdmFyIHZhbHVlMDAgPSBbXSx2YWx1ZTAxID0gW10sdmFsdWUxMCA9IFtdLHZhbHVlMTEgPSBbXTtcclxuXHQgICAgY3R4LmFiKHZhbHVlMDAsIHZhbHVlMDAwLCB2YWx1ZTAwMSwgZnJhY1opO1xyXG5cdCAgICBjdHguYWIodmFsdWUwMSwgdmFsdWUwMTAsIHZhbHVlMDExLCBmcmFjWik7XHJcblx0ICAgIGN0eC5hYih2YWx1ZTEwLCB2YWx1ZTEwMCwgdmFsdWUxMDEsIGZyYWNaKTtcclxuXHQgICAgY3R4LmFiKHZhbHVlMTEsIHZhbHVlMTEwLCB2YWx1ZTExMSwgZnJhY1opO1xyXG5cclxuXHQgICAgdmFyIHZhbHVlMCA9IFtdLHZhbHVlMSA9IFtdO1xyXG5cdCAgICBjdHguYWIodmFsdWUwLCB2YWx1ZTAwLCB2YWx1ZTAxLCBmcmFjWSk7XHJcblx0ICAgIGN0eC5hYih2YWx1ZTEsIHZhbHVlMTAsIHZhbHVlMTEsIGZyYWNZKTtcclxuXHJcblx0ICAgIGN0eC5hYihyLCB2YWx1ZTAsIHZhbHVlMSwgZnJhY1gpO1xyXG5cdCAgfTtcclxuXHJcblx0ICB0aGlzLkltYWdlRGVzYyA9IGZ1bmN0aW9uIChpbWFnZSwgeCwgeSwgd2lkdGgsIGhlaWdodCkge1xyXG5cdCAgICB0aGlzLmltYWdlID0gaW1hZ2U7XHJcblx0ICAgIHRoaXMueCA9IHg7XHJcblx0ICAgIHRoaXMueSA9IHk7XHJcblx0ICAgIHRoaXMud2lkdGggPSB3aWR0aDtcclxuXHQgICAgdGhpcy5oZWlnaHQgPSBoZWlnaHQ7XHJcblx0ICB9O1xyXG5cclxuXHQgIHRoaXMuUmVuZGVyQ2FsbCA9IGZ1bmN0aW9uIChzdGFydEluZGV4LCBudW1JbmRpY2VzLCByZW5kZXJTdHlsZUluZGV4KSB7XHJcblx0ICAgIHRoaXMuc3RhcnRJbmRleCA9IHN0YXJ0SW5kZXg7XHJcblx0ICAgIHRoaXMubnVtSW5kaWNlcyA9IG51bUluZGljZXM7XHJcblx0ICAgIHRoaXMucmVuZGVyU3R5bGVJbmRleCA9IHJlbmRlclN0eWxlSW5kZXg7XHJcblx0ICB9O1xyXG5cclxuXHQgIHRoaXMuU3ViUmVjdCA9IGZ1bmN0aW9uICh4LCB5LCB3aWR0aCwgaGVpZ2h0KSB7XHJcblx0ICAgIHRoaXMueCA9IHg7XHJcblx0ICAgIHRoaXMueSA9IHk7XHJcblx0ICAgIHRoaXMud2lkdGggPSB3aWR0aDtcclxuXHQgICAgdGhpcy5oZWlnaHQgPSBoZWlnaHQ7XHJcblx0ICB9O1xyXG5cclxuXHQgIHRoaXMuQ2FtZXJhMkQgPSBmdW5jdGlvbiAoKSB7XHJcblx0ICB9O1xyXG5cclxuXHQgIHRoaXMuQ2FtZXJhMkQucHJvdG90eXBlLnRiID0gZnVuY3Rpb24gKEhmLCBOZCkge1xyXG5cdCAgICByZXR1cm4gdHJ1ZTtcclxuXHQgIH07XHJcblxyXG5cdCAgdGhpcy5DYW1lcmEzRCA9IGZ1bmN0aW9uICggLyoqL3NjcmVlblNpemUsIC8qKi9ob3JpekFuZ2xlKSB7XHJcblx0ICAgIHRoaXMuUWQgPSBjdHguciggLyoqL3NjcmVlblNpemUsIDAuNSk7XHJcblx0ICAgIHRoaXMueiA9IC0oIC8qKi9zY3JlZW5TaXplWzBdICogMC41KSAvIE1hdGgudGFuKGN0eC5pYiggLyoqL2hvcml6QW5nbGUgKiAwLjUpKTtcclxuXHQgIH07XHJcblxyXG5cdCAgdGhpcy5DYW1lcmEzRC5wcm90b3R5cGUuIC8qKi90cmFuc2Zvcm0gPSBmdW5jdGlvbiAoIC8qKi9wb3MsIC8qKi9zaXplKSB7XHJcblx0ICAgIGlmICggLyoqL3Bvc1syXSA8IHRoaXMueilcclxuXHQgICAgcmV0dXJuIGZhbHNlO1xyXG5cclxuXHQgICAgdmFyIHNjYWxlID0gLXRoaXMueiAvICggLyoqL3Bvc1syXSAtIHRoaXMueik7XHJcblx0ICAgIGN0eC5hKCAvKiovcG9zLCBjdHgucihjdHguZiggLyoqL3BvcywgdGhpcy5RZCksIHNjYWxlKSwgdGhpcy5RZCk7XHJcblx0ICAgIGN0eC5xKCAvKiovc2l6ZSwgLyoqL3NpemUsIHNjYWxlKTtcclxuXHJcblx0ICAgIHJldHVybiB0cnVlO1xyXG5cdCAgfTtcclxuXHJcblx0ICB0aGlzLnpkID0gbnVsbDtcclxuXHQgIHRoaXMueWQgPSAwO1xyXG5cclxuXHQgIHRoaXMuaW5pdGlhbGl6ZU5vaXNlID0gZnVuY3Rpb24gKHBhdGgsIG9ubG9hZGNhbGxiYWNrLCBvbmZhaWxjYWxsYmFjaykge1xyXG5cclxuXHQgICAgaWYgKCFwYXRoKSB7XHJcblx0ICAgICAgYWxlcnQoXCJwYXRoIHNob3VsZCBiZSBkZWZpbmVkXCIpO1xyXG5cdCAgICB9XHJcblxyXG5cdCAgICBpZiAodGhpcy56ZCAhPSBudWxsKSB7XHJcblx0ICAgICAgb25sb2FkY2FsbGJhY2soKTtcclxuXHQgICAgICByZXR1cm47XHJcblx0ICAgIH1cclxuXHJcblx0ICAgIGlmIChwYXRoID09IG51bGwgfHwgcGF0aCA9PSB1bmRlZmluZWQpXHJcblx0ICAgIHBhdGggPSB0aGlzLmRlZmF1bHRQYXRoO1xyXG5cclxuXHQgICAgdmFyIHJlcXVlc3QgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcclxuXHQgICAgcmVxdWVzdC5vcGVuKFwiR0VUXCIsIHBhdGggKyBcIm5ldXRyaW5vcGFydGljbGVzLm5vaXNlLmJpblwiLCB0cnVlKTtcclxuXHQgICAgcmVxdWVzdC5yZXNwb25zZVR5cGUgPSBcImFycmF5YnVmZmVyXCI7XHJcblx0ICAgIHJlcXVlc3QuY3R4ID0gdGhpcztcclxuXHQgICAgcmVxdWVzdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgaWYgKHJlcXVlc3QucmVhZHlTdGF0ZSA9PSA0KSB7XHJcblx0ICAgICAgICBpZiAocmVxdWVzdC5zdGF0dXMgPj0gMjAwICYmIHJlcXVlc3Quc3RhdHVzIDwgMzAwIHx8IHJlcXVlc3Quc3RhdHVzID09IDMwNCkge1xyXG5cdCAgICAgICAgICB2YXIgemQgPSByZXF1ZXN0LnJlc3BvbnNlO1xyXG5cdCAgICAgICAgICB2YXIgY3R4ID0gcmVxdWVzdC5jdHg7XHJcblxyXG5cdCAgICAgICAgICB2YXIgdmlldyA9IG5ldyBEYXRhVmlldyh6ZCwgMCwgNCk7XHJcblx0ICAgICAgICAgIHZhciBwbGFuZVNpemUgPSB2aWV3LmdldFVpbnQzMigwLCB0cnVlKTtcclxuXHJcblx0ICAgICAgICAgIGN0eC56ZCA9IFtdO1xyXG5cdCAgICAgICAgICBjdHgueWQgPSBwbGFuZVNpemU7XHJcblxyXG5cdCAgICAgICAgICBmb3IgKHZhciBwbGFuZUluZGV4ID0gMDsgcGxhbmVJbmRleCA8IHBsYW5lU2l6ZTsgKytwbGFuZUluZGV4KSB7XHJcblx0ICAgICAgICAgICAgY3R4LnpkW3BsYW5lSW5kZXhdID0gbmV3IERhdGFWaWV3KHpkLFxyXG5cdCAgICAgICAgICAgIDQgLypOZCovICsgMyAqIHBsYW5lU2l6ZSAqIHBsYW5lU2l6ZSAqIHBsYW5lSW5kZXgpO1xyXG5cdCAgICAgICAgICB9XHJcblxyXG5cdCAgICAgICAgICBpZiAob25sb2FkY2FsbGJhY2spXHJcblx0ICAgICAgICAgIG9ubG9hZGNhbGxiYWNrKCk7XHJcblx0ICAgICAgICB9IGVsc2Uge1xyXG5cdCAgICAgICAgICBpZiAob25mYWlsY2FsbGJhY2spXHJcblx0ICAgICAgICAgIG9uZmFpbGNhbGxiYWNrKCk7XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgfVxyXG5cdCAgICB9O1xyXG5cclxuXHQgICAgcmVxdWVzdC5zZW5kKCk7XHJcblx0ICB9O1xyXG5cclxuXHQgIHRoaXMuTm9pc2VHZW5lcmF0b3IgPSBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdCAgICB2YXIgY2F0bXVsbFJvbV8gPSBmdW5jdGlvbiBjYXRtdWxsUm9tXyhwMCwgcDEsIHAyLCBwMywgdCkge1xyXG5cdCAgICAgIHJldHVybiAwLjUgKiAoMi4wICogcDEgKyAoLXAwICsgcDIpICogdCArICgyLjAgKiBwMCAtIDUuMCAqIHAxICsgNC4wICogcDIgLSBwMykgKiB0ICogdCArXHJcblx0ICAgICAgKC1wMCArIDMuMCAqIHAxIC0gMy4wICogcDIgKyBwMykgKiAodCAqIHQgKiB0KSk7XHJcblx0ICAgIH07XHJcblxyXG5cdCAgICB2YXIgY2F0bXVsbFJvbXYzXyA9IGZ1bmN0aW9uIGNhdG11bGxSb212M18ocDAsIHAxLCBwMiwgcDMsIHQpIHtcclxuXHQgICAgICByZXR1cm4gW1xyXG5cdCAgICAgIGNhdG11bGxSb21fKHAwWzBdLCBwMVswXSwgcDJbMF0sIHAzWzBdLCB0KSxcclxuXHQgICAgICBjYXRtdWxsUm9tXyhwMFsxXSwgcDFbMV0sIHAyWzFdLCBwM1sxXSwgdCksXHJcblx0ICAgICAgY2F0bXVsbFJvbV8ocDBbMl0sIHAxWzJdLCBwMlsyXSwgcDNbMl0sIHQpXTtcclxuXHJcblx0ICAgIH07XHJcblxyXG5cdCAgICB2YXIgY2xhbXBfID0gZnVuY3Rpb24gY2xhbXBfKGEsIGZyb20sIHRvKSB7XHJcblx0ICAgICAgcmV0dXJuIGEgPCBmcm9tID8gZnJvbSA6IGEgPiB0byA/IHRvIDogYTtcclxuXHQgICAgfTtcclxuXHJcblx0ICAgIHZhciBpbWFnZVNpemUgPSA2NDtcclxuXHQgICAgdmFyIGltYWdlID0gW107XHJcblx0ICAgIHZhciB0ZW1wQnVmZmVyID0gW107XHJcblx0ICAgIHZhciB0YXVzR2VuZXJhdG9yID0gbmV3IGN0eC50YXVzODgoMTIwKTsgLy8gMTIwIC0gaGFyZGNvZGVkIHN0YXJ0aW5nIHNlZWRcclxuXHQgICAgdmFyIHJhbmQgPSBmdW5jdGlvbiByYW5kKCkge3JldHVybiB0YXVzR2VuZXJhdG9yLnJhbmQoKTt9O1xyXG5cdCAgICB2YXIgYW1wID0gMC43OyAvLyBoYXJkY29kZWQgYW1wbGl0dWRlIG9mIHBlcmxpbiB6ZFxyXG5cdCAgICB2YXIgZmFkZURlZ3JlZSA9IDEuMjsgLy8gaGFyZGNvZGVkIGZhZGUgZGVncmVlIG9mIGVhY2ggb2N0YXZlXHJcblx0ICAgIHZhciBwcmV2U3RlcCA9IGltYWdlU2l6ZTtcclxuXHJcblx0ICAgIHZhciBzdGVwLCBOZCwgb2N0U2l6ZSwgb2N0U2l6ZTIsIG9jdE1hc2tTaXplLCBvY3RQaXhlbHMsIG9jdFosIG9jdFk7IC8vIG1peCBzdGVwIHZhcmlhYmxlc1xyXG5cclxuXHQgICAgdmFyIG51bU1peFN0ZXBJdGVyYXRpb25zID0gMDtcclxuXHQgICAgdmFyIG1peFN0ZXBJdGVyYXRpb24gPSAwO1xyXG5cclxuXHQgICAgZm9yICh2YXIgaSA9IHByZXZTdGVwID4+PiAxOyBpID4gMDsgaSA+Pj49IDEpIHtcclxuXHQgICAgICB2YXIgX29jdFNpemUgPSBNYXRoLmZsb29yKGltYWdlU2l6ZSAvIGkpO1xyXG5cdCAgICAgIG51bU1peFN0ZXBJdGVyYXRpb25zICs9IF9vY3RTaXplICogX29jdFNpemU7XHJcblx0ICAgIH1cclxuXHJcblx0ICAgIHZhciBTdGF0ZXMgPSB7XHJcblx0ICAgICAgSU5JVElBTF9GSUxMOiAwLFxyXG5cdCAgICAgIE1JWF9TVEVQX0lOSVQ6IDEsXHJcblx0ICAgICAgTUlYX1NURVBfUFJPQ0VTUzogMixcclxuXHQgICAgICBTQ0FMSU5HOiAzLFxyXG5cdCAgICAgIERBVEFfVklFV1M6IDQsXHJcblx0ICAgICAgRklOSVNIRUQ6IDUgfTtcclxuXHJcblxyXG5cdCAgICB2YXIgUHJvZ3Jlc3MgPSB7XHJcblx0ICAgICAgSU5JVDogMC4wMSxcclxuXHQgICAgICBNSVg6IDAuOSxcclxuXHQgICAgICBTQ0FMSU5HOiAwLjk1LFxyXG5cdCAgICAgIERBVEFfVklFV1M6IDEuMCB9O1xyXG5cclxuXHJcblx0ICAgIHZhciBzdGF0ZSA9IFN0YXRlcy5JTklUSUFMX0ZJTEw7XHJcblxyXG5cdCAgICB0aGlzLnByb2dyZXNzID0gMC4wO1xyXG5cclxuXHQgICAgdmFyIGluaXRpYWxGaWxsID0gZnVuY3Rpb24gaW5pdGlhbEZpbGwoKSB7XHJcblx0ICAgICAgZm9yICh2YXIgeiA9IDA7IHogPCBpbWFnZVNpemU7ICsreikge1xyXG5cdCAgICAgICAgdmFyIGltYWdlWiA9IGltYWdlW3pdID0gW107XHJcblxyXG5cdCAgICAgICAgZm9yICh2YXIgeSA9IDA7IHkgPCBpbWFnZVNpemU7ICsreSkge1xyXG5cdCAgICAgICAgICB2YXIgaW1hZ2VaWSA9IGltYWdlWlt5XSA9IFtdO1xyXG5cclxuXHQgICAgICAgICAgZm9yICh2YXIgeCA9IDA7IHggPCBpbWFnZVNpemU7ICsreCkge1xyXG5cdCAgICAgICAgICAgIHZhciBpbWFnZVpZWCA9IGltYWdlWllbeF0gPSBbMC4wLCAwLjAsIDAuMF07XHJcblx0ICAgICAgICAgIH1cclxuXHQgICAgICAgIH1cclxuXHQgICAgICB9XHJcblxyXG5cdCAgICAgIHN0YXRlID0gU3RhdGVzLk1JWF9TVEVQX0lOSVQ7XHJcblx0ICAgICAgdGhpcy5wcm9ncmVzcyA9IFByb2dyZXNzLklOSVQ7XHJcblx0ICAgIH07XHJcblxyXG5cdCAgICB2YXIgbWl4U3RlcEluaXQgPSBmdW5jdGlvbiBtaXhTdGVwSW5pdCgpIHtcclxuXHJcblx0ICAgICAgc3RlcCA9IHByZXZTdGVwID4+PiAxO1xyXG5cdCAgICAgIE5kID0gaW1hZ2VTaXplO1xyXG5cdCAgICAgIG9jdFNpemUgPSBNYXRoLmZsb29yKE5kIC8gc3RlcCk7XHJcblx0ICAgICAgb2N0U2l6ZTIgPSBvY3RTaXplICogb2N0U2l6ZTtcclxuXHQgICAgICBvY3RNYXNrU2l6ZSA9IE1hdGgubWF4KG9jdFNpemUgLSAxLCAxKTtcclxuXHQgICAgICBvY3RQaXhlbHMgPSBvY3RTaXplICogb2N0U2l6ZSAqIG9jdFNpemU7XHJcblx0ICAgICAgb2N0WiA9IDA7XHJcblx0ICAgICAgb2N0WSA9IDA7XHJcblxyXG5cdCAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb2N0UGl4ZWxzOyArK2kpIHtcclxuXHQgICAgICAgIHRlbXBCdWZmZXJbaV0gPSBbXTtcclxuXHQgICAgICAgIC8vIG9yZGVyIGlzIGludmVydGVkIHRvIHNhdGlzZnkgYysrIG9ic29sZXRlIG9yZGVyXHJcblx0ICAgICAgICB0ZW1wQnVmZmVyW2ldWzJdID0gcmFuZCgpICogMi4wIC0gMS4wO1xyXG5cdCAgICAgICAgdGVtcEJ1ZmZlcltpXVsxXSA9IHJhbmQoKSAqIDIuMCAtIDEuMDtcclxuXHQgICAgICAgIHRlbXBCdWZmZXJbaV1bMF0gPSByYW5kKCkgKiAyLjAgLSAxLjA7XHJcblx0ICAgICAgfVxyXG5cclxuXHQgICAgICBzdGF0ZSA9IFN0YXRlcy5NSVhfU1RFUF9QUk9DRVNTO1xyXG5cdCAgICB9O1xyXG5cclxuXHQgICAgdmFyIG1peFN0ZXBQcm9jZXNzID0gZnVuY3Rpb24gbWl4U3RlcFByb2Nlc3MoKSB7XHJcblx0ICAgICAgZm9yICh2YXIgb2N0WCA9IDA7IG9jdFggPCBvY3RTaXplOyArK29jdFgpIHtcclxuXHQgICAgICAgIHZhciBvY3RaMCA9IG9jdFogLSAxID4+PiAwICYgb2N0TWFza1NpemU7XHJcblx0ICAgICAgICB2YXIgb2N0WjEgPSBvY3RaID4+PiAwICYgb2N0TWFza1NpemU7XHJcblx0ICAgICAgICB2YXIgb2N0WjIgPSBvY3RaICsgMSA+Pj4gMCAmIG9jdE1hc2tTaXplO1xyXG5cdCAgICAgICAgdmFyIG9jdFozID0gb2N0WiArIDIgPj4+IDAgJiBvY3RNYXNrU2l6ZTtcclxuXHJcblx0ICAgICAgICB2YXIgb2N0WTAgPSBvY3RZIC0gMSA+Pj4gMCAmIG9jdE1hc2tTaXplO1xyXG5cdCAgICAgICAgdmFyIG9jdFkxID0gb2N0WSA+Pj4gMCAmIG9jdE1hc2tTaXplO1xyXG5cdCAgICAgICAgdmFyIG9jdFkyID0gb2N0WSArIDEgPj4+IDAgJiBvY3RNYXNrU2l6ZTtcclxuXHQgICAgICAgIHZhciBvY3RZMyA9IG9jdFkgKyAyID4+PiAwICYgb2N0TWFza1NpemU7XHJcblxyXG5cdCAgICAgICAgdmFyIG9jdFgwID0gb2N0WCAtIDEgPj4+IDAgJiBvY3RNYXNrU2l6ZTtcclxuXHQgICAgICAgIHZhciBvY3RYMSA9IG9jdFggPj4+IDAgJiBvY3RNYXNrU2l6ZTtcclxuXHQgICAgICAgIHZhciBvY3RYMiA9IG9jdFggKyAxID4+PiAwICYgb2N0TWFza1NpemU7XHJcblx0ICAgICAgICB2YXIgb2N0WDMgPSBvY3RYICsgMiA+Pj4gMCAmIG9jdE1hc2tTaXplO1xyXG5cclxuXHQgICAgICAgIHZhciB2YWx1ZXMgPSAvL3p5eFxyXG5cdCAgICAgICAgW1xyXG5cdCAgICAgICAgW1xyXG5cdCAgICAgICAgW1xyXG5cdCAgICAgICAgdGVtcEJ1ZmZlcltvY3RaMCAqIG9jdFNpemUyICsgb2N0WTAgKiBvY3RTaXplICsgb2N0WDBdLFxyXG5cdCAgICAgICAgdGVtcEJ1ZmZlcltvY3RaMCAqIG9jdFNpemUyICsgb2N0WTAgKiBvY3RTaXplICsgb2N0WDFdLFxyXG5cdCAgICAgICAgdGVtcEJ1ZmZlcltvY3RaMCAqIG9jdFNpemUyICsgb2N0WTAgKiBvY3RTaXplICsgb2N0WDJdLFxyXG5cdCAgICAgICAgdGVtcEJ1ZmZlcltvY3RaMCAqIG9jdFNpemUyICsgb2N0WTAgKiBvY3RTaXplICsgb2N0WDNdXSxcclxuXHJcblx0ICAgICAgICBbXHJcblx0ICAgICAgICB0ZW1wQnVmZmVyW29jdFowICogb2N0U2l6ZTIgKyBvY3RZMSAqIG9jdFNpemUgKyBvY3RYMF0sXHJcblx0ICAgICAgICB0ZW1wQnVmZmVyW29jdFowICogb2N0U2l6ZTIgKyBvY3RZMSAqIG9jdFNpemUgKyBvY3RYMV0sXHJcblx0ICAgICAgICB0ZW1wQnVmZmVyW29jdFowICogb2N0U2l6ZTIgKyBvY3RZMSAqIG9jdFNpemUgKyBvY3RYMl0sXHJcblx0ICAgICAgICB0ZW1wQnVmZmVyW29jdFowICogb2N0U2l6ZTIgKyBvY3RZMSAqIG9jdFNpemUgKyBvY3RYM11dLFxyXG5cclxuXHQgICAgICAgIFtcclxuXHQgICAgICAgIHRlbXBCdWZmZXJbb2N0WjAgKiBvY3RTaXplMiArIG9jdFkyICogb2N0U2l6ZSArIG9jdFgwXSxcclxuXHQgICAgICAgIHRlbXBCdWZmZXJbb2N0WjAgKiBvY3RTaXplMiArIG9jdFkyICogb2N0U2l6ZSArIG9jdFgxXSxcclxuXHQgICAgICAgIHRlbXBCdWZmZXJbb2N0WjAgKiBvY3RTaXplMiArIG9jdFkyICogb2N0U2l6ZSArIG9jdFgyXSxcclxuXHQgICAgICAgIHRlbXBCdWZmZXJbb2N0WjAgKiBvY3RTaXplMiArIG9jdFkyICogb2N0U2l6ZSArIG9jdFgzXV0sXHJcblxyXG5cdCAgICAgICAgW1xyXG5cdCAgICAgICAgdGVtcEJ1ZmZlcltvY3RaMCAqIG9jdFNpemUyICsgb2N0WTMgKiBvY3RTaXplICsgb2N0WDBdLFxyXG5cdCAgICAgICAgdGVtcEJ1ZmZlcltvY3RaMCAqIG9jdFNpemUyICsgb2N0WTMgKiBvY3RTaXplICsgb2N0WDFdLFxyXG5cdCAgICAgICAgdGVtcEJ1ZmZlcltvY3RaMCAqIG9jdFNpemUyICsgb2N0WTMgKiBvY3RTaXplICsgb2N0WDJdLFxyXG5cdCAgICAgICAgdGVtcEJ1ZmZlcltvY3RaMCAqIG9jdFNpemUyICsgb2N0WTMgKiBvY3RTaXplICsgb2N0WDNdXV0sXHJcblxyXG5cclxuXHJcblx0ICAgICAgICBbXHJcblx0ICAgICAgICBbXHJcblx0ICAgICAgICB0ZW1wQnVmZmVyW29jdFoxICogb2N0U2l6ZTIgKyBvY3RZMCAqIG9jdFNpemUgKyBvY3RYMF0sXHJcblx0ICAgICAgICB0ZW1wQnVmZmVyW29jdFoxICogb2N0U2l6ZTIgKyBvY3RZMCAqIG9jdFNpemUgKyBvY3RYMV0sXHJcblx0ICAgICAgICB0ZW1wQnVmZmVyW29jdFoxICogb2N0U2l6ZTIgKyBvY3RZMCAqIG9jdFNpemUgKyBvY3RYMl0sXHJcblx0ICAgICAgICB0ZW1wQnVmZmVyW29jdFoxICogb2N0U2l6ZTIgKyBvY3RZMCAqIG9jdFNpemUgKyBvY3RYM11dLFxyXG5cclxuXHQgICAgICAgIFtcclxuXHQgICAgICAgIHRlbXBCdWZmZXJbb2N0WjEgKiBvY3RTaXplMiArIG9jdFkxICogb2N0U2l6ZSArIG9jdFgwXSxcclxuXHQgICAgICAgIHRlbXBCdWZmZXJbb2N0WjEgKiBvY3RTaXplMiArIG9jdFkxICogb2N0U2l6ZSArIG9jdFgxXSxcclxuXHQgICAgICAgIHRlbXBCdWZmZXJbb2N0WjEgKiBvY3RTaXplMiArIG9jdFkxICogb2N0U2l6ZSArIG9jdFgyXSxcclxuXHQgICAgICAgIHRlbXBCdWZmZXJbb2N0WjEgKiBvY3RTaXplMiArIG9jdFkxICogb2N0U2l6ZSArIG9jdFgzXV0sXHJcblxyXG5cdCAgICAgICAgW1xyXG5cdCAgICAgICAgdGVtcEJ1ZmZlcltvY3RaMSAqIG9jdFNpemUyICsgb2N0WTIgKiBvY3RTaXplICsgb2N0WDBdLFxyXG5cdCAgICAgICAgdGVtcEJ1ZmZlcltvY3RaMSAqIG9jdFNpemUyICsgb2N0WTIgKiBvY3RTaXplICsgb2N0WDFdLFxyXG5cdCAgICAgICAgdGVtcEJ1ZmZlcltvY3RaMSAqIG9jdFNpemUyICsgb2N0WTIgKiBvY3RTaXplICsgb2N0WDJdLFxyXG5cdCAgICAgICAgdGVtcEJ1ZmZlcltvY3RaMSAqIG9jdFNpemUyICsgb2N0WTIgKiBvY3RTaXplICsgb2N0WDNdXSxcclxuXHJcblx0ICAgICAgICBbXHJcblx0ICAgICAgICB0ZW1wQnVmZmVyW29jdFoxICogb2N0U2l6ZTIgKyBvY3RZMyAqIG9jdFNpemUgKyBvY3RYMF0sXHJcblx0ICAgICAgICB0ZW1wQnVmZmVyW29jdFoxICogb2N0U2l6ZTIgKyBvY3RZMyAqIG9jdFNpemUgKyBvY3RYMV0sXHJcblx0ICAgICAgICB0ZW1wQnVmZmVyW29jdFoxICogb2N0U2l6ZTIgKyBvY3RZMyAqIG9jdFNpemUgKyBvY3RYMl0sXHJcblx0ICAgICAgICB0ZW1wQnVmZmVyW29jdFoxICogb2N0U2l6ZTIgKyBvY3RZMyAqIG9jdFNpemUgKyBvY3RYM11dXSxcclxuXHJcblxyXG5cclxuXHQgICAgICAgIFtcclxuXHQgICAgICAgIFtcclxuXHQgICAgICAgIHRlbXBCdWZmZXJbb2N0WjIgKiBvY3RTaXplMiArIG9jdFkwICogb2N0U2l6ZSArIG9jdFgwXSxcclxuXHQgICAgICAgIHRlbXBCdWZmZXJbb2N0WjIgKiBvY3RTaXplMiArIG9jdFkwICogb2N0U2l6ZSArIG9jdFgxXSxcclxuXHQgICAgICAgIHRlbXBCdWZmZXJbb2N0WjIgKiBvY3RTaXplMiArIG9jdFkwICogb2N0U2l6ZSArIG9jdFgyXSxcclxuXHQgICAgICAgIHRlbXBCdWZmZXJbb2N0WjIgKiBvY3RTaXplMiArIG9jdFkwICogb2N0U2l6ZSArIG9jdFgzXV0sXHJcblxyXG5cdCAgICAgICAgW1xyXG5cdCAgICAgICAgdGVtcEJ1ZmZlcltvY3RaMiAqIG9jdFNpemUyICsgb2N0WTEgKiBvY3RTaXplICsgb2N0WDBdLFxyXG5cdCAgICAgICAgdGVtcEJ1ZmZlcltvY3RaMiAqIG9jdFNpemUyICsgb2N0WTEgKiBvY3RTaXplICsgb2N0WDFdLFxyXG5cdCAgICAgICAgdGVtcEJ1ZmZlcltvY3RaMiAqIG9jdFNpemUyICsgb2N0WTEgKiBvY3RTaXplICsgb2N0WDJdLFxyXG5cdCAgICAgICAgdGVtcEJ1ZmZlcltvY3RaMiAqIG9jdFNpemUyICsgb2N0WTEgKiBvY3RTaXplICsgb2N0WDNdXSxcclxuXHJcblx0ICAgICAgICBbXHJcblx0ICAgICAgICB0ZW1wQnVmZmVyW29jdFoyICogb2N0U2l6ZTIgKyBvY3RZMiAqIG9jdFNpemUgKyBvY3RYMF0sXHJcblx0ICAgICAgICB0ZW1wQnVmZmVyW29jdFoyICogb2N0U2l6ZTIgKyBvY3RZMiAqIG9jdFNpemUgKyBvY3RYMV0sXHJcblx0ICAgICAgICB0ZW1wQnVmZmVyW29jdFoyICogb2N0U2l6ZTIgKyBvY3RZMiAqIG9jdFNpemUgKyBvY3RYMl0sXHJcblx0ICAgICAgICB0ZW1wQnVmZmVyW29jdFoyICogb2N0U2l6ZTIgKyBvY3RZMiAqIG9jdFNpemUgKyBvY3RYM11dLFxyXG5cclxuXHQgICAgICAgIFtcclxuXHQgICAgICAgIHRlbXBCdWZmZXJbb2N0WjIgKiBvY3RTaXplMiArIG9jdFkzICogb2N0U2l6ZSArIG9jdFgwXSxcclxuXHQgICAgICAgIHRlbXBCdWZmZXJbb2N0WjIgKiBvY3RTaXplMiArIG9jdFkzICogb2N0U2l6ZSArIG9jdFgxXSxcclxuXHQgICAgICAgIHRlbXBCdWZmZXJbb2N0WjIgKiBvY3RTaXplMiArIG9jdFkzICogb2N0U2l6ZSArIG9jdFgyXSxcclxuXHQgICAgICAgIHRlbXBCdWZmZXJbb2N0WjIgKiBvY3RTaXplMiArIG9jdFkzICogb2N0U2l6ZSArIG9jdFgzXV1dLFxyXG5cclxuXHJcblxyXG5cdCAgICAgICAgW1xyXG5cdCAgICAgICAgW1xyXG5cdCAgICAgICAgdGVtcEJ1ZmZlcltvY3RaMyAqIG9jdFNpemUyICsgb2N0WTAgKiBvY3RTaXplICsgb2N0WDBdLFxyXG5cdCAgICAgICAgdGVtcEJ1ZmZlcltvY3RaMyAqIG9jdFNpemUyICsgb2N0WTAgKiBvY3RTaXplICsgb2N0WDFdLFxyXG5cdCAgICAgICAgdGVtcEJ1ZmZlcltvY3RaMyAqIG9jdFNpemUyICsgb2N0WTAgKiBvY3RTaXplICsgb2N0WDJdLFxyXG5cdCAgICAgICAgdGVtcEJ1ZmZlcltvY3RaMyAqIG9jdFNpemUyICsgb2N0WTAgKiBvY3RTaXplICsgb2N0WDNdXSxcclxuXHJcblx0ICAgICAgICBbXHJcblx0ICAgICAgICB0ZW1wQnVmZmVyW29jdFozICogb2N0U2l6ZTIgKyBvY3RZMSAqIG9jdFNpemUgKyBvY3RYMF0sXHJcblx0ICAgICAgICB0ZW1wQnVmZmVyW29jdFozICogb2N0U2l6ZTIgKyBvY3RZMSAqIG9jdFNpemUgKyBvY3RYMV0sXHJcblx0ICAgICAgICB0ZW1wQnVmZmVyW29jdFozICogb2N0U2l6ZTIgKyBvY3RZMSAqIG9jdFNpemUgKyBvY3RYMl0sXHJcblx0ICAgICAgICB0ZW1wQnVmZmVyW29jdFozICogb2N0U2l6ZTIgKyBvY3RZMSAqIG9jdFNpemUgKyBvY3RYM11dLFxyXG5cclxuXHQgICAgICAgIFtcclxuXHQgICAgICAgIHRlbXBCdWZmZXJbb2N0WjMgKiBvY3RTaXplMiArIG9jdFkyICogb2N0U2l6ZSArIG9jdFgwXSxcclxuXHQgICAgICAgIHRlbXBCdWZmZXJbb2N0WjMgKiBvY3RTaXplMiArIG9jdFkyICogb2N0U2l6ZSArIG9jdFgxXSxcclxuXHQgICAgICAgIHRlbXBCdWZmZXJbb2N0WjMgKiBvY3RTaXplMiArIG9jdFkyICogb2N0U2l6ZSArIG9jdFgyXSxcclxuXHQgICAgICAgIHRlbXBCdWZmZXJbb2N0WjMgKiBvY3RTaXplMiArIG9jdFkyICogb2N0U2l6ZSArIG9jdFgzXV0sXHJcblxyXG5cdCAgICAgICAgW1xyXG5cdCAgICAgICAgdGVtcEJ1ZmZlcltvY3RaMyAqIG9jdFNpemUyICsgb2N0WTMgKiBvY3RTaXplICsgb2N0WDBdLFxyXG5cdCAgICAgICAgdGVtcEJ1ZmZlcltvY3RaMyAqIG9jdFNpemUyICsgb2N0WTMgKiBvY3RTaXplICsgb2N0WDFdLFxyXG5cdCAgICAgICAgdGVtcEJ1ZmZlcltvY3RaMyAqIG9jdFNpemUyICsgb2N0WTMgKiBvY3RTaXplICsgb2N0WDJdLFxyXG5cdCAgICAgICAgdGVtcEJ1ZmZlcltvY3RaMyAqIG9jdFNpemUyICsgb2N0WTMgKiBvY3RTaXplICsgb2N0WDNdXV1dO1xyXG5cclxuXHJcblxyXG5cclxuXHQgICAgICAgIGZvciAodmFyIGluWiA9IDA7IGluWiA8IHN0ZXA7ICsraW5aKSB7XHJcblx0ICAgICAgICAgIHZhciBpbnRlcnBaID0gaW5aIC8gc3RlcDtcclxuXHQgICAgICAgICAgdmFyIGltYWdlWiA9IG9jdFogKiBzdGVwICsgaW5aO1xyXG5cclxuXHQgICAgICAgICAgdmFyIHZhbHVlc1AgPSAvL3l4XHJcblx0ICAgICAgICAgIFtcclxuXHQgICAgICAgICAgW1xyXG5cdCAgICAgICAgICBjYXRtdWxsUm9tdjNfKHZhbHVlc1swXVswXVswXSwgdmFsdWVzWzFdWzBdWzBdLCB2YWx1ZXNbMl1bMF1bMF0sIHZhbHVlc1szXVswXVswXSwgaW50ZXJwWiksXHJcblx0ICAgICAgICAgIGNhdG11bGxSb212M18odmFsdWVzWzBdWzBdWzFdLCB2YWx1ZXNbMV1bMF1bMV0sIHZhbHVlc1syXVswXVsxXSwgdmFsdWVzWzNdWzBdWzFdLCBpbnRlcnBaKSxcclxuXHQgICAgICAgICAgY2F0bXVsbFJvbXYzXyh2YWx1ZXNbMF1bMF1bMl0sIHZhbHVlc1sxXVswXVsyXSwgdmFsdWVzWzJdWzBdWzJdLCB2YWx1ZXNbM11bMF1bMl0sIGludGVycFopLFxyXG5cdCAgICAgICAgICBjYXRtdWxsUm9tdjNfKHZhbHVlc1swXVswXVszXSwgdmFsdWVzWzFdWzBdWzNdLCB2YWx1ZXNbMl1bMF1bM10sIHZhbHVlc1szXVswXVszXSwgaW50ZXJwWildLFxyXG5cclxuXHQgICAgICAgICAgW1xyXG5cdCAgICAgICAgICBjYXRtdWxsUm9tdjNfKHZhbHVlc1swXVsxXVswXSwgdmFsdWVzWzFdWzFdWzBdLCB2YWx1ZXNbMl1bMV1bMF0sIHZhbHVlc1szXVsxXVswXSwgaW50ZXJwWiksXHJcblx0ICAgICAgICAgIGNhdG11bGxSb212M18odmFsdWVzWzBdWzFdWzFdLCB2YWx1ZXNbMV1bMV1bMV0sIHZhbHVlc1syXVsxXVsxXSwgdmFsdWVzWzNdWzFdWzFdLCBpbnRlcnBaKSxcclxuXHQgICAgICAgICAgY2F0bXVsbFJvbXYzXyh2YWx1ZXNbMF1bMV1bMl0sIHZhbHVlc1sxXVsxXVsyXSwgdmFsdWVzWzJdWzFdWzJdLCB2YWx1ZXNbM11bMV1bMl0sIGludGVycFopLFxyXG5cdCAgICAgICAgICBjYXRtdWxsUm9tdjNfKHZhbHVlc1swXVsxXVszXSwgdmFsdWVzWzFdWzFdWzNdLCB2YWx1ZXNbMl1bMV1bM10sIHZhbHVlc1szXVsxXVszXSwgaW50ZXJwWildLFxyXG5cclxuXHQgICAgICAgICAgW1xyXG5cdCAgICAgICAgICBjYXRtdWxsUm9tdjNfKHZhbHVlc1swXVsyXVswXSwgdmFsdWVzWzFdWzJdWzBdLCB2YWx1ZXNbMl1bMl1bMF0sIHZhbHVlc1szXVsyXVswXSwgaW50ZXJwWiksXHJcblx0ICAgICAgICAgIGNhdG11bGxSb212M18odmFsdWVzWzBdWzJdWzFdLCB2YWx1ZXNbMV1bMl1bMV0sIHZhbHVlc1syXVsyXVsxXSwgdmFsdWVzWzNdWzJdWzFdLCBpbnRlcnBaKSxcclxuXHQgICAgICAgICAgY2F0bXVsbFJvbXYzXyh2YWx1ZXNbMF1bMl1bMl0sIHZhbHVlc1sxXVsyXVsyXSwgdmFsdWVzWzJdWzJdWzJdLCB2YWx1ZXNbM11bMl1bMl0sIGludGVycFopLFxyXG5cdCAgICAgICAgICBjYXRtdWxsUm9tdjNfKHZhbHVlc1swXVsyXVszXSwgdmFsdWVzWzFdWzJdWzNdLCB2YWx1ZXNbMl1bMl1bM10sIHZhbHVlc1szXVsyXVszXSwgaW50ZXJwWildLFxyXG5cclxuXHQgICAgICAgICAgW1xyXG5cdCAgICAgICAgICBjYXRtdWxsUm9tdjNfKHZhbHVlc1swXVsyXVswXSwgdmFsdWVzWzFdWzNdWzBdLCB2YWx1ZXNbMl1bM11bMF0sIHZhbHVlc1szXVszXVswXSwgaW50ZXJwWiksXHJcblx0ICAgICAgICAgIGNhdG11bGxSb212M18odmFsdWVzWzBdWzJdWzFdLCB2YWx1ZXNbMV1bM11bMV0sIHZhbHVlc1syXVszXVsxXSwgdmFsdWVzWzNdWzNdWzFdLCBpbnRlcnBaKSxcclxuXHQgICAgICAgICAgY2F0bXVsbFJvbXYzXyh2YWx1ZXNbMF1bMl1bMl0sIHZhbHVlc1sxXVszXVsyXSwgdmFsdWVzWzJdWzNdWzJdLCB2YWx1ZXNbM11bM11bMl0sIGludGVycFopLFxyXG5cdCAgICAgICAgICBjYXRtdWxsUm9tdjNfKHZhbHVlc1swXVsyXVszXSwgdmFsdWVzWzFdWzNdWzNdLCB2YWx1ZXNbMl1bM11bM10sIHZhbHVlc1szXVszXVszXSwgaW50ZXJwWildXTtcclxuXHJcblxyXG5cclxuXHQgICAgICAgICAgZm9yICh2YXIgaW5ZID0gMDsgaW5ZIDwgc3RlcDsgKytpblkpIHtcclxuXHQgICAgICAgICAgICB2YXIgaW50ZXJwWSA9IGluWSAvIHN0ZXA7XHJcblx0ICAgICAgICAgICAgdmFyIGltYWdlWSA9IG9jdFkgKiBzdGVwICsgaW5ZO1xyXG5cclxuXHQgICAgICAgICAgICB2YXIgdmFsdWUwID0gY2F0bXVsbFJvbXYzXyh2YWx1ZXNQWzBdWzBdLCB2YWx1ZXNQWzFdWzBdLCB2YWx1ZXNQWzJdWzBdLFxyXG5cdCAgICAgICAgICAgIHZhbHVlc1BbM11bMF0sIGludGVycFkpO1xyXG5cdCAgICAgICAgICAgIHZhciB2YWx1ZTEgPSBjYXRtdWxsUm9tdjNfKHZhbHVlc1BbMF1bMV0sIHZhbHVlc1BbMV1bMV0sIHZhbHVlc1BbMl1bMV0sXHJcblx0ICAgICAgICAgICAgdmFsdWVzUFszXVsxXSwgaW50ZXJwWSk7XHJcblx0ICAgICAgICAgICAgdmFyIHZhbHVlMiA9IGNhdG11bGxSb212M18odmFsdWVzUFswXVsyXSwgdmFsdWVzUFsxXVsyXSwgdmFsdWVzUFsyXVsyXSxcclxuXHQgICAgICAgICAgICB2YWx1ZXNQWzNdWzJdLCBpbnRlcnBZKTtcclxuXHQgICAgICAgICAgICB2YXIgdmFsdWUzID0gY2F0bXVsbFJvbXYzXyh2YWx1ZXNQWzBdWzNdLCB2YWx1ZXNQWzFdWzNdLCB2YWx1ZXNQWzJdWzNdLFxyXG5cdCAgICAgICAgICAgIHZhbHVlc1BbM11bM10sIGludGVycFkpO1xyXG5cclxuXHQgICAgICAgICAgICBmb3IgKHZhciBpblggPSAwOyBpblggPCBzdGVwOyArK2luWCkge1xyXG5cdCAgICAgICAgICAgICAgdmFyIGludGVycFggPSBpblggLyBzdGVwO1xyXG5cdCAgICAgICAgICAgICAgdmFyIGltYWdlWCA9IG9jdFggKiBzdGVwICsgaW5YO1xyXG5cclxuXHQgICAgICAgICAgICAgIHZhciBvY3RSZXN1bHQgPSBjYXRtdWxsUm9tdjNfKHZhbHVlMCwgdmFsdWUxLCB2YWx1ZTIsIHZhbHVlMywgaW50ZXJwWCk7XHJcblx0ICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gY3R4LmQoY3R4LnYob2N0UmVzdWx0LCBhbXApLCBpbWFnZVtpbWFnZVpdW2ltYWdlWV1baW1hZ2VYXSk7XHJcblx0ICAgICAgICAgICAgICB2YXIgY2xhbXBlZFJlc3VsdCA9IFtcclxuXHQgICAgICAgICAgICAgIGNsYW1wXyhyZXN1bHRbMF0sIC0xLjAsIDEuMCksXHJcblx0ICAgICAgICAgICAgICBjbGFtcF8ocmVzdWx0WzFdLCAtMS4wLCAxLjApLFxyXG5cdCAgICAgICAgICAgICAgY2xhbXBfKHJlc3VsdFsyXSwgLTEuMCwgMS4wKV07XHJcblxyXG5cclxuXHQgICAgICAgICAgICAgIGltYWdlW2ltYWdlWl1baW1hZ2VZXVtpbWFnZVhdID0gY2xhbXBlZFJlc3VsdDtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgIH1cclxuXHQgICAgICAgIH1cclxuXHQgICAgICB9XHJcblxyXG5cdCAgICAgIG1peFN0ZXBJdGVyYXRpb24rKztcclxuXHQgICAgICB0aGlzLnByb2dyZXNzID0gUHJvZ3Jlc3MuSU5JVCArIChQcm9ncmVzcy5NSVggLSBQcm9ncmVzcy5JTklUKSAqIChtaXhTdGVwSXRlcmF0aW9uIC8gbnVtTWl4U3RlcEl0ZXJhdGlvbnMpO1xyXG5cclxuXHQgICAgICBvY3RZKys7XHJcblx0ICAgICAgaWYgKG9jdFkgPj0gb2N0U2l6ZSkge1xyXG5cdCAgICAgICAgb2N0WSA9IDA7XHJcblx0ICAgICAgICBvY3RaKys7XHJcblx0ICAgICAgICBpZiAob2N0WiA+PSBvY3RTaXplKSB7XHJcblx0ICAgICAgICAgIG9jdFogPSAwO1xyXG5cclxuXHQgICAgICAgICAgcHJldlN0ZXAgPSBzdGVwO1xyXG5cdCAgICAgICAgICBhbXAgPSBNYXRoLnBvdyhhbXAsIGZhZGVEZWdyZWUpO1xyXG5cclxuXHQgICAgICAgICAgaWYgKHByZXZTdGVwIDw9IDEpIHtcclxuXHQgICAgICAgICAgICBzdGF0ZSA9IFN0YXRlcy5TQ0FMSU5HO1xyXG5cdCAgICAgICAgICAgIHRoaXMucHJvZ3Jlc3MgPSBQcm9ncmVzcy5NSVg7XHJcblx0ICAgICAgICAgIH0gZWxzZSB7XHJcblx0ICAgICAgICAgICAgc3RhdGUgPSBTdGF0ZXMuTUlYX1NURVBfSU5JVDtcclxuXHQgICAgICAgICAgfVxyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgIH1cclxuXHQgICAgfTtcclxuXHJcblx0ICAgIC8vIGhhcmRjb2RlZCBzY2FsaW5nIG9mIHRoZSBpbWFnZSB0byBtYWtlIGl0IG1vcmUgc3ltZXRocmljXHJcblx0ICAgIHZhciBzY2FsaW5nID0gZnVuY3Rpb24gc2NhbGluZygpIHtcclxuXHQgICAgICB2YXIgbG93ID0gWy0xLjAsIC0xLjAsIC0xLjBdO1xyXG5cdCAgICAgIHZhciBoaWdoID0gWzAuNSwgMC43LCAxLjBdO1xyXG5cclxuXHQgICAgICBmb3IgKHZhciB6ID0gMDsgeiA8IGltYWdlU2l6ZTsgKyt6KSB7XHJcblx0ICAgICAgICB2YXIgaW1hZ2VaID0gaW1hZ2Vbel07XHJcblxyXG5cdCAgICAgICAgZm9yICh2YXIgeSA9IDA7IHkgPCBpbWFnZVNpemU7ICsreSkge1xyXG5cdCAgICAgICAgICB2YXIgaW1hZ2VaWSA9IGltYWdlWlt5XTtcclxuXHJcblx0ICAgICAgICAgIGZvciAodmFyIHggPSAwOyB4IDwgaW1hZ2VTaXplOyArK3gpIHtcclxuXHQgICAgICAgICAgICB2YXIgaW1hZ2VaWVggPSBpbWFnZVpZW3hdO1xyXG5cdCAgICAgICAgICAgIGltYWdlWllYWzBdID0gY3R4LlgobG93WzBdLCBoaWdoWzBdLCBpbWFnZVpZWFswXSAqIDAuNSArIDAuNSk7XHJcblx0ICAgICAgICAgICAgaW1hZ2VaWVhbMV0gPSBjdHguWChsb3dbMV0sIGhpZ2hbMV0sIGltYWdlWllYWzFdICogMC41ICsgMC41KTtcclxuXHQgICAgICAgICAgICBpbWFnZVpZWFsyXSA9IGN0eC5YKGxvd1syXSwgaGlnaFsyXSwgaW1hZ2VaWVhbMl0gKiAwLjUgKyAwLjUpO1xyXG5cdCAgICAgICAgICB9XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgfVxyXG5cclxuXHQgICAgICBzdGF0ZSA9IFN0YXRlcy5EQVRBX1ZJRVdTO1xyXG5cdCAgICAgIHRoaXMucHJvZ3Jlc3MgPSBQcm9ncmVzcy5TQ0FMSU5HO1xyXG5cdCAgICB9O1xyXG5cclxuXHQgICAgLy8gZmlsbGluZyB6ZCBEYXRhVmlld3NcclxuXHQgICAgdmFyIGRhdGFWaWV3cyA9IGZ1bmN0aW9uIGRhdGFWaWV3cygpIHtcclxuXHQgICAgICBjdHgueWQgPSBpbWFnZVNpemU7XHJcblx0ICAgICAgY3R4LnpkID0gW107XHJcblxyXG5cdCAgICAgIGZvciAodmFyIHogPSAwOyB6IDwgaW1hZ2VTaXplOyArK3opIHtcclxuXHQgICAgICAgIHZhciBpbWFnZVogPSBpbWFnZVt6XTtcclxuXHJcblx0ICAgICAgICB2YXIgcGxhbmUgPSBuZXcgQXJyYXlCdWZmZXIoaW1hZ2VTaXplICogaW1hZ2VTaXplICogMyk7XHJcblx0ICAgICAgICB2YXIgdmlldyA9IG5ldyBEYXRhVmlldyhwbGFuZSk7XHJcblxyXG5cdCAgICAgICAgZm9yICh2YXIgeSA9IDA7IHkgPCBpbWFnZVNpemU7ICsreSkge1xyXG5cdCAgICAgICAgICB2YXIgaW1hZ2VaWSA9IGltYWdlWlt5XTtcclxuXHJcblx0ICAgICAgICAgIGZvciAodmFyIHggPSAwOyB4IDwgaW1hZ2VTaXplOyArK3gpIHtcclxuXHQgICAgICAgICAgICB2YXIgaW1hZ2VaWVggPSBpbWFnZVpZW3hdO1xyXG5cclxuXHQgICAgICAgICAgICB2YXIgcmdiT2Zmc2V0ID0gKHkgKiBpbWFnZVNpemUgKyB4KSAqIDM7XHJcblx0ICAgICAgICAgICAgdmlldy5zZXRVaW50OChyZ2JPZmZzZXQgKyAwLFxyXG5cdCAgICAgICAgICAgIE1hdGguZmxvb3IoY2xhbXBfKDI1Ni4wICogKGltYWdlWllYWzBdICogMC41ICsgMC41KSAtIDAuNSwgMC4wLCAyNTUuMCkpKTtcclxuXHQgICAgICAgICAgICB2aWV3LnNldFVpbnQ4KHJnYk9mZnNldCArIDEsXHJcblx0ICAgICAgICAgICAgTWF0aC5mbG9vcihjbGFtcF8oMjU2LjAgKiAoaW1hZ2VaWVhbMV0gKiAwLjUgKyAwLjUpIC0gMC41LCAwLjAsIDI1NS4wKSkpO1xyXG5cdCAgICAgICAgICAgIHZpZXcuc2V0VWludDgocmdiT2Zmc2V0ICsgMixcclxuXHQgICAgICAgICAgICBNYXRoLmZsb29yKGNsYW1wXygyNTYuMCAqIChpbWFnZVpZWFsyXSAqIDAuNSArIDAuNSkgLSAwLjUsIDAuMCwgMjU1LjApKSk7XHJcblx0ICAgICAgICAgIH1cclxuXHQgICAgICAgIH1cclxuXHJcblx0ICAgICAgICBjdHguemRbel0gPSB2aWV3O1xyXG5cdCAgICAgIH1cclxuXHJcblx0ICAgICAgc3RhdGUgPSBTdGF0ZXMuRklOSVNIRUQ7XHJcblx0ICAgICAgdGhpcy5wcm9ncmVzcyA9IFByb2dyZXNzLkRBVEFfVklFV1M7XHJcblx0ICAgIH07XHJcblxyXG5cdCAgICB0aGlzLnN0ZXAgPSBmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgc3dpdGNoIChzdGF0ZSkge1xyXG5cdCAgICAgICAgY2FzZSBTdGF0ZXMuSU5JVElBTF9GSUxMOmluaXRpYWxGaWxsLmNhbGwodGhpcyk7YnJlYWs7XHJcblx0ICAgICAgICBjYXNlIFN0YXRlcy5NSVhfU1RFUF9JTklUOm1peFN0ZXBJbml0LmNhbGwodGhpcyk7YnJlYWs7XHJcblx0ICAgICAgICBjYXNlIFN0YXRlcy5NSVhfU1RFUF9QUk9DRVNTOm1peFN0ZXBQcm9jZXNzLmNhbGwodGhpcyk7YnJlYWs7XHJcblx0ICAgICAgICBjYXNlIFN0YXRlcy5TQ0FMSU5HOnNjYWxpbmcuY2FsbCh0aGlzKTticmVhaztcclxuXHQgICAgICAgIGNhc2UgU3RhdGVzLkRBVEFfVklFV1M6ZGF0YVZpZXdzLmNhbGwodGhpcyk7YnJlYWs7fVxyXG5cclxuXHJcblx0ICAgICAgcmV0dXJuIHN0YXRlID09IFN0YXRlcy5GSU5JU0hFRDtcclxuXHQgICAgfTtcclxuXHQgIH07XHJcblxyXG5cdCAgdGhpcy5jZiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpO1xyXG5cdCAgdGhpcy5jZi53aWR0aCA9IDA7XHJcblx0ICB0aGlzLmNmLmhlaWdodCA9IDA7XHJcblx0ICB0aGlzLmJmID0gdGhpcy5jZi5nZXRDb250ZXh0KCcyZCcpO1xyXG5cclxuXHQgIHRoaXMuYWYgPSBmdW5jdGlvbiAobWluV2lkdGgsIG1pbkhlaWdodCkge1xyXG5cdCAgICBpZiAodGhpcy5jZi53aWR0aCA8IG1pbldpZHRoIHx8IHRoaXMuY2YuaGVpZ2h0IDwgbWluSGVpZ2h0KSB7XHJcblx0ICAgICAgdGhpcy5jZi53aWR0aCA9IG1pbldpZHRoO1xyXG5cdCAgICAgIHRoaXMuY2YuaGVpZ2h0ID0gbWluSGVpZ2h0O1xyXG5cdCAgICAgIHRoaXMuYmYgPSB0aGlzLmNmLmdldENvbnRleHQoJzJkJyk7XHJcblx0ICAgIH1cclxuXHQgIH07XHJcblxyXG5cdCAgdGhpcy5lZmZlY3RzID0gW107XHJcblxyXG5cdCAgdGhpcy5sb2FkRWZmZWN0ID0gZnVuY3Rpb24gKGVmZmVjdEZpbGVQYXRoLCBvblN1Y2Nlc3NGdW5jLCBvbkZhaWxGdW5jKSB7XHJcblxyXG5cdCAgICBpZiAodGhpcy5lZmZlY3RzW2VmZmVjdEZpbGVQYXRoXSAhPSB1bmRlZmluZWQpIHtcclxuXHJcblx0ICAgICAgdmFyIGVmZmVjdE1vZGVsID0gdGhpcy5lZmZlY3RzW2VmZmVjdEZpbGVQYXRoXTtcclxuXHJcblx0ICAgICAgaWYgKGVmZmVjdE1vZGVsIGluc3RhbmNlb2YgQXJyYXkpIHtcclxuXHQgICAgICAgIGVmZmVjdE1vZGVsW2VmZmVjdE1vZGVsLmxlbmd0aF0gPSBbb25TdWNjZXNzRnVuYywgb25GYWlsRnVuY107XHJcblx0ICAgICAgICByZXR1cm47XHJcblx0ICAgICAgfVxyXG5cclxuXHQgICAgICBvblN1Y2Nlc3NGdW5jKGVmZmVjdE1vZGVsKTtcclxuXHQgICAgICByZXR1cm47XHJcblx0ICAgIH1cclxuXHJcblx0ICAgIHRoaXMuZWZmZWN0c1tlZmZlY3RGaWxlUGF0aF0gPSBbW29uU3VjY2Vzc0Z1bmMsIG9uRmFpbEZ1bmNdXTtcclxuXHJcblx0ICAgIHZhciByZXF1ZXN0ID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XHJcblx0ICAgIHJlcXVlc3Qub3BlbihcIkdFVFwiLCBlZmZlY3RGaWxlUGF0aCwgdHJ1ZSk7XHJcblx0ICAgIHJlcXVlc3QucmVzcG9uc2VUeXBlID0gXCJ0ZXh0XCI7XHJcblx0ICAgIHJlcXVlc3QuY3R4ID0gdGhpcztcclxuXHQgICAgcmVxdWVzdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgaWYgKHJlcXVlc3QucmVhZHlTdGF0ZSA9PSA0KSB7XHJcblx0ICAgICAgICB2YXIgY2FsbGJhY2tzID0gdGhpcy5jdHguZWZmZWN0c1tlZmZlY3RGaWxlUGF0aF07XHJcblxyXG5cdCAgICAgICAgaWYgKHJlcXVlc3Quc3RhdHVzID49IDIwMCAmJiByZXF1ZXN0LnN0YXR1cyA8IDMwMCB8fCByZXF1ZXN0LnN0YXR1cyA9PSAzMDQpIHtcclxuXHJcblx0ICAgICAgICAgIHZhciBldmFsVGV4dCA9IFwiKGZ1bmN0aW9uKGN0eCkge1xcblwiICtcclxuXHQgICAgICAgICAgcmVxdWVzdC5yZXNwb25zZVRleHQgK1xyXG5cdCAgICAgICAgICBcIlxcbnJldHVybiBuZXcgTmV1dHJpbm9FZmZlY3QoY3R4KTtcXG59KSh0aGlzLmN0eCk7XCI7XHJcblx0ICAgICAgICAgIHZhciBlZmZlY3RNb2RlbCA9IGV2YWwoZXZhbFRleHQpO1xyXG5cdCAgICAgICAgICB0aGlzLmN0eC5lZmZlY3RzW2VmZmVjdEZpbGVQYXRoXSA9IGVmZmVjdE1vZGVsO1xyXG5cclxuXHQgICAgICAgICAgY2FsbGJhY2tzLmZvckVhY2goZnVuY3Rpb24gKGNhbGxiYWNrKSB7XHJcblx0ICAgICAgICAgICAgY2FsbGJhY2tbMF0oZWZmZWN0TW9kZWwpO1xyXG5cdCAgICAgICAgICB9KTtcclxuXHJcblx0ICAgICAgICB9IGVsc2Uge1xyXG5cdCAgICAgICAgICBjYWxsYmFja3MuZm9yRWFjaChmdW5jdGlvbiAoY2FsbGJhY2spIHtcclxuXHQgICAgICAgICAgICBjYWxsYmFja1sxXSgpO1xyXG5cdCAgICAgICAgICB9KTtcclxuXHQgICAgICAgIH1cclxuXHQgICAgICB9XHJcblx0ICAgIH07XHJcblxyXG5cdCAgICByZXF1ZXN0LnNlbmQoKTtcclxuXHQgIH07XHJcblxyXG5cdCAgdGhpcy5yZW1vdmVFZmZlY3QgPSBmdW5jdGlvbiAoZWZmZWN0RmlsZVBhdGgpIHtcclxuXHQgICAgZGVsZXRlIHRoaXMuZWZmZWN0c1tlZmZlY3RGaWxlUGF0aF07XHJcblx0ICB9O1xyXG5cdH1cclxuXHJcblx0ZXhwb3J0cy5Db250ZXh0ID0gQ29udGV4dDtcclxuXHJcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuXHJcbn0pKSk7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW5ldXRyaW5vcGFydGljbGVzLnVtZC5qcy5tYXBcclxuIl19
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/neutrinoparticles-runtime/NeutrinoComponent.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'fe372iH4fZOBLxITCZbQxJ2', 'NeutrinoComponent');
// NeutrinoComponent.ts

"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var NeutrinoSettings_1 = require("./NeutrinoSettings");
var NeutrinoContext_1 = require("./NeutrinoContext");
var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
// Cached temporary values.
var _gnwprMat0 = new cc.Mat4();
var _gnwprMat1 = new cc.Mat4();
var _gnwprQuat0 = new cc.Quat();
var _gnwprVec0 = new cc.Vec3();
var _uWPM = new cc.Mat4();
var _nwpos = [0, 0, 0, 0];
var _nwrot = [0, 0, 0, 0];
function propertyValueToNpValue(value) {
    if (value instanceof cc.Vec2) {
        return [value.x, value.y];
    }
    else if (value instanceof cc.Vec3) {
        return [value.x, value.y, value.z];
    }
    else {
        return value;
    }
}
var NeutrinoComponent = /** @class */ (function (_super) {
    __extends(NeutrinoComponent, _super);
    function NeutrinoComponent() {
        var _this_1 = _super !== null && _super.apply(this, arguments) || this;
        _this_1.context = null;
        _this_1._neutrinoEffectModel = null;
        _this_1._neutrinoEffect = null;
        _this_1._spriteFrames = null;
        _this_1._emitterPropsOnStart = {};
        _this_1._texturesRemap = null;
        _this_1._waitingForContext = false;
        _this_1._resetInProgress = false;
        _this_1._numTexturesLoading = 0;
        _this_1._errorOnLoad = false;
        _this_1._worldScale = new cc.Vec3();
        _this_1._destructed = false;
        _this_1._serialized = false;
        _this_1._worldParentId = '';
        _this_1._texturesPrefixPath = '';
        _this_1._spriteAtlas = null;
        _this_1._pausedOnStart = false;
        _this_1._pausedGeneratorsOnStart = false;
        // If true, the component will be destroyed when the effect is empty.
        _this_1.destroyWhenEmpty = false;
        // If true, the node of the component will be destroyed when the effect is empty.
        _this_1.destroyNodeWhenEmpty = false;
        return _this_1;
    }
    Object.defineProperty(NeutrinoComponent.prototype, "worldParent", {
        get: function () {
            return this._findWorldParent();
        },
        set: function (value) {
            this._worldParentId = value ? value.uuid : '';
            this._waitForContextAndReset();
            if (CC_EDITOR) {
                var settings = NeutrinoSettings_1.default.instance();
                if (settings) {
                    settings.defaultWorldParent = value;
                }
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NeutrinoComponent.prototype, "texturesPrefixPath", {
        get: function () {
            return this._texturesPrefixPath;
        },
        set: function (value) {
            this._texturesPrefixPath = value;
            this._waitForContextAndReset();
            if (CC_EDITOR) {
                var settings = NeutrinoSettings_1.default.instance();
                if (settings) {
                    settings.defaultTexturesPrefixPath = value;
                }
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NeutrinoComponent.prototype, "spriteAtlas", {
        get: function () {
            return this._spriteAtlas;
        },
        set: function (value) {
            this._spriteAtlas = value;
            this._waitForContextAndReset();
            if (CC_EDITOR) {
                var settings = NeutrinoSettings_1.default.instance();
                if (settings) {
                    settings.defaultSpriteAtlas = value;
                }
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NeutrinoComponent.prototype, "pausedOnStart", {
        get: function () {
            return this._pausedOnStart;
        },
        set: function (value) {
            this._pausedOnStart = value;
            this._waitForContextAndReset();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NeutrinoComponent.prototype, "pausedGeneratorsOnStart", {
        get: function () {
            return this._pausedGeneratorsOnStart;
        },
        set: function (value) {
            this._pausedGeneratorsOnStart = value;
            this._waitForContextAndReset();
        },
        enumerable: false,
        configurable: true
    });
    NeutrinoComponent.prototype.resetInEditor = function () {
        this._waitForContextAndReset();
    };
    NeutrinoComponent.prototype.onLoad = function () {
        this.context = NeutrinoContext_1.default.instance();
        this.context.ensureNoiseTextureIsGenerated();
        if (!this._serialized) {
            this._serialized = true;
            var settings = NeutrinoSettings_1.default.instance();
            if (settings) {
                this._texturesPrefixPath = settings.defaultTexturesPrefixPath;
                this._spriteAtlas = settings.defaultSpriteAtlas;
                if (settings.defaultWorldParent) {
                    this._worldParentId = settings.defaultWorldParent.uuid;
                }
            }
        }
        this._waitForContextAndReset();
    };
    NeutrinoComponent.prototype.onDestroy = function () {
        if (this._spriteFrames) {
            this._spriteFrames.forEach(function (spriteFrame) {
                if (spriteFrame) {
                    spriteFrame.decRef();
                }
            });
            this._spriteFrames.length = 0;
        }
        if (this._waitingForContext) {
            this.context.off('loaded', this._reset, this);
        }
        this._destructed = true;
    };
    NeutrinoComponent.prototype.update = function (dt) {
        if (!this._neutrinoEffect) {
            return;
        }
        this._getNeutrinoWorldPositionRotation(_nwpos, _nwrot);
        this._neutrinoEffect.update(dt, _nwpos, _nwrot);
        var worldParent = this.worldParent;
        if (worldParent) {
            worldParent.getWorldMatrix(_uWPM);
            this.materials.forEach(function (material) {
                material.setProperty('worldParentMat', _uWPM);
            });
        }
        else {
            this.materials.forEach(function (material) {
                material.setProperty('worldParentMat', cc.Mat4.IDENTITY);
            });
        }
        if (!CC_EDITOR && !this.paused()) {
            if (this.destroyWhenEmpty || this.destroyNodeWhenEmpty) {
                var empty = (this.getNumParticles() === 0);
                if (empty) {
                    if (this.destroyNodeWhenEmpty) {
                        this.node.destroy();
                    }
                    else {
                        this.destroy();
                    }
                }
            }
        }
    };
    /**
     * The component is fully loaded and ready to render.
     * @method ready
     * @return {Boolean} - true if the component is ready to render.
     */
    NeutrinoComponent.prototype.ready = function () {
        return this._neutrinoEffect !== null;
    };
    /**
     * Restarts the effect. Current position and rotation of the node is used
     * to start simulating the effect.
     * @method restart
     */
    NeutrinoComponent.prototype.restart = function () {
        this._getNeutrinoWorldPositionRotation(_nwpos, _nwrot);
        this._neutrinoEffect.restart(_nwpos, _nwrot);
    };
    /**
     * Effect jumps to the current position and rotation of the node without trail
     * effect. Usually used as subsequent call of changing position and rotation.
     * In other words teleports the effect to current position of the node.
     * @method resetPositionRotation
     */
    NeutrinoComponent.prototype.resetPositionRotation = function () {
        this._getNeutrinoWorldPositionRotation(_nwpos, _nwrot);
        this._neutrinoEffect.resetPosition(_nwpos, _nwrot);
    };
    /**
     * Pauses the effect. If effect is not loaded yet, it will be started paused.
     * All particles are frozen when the effect is paused.
     * @method pause
     */
    NeutrinoComponent.prototype.pause = function () {
        if (this.ready()) {
            this._neutrinoEffect.pauseAllEmitters();
        }
        this._pausedOnStart = true;
    };
    /**
     * Unpauses the effect. If the effect is not loaded yet, is will be started unpaused.
     * All particles continues to simulate when the effect is unpaused.
     * @method unpause
     */
    NeutrinoComponent.prototype.unpause = function () {
        if (this.ready()) {
            this._neutrinoEffect.unpauseAllEmitters();
        }
        this._pausedOnStart = false;
    };
    /**
     * Returns true if the effect is paused.
     * @method paused
     * @return {Boolean} - true, if the effect is paused.
     */
    NeutrinoComponent.prototype.paused = function () {
        if (this.ready()) {
            return this._neutrinoEffect.areAllEmittersPaused();
        }
        else {
            return this._pausedOnStart;
        }
    };
    /**
     * Pauses generators. If the effect is not loaded yet, it will be started with paused
     * generators. When generators are paused, no new particles are created, however
     * all created particles continue to simulate.
     * @method pauseGenerators
     */
    NeutrinoComponent.prototype.pauseGenerators = function () {
        if (this.ready()) {
            this._neutrinoEffect.pauseGeneratorsInAllEmitters();
        }
        this._pausedGeneratorsOnStart = true;
    };
    /**
     * Unpauses generators. If the effect is not loaded yet, it will be started with unpaused
     * generators. When generators are unpaused, they generate new particles when
     * necessary.
     * @method unpauseGenerators
     */
    NeutrinoComponent.prototype.unpauseGenerators = function () {
        if (this.ready()) {
            this._neutrinoEffect.unpauseGeneratorsInAllEmitters();
        }
        this._pausedGeneratorsOnStart = false;
    };
    /**
     * Returns true, if generators in the effect are paused.
     * @method generatorsPaused
     * @return {Boolean} - true, if generators are paused
     */
    NeutrinoComponent.prototype.generatorsPaused = function () {
        if (this.ready()) {
            return this._neutrinoEffect.areGeneratorsInAllEmittersPaused();
        }
        else {
            return this._pausedGeneratorsOnStart;
        }
    };
    /**
     * Sets emitter property in all standalone emitters in the effect.
     * @method setPropertyInAllEmitters
     * @param {string} name Name of the property to change.
     * @param {Number | cc.Vec2 | cc.Vec3} value Value of the property.
     * @example
     * effect.setPropertyInAllEmitters('Color', new cc.Vec3(1, 0, 0));
     */
    NeutrinoComponent.prototype.setPropertyInAllEmitters = function (name, value) {
        var npValue = propertyValueToNpValue(value);
        if (this.ready()) {
            this._neutrinoEffect.setPropertyInAllEmitters(name, npValue);
        }
        else {
            this._emitterPropsOnStart[name] = npValue;
        }
    };
    /**
     * Returns a number of active particles in the effect. You can use it to find out if the
     * effect is finished playing.
     * @return {Number} Number of active particles in the effect.
     */
    NeutrinoComponent.prototype.getNumParticles = function () {
        if (this._neutrinoEffect) {
            return this._neutrinoEffect.getNumParticles();
        }
        return 0;
    };
    /**
     * This method is an override of RenderComponent._checkBacth (thank you guys for great spelling!)
     * Here we ignore materials and just check cullingMask. The rest of materials
     * check will be in NeutrinoAssembler.fillBuffers().
     */
    NeutrinoComponent.prototype._checkBacth = function (renderer, cullingMask) {
        if (renderer.cullingMask !== cullingMask) {
            renderer._flush();
            renderer.cullingMask = cullingMask;
        }
        // NeutrinoComponent don't use renderer.node and it can be unchanged.
        // Setting up this property should be done due to consistency with
        // other components and their behavior. However, it will break Spine
        // integration which doesn't expect that attached components will change
        // the renderer.node.
        //renderer.node = renderer._dummyNode;
    };
    NeutrinoComponent.prototype._waitForContextAndReset = function () {
        if (!this.context) {
            return;
        }
        if (!this.context.loaded()) {
            this._waitingForContext = true;
            this.context.once('loaded', this._reset, this);
            return;
        }
        this._reset();
    };
    /**
     * Resets the component: tries to recreate NeutrinoEffect and reload all resources.
     */
    NeutrinoComponent.prototype._reset = function () {
        if (this._resetInProgress || this._destructed) {
            return;
        }
        this._waitingForContext = false;
        var EffectClass = this.getEffectClass();
        if (!EffectClass) {
            cc.error(this.__classname__ + ": you shouldn't use NeutrinoComponent by itself. Use generated effect classes instead.");
            return;
        }
        this._resetInProgress = true;
        this._errorOnLoad = false;
        this._neutrinoEffectModel = new EffectClass(this.context.neutrinoContext);
        this._neutrinoEffect = null;
        // Load textures.
        var numTextures = this._neutrinoEffectModel.textures.length;
        this._spriteFrames = new Array(numTextures);
        this._numTexturesLoading = this._spriteFrames.length;
        for (var texIndex = 0; texIndex < numTextures; ++texIndex) {
            var texturePath = this._texturesPrefixPath + this._neutrinoEffectModel.textures[texIndex];
            var texturePathNoExt = texturePath.replace(/\.[^/.]+$/, "");
            if (this.spriteAtlas) {
                var spriteFrame = this.spriteAtlas.getSpriteFrame(texturePathNoExt);
                if (spriteFrame) {
                    spriteFrame.addRef();
                    this._spriteFrames[texIndex] = spriteFrame;
                    --this._numTexturesLoading;
                }
                else {
                    cc.warn(this.__classname__ + ": Can't load sprite '" + texturePathNoExt + "' from sprite atlas. Will try to load single texture.");
                    this._loadTexture(texIndex, texturePathNoExt);
                }
            }
            else {
                this._loadTexture(texIndex, texturePathNoExt);
            }
        }
        if (this._numTexturesLoading === 0) {
            // TODO: deffer this to the end of the frame
            this._onTexturesLoaded();
        }
    };
    /**
     * Requests standalone texture for load.
     */
    NeutrinoComponent.prototype._loadTexture = function (texIndex, texturePath) {
        var _this_1 = this;
        var _this = this;
        var texturesDb = this.getTexturesDatabase();
        var textureDesc = texturesDb.find(function (tex) { return tex.path === texturePath; });
        var textureLoadFinished = function () {
            --_this._numTexturesLoading;
            if (_this._numTexturesLoading === 0) {
                _this._onTexturesLoaded();
            }
        };
        if (!textureDesc) {
            cc.error(this.__classname__ + ": Can't find texture '" + texturePath + ".");
            this._errorOnLoad = true;
            textureLoadFinished();
            return;
        }
        if (CC_DEV) {
            cc.assetManager.loadAny(textureDesc.uuid, function (err, spriteFrame) {
                if (_this_1._destructed) {
                    return;
                }
                if (err) {
                    cc.error(_this.__classname__ + ": Can't load texture '" + texturePath + "'. " + err);
                    _this._errorOnLoad = true;
                }
                else if (!spriteFrame) {
                    // Redundant check to remove error on multiple reloading in row.
                    cc.warn(_this.__classname__ + ": Loading flow wrong behavior found #1 (don't worry about it)");
                    _this._errorOnLoad = true;
                }
                else {
                    if (spriteFrame instanceof cc.Texture2D) {
                        spriteFrame = new cc.SpriteFrame(spriteFrame);
                    }
                    spriteFrame.addRef();
                    if (!_this._spriteFrames) {
                        // Redundant check to remove error on multiple reloading in row.
                        cc.warn(_this.__classname__ + ": Loading flow wrong behavior found #2 (don't worry about it)");
                        _this._errorOnLoad = true;
                    }
                    else {
                        _this._spriteFrames[texIndex] = spriteFrame;
                    }
                }
                textureLoadFinished();
            });
        }
        else {
            this.context.texturesBundle().load(textureDesc.path, cc.SpriteFrame, function (err, spriteFrame) {
                if (_this_1._destructed) {
                    return;
                }
                if (err) {
                    cc.error(_this.__classname__ + ": Can't load sprite frame '" + texturePath + "'. " + err);
                    _this._errorOnLoad = true;
                }
                else {
                    spriteFrame.addRef();
                    _this._spriteFrames[texIndex] = spriteFrame;
                }
                textureLoadFinished();
            });
        }
    };
    /**
     * When everything is loaded - create neutrino effect.
     */
    NeutrinoComponent.prototype._onTexturesLoaded = function () {
        var _this_1 = this;
        if (this._errorOnLoad) {
            this._resetInProgress = false;
            return;
        }
        this.materials.length = 0;
        var materialsSetupError = false;
        this._neutrinoEffectModel.renderStyles.forEach(function (renderStyle, renderStyleIndex) {
            var texIndex = renderStyle.textureIndices[0];
            var spriteFrame = _this_1._spriteFrames[texIndex];
            if (!spriteFrame) {
                // Redundant check to remove error on multiple reloading in row.
                cc.warn(_this_1.__classname__ + ": Loading flow wrong behavior found #3 (don't worry about it)");
                materialsSetupError = true;
                return;
            }
            var texture = spriteFrame.getTexture();
            if (!texture) {
                // Redundant check to remove error on multiple reloading in row.
                cc.warn(_this_1.__classname__ + ": Loading flow wrong behavior found #4 (don't worry about it)");
                materialsSetupError = true;
                return;
            }
            var materialIndex = _this_1._neutrinoEffectModel.materials[renderStyle.materialIndex];
            var material = _this_1.context.materials[materialIndex * 2 +
                (texture.hasPremultipliedAlpha() ? 1 : 0)];
            if (!material) {
                // Redundant check to remove error on multiple reloading in row.
                cc.warn(_this_1.__classname__ + ": Loading flow wrong behavior found #5 (don't worry about it)");
                materialsSetupError = true;
                return;
            }
            var matVar = _this_1.setMaterial(renderStyleIndex, material);
            matVar.setProperty('texture', texture);
        }, this);
        if (materialsSetupError) {
            this._resetInProgress = false;
            return;
        }
        this._initTexturesRemap();
        this._getNeutrinoWorldPositionRotation(_nwpos, _nwrot);
        this._neutrinoEffect = this._neutrinoEffectModel.createWGLInstance(_nwpos, _nwrot, this._assembler, {
            paused: this._pausedOnStart,
            generatorsPaused: this._pausedGeneratorsOnStart
        });
        this._neutrinoEffect.texturesRemap = this._texturesRemap;
        for (var prop in this._emitterPropsOnStart) {
            this._neutrinoEffect.setPropertyInAllEmitters(prop, this._emitterPropsOnStart[prop]);
        }
        this._emitterPropsOnStart = {};
        this._resetInProgress = false;
    };
    /**
     * In case some of textures are placed on atlases we need to prepare remapping structure for
     * neutrinoparticles.js.
     */
    NeutrinoComponent.prototype._initTexturesRemap = function () {
        var remapNeeded = false;
        for (var texIndex = 0; texIndex < this._spriteFrames.length; ++texIndex) {
            var spriteFrame = this._spriteFrames[texIndex];
            if (spriteFrame.uv[6] !== 1 ||
                spriteFrame.uv[0] !== 0 ||
                spriteFrame.uv[7] !== 0 ||
                spriteFrame.uv[1] !== 1) {
                remapNeeded = true;
                break;
            }
        }
        if (!remapNeeded) {
            this._texturesRemap = [];
            return;
        }
        this._texturesRemap = new Array(this._spriteFrames.length);
        for (var texIndex = 0; texIndex < this._spriteFrames.length; ++texIndex) {
            var spriteFrame = this._spriteFrames[texIndex];
            this._texturesRemap[texIndex] = new this.context.neutrinoContext.SubRect(spriteFrame.uv[0], 1 - spriteFrame.uv[1], spriteFrame.uv[6] - spriteFrame.uv[0], spriteFrame.uv[1] - spriteFrame.uv[7]);
        }
    };
    NeutrinoComponent.prototype._getNeutrinoWorldPositionRotation = function (position, rotation) {
        var worldMatrix = _gnwprMat0;
        var worldRotation = _gnwprQuat0;
        var worldPosition = _gnwprVec0;
        var worldScale = this._worldScale;
        this.node.getWorldMatrix(worldMatrix);
        var worldParent = this.worldParent;
        if (worldParent) {
            var worldParentMatrix = _gnwprMat1;
            worldParent.getWorldMatrix(worldParentMatrix);
            cc.Mat4.invert(worldParentMatrix, worldParentMatrix);
            cc.Mat4.multiply(worldMatrix, worldParentMatrix, worldMatrix);
        }
        cc.Mat4.getRotation(worldRotation, worldMatrix);
        worldMatrix.getTranslation(worldPosition);
        worldMatrix.getScale(worldScale);
        position[0] = worldPosition.x / worldScale.x;
        position[1] = worldPosition.y / worldScale.y;
        position[2] = worldPosition.z / worldScale.z;
        rotation[0] = worldRotation.x;
        rotation[1] = worldRotation.y;
        rotation[2] = worldRotation.z;
        rotation[3] = worldRotation.w;
    };
    NeutrinoComponent.prototype._findWorldParent = function () {
        var node = this.node;
        do {
            if (node.uuid == this._worldParentId) {
                return node;
            }
            node = node.parent;
        } while (node);
        return null;
    };
    __decorate([
        property
    ], NeutrinoComponent.prototype, "_serialized", void 0);
    __decorate([
        property
    ], NeutrinoComponent.prototype, "_worldParentId", void 0);
    __decorate([
        property(cc.Node)
    ], NeutrinoComponent.prototype, "worldParent", null);
    __decorate([
        property
    ], NeutrinoComponent.prototype, "_texturesPrefixPath", void 0);
    __decorate([
        property
    ], NeutrinoComponent.prototype, "texturesPrefixPath", null);
    __decorate([
        property(cc.SpriteAtlas)
    ], NeutrinoComponent.prototype, "_spriteAtlas", void 0);
    __decorate([
        property(cc.SpriteAtlas)
    ], NeutrinoComponent.prototype, "spriteAtlas", null);
    __decorate([
        property
    ], NeutrinoComponent.prototype, "_pausedOnStart", void 0);
    __decorate([
        property
    ], NeutrinoComponent.prototype, "pausedOnStart", null);
    __decorate([
        property
    ], NeutrinoComponent.prototype, "_pausedGeneratorsOnStart", void 0);
    __decorate([
        property
    ], NeutrinoComponent.prototype, "pausedGeneratorsOnStart", null);
    __decorate([
        property
    ], NeutrinoComponent.prototype, "destroyWhenEmpty", void 0);
    __decorate([
        property
    ], NeutrinoComponent.prototype, "destroyNodeWhenEmpty", void 0);
    NeutrinoComponent = __decorate([
        ccclass
    ], NeutrinoComponent);
    return NeutrinoComponent;
}(cc.RenderComponent));
exports.default = NeutrinoComponent;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/neutrinoparticles-runtime/NeutrinoAssemblerWebGL.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '32e92P2G2hLrY8BaVp0+NVh', 'NeutrinoAssemblerWebGL');
// NeutrinoAssemblerWebGL.ts

"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var indices = [0, 1, 3, 1, 2, 3];
var NeutrinoAssembler = /** @class */ (function (_super) {
    __extends(NeutrinoAssembler, _super);
    function NeutrinoAssembler() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._initialized = false;
        _this._currentVertex = 0;
        _this._renderStyleIndex = null;
        _this._vertexFormat = cc.gfx.VertexFormat.XYZ_UV_Color;
        _this._buffer = null;
        _this._bufferOffsetInfo = null;
        _this._modelBatcher = null;
        _this._worldScale = new cc.Vec3();
        return _this;
    }
    NeutrinoAssembler.prototype.fillBuffers = function (comp, modelBatcher) {
        if (!comp._neutrinoEffect || !comp.context.loaded()) {
            return;
        }
        if (!this._initialized) {
            this._buffer = modelBatcher.getBuffer('mesh', this._vertexFormat);
            this._initialized = true;
        }
        this._modelBatcher = modelBatcher;
        this._renderStyleIndex = null;
        this._worldScale = comp._worldScale;
        comp._neutrinoEffect.fillGeometryBuffers([1, 0, 0], [0, 1, 0], [0, 0, -1]);
    };
    // Methods called by neutrinoEffect
    NeutrinoAssembler.prototype.initialize = function (maxNumVertices, texChannels, indices, maxNumRenderCalls) {
    };
    NeutrinoAssembler.prototype.beforeQuad = function (renderStyleIndex) {
        if (this._renderStyleIndex !== renderStyleIndex) {
            var material = this._renderComp.materials[renderStyleIndex];
            if (material) {
                if (material.getHash() !== this._modelBatcher.material.getHash()) {
                    this._modelBatcher._flush();
                    this._modelBatcher.material = material;
                }
            }
            this._renderStyleIndex = renderStyleIndex;
        }
        this._bufferOffsetInfo = this._buffer.request(4, indices.length);
    };
    NeutrinoAssembler.prototype.pushVertex = function (vertex) {
        var oi = this._bufferOffsetInfo;
        var floatsPerVertex = this._vertexFormat._bytes / 4;
        var buffer = this._buffer;
        var floatsBuffer = buffer._vData;
        var uintsBuffer = buffer._uintVData;
        var floatsStart = oi.byteOffset / 4 + this._currentVertex * floatsPerVertex;
        var x = vertex.position[0] * this._worldScale.x;
        var y = vertex.position[1] * this._worldScale.y;
        var z = vertex.position[2] * this._worldScale.z;
        floatsBuffer[floatsStart + 0] = x;
        floatsBuffer[floatsStart + 1] = y;
        floatsBuffer[floatsStart + 2] = z;
        floatsBuffer[floatsStart + 3] = vertex.texCoords[0][0];
        floatsBuffer[floatsStart + 4] = 1.0 - vertex.texCoords[0][1];
        uintsBuffer[floatsStart + 5] =
            (vertex.color[0]) |
                (vertex.color[1] << 8) |
                (vertex.color[2] << 16) |
                (vertex.color[3] << 24);
        ++this._currentVertex;
        if (this._currentVertex == 4) {
            var idicesBuffer = buffer._iData;
            for (var i = 0; i < indices.length; ++i) {
                idicesBuffer[oi.indiceOffset + i] = oi.vertexOffset + indices[i];
            }
            this._currentVertex = 0;
        }
    };
    NeutrinoAssembler.prototype.pushRenderCall = function (rc) {
    };
    NeutrinoAssembler.prototype.cleanup = function () {
    };
    return NeutrinoAssembler;
}(cc.Assembler));
exports.default = NeutrinoAssembler;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/neutrinoparticles-runtime/NeutrinoAssembler.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '7dd47KelZZLyadMohM05ouJ', 'NeutrinoAssembler');
// NeutrinoAssembler.ts

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var NeutrinoAssemblerWebGL_1 = require("./NeutrinoAssemblerWebGL");
var NeutrinoAssemblerJSB_1 = require("./NeutrinoAssemblerJSB");
var NeutrinoAssembler = CC_JSB ? NeutrinoAssemblerJSB_1.default : NeutrinoAssemblerWebGL_1.default;
exports.default = NeutrinoAssembler;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBhY2thZ2VzXFxuZXV0cmlub3BhcnRpY2xlc1xccnVudGltZVxcTmV1dHJpbm9Bc3NlbWJsZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSxtRUFBOEQ7QUFDOUQsK0RBQTBEO0FBRTFELElBQU0saUJBQWlCLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyw4QkFBb0IsQ0FBQyxDQUFDLENBQUMsZ0NBQXNCLENBQUM7QUFDakYsa0JBQWUsaUJBQWlCLENBQUMiLCJmaWxlIjoiIiwic291cmNlUm9vdCI6Ii8iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgTmV1dHJpbm9Bc3NlbWJsZXJXZWJHTCBmcm9tICcuL05ldXRyaW5vQXNzZW1ibGVyV2ViR0wnO1xyXG5pbXBvcnQgTmV1dHJpbm9Bc3NlbWJsZXJKU0IgZnJvbSAnLi9OZXV0cmlub0Fzc2VtYmxlckpTQic7XHJcblxyXG5jb25zdCBOZXV0cmlub0Fzc2VtYmxlciA9IENDX0pTQiA/IE5ldXRyaW5vQXNzZW1ibGVySlNCIDogTmV1dHJpbm9Bc3NlbWJsZXJXZWJHTDtcclxuZXhwb3J0IGRlZmF1bHQgTmV1dHJpbm9Bc3NlbWJsZXI7XHJcbiJdfQ==
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/neutrinoparticles-runtime/NeutrinoContext.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'c5500GPiiNIKKYfuHMFpUCR', 'NeutrinoContext');
// NeutrinoContext.ts

"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var Neutrino = require("./neutrinoparticles.js/neutrinoparticles.umd");
var _a = cc._decorator, ccclass = _a.ccclass, mixins = _a.mixins;
var materialDescs = [
    { uuid: '97KN8e0flOjpWQPC0zIOoR', name: 'NeutrinoNormal' },
    { uuid: 'c5T9A8r8FHY5DeeJSjTP0k', name: 'NeutrinoNormalPremul' },
    { uuid: '369MNzEcVL3Jj5UF9gvCfR', name: 'NeutrinoAdd' },
    { uuid: 'baTMgpxLlFqrJF04VcDxPF', name: 'NeutrinoAddPremul' },
    { uuid: 'a74/Nyb0dDYrv5zAZoAlVP', name: 'NeutrinoMultiply' },
    { uuid: '04mmqJExZKjqgZH4ovqGK7', name: 'NeutrinoMultiplyPremul' },
];
var materialsBundleName = 'neutrinoparticles-materials';
var NeutrinoContext = /** @class */ (function () {
    function NeutrinoContext() {
        this.neutrinoContext = new Neutrino.Context();
        this.materials = new Array(materialDescs.length);
        this._materialsLeftToLoad = this.materials.length;
        this._bundlesLeftToLoad = 0;
        this._noiseGenerationStep = null;
        this._noiseGenerated = false;
        this._texturesBundle = null;
        cc.EventTarget.call(this);
        if (CC_DEV) {
            this._startLoadingForDev();
        }
        else {
            this._startLoadingForBuild();
        }
    }
    NeutrinoContext_1 = NeutrinoContext;
    NeutrinoContext.instance = function () {
        if (!this._singleInstance) {
            this._singleInstance = new NeutrinoContext_1();
        }
        return this._singleInstance;
    };
    NeutrinoContext.prototype.loaded = function () {
        return this._materialsLeftToLoad === 0 && this._bundlesLeftToLoad === 0;
    };
    NeutrinoContext.prototype.startNoiseTextureGeneration = function () {
        if (this._noiseGenerated) {
            return;
        }
        var _this = this;
        var noiseGenerator = new this.neutrinoContext.NoiseGenerator();
        var timerId;
        this._noiseGenerationStep = function () {
            for (var i = 0; i < 100; ++i) {
                if (noiseGenerator.step()) {
                    clearInterval(timerId);
                    _this._noiseGenerationStep = null;
                    _this._noiseGenerated = true;
                    noiseGenerator = null;
                    break;
                }
            }
        };
        timerId = setInterval(this._noiseGenerationStep, 0);
    };
    NeutrinoContext.prototype.ensureNoiseTextureIsGenerated = function () {
        if (this._noiseGenerated) {
            return;
        }
        if (!this._noiseGenerationStep) {
            this.startNoiseTextureGeneration();
        }
        while (this._noiseGenerationStep) {
            this._noiseGenerationStep();
        }
    };
    NeutrinoContext.prototype.texturesBundle = function () {
        return this._texturesBundle;
    };
    NeutrinoContext.prototype._startLoadingForDev = function () {
        var _this = this;
        var _loop_1 = function (matIndex) {
            var _matIndex = matIndex;
            cc.assetManager.loadAny(materialDescs[matIndex].uuid, function (err, material) {
                if (err) {
                    cc.error("NeutrinoContext: can't load material with UUID='" + materialDescs[_matIndex].uuid + "'. " + err);
                    return;
                }
                _this._materialLoaded(material, _matIndex);
            });
        };
        for (var matIndex = 0; matIndex < this.materials.length; ++matIndex) {
            _loop_1(matIndex);
        }
    };
    NeutrinoContext.prototype._startLoadingForBuild = function () {
        var _this_1 = this;
        var _this = this;
        ++this._bundlesLeftToLoad;
        cc.assetManager.loadBundle(materialsBundleName, function (err, bundle) {
            if (err) {
                cc.error("NeutrinoContext: failed to load bundle '" + materialsBundleName + "'. " + err);
                return;
            }
            --_this_1._bundlesLeftToLoad;
            var _loop_2 = function (matIndex) {
                var _matIndex = matIndex;
                bundle.load(materialDescs[matIndex].name, function (err, material) {
                    if (err) {
                        cc.error("NeutrinoContext: can't load material '" + materialDescs[_matIndex].name + "'. " + err);
                        return;
                    }
                    _this._materialLoaded(material, _matIndex);
                });
            };
            for (var matIndex = 0; matIndex < _this_1.materials.length; ++matIndex) {
                _loop_2(matIndex);
            }
        });
        ++this._bundlesLeftToLoad;
        var texturesBundleName = 'neutrinoparticles/textures';
        cc.assetManager.loadBundle(texturesBundleName, function (err, bundle) {
            if (err) {
                cc.error("NeutrinoContext: failed to load bundle '" + texturesBundleName + "'");
                return;
            }
            cc.log("NeutrinoContext: Loaded bundle " + texturesBundleName);
            --_this_1._bundlesLeftToLoad;
            _this_1._texturesBundle = bundle;
            _this_1._checkAndEmitLoadedStatus();
        });
    };
    NeutrinoContext.prototype._materialLoaded = function (material, index) {
        this.materials[index] = material;
        --this._materialsLeftToLoad;
        this._checkAndEmitLoadedStatus();
    };
    NeutrinoContext.prototype._checkAndEmitLoadedStatus = function () {
        if (this.loaded()) {
            this.emit('loaded');
        }
    };
    var NeutrinoContext_1;
    NeutrinoContext = NeutrinoContext_1 = __decorate([
        ccclass('NeutrinoContext'),
        mixins(cc.EventTarget)
    ], NeutrinoContext);
    return NeutrinoContext;
}());
exports.default = NeutrinoContext;
cc.game.once(cc.game.EVENT_GAME_INITED, function () {
    NeutrinoContext.instance().startNoiseTextureGeneration();
});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/neutrinoparticles-runtime/NeutrinoSettings.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'fbcd0MmKjROJoyVC6K9nt1e', 'NeutrinoSettings');
// NeutrinoSettings.ts

"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
/**
 * NeutrinoSettings component is a container for default values of NeutrinoComponent
 * properties. Instance of this class should be a singleton in the scope of a scene
 * and has to be accessed only via cc.NeutrinoSettings.instance() static method. This
 * method creates a node with name '__NeutrinoParticles__' in the root of the scene
 * and attaches NeutrinoSettings component to it. Further properties of the component
 * can be changed in the editor or programmatically.
 */
var NeutrinoSettings = /** @class */ (function (_super) {
    __extends(NeutrinoSettings, _super);
    function NeutrinoSettings() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.defaultWorldParent = null;
        _this.defaultTexturesPrefixPath = '';
        _this.defaultSpriteAtlas = null;
        return _this;
    }
    NeutrinoSettings_1 = NeutrinoSettings;
    NeutrinoSettings.instance = function () {
        var canvas = cc.find('Canvas');
        if (!canvas) {
            return null;
        }
        var settings = canvas.getComponent(NeutrinoSettings_1);
        if (!settings) {
            settings = canvas.addComponent(NeutrinoSettings_1);
            settings.defaultWorldParent = canvas;
        }
        return settings;
    };
    var NeutrinoSettings_1;
    __decorate([
        property(cc.Node)
    ], NeutrinoSettings.prototype, "defaultWorldParent", void 0);
    __decorate([
        property
    ], NeutrinoSettings.prototype, "defaultTexturesPrefixPath", void 0);
    __decorate([
        property(cc.SpriteAtlas)
    ], NeutrinoSettings.prototype, "defaultSpriteAtlas", void 0);
    NeutrinoSettings = NeutrinoSettings_1 = __decorate([
        ccclass
    ], NeutrinoSettings);
    return NeutrinoSettings;
}(cc.Component));
exports.default = NeutrinoSettings;
cc.NeutrinoSettings = NeutrinoSettings;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBhY2thZ2VzXFxuZXV0cmlub3BhcnRpY2xlc1xccnVudGltZVxcTmV1dHJpbm9TZXR0aW5ncy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBTSxJQUFBLEtBQXNCLEVBQUUsQ0FBQyxVQUFVLEVBQWxDLE9BQU8sYUFBQSxFQUFFLFFBQVEsY0FBaUIsQ0FBQztBQUUxQzs7Ozs7OztHQU9HO0FBR0g7SUFBOEMsb0NBQVk7SUFBMUQ7UUFBQSxxRUF3QkM7UUF0Qkcsd0JBQWtCLEdBQUcsSUFBSSxDQUFDO1FBRzFCLCtCQUF5QixHQUFHLEVBQUUsQ0FBQztRQUcvQix3QkFBa0IsR0FBRyxJQUFJLENBQUM7O0lBZ0I5QixDQUFDO3lCQXhCb0IsZ0JBQWdCO0lBVTFCLHlCQUFRLEdBQWY7UUFDSSxJQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ2pDLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDVCxPQUFPLElBQUksQ0FBQztTQUNmO1FBRUQsSUFBSSxRQUFRLEdBQUcsTUFBTSxDQUFDLFlBQVksQ0FBQyxrQkFBZ0IsQ0FBQyxDQUFDO1FBQ3JELElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDWCxRQUFRLEdBQUcsTUFBTSxDQUFDLFlBQVksQ0FBQyxrQkFBZ0IsQ0FBQyxDQUFDO1lBQ2pELFFBQVEsQ0FBQyxrQkFBa0IsR0FBRyxNQUFNLENBQUM7U0FDeEM7UUFFRCxPQUFPLFFBQVEsQ0FBQztJQUNwQixDQUFDOztJQXJCRDtRQURDLFFBQVEsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDO2dFQUNRO0lBRzFCO1FBREMsUUFBUTt1RUFDc0I7SUFHL0I7UUFEQyxRQUFRLENBQUMsRUFBRSxDQUFDLFdBQVcsQ0FBQztnRUFDQztJQVJULGdCQUFnQjtRQURuQyxPQUFPO09BQ1ksZ0JBQWdCLENBd0JwQztJQUFELHVCQUFDO0NBeEJELEFBd0JDLENBeEI2QyxFQUFFLENBQUMsU0FBUyxHQXdCekQ7a0JBeEJvQixnQkFBZ0I7QUEwQnJDLEVBQUUsQ0FBQyxnQkFBZ0IsR0FBRyxnQkFBZ0IsQ0FBQyIsImZpbGUiOiIiLCJzb3VyY2VSb290IjoiLyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHtjY2NsYXNzLCBwcm9wZXJ0eX0gPSBjYy5fZGVjb3JhdG9yO1xyXG5cclxuLyoqXHJcbiAqIE5ldXRyaW5vU2V0dGluZ3MgY29tcG9uZW50IGlzIGEgY29udGFpbmVyIGZvciBkZWZhdWx0IHZhbHVlcyBvZiBOZXV0cmlub0NvbXBvbmVudFxyXG4gKiBwcm9wZXJ0aWVzLiBJbnN0YW5jZSBvZiB0aGlzIGNsYXNzIHNob3VsZCBiZSBhIHNpbmdsZXRvbiBpbiB0aGUgc2NvcGUgb2YgYSBzY2VuZVxyXG4gKiBhbmQgaGFzIHRvIGJlIGFjY2Vzc2VkIG9ubHkgdmlhIGNjLk5ldXRyaW5vU2V0dGluZ3MuaW5zdGFuY2UoKSBzdGF0aWMgbWV0aG9kLiBUaGlzXHJcbiAqIG1ldGhvZCBjcmVhdGVzIGEgbm9kZSB3aXRoIG5hbWUgJ19fTmV1dHJpbm9QYXJ0aWNsZXNfXycgaW4gdGhlIHJvb3Qgb2YgdGhlIHNjZW5lXHJcbiAqIGFuZCBhdHRhY2hlcyBOZXV0cmlub1NldHRpbmdzIGNvbXBvbmVudCB0byBpdC4gRnVydGhlciBwcm9wZXJ0aWVzIG9mIHRoZSBjb21wb25lbnRcclxuICogY2FuIGJlIGNoYW5nZWQgaW4gdGhlIGVkaXRvciBvciBwcm9ncmFtbWF0aWNhbGx5LlxyXG4gKi9cclxuXHJcbiBAY2NjbGFzc1xyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBOZXV0cmlub1NldHRpbmdzIGV4dGVuZHMgY2MuQ29tcG9uZW50IHtcclxuICAgIEBwcm9wZXJ0eShjYy5Ob2RlKVxyXG4gICAgZGVmYXVsdFdvcmxkUGFyZW50ID0gbnVsbDtcclxuXHJcbiAgICBAcHJvcGVydHlcclxuICAgIGRlZmF1bHRUZXh0dXJlc1ByZWZpeFBhdGggPSAnJztcclxuXHJcbiAgICBAcHJvcGVydHkoY2MuU3ByaXRlQXRsYXMpXHJcbiAgICBkZWZhdWx0U3ByaXRlQXRsYXMgPSBudWxsO1xyXG5cclxuICAgIHN0YXRpYyBpbnN0YW5jZSgpIDogTmV1dHJpbm9TZXR0aW5ncyB7XHJcbiAgICAgICAgY29uc3QgY2FudmFzID0gY2MuZmluZCgnQ2FudmFzJyk7XHJcbiAgICAgICAgaWYgKCFjYW52YXMpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgc2V0dGluZ3MgPSBjYW52YXMuZ2V0Q29tcG9uZW50KE5ldXRyaW5vU2V0dGluZ3MpO1xyXG4gICAgICAgIGlmICghc2V0dGluZ3MpIHtcclxuICAgICAgICAgICAgc2V0dGluZ3MgPSBjYW52YXMuYWRkQ29tcG9uZW50KE5ldXRyaW5vU2V0dGluZ3MpO1xyXG4gICAgICAgICAgICBzZXR0aW5ncy5kZWZhdWx0V29ybGRQYXJlbnQgPSBjYW52YXM7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gc2V0dGluZ3M7XHJcbiAgICB9XHJcbn1cclxuXHJcbmNjLk5ldXRyaW5vU2V0dGluZ3MgPSBOZXV0cmlub1NldHRpbmdzOyJdfQ==
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/neutrinoparticles/exported_effects/Bubbles.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '6051d0j6x9B67kIhP3xZfta', 'Bubbles');
// neutrinoparticles/exported_effects/Bubbles.js

"use strict";

// 9a91e6ea-8ef8-44a6-9cb9-0d84d4365ad7
(function (root, factory) {
  if (typeof exports === 'object' && typeof module !== 'undefined') {
    module.exports = factory();
  } else if (typeof define === 'function' && define.amd) {
    define(['exports'], function (exports) {
      (root.NeutrinoEffect = exports)['Bubbles'] = factory();
    });
  } else {
    var namespace = root.NeutrinoEffect || (root.NeutrinoEffect = {});
    namespace.__last__ = namespace['Bubbles'] = factory();
  }
})(typeof self !== 'undefined' ? self : void 0, function () {
  function Bubbles(ctx) {
    var Db = this;

    var ne = function ne(Ld, Bd) {
      this.Ld = Ld;
      this.Bd = Bd;

      if (this.Bd.we.pe.length > 0) {
        this.we = this.Bd.we.pe[0];
        this.Lc = [ne.prototype.Ec, ne.prototype.Fc][this.we.xe];
      } else this.we = null;
    };

    ne.prototype = {
      Ec: function Ec(fe, Ab, Xb) {
        var Gc = ctx.ib(Xb.Md);
        var Hc = Math.cos(Gc);
        var Ic = Math.sin(Gc);
        var ye = ctx.Ae(Xb.Nd[0]);
        var ze = ctx.Ae(Xb.Nd[1]);
        fe.
        /**/
        transform(ye * Hc, ye * Ic, ze * -Ic, ze * Hc, Ab[0], Ab[1]);
      },
      Fc: function Fc(fe, Ab, Xb) {
        var q = Xb.Mc;
        var z2 = 2.0 * q[2] * q[2];
        var xy = 2.0 * q[0] * q[1];
        var wz = 2.0 * q[3] * q[2];
        var ye = ctx.Ae(Xb.Nd[0]);
        var ze = ctx.Ae(Xb.Nd[1]);
        fe.
        /**/
        transform(ye * (1.0 - 2.0 * q[1] * q[1] - z2), ye * (xy + wz), ze * (wz - xy), ze * (2.0 * q[0] * q[0] + z2 - 1.0), Ab[0], Ab[1]);
      },
      Pc: function Pc(fe, Xb, ge) {
        Xb.vc(fe, -1, ge);

        if (this.we) {
          if (this.Be != null && !Xb.oc) {
            if (Xb.Od > 0.001) {
              var De = Math.floor(Xb.Qc % this.we.Rc);
              var Ee = Math.floor(Xb.Qc / this.we.Rc);
              var Ab = Xb.Ab.slice();
              var Nd = Xb.Nd.slice();

              if (!ge || ge.
              /**/
              transform(Ab, Nd)) {
                var df = Math.abs(Nd[0]);
                var ef = Math.abs(Nd[1]);

                if (df > 0.001 && ef > 0.001) {
                  fe.save();
                  this.Lc(fe, Ab, Xb);
                  fe.translate(-df * Xb.Pd[0], -ef * (1 - Xb.Pd[1]));
                  fe.globalAlpha *= Xb.Od;

                  if (Xb.gf[0] < 0.999 || Xb.gf[1] < 0.999 || Xb.gf[2] < 0.999) {
                    if (df >= 1 && ef >= 1) {
                      var Ye = df < this.Tc ? df : this.Tc;
                      var Ze = ef < this.Uc ? ef : this.Uc;
                      ctx.af(Ye, Ze);
                      ctx.bf.globalCompositeOperation = "copy";
                      ctx.bf.drawImage(this.Be.image, this.Be.x + this.Tc * De, this.Be.y + this.Uc * Ee, this.Tc, this.Uc, 0, 0, Ye, Ze);
                      ctx.bf.globalCompositeOperation = "multiply";
                      ctx.bf.fillStyle = ctx.ff(Xb.gf);
                      ctx.bf.fillRect(0, 0, Ye, Ze);
                      ctx.bf.globalCompositeOperation = "destination-atop";
                      ctx.bf.drawImage(this.Be.image, this.Be.x + this.Tc * De, this.Be.y + this.Uc * Ee, this.Tc, this.Uc, 0, 0, Ye, Ze);
                      fe.drawImage(ctx.cf, 0, 0, Ye, Ze, 0, 0, df, ef);
                    }
                  } else {
                    fe.drawImage(this.Be.image, this.Be.x + this.Tc * De, this.Be.y + this.Uc * Ee, this.Tc, this.Uc, 0, 0, df, ef);
                  }

                  fe.restore();
                }
              }
            }
          }
        }

        Xb.vc(fe, 1, ge);
      },
      Hd: function Hd(fe, ge) {
        fe.save();

        if (this.we) {
          fe.globalCompositeOperation = this.Ld.materials[this.Ld.
          /**/
          model.renderStyles[this.we.renderStyleIndex].materialIndex];
          this.Be = this.Ld.textureDescs[this.Ld.
          /**/
          model.renderStyles[this.we.renderStyleIndex].textureIndices[0]];
        } else {
          this.Be = null;
        }

        if (this.Be) {
          this.Tc = this.Be.width / this.we.Rc;
          this.Uc = this.Be.height / this.we.Sc;
        }

        function kd(a, b) {
          if (a.Ab[2] > b.Ab[2]) return 1;
          if (a.Ab[2] < b.Ab[2]) return -1;
          return 0;
        }

        switch (this.Bd.Vc) {
          case 0:
            for (var Wb = 0; Wb < this.Bd.tc.length; ++Wb) {
              this.Pc(fe, this.Bd.tc[Wb], ge);
            }

            break;

          case 1:
            for (var Wb = this.Bd.tc.length; Wb-- > 0;) {
              this.Pc(fe, this.Bd.tc[Wb], ge);
            }

            break;

          case 2:
            this.Bd.tc.sort(kd);

            for (var Wb = 0; Wb < this.Bd.tc.length; ++Wb) {
              this.Pc(fe, this.Bd.tc[Wb], ge);
            }

            break;
        }

        fe.restore();
      }
    };

    var oe = function oe(Ld, Bd) {
      this.Ld = Ld;
      this.Bd = Bd;
      if (this.Bd.we.pe.length > 0) this.we = this.Bd.we.pe[0];else this.we = null;
      this.vertex = [{
        /**/
        position: [0.0, 0.0, 0.0],

        /**/
        color: [0, 0, 0, 0],

        /**/
        texCoords: [[0.0, 0.0]]
      }, {
        /**/
        position: [0.0, 0.0, 0.0],

        /**/
        color: [0, 0, 0, 0],

        /**/
        texCoords: [[0.0, 0.0]]
      }, {
        /**/
        position: [0.0, 0.0, 0.0],

        /**/
        color: [0, 0, 0, 0],

        /**/
        texCoords: [[0.0, 0.0]]
      }, {
        /**/
        position: [0.0, 0.0, 0.0],

        /**/
        color: [0, 0, 0, 0],

        /**/
        texCoords: [[0.0, 0.0]]
      }];
    };

    oe.prototype = {
      qe: function qe(Xb, se, re, te, renderBuffer) {
        Xb.Ce(-1, se, re, te, renderBuffer);

        if (this.we) {
          if (!Xb.oc) {
            var v0 = this.vertex[0];
            var v1 = this.vertex[1];
            var v2 = this.vertex[2];
            var v3 = this.vertex[3];
            var Fe = [],
                Ge = [];

            if (this.we.xe == 0) {
              var a = ctx.ib(Xb.Md);
              var s = -Math.sin(a);
              var c = Math.cos(a);
              Fe[0] = se[0] * c + re[0] * s;
              Fe[1] = se[1] * c + re[1] * s;
              Fe[2] = se[2] * c + re[2] * s;
              Ge[0] = -se[0] * s + re[0] * c;
              Ge[1] = -se[1] * s + re[1] * c;
              Ge[2] = -se[2] * s + re[2] * c;
            } else {
              var q = Xb.Mc;
              var z2 = 2.0 * q[2] * q[2];
              var xy = 2.0 * q[0] * q[1];
              var wz = 2.0 * q[3] * q[2];
              Fe[0] = 1.0 - 2.0 * q[1] * q[1] - z2;
              Fe[1] = xy + wz;
              Fe[2] = 2.0 * q[0] * q[2] - 2.0 * q[3] * q[1];
              Ge[0] = xy - wz;
              Ge[1] = 1.0 - 2.0 * q[0] * q[0] - z2;
              Ge[2] = 2.0 * q[1] * q[2] + 2.0 * q[3] * q[0];
            }

            var He = [],
                Ie = [],
                Je = [],
                Ke = [];
            ctx.u(He, Fe, -Xb.Nd[0] * Xb.Pd[0]);
            ctx.u(Ie, Fe, Xb.Nd[0] * (1.0 - Xb.Pd[0]));
            ctx.u(Je, Ge, -Xb.Nd[1] * Xb.Pd[1]);
            ctx.u(Ke, Ge, Xb.Nd[1] * (1.0 - Xb.Pd[1]));
            ctx.c(v0.
            /**/
            position, He, Je);
            ctx.c(v0.
            /**/
            position, v0.
            /**/
            position, Xb.Ab);
            ctx.c(v1.
            /**/
            position, He, Ke);
            ctx.c(v1.
            /**/
            position, v1.
            /**/
            position, Xb.Ab);
            ctx.c(v2.
            /**/
            position, Ie, Ke);
            ctx.c(v2.
            /**/
            position, v2.
            /**/
            position, Xb.Ab);
            ctx.c(v3.
            /**/
            position, Ie, Je);
            ctx.c(v3.
            /**/
            position, v3.
            /**/
            position, Xb.Ab);
            {
              var rgb = ctx.v(Xb.gf, 255);
              v0.
              /**/
              color = v1.
              /**/
              color = v2.
              /**/
              color = v3.
              /**/
              color = [rgb[0], rgb[1], rgb[2], Xb.Od * 255];
            }
            {
              var De = Math.floor(Xb.Qc % this.we.Rc);
              var Ee = Math.floor(Xb.Qc / this.we.Rc);
              var Pe, Qe, Re, Se;
              var We = this.Ld.texturesRemap[this.Ld.
              /**/
              model.renderStyles[this.we.renderStyleIndex].textureIndices[0]];

              if (We) {
                var Ue = We.width / this.we.Rc;
                var Ve = We.height / this.we.Sc;
                var Pe = We.x + De * Ue;
                var Qe = Pe + Ue;
                var Re = We.y + We.height - Ee * Ve;
                var Se = Re - Ve;
              } else {
                var Ue = 1.0 / this.we.Rc;
                var Ve = 1.0 / this.we.Sc;
                var Pe = De * Ue;
                var Qe = Pe + Ue;
                var Re = 1.0 - Ee * Ve;
                var Se = Re - Ve;
              }

              v0.
              /**/
              texCoords[0] = [Pe, Se];
              v1.
              /**/
              texCoords[0] = [Pe, Re];
              v2.
              /**/
              texCoords[0] = [Qe, Re];
              v3.
              /**/
              texCoords[0] = [Qe, Se];
            }

            if (renderBuffer.beforeQuad) {
              renderBuffer.beforeQuad(this.we.renderStyleIndex);
            }

            renderBuffer.pushVertex(v0);
            renderBuffer.pushVertex(v1);
            renderBuffer.pushVertex(v2);
            renderBuffer.pushVertex(v3);

            if (!renderBuffer.__lastRenderCall) {
              renderBuffer.__lastRenderCall = new ctx.RenderCall(0, 6, this.we.renderStyleIndex);
            } else {
              var lastRenderCall = renderBuffer.__lastRenderCall;

              if (lastRenderCall.renderStyleIndex == this.we.renderStyleIndex) {
                lastRenderCall.numIndices += 6;
              } else {
                renderBuffer.pushRenderCall(lastRenderCall);
                renderBuffer.__lastRenderCall = new ctx.RenderCall(lastRenderCall.startIndex + lastRenderCall.numIndices, 6, this.we.renderStyleIndex);
              }
            }
          }
        }

        Xb.Ce(1, se, re, te, renderBuffer);
      },
      ue: function ue(se, re, te, renderBuffer) {
        switch (this.Bd.Vc) {
          case 0:
            for (var Wb = 0; Wb < this.Bd.tc.length; ++Wb) {
              this.qe(this.Bd.tc[Wb], se, re, te, renderBuffer);
            }

            break;

          case 1:
            for (var Wb = this.Bd.tc.length; Wb-- > 0;) {
              this.qe(this.Bd.tc[Wb], se, re, te, renderBuffer);
            }

            break;

          case 2:
            this.Bd.tc.forEach(function (Xb) {
              Xb.depth = ctx.H(te, Xb.Ab);
            });
            this.Bd.tc.sort(function (a, b) {
              if (a.depth < b.depth) return 1;
              if (a.depth > b.depth) return -1;
              return 0;
            });
            this.Bd.tc.forEach(function (Xb) {
              this.qe(Xb, se, re, te, renderBuffer);
            }, this);
            break;
        }
      }
    };

    var ld = function ld(Ld, we, ve) {
      var Vb = this;
      this.Ld = Ld;
      this.we = we; // Eb

      function Eb() {
        this.Fb = 0;
        this.Gb = 1;
        this.Hb = null;
        this.Ib = null;
        this.Kb = 0;
        this.Lb = 1;
        Vb.we.Mb(this); // IMPL

        this.Nb = function () {
          this.Ob = this.Gb;
          this.Fb = 0;
        };

        this.Nb();
      }

      Eb.prototype = {
        Jd: function Jd() {
          this.Nb();
        },
        Id: function Id(Qb, Ab, Mc) {
          Vb.we.Pb(Qb, Vb, this); // IMPL

          var Rb = Vb.Rb;
          var systemTime = Ld.Rb;
          var Sb = Qb;
          var ic = 0;

          if (this.zb > 0.000001) {
            var Tb = this.Ob + Qb * this.zb;

            while (Tb >= 1.0) {
              var Ub = this.zb < 0.001 ? 0.0 : (1.0 - this.Ob) / this.zb;
              Sb -= Ub;
              Rb += Ub;
              systemTime += Ub;

              if (this.Hb != null && Rb > this.Hb) {
                Vb.disactivate();
                break;
              }

              Vb.Rb = Rb;
              Ld.Rb = systemTime;
              if (Ab && Qb > 0) ctx.ab(Vb.Ab, Ab, Vb.Bb, Sb / Qb);
              if (Mc && Qb > 0) ctx.slerpq(Vb.Mc, Mc, Vb.prevRotation, Sb / Qb); // for the future when Jb would be external

              this.Lb = this.Jb;

              for (var Wb = 0; Wb < this.Jb; ++Wb) {
                if (Vb.sc.length == 0) break;
                if (this.Jb == 1) this.Kb = 0;else this.Kb = Wb / (this.Jb - 1);
                var Xb = Vb.sc.pop();
                Vb.tc.unshift(Xb);
                if (Wb == 0) Xb.Yb();else Xb.Zb();
                Xb.Id(Sb);
                ++ic;
              }

              this.Ob = 0.0;
              Tb -= 1.0;

              if (this.Ib != null && ++this.Fb >= this.Ib) {
                Vb.disactivate();
                break;
              }
            }

            this.Ob = Tb;
          }

          Rb += Sb;
          Vb.Rb = Rb;
          if (Ab) ctx.T(Vb.Ab, Ab);
          if (Mc) ctx.U(Vb.Mc, Mc);
          return ic;
        }
      }; // ac

      function ac() {
        this.Gb = 1;
        this.Kb = 0;
        this.Lb = 1;
        Vb.we.Mb(this); // IMPL

        this.Nb = function () {
          this.bc = this.Gb;
        };

        this.Nb();
      }

      ac.prototype = {
        Jd: function Jd() {
          this.Nb();
        },
        Id: function Id(Qb, Ab, Mc) {
          Vb.we.Pb(Qb, Vb, this); // IMPL

          var cc = Vb.Rb;
          var dc = cc + Qb;
          var systemTimeBeforeFrame = Ld.Rb;
          var systemTimeAfterFrame = systemTimeBeforeFrame + Qb;
          var ec = Ab ? ctx.O(ctx.h(Ab, Vb.Bb)) : 0;
          var ic = 0;

          if (ec > 0.000001) {
            var fc = ec / this.rd;
            var Tb = this.bc + fc;
            var hc = fc < 0.001 ? 1.0 - this.bc : (1.0 - this.bc) / fc;
            var jc = [];

            while (Tb > 1.0) {
              var kc = cc + hc * Qb;
              if (Ab) ctx.ab(jc, Vb.Bb, Ab, hc);
              Vb.Rb = kc;
              ctx.T(Vb.Ab, jc);
              Ld.Rb = ctx.X(systemTimeBeforeFrame, systemTimeAfterFrame, hc); // for the future when Jb would be external

              this.Lb = this.Jb;

              for (var Wb = 0; Wb < this.Jb; ++Wb) {
                if (Vb.sc.length == 0) break;
                if (this.Jb == 1) this.Kb = 0;else this.Kb = Wb / (this.Jb - 1);
                var Xb = Vb.sc.pop();
                Vb.tc.unshift(Xb);
                if (Wb == 0) Xb.Yb();else Xb.Zb();
                Xb.Id(Qb * (1.0 - hc));
                ++ic;
              }

              hc += 1.0 / fc;
              Tb -= 1.0;
            }

            this.bc = Tb;
          }

          Vb.Rb = dc;
          if (Ab) ctx.T(Vb.Ab, Ab);
          if (Mc) ctx.U(Vb.Mc, Mc);
          return ic;
        }
      }; // mc

      function mc() {
        this.Ab = [];
        this.Pd = [];
        this.Nd = [];
        this.gf = [];
        this.Kc = [];
      }

      mc.prototype = {
        nc: function nc() {
          this.oc = false;

          for (var i = 0; i < this.Kc.length; ++i) {
            var pc = this.Kc[i];
            pc.Bd.Jd(this.Ab, null);
            if (pc.Ad.sd) pc.Bd.disactivate();
          }
        },
        Yb: function Yb() {
          Vb.we.fd(Vb, this); // IMPL

          this.nc();
        },
        Zb: function Zb() {
          Vb.we.gd(Vb, this); // IMPL

          this.nc();
        },
        Id: function Id(Qb) {
          Vb.we.qc(Qb, Vb, this); // IMPL

          this.rc(Qb);
        },
        pc: function pc(je) {
          return this.Kc[je].Bd;
        },
        rc: function rc(Qb) {
          for (var i = 0; i < this.Kc.length; i++) {
            this.Kc[i].Bd.Id(Qb, this.Ab, null);
          }
        },
        uc: function uc(md, nd) {
          this.Kc.push({
            Bd: new ld(Ld, md, ve),
            Ad: nd
          });
        },
        vc: function vc(fe, xc, ge) {
          for (var i = 0; i < this.Kc.length; ++i) {
            var pc = this.Kc[i];
            if (xc == pc.Ad.xc) pc.Bd.Hd(fe, ge);
          }
        },
        Ce: function Ce(xc, se, re, te, renderBuffer) {
          for (var i = 0; i < this.Kc.length; ++i) {
            var pc = this.Kc[i];
            if (xc == pc.Ad.xc) pc.Bd.ue(se, re, te, renderBuffer);
          }
        },
        wc: function wc(fe) {
          this.oc = true;

          for (var i = 0; i < this.Kc.length; ++i) {
            var pc = this.Kc[i];

            if (pc.Ad.sd) {
              pc.Bd.activate();
              pc.Bd.Id(0);
            } else pc.Bd.disactivate();
          }
        },
        yc: function yc(Gd) {
          for (var i = 0; i < this.Kc.length; ++i) {
            this.Kc[i].Bd.Ed(Gd);
          }
        }
      }; // zc

      function zc() {}

      zc.prototype.Ac = function (Xb) {
        return Vb.we.Cc(Vb, Xb, this); // IMPL
      }; // ld Ad


      this.Ab = [];
      this.Bb = [];
      this.Mc = [];
      this.prevRotation = [];
      this.tc = [];
      this.sc = [];
      this.Wc = new zc();
      this.construct = new ve(this.Ld, this);
      this.Yc = [];
      this.ad = [];

      this.dd = function () {
        this.vd = new Eb();
      };

      this.ed = function () {
        this.vd = new ac();
      };

      this.we.ud(this); // IMPL

      for (var Wb = 0; Wb < this.jd; ++Wb) {
        var Xb = new mc();

        for (var id = 0; id < this.Yc.length; ++id) {
          var hd = this.Yc[id];
          Xb.uc(hd.Db, hd.Ad);
        }

        this.sc.push(Xb);
      }

      this.Nb = function (Ab, Mc) {
        ctx.T(this.Ab, Ab ? Ab : [0, 0, 0]);
        ctx.T(this.Bb, this.Ab);
        ctx.U(this.Mc, Mc ? Mc : [0, 0, 0, 1]);
        ctx.U(this.prevRotation, this.Mc);
        this.Rb = 0.0;
        this.wd = 0.0;
        this.Zc = true;
        this.paused_ = false;
        this.generatorsPaused_ = false;
        ctx.W(this.ad, 0, 0, 0);
      };
    };

    ld.prototype.Jd = function (Ab, Mc) {
      this.Nb(Ab, Mc);
      this.sc.push.apply(this.sc, this.tc);
      this.tc.length = 0;
      this.vd.Jd();
    };

    ld.prototype.Id = function (Qb, Ab, Mc) {
      if (this.paused_) {
        this.Td(Ab, Mc);
        return;
      }

      this.wd = this.Rb;

      if (Ab) {
        ctx.T(this.Bb, this.Ab);

        if (Qb > 0.0001) {
          var shift = [];
          ctx.g(shift, Ab, this.Bb);
          ctx.T(this.ad, shift);
          ctx.w(this.ad, this.ad, Qb);
        } else {
          ctx.W(this.ad, 0, 0, 0);
        }
      } else {
        ctx.W(this.ad, 0, 0, 0);
      }

      if (Mc) {
        ctx.U(this.prevRotation, this.Mc);
      }

      var ic;

      if (this.Zc && !this.generatorsPaused_) {
        ic = this.vd.Id(Qb, Ab, Mc);
      } else {
        if (Ab) ctx.T(this.Ab, Ab);
        if (Mc) ctx.U(this.Mc, Mc);
        ic = 0;
        this.Rb += Qb;
      }

      for (var Wb = ic; Wb < this.tc.length;) {
        var Xb = this.tc[Wb];

        if (!Xb.oc) {
          Xb.Id(Qb);

          if (this.Wc.Ac(this.tc[Wb])) {
            Xb.wc();
            if (this.xd(Wb)) continue;
          }
        } else {
          Xb.rc(Qb);
          if (this.xd(Wb)) continue;
        }

        ++Wb;
      }
    };

    ld.prototype.xd = function (je) {
      var Xb = this.tc[je];
      var ready = true;

      for (var id = 0; id < Xb.Kc.length; ++id) {
        var Bd = Xb.Kc[id].Bd;

        if (Bd.activated() || Bd.tc.length > 0) {
          ready = false;
          break;
        }
      }

      if (ready) {
        this.sc.push(this.tc[je]);
        this.tc.splice(je, 1);
        return true;
      }

      return false;
    };

    ld.prototype.Hd = function (fe, ge) {
      this.construct.Hd(fe, ge);
    };

    ld.prototype.ue = function (se, re, te, renderBuffer) {
      this.construct.ue(se, re, te, renderBuffer);
    };

    ld.prototype.Td = function (Ab, Mc) {
      this.wd = this.Rb;

      if (Ab) {
        ctx.T(this.Bb, this.Ab);
        ctx.T(this.Ab, Ab);
      }

      if (Mc) {
        ctx.U(this.prevRotation, this.Mc);
        ctx.U(this.Mc, Mc);
      }
    };

    ld.prototype.uc = function (md, nd) {
      this.Yc.push({
        Db: md,
        Ad: nd
      });
    };

    ld.prototype.
    /**/
    pause = function () {
      this.paused_ = true;
    };

    ld.prototype.
    /**/
    unpause = function () {
      this.paused_ = false;
    };

    ld.prototype.
    /**/
    paused = function () {
      return this.paused_;
    };

    ld.prototype.
    /**/
    pauseGenerators = function () {
      this.generatorsPaused_ = true;
    };

    ld.prototype.
    /**/
    unpauseGenerators = function () {
      this.generatorsPaused_ = false;
    };

    ld.prototype.
    /**/
    generatorsPaused = function () {
      return this.generatorsPaused_;
    };

    ld.prototype.activate = function () {
      this.Zc = true;
    };

    ld.prototype.disactivate = function () {
      this.Zc = false;
    };

    ld.prototype.activated = function () {
      return this.Zc;
    };

    ld.prototype.
    /**/
    getNumParticles = function () {
      return this.tc.length;
    };

    var ke = function ke() {
      var Cb = this;

      this._init = function (we, Ab, Mc, ve, options) {
        this.
        /**/
        model = we;
        this.Ab = [];
        this.Mc = []; // ke Ad

        this.od = [];

        this.pd = function (md) {
          var Bd = new ld(this, md, ve);
          Bd.Nb(this.Ab, this.Mc);
          this["_".concat(md.name)] = Bd;
          this.od.push(Bd);
        };

        this.Nb = function (Ab, Mc) {
          this.Cd = 0.0;
          this.Rb = 0.0;
          ctx.T(this.Ab, Ab ? Ab : [0, 0, 0]);
          ctx.U(this.Mc, Mc ? Mc : [0, 0, 0, 1]);
        };

        this.Nb(Ab, Mc);
        this.
        /**/
        model.qd(this); // IMPL

        this._presimNeeded = true;

        if (options.generatorsPaused) {
          this.
          /**/
          pauseGeneratorsInAllEmitters();
        }

        if (options.paused) {
          this.
          /**/
          pauseAllEmitters();
        } else {
          this.zeroUpdate();
          this.updateFixed(this.Ud, Ab, Mc, this.presimFrameTime);
          this._presimNeeded = false;
        }
      };
    };

    ke.prototype.
    /**/
    restart = function (
    /**/
    position,
    /**/
    rotation,
    /**/
    options) {
      this.Nb(
      /**/
      position ?
      /**/
      position : this.Ab,
      /**/
      rotation ?
      /**/
      rotation : this.Mc);
      this._presimNeeded = true;

      for (var i = 0; i < this.od.length; ++i) {
        this.od[i].Jd(this.Ab, this.Mc);
      }

      this._presimNeeded = true;

      if (options && options.generatorsPaused) {
        this.
        /**/
        pauseGeneratorsInAllEmitters();
      }

      if (options && options.paused) {
        this.
        /**/
        pauseAllEmitters();
      } else {
        this.zeroUpdate();
        this.updateFixed(this.Ud, this.Ab, this.Mc, this.presimFrameTime);
        this._presimNeeded = false;
      }
    };

    ke.prototype.zeroUpdate = function () {
      for (var i = 0; i < this.od.length; ++i) {
        this.od[i].Id(0, this.Ab, this.Mc);
      }
    };

    ke.prototype.
    /**/
    update = function (
    /**/
    dt,
    /**/
    position,
    /**/
    rotation) {
      if (this.Dd > 0.0) this.updateFixed(
      /**/
      dt,
      /**/
      position,
      /**/
      rotation, this.Dd);else this.updateFlex(
      /**/
      dt,
      /**/
      position,
      /**/
      rotation);
    };

    ke.prototype.updateFixed = function (
    /**/
    dt,
    /**/
    position,
    /**/
    rotation,
    /**/
    frameTime) {
      var updatedTime = 0.0;
      var hc = [];
      ctx.T(hc, this.Ab);
      var frameRotation = [];
      ctx.U(frameRotation, this.Mc);
      if (
      /**/
      position && ctx.equalv3_(
      /**/
      position, this.Ab))
        /**/
        position = null;
      if (
      /**/
      rotation && ctx.equalq_(
      /**/
      rotation, this.Mc))
        /**/
        rotation = null;

      while (
      /**/
      dt - updatedTime + this.Cd >=
      /**/
      frameTime) {
        var cc = this.Rb;
        if (
        /**/
        position) ctx.ab(hc, this.Ab,
        /**/
        position, updatedTime /
        /**/
        dt);
        if (
        /**/
        rotation) ctx.slerpq(frameRotation, this.Mc,
        /**/
        rotation, updatedTime /
        /**/
        dt);

        for (var i = 0; i < this.od.length; ++i) {
          this.od[i].Id(
          /**/
          frameTime, hc, frameRotation);
          this.Rb = cc;
        }

        updatedTime +=
        /**/
        frameTime - this.Cd;
        this.Cd = 0.0;
        this.Rb = cc +
        /**/
        frameTime;
      }

      if (
      /**/
      position) ctx.T(this.Ab,
      /**/
      position);
      if (
      /**/
      rotation) ctx.U(this.Mc,
      /**/
      rotation);
      this.Cd +=
      /**/
      dt - updatedTime;
    };

    ke.prototype.updateFlex = function (
    /**/
    dt,
    /**/
    position,
    /**/
    rotation) {
      var cc = this.Rb;

      for (var i = 0; i < this.od.length; ++i) {
        this.od[i].Id(
        /**/
        dt,
        /**/
        position,
        /**/
        rotation);
        this.Rb = cc;
      }

      this.Rb = cc +
      /**/
      dt;
      if (
      /**/
      position) ctx.T(this.Ab,
      /**/
      position);
      if (
      /**/
      rotation) ctx.U(this.Mc,
      /**/
      rotation);
    };

    ke.prototype.
    /**/
    resetPosition = function (
    /**/
    position,
    /**/
    rotation) {
      if (
      /**/
      position) ctx.T(this.Ab,
      /**/
      position);
      if (
      /**/
      rotation) ctx.U(this.Mc,
      /**/
      rotation);

      for (var i = 0; i < this.od.length; ++i) {
        this.od[i].Td(this.Ab, this.Mc);
      }
    };

    ke.prototype.
    /**/
    setPropertyInAllEmitters = function (
    /**/
    name,
    /**/
    value) {
      var propName = "_".concat(
      /**/
      name);

      if (
      /**/
      value instanceof Array) {
        if (
        /**/
        value.length == 2) {
          for (var i = 0; i < this.od.length; ++i) {
            ctx.S(this.od[i][propName],
            /**/
            value);
          }
        } else {
          for (var i = 0; i < this.od.length; ++i) {
            ctx.T(this.od[i][propName],
            /**/
            value);
          }
        }
      } else {
        for (var i = 0; i < this.od.length; ++i) {
          this.od[i][propName] =
          /**/
          value;
        }
      }
    };

    ke.prototype.
    /**/
    pauseAllEmitters = function () {
      for (var i = 0; i < this.od.length; ++i) {
        this.od[i].
        /**/
        pause();
      }
    };

    ke.prototype.
    /**/
    unpauseAllEmitters = function () {
      for (var i = 0; i < this.od.length; ++i) {
        this.od[i].
        /**/
        unpause();
      }

      this.zeroUpdate();

      if (this._presimNeeded) {
        this.updateFixed(this.Ud, this.Ab, this.Mc, this.presimFrameTime);
        this._presimNeeded = false;
      }
    };

    ke.prototype.
    /**/
    areAllEmittersPaused = function () {
      for (var i = 0; i < this.od.length; ++i) {
        if (!this.od[i].paused()) return false;
      }

      return true;
    };

    ke.prototype.
    /**/
    pauseGeneratorsInAllEmitters = function () {
      for (var i = 0; i < this.od.length; ++i) {
        this.od[i].
        /**/
        pauseGenerators();
      }
    };

    ke.prototype.
    /**/
    unpauseGeneratorsInAllEmitters = function () {
      for (var i = 0; i < this.od.length; ++i) {
        this.od[i].
        /**/
        unpauseGenerators();
      }
    };

    ke.prototype.
    /**/
    areGeneratorsInAllEmittersPaused = function () {
      for (var i = 0; i < this.od.length; ++i) {
        if (!this.od[i].generatorsPaused()) return false;
      }

      return true;
    };

    ke.prototype.
    /**/
    getNumParticles = function () {
      var numParticles = 0;

      for (var i = 0; i < this.od.length; ++i) {
        numParticles += this.od[i].getNumParticles();
      }

      return numParticles;
    };

    var le = function le() {
      this._init = function (we, Ab, Mc, renderBuffer, options) {
        le.prototype._init.call(this, we, Ab, Mc, oe, options);

        this.texturesRemap = [];
        var indices = [];
        {
          var verDisp;

          for (var Wb = 0; Wb < this.
          /**/
          model.Xe; ++Wb) {
            verDisp = Wb * 4;
            indices.push(verDisp + 0, verDisp + 3, verDisp + 1, verDisp + 1, verDisp + 3, verDisp + 2);
          }
        }
        this.renderBuffer = renderBuffer;
        this.renderBuffer.initialize(this.
        /**/
        model.Xe * 4, [2], indices, this.
        /**/
        model.Xe);
        this.renderBuffer.__numIndices = 0;
      };
    };

    le.prototype = new ke();

    le.prototype.
    /**/
    fillGeometryBuffers = function (
    /**/
    cameraRight,
    /**/
    cameraUp,
    /**/
    cameraDir) {
      this.renderBuffer.cleanup();
      this.renderBuffer.__lastRenderCall = null;
      this.od.forEach(function (Bd) {
        Bd.ue(
        /**/
        cameraRight,
        /**/
        cameraUp,
        /**/
        cameraDir, this.renderBuffer);
      }, this);
      if (this.renderBuffer.__lastRenderCall) this.renderBuffer.pushRenderCall(this.renderBuffer.__lastRenderCall);
    };

    var me = function me() {
      this._init = function (we, Ab, Mc, options) {
        me.prototype._init.call(this, we, Ab, Mc, ne, options);

        this.materials = [];
        this.
        /**/
        model.materials.forEach(function (value) {
          this.materials.push(['source-over', 'lighter', 'multiply'][value]);
        }, this);
        this.
        /**/
        textureDescs = [];
      };
    };

    me.prototype = new ke();

    me.prototype.
    /**/
    draw = function (
    /**/
    context,
    /**/
    camera) {
      for (var i = 0; i < this.od.length; ++i) {
        this.od[i].Hd(
        /**/
        context,
        /**/
        camera);
      }
    };

    this.createWGLInstance = function (
    /**/
    position,
    /**/
    rotation,
    /**/
    renderBuffer,
    /**/
    options) {
      var Ld = new le();

      Ld._init(this,
      /**/
      position,
      /**/
      rotation,
      /**/
      renderBuffer,
      /**/
      options || {});

      return Ld;
    };

    this.createCanvas2DInstance = function (
    /**/
    position,
    /**/
    rotation,
    /**/
    options) {
      var Ld = new me();

      Ld._init(this,
      /**/
      position,
      /**/
      rotation,
      /**/
      options || {});

      return Ld;
    };

    this.textures = ['blurable_bubble.png'];
    this.materials = [0];
    this.renderStyles = [{
      materialIndex: 0,
      textureIndices: [0]
    }];
    this.Xe = 600;

    function Emitter_DefaultEmitter() {
      var _1,
          _3,
          _4 = [],
          _4i,
          _4s = [],
          _5,
          _6 = [],
          _9,
          _9i0,
          _9s0 = [],
          _11,
          _11i0,
          _11s0 = [],
          _12,
          _13,
          _14 = [],
          _14a = [],
          _14i = [],
          _15,
          _15i0,
          _15s0 = [],
          _16 = [],
          _16a = [],
          _16i = [],
          _17 = [],
          _17fs = [],
          _17vs = [],
          _17rw = [],
          _17rwn = [],
          _17rwl,
          _17v = [],
          _17p = [],
          _17dtl,
          _17dtp,
          _17df,
          _17fsd = [],
          _19,
          _19i0,
          _19s0 = [],
          _20,
          _21,
          _21i0,
          _21s0 = [],
          _18,
          _22,
          _23,
          _23i0,
          _23s0 = [],
          _24,
          _25,
          _25i0,
          _25s0 = [];

      this.pe = [{
        xe: 0,
        Rc: 8,
        Sc: 1,
        renderStyleIndex: 0
      }];
      this.name = "DefaultEmitter";

      this.ud = function (Bd) {
        Bd.dd();
        Bd._4 = [[[-69.7778, 597.194], [-11.7124, 597.628], [46.354, 597.847], [104.423, 597.967], [162.495, 598.028], [220.562, 598.054], [278.633, 598.057], [336.702, 598.048], [394.77, 598.035], [452.839, 598.026], [510.91, 598.03], [568.977, 598.055], [627.048, 598.117], [685.118, 598.236], [743.184, 598.456], [801.25, 598.889], [801.25, 598.889]]];
        Bd._9 = [[[5.07027, 15.7745, 15.7745]]];
        Bd._11 = [[[4, 2, 2]]];
        Bd._15 = [[[0, 4.3328, 25.796, 65.888, 125.577, 204.724, 301.348, 411.012, 526.867, 640.732, 744.903, 833.676, 903.891, 954.566, 986.181, 1000, 1000]]];
        Bd._19 = [[[2.50205, 1, 1], [1, 1.31557, 1.31557]]];
        Bd._21 = [[[0.583734, 1, 1], [1, 0.757178, 0.757178]]];
        Bd._23 = [[[0, 1, 1], [1, 1, 1], [1, 0, 0]]];
        Bd._25 = [[[7.68724, 0, 0], [0, 7.74979, 7.74979]]];
        Bd.jd = 600;
        Bd.Vc = 2;
      };

      this.Mb = function (vd) {
        vd.zb = 60;
        vd.Gb = 1;
        vd.Jb = 1;
      };

      this.Pb = function (Qb, Bd, vd) {
        vd.zb = 60;
      };

      this.fd = function (Bd, Xb) {
        Xb._ = 0.0;
        _1 = 0 + Bd.Ld.rand() * (1 - 0);
        Xb._2 = _1;
        _3 = 0 + Bd.Ld.rand() * (1 - 0);
        _4i = Db.kb(_3);
        ctx.V(_4s, 0, (_4i - 0) * 15);
        Db.lb(_4, Bd._4[_4s[0]], _4s[1]);
        _5 = -400 + Bd.Ld.rand() * (400 - -400);
        ctx.W(_6, _4[0], _4[1], _5);
        Xb._7 = [];
        ctx.T(Xb._7, _6);
        Xb._8 = [];
        ctx.T(Xb._8, [0, 0, 0]);
        _9i0 = Xb._2 < 0 ? 0 : Xb._2 > 1 ? 1 : Xb._2;
        ctx.V(_9s0, 0, (_9i0 - 0) * 1);
        _9 = Db.nb(Bd._9[0][_9s0[0]], _9s0[1]);
        Xb._10 = _9;
        ctx.T(Xb.Ab, Xb._7);
      };

      this.gd = function (Bd, Xb) {
        Xb._ = 0.0;
        _1 = 0 + Bd.Ld.rand() * (1 - 0);
        Xb._2 = _1;
        _3 = 0 + Bd.Ld.rand() * (1 - 0);
        _4i = Db.kb(_3);
        ctx.V(_4s, 0, (_4i - 0) * 15);
        Db.lb(_4, Bd._4[_4s[0]], _4s[1]);
        _5 = -400 + Bd.Ld.rand() * (400 - -400);
        ctx.W(_6, _4[0], _4[1], _5);
        Xb._7 = [];
        ctx.T(Xb._7, _6);
        Xb._8 = [];
        ctx.T(Xb._8, [0, 0, 0]);
        _9i0 = Xb._2 < 0 ? 0 : Xb._2 > 1 ? 1 : Xb._2;
        ctx.V(_9s0, 0, (_9i0 - 0) * 1);
        _9 = Db.nb(Bd._9[0][_9s0[0]], _9s0[1]);
        Xb._10 = _9;
        ctx.T(Xb.Ab, Xb._7);
      };

      this.qc = function (Qb, Bd, Xb) {
        Xb._ += Qb;
        _11i0 = Xb._2 < 0 ? 0 : Xb._2 > 1 ? 1 : Xb._2;
        ctx.V(_11s0, 0, (_11i0 - 0) * 1);
        _11 = Db.nb(Bd._11[0][_11s0[0]], _11s0[1]);
        _12 = ctx.d(Xb._7, ctx.v([0, 40, -200], Bd.Rb));
        _13 = ctx.d(Xb._7, ctx.v([0, 200, -50], Bd.Rb));
        ctx.u(_14a, [0, 0, 0], Bd.Ld.Rb);
        ctx.c(_14a, _14a, _13);
        ctx.u(_14i, _14a, 1.0 / 5000);
        ctx.xb(_14, _14i);
        ctx.k(_14, _14, [0.0078125, 0.0078125, 0.0078125]);
        ctx.c(_14, _14, [-1, -1, -1]);
        ctx.u(_14, _14, 1);
        _15i0 = _14[2] < -1 ? -1 : _14[2] > 1 ? 1 : _14[2];
        ctx.V(_15s0, 0, (_15i0 - -1) * 7.5);
        _15 = Db.nb(Bd._15[0][_15s0[0]], _15s0[1]);
        ctx.u(_16a, [0, 0, 0], Bd.Ld.Rb);
        ctx.c(_16a, _16a, _12);
        ctx.u(_16i, _16a, 1.0 / 1000);
        ctx.xb(_16, _16i);
        ctx.k(_16, _16, [0.0078125, 0.0078125, 0.0078125]);
        ctx.c(_16, _16, [-1, -1, -1]);
        ctx.u(_16, _16, _15);
        ctx.T(_17fs, [0, -100, 0]);
        ctx.c(_17fs, _17fs, _16);
        ctx.T(_17vs, [0, 0, 0]);
        _17dtl = Qb;
        ctx.T(_17v, Xb._8);
        ctx.T(_17p, Xb._7);

        while (_17dtl > 0.0001) {
          _17dtp = _17dtl;
          ctx.T(_17fsd, _17fs);
          ctx.g(_17rw, _17vs, _17v);
          _17rwl = ctx.P(_17rw);

          if (_17rwl > 0.0001) {
            _17rwl = Math.sqrt(_17rwl);
            ctx.w(_17rwn, _17rw, _17rwl);
            _17df = 0.01 * _11 * _17rwl;
            if (_17df * _17dtp > 0.2) _17dtp = 0.2 / _17df;
            ctx.c(_17fsd, _17fsd, ctx.v(_17rwn, _17rwl * _17df));
          }

          ctx.c(_17v, _17v, ctx.v(_17fsd, _17dtp));
          ctx.c(_17p, _17p, ctx.v(_17v, _17dtp));
          _17dtl -= _17dtp;
        }

        ctx.T(Xb._7, _17p);
        ctx.T(Xb._8, _17v);
        ctx.T(Xb.Ab, Xb._7);
        _19i0 = Xb._7[2] < -400 ? -400 : Xb._7[2] > 400 ? 400 : Xb._7[2];
        _19i0 < 1 ? ctx.V(_19s0, 0, (_19i0 - -400) * 0.00249377) : ctx.V(_19s0, 1, (_19i0 - 1) * 0.00250627);
        _19 = Db.nb(Bd._19[0][_19s0[0]], _19s0[1]);
        _20 = Xb._10 * _19;
        _21i0 = Xb._7[2] < -400 ? -400 : Xb._7[2] > 400 ? 400 : Xb._7[2];
        _21i0 < 0 ? ctx.V(_21s0, 0, (_21i0 - -400) * 0.0025) : ctx.V(_21s0, 1, (_21i0 - 0) * 0.0025);
        _21 = Db.nb(Bd._21[0][_21s0[0]], _21s0[1]);
        _18 = 10;
        _22 = Xb._ / _18;
        _23i0 = _22 < 0 ? 0 : _22 > 1 ? 1 : _22;
        _23i0 < 0.9 ? _23i0 < 0.1 ? ctx.V(_23s0, 0, (_23i0 - 0) * 10) : ctx.V(_23s0, 1, (_23i0 - 0.1) * 1.25) : ctx.V(_23s0, 2, (_23i0 - 0.9) * 10);
        _23 = Db.nb(Bd._23[0][_23s0[0]], _23s0[1]);
        _24 = _21 * _23;
        _25i0 = Xb._7[2] < -400 ? -400 : Xb._7[2] > 400 ? 400 : Xb._7[2];
        _25i0 < 0 ? ctx.V(_25s0, 0, (_25i0 - -400) * 0.0025) : ctx.V(_25s0, 1, (_25i0 - 0) * 0.0025);
        _25 = Db.nb(Bd._25[0][_25s0[0]], _25s0[1]);
        ctx.S(Xb.Pd, [0.5, 0.5]);
        Xb.Md = 0;
        ctx.V(Xb.Nd, _20, _20);
        ctx.T(Xb.gf, [1, 1, 1]);
        Xb.Od = _24;
        Xb.Qc = _25 < 0 ? 0 : _25 >= 8 ? 7 : _25;
      };

      this.Cc = function (Bd, Xb, Wc) {
        _18 = 10;
        if (Xb._ > _18) return true;
        return false;
      };
    }

    this.qd = function (Ld) {
      Ld.Dd = 0.0333333;
      Ld.Ud = 15;
      Ld.presimFrameTime = 0.1;

      Ld.rand = function () {
        return Math.random();
      };

      Ld.pd(new Emitter_DefaultEmitter());
    };

    this.kb = function (v) {
      return v < 0 ? 0 : v > 1 ? 1 : v;
    };

    this.lb = function (r, path, je) {
      var indexInt = Math.floor(je);
      var lerp = je - indexInt;
      ctx.Y(r, path[indexInt], path[indexInt + 1], lerp);
    };

    this.nb = function (funcValues, je) {
      var indexInt = Math.floor(je);
      var nextInt = indexInt + 1;
      return ctx.X(funcValues[indexInt], funcValues[nextInt], je - indexInt);
    };
  }

  return Bubbles;
});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/Controller/GameController.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'dfec3bBGHdHY4ShHxSUTm+E', 'GameController');
// Script/Controller/GameController.ts

"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GameController = void 0;
var constants_1 = require("../Data/constants");
var AudioManager_1 = require("../Plugin/AudioManager");
var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
var GameController = /** @class */ (function (_super) {
    __extends(GameController, _super);
    function GameController() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.AudioManager = null;
        return _this;
    }
    GameController.prototype.onLoad = function () {
    };
    GameController.prototype.start = function () {
        window.gameReady && window.gameReady();
    };
    GameController.prototype.installHandle = function () {
        console.log("install");
        this.AudioManager.stopAllSound();
        constants_1.Constants.ironSource.isEndGame = true;
        window.gameEnd && window.gameEnd();
        //If ad network is tiktok
        if (typeof (playableSDK) != "undefined") {
            window.playableSDK.openAppStore();
            return;
        }
        // If ad network is google ads
        if (typeof (ExitApi) != "undefined") {
            ExitApi.exit();
            return;
        }
        // If ad netwrok is ironsources
        if (typeof (dapi) != "undefined") {
            dapi.openStoreUrl();
            return;
        }
        // If ad network support MRAID 2.0
        if (typeof (mraid) != "undefined") {
            if (cc.sys.os == cc.sys.OS_ANDROID || cc.sys.os == cc.sys.ANDROID) {
                mraid.open("https://play.google.com/store/apps/details?id=com.an.savetheeggs.drawtosave");
                return;
            }
            if (cc.sys.os == cc.sys.OS_IOS || cc.sys.os == cc.sys.IPHONE || cc.sys.os == cc.sys.IPAD) {
                mraid.open("https://itunes.apple.com/us/app/id6477533955?mt=8");
                return;
            }
            mraid.open("https://play.google.com/store/apps/details?id=com.an.savetheeggs.drawtosave");
            return;
        }
        // If ad network is mindwork. window alway avaiable so skip undefined check
        window.install && window.install();
    };
    __decorate([
        property(AudioManager_1.default)
    ], GameController.prototype, "AudioManager", void 0);
    GameController = __decorate([
        ccclass
    ], GameController);
    return GameController;
}(cc.Component));
exports.GameController = GameController;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0XFxDb250cm9sbGVyXFxHYW1lQ29udHJvbGxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsK0NBQThDO0FBRTlDLHVEQUFrRDtBQUU1QyxJQUFBLEtBQXdCLEVBQUUsQ0FBQyxVQUFVLEVBQW5DLE9BQU8sYUFBQSxFQUFFLFFBQVEsY0FBa0IsQ0FBQztBQUc1QztJQUFvQyxrQ0FBWTtJQUFoRDtRQUFBLHFFQXdEQztRQXRERyxrQkFBWSxHQUFpQixJQUFJLENBQUM7O0lBc0R0QyxDQUFDO0lBcERhLCtCQUFNLEdBQWhCO0lBRUEsQ0FBQztJQUVTLDhCQUFLLEdBQWY7UUFDSSxNQUFNLENBQUMsU0FBUyxJQUFJLE1BQU0sQ0FBQyxTQUFTLEVBQUUsQ0FBQztJQUMzQyxDQUFDO0lBR00sc0NBQWEsR0FBcEI7UUFFSSxPQUFPLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxZQUFZLENBQUMsWUFBWSxFQUFFLENBQUM7UUFDakMscUJBQVMsQ0FBQyxVQUFVLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQztRQUN0QyxNQUFNLENBQUMsT0FBTyxJQUFJLE1BQU0sQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUVuQyx5QkFBeUI7UUFDekIsSUFBSSxPQUFPLENBQUMsV0FBVyxDQUFDLElBQUksV0FBVyxFQUFFO1lBQ3JDLE1BQU0sQ0FBQyxXQUFXLENBQUMsWUFBWSxFQUFFLENBQUM7WUFDbEMsT0FBTztTQUNWO1FBRUQsOEJBQThCO1FBQzlCLElBQUksT0FBTyxDQUFDLE9BQU8sQ0FBQyxJQUFJLFdBQVcsRUFBRTtZQUNqQyxPQUFPLENBQUMsSUFBSSxFQUFFLENBQUM7WUFDZixPQUFPO1NBQ1Y7UUFFRCwrQkFBK0I7UUFDL0IsSUFBSSxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksV0FBVyxFQUFFO1lBQzlCLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztZQUNwQixPQUFPO1NBQ1Y7UUFFRCxrQ0FBa0M7UUFDbEMsSUFBSSxPQUFNLENBQUMsS0FBSyxDQUFDLElBQUksV0FBVyxFQUFFO1lBQzlCLElBQUksRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLElBQUksRUFBRSxDQUFDLEdBQUcsQ0FBQyxVQUFVLElBQUksRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLElBQUksRUFBRSxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUU7Z0JBQy9ELEtBQUssQ0FBQyxJQUFJLENBQUMsNkVBQTZFLENBQUMsQ0FBQztnQkFDMUYsT0FBTzthQUNWO1lBRUQsSUFBSSxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsSUFBSSxFQUFFLENBQUMsR0FBRyxDQUFDLE1BQU0sSUFBSSxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsSUFBSSxFQUFFLENBQUMsR0FBRyxDQUFDLE1BQU0sSUFBSSxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsSUFBSSxFQUFFLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRTtnQkFDdEYsS0FBSyxDQUFDLElBQUksQ0FBQyxtREFBbUQsQ0FBQyxDQUFDO2dCQUNoRSxPQUFPO2FBQ1Y7WUFFRCxLQUFLLENBQUMsSUFBSSxDQUFDLDZFQUE2RSxDQUFDLENBQUM7WUFDMUYsT0FBTztTQUNWO1FBQ0QsMkVBQTJFO1FBQzNFLE1BQU0sQ0FBQyxPQUFPLElBQUksTUFBTSxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQ3ZDLENBQUM7SUFyREQ7UUFEQyxRQUFRLENBQUMsc0JBQVksQ0FBQzt3REFDVztJQUZ6QixjQUFjO1FBRDFCLE9BQU87T0FDSyxjQUFjLENBd0QxQjtJQUFELHFCQUFDO0NBeERELEFBd0RDLENBeERtQyxFQUFFLENBQUMsU0FBUyxHQXdEL0M7QUF4RFksd0NBQWMiLCJmaWxlIjoiIiwic291cmNlUm9vdCI6Ii8iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb25zdGFudHMgfSBmcm9tIFwiLi4vRGF0YS9jb25zdGFudHNcIjtcclxuXHJcbmltcG9ydCBBdWRpb01hbmFnZXIgZnJvbSBcIi4uL1BsdWdpbi9BdWRpb01hbmFnZXJcIjtcclxuXHJcbmNvbnN0IHsgY2NjbGFzcywgcHJvcGVydHkgfSA9IGNjLl9kZWNvcmF0b3I7XHJcbiBcclxuQGNjY2xhc3NcclxuZXhwb3J0IGNsYXNzIEdhbWVDb250cm9sbGVyIGV4dGVuZHMgY2MuQ29tcG9uZW50IHtcclxuICAgIEBwcm9wZXJ0eShBdWRpb01hbmFnZXIpXHJcbiAgICBBdWRpb01hbmFnZXI6IEF1ZGlvTWFuYWdlciA9IG51bGw7XHJcblxyXG4gICAgcHJvdGVjdGVkIG9uTG9hZCgpOiB2b2lkIHtcclxuICAgICAgICBcclxuICAgIH1cclxuICAgIFxyXG4gICAgcHJvdGVjdGVkIHN0YXJ0KCk6IHZvaWQge1xyXG4gICAgICAgIHdpbmRvdy5nYW1lUmVhZHkgJiYgd2luZG93LmdhbWVSZWFkeSgpO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICBwdWJsaWMgaW5zdGFsbEhhbmRsZSgpOiB2b2lkIHtcclxuXHJcbiAgICAgICAgY29uc29sZS5sb2coXCJpbnN0YWxsXCIpO1xyXG4gICAgICAgIHRoaXMuQXVkaW9NYW5hZ2VyLnN0b3BBbGxTb3VuZCgpO1xyXG4gICAgICAgIENvbnN0YW50cy5pcm9uU291cmNlLmlzRW5kR2FtZSA9IHRydWU7XHJcbiAgICAgICAgd2luZG93LmdhbWVFbmQgJiYgd2luZG93LmdhbWVFbmQoKTtcclxuXHJcbiAgICAgICAgLy9JZiBhZCBuZXR3b3JrIGlzIHRpa3Rva1xyXG4gICAgICAgIGlmICh0eXBlb2YgKHBsYXlhYmxlU0RLKSAhPSBcInVuZGVmaW5lZFwiKSB7XHJcbiAgICAgICAgICAgIHdpbmRvdy5wbGF5YWJsZVNESy5vcGVuQXBwU3RvcmUoKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gSWYgYWQgbmV0d29yayBpcyBnb29nbGUgYWRzXHJcbiAgICAgICAgaWYgKHR5cGVvZiAoRXhpdEFwaSkgIT0gXCJ1bmRlZmluZWRcIikge1xyXG4gICAgICAgICAgICBFeGl0QXBpLmV4aXQoKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gSWYgYWQgbmV0d3JvayBpcyBpcm9uc291cmNlc1xyXG4gICAgICAgIGlmICh0eXBlb2YgKGRhcGkpICE9IFwidW5kZWZpbmVkXCIpIHtcclxuICAgICAgICAgICAgZGFwaS5vcGVuU3RvcmVVcmwoKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gSWYgYWQgbmV0d29yayBzdXBwb3J0IE1SQUlEIDIuMFxyXG4gICAgICAgIGlmICh0eXBlb2YobXJhaWQpICE9IFwidW5kZWZpbmVkXCIpIHtcclxuICAgICAgICAgICAgaWYgKGNjLnN5cy5vcyA9PSBjYy5zeXMuT1NfQU5EUk9JRCB8fCBjYy5zeXMub3MgPT0gY2Muc3lzLkFORFJPSUQpIHtcclxuICAgICAgICAgICAgICAgIG1yYWlkLm9wZW4oXCJodHRwczovL3BsYXkuZ29vZ2xlLmNvbS9zdG9yZS9hcHBzL2RldGFpbHM/aWQ9Y29tLmFuLnNhdmV0aGVlZ2dzLmRyYXd0b3NhdmVcIik7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChjYy5zeXMub3MgPT0gY2Muc3lzLk9TX0lPUyB8fCBjYy5zeXMub3MgPT0gY2Muc3lzLklQSE9ORSB8fCBjYy5zeXMub3MgPT0gY2Muc3lzLklQQUQpIHtcclxuICAgICAgICAgICAgICAgIG1yYWlkLm9wZW4oXCJodHRwczovL2l0dW5lcy5hcHBsZS5jb20vdXMvYXBwL2lkNjQ3NzUzMzk1NT9tdD04XCIpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBtcmFpZC5vcGVuKFwiaHR0cHM6Ly9wbGF5Lmdvb2dsZS5jb20vc3RvcmUvYXBwcy9kZXRhaWxzP2lkPWNvbS5hbi5zYXZldGhlZWdncy5kcmF3dG9zYXZlXCIpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIElmIGFkIG5ldHdvcmsgaXMgbWluZHdvcmsuIHdpbmRvdyBhbHdheSBhdmFpYWJsZSBzbyBza2lwIHVuZGVmaW5lZCBjaGVja1xyXG4gICAgICAgIHdpbmRvdy5pbnN0YWxsICYmIHdpbmRvdy5pbnN0YWxsKCk7XHJcbiAgICB9XHJcbn1cclxuXHJcbiJdfQ==
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/Plugin/Grid.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '61538TfVY1GW6TtuV29v/v0', 'Grid');
// Script/Plugin/Grid.ts

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Grid = void 0;
var Grid = /** @class */ (function () {
    // Constructor chỉ nhận một đối số là kích thước của lưới
    function Grid(size) {
        this.obstacles = new Set();
        this.width = size;
        this.height = size;
    }
    Grid.prototype.setObstacle = function (x, y) {
        this.obstacles.add(x + "," + y);
    };
    // Phương thức để lấy vị trí trên lưới từ tọa độ thế giới
    Grid.prototype.getNodePosition = function (node) {
        var position = node.position;
        // Chuyển đổi từ tọa độ thế giới về tọa độ lưới
        return {
            x: Math.floor(position.x / 32),
            y: Math.floor(position.y / 32)
        };
    };
    // Phương thức để lấy tọa độ thế giới từ tọa độ lưới
    Grid.prototype.getWorldPosition = function (x, y) {
        // Chuyển đổi từ tọa độ lưới về tọa độ thế giới
        return new cc.Vec3(x * 32, y * 32, 0); // Giả sử kích thước mỗi ô là 32x32
    };
    Grid.prototype.isWalkable = function (x, y) {
        return this.isInBounds(x, y) && this.grid[x][y] === 0;
    };
    Grid.prototype.isInBounds = function (x, y) {
        return x >= 0 && y >= 0 && x < this.grid.length && y < this.grid[0].length;
    };
    return Grid;
}());
exports.Grid = Grid;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0XFxQbHVnaW5cXEdyaWQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7SUFNSSx5REFBeUQ7SUFDekQsY0FBWSxJQUFZO1FBSmhCLGNBQVMsR0FBZ0IsSUFBSSxHQUFHLEVBQUUsQ0FBQztRQUt2QyxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQztRQUNsQixJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQztJQUN2QixDQUFDO0lBRU0sMEJBQVcsR0FBbEIsVUFBbUIsQ0FBUyxFQUFFLENBQVM7UUFDbkMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUksQ0FBQyxTQUFJLENBQUcsQ0FBQyxDQUFDO0lBQ3BDLENBQUM7SUFHQyx5REFBeUQ7SUFDbEQsOEJBQWUsR0FBdEIsVUFBdUIsSUFBYTtRQUNsQyxJQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDO1FBQy9CLCtDQUErQztRQUMvQyxPQUFPO1lBQ0gsQ0FBQyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUM7WUFDOUIsQ0FBQyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUM7U0FDakMsQ0FBQztJQUNOLENBQUM7SUFFRCxvREFBb0Q7SUFDN0MsK0JBQWdCLEdBQXZCLFVBQXdCLENBQVMsRUFBRSxDQUFTO1FBQ3hDLCtDQUErQztRQUMvQyxPQUFPLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxtQ0FBbUM7SUFDOUUsQ0FBQztJQUdNLHlCQUFVLEdBQWpCLFVBQWtCLENBQVMsRUFBRSxDQUFTO1FBQ2xDLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDMUQsQ0FBQztJQUVNLHlCQUFVLEdBQWpCLFVBQWtCLENBQVMsRUFBRSxDQUFTO1FBQ2xDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUM7SUFDL0UsQ0FBQztJQUNMLFdBQUM7QUFBRCxDQXpDQSxBQXlDQyxJQUFBO0FBekNZLG9CQUFJIiwiZmlsZSI6IiIsInNvdXJjZVJvb3QiOiIvIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNsYXNzIEdyaWQge1xyXG4gICAgcHJpdmF0ZSB3aWR0aDogbnVtYmVyO1xyXG4gICAgcHJpdmF0ZSBoZWlnaHQ6IG51bWJlcjtcclxuICAgIHByaXZhdGUgb2JzdGFjbGVzOiBTZXQ8c3RyaW5nPiA9IG5ldyBTZXQoKTtcclxuICAgIHByaXZhdGUgZ3JpZDogbnVtYmVyW11bXTtcclxuXHJcbiAgICAvLyBDb25zdHJ1Y3RvciBjaOG7iSBuaOG6rW4gbeG7mXQgxJHhu5FpIHPhu5EgbMOgIGvDrWNoIHRoxrDhu5tjIGPhu6dhIGzGsOG7m2lcclxuICAgIGNvbnN0cnVjdG9yKHNpemU6IG51bWJlcikge1xyXG4gICAgICAgIHRoaXMud2lkdGggPSBzaXplO1xyXG4gICAgICAgIHRoaXMuaGVpZ2h0ID0gc2l6ZTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2V0T2JzdGFjbGUoeDogbnVtYmVyLCB5OiBudW1iZXIpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLm9ic3RhY2xlcy5hZGQoYCR7eH0sJHt5fWApO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAgIC8vIFBoxrDGoW5nIHRo4bupYyDEkeG7gyBs4bqleSB24buLIHRyw60gdHLDqm4gbMaw4bubaSB04burIHThu41hIMSR4buZIHRo4bq/IGdp4bubaVxyXG4gICAgICBwdWJsaWMgZ2V0Tm9kZVBvc2l0aW9uKG5vZGU6IGNjLk5vZGUpOiB7IHg6IG51bWJlciwgeTogbnVtYmVyIH0ge1xyXG4gICAgICAgIGNvbnN0IHBvc2l0aW9uID0gbm9kZS5wb3NpdGlvbjtcclxuICAgICAgICAvLyBDaHV54buDbiDEkeG7lWkgdOG7qyB04buNYSDEkeG7mSB0aOG6vyBnaeG7m2kgduG7gSB04buNYSDEkeG7mSBsxrDhu5tpXHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgeDogTWF0aC5mbG9vcihwb3NpdGlvbi54IC8gMzIpLCAvLyBHaeG6oyBz4butIGvDrWNoIHRoxrDhu5tjIG3hu5dpIMO0IGzDoCAzMngzMlxyXG4gICAgICAgICAgICB5OiBNYXRoLmZsb29yKHBvc2l0aW9uLnkgLyAzMilcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFBoxrDGoW5nIHRo4bupYyDEkeG7gyBs4bqleSB04buNYSDEkeG7mSB0aOG6vyBnaeG7m2kgdOG7qyB04buNYSDEkeG7mSBsxrDhu5tpXHJcbiAgICBwdWJsaWMgZ2V0V29ybGRQb3NpdGlvbih4OiBudW1iZXIsIHk6IG51bWJlcik6IGNjLlZlYzMge1xyXG4gICAgICAgIC8vIENodXnhu4NuIMSR4buVaSB04burIHThu41hIMSR4buZIGzGsOG7m2kgduG7gSB04buNYSDEkeG7mSB0aOG6vyBnaeG7m2lcclxuICAgICAgICByZXR1cm4gbmV3IGNjLlZlYzMoeCAqIDMyLCB5ICogMzIsIDApOyAvLyBHaeG6oyBz4butIGvDrWNoIHRoxrDhu5tjIG3hu5dpIMO0IGzDoCAzMngzMlxyXG4gICAgfVxyXG5cclxuXHJcbiAgICBwdWJsaWMgaXNXYWxrYWJsZSh4OiBudW1iZXIsIHk6IG51bWJlcik6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmlzSW5Cb3VuZHMoeCwgeSkgJiYgdGhpcy5ncmlkW3hdW3ldID09PSAwO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBpc0luQm91bmRzKHg6IG51bWJlciwgeTogbnVtYmVyKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIHggPj0gMCAmJiB5ID49IDAgJiYgeCA8IHRoaXMuZ3JpZC5sZW5ndGggJiYgeSA8IHRoaXMuZ3JpZFswXS5sZW5ndGg7XHJcbiAgICB9XHJcbn1cclxuIl19
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/Data/Interfaces.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '01660FLikpKf68Qdp5BfC/w', 'Interfaces');
// Script/Data/Interfaces.ts

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0XFxEYXRhXFxJbnRlcmZhY2VzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiIiLCJmaWxlIjoiIiwic291cmNlUm9vdCI6Ii8iLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgaW50ZXJmYWNlIE9wMTIge1xyXG4gICAgcmV2aXZlQ291bnQ6IG51bWJlciB8IG51bGwsXHJcbiAgICBzaG93Q1RBOiBib29sZWFuIHwgbnVsbFxyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIE9wMTMge1xyXG4gICAgcmV2aXZlQ291bnQ6IG51bWJlciB8IG51bGwsXHJcbiAgICBzaG93Q1RBOiBib29sZWFuIHwgbnVsbFxyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIE9wMTQge1xyXG4gICAgcmV2aXZlQ291bnQ6IG51bWJlciB8IG51bGwsXHJcbiAgICBzaG93Q1RBOiBib29sZWFuIHwgbnVsbCxcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBPcDE2IHtcclxuICAgIGlzUG9pbnRUb3VjaENsZWFyRml4QXJlYTogYm9vbGVhbiB8IG51bGwsXHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgT3AxNyB7XHJcbiAgICByZXZpdmVDb3VudDogbnVtYmVyIHwgbnVsbCxcclxuICAgIHNob3dDVEE6IGJvb2xlYW4gfCBudWxsLFxyXG4gICAgaXNQYXNzTGV2ZWwyODogYm9vbGVhbiB8IG51bGxcclxufSJdfQ==
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/neutrinoparticles/components/NeutrinoEffect_Fireworks01.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'cae37pEdPZBLIfCZ0f+QOU2', 'NeutrinoEffect_Fireworks01');
// neutrinoparticles/components/NeutrinoEffect_Fireworks01.ts

"use strict";
// !!! This file is generated by NeutrinoParticles extension package.
// !!! Don't modify it manually.
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var NeutrinoEffect = require("../exported_effects/Fireworks01.js");
var textures_1 = require("../textures");
var NeutrinoComponent_1 = require("NeutrinoComponent");
var NeutrinoAssembler_1 = require("NeutrinoAssembler");
var _a = cc._decorator, ccclass = _a.ccclass, executeInEditMode = _a.executeInEditMode, playOnFocus = _a.playOnFocus, menu = _a.menu;
var NeutrinoEffectComponent = /** @class */ (function (_super) {
    __extends(NeutrinoEffectComponent, _super);
    function NeutrinoEffectComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    NeutrinoEffectComponent.prototype.getEffectClass = function () { return NeutrinoEffect; };
    NeutrinoEffectComponent.prototype.getTexturesDatabase = function () { return textures_1.default; };
    NeutrinoEffectComponent = __decorate([
        ccclass,
        executeInEditMode,
        playOnFocus,
        menu('i18n:MAIN_MENU.component.renderers/NeutrinoComponent/Fireworks01')
    ], NeutrinoEffectComponent);
    return NeutrinoEffectComponent;
}(NeutrinoComponent_1.default));
exports.default = NeutrinoEffectComponent;
cc.Assembler.register(NeutrinoEffectComponent, NeutrinoAssembler_1.default);

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcbmV1dHJpbm9wYXJ0aWNsZXNcXGNvbXBvbmVudHNcXE5ldXRyaW5vRWZmZWN0X0ZpcmV3b3JrczAxLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSxxRUFBcUU7QUFDckUsZ0NBQWdDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFFaEMsbUVBQXFFO0FBQ3JFLHdDQUFtQztBQUNuQyx1REFBa0Q7QUFDbEQsdURBQWtEO0FBRTVDLElBQUEsS0FBa0QsRUFBRSxDQUFDLFVBQVUsRUFBOUQsT0FBTyxhQUFBLEVBQUUsaUJBQWlCLHVCQUFBLEVBQUUsV0FBVyxpQkFBQSxFQUFFLElBQUksVUFBaUIsQ0FBQztBQU10RTtJQUFxRCwyQ0FBaUI7SUFBdEU7O0lBR0EsQ0FBQztJQUZBLGdEQUFjLEdBQWQsY0FBbUIsT0FBTyxjQUFjLENBQUMsQ0FBQyxDQUFDO0lBQzNDLHFEQUFtQixHQUFuQixjQUF3QixPQUFPLGtCQUFRLENBQUMsQ0FBQyxDQUFDO0lBRnRCLHVCQUF1QjtRQUozQyxPQUFPO1FBQ1AsaUJBQWlCO1FBQ2pCLFdBQVc7UUFDWCxJQUFJLENBQUMsa0VBQWtFLENBQUM7T0FDcEQsdUJBQXVCLENBRzNDO0lBQUQsOEJBQUM7Q0FIRCxBQUdDLENBSG9ELDJCQUFpQixHQUdyRTtrQkFIb0IsdUJBQXVCO0FBSzVDLEVBQUUsQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLHVCQUF1QixFQUFFLDJCQUFpQixDQUFDLENBQUMiLCJmaWxlIjoiIiwic291cmNlUm9vdCI6Ii8iLCJzb3VyY2VzQ29udGVudCI6WyIvLyAhISEgVGhpcyBmaWxlIGlzIGdlbmVyYXRlZCBieSBOZXV0cmlub1BhcnRpY2xlcyBleHRlbnNpb24gcGFja2FnZS5cbi8vICEhISBEb24ndCBtb2RpZnkgaXQgbWFudWFsbHkuXG5cbmltcG9ydCAqIGFzIE5ldXRyaW5vRWZmZWN0IGZyb20gJy4uL2V4cG9ydGVkX2VmZmVjdHMvRmlyZXdvcmtzMDEuanMnO1xuaW1wb3J0IHRleHR1cmVzIGZyb20gJy4uL3RleHR1cmVzJztcbmltcG9ydCBOZXV0cmlub0NvbXBvbmVudCBmcm9tICdOZXV0cmlub0NvbXBvbmVudCc7XG5pbXBvcnQgTmV1dHJpbm9Bc3NlbWJsZXIgZnJvbSAnTmV1dHJpbm9Bc3NlbWJsZXInO1xuXG5jb25zdCB7Y2NjbGFzcywgZXhlY3V0ZUluRWRpdE1vZGUsIHBsYXlPbkZvY3VzLCBtZW51fSA9IGNjLl9kZWNvcmF0b3I7XG5cbkBjY2NsYXNzXG5AZXhlY3V0ZUluRWRpdE1vZGVcbkBwbGF5T25Gb2N1c1xuQG1lbnUoJ2kxOG46TUFJTl9NRU5VLmNvbXBvbmVudC5yZW5kZXJlcnMvTmV1dHJpbm9Db21wb25lbnQvRmlyZXdvcmtzMDEnKVxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTmV1dHJpbm9FZmZlY3RDb21wb25lbnQgZXh0ZW5kcyBOZXV0cmlub0NvbXBvbmVudCB7XG5cdGdldEVmZmVjdENsYXNzKCkgeyByZXR1cm4gTmV1dHJpbm9FZmZlY3Q7IH1cblx0Z2V0VGV4dHVyZXNEYXRhYmFzZSgpIHsgcmV0dXJuIHRleHR1cmVzOyB9XG59XG5cbmNjLkFzc2VtYmxlci5yZWdpc3RlcihOZXV0cmlub0VmZmVjdENvbXBvbmVudCwgTmV1dHJpbm9Bc3NlbWJsZXIpO1xuIl19
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/neutrinoparticles/textures.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '7a2b5P05SNHFqDPc57oiMr7', 'textures');
// neutrinoparticles/textures.ts

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = [{ "uuid": "4e0adc9b-73d2-44ad-bf95-1647f8336e0a", "path": "Circle512" }, { "uuid": "f7a11ec4-043c-4992-a469-c662791ec02d", "path": "blurable_bubble" }, { "uuid": "f5917837-4808-4aca-8d16-88b614dcc597", "path": "blurable_spot" }, { "uuid": "82530b06-7058-4353-90a5-65d4f9d9cef9", "path": "fx/fireworks/sparks2x3_violet" }, { "uuid": "dfea0dc6-4b85-404a-8525-6b163a8fa20d", "path": "fx/fireworks/sparks5x2_long_violet" }, { "uuid": "61e7cec0-d7d1-4107-9066-27570c200683", "path": "fx/fireworks/sparks5x3_long" }, { "uuid": "49716cf5-a08d-4202-bc38-b7fc472370ec", "path": "fx/fireworks/stars4x1_white" }, { "uuid": "6b893435-8d83-41e9-8d41-7b495cecba54", "path": "sphere_orange" }, { "uuid": "a0b2248f-8fdf-4295-889a-38f2012cf28d", "path": "textures" }];

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcbmV1dHJpbm9wYXJ0aWNsZXNcXHRleHR1cmVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsa0JBQWUsQ0FBQyxFQUFDLE1BQU0sRUFBQyxzQ0FBc0MsRUFBQyxNQUFNLEVBQUMsV0FBVyxFQUFDLEVBQUMsRUFBQyxNQUFNLEVBQUMsc0NBQXNDLEVBQUMsTUFBTSxFQUFDLGlCQUFpQixFQUFDLEVBQUMsRUFBQyxNQUFNLEVBQUMsc0NBQXNDLEVBQUMsTUFBTSxFQUFDLGVBQWUsRUFBQyxFQUFDLEVBQUMsTUFBTSxFQUFDLHNDQUFzQyxFQUFDLE1BQU0sRUFBQywrQkFBK0IsRUFBQyxFQUFDLEVBQUMsTUFBTSxFQUFDLHNDQUFzQyxFQUFDLE1BQU0sRUFBQyxvQ0FBb0MsRUFBQyxFQUFDLEVBQUMsTUFBTSxFQUFDLHNDQUFzQyxFQUFDLE1BQU0sRUFBQyw2QkFBNkIsRUFBQyxFQUFDLEVBQUMsTUFBTSxFQUFDLHNDQUFzQyxFQUFDLE1BQU0sRUFBQyw2QkFBNkIsRUFBQyxFQUFDLEVBQUMsTUFBTSxFQUFDLHNDQUFzQyxFQUFDLE1BQU0sRUFBQyxlQUFlLEVBQUMsRUFBQyxFQUFDLE1BQU0sRUFBQyxzQ0FBc0MsRUFBQyxNQUFNLEVBQUMsVUFBVSxFQUFDLENBQUMsQ0FBQyIsImZpbGUiOiIiLCJzb3VyY2VSb290IjoiLyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IFt7XCJ1dWlkXCI6XCI0ZTBhZGM5Yi03M2QyLTQ0YWQtYmY5NS0xNjQ3ZjgzMzZlMGFcIixcInBhdGhcIjpcIkNpcmNsZTUxMlwifSx7XCJ1dWlkXCI6XCJmN2ExMWVjNC0wNDNjLTQ5OTItYTQ2OS1jNjYyNzkxZWMwMmRcIixcInBhdGhcIjpcImJsdXJhYmxlX2J1YmJsZVwifSx7XCJ1dWlkXCI6XCJmNTkxNzgzNy00ODA4LTRhY2EtOGQxNi04OGI2MTRkY2M1OTdcIixcInBhdGhcIjpcImJsdXJhYmxlX3Nwb3RcIn0se1widXVpZFwiOlwiODI1MzBiMDYtNzA1OC00MzUzLTkwYTUtNjVkNGY5ZDljZWY5XCIsXCJwYXRoXCI6XCJmeC9maXJld29ya3Mvc3BhcmtzMngzX3Zpb2xldFwifSx7XCJ1dWlkXCI6XCJkZmVhMGRjNi00Yjg1LTQwNGEtODUyNS02YjE2M2E4ZmEyMGRcIixcInBhdGhcIjpcImZ4L2ZpcmV3b3Jrcy9zcGFya3M1eDJfbG9uZ192aW9sZXRcIn0se1widXVpZFwiOlwiNjFlN2NlYzAtZDdkMS00MTA3LTkwNjYtMjc1NzBjMjAwNjgzXCIsXCJwYXRoXCI6XCJmeC9maXJld29ya3Mvc3BhcmtzNXgzX2xvbmdcIn0se1widXVpZFwiOlwiNDk3MTZjZjUtYTA4ZC00MjAyLWJjMzgtYjdmYzQ3MjM3MGVjXCIsXCJwYXRoXCI6XCJmeC9maXJld29ya3Mvc3RhcnM0eDFfd2hpdGVcIn0se1widXVpZFwiOlwiNmI4OTM0MzUtOGQ4My00MWU5LThkNDEtN2I0OTVjZWNiYTU0XCIsXCJwYXRoXCI6XCJzcGhlcmVfb3JhbmdlXCJ9LHtcInV1aWRcIjpcImEwYjIyNDhmLThmZGYtNDI5NS04ODlhLTM4ZjIwMTJjZjI4ZFwiLFwicGF0aFwiOlwidGV4dHVyZXNcIn1dO1xuIl19
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/Controller/GamePlay.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'e4962SfSUFOcoqc2Otz+5iQ', 'GamePlay');
// Script/Controller/GamePlay.ts

"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var constants_1 = require("../Data/constants");
var GameOption_1 = require("../Data/GameOption");
var AudioManager_1 = require("../Plugin/AudioManager");
var Ultils_1 = require("../Plugin/Ultils");
var GameController_1 = require("./GameController");
var NodesController_1 = require("./NodesController");
var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
var GamePlay = /** @class */ (function (_super) {
    __extends(GamePlay, _super);
    function GamePlay() {
        var _this_1 = _super !== null && _super.apply(this, arguments) || this;
        // Script
        _this_1.NodesController = null;
        _this_1.AudioManager = null;
        _this_1.GameController = null;
        // Component
        // Node
        _this_1.graphic = null;
        _this_1.pathFinding_Grid = null;
        _this_1.pathFinding_Nodes = [];
        _this_1.Overlay = null;
        // State
        _this_1.curentPosition = null;
        _this_1.currentHint = null;
        _this_1.currentPencil = null;
        _this_1.curerntPoint = null;
        _this_1.isHit = false;
        _this_1.isHint = false;
        return _this_1;
    }
    GamePlay.prototype.onLoad = function () {
        var physics = cc.director.getPhysicsManager();
        physics.enabled = true;
        // physics.debugDrawFlags = cc.PhysicsManager.DrawBits.e_shapeBit;
    };
    GamePlay.prototype.start = function () {
        // các op không phải là 15 thì chạy GP
        if (GameOption_1.GameOption.currentOption !== 15) {
            this.NodesController.Hint.active = true;
            this.NodesController.CTA.active = false;
            window.isStartDraw = false;
            window.isLoseGame = false;
            window.isReplayGame = false;
            // window.isToStore = true;
            // cc.warn("window isToStore | constant isToStore đang bật.");
            constants_1.Constants.isWinGame = false;
            constants_1.Constants.isHit = false;
            constants_1.Constants.isCanTouch = true;
            this.handleGamePlay();
        }
        // Op 15 Fake Game Play
        if (GameOption_1.GameOption.currentOption === 15 && !constants_1.Constants.isToStore) {
            this.initOp15();
        }
        this.AudioManager.playSound(constants_1.Constants.SoundTrack.bgSound);
        this.AudioManager.bgSound.volume = 0.6;
        // Op 15 thì comment dòng này và isToStore ở trên đi
        // if (Constants.isToStore || window.isToStore) {
        //     this.NodesController.HideMask.on(cc.Node.EventType.TOUCH_START, this.GameController.installHandle, this)
        // }
        // ironsource
        // if(Constants.ironSource.isPlayBgSound) 
        //     this.AudioManager.playSound(Constants.SoundTrack.bgSound);
    };
    ;
    GamePlay.prototype.initOp15 = function () {
        var _this_1 = this;
        var _this = this;
        var Op15 = {
            registerEvent: function () {
                // _this.NodesController.Op15_HatchButton.on(cc.Node.EventType.TOUCH_START, Op15.handleHatchEgg, this);
                _this.NodesController.Op15_HatchButton.on(cc.Node.EventType.TOUCH_START, Op15.op15_1, _this_1);
            },
            handleHatchEgg: function () {
                // _this.handleIronSourcePlaySound();
                _this.AudioManager.playSound(constants_1.Constants.SoundTrack.hatchEggSound);
                _this.NodesController.Op15_HatchButton.active = false;
                _this.NodesController.Op15_Egg.getComponent(cc.Animation).play();
                // show fireworks
                _this.scheduleOnce(function () {
                    _this.NodesController.Op15_FireWork.active = true;
                    _this.AudioManager.playSound(constants_1.Constants.SoundTrack.winSound);
                }, 3.5);
                _this.scheduleOnce(function () {
                    Op15.openNewGamePlay();
                }, 5.5);
            },
            op15_1: function () {
                _this.GameController.installHandle();
            },
            openNewGamePlay: function () {
                window.isToStore = true;
                constants_1.Constants.isToStore = true;
                cc.tween(_this.Overlay)
                    .to(0.5, { opacity: 255 }, { easing: cc.easing.smooth })
                    .call(function () { cc.director.loadScene("Op13"); })
                    .start();
            },
            activeButtonHatchTween: function () {
                cc.tween(_this.NodesController.Op15_HatchButton)
                    .repeatForever(cc.tween(_this.NodesController.Op15_HatchButton)
                    .to(0.5, { scale: 0.45 })
                    .to(0.5, { scale: 0.47 }, { easing: cc.easing.elasticOut })).start();
            },
            start: function () {
                Op15.registerEvent();
                Op15.activeButtonHatchTween();
            }
        };
        Op15.start();
    };
    GamePlay.prototype.handleGamePlay = function () {
        constants_1.Constants.CharacterPos = this.NodesController.Spine_Character.node.getPosition();
        constants_1.Constants.CharacterPos.y = constants_1.Constants.CharacterPos.y + 25;
        this.registerEvent();
    };
    ;
    GamePlay.prototype.registerEvent = function () {
    };
    GamePlay.prototype.handleIronSourcePlaySound = function () {
        if (constants_1.Constants.ironSource.isPlayBgSound) {
            return;
        }
        if (constants_1.Constants.ironSource.SoundState) {
            this.AudioManager.playSound(constants_1.Constants.SoundTrack.bgSound);
        }
        constants_1.Constants.ironSource.isPlayBgSound = true;
    };
    GamePlay.prototype.handleMuteSoundIronSource = function () {
        constants_1.Constants.ironSource.State = parseInt(localStorage.getItem("cocosSoundState"), 10);
        if (constants_1.Constants.ironSource.State) {
            if (constants_1.Constants.ironSource.State === 1 && !constants_1.Constants.ironSource.SoundState && !constants_1.Constants.ironSource.isEndGame) {
                constants_1.Constants.ironSource.SoundState = true;
                this.AudioManager.playSound(constants_1.Constants.SoundTrack.bgSound);
            }
            if (constants_1.Constants.ironSource.State === 2 && constants_1.Constants.ironSource.SoundState) {
                constants_1.Constants.ironSource.SoundState = false;
                this.AudioManager.stopAllSound();
            }
        }
    };
    GamePlay.prototype.characterHit = function () {
        var _this_1 = this;
        cc.log("hit!!");
        window.isReplayGame = true;
        this.isHit = true;
        this.NodesController.Spine_Character.setAnimation(0, "result_fail", true);
        this.AudioManager.playSound(constants_1.Constants.SoundTrack.crySound);
        // sau 1.5, check có đc hồi sinh không thì cho hiện CTA
        this.scheduleOnce(function () {
            if (GameOption_1.GameOption.currentOption === 12) {
                GameOption_1.GameOption.Op12.reviveCount = Ultils_1.Ultils.decreaseRevive(GameOption_1.GameOption.Op12.reviveCount);
                cc.log("revive Left: " + GameOption_1.GameOption.Op12.reviveCount);
                GameOption_1.GameOption.Op12.reviveCount > 0
                    ? _this_1.lose()
                    : _this_1.showCTA(false);
            }
            if (GameOption_1.GameOption.currentOption === 13) {
                GameOption_1.GameOption.Op13.reviveCount = Ultils_1.Ultils.decreaseRevive(GameOption_1.GameOption.Op13.reviveCount);
                cc.log("revive Left: " + GameOption_1.GameOption.Op13.reviveCount);
                GameOption_1.GameOption.Op13.reviveCount > 0
                    ? _this_1.lose()
                    : _this_1.showCTA(false);
            }
            if (GameOption_1.GameOption.currentOption === 14) {
                GameOption_1.GameOption.Op14.reviveCount = Ultils_1.Ultils.decreaseRevive(GameOption_1.GameOption.Op14.reviveCount);
                cc.log("revive Left: " + GameOption_1.GameOption.Op14.reviveCount);
                GameOption_1.GameOption.Op14.reviveCount > 0
                    ? _this_1.lose()
                    : _this_1.showCTA(false);
            }
            if (GameOption_1.GameOption.currentOption === 16) {
                _this_1.showCTA(false);
            }
            if (GameOption_1.GameOption.currentOption === 17) {
                GameOption_1.GameOption.Op17.reviveCount = Ultils_1.Ultils.decreaseRevive(GameOption_1.GameOption.Op17.reviveCount);
                cc.log("revive Left: " + GameOption_1.GameOption.Op17.reviveCount);
                GameOption_1.GameOption.Op17.reviveCount > 0
                    ? _this_1.lose()
                    : _this_1.showCTA(false);
            }
        }, 1.5);
    };
    GamePlay.prototype.lose = function () {
        if (constants_1.Constants.isWinGame)
            return;
        cc.log("lose!");
        constants_1.Constants.isLoseGame = true;
        if (GameOption_1.GameOption.currentOption === 17 && GameOption_1.GameOption.Op17.isPassLevel28) {
            cc.tween(this.Overlay)
                .to(0.5, { opacity: 255 }, { easing: cc.easing.smooth })
                .call(function () { cc.director.loadScene("Op13"); })
                .start();
            return;
        }
        cc.tween(this.Overlay)
            .to(0.5, { opacity: 255 }, { easing: cc.easing.smooth })
            .call(function () { cc.director.loadScene("Op" + GameOption_1.GameOption.currentOption); })
            .start();
    };
    GamePlay.prototype.winGame = function () {
        if (constants_1.Constants.isWinGame)
            return;
        cc.log("win!");
        this.NodesController.Spine_Character.setAnimation(0, "result_win", true);
        // 
        if (GameOption_1.GameOption.currentOption === 14 && !GameOption_1.GameOption.Op14.showCTA) {
            this.AudioManager.playSound(constants_1.Constants.SoundTrack.winSound);
            this.NodesController.PS_Confetti.resetSystem();
            GameOption_1.GameOption.Op14.showCTA = true;
            cc.tween(this.Overlay)
                .to(0.5, { opacity: 255 }, { easing: cc.easing.smooth })
                .call(function () { cc.director.loadScene("Op12"); })
                .start();
            return;
        }
        if (GameOption_1.GameOption.currentOption === 17 && !GameOption_1.GameOption.Op17.showCTA) {
            this.AudioManager.playSound(constants_1.Constants.SoundTrack.winSound);
            this.NodesController.PS_Confetti.resetSystem();
            GameOption_1.GameOption.Op17.isPassLevel28 = true;
            GameOption_1.GameOption.Op17.showCTA = true;
            cc.tween(this.Overlay)
                .to(1, { opacity: 255 }, { easing: cc.easing.smooth })
                .call(function () { cc.director.loadScene("Op13"); })
                .start();
            return;
        }
        constants_1.Constants.isWinGame = true;
        this.AudioManager.playSound(constants_1.Constants.SoundTrack.winSound);
        this.NodesController.PS_Confetti.resetSystem();
        this.showCTA(true);
    };
    GamePlay.prototype.showCTA = function (isWin) {
        if (this.NodesController.CTA.active)
            return;
        this.NodesController.CTA.active = true;
        this.NodesController.CTA.getComponent(cc.Animation).play();
        isWin
            ? this.NodesController.CTA_PlayNow.active = true
            : this.NodesController.CTA_TryAgain.active = true;
        cc.tween(this.NodesController.CTA_button)
            .to(0.5, { opacity: 255 })
            .start();
        cc.tween(this.NodesController.CTA_button)
            .repeatForever(cc.tween(this.NodesController.CTA_button)
            .to(0.5, { scale: 0.45 })
            .to(0.5, { scale: 0.5 }, { easing: cc.easing.elasticOut })).start();
        this.NodesController.CTA_button.on(cc.Node.EventType.TOUCH_START, this.GameController.installHandle, this);
        // mtg & applovin
        // this.NodesController.CTA_Overlay.on(cc.Node.EventType.TOUCH_START, this.GameController.installHandle, this);
    };
    GamePlay.prototype.unactiveHint = function () {
        // this.handleIronSourcePlaySound();
        this.isHint = true;
        this.NodesController.Hint.active = false;
    };
    GamePlay.prototype.update = function (dt) {
        constants_1.Constants.isHit && !this.isHit && this.characterHit();
        window.isStartDraw && !this.isHint && this.unactiveHint();
        window.stopDrawSound && this.AudioManager.stopSound(constants_1.Constants.SoundTrack.drawSound);
        // this.handleMuteSoundIronSource();
    };
    __decorate([
        property(NodesController_1.default)
    ], GamePlay.prototype, "NodesController", void 0);
    __decorate([
        property(AudioManager_1.default)
    ], GamePlay.prototype, "AudioManager", void 0);
    __decorate([
        property(GameController_1.GameController)
    ], GamePlay.prototype, "GameController", void 0);
    __decorate([
        property(cc.Graphics)
    ], GamePlay.prototype, "graphic", void 0);
    __decorate([
        property(cc.Node)
    ], GamePlay.prototype, "Overlay", void 0);
    GamePlay = __decorate([
        ccclass
    ], GamePlay);
    return GamePlay;
}(cc.Component));
exports.default = GamePlay;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/Controller/GraphicsContro.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '93044ZctVJBYpcfVaP3IJVr', 'GraphicsContro');
// Script/Controller/GraphicsContro.js

"use strict";

var _StateForJS = require("../Data/StateForJS");

cc.Class({
  "extends": cc.Component,
  properties: {
    graphics: null,
    line_point: [cc.Vec2]
  },
  onLoad: function onLoad() {
    this.node.width = 5000;
    this.node.height = 5000;
    this.graphics = this.getComponent(cc.Graphics);
    this.currentDrawTime = 0;
  },
  start: function start() {
    window.PointPos = cc.v2(-60, 65);
    this.onTouch();
  },
  onTouch: function onTouch() {
    this.node.on(cc.Node.EventType.TOUCH_START, this.touch_start, this);
    this.node.on(cc.Node.EventType.TOUCH_MOVE, this.touch_move, this);
    this.node.on(cc.Node.EventType.TOUCH_END, this.touch_end, this);
    this.node.on(cc.Node.EventType.TOUCH_CANCEL, this.touch_end, this);
  },
  offTouch: function offTouch() {
    this.node.off(cc.Node.EventType.TOUCH_START);
    this.node.off(cc.Node.EventType.TOUCH_MOVE);
    this.node.off(cc.Node.EventType.TOUCH_END);
    this.node.off(cc.Node.EventType.TOUCH_CANCEL);
  },
  touch_start: function touch_start(event) {
    if (!_StateForJS.StateForJs.isCanDraw || _StateForJS.StateForJs.isToStore) {
      return;
    }

    var pos = this.node.convertToNodeSpaceAR(event.getLocation());
    window.isStartDraw = true;
    window.PointPos = pos;
    this.graphics.moveTo(pos.x, pos.y);
    this.line_point.push(cc.v2(pos.x, pos.y));
  },
  touch_move: function touch_move(event) {
    if (!_StateForJS.StateForJs.isCanDraw || _StateForJS.StateForJs.isToStore) {
      return;
    }

    this.currentDrawTime += 1; // if(window.currentLv === 2 && this.currentDrawTime >= 8) {
    //     window.changeEggRigidbodyType = true;
    //     window.stopDrawSound = true;
    //     this.touch_end();
    //     return;
    // }

    var pos = this.node.convertToNodeSpaceAR(event.getLocation());
    window.PointPos = pos;
    this.graphics.lineTo(pos.x, pos.y);
    this.line_point.push(cc.v2(pos.x, pos.y));
    this.updateStrokeColor();
    this.graphics.stroke();
  },
  touch_end: function touch_end(event) {
    if (window.isTouchWall) {
      _StateForJS.StateForJs.isCanDraw = true; // window.isTouchWall = false;

      window.isDraw = false;
      this.line_point = [];
      this.graphics.clear();
      return;
    }

    if (!_StateForJS.StateForJs.isCanDraw || _StateForJS.StateForJs.isToStore) {
      return;
    } // Rút gọn đường vẽ


    var simplifiedPoints = this.simplifyPath(this.line_point, 4); // Sử dụng độ tolerance phù hợp

    _StateForJS.StateForJs.isCanDraw = false;
    window.isDraw = true;
    window.isTouchWall = false;
    this.createRigibody(simplifiedPoints);
    this.offTouch();
  },
  updateStrokeColor: function updateStrokeColor() {
    if (window.isTouchWall) {
      this.graphics.strokeColor = cc.Color.RED;
    } else {
      this.graphics.strokeColor = cc.Color.BLACK;
    }
  },
  createRigibody: function createRigibody(simplifiedPoints) {
    this.rigibodyLogic = this.addComponent(cc.RigidBody);
    this.rigibodyLogic.gravityScale = 0.4;
    this.physicsLine = this.addComponent("MyPhysicsCollider");
    this.physicsLine.lineWidth = 7;
    this.physicsLine.points = simplifiedPoints; // Sử dụng điểm đã rút gọn

    this.physicsLine.friction = 0;
    this.physicsLine.density = 0;
    this.physicsLine.tag = 4;
    this.physicsLine.apply();
  },
  simplifyPath: function simplifyPath(points, tolerance) {
    if (points.length < 3) return points;
    var sqTolerance = tolerance !== undefined ? tolerance * tolerance : 1;
    points = this.simplifyDouglasPeucker(points, sqTolerance);
    return points;
  },
  simplifyDouglasPeucker: function simplifyDouglasPeucker(points, sqTolerance) {
    var len = points.length,
        ArrayConstructor = typeof Uint8Array !== 'undefined' ? Uint8Array : Array,
        markers = new ArrayConstructor(len),
        first = 0,
        last = len - 1,
        stack = [],
        newPoints = [],
        i,
        maxSqDist,
        sqDist,
        index;
    markers[first] = markers[last] = 1;

    while (last) {
      maxSqDist = 0;

      for (i = first + 1; i < last; i++) {
        sqDist = this.getSqSegDist(points[i], points[first], points[last]);

        if (sqDist > maxSqDist) {
          index = i;
          maxSqDist = sqDist;
        }
      }

      if (maxSqDist > sqTolerance) {
        markers[index] = 1;
        stack.push(first, index, index, last);
      }

      last = stack.pop();
      first = stack.pop();
    }

    for (i = 0; i < len; i++) {
      if (markers[i]) {
        newPoints.push(points[i]);
      }
    }

    return newPoints;
  },
  getSqSegDist: function getSqSegDist(p, p1, p2) {
    var x = p1.x,
        y = p1.y,
        dx = p2.x - x,
        dy = p2.y - y;

    if (dx !== 0 || dy !== 0) {
      var t = ((p.x - x) * dx + (p.y - y) * dy) / (dx * dx + dy * dy);

      if (t > 1) {
        x = p2.x;
        y = p2.y;
      } else if (t > 0) {
        x += dx * t;
        y += dy * t;
      }
    }

    dx = p.x - x;
    dy = p.y - y;
    return dx * dx + dy * dy;
  },
  checkIsCanDraw: function checkIsCanDraw(lastPoint, nowPoint) {
    return lastPoint.sub(nowPoint).mag() >= 20;
  }
});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/Controller/PointController.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '80da3u/zVdMR5yti8YdVBri', 'PointController');
// Script/Controller/PointController.ts

"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var GameOption_1 = require("../Data/GameOption");
var GameController_1 = require("./GameController");
var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
var PointCollider = /** @class */ (function (_super) {
    __extends(PointCollider, _super);
    function PointCollider() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.GameController = null;
        _this.rigidbody = null;
        _this.clearFixArea = null;
        return _this;
    }
    PointCollider.prototype.start = function () {
        this.beginContact();
        GameOption_1.GameOption.currentOption === 16 && this.initClearFixAreaOp16();
    };
    PointCollider.prototype.initClearFixAreaOp16 = function () {
        this.clearFixArea = this.node.parent.getChildByName("ClearFixArea");
    };
    PointCollider.prototype.checkCollideClearAreaOp16 = function () {
        var nodeBdx = this.node.getBoundingBox();
        var clearFixAreaBdx = this.clearFixArea.getBoundingBox();
        if (nodeBdx.intersects(clearFixAreaBdx)) {
            GameOption_1.GameOption.Op16.isPointTouchClearFixArea = true;
        }
    };
    PointCollider.prototype.beginContact = function () {
        this.rigidbody.onBeginContact = function (c, s, o) {
            if (o.tag === 0 || o.tag === 8) {
                window.isTouchWall = true;
            }
        };
    };
    PointCollider.prototype.update = function (dt) {
        GameOption_1.GameOption.currentOption === 16 && this.checkCollideClearAreaOp16();
        this.node.setPosition(window.PointPos);
    };
    __decorate([
        property(GameController_1.GameController)
    ], PointCollider.prototype, "GameController", void 0);
    __decorate([
        property(cc.RigidBody)
    ], PointCollider.prototype, "rigidbody", void 0);
    PointCollider = __decorate([
        ccclass
    ], PointCollider);
    return PointCollider;
}(cc.Component));
exports.default = PointCollider;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0XFxDb250cm9sbGVyXFxQb2ludENvbnRyb2xsZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQ0EsaURBQWdEO0FBQ2hELG1EQUFrRDtBQUU1QyxJQUFBLEtBQXNCLEVBQUUsQ0FBQyxVQUFVLEVBQWxDLE9BQU8sYUFBQSxFQUFFLFFBQVEsY0FBaUIsQ0FBQztBQUcxQztJQUEyQyxpQ0FBWTtJQUF2RDtRQUFBLHFFQThDQztRQTNDRyxvQkFBYyxHQUFtQixJQUFJLENBQUM7UUFFdEMsZUFBUyxHQUFpQixJQUFJLENBQUM7UUFFL0Isa0JBQVksR0FBWSxJQUFJLENBQUM7O0lBdUNqQyxDQUFDO0lBckNhLDZCQUFLLEdBQWY7UUFDSSxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7UUFFcEIsdUJBQVUsQ0FBQyxhQUFhLEtBQUssRUFBRSxJQUFJLElBQUksQ0FBQyxvQkFBb0IsRUFBRSxDQUFDO0lBQ25FLENBQUM7SUFHTyw0Q0FBb0IsR0FBNUI7UUFDSSxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxjQUFjLENBQUMsQ0FBQztJQUN4RSxDQUFDO0lBR08saURBQXlCLEdBQWpDO1FBQ0ksSUFBSSxPQUFPLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQztRQUN6QyxJQUFJLGVBQWUsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLGNBQWMsRUFBRSxDQUFDO1FBRXpELElBQUcsT0FBTyxDQUFDLFVBQVUsQ0FBQyxlQUFlLENBQUMsRUFBRTtZQUNoQyx1QkFBVSxDQUFDLElBQUksQ0FBQyx3QkFBd0IsR0FBRyxJQUFJLENBQUM7U0FDdkQ7SUFDTCxDQUFDO0lBR08sb0NBQVksR0FBcEI7UUFDSSxJQUFJLENBQUMsU0FBUyxDQUFDLGNBQWMsR0FBRyxVQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQztZQUNsQyxJQUFHLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxFQUFFO2dCQUMzQixNQUFNLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQzthQUM3QjtRQUVMLENBQUMsQ0FBQTtJQUNMLENBQUM7SUFHUyw4QkFBTSxHQUFoQixVQUFpQixFQUFVO1FBQ3ZCLHVCQUFVLENBQUMsYUFBYSxLQUFLLEVBQUUsSUFBSSxJQUFJLENBQUMseUJBQXlCLEVBQUUsQ0FBQztRQUNwRSxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUE7SUFDMUMsQ0FBQztJQXpDRDtRQURDLFFBQVEsQ0FBQywrQkFBYyxDQUFDO3lEQUNhO0lBRXRDO1FBREMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxTQUFTLENBQUM7b0RBQ1E7SUFMZCxhQUFhO1FBRGpDLE9BQU87T0FDYSxhQUFhLENBOENqQztJQUFELG9CQUFDO0NBOUNELEFBOENDLENBOUMwQyxFQUFFLENBQUMsU0FBUyxHQThDdEQ7a0JBOUNvQixhQUFhIiwiZmlsZSI6IiIsInNvdXJjZVJvb3QiOiIvIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29uc3RhbnRzIH0gZnJvbSBcIi4uL0RhdGEvY29uc3RhbnRzXCI7XHJcbmltcG9ydCB7IEdhbWVPcHRpb24gfSBmcm9tIFwiLi4vRGF0YS9HYW1lT3B0aW9uXCI7XHJcbmltcG9ydCB7IEdhbWVDb250cm9sbGVyIH0gZnJvbSBcIi4vR2FtZUNvbnRyb2xsZXJcIjtcclxuXHJcbmNvbnN0IHtjY2NsYXNzLCBwcm9wZXJ0eX0gPSBjYy5fZGVjb3JhdG9yO1xyXG5cclxuQGNjY2xhc3NcclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUG9pbnRDb2xsaWRlciBleHRlbmRzIGNjLkNvbXBvbmVudCB7XHJcbiAgICBcclxuICAgIEBwcm9wZXJ0eShHYW1lQ29udHJvbGxlcilcclxuICAgIEdhbWVDb250cm9sbGVyOiBHYW1lQ29udHJvbGxlciA9IG51bGw7XHJcbiAgICBAcHJvcGVydHkoY2MuUmlnaWRCb2R5KVxyXG4gICAgcmlnaWRib2R5OiBjYy5SaWdpZEJvZHkgPSBudWxsO1xyXG5cclxuICAgIGNsZWFyRml4QXJlYTogY2MuTm9kZSA9IG51bGw7XHJcblxyXG4gICAgcHJvdGVjdGVkIHN0YXJ0KCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuYmVnaW5Db250YWN0KCk7XHJcblxyXG4gICAgICAgIEdhbWVPcHRpb24uY3VycmVudE9wdGlvbiA9PT0gMTYgJiYgdGhpcy5pbml0Q2xlYXJGaXhBcmVhT3AxNigpO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICBwcml2YXRlIGluaXRDbGVhckZpeEFyZWFPcDE2KCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuY2xlYXJGaXhBcmVhID0gdGhpcy5ub2RlLnBhcmVudC5nZXRDaGlsZEJ5TmFtZShcIkNsZWFyRml4QXJlYVwiKTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgcHJpdmF0ZSBjaGVja0NvbGxpZGVDbGVhckFyZWFPcDE2KCk6IHZvaWQge1xyXG4gICAgICAgIGxldCBub2RlQmR4ID0gdGhpcy5ub2RlLmdldEJvdW5kaW5nQm94KCk7XHJcbiAgICAgICAgbGV0IGNsZWFyRml4QXJlYUJkeCA9IHRoaXMuY2xlYXJGaXhBcmVhLmdldEJvdW5kaW5nQm94KCk7XHJcblxyXG4gICAgICAgIGlmKG5vZGVCZHguaW50ZXJzZWN0cyhjbGVhckZpeEFyZWFCZHgpKSB7XHJcbiAgICAgICAgICAgICAgICBHYW1lT3B0aW9uLk9wMTYuaXNQb2ludFRvdWNoQ2xlYXJGaXhBcmVhID0gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG5cclxuICAgIHByaXZhdGUgYmVnaW5Db250YWN0KCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMucmlnaWRib2R5Lm9uQmVnaW5Db250YWN0ID0gKGMscyxvKSA9PiB7XHJcbiAgICAgICAgICAgIGlmKG8udGFnID09PSAwIHx8IG8udGFnID09PSA4KSB7XHJcbiAgICAgICAgICAgICAgICB3aW5kb3cuaXNUb3VjaFdhbGwgPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcblxyXG4gICAgcHJvdGVjdGVkIHVwZGF0ZShkdDogbnVtYmVyKTogdm9pZCB7XHJcbiAgICAgICAgR2FtZU9wdGlvbi5jdXJyZW50T3B0aW9uID09PSAxNiAmJiB0aGlzLmNoZWNrQ29sbGlkZUNsZWFyQXJlYU9wMTYoKTtcclxuICAgICAgICB0aGlzLm5vZGUuc2V0UG9zaXRpb24od2luZG93LlBvaW50UG9zKVxyXG4gICAgfVxyXG5cclxufVxyXG4iXX0=
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/Controller/TouchController.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'd9305oVF5hPCLfUSaAOK4yn', 'TouchController');
// Script/Controller/TouchController.js

"use strict";

var _StateForJS = require("../Data/StateForJS");

cc.Class({
  "extends": cc.Component,
  properties: {
    graphics: cc.Prefab,
    nodesController: cc.Node,
    audioManager: cc.Node,
    GamePlay: cc.Node,
    GameController: cc.Node,
    EggController: cc.Node
  },
  onLoad: function onLoad() {
    window.isDraw = false;
    this.node.on(cc.Node.EventType.TOUCH_START, this.touch_start, this);
    this.node.on(cc.Node.EventType.TOUCH_END, this.touch_end, this);
    this.node.on(cc.Node.EventType.TOUCH_CANCEL, this.touch_end, this);
  },
  start: function start() {
    _StateForJS.StateForJs.isCanDraw = true;
    this.createGraphics();
    this.isChangeEggRigidbodyType = false;
  },
  touch_start: function touch_start() {
    if (window.isToStore) {
      this.GameController.getComponent("GameController").installHandle();
      return;
    } // if(window.isLoseGame || StateForJs.isToStore) {
    //     this.GameController.getComponent("GameController").installHandle();
    //     return;
    // }


    this.audioManager.getComponent("AudioManager").playSound("drawSound");
    this.audioManager.getComponent("AudioManager").drawSound.loop = true;
  },
  touch_end: function touch_end(event) {
    var _this = this;

    if (window.isToStore) {
      // this.GameController.getComponent("GameController").installHandle();
      return;
    }

    if (_StateForJS.StateForJs.isToStore || window.isTouchWall) {
      this.audioManager.getComponent("AudioManager").stopSound("drawSound");
      window.isTouchWall = false;
      return;
    }

    if (!_StateForJS.StateForJs.isCanDraw) {
      this.offEvent();
      this.EggController.getComponent("EggController").changeRigidbodyType();
      this.createGraphics();
    }

    this.audioManager.getComponent("AudioManager").stopSound("drawSound");
    this.scheduleOnce(function () {
      if (window.isReplayGame) {
        return;
      }

      if (!window.isLoseGame) _this.GamePlay.getComponent("GamePlay").winGame();
    }, _StateForJS.StateForJs.timeToWin);
  },
  offEvent: function offEvent() {
    this.node.off(cc.Node.EventType.TOUCH_START);
    this.node.off(cc.Node.EventType.TOUCH_END);
  },
  createGraphics: function createGraphics() {
    var graphics_node = cc.instantiate(this.graphics);
    graphics_node.x = 0;
    this.node.addChild(graphics_node);
  }
});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0XFxDb250cm9sbGVyXFxUb3VjaENvbnRyb2xsZXIuanMiXSwibmFtZXMiOlsiY2MiLCJDbGFzcyIsIkNvbXBvbmVudCIsInByb3BlcnRpZXMiLCJncmFwaGljcyIsIlByZWZhYiIsIm5vZGVzQ29udHJvbGxlciIsIk5vZGUiLCJhdWRpb01hbmFnZXIiLCJHYW1lUGxheSIsIkdhbWVDb250cm9sbGVyIiwiRWdnQ29udHJvbGxlciIsIm9uTG9hZCIsIndpbmRvdyIsImlzRHJhdyIsIm5vZGUiLCJvbiIsIkV2ZW50VHlwZSIsIlRPVUNIX1NUQVJUIiwidG91Y2hfc3RhcnQiLCJUT1VDSF9FTkQiLCJ0b3VjaF9lbmQiLCJUT1VDSF9DQU5DRUwiLCJzdGFydCIsIlN0YXRlRm9ySnMiLCJpc0NhbkRyYXciLCJjcmVhdGVHcmFwaGljcyIsImlzQ2hhbmdlRWdnUmlnaWRib2R5VHlwZSIsImlzVG9TdG9yZSIsImdldENvbXBvbmVudCIsImluc3RhbGxIYW5kbGUiLCJwbGF5U291bmQiLCJkcmF3U291bmQiLCJsb29wIiwiZXZlbnQiLCJpc1RvdWNoV2FsbCIsInN0b3BTb3VuZCIsIm9mZkV2ZW50IiwiY2hhbmdlUmlnaWRib2R5VHlwZSIsInNjaGVkdWxlT25jZSIsImlzUmVwbGF5R2FtZSIsImlzTG9zZUdhbWUiLCJ3aW5HYW1lIiwidGltZVRvV2luIiwib2ZmIiwiZ3JhcGhpY3Nfbm9kZSIsImluc3RhbnRpYXRlIiwieCIsImFkZENoaWxkIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQUFBOztBQUVBQSxFQUFFLENBQUNDLEtBQUgsQ0FBUztBQUNMLGFBQVNELEVBQUUsQ0FBQ0UsU0FEUDtBQUdMQyxFQUFBQSxVQUFVLEVBQUU7QUFDUkMsSUFBQUEsUUFBUSxFQUFFSixFQUFFLENBQUNLLE1BREw7QUFFUkMsSUFBQUEsZUFBZSxFQUFFTixFQUFFLENBQUNPLElBRlo7QUFHUkMsSUFBQUEsWUFBWSxFQUFFUixFQUFFLENBQUNP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RyxTQUFoQztBQUNILEdBN0VJO0FBZ0ZMTSxFQUFBQSxjQWhGSyw0QkFnRlk7QUFDYixRQUFJbUIsYUFBYSxHQUFHN0MsRUFBRSxDQUFDOEMsV0FBSCxDQUFlLEtBQUsxQyxRQUFwQixDQUFwQjtBQUNBeUMsSUFBQUEsYUFBYSxDQUFDRSxDQUFkLEdBQWtCLENBQWxCO0FBQ0EsU0FBS2hDLElBQUwsQ0FBVWlDLFFBQVYsQ0FBbUJILGFBQW5CO0FBQ0g7QUFwRkksQ0FBVCIsInNvdXJjZVJvb3QiOiIvIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU3RhdGVGb3JKcyB9IGZyb20gXCIuLi9EYXRhL1N0YXRlRm9ySlNcIjtcclxuXHJcbmNjLkNsYXNzKHtcclxuICAgIGV4dGVuZHM6IGNjLkNvbXBvbmVudCxcclxuXHJcbiAgICBwcm9wZXJ0aWVzOiB7XHJcbiAgICAgICAgZ3JhcGhpY3M6IGNjLlByZWZhYixcclxuICAgICAgICBub2Rlc0NvbnRyb2xsZXI6IGNjLk5vZGUsXHJcbiAgICAgICAgYXVkaW9NYW5hZ2VyOiBjYy5Ob2RlLFxyXG4gICAgICAgIEdhbWVQbGF5OiBjYy5Ob2RlLFxyXG4gICAgICAgIEdhbWVDb250cm9sbGVyOiBjYy5Ob2RlLFxyXG4gICAgICAgIEVnZ0NvbnRyb2xsZXI6IGNjLk5vZGUsXHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICBvbkxvYWQoKSB7XHJcbiAgICAgICAgd2luZG93LmlzRHJhdyA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMubm9kZS5vbihjYy5Ob2RlLkV2ZW50VHlwZS5UT1VDSF9TVEFSVCwgdGhpcy50b3VjaF9zdGFydCwgdGhpcyk7XHJcbiAgICAgICAgdGhpcy5ub2RlLm9uKGNjLk5vZGUuRXZlbnRUeXBlLlRPVUNIX0VORCwgdGhpcy50b3VjaF9lbmQsIHRoaXMpO1xyXG4gICAgICAgIHRoaXMubm9kZS5vbihjYy5Ob2RlLkV2ZW50VHlwZS5UT1VDSF9DQU5DRUwsIHRoaXMudG91Y2hfZW5kLCB0aGlzKTtcclxuICAgIH0sXHJcblxyXG5cclxuICAgIHN0YXJ0KCkge1xyXG4gICAgICAgIFN0YXRlRm9ySnMuaXNDYW5EcmF3ID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLmNyZWF0ZUdyYXBoaWNzKCk7XHJcbiAgICAgICAgdGhpcy5pc0NoYW5nZUVnZ1JpZ2lkYm9keVR5cGUgPSBmYWxzZTtcclxuICAgIH0sXHJcblxyXG5cclxuICAgIHRvdWNoX3N0YXJ0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmKHdpbmRvdy5pc1RvU3RvcmUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuR2FtZUNvbnRyb2xsZXIuZ2V0Q29tcG9uZW50KFwiR2FtZUNvbnRyb2xsZXJcIikuaW5zdGFsbEhhbmRsZSgpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIGlmKHdpbmRvdy5pc0xvc2VHYW1lIHx8IFN0YXRlRm9ySnMuaXNUb1N0b3JlKSB7XHJcbiAgICAgICAgLy8gICAgIHRoaXMuR2FtZUNvbnRyb2xsZXIuZ2V0Q29tcG9uZW50KFwiR2FtZUNvbnRyb2xsZXJcIikuaW5zdGFsbEhhbmRsZSgpO1xyXG4gICAgICAgIC8vICAgICByZXR1cm47XHJcbiAgICAgICAgLy8gfVxyXG5cclxuICAgICAgICB0aGlzLmF1ZGlvTWFuYWdlci5nZXRDb21wb25lbnQoXCJBdWRpb01hbmFnZXJcIikucGxheVNvdW5kKFwiZHJhd1NvdW5kXCIpO1xyXG4gICAgICAgIHRoaXMuYXVkaW9NYW5hZ2VyLmdldENvbXBvbmVudChcIkF1ZGlvTWFuYWdlclwiKS5kcmF3U291bmQubG9vcCA9IHRydWU7XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICB0b3VjaF9lbmQ6IGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgIGlmKHdpbmRvdy5pc1RvU3RvcmUpIHtcclxuICAgICAgICAgICAgLy8gdGhpcy5HYW1lQ29udHJvbGxlci5nZXRDb21wb25lbnQoXCJHYW1lQ29udHJvbGxlclwiKS5pbnN0YWxsSGFuZGxlKCk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChTdGF0ZUZvckpzLmlzVG9TdG9yZSB8fCB3aW5kb3cuaXNUb3VjaFdhbGwpIHtcclxuICAgICAgICAgICAgdGhpcy5hdWRpb01hbmFnZXIuZ2V0Q29tcG9uZW50KFwiQXVkaW9NYW5hZ2VyXCIpLnN0b3BTb3VuZChcImRyYXdTb3VuZFwiKTtcclxuICAgICAgICAgICAgd2luZG93LmlzVG91Y2hXYWxsID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICghU3RhdGVGb3JKcy5pc0NhbkRyYXcpIHtcclxuICAgICAgICAgICAgdGhpcy5vZmZFdmVudCgpO1xyXG4gICAgICAgICAgICB0aGlzLkVnZ0NvbnRyb2xsZXIuZ2V0Q29tcG9uZW50KFwiRWdnQ29udHJvbGxlclwiKS5jaGFuZ2VSaWdpZGJvZHlUeXBlKCk7XHJcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlR3JhcGhpY3MoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuYXVkaW9NYW5hZ2VyLmdldENvbXBvbmVudChcIkF1ZGlvTWFuYWdlclwiKS5zdG9wU291bmQoXCJkcmF3U291bmRcIik7XHJcblxyXG4gICAgICAgIHRoaXMuc2NoZWR1bGVPbmNlKCgpID0+IHtcclxuICAgICAgICAgICAgaWYgKHdpbmRvdy5pc1JlcGxheUdhbWUpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKCF3aW5kb3cuaXNMb3NlR2FtZSkgdGhpcy5HYW1lUGxheS5nZXRDb21wb25lbnQoXCJHYW1lUGxheVwiKS53aW5HYW1lKCk7XHJcbiAgICAgICAgfSwgU3RhdGVGb3JKcy50aW1lVG9XaW4pO1xyXG4gICAgfSxcclxuXHJcblxyXG4gICAgb2ZmRXZlbnQoKSB7XHJcbiAgICAgICAgdGhpcy5ub2RlLm9mZihjYy5Ob2RlLkV2ZW50VHlwZS5UT1VDSF9TVEFSVCk7XHJcbiAgICAgICAgdGhpcy5ub2RlLm9mZihjYy5Ob2RlLkV2ZW50VHlwZS5UT1VDSF9FTkQpO1xyXG4gICAgfSxcclxuXHJcblxyXG4gICAgY3JlYXRlR3JhcGhpY3MoKSB7XHJcbiAgICAgICAgdmFyIGdyYXBoaWNzX25vZGUgPSBjYy5pbnN0YW50aWF0ZSh0aGlzLmdyYXBoaWNzKTtcclxuICAgICAgICBncmFwaGljc19ub2RlLnggPSAwO1xyXG4gICAgICAgIHRoaXMubm9kZS5hZGRDaGlsZChncmFwaGljc19ub2RlKTtcclxuICAgIH0sXHJcbn0pO1xyXG4iXX0=
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/Controller/Bee.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '4c3a1loUGhKZZS1Pj7UbsBp', 'Bee');
// Script/Controller/Bee.ts

"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var constants_1 = require("../Data/constants");
var GameOption_1 = require("../Data/GameOption");
var AudioManager_1 = require("../Plugin/AudioManager");
var GamePlay_1 = require("./GamePlay");
// import * as PF from "pathfinding";
var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
var Bee = /** @class */ (function (_super) {
    __extends(Bee, _super);
    function Bee() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.AudioManager = null;
        _this.GamePlay = null;
        _this.rigidBody = null;
        _this.beeClearFixPos = null;
        _this.isCollide = false;
        _this.initPos = null;
        _this.targetPos = null;
        _this.isJumpback = false;
        _this.tweenStates = [];
        _this.jumpbackCount = 0;
        return _this;
    }
    Bee.prototype.start = function () {
        this.initTargetPos();
        this.beginContact();
        this.initPos = this.node.getPosition();
    };
    Bee.prototype.initTargetPos = function () {
        var random = cc.math.randomRangeInt(1, 4);
        switch (random) {
            case 1:
                this.targetPos = constants_1.Constants.Char_Point1;
                break;
            case 2:
                this.targetPos = constants_1.Constants.Char_Point2;
                break;
            case 3:
                this.targetPos = constants_1.Constants.Char_Point3;
                break;
            default:
                break;
        }
    };
    Bee.prototype.beginContact = function () {
        var _this = this;
        this.rigidBody.onBeginContact = function (c, s, o) {
            if (o.tag === 4 && _this.isJumpback) {
                _this.isJumpback = false;
                _this.tweenStates[_this.jumpbackCount - 1].stop();
                _this.initTargetPos();
                _this.isCollide = false;
                cc.log("stop jumpback");
            }
            if (o.tag === 4 && !constants_1.Constants.isHit) {
                _this.jumpBack();
                cc.log("collide line");
                _this.AudioManager.playSound(constants_1.Constants.SoundTrack.stingSound);
            }
            if (o.tag === 8) {
                cc.log("bee die!");
                _this.node.getChildByName("PSBase").getChildByName("boom").getComponent(cc.ParticleSystem).resetSystem();
                _this.node.removeComponent(sp.Skeleton);
                _this.node.removeComponent(cc.PhysicsBoxCollider);
                _this.node.removeComponent(cc.RigidBody);
                _this.scheduleOnce(function () {
                    _this.destroy();
                }, 1);
            }
            if (o.tag === 3) {
                if (_this.isCollide)
                    return;
                _this.AudioManager.playSound(constants_1.Constants.SoundTrack.stingSound);
                _this.isCollide = true;
                window.isLoseGame = true;
                constants_1.Constants.isHit = true;
                _this.getComponent(sp.Skeleton).setAnimation(0, "Hit", true);
            }
        };
    };
    Bee.prototype.jumpBack = function () {
        var _this = this;
        this.isJumpback = true;
        this.isCollide = true;
        this.jumpbackCount += 1;
        // nếu là op 16 thì cho ong nhảy lại chỗ khoe hở thôi
        if (GameOption_1.GameOption.currentOption === 16 && GameOption_1.GameOption.Op16.isPointTouchClearFixArea) {
            this.tweenStates.push(cc.tween(this.node)
                .to(0.2, { x: this.beeClearFixPos.x, y: this.beeClearFixPos.y }, { easing: cc.easing.smooth })
                .call(function () {
                _this.initTargetPos();
                _this.isCollide = false;
            })
                .start());
            return;
        }
        this.tweenStates.push(cc.tween(this.node)
            .to(0.2, { x: this.initPos.x, y: this.initPos.y }, { easing: cc.easing.smooth })
            .call(function () {
            _this.initTargetPos();
            _this.isCollide = false;
        })
            .start());
    };
    Bee.prototype.setAttackAgain = function () {
        var _this = this;
        if (this.isJumpback)
            return;
        this.scheduleOnce(function () { _this.isCollide = false; }, 1);
    };
    Bee.prototype.attack = function () {
        if (window.isToStore || constants_1.Constants.isToStore)
            return;
        var currentPosition = this.node.getPosition();
        currentPosition.lerp(this.targetPos, 0.02, currentPosition);
        this.node.setPosition(currentPosition);
    };
    Bee.prototype.update = function (dt) {
        if (window.isDraw && !this.isCollide && !constants_1.Constants.isWinGame) {
            this.attack();
        }
    };
    __decorate([
        property(AudioManager_1.default)
    ], Bee.prototype, "AudioManager", void 0);
    __decorate([
        property(GamePlay_1.default)
    ], Bee.prototype, "GamePlay", void 0);
    __decorate([
        property(cc.RigidBody)
    ], Bee.prototype, "rigidBody", void 0);
    __decorate([
        property(cc.Node)
    ], Bee.prototype, "beeClearFixPos", void 0);
    Bee = __decorate([
        ccclass
    ], Bee);
    return Bee;
}(cc.Component));
exports.default = Bee;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/Controller/NodesController.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '9a4b0WHwkROlbKmBnDG0V0n', 'NodesController');
// Script/Controller/NodesController.ts

"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var constants_1 = require("../Data/constants");
var GameOption_1 = require("../Data/GameOption");
var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
var NodesController = /** @class */ (function (_super) {
    __extends(NodesController, _super);
    function NodesController() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        // Component
        _this.Spine_Bees = [];
        _this.Spine_Character = null;
        // Node
        _this.EggController = null;
        _this.FakeCharacters = [];
        _this.HideMask = null;
        _this.LineContainer = null;
        _this.point_checkCollide = null;
        _this.Environment = null;
        _this.CTA = null;
        _this.CTA_logo = null;
        _this.CTA_button = null;
        _this.CTA_Overlay = null;
        _this.CTA_TryAgain = null;
        _this.CTA_PlayNow = null;
        _this.Hint = null;
        _this.PS_Confetti = null;
        // PreFab
        _this.Prefab_Graphics = null;
        // Op15
        _this.Op15_HatchButton = null;
        _this.Op15_Egg = null;
        _this.Op15_FireWork = null;
        return _this;
    }
    NodesController.prototype.start = function () {
        // Nếu Op hiện tại ko phải 15 thì mới khởi tạo điểm tấn công cho các con ong.
        if (GameOption_1.GameOption.currentOption !== 15) {
            constants_1.Constants.Char_Point1 = this.FakeCharacters[0].getPosition();
            constants_1.Constants.Char_Point2 = this.FakeCharacters[1].getPosition();
            constants_1.Constants.Char_Point3 = this.FakeCharacters[2].getPosition();
        }
    };
    __decorate([
        property([sp.Skeleton])
    ], NodesController.prototype, "Spine_Bees", void 0);
    __decorate([
        property(sp.Skeleton)
    ], NodesController.prototype, "Spine_Character", void 0);
    __decorate([
        property(cc.Node)
    ], NodesController.prototype, "EggController", void 0);
    __decorate([
        property([cc.Node])
    ], NodesController.prototype, "FakeCharacters", void 0);
    __decorate([
        property(cc.Node)
    ], NodesController.prototype, "HideMask", void 0);
    __decorate([
        property(cc.Node)
    ], NodesController.prototype, "LineContainer", void 0);
    __decorate([
        property(cc.Node)
    ], NodesController.prototype, "point_checkCollide", void 0);
    __decorate([
        property(cc.Node)
    ], NodesController.prototype, "Environment", void 0);
    __decorate([
        property(cc.Node)
    ], NodesController.prototype, "CTA", void 0);
    __decorate([
        property(cc.Node)
    ], NodesController.prototype, "CTA_logo", void 0);
    __decorate([
        property(cc.Node)
    ], NodesController.prototype, "CTA_button", void 0);
    __decorate([
        property(cc.Node)
    ], NodesController.prototype, "CTA_Overlay", void 0);
    __decorate([
        property(cc.Node)
    ], NodesController.prototype, "CTA_TryAgain", void 0);
    __decorate([
        property(cc.Node)
    ], NodesController.prototype, "CTA_PlayNow", void 0);
    __decorate([
        property(cc.Node)
    ], NodesController.prototype, "Hint", void 0);
    __decorate([
        property(cc.ParticleSystem)
    ], NodesController.prototype, "PS_Confetti", void 0);
    __decorate([
        property(cc.Prefab)
    ], NodesController.prototype, "Prefab_Graphics", void 0);
    __decorate([
        property(cc.Node)
    ], NodesController.prototype, "Op15_HatchButton", void 0);
    __decorate([
        property(cc.Node)
    ], NodesController.prototype, "Op15_Egg", void 0);
    __decorate([
        property(cc.Node)
    ], NodesController.prototype, "Op15_FireWork", void 0);
    NodesController = __decorate([
        ccclass
    ], NodesController);
    return NodesController;
}(cc.Component));
exports.default = NodesController;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0XFxDb250cm9sbGVyXFxOb2Rlc0NvbnRyb2xsZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsK0NBQThDO0FBQzlDLGlEQUFnRDtBQUUxQyxJQUFBLEtBQXdCLEVBQUUsQ0FBQyxVQUFVLEVBQW5DLE9BQU8sYUFBQSxFQUFFLFFBQVEsY0FBa0IsQ0FBQztBQUc1QztJQUE2QyxtQ0FBWTtJQUF6RDtRQUFBLHFFQWdFQztRQS9ERyxZQUFZO1FBRVosZ0JBQVUsR0FBa0IsRUFBRSxDQUFDO1FBRS9CLHFCQUFlLEdBQWdCLElBQUksQ0FBQztRQUdwQyxPQUFPO1FBRVAsbUJBQWEsR0FBWSxJQUFJLENBQUM7UUFHOUIsb0JBQWMsR0FBYyxFQUFFLENBQUM7UUFFL0IsY0FBUSxHQUFZLElBQUksQ0FBQztRQUV6QixtQkFBYSxHQUFZLElBQUksQ0FBQztRQUU5Qix3QkFBa0IsR0FBWSxJQUFJLENBQUM7UUFFbkMsaUJBQVcsR0FBWSxJQUFJLENBQUM7UUFHNUIsU0FBRyxHQUFZLElBQUksQ0FBQztRQUVwQixjQUFRLEdBQVksSUFBSSxDQUFDO1FBRXpCLGdCQUFVLEdBQVksSUFBSSxDQUFDO1FBRTNCLGlCQUFXLEdBQVksSUFBSSxDQUFDO1FBRzVCLGtCQUFZLEdBQVksSUFBSSxDQUFDO1FBRTdCLGlCQUFXLEdBQVksSUFBSSxDQUFDO1FBRzVCLFVBQUksR0FBWSxJQUFJLENBQUM7UUFHckIsaUJBQVcsR0FBc0IsSUFBSSxDQUFDO1FBRXRDLFNBQVM7UUFFVCxxQkFBZSxHQUFjLElBQUksQ0FBQztRQUdsQyxPQUFPO1FBRVAsc0JBQWdCLEdBQVksSUFBSSxDQUFDO1FBRWpDLGNBQVEsR0FBWSxJQUFJLENBQUM7UUFFekIsbUJBQWEsR0FBWSxJQUFJLENBQUM7O0lBVWxDLENBQUM7SUFSYSwrQkFBSyxHQUFmO1FBQ0ksNkVBQTZFO1FBQzdFLElBQUcsdUJBQVUsQ0FBQyxhQUFhLEtBQUssRUFBRSxFQUFFO1lBQ2hDLHFCQUFTLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7WUFDN0QscUJBQVMsQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztZQUM3RCxxQkFBUyxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDO1NBQ2hFO0lBQ0wsQ0FBQztJQTVERDtRQURDLFFBQVEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQzt1REFDTztJQUUvQjtRQURDLFFBQVEsQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDOzREQUNjO0lBS3BDO1FBREMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUM7MERBQ1k7SUFHOUI7UUFEQyxRQUFRLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUM7MkRBQ1c7SUFFL0I7UUFEQyxRQUFRLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQztxREFDTztJQUV6QjtRQURDLFFBQVEsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDOzBEQUNZO0lBRTlCO1FBREMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUM7K0RBQ2lCO0lBRW5DO1FBREMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUM7d0RBQ1U7SUFHNUI7UUFEQyxRQUFRLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQztnREFDRTtJQUVwQjtRQURDLFFBQVEsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDO3FEQUNPO0lBRXpCO1FBREMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUM7dURBQ1M7SUFFM0I7UUFEQyxRQUFRLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQzt3REFDVTtJQUc1QjtRQURDLFFBQVEsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDO3lEQUNXO0lBRTdCO1FBREMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUM7d0RBQ1U7SUFHNUI7UUFEQyxRQUFRLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQztpREFDRztJQUdyQjtRQURDLFFBQVEsQ0FBQyxFQUFFLENBQUMsY0FBYyxDQUFDO3dEQUNVO0lBSXRDO1FBREMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUM7NERBQ2M7SUFLbEM7UUFEQyxRQUFRLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQzs2REFDZTtJQUVqQztRQURDLFFBQVEsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDO3FEQUNPO0lBRXpCO1FBREMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUM7MERBQ1k7SUF0RGIsZUFBZTtRQURuQyxPQUFPO09BQ2EsZUFBZSxDQWdFbkM7SUFBRCxzQkFBQztDQWhFRCxBQWdFQyxDQWhFNEMsRUFBRSxDQUFDLFNBQVMsR0FnRXhEO2tCQWhFb0IsZUFBZSIsImZpbGUiOiIiLCJzb3VyY2VSb290IjoiLyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbnN0YW50cyB9IGZyb20gXCIuLi9EYXRhL2NvbnN0YW50c1wiO1xyXG5pbXBvcnQgeyBHYW1lT3B0aW9uIH0gZnJvbSBcIi4uL0RhdGEvR2FtZU9wdGlvblwiO1xyXG5cclxuY29uc3QgeyBjY2NsYXNzLCBwcm9wZXJ0eSB9ID0gY2MuX2RlY29yYXRvcjtcclxuXHJcbkBjY2NsYXNzXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE5vZGVzQ29udHJvbGxlciBleHRlbmRzIGNjLkNvbXBvbmVudCB7XHJcbiAgICAvLyBDb21wb25lbnRcclxuICAgIEBwcm9wZXJ0eShbc3AuU2tlbGV0b25dKVxyXG4gICAgU3BpbmVfQmVlczogc3AuU2tlbGV0b25bXSA9IFtdO1xyXG4gICAgQHByb3BlcnR5KHNwLlNrZWxldG9uKVxyXG4gICAgU3BpbmVfQ2hhcmFjdGVyOiBzcC5Ta2VsZXRvbiA9IG51bGw7XHJcblxyXG5cclxuICAgIC8vIE5vZGVcclxuICAgIEBwcm9wZXJ0eShjYy5Ob2RlKVxyXG4gICAgRWdnQ29udHJvbGxlcjogY2MuTm9kZSA9IG51bGw7XHJcblxyXG4gICAgQHByb3BlcnR5KFtjYy5Ob2RlXSlcclxuICAgIEZha2VDaGFyYWN0ZXJzOiBjYy5Ob2RlW10gPSBbXTtcclxuICAgIEBwcm9wZXJ0eShjYy5Ob2RlKVxyXG4gICAgSGlkZU1hc2s6IGNjLk5vZGUgPSBudWxsO1xyXG4gICAgQHByb3BlcnR5KGNjLk5vZGUpXHJcbiAgICBMaW5lQ29udGFpbmVyOiBjYy5Ob2RlID0gbnVsbDtcclxuICAgIEBwcm9wZXJ0eShjYy5Ob2RlKVxyXG4gICAgcG9pbnRfY2hlY2tDb2xsaWRlOiBjYy5Ob2RlID0gbnVsbDtcclxuICAgIEBwcm9wZXJ0eShjYy5Ob2RlKVxyXG4gICAgRW52aXJvbm1lbnQ6IGNjLk5vZGUgPSBudWxsO1xyXG5cclxuICAgIEBwcm9wZXJ0eShjYy5Ob2RlKVxyXG4gICAgQ1RBOiBjYy5Ob2RlID0gbnVsbDtcclxuICAgIEBwcm9wZXJ0eShjYy5Ob2RlKVxyXG4gICAgQ1RBX2xvZ286IGNjLk5vZGUgPSBudWxsO1xyXG4gICAgQHByb3BlcnR5KGNjLk5vZGUpXHJcbiAgICBDVEFfYnV0dG9uOiBjYy5Ob2RlID0gbnVsbDtcclxuICAgIEBwcm9wZXJ0eShjYy5Ob2RlKVxyXG4gICAgQ1RBX092ZXJsYXk6IGNjLk5vZGUgPSBudWxsO1xyXG5cclxuICAgIEBwcm9wZXJ0eShjYy5Ob2RlKVxyXG4gICAgQ1RBX1RyeUFnYWluOiBjYy5Ob2RlID0gbnVsbDtcclxuICAgIEBwcm9wZXJ0eShjYy5Ob2RlKVxyXG4gICAgQ1RBX1BsYXlOb3c6IGNjLk5vZGUgPSBudWxsO1xyXG5cclxuICAgIEBwcm9wZXJ0eShjYy5Ob2RlKVxyXG4gICAgSGludDogY2MuTm9kZSA9IG51bGw7XHJcblxyXG4gICAgQHByb3BlcnR5KGNjLlBhcnRpY2xlU3lzdGVtKVxyXG4gICAgUFNfQ29uZmV0dGk6IGNjLlBhcnRpY2xlU3lzdGVtID0gbnVsbDtcclxuXHJcbiAgICAvLyBQcmVGYWJcclxuICAgIEBwcm9wZXJ0eShjYy5QcmVmYWIpXHJcbiAgICBQcmVmYWJfR3JhcGhpY3M6IGNjLlByZWZhYiA9IG51bGw7XHJcblxyXG5cclxuICAgIC8vIE9wMTVcclxuICAgIEBwcm9wZXJ0eShjYy5Ob2RlKVxyXG4gICAgT3AxNV9IYXRjaEJ1dHRvbjogY2MuTm9kZSA9IG51bGw7XHJcbiAgICBAcHJvcGVydHkoY2MuTm9kZSlcclxuICAgIE9wMTVfRWdnOiBjYy5Ob2RlID0gbnVsbDtcclxuICAgIEBwcm9wZXJ0eShjYy5Ob2RlKVxyXG4gICAgT3AxNV9GaXJlV29yazogY2MuTm9kZSA9IG51bGw7XHJcblxyXG4gICAgcHJvdGVjdGVkIHN0YXJ0KCk6IHZvaWQge1xyXG4gICAgICAgIC8vIE7hur91IE9wIGhp4buHbiB04bqhaSBrbyBwaOG6o2kgMTUgdGjDrCBt4bubaSBraOG7n2kgdOG6oW8gxJFp4buDbSB04bqlbiBjw7RuZyBjaG8gY8OhYyBjb24gb25nLlxyXG4gICAgICAgIGlmKEdhbWVPcHRpb24uY3VycmVudE9wdGlvbiAhPT0gMTUpIHtcclxuICAgICAgICAgICAgQ29uc3RhbnRzLkNoYXJfUG9pbnQxID0gdGhpcy5GYWtlQ2hhcmFjdGVyc1swXS5nZXRQb3NpdGlvbigpO1xyXG4gICAgICAgICAgICBDb25zdGFudHMuQ2hhcl9Qb2ludDIgPSB0aGlzLkZha2VDaGFyYWN0ZXJzWzFdLmdldFBvc2l0aW9uKCk7XHJcbiAgICAgICAgICAgIENvbnN0YW50cy5DaGFyX1BvaW50MyA9IHRoaXMuRmFrZUNoYXJhY3RlcnNbMl0uZ2V0UG9zaXRpb24oKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIl19
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/neutrinoparticles/exported_effects/Sparks burst.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'd1a0fqspAlJ8ovPBXDHJoJh', 'Sparks burst');
// neutrinoparticles/exported_effects/Sparks burst.js

"use strict";

// 13ce42a2-420f-4b86-8911-dfffe6aadb52
(function (root, factory) {
  if (typeof exports === 'object' && typeof module !== 'undefined') {
    module.exports = factory();
  } else if (typeof define === 'function' && define.amd) {
    define(['exports'], function (exports) {
      (root.NeutrinoEffect = exports)['Sparks_burst'] = factory();
    });
  } else {
    var namespace = root.NeutrinoEffect || (root.NeutrinoEffect = {});
    namespace.__last__ = namespace['Sparks_burst'] = factory();
  }
})(typeof self !== 'undefined' ? self : void 0, function () {
  function Sparks_burst(ctx) {
    var Db = this;

    var ne = function ne(Ld, Bd) {
      this.Ld = Ld;
      this.Bd = Bd;

      if (this.Bd.we.pe.length > 0) {
        this.we = this.Bd.we.pe[0];
        this.Lc = [ne.prototype.Ec, ne.prototype.Fc][this.we.xe];
      } else this.we = null;
    };

    ne.prototype = {
      Ec: function Ec(fe, Ab, Xb) {
        var Gc = ctx.ib(Xb.Md);
        var Hc = Math.cos(Gc);
        var Ic = Math.sin(Gc);
        var ye = ctx.Ae(Xb.Nd[0]);
        var ze = ctx.Ae(Xb.Nd[1]);
        fe.
        /**/
        transform(ye * Hc, ye * Ic, ze * -Ic, ze * Hc, Ab[0], Ab[1]);
      },
      Fc: function Fc(fe, Ab, Xb) {
        var q = Xb.Mc;
        var z2 = 2.0 * q[2] * q[2];
        var xy = 2.0 * q[0] * q[1];
        var wz = 2.0 * q[3] * q[2];
        var ye = ctx.Ae(Xb.Nd[0]);
        var ze = ctx.Ae(Xb.Nd[1]);
        fe.
        /**/
        transform(ye * (1.0 - 2.0 * q[1] * q[1] - z2), ye * (xy + wz), ze * (wz - xy), ze * (2.0 * q[0] * q[0] + z2 - 1.0), Ab[0], Ab[1]);
      },
      Pc: function Pc(fe, Xb, ge) {
        Xb.vc(fe, -1, ge);

        if (this.we) {
          if (this.Be != null && !Xb.oc) {
            if (Xb.Od > 0.001) {
              var De = Math.floor(Xb.Qc % this.we.Rc);
              var Ee = Math.floor(Xb.Qc / this.we.Rc);
              var Ab = Xb.Ab.slice();
              var Nd = Xb.Nd.slice();

              if (!ge || ge.
              /**/
              transform(Ab, Nd)) {
                var df = Math.abs(Nd[0]);
                var ef = Math.abs(Nd[1]);

                if (df > 0.001 && ef > 0.001) {
                  fe.save();
                  this.Lc(fe, Ab, Xb);
                  fe.translate(-df * Xb.Pd[0], -ef * (1 - Xb.Pd[1]));
                  fe.globalAlpha *= Xb.Od;

                  if (Xb.gf[0] < 0.999 || Xb.gf[1] < 0.999 || Xb.gf[2] < 0.999) {
                    if (df >= 1 && ef >= 1) {
                      var Ye = df < this.Tc ? df : this.Tc;
                      var Ze = ef < this.Uc ? ef : this.Uc;
                      ctx.af(Ye, Ze);
                      ctx.bf.globalCompositeOperation = "copy";
                      ctx.bf.drawImage(this.Be.image, this.Be.x + this.Tc * De, this.Be.y + this.Uc * Ee, this.Tc, this.Uc, 0, 0, Ye, Ze);
                      ctx.bf.globalCompositeOperation = "multiply";
                      ctx.bf.fillStyle = ctx.ff(Xb.gf);
                      ctx.bf.fillRect(0, 0, Ye, Ze);
                      ctx.bf.globalCompositeOperation = "destination-atop";
                      ctx.bf.drawImage(this.Be.image, this.Be.x + this.Tc * De, this.Be.y + this.Uc * Ee, this.Tc, this.Uc, 0, 0, Ye, Ze);
                      fe.drawImage(ctx.cf, 0, 0, Ye, Ze, 0, 0, df, ef);
                    }
                  } else {
                    fe.drawImage(this.Be.image, this.Be.x + this.Tc * De, this.Be.y + this.Uc * Ee, this.Tc, this.Uc, 0, 0, df, ef);
                  }

                  fe.restore();
                }
              }
            }
          }
        }

        Xb.vc(fe, 1, ge);
      },
      Hd: function Hd(fe, ge) {
        fe.save();

        if (this.we) {
          fe.globalCompositeOperation = this.Ld.materials[this.Ld.
          /**/
          model.renderStyles[this.we.renderStyleIndex].materialIndex];
          this.Be = this.Ld.textureDescs[this.Ld.
          /**/
          model.renderStyles[this.we.renderStyleIndex].textureIndices[0]];
        } else {
          this.Be = null;
        }

        if (this.Be) {
          this.Tc = this.Be.width / this.we.Rc;
          this.Uc = this.Be.height / this.we.Sc;
        }

        function kd(a, b) {
          if (a.Ab[2] > b.Ab[2]) return 1;
          if (a.Ab[2] < b.Ab[2]) return -1;
          return 0;
        }

        switch (this.Bd.Vc) {
          case 0:
            for (var Wb = 0; Wb < this.Bd.tc.length; ++Wb) {
              this.Pc(fe, this.Bd.tc[Wb], ge);
            }

            break;

          case 1:
            for (var Wb = this.Bd.tc.length; Wb-- > 0;) {
              this.Pc(fe, this.Bd.tc[Wb], ge);
            }

            break;

          case 2:
            this.Bd.tc.sort(kd);

            for (var Wb = 0; Wb < this.Bd.tc.length; ++Wb) {
              this.Pc(fe, this.Bd.tc[Wb], ge);
            }

            break;
        }

        fe.restore();
      }
    };

    var oe = function oe(Ld, Bd) {
      this.Ld = Ld;
      this.Bd = Bd;
      if (this.Bd.we.pe.length > 0) this.we = this.Bd.we.pe[0];else this.we = null;
      this.vertex = [{
        /**/
        position: [0.0, 0.0, 0.0],

        /**/
        color: [0, 0, 0, 0],

        /**/
        texCoords: [[0.0, 0.0]]
      }, {
        /**/
        position: [0.0, 0.0, 0.0],

        /**/
        color: [0, 0, 0, 0],

        /**/
        texCoords: [[0.0, 0.0]]
      }, {
        /**/
        position: [0.0, 0.0, 0.0],

        /**/
        color: [0, 0, 0, 0],

        /**/
        texCoords: [[0.0, 0.0]]
      }, {
        /**/
        position: [0.0, 0.0, 0.0],

        /**/
        color: [0, 0, 0, 0],

        /**/
        texCoords: [[0.0, 0.0]]
      }];
    };

    oe.prototype = {
      qe: function qe(Xb, se, re, te, renderBuffer) {
        Xb.Ce(-1, se, re, te, renderBuffer);

        if (this.we) {
          if (!Xb.oc) {
            var v0 = this.vertex[0];
            var v1 = this.vertex[1];
            var v2 = this.vertex[2];
            var v3 = this.vertex[3];
            var Fe = [],
                Ge = [];

            if (this.we.xe == 0) {
              var a = ctx.ib(Xb.Md);
              var s = -Math.sin(a);
              var c = Math.cos(a);
              Fe[0] = se[0] * c + re[0] * s;
              Fe[1] = se[1] * c + re[1] * s;
              Fe[2] = se[2] * c + re[2] * s;
              Ge[0] = -se[0] * s + re[0] * c;
              Ge[1] = -se[1] * s + re[1] * c;
              Ge[2] = -se[2] * s + re[2] * c;
            } else {
              var q = Xb.Mc;
              var z2 = 2.0 * q[2] * q[2];
              var xy = 2.0 * q[0] * q[1];
              var wz = 2.0 * q[3] * q[2];
              Fe[0] = 1.0 - 2.0 * q[1] * q[1] - z2;
              Fe[1] = xy + wz;
              Fe[2] = 2.0 * q[0] * q[2] - 2.0 * q[3] * q[1];
              Ge[0] = xy - wz;
              Ge[1] = 1.0 - 2.0 * q[0] * q[0] - z2;
              Ge[2] = 2.0 * q[1] * q[2] + 2.0 * q[3] * q[0];
            }

            var He = [],
                Ie = [],
                Je = [],
                Ke = [];
            ctx.u(He, Fe, -Xb.Nd[0] * Xb.Pd[0]);
            ctx.u(Ie, Fe, Xb.Nd[0] * (1.0 - Xb.Pd[0]));
            ctx.u(Je, Ge, -Xb.Nd[1] * Xb.Pd[1]);
            ctx.u(Ke, Ge, Xb.Nd[1] * (1.0 - Xb.Pd[1]));
            ctx.c(v0.
            /**/
            position, He, Je);
            ctx.c(v0.
            /**/
            position, v0.
            /**/
            position, Xb.Ab);
            ctx.c(v1.
            /**/
            position, He, Ke);
            ctx.c(v1.
            /**/
            position, v1.
            /**/
            position, Xb.Ab);
            ctx.c(v2.
            /**/
            position, Ie, Ke);
            ctx.c(v2.
            /**/
            position, v2.
            /**/
            position, Xb.Ab);
            ctx.c(v3.
            /**/
            position, Ie, Je);
            ctx.c(v3.
            /**/
            position, v3.
            /**/
            position, Xb.Ab);
            {
              var rgb = ctx.v(Xb.gf, 255);
              v0.
              /**/
              color = v1.
              /**/
              color = v2.
              /**/
              color = v3.
              /**/
              color = [rgb[0], rgb[1], rgb[2], Xb.Od * 255];
            }
            {
              var De = Math.floor(Xb.Qc % this.we.Rc);
              var Ee = Math.floor(Xb.Qc / this.we.Rc);
              var Pe, Qe, Re, Se;
              var We = this.Ld.texturesRemap[this.Ld.
              /**/
              model.renderStyles[this.we.renderStyleIndex].textureIndices[0]];

              if (We) {
                var Ue = We.width / this.we.Rc;
                var Ve = We.height / this.we.Sc;
                var Pe = We.x + De * Ue;
                var Qe = Pe + Ue;
                var Re = We.y + We.height - Ee * Ve;
                var Se = Re - Ve;
              } else {
                var Ue = 1.0 / this.we.Rc;
                var Ve = 1.0 / this.we.Sc;
                var Pe = De * Ue;
                var Qe = Pe + Ue;
                var Re = 1.0 - Ee * Ve;
                var Se = Re - Ve;
              }

              v0.
              /**/
              texCoords[0] = [Pe, Se];
              v1.
              /**/
              texCoords[0] = [Pe, Re];
              v2.
              /**/
              texCoords[0] = [Qe, Re];
              v3.
              /**/
              texCoords[0] = [Qe, Se];
            }

            if (renderBuffer.beforeQuad) {
              renderBuffer.beforeQuad(this.we.renderStyleIndex);
            }

            renderBuffer.pushVertex(v0);
            renderBuffer.pushVertex(v1);
            renderBuffer.pushVertex(v2);
            renderBuffer.pushVertex(v3);

            if (!renderBuffer.__lastRenderCall) {
              renderBuffer.__lastRenderCall = new ctx.RenderCall(0, 6, this.we.renderStyleIndex);
            } else {
              var lastRenderCall = renderBuffer.__lastRenderCall;

              if (lastRenderCall.renderStyleIndex == this.we.renderStyleIndex) {
                lastRenderCall.numIndices += 6;
              } else {
                renderBuffer.pushRenderCall(lastRenderCall);
                renderBuffer.__lastRenderCall = new ctx.RenderCall(lastRenderCall.startIndex + lastRenderCall.numIndices, 6, this.we.renderStyleIndex);
              }
            }
          }
        }

        Xb.Ce(1, se, re, te, renderBuffer);
      },
      ue: function ue(se, re, te, renderBuffer) {
        switch (this.Bd.Vc) {
          case 0:
            for (var Wb = 0; Wb < this.Bd.tc.length; ++Wb) {
              this.qe(this.Bd.tc[Wb], se, re, te, renderBuffer);
            }

            break;

          case 1:
            for (var Wb = this.Bd.tc.length; Wb-- > 0;) {
              this.qe(this.Bd.tc[Wb], se, re, te, renderBuffer);
            }

            break;

          case 2:
            this.Bd.tc.forEach(function (Xb) {
              Xb.depth = ctx.H(te, Xb.Ab);
            });
            this.Bd.tc.sort(function (a, b) {
              if (a.depth < b.depth) return 1;
              if (a.depth > b.depth) return -1;
              return 0;
            });
            this.Bd.tc.forEach(function (Xb) {
              this.qe(Xb, se, re, te, renderBuffer);
            }, this);
            break;
        }
      }
    };

    var ld = function ld(Ld, we, ve) {
      var Vb = this;
      this.Ld = Ld;
      this.we = we; // Eb

      function Eb() {
        this.Fb = 0;
        this.Gb = 1;
        this.Hb = null;
        this.Ib = null;
        this.Kb = 0;
        this.Lb = 1;
        Vb.we.Mb(this); // IMPL

        this.Nb = function () {
          this.Ob = this.Gb;
          this.Fb = 0;
        };

        this.Nb();
      }

      Eb.prototype = {
        Jd: function Jd() {
          this.Nb();
        },
        Id: function Id(Qb, Ab, Mc) {
          Vb.we.Pb(Qb, Vb, this); // IMPL

          var Rb = Vb.Rb;
          var systemTime = Ld.Rb;
          var Sb = Qb;
          var ic = 0;

          if (this.zb > 0.000001) {
            var Tb = this.Ob + Qb * this.zb;

            while (Tb >= 1.0) {
              var Ub = this.zb < 0.001 ? 0.0 : (1.0 - this.Ob) / this.zb;
              Sb -= Ub;
              Rb += Ub;
              systemTime += Ub;

              if (this.Hb != null && Rb > this.Hb) {
                Vb.disactivate();
                break;
              }

              Vb.Rb = Rb;
              Ld.Rb = systemTime;
              if (Ab && Qb > 0) ctx.ab(Vb.Ab, Ab, Vb.Bb, Sb / Qb);
              if (Mc && Qb > 0) ctx.slerpq(Vb.Mc, Mc, Vb.prevRotation, Sb / Qb); // for the future when Jb would be external

              this.Lb = this.Jb;

              for (var Wb = 0; Wb < this.Jb; ++Wb) {
                if (Vb.sc.length == 0) break;
                if (this.Jb == 1) this.Kb = 0;else this.Kb = Wb / (this.Jb - 1);
                var Xb = Vb.sc.pop();
                Vb.tc.unshift(Xb);
                if (Wb == 0) Xb.Yb();else Xb.Zb();
                Xb.Id(Sb);
                ++ic;
              }

              this.Ob = 0.0;
              Tb -= 1.0;

              if (this.Ib != null && ++this.Fb >= this.Ib) {
                Vb.disactivate();
                break;
              }
            }

            this.Ob = Tb;
          }

          Rb += Sb;
          Vb.Rb = Rb;
          if (Ab) ctx.T(Vb.Ab, Ab);
          if (Mc) ctx.U(Vb.Mc, Mc);
          return ic;
        }
      }; // ac

      function ac() {
        this.Gb = 1;
        this.Kb = 0;
        this.Lb = 1;
        Vb.we.Mb(this); // IMPL

        this.Nb = function () {
          this.bc = this.Gb;
        };

        this.Nb();
      }

      ac.prototype = {
        Jd: function Jd() {
          this.Nb();
        },
        Id: function Id(Qb, Ab, Mc) {
          Vb.we.Pb(Qb, Vb, this); // IMPL

          var cc = Vb.Rb;
          var dc = cc + Qb;
          var systemTimeBeforeFrame = Ld.Rb;
          var systemTimeAfterFrame = systemTimeBeforeFrame + Qb;
          var ec = Ab ? ctx.O(ctx.h(Ab, Vb.Bb)) : 0;
          var ic = 0;

          if (ec > 0.000001) {
            var fc = ec / this.rd;
            var Tb = this.bc + fc;
            var hc = fc < 0.001 ? 1.0 - this.bc : (1.0 - this.bc) / fc;
            var jc = [];

            while (Tb > 1.0) {
              var kc = cc + hc * Qb;
              if (Ab) ctx.ab(jc, Vb.Bb, Ab, hc);
              Vb.Rb = kc;
              ctx.T(Vb.Ab, jc);
              Ld.Rb = ctx.X(systemTimeBeforeFrame, systemTimeAfterFrame, hc); // for the future when Jb would be external

              this.Lb = this.Jb;

              for (var Wb = 0; Wb < this.Jb; ++Wb) {
                if (Vb.sc.length == 0) break;
                if (this.Jb == 1) this.Kb = 0;else this.Kb = Wb / (this.Jb - 1);
                var Xb = Vb.sc.pop();
                Vb.tc.unshift(Xb);
                if (Wb == 0) Xb.Yb();else Xb.Zb();
                Xb.Id(Qb * (1.0 - hc));
                ++ic;
              }

              hc += 1.0 / fc;
              Tb -= 1.0;
            }

            this.bc = Tb;
          }

          Vb.Rb = dc;
          if (Ab) ctx.T(Vb.Ab, Ab);
          if (Mc) ctx.U(Vb.Mc, Mc);
          return ic;
        }
      }; // mc

      function mc() {
        this.Ab = [];
        this.Pd = [];
        this.Nd = [];
        this.gf = [];
        this.Kc = [];
      }

      mc.prototype = {
        nc: function nc() {
          this.oc = false;

          for (var i = 0; i < this.Kc.length; ++i) {
            var pc = this.Kc[i];
            pc.Bd.Jd(this.Ab, null);
            if (pc.Ad.sd) pc.Bd.disactivate();
          }
        },
        Yb: function Yb() {
          Vb.we.fd(Vb, this); // IMPL

          this.nc();
        },
        Zb: function Zb() {
          Vb.we.gd(Vb, this); // IMPL

          this.nc();
        },
        Id: function Id(Qb) {
          Vb.we.qc(Qb, Vb, this); // IMPL

          this.rc(Qb);
        },
        pc: function pc(je) {
          return this.Kc[je].Bd;
        },
        rc: function rc(Qb) {
          for (var i = 0; i < this.Kc.length; i++) {
            this.Kc[i].Bd.Id(Qb, this.Ab, null);
          }
        },
        uc: function uc(md, nd) {
          this.Kc.push({
            Bd: new ld(Ld, md, ve),
            Ad: nd
          });
        },
        vc: function vc(fe, xc, ge) {
          for (var i = 0; i < this.Kc.length; ++i) {
            var pc = this.Kc[i];
            if (xc == pc.Ad.xc) pc.Bd.Hd(fe, ge);
          }
        },
        Ce: function Ce(xc, se, re, te, renderBuffer) {
          for (var i = 0; i < this.Kc.length; ++i) {
            var pc = this.Kc[i];
            if (xc == pc.Ad.xc) pc.Bd.ue(se, re, te, renderBuffer);
          }
        },
        wc: function wc(fe) {
          this.oc = true;

          for (var i = 0; i < this.Kc.length; ++i) {
            var pc = this.Kc[i];

            if (pc.Ad.sd) {
              pc.Bd.activate();
              pc.Bd.Id(0);
            } else pc.Bd.disactivate();
          }
        },
        yc: function yc(Gd) {
          for (var i = 0; i < this.Kc.length; ++i) {
            this.Kc[i].Bd.Ed(Gd);
          }
        }
      }; // zc

      function zc() {}

      zc.prototype.Ac = function (Xb) {
        return Vb.we.Cc(Vb, Xb, this); // IMPL
      }; // ld Ad


      this.Ab = [];
      this.Bb = [];
      this.Mc = [];
      this.prevRotation = [];
      this.tc = [];
      this.sc = [];
      this.Wc = new zc();
      this.construct = new ve(this.Ld, this);
      this.Yc = [];
      this.ad = [];

      this.dd = function () {
        this.vd = new Eb();
      };

      this.ed = function () {
        this.vd = new ac();
      };

      this.we.ud(this); // IMPL

      for (var Wb = 0; Wb < this.jd; ++Wb) {
        var Xb = new mc();

        for (var id = 0; id < this.Yc.length; ++id) {
          var hd = this.Yc[id];
          Xb.uc(hd.Db, hd.Ad);
        }

        this.sc.push(Xb);
      }

      this.Nb = function (Ab, Mc) {
        ctx.T(this.Ab, Ab ? Ab : [0, 0, 0]);
        ctx.T(this.Bb, this.Ab);
        ctx.U(this.Mc, Mc ? Mc : [0, 0, 0, 1]);
        ctx.U(this.prevRotation, this.Mc);
        this.Rb = 0.0;
        this.wd = 0.0;
        this.Zc = true;
        this.paused_ = false;
        this.generatorsPaused_ = false;
        ctx.W(this.ad, 0, 0, 0);
      };
    };

    ld.prototype.Jd = function (Ab, Mc) {
      this.Nb(Ab, Mc);
      this.sc.push.apply(this.sc, this.tc);
      this.tc.length = 0;
      this.vd.Jd();
    };

    ld.prototype.Id = function (Qb, Ab, Mc) {
      if (this.paused_) {
        this.Td(Ab, Mc);
        return;
      }

      this.wd = this.Rb;

      if (Ab) {
        ctx.T(this.Bb, this.Ab);

        if (Qb > 0.0001) {
          var shift = [];
          ctx.g(shift, Ab, this.Bb);
          ctx.T(this.ad, shift);
          ctx.w(this.ad, this.ad, Qb);
        } else {
          ctx.W(this.ad, 0, 0, 0);
        }
      } else {
        ctx.W(this.ad, 0, 0, 0);
      }

      if (Mc) {
        ctx.U(this.prevRotation, this.Mc);
      }

      var ic;

      if (this.Zc && !this.generatorsPaused_) {
        ic = this.vd.Id(Qb, Ab, Mc);
      } else {
        if (Ab) ctx.T(this.Ab, Ab);
        if (Mc) ctx.U(this.Mc, Mc);
        ic = 0;
        this.Rb += Qb;
      }

      for (var Wb = ic; Wb < this.tc.length;) {
        var Xb = this.tc[Wb];

        if (!Xb.oc) {
          Xb.Id(Qb);

          if (this.Wc.Ac(this.tc[Wb])) {
            Xb.wc();
            if (this.xd(Wb)) continue;
          }
        } else {
          Xb.rc(Qb);
          if (this.xd(Wb)) continue;
        }

        ++Wb;
      }
    };

    ld.prototype.xd = function (je) {
      var Xb = this.tc[je];
      var ready = true;

      for (var id = 0; id < Xb.Kc.length; ++id) {
        var Bd = Xb.Kc[id].Bd;

        if (Bd.activated() || Bd.tc.length > 0) {
          ready = false;
          break;
        }
      }

      if (ready) {
        this.sc.push(this.tc[je]);
        this.tc.splice(je, 1);
        return true;
      }

      return false;
    };

    ld.prototype.Hd = function (fe, ge) {
      this.construct.Hd(fe, ge);
    };

    ld.prototype.ue = function (se, re, te, renderBuffer) {
      this.construct.ue(se, re, te, renderBuffer);
    };

    ld.prototype.Td = function (Ab, Mc) {
      this.wd = this.Rb;

      if (Ab) {
        ctx.T(this.Bb, this.Ab);
        ctx.T(this.Ab, Ab);
      }

      if (Mc) {
        ctx.U(this.prevRotation, this.Mc);
        ctx.U(this.Mc, Mc);
      }
    };

    ld.prototype.uc = function (md, nd) {
      this.Yc.push({
        Db: md,
        Ad: nd
      });
    };

    ld.prototype.
    /**/
    pause = function () {
      this.paused_ = true;
    };

    ld.prototype.
    /**/
    unpause = function () {
      this.paused_ = false;
    };

    ld.prototype.
    /**/
    paused = function () {
      return this.paused_;
    };

    ld.prototype.
    /**/
    pauseGenerators = function () {
      this.generatorsPaused_ = true;
    };

    ld.prototype.
    /**/
    unpauseGenerators = function () {
      this.generatorsPaused_ = false;
    };

    ld.prototype.
    /**/
    generatorsPaused = function () {
      return this.generatorsPaused_;
    };

    ld.prototype.activate = function () {
      this.Zc = true;
    };

    ld.prototype.disactivate = function () {
      this.Zc = false;
    };

    ld.prototype.activated = function () {
      return this.Zc;
    };

    ld.prototype.
    /**/
    getNumParticles = function () {
      return this.tc.length;
    };

    var ke = function ke() {
      var Cb = this;

      this._init = function (we, Ab, Mc, ve, options) {
        this.
        /**/
        model = we;
        this.Ab = [];
        this.Mc = []; // ke Ad

        this.od = [];

        this.pd = function (md) {
          var Bd = new ld(this, md, ve);
          Bd.Nb(this.Ab, this.Mc);
          this["_".concat(md.name)] = Bd;
          this.od.push(Bd);
        };

        this.Nb = function (Ab, Mc) {
          this.Cd = 0.0;
          this.Rb = 0.0;
          ctx.T(this.Ab, Ab ? Ab : [0, 0, 0]);
          ctx.U(this.Mc, Mc ? Mc : [0, 0, 0, 1]);
        };

        this.Nb(Ab, Mc);
        this.
        /**/
        model.qd(this); // IMPL

        this._presimNeeded = true;

        if (options.generatorsPaused) {
          this.
          /**/
          pauseGeneratorsInAllEmitters();
        }

        if (options.paused) {
          this.
          /**/
          pauseAllEmitters();
        } else {
          this.zeroUpdate();
          this.updateFixed(this.Ud, Ab, Mc, this.presimFrameTime);
          this._presimNeeded = false;
        }
      };
    };

    ke.prototype.
    /**/
    restart = function (
    /**/
    position,
    /**/
    rotation,
    /**/
    options) {
      this.Nb(
      /**/
      position ?
      /**/
      position : this.Ab,
      /**/
      rotation ?
      /**/
      rotation : this.Mc);
      this._presimNeeded = true;

      for (var i = 0; i < this.od.length; ++i) {
        this.od[i].Jd(this.Ab, this.Mc);
      }

      this._presimNeeded = true;

      if (options && options.generatorsPaused) {
        this.
        /**/
        pauseGeneratorsInAllEmitters();
      }

      if (options && options.paused) {
        this.
        /**/
        pauseAllEmitters();
      } else {
        this.zeroUpdate();
        this.updateFixed(this.Ud, this.Ab, this.Mc, this.presimFrameTime);
        this._presimNeeded = false;
      }
    };

    ke.prototype.zeroUpdate = function () {
      for (var i = 0; i < this.od.length; ++i) {
        this.od[i].Id(0, this.Ab, this.Mc);
      }
    };

    ke.prototype.
    /**/
    update = function (
    /**/
    dt,
    /**/
    position,
    /**/
    rotation) {
      if (this.Dd > 0.0) this.updateFixed(
      /**/
      dt,
      /**/
      position,
      /**/
      rotation, this.Dd);else this.updateFlex(
      /**/
      dt,
      /**/
      position,
      /**/
      rotation);
    };

    ke.prototype.updateFixed = function (
    /**/
    dt,
    /**/
    position,
    /**/
    rotation,
    /**/
    frameTime) {
      var updatedTime = 0.0;
      var hc = [];
      ctx.T(hc, this.Ab);
      var frameRotation = [];
      ctx.U(frameRotation, this.Mc);
      if (
      /**/
      position && ctx.equalv3_(
      /**/
      position, this.Ab))
        /**/
        position = null;
      if (
      /**/
      rotation && ctx.equalq_(
      /**/
      rotation, this.Mc))
        /**/
        rotation = null;

      while (
      /**/
      dt - updatedTime + this.Cd >=
      /**/
      frameTime) {
        var cc = this.Rb;
        if (
        /**/
        position) ctx.ab(hc, this.Ab,
        /**/
        position, updatedTime /
        /**/
        dt);
        if (
        /**/
        rotation) ctx.slerpq(frameRotation, this.Mc,
        /**/
        rotation, updatedTime /
        /**/
        dt);

        for (var i = 0; i < this.od.length; ++i) {
          this.od[i].Id(
          /**/
          frameTime, hc, frameRotation);
          this.Rb = cc;
        }

        updatedTime +=
        /**/
        frameTime - this.Cd;
        this.Cd = 0.0;
        this.Rb = cc +
        /**/
        frameTime;
      }

      if (
      /**/
      position) ctx.T(this.Ab,
      /**/
      position);
      if (
      /**/
      rotation) ctx.U(this.Mc,
      /**/
      rotation);
      this.Cd +=
      /**/
      dt - updatedTime;
    };

    ke.prototype.updateFlex = function (
    /**/
    dt,
    /**/
    position,
    /**/
    rotation) {
      var cc = this.Rb;

      for (var i = 0; i < this.od.length; ++i) {
        this.od[i].Id(
        /**/
        dt,
        /**/
        position,
        /**/
        rotation);
        this.Rb = cc;
      }

      this.Rb = cc +
      /**/
      dt;
      if (
      /**/
      position) ctx.T(this.Ab,
      /**/
      position);
      if (
      /**/
      rotation) ctx.U(this.Mc,
      /**/
      rotation);
    };

    ke.prototype.
    /**/
    resetPosition = function (
    /**/
    position,
    /**/
    rotation) {
      if (
      /**/
      position) ctx.T(this.Ab,
      /**/
      position);
      if (
      /**/
      rotation) ctx.U(this.Mc,
      /**/
      rotation);

      for (var i = 0; i < this.od.length; ++i) {
        this.od[i].Td(this.Ab, this.Mc);
      }
    };

    ke.prototype.
    /**/
    setPropertyInAllEmitters = function (
    /**/
    name,
    /**/
    value) {
      var propName = "_".concat(
      /**/
      name);

      if (
      /**/
      value instanceof Array) {
        if (
        /**/
        value.length == 2) {
          for (var i = 0; i < this.od.length; ++i) {
            ctx.S(this.od[i][propName],
            /**/
            value);
          }
        } else {
          for (var i = 0; i < this.od.length; ++i) {
            ctx.T(this.od[i][propName],
            /**/
            value);
          }
        }
      } else {
        for (var i = 0; i < this.od.length; ++i) {
          this.od[i][propName] =
          /**/
          value;
        }
      }
    };

    ke.prototype.
    /**/
    pauseAllEmitters = function () {
      for (var i = 0; i < this.od.length; ++i) {
        this.od[i].
        /**/
        pause();
      }
    };

    ke.prototype.
    /**/
    unpauseAllEmitters = function () {
      for (var i = 0; i < this.od.length; ++i) {
        this.od[i].
        /**/
        unpause();
      }

      this.zeroUpdate();

      if (this._presimNeeded) {
        this.updateFixed(this.Ud, this.Ab, this.Mc, this.presimFrameTime);
        this._presimNeeded = false;
      }
    };

    ke.prototype.
    /**/
    areAllEmittersPaused = function () {
      for (var i = 0; i < this.od.length; ++i) {
        if (!this.od[i].paused()) return false;
      }

      return true;
    };

    ke.prototype.
    /**/
    pauseGeneratorsInAllEmitters = function () {
      for (var i = 0; i < this.od.length; ++i) {
        this.od[i].
        /**/
        pauseGenerators();
      }
    };

    ke.prototype.
    /**/
    unpauseGeneratorsInAllEmitters = function () {
      for (var i = 0; i < this.od.length; ++i) {
        this.od[i].
        /**/
        unpauseGenerators();
      }
    };

    ke.prototype.
    /**/
    areGeneratorsInAllEmittersPaused = function () {
      for (var i = 0; i < this.od.length; ++i) {
        if (!this.od[i].generatorsPaused()) return false;
      }

      return true;
    };

    ke.prototype.
    /**/
    getNumParticles = function () {
      var numParticles = 0;

      for (var i = 0; i < this.od.length; ++i) {
        numParticles += this.od[i].getNumParticles();
      }

      return numParticles;
    };

    var le = function le() {
      this._init = function (we, Ab, Mc, renderBuffer, options) {
        le.prototype._init.call(this, we, Ab, Mc, oe, options);

        this.texturesRemap = [];
        var indices = [];
        {
          var verDisp;

          for (var Wb = 0; Wb < this.
          /**/
          model.Xe; ++Wb) {
            verDisp = Wb * 4;
            indices.push(verDisp + 0, verDisp + 3, verDisp + 1, verDisp + 1, verDisp + 3, verDisp + 2);
          }
        }
        this.renderBuffer = renderBuffer;
        this.renderBuffer.initialize(this.
        /**/
        model.Xe * 4, [2], indices, this.
        /**/
        model.Xe);
        this.renderBuffer.__numIndices = 0;
      };
    };

    le.prototype = new ke();

    le.prototype.
    /**/
    fillGeometryBuffers = function (
    /**/
    cameraRight,
    /**/
    cameraUp,
    /**/
    cameraDir) {
      this.renderBuffer.cleanup();
      this.renderBuffer.__lastRenderCall = null;
      this.od.forEach(function (Bd) {
        Bd.ue(
        /**/
        cameraRight,
        /**/
        cameraUp,
        /**/
        cameraDir, this.renderBuffer);
      }, this);
      if (this.renderBuffer.__lastRenderCall) this.renderBuffer.pushRenderCall(this.renderBuffer.__lastRenderCall);
    };

    var me = function me() {
      this._init = function (we, Ab, Mc, options) {
        me.prototype._init.call(this, we, Ab, Mc, ne, options);

        this.materials = [];
        this.
        /**/
        model.materials.forEach(function (value) {
          this.materials.push(['source-over', 'lighter', 'multiply'][value]);
        }, this);
        this.
        /**/
        textureDescs = [];
      };
    };

    me.prototype = new ke();

    me.prototype.
    /**/
    draw = function (
    /**/
    context,
    /**/
    camera) {
      for (var i = 0; i < this.od.length; ++i) {
        this.od[i].Hd(
        /**/
        context,
        /**/
        camera);
      }
    };

    this.createWGLInstance = function (
    /**/
    position,
    /**/
    rotation,
    /**/
    renderBuffer,
    /**/
    options) {
      var Ld = new le();

      Ld._init(this,
      /**/
      position,
      /**/
      rotation,
      /**/
      renderBuffer,
      /**/
      options || {});

      return Ld;
    };

    this.createCanvas2DInstance = function (
    /**/
    position,
    /**/
    rotation,
    /**/
    options) {
      var Ld = new me();

      Ld._init(this,
      /**/
      position,
      /**/
      rotation,
      /**/
      options || {});

      return Ld;
    };

    this.textures = ['sphere_orange.png'];
    this.materials = [1];
    this.renderStyles = [{
      materialIndex: 0,
      textureIndices: [0]
    }];
    this.Xe = 3000;

    function Emitter_DefaultEmitter() {
      var _1,
          _3 = [],
          _5,
          _6,
          _6i0,
          _6s0 = [],
          _7 = [],
          _7i,
          _7s = [],
          _8 = [],
          _9,
          _10,
          _10i0,
          _10s0 = [],
          _11,
          _13,
          _15 = [],
          _17 = [],
          _19,
          _21 = [],
          _22,
          _22i0,
          _22s0 = [],
          _23,
          _24,
          _24i0,
          _24s0 = [],
          _25,
          _26 = [],
          _26fs = [],
          _26vs = [],
          _26rw = [],
          _26rwn = [],
          _26rwl,
          _26v = [],
          _26p = [],
          _26dtl,
          _26dtp,
          _26df,
          _26fsd = [],
          _27 = [],
          _27x = [],
          _27y = [],
          _27z = [],
          _28 = [],
          _29,
          _30 = [],
          _30i0,
          _30s0 = [],
          _30i1,
          _30s1 = [],
          _31,
          _32,
          _32i0,
          _32s0 = [],
          _33,
          _33i0,
          _33s0 = [],
          _34,
          _34i0,
          _34s0 = [],
          _35,
          _36;

      this.pe = [{
        xe: 1,
        Rc: 1,
        Sc: 1,
        renderStyleIndex: 0
      }];
      this.name = "DefaultEmitter";

      this.ud = function (Bd) {
        Bd.dd();
        Bd._6 = [[[0, 0.220665, 0.318587, 0.379215, 0.420794, 0.451183, 0.474816, 0.494688, 0.513163, 0.532418, 0.554793, 0.583229, 0.622079, 0.679108, 0.772734, 1, 1]]];
        Bd._7 = [[[60, -293], [183, -219], [183, -219]]];
        Bd._10 = [[[0.3, 1, 1]]];
        Bd._22 = [[[0, 0.0129444, 0.0491835, 0.104924, 0.176478, 0.260245, 0.35269, 0.450322, 0.54968, 0.647311, 0.739756, 0.823523, 0.895077, 0.950817, 0.987056, 1, 1], [1, 0.987056, 0.950816, 0.895075, 0.823522, 0.739755, 0.647311, 0.549678, 0.450321, 0.352688, 0.260244, 0.176477, 0.104924, 0.0491832, 0.0129438, 0, 0]]];
        Bd._24 = [[[0, 0.0129445, 0.0491834, 0.104923, 0.176477, 0.260245, 0.352688, 0.45032, 0.549679, 0.647311, 0.739757, 0.823523, 0.895077, 0.950817, 0.987056, 1, 1]]];
        Bd._30 = [[[1, 1.08235, 1.31293, 1.66757, 2.12282, 2.65577, 3.24394, 3.86511, 4.49725, 5.11842, 5.70659, 6.23954, 6.69479, 7.04943, 7.27999, 7.36235, 7.36235]], [[1, 1, 1]]];
        Bd._32 = [[[0, 1, 1], [1, 0.376401, 0.376401], [0.376401, 0.8, 0.8], [0.8, 0.1, 0.1], [0.1, 1, 1], [1, 0, 0]]];
        Bd._33 = [[[0, 0.34799, 0.516906, 0.631629, 0.71686, 0.782823, 0.834936, 0.876485, 0.90965, 0.935968, 0.956581, 0.972371, 0.984046, 0.992201, 0.997357, 1, 1]]];
        Bd._34 = [[[1, 0.997975, 0.991373, 0.980075, 0.96386, 0.942401, 0.91523, 0.881707, 0.840947, 0.791711, 0.7322, 0.659677, 0.569629, 0.453644, 0.292056, 0, 0]]];
        Bd.jd = 1000;
        Bd.Vc = 0;
      };

      this.Mb = function (vd) {
        vd.zb = 0.3;
        vd.Gb = 1;
        vd.Jb = 500;
      };

      this.Pb = function (Qb, Bd, vd) {
        vd.zb = 0.3;
      };

      this.fd = function (Bd, Xb) {
        Xb.Mc = [];
        Xb._ = 0.0;
        _1 = 1 + Bd.Ld.rand() * (3 - 1);
        Xb._2 = _1;
        ctx.W(_3, 0, 0, 0);
        Xb._4 = [];
        ctx.c(Xb._4, Bd.Ab, _3);
        _5 = 0 + Bd.Ld.rand() * (1 - 0);
        _6i0 = _5 < 0 ? 0 : _5 > 1 ? 1 : _5;
        ctx.V(_6s0, 0, (_6i0 - 0) * 15);
        _6 = Db.nb(Bd._6[0][_6s0[0]], _6s0[1]);
        _7i = Db.kb(_6);
        ctx.V(_7s, 0, (_7i - 0) * 1);
        Db.lb(_7, Bd._7[_7s[0]], _7s[1]);
        ctx.W(_8, _7[0], _7[1], 0);
        _9 = 0 + Bd.Ld.rand() * (1 - 0);
        _10i0 = _9 < 0 ? 0 : _9 > 1 ? 1 : _9;
        ctx.V(_10s0, 0, (_10i0 - 0) * 1);
        _10 = Db.nb(Bd._10[0][_10s0[0]], _10s0[1]);
        _11 = ctx.v(ctx.v(_8, _10), 10);
        Xb._12 = [];
        ctx.T(Xb._12, _11);
        _13 = 1 + Bd.Ld.rand() * (4 - 1);
        Xb._14 = _13;
        ctx.randv3gen(_15, 300, Bd.Ld.rand);
        Xb._16 = [];
        ctx.T(Xb._16, _15);
        ctx.randv3gen(_17, 300, Bd.Ld.rand);
        Xb._18 = [];
        ctx.T(Xb._18, _17);
        _19 = 0 + Bd.Ld.rand() * (1 - 0);
        Xb._20 = _19;
        ctx.T(Xb.Ab, Xb._4);
      };

      this.gd = function (Bd, Xb) {
        Xb.Mc = [];
        Xb._ = 0.0;
        _1 = 1 + Bd.Ld.rand() * (3 - 1);
        Xb._2 = _1;
        ctx.W(_3, 0, 0, 0);
        Xb._4 = [];
        ctx.c(Xb._4, Bd.Ab, _3);
        _5 = 0 + Bd.Ld.rand() * (1 - 0);
        _6i0 = _5 < 0 ? 0 : _5 > 1 ? 1 : _5;
        ctx.V(_6s0, 0, (_6i0 - 0) * 15);
        _6 = Db.nb(Bd._6[0][_6s0[0]], _6s0[1]);
        _7i = Db.kb(_6);
        ctx.V(_7s, 0, (_7i - 0) * 1);
        Db.lb(_7, Bd._7[_7s[0]], _7s[1]);
        ctx.W(_8, _7[0], _7[1], 0);
        _9 = 0 + Bd.Ld.rand() * (1 - 0);
        _10i0 = _9 < 0 ? 0 : _9 > 1 ? 1 : _9;
        ctx.V(_10s0, 0, (_10i0 - 0) * 1);
        _10 = Db.nb(Bd._10[0][_10s0[0]], _10s0[1]);
        _11 = ctx.v(ctx.v(_8, _10), 10);
        Xb._12 = [];
        ctx.T(Xb._12, _11);
        _13 = 1 + Bd.Ld.rand() * (4 - 1);
        Xb._14 = _13;
        ctx.randv3gen(_15, 300, Bd.Ld.rand);
        Xb._16 = [];
        ctx.T(Xb._16, _15);
        ctx.randv3gen(_17, 300, Bd.Ld.rand);
        Xb._18 = [];
        ctx.T(Xb._18, _17);
        _19 = 0 + Bd.Ld.rand() * (1 - 0);
        Xb._20 = _19;
        ctx.T(Xb.Ab, Xb._4);
      };

      this.qc = function (Qb, Bd, Xb) {
        Xb._ += Qb;
        ctx.W(_21, 0, 150, 0);
        _22i0 = Xb._ < 0.000502169 ? 0.000502169 : Xb._ > 1 ? 0.000502169 + (Xb._ - 0.000502169) % 0.999498 : Xb._;
        _22i0 < 0.5 ? ctx.V(_22s0, 0, (_22i0 - 0.000502169) * 30.0302) : ctx.V(_22s0, 1, (_22i0 - 0.5) * 30);
        _22 = Db.nb(Bd._22[0][_22s0[0]], _22s0[1]);
        _23 = Xb._ / Xb._2;
        _24i0 = _23 < 0.000502169 ? 0.000502169 : _23 > 1 ? 1 : _23;
        ctx.V(_24s0, 0, (_24i0 - 0.000502169) * 15.0075);
        _24 = Db.nb(Bd._24[0][_24s0[0]], _24s0[1]);
        _25 = ctx.v(ctx.bb(Xb._16, Xb._18, _22), _24);
        ctx.T(_26fs, _21);
        ctx.c(_26fs, _26fs, _25);
        ctx.T(_26vs, [0, 0, 0]);
        _26dtl = Qb;
        ctx.T(_26v, Xb._12);
        ctx.T(_26p, Xb._4);

        while (_26dtl > 0.0001) {
          _26dtp = _26dtl;
          ctx.T(_26fsd, _26fs);
          ctx.g(_26rw, _26vs, _26v);
          _26rwl = ctx.P(_26rw);

          if (_26rwl > 0.0001) {
            _26rwl = Math.sqrt(_26rwl);
            ctx.w(_26rwn, _26rw, _26rwl);
            _26df = 0.01 * Xb._14 * _26rwl;
            if (_26df * _26dtp > 0.2) _26dtp = 0.2 / _26df;
            ctx.c(_26fsd, _26fsd, ctx.v(_26rwn, _26rwl * _26df));
          }

          ctx.c(_26v, _26v, ctx.v(_26fsd, _26dtp));
          ctx.c(_26p, _26p, ctx.v(_26v, _26dtp));
          _26dtl -= _26dtp;
        }

        ctx.T(Xb._4, _26p);
        ctx.T(Xb._12, _26v);
        ctx.T(Xb.Ab, Xb._4);
        ctx.Q(_27z, [0, 0, 1]);
        ctx.I(_27y, _27z, Xb._12);
        ctx.Q(_27y, _27y);
        ctx.I(_27x, _27y, _27z);
        ctx.pb(_27, _27x, _27y, _27z);
        ctx.V(_28, 3, 3);
        _29 = ctx.O(Xb._12);
        _30i0 = _29 < 0 ? 0 : _29 > 200 ? 200 : _29;
        ctx.V(_30s0, 0, (_30i0 - 0) * 0.075);
        _30i1 = _29 < 0 ? 0 : _29 > 1 ? 1 : _29;
        ctx.V(_30s1, 0, (_30i1 - 0) * 1);
        ctx.V(_30, Db.nb(Bd._30[0][_30s0[0]], _30s0[1]), Db.nb(Bd._30[1][_30s1[0]], _30s1[1]));
        _31 = Xb._ + Xb._20;
        _32i0 = _31 < 0 ? 0 : _31 > 1 ? 0 + (_31 - 0) % 1 : _31;
        _32i0 < 0.5 ? _32i0 < 0.4 ? _32i0 < 0.256169 ? ctx.V(_32s0, 0, (_32i0 - 0) * 3.90367) : ctx.V(_32s0, 1, (_32i0 - 0.256169) * 6.95262) : ctx.V(_32s0, 2, (_32i0 - 0.4) * 10) : _32i0 < 0.8 ? _32i0 < 0.623069 ? ctx.V(_32s0, 3, (_32i0 - 0.5) * 8.12552) : ctx.V(_32s0, 4, (_32i0 - 0.623069) * 5.65192) : ctx.V(_32s0, 5, (_32i0 - 0.8) * 5);
        _32 = Db.nb(Bd._32[0][_32s0[0]], _32s0[1]);
        _23 = Xb._ / Xb._2;
        _33i0 = _23 < 0 ? 0 : _23 > 1 ? 1 : _23;
        ctx.V(_33s0, 0, (_33i0 - 0) * 15);
        _33 = Db.nb(Bd._33[0][_33s0[0]], _33s0[1]);
        _34i0 = _23 < 0 ? 0 : _23 > 1 ? 1 : _23;
        ctx.V(_34s0, 0, (_34i0 - 0) * 15);
        _34 = Db.nb(Bd._34[0][_34s0[0]], _34s0[1]);
        _35 = ctx.r(ctx.r(_30, ctx.X(1, _32, _33)), _34);
        _36 = ctx.j(_28, _35);
        ctx.S(Xb.Pd, [0.5, 0.5]);
        ctx.U(Xb.Mc, _27);
        ctx.S(Xb.Nd, _36);
        ctx.T(Xb.gf, [1, 1, 1]);
        Xb.Od = 1;
        Xb.Qc = 0;
      };

      this.Cc = function (Bd, Xb, Wc) {
        if (Xb._ > Xb._2) return true;
        return false;
      };
    }

    function Emitter_DefaultEmitter1() {
      var _1,
          _3 = [],
          _5,
          _6,
          _6i0,
          _6s0 = [],
          _7 = [],
          _7i,
          _7s = [],
          _8 = [],
          _9,
          _10,
          _10i0,
          _10s0 = [],
          _11,
          _13,
          _15 = [],
          _17 = [],
          _19,
          _21 = [],
          _22,
          _22i0,
          _22s0 = [],
          _23,
          _24,
          _24i0,
          _24s0 = [],
          _25,
          _26 = [],
          _26fs = [],
          _26vs = [],
          _26rw = [],
          _26rwn = [],
          _26rwl,
          _26v = [],
          _26p = [],
          _26dtl,
          _26dtp,
          _26df,
          _26fsd = [],
          _27 = [],
          _27x = [],
          _27y = [],
          _27z = [],
          _28 = [],
          _29,
          _30 = [],
          _30i0,
          _30s0 = [],
          _30i1,
          _30s1 = [],
          _31,
          _32,
          _32i0,
          _32s0 = [],
          _33,
          _33i0,
          _33s0 = [],
          _34,
          _34i0,
          _34s0 = [],
          _35,
          _36;

      this.pe = [{
        xe: 1,
        Rc: 1,
        Sc: 1,
        renderStyleIndex: 0
      }];
      this.name = "DefaultEmitter1";

      this.ud = function (Bd) {
        Bd.dd();
        Bd._6 = [[[0, 0.220665, 0.318587, 0.379215, 0.420794, 0.451183, 0.474816, 0.494688, 0.513163, 0.532418, 0.554793, 0.583229, 0.622079, 0.679108, 0.772734, 1, 1]]];
        Bd._7 = [[[242, -383], [321, -275], [321, -275]]];
        Bd._10 = [[[0.3, 1, 1]]];
        Bd._22 = [[[0, 0.0129444, 0.0491835, 0.104924, 0.176478, 0.260245, 0.35269, 0.450322, 0.54968, 0.647311, 0.739756, 0.823523, 0.895077, 0.950817, 0.987056, 1, 1], [1, 0.987056, 0.950816, 0.895075, 0.823522, 0.739755, 0.647311, 0.549678, 0.450321, 0.352688, 0.260244, 0.176477, 0.104924, 0.0491832, 0.0129438, 0, 0]]];
        Bd._24 = [[[0, 0.0129445, 0.0491834, 0.104923, 0.176477, 0.260245, 0.352688, 0.45032, 0.549679, 0.647311, 0.739757, 0.823523, 0.895077, 0.950817, 0.987056, 1, 1]]];
        Bd._30 = [[[1, 1.08235, 1.31293, 1.66757, 2.12282, 2.65577, 3.24394, 3.86511, 4.49725, 5.11842, 5.70659, 6.23954, 6.69479, 7.04943, 7.27999, 7.36235, 7.36235]], [[1, 1, 1]]];
        Bd._32 = [[[0, 1, 1], [1, 0.376401, 0.376401], [0.376401, 0.8, 0.8], [0.8, 0.1, 0.1], [0.1, 1, 1], [1, 0, 0]]];
        Bd._33 = [[[0, 0.34799, 0.516906, 0.631629, 0.71686, 0.782823, 0.834936, 0.876485, 0.90965, 0.935968, 0.956581, 0.972371, 0.984046, 0.992201, 0.997357, 1, 1]]];
        Bd._34 = [[[1, 0.997975, 0.991373, 0.980075, 0.96386, 0.942401, 0.91523, 0.881707, 0.840947, 0.791711, 0.7322, 0.659677, 0.569629, 0.453644, 0.292056, 0, 0]]];
        Bd.jd = 1000;
        Bd.Vc = 0;
      };

      this.Mb = function (vd) {
        vd.zb = 0.3;
        vd.Gb = 1;
        vd.Jb = 500;
      };

      this.Pb = function (Qb, Bd, vd) {
        vd.zb = 0.3;
      };

      this.fd = function (Bd, Xb) {
        Xb.Mc = [];
        Xb._ = 0.0;
        _1 = 1 + Bd.Ld.rand() * (3 - 1);
        Xb._2 = _1;
        ctx.W(_3, 0, 0, 0);
        Xb._4 = [];
        ctx.c(Xb._4, Bd.Ab, _3);
        _5 = 0 + Bd.Ld.rand() * (1 - 0);
        _6i0 = _5 < 0 ? 0 : _5 > 1 ? 1 : _5;
        ctx.V(_6s0, 0, (_6i0 - 0) * 15);
        _6 = Db.nb(Bd._6[0][_6s0[0]], _6s0[1]);
        _7i = Db.kb(_6);
        ctx.V(_7s, 0, (_7i - 0) * 1);
        Db.lb(_7, Bd._7[_7s[0]], _7s[1]);
        ctx.W(_8, _7[0], _7[1], 0);
        _9 = 0 + Bd.Ld.rand() * (1 - 0);
        _10i0 = _9 < 0 ? 0 : _9 > 1 ? 1 : _9;
        ctx.V(_10s0, 0, (_10i0 - 0) * 1);
        _10 = Db.nb(Bd._10[0][_10s0[0]], _10s0[1]);
        _11 = ctx.v(ctx.v(_8, _10), 10);
        Xb._12 = [];
        ctx.T(Xb._12, _11);
        _13 = 1 + Bd.Ld.rand() * (4 - 1);
        Xb._14 = _13;
        ctx.randv3gen(_15, 300, Bd.Ld.rand);
        Xb._16 = [];
        ctx.T(Xb._16, _15);
        ctx.randv3gen(_17, 300, Bd.Ld.rand);
        Xb._18 = [];
        ctx.T(Xb._18, _17);
        _19 = 0 + Bd.Ld.rand() * (1 - 0);
        Xb._20 = _19;
        ctx.T(Xb.Ab, Xb._4);
      };

      this.gd = function (Bd, Xb) {
        Xb.Mc = [];
        Xb._ = 0.0;
        _1 = 1 + Bd.Ld.rand() * (3 - 1);
        Xb._2 = _1;
        ctx.W(_3, 0, 0, 0);
        Xb._4 = [];
        ctx.c(Xb._4, Bd.Ab, _3);
        _5 = 0 + Bd.Ld.rand() * (1 - 0);
        _6i0 = _5 < 0 ? 0 : _5 > 1 ? 1 : _5;
        ctx.V(_6s0, 0, (_6i0 - 0) * 15);
        _6 = Db.nb(Bd._6[0][_6s0[0]], _6s0[1]);
        _7i = Db.kb(_6);
        ctx.V(_7s, 0, (_7i - 0) * 1);
        Db.lb(_7, Bd._7[_7s[0]], _7s[1]);
        ctx.W(_8, _7[0], _7[1], 0);
        _9 = 0 + Bd.Ld.rand() * (1 - 0);
        _10i0 = _9 < 0 ? 0 : _9 > 1 ? 1 : _9;
        ctx.V(_10s0, 0, (_10i0 - 0) * 1);
        _10 = Db.nb(Bd._10[0][_10s0[0]], _10s0[1]);
        _11 = ctx.v(ctx.v(_8, _10), 10);
        Xb._12 = [];
        ctx.T(Xb._12, _11);
        _13 = 1 + Bd.Ld.rand() * (4 - 1);
        Xb._14 = _13;
        ctx.randv3gen(_15, 300, Bd.Ld.rand);
        Xb._16 = [];
        ctx.T(Xb._16, _15);
        ctx.randv3gen(_17, 300, Bd.Ld.rand);
        Xb._18 = [];
        ctx.T(Xb._18, _17);
        _19 = 0 + Bd.Ld.rand() * (1 - 0);
        Xb._20 = _19;
        ctx.T(Xb.Ab, Xb._4);
      };

      this.qc = function (Qb, Bd, Xb) {
        Xb._ += Qb;
        ctx.W(_21, 0, 150, 0);
        _22i0 = Xb._ < 0.000502169 ? 0.000502169 : Xb._ > 1 ? 0.000502169 + (Xb._ - 0.000502169) % 0.999498 : Xb._;
        _22i0 < 0.5 ? ctx.V(_22s0, 0, (_22i0 - 0.000502169) * 30.0302) : ctx.V(_22s0, 1, (_22i0 - 0.5) * 30);
        _22 = Db.nb(Bd._22[0][_22s0[0]], _22s0[1]);
        _23 = Xb._ / Xb._2;
        _24i0 = _23 < 0.000502169 ? 0.000502169 : _23 > 1 ? 1 : _23;
        ctx.V(_24s0, 0, (_24i0 - 0.000502169) * 15.0075);
        _24 = Db.nb(Bd._24[0][_24s0[0]], _24s0[1]);
        _25 = ctx.v(ctx.bb(Xb._16, Xb._18, _22), _24);
        ctx.T(_26fs, _21);
        ctx.c(_26fs, _26fs, _25);
        ctx.T(_26vs, [0, 0, 0]);
        _26dtl = Qb;
        ctx.T(_26v, Xb._12);
        ctx.T(_26p, Xb._4);

        while (_26dtl > 0.0001) {
          _26dtp = _26dtl;
          ctx.T(_26fsd, _26fs);
          ctx.g(_26rw, _26vs, _26v);
          _26rwl = ctx.P(_26rw);

          if (_26rwl > 0.0001) {
            _26rwl = Math.sqrt(_26rwl);
            ctx.w(_26rwn, _26rw, _26rwl);
            _26df = 0.01 * Xb._14 * _26rwl;
            if (_26df * _26dtp > 0.2) _26dtp = 0.2 / _26df;
            ctx.c(_26fsd, _26fsd, ctx.v(_26rwn, _26rwl * _26df));
          }

          ctx.c(_26v, _26v, ctx.v(_26fsd, _26dtp));
          ctx.c(_26p, _26p, ctx.v(_26v, _26dtp));
          _26dtl -= _26dtp;
        }

        ctx.T(Xb._4, _26p);
        ctx.T(Xb._12, _26v);
        ctx.T(Xb.Ab, Xb._4);
        ctx.Q(_27z, [0, 0, 1]);
        ctx.I(_27y, _27z, Xb._12);
        ctx.Q(_27y, _27y);
        ctx.I(_27x, _27y, _27z);
        ctx.pb(_27, _27x, _27y, _27z);
        ctx.V(_28, 3, 3);
        _29 = ctx.O(Xb._12);
        _30i0 = _29 < 0 ? 0 : _29 > 200 ? 200 : _29;
        ctx.V(_30s0, 0, (_30i0 - 0) * 0.075);
        _30i1 = _29 < 0 ? 0 : _29 > 1 ? 1 : _29;
        ctx.V(_30s1, 0, (_30i1 - 0) * 1);
        ctx.V(_30, Db.nb(Bd._30[0][_30s0[0]], _30s0[1]), Db.nb(Bd._30[1][_30s1[0]], _30s1[1]));
        _31 = Xb._ + Xb._20;
        _32i0 = _31 < 0 ? 0 : _31 > 1 ? 0 + (_31 - 0) % 1 : _31;
        _32i0 < 0.5 ? _32i0 < 0.4 ? _32i0 < 0.256169 ? ctx.V(_32s0, 0, (_32i0 - 0) * 3.90367) : ctx.V(_32s0, 1, (_32i0 - 0.256169) * 6.95262) : ctx.V(_32s0, 2, (_32i0 - 0.4) * 10) : _32i0 < 0.8 ? _32i0 < 0.623069 ? ctx.V(_32s0, 3, (_32i0 - 0.5) * 8.12552) : ctx.V(_32s0, 4, (_32i0 - 0.623069) * 5.65192) : ctx.V(_32s0, 5, (_32i0 - 0.8) * 5);
        _32 = Db.nb(Bd._32[0][_32s0[0]], _32s0[1]);
        _23 = Xb._ / Xb._2;
        _33i0 = _23 < 0 ? 0 : _23 > 1 ? 1 : _23;
        ctx.V(_33s0, 0, (_33i0 - 0) * 15);
        _33 = Db.nb(Bd._33[0][_33s0[0]], _33s0[1]);
        _34i0 = _23 < 0 ? 0 : _23 > 1 ? 1 : _23;
        ctx.V(_34s0, 0, (_34i0 - 0) * 15);
        _34 = Db.nb(Bd._34[0][_34s0[0]], _34s0[1]);
        _35 = ctx.r(ctx.r(_30, ctx.X(1, _32, _33)), _34);
        _36 = ctx.j(_28, _35);
        ctx.S(Xb.Pd, [0.5, 0.5]);
        ctx.U(Xb.Mc, _27);
        ctx.S(Xb.Nd, _36);
        ctx.T(Xb.gf, [1, 1, 1]);
        Xb.Od = 1;
        Xb.Qc = 0;
      };

      this.Cc = function (Bd, Xb, Wc) {
        if (Xb._ > Xb._2) return true;
        return false;
      };
    }

    function Emitter_DefaultEmitter2() {
      var _1,
          _3 = [],
          _5,
          _6,
          _6i0,
          _6s0 = [],
          _7 = [],
          _7i,
          _7s = [],
          _8 = [],
          _9,
          _10,
          _10i0,
          _10s0 = [],
          _11,
          _13,
          _15 = [],
          _17 = [],
          _19,
          _21 = [],
          _22,
          _22i0,
          _22s0 = [],
          _23,
          _24,
          _24i0,
          _24s0 = [],
          _25,
          _26 = [],
          _26fs = [],
          _26vs = [],
          _26rw = [],
          _26rwn = [],
          _26rwl,
          _26v = [],
          _26p = [],
          _26dtl,
          _26dtp,
          _26df,
          _26fsd = [],
          _27 = [],
          _27x = [],
          _27y = [],
          _27z = [],
          _28 = [],
          _29,
          _30 = [],
          _30i0,
          _30s0 = [],
          _30i1,
          _30s1 = [],
          _31,
          _32,
          _32i0,
          _32s0 = [],
          _33,
          _33i0,
          _33s0 = [],
          _34,
          _34i0,
          _34s0 = [],
          _35,
          _36;

      this.pe = [{
        xe: 1,
        Rc: 1,
        Sc: 1,
        renderStyleIndex: 0
      }];
      this.name = "DefaultEmitter2";

      this.ud = function (Bd) {
        Bd.dd();
        Bd._6 = [[[0, 0.220665, 0.318587, 0.379215, 0.420794, 0.451183, 0.474816, 0.494688, 0.513163, 0.532418, 0.554793, 0.583229, 0.622079, 0.679108, 0.772734, 1, 1]]];
        Bd._7 = [[[165, -150], [210, -78], [210, -78]]];
        Bd._10 = [[[0.3, 1, 1]]];
        Bd._22 = [[[0, 0.0129444, 0.0491835, 0.104924, 0.176478, 0.260245, 0.35269, 0.450322, 0.54968, 0.647311, 0.739756, 0.823523, 0.895077, 0.950817, 0.987056, 1, 1], [1, 0.987056, 0.950816, 0.895075, 0.823522, 0.739755, 0.647311, 0.549678, 0.450321, 0.352688, 0.260244, 0.176477, 0.104924, 0.0491832, 0.0129438, 0, 0]]];
        Bd._24 = [[[0, 0.0129445, 0.0491834, 0.104923, 0.176477, 0.260245, 0.352688, 0.45032, 0.549679, 0.647311, 0.739757, 0.823523, 0.895077, 0.950817, 0.987056, 1, 1]]];
        Bd._30 = [[[1, 1.08235, 1.31293, 1.66757, 2.12282, 2.65577, 3.24394, 3.86511, 4.49725, 5.11842, 5.70659, 6.23954, 6.69479, 7.04943, 7.27999, 7.36235, 7.36235]], [[1, 1, 1]]];
        Bd._32 = [[[0, 1, 1], [1, 0.376401, 0.376401], [0.376401, 0.8, 0.8], [0.8, 0.1, 0.1], [0.1, 1, 1], [1, 0, 0]]];
        Bd._33 = [[[0, 0.34799, 0.516906, 0.631629, 0.71686, 0.782823, 0.834936, 0.876485, 0.90965, 0.935968, 0.956581, 0.972371, 0.984046, 0.992201, 0.997357, 1, 1]]];
        Bd._34 = [[[1, 0.997975, 0.991373, 0.980075, 0.96386, 0.942401, 0.91523, 0.881707, 0.840947, 0.791711, 0.7322, 0.659677, 0.569629, 0.453644, 0.292056, 0, 0]]];
        Bd.jd = 1000;
        Bd.Vc = 0;
      };

      this.Mb = function (vd) {
        vd.zb = 0.3;
        vd.Gb = 1;
        vd.Jb = 500;
      };

      this.Pb = function (Qb, Bd, vd) {
        vd.zb = 0.3;
      };

      this.fd = function (Bd, Xb) {
        Xb.Mc = [];
        Xb._ = 0.0;
        _1 = 1 + Bd.Ld.rand() * (3 - 1);
        Xb._2 = _1;
        ctx.W(_3, 0, 0, 0);
        Xb._4 = [];
        ctx.c(Xb._4, Bd.Ab, _3);
        _5 = 0 + Bd.Ld.rand() * (1 - 0);
        _6i0 = _5 < 0 ? 0 : _5 > 1 ? 1 : _5;
        ctx.V(_6s0, 0, (_6i0 - 0) * 15);
        _6 = Db.nb(Bd._6[0][_6s0[0]], _6s0[1]);
        _7i = Db.kb(_6);
        ctx.V(_7s, 0, (_7i - 0) * 1);
        Db.lb(_7, Bd._7[_7s[0]], _7s[1]);
        ctx.W(_8, _7[0], _7[1], 0);
        _9 = 0 + Bd.Ld.rand() * (1 - 0);
        _10i0 = _9 < 0 ? 0 : _9 > 1 ? 1 : _9;
        ctx.V(_10s0, 0, (_10i0 - 0) * 1);
        _10 = Db.nb(Bd._10[0][_10s0[0]], _10s0[1]);
        _11 = ctx.v(ctx.v(_8, _10), 10);
        Xb._12 = [];
        ctx.T(Xb._12, _11);
        _13 = 1 + Bd.Ld.rand() * (4 - 1);
        Xb._14 = _13;
        ctx.randv3gen(_15, 300, Bd.Ld.rand);
        Xb._16 = [];
        ctx.T(Xb._16, _15);
        ctx.randv3gen(_17, 300, Bd.Ld.rand);
        Xb._18 = [];
        ctx.T(Xb._18, _17);
        _19 = 0 + Bd.Ld.rand() * (1 - 0);
        Xb._20 = _19;
        ctx.T(Xb.Ab, Xb._4);
      };

      this.gd = function (Bd, Xb) {
        Xb.Mc = [];
        Xb._ = 0.0;
        _1 = 1 + Bd.Ld.rand() * (3 - 1);
        Xb._2 = _1;
        ctx.W(_3, 0, 0, 0);
        Xb._4 = [];
        ctx.c(Xb._4, Bd.Ab, _3);
        _5 = 0 + Bd.Ld.rand() * (1 - 0);
        _6i0 = _5 < 0 ? 0 : _5 > 1 ? 1 : _5;
        ctx.V(_6s0, 0, (_6i0 - 0) * 15);
        _6 = Db.nb(Bd._6[0][_6s0[0]], _6s0[1]);
        _7i = Db.kb(_6);
        ctx.V(_7s, 0, (_7i - 0) * 1);
        Db.lb(_7, Bd._7[_7s[0]], _7s[1]);
        ctx.W(_8, _7[0], _7[1], 0);
        _9 = 0 + Bd.Ld.rand() * (1 - 0);
        _10i0 = _9 < 0 ? 0 : _9 > 1 ? 1 : _9;
        ctx.V(_10s0, 0, (_10i0 - 0) * 1);
        _10 = Db.nb(Bd._10[0][_10s0[0]], _10s0[1]);
        _11 = ctx.v(ctx.v(_8, _10), 10);
        Xb._12 = [];
        ctx.T(Xb._12, _11);
        _13 = 1 + Bd.Ld.rand() * (4 - 1);
        Xb._14 = _13;
        ctx.randv3gen(_15, 300, Bd.Ld.rand);
        Xb._16 = [];
        ctx.T(Xb._16, _15);
        ctx.randv3gen(_17, 300, Bd.Ld.rand);
        Xb._18 = [];
        ctx.T(Xb._18, _17);
        _19 = 0 + Bd.Ld.rand() * (1 - 0);
        Xb._20 = _19;
        ctx.T(Xb.Ab, Xb._4);
      };

      this.qc = function (Qb, Bd, Xb) {
        Xb._ += Qb;
        ctx.W(_21, 0, 150, 0);
        _22i0 = Xb._ < 0.000502169 ? 0.000502169 : Xb._ > 1 ? 0.000502169 + (Xb._ - 0.000502169) % 0.999498 : Xb._;
        _22i0 < 0.5 ? ctx.V(_22s0, 0, (_22i0 - 0.000502169) * 30.0302) : ctx.V(_22s0, 1, (_22i0 - 0.5) * 30);
        _22 = Db.nb(Bd._22[0][_22s0[0]], _22s0[1]);
        _23 = Xb._ / Xb._2;
        _24i0 = _23 < 0.000502169 ? 0.000502169 : _23 > 1 ? 1 : _23;
        ctx.V(_24s0, 0, (_24i0 - 0.000502169) * 15.0075);
        _24 = Db.nb(Bd._24[0][_24s0[0]], _24s0[1]);
        _25 = ctx.v(ctx.bb(Xb._16, Xb._18, _22), _24);
        ctx.T(_26fs, _21);
        ctx.c(_26fs, _26fs, _25);
        ctx.T(_26vs, [0, 0, 0]);
        _26dtl = Qb;
        ctx.T(_26v, Xb._12);
        ctx.T(_26p, Xb._4);

        while (_26dtl > 0.0001) {
          _26dtp = _26dtl;
          ctx.T(_26fsd, _26fs);
          ctx.g(_26rw, _26vs, _26v);
          _26rwl = ctx.P(_26rw);

          if (_26rwl > 0.0001) {
            _26rwl = Math.sqrt(_26rwl);
            ctx.w(_26rwn, _26rw, _26rwl);
            _26df = 0.01 * Xb._14 * _26rwl;
            if (_26df * _26dtp > 0.2) _26dtp = 0.2 / _26df;
            ctx.c(_26fsd, _26fsd, ctx.v(_26rwn, _26rwl * _26df));
          }

          ctx.c(_26v, _26v, ctx.v(_26fsd, _26dtp));
          ctx.c(_26p, _26p, ctx.v(_26v, _26dtp));
          _26dtl -= _26dtp;
        }

        ctx.T(Xb._4, _26p);
        ctx.T(Xb._12, _26v);
        ctx.T(Xb.Ab, Xb._4);
        ctx.Q(_27z, [0, 0, 1]);
        ctx.I(_27y, _27z, Xb._12);
        ctx.Q(_27y, _27y);
        ctx.I(_27x, _27y, _27z);
        ctx.pb(_27, _27x, _27y, _27z);
        ctx.V(_28, 3, 3);
        _29 = ctx.O(Xb._12);
        _30i0 = _29 < 0 ? 0 : _29 > 200 ? 200 : _29;
        ctx.V(_30s0, 0, (_30i0 - 0) * 0.075);
        _30i1 = _29 < 0 ? 0 : _29 > 1 ? 1 : _29;
        ctx.V(_30s1, 0, (_30i1 - 0) * 1);
        ctx.V(_30, Db.nb(Bd._30[0][_30s0[0]], _30s0[1]), Db.nb(Bd._30[1][_30s1[0]], _30s1[1]));
        _31 = Xb._ + Xb._20;
        _32i0 = _31 < 0 ? 0 : _31 > 1 ? 0 + (_31 - 0) % 1 : _31;
        _32i0 < 0.5 ? _32i0 < 0.4 ? _32i0 < 0.256169 ? ctx.V(_32s0, 0, (_32i0 - 0) * 3.90367) : ctx.V(_32s0, 1, (_32i0 - 0.256169) * 6.95262) : ctx.V(_32s0, 2, (_32i0 - 0.4) * 10) : _32i0 < 0.8 ? _32i0 < 0.623069 ? ctx.V(_32s0, 3, (_32i0 - 0.5) * 8.12552) : ctx.V(_32s0, 4, (_32i0 - 0.623069) * 5.65192) : ctx.V(_32s0, 5, (_32i0 - 0.8) * 5);
        _32 = Db.nb(Bd._32[0][_32s0[0]], _32s0[1]);
        _23 = Xb._ / Xb._2;
        _33i0 = _23 < 0 ? 0 : _23 > 1 ? 1 : _23;
        ctx.V(_33s0, 0, (_33i0 - 0) * 15);
        _33 = Db.nb(Bd._33[0][_33s0[0]], _33s0[1]);
        _34i0 = _23 < 0 ? 0 : _23 > 1 ? 1 : _23;
        ctx.V(_34s0, 0, (_34i0 - 0) * 15);
        _34 = Db.nb(Bd._34[0][_34s0[0]], _34s0[1]);
        _35 = ctx.r(ctx.r(_30, ctx.X(1, _32, _33)), _34);
        _36 = ctx.j(_28, _35);
        ctx.S(Xb.Pd, [0.5, 0.5]);
        ctx.U(Xb.Mc, _27);
        ctx.S(Xb.Nd, _36);
        ctx.T(Xb.gf, [1, 1, 1]);
        Xb.Od = 1;
        Xb.Qc = 0;
      };

      this.Cc = function (Bd, Xb, Wc) {
        if (Xb._ > Xb._2) return true;
        return false;
      };
    }

    this.qd = function (Ld) {
      Ld.Dd = 0.0166667;
      Ld.Ud = 0;
      Ld.presimFrameTime = 0.1;

      Ld.rand = function () {
        return Math.random();
      };

      Ld.pd(new Emitter_DefaultEmitter());
      Ld.pd(new Emitter_DefaultEmitter1());
      Ld.pd(new Emitter_DefaultEmitter2());
    };

    this.kb = function (v) {
      return v < 0 ? 0 : v > 1 ? 1 : v;
    };

    this.lb = function (r, path, je) {
      var indexInt = Math.floor(je);
      var lerp = je - indexInt;
      ctx.Y(r, path[indexInt], path[indexInt + 1], lerp);
    };

    this.nb = function (funcValues, je) {
      var indexInt = Math.floor(je);
      var nextInt = indexInt + 1;
      return ctx.X(funcValues[indexInt], funcValues[nextInt], je - indexInt);
    };
  }

  return Sparks_burst;
});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/Data/GameOption.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'ccb77OsDvVF6p/wjNW2QnlL', 'GameOption');
// Script/Data/GameOption.ts

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GameOption = void 0;
var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
var Op12 = {
    reviveCount: 3,
    showCTA: false,
};
var Op13 = {
    reviveCount: 3,
    showCTA: false,
};
var Op14 = {
    reviveCount: 3,
    showCTA: false,
};
var Op16 = {
    isPointTouchClearFixArea: false,
};
var Op17 = {
    reviveCount: 2,
    showCTA: false,
    isPassLevel28: false,
};
var GameOption = /** @class */ (function () {
    function GameOption() {
    }
    // state    
    GameOption.currentOption = 15;
    GameOption.Op12 = Op12;
    GameOption.Op13 = Op13;
    GameOption.Op14 = Op14;
    GameOption.Op16 = Op16;
    GameOption.Op17 = Op17;
    return GameOption;
}());
exports.GameOption = GameOption;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0XFxEYXRhXFxHYW1lT3B0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUdNLElBQUEsS0FBd0IsRUFBRSxDQUFDLFVBQVUsRUFBbkMsT0FBTyxhQUFBLEVBQUUsUUFBUSxjQUFrQixDQUFDO0FBRTVDLElBQU0sSUFBSSxHQUFxQjtJQUMzQixXQUFXLEVBQUUsQ0FBQztJQUNkLE9BQU8sRUFBRSxLQUFLO0NBQ2pCLENBQUE7QUFFRCxJQUFNLElBQUksR0FBcUI7SUFDM0IsV0FBVyxFQUFFLENBQUM7SUFDZCxPQUFPLEVBQUUsS0FBSztDQUNqQixDQUFBO0FBRUQsSUFBTSxJQUFJLEdBQXFCO0lBQzNCLFdBQVcsRUFBRSxDQUFDO0lBQ2QsT0FBTyxFQUFFLEtBQUs7Q0FDakIsQ0FBQTtBQUVELElBQU0sSUFBSSxHQUFxQjtJQUMzQix3QkFBd0IsRUFBRSxLQUFLO0NBQ2xDLENBQUE7QUFHRCxJQUFNLElBQUksR0FBcUI7SUFDM0IsV0FBVyxFQUFFLENBQUM7SUFDZCxPQUFPLEVBQUUsS0FBSztJQUNkLGFBQWEsRUFBRSxLQUFLO0NBQ3ZCLENBQUE7QUFFRDtJQUFBO0lBVUEsQ0FBQztJQVJHLFlBQVk7SUFDTCx3QkFBYSxHQUFXLEVBQUUsQ0FBQztJQUUzQixlQUFJLEdBQWdCLElBQUksQ0FBQztJQUN6QixlQUFJLEdBQWdCLElBQUksQ0FBQztJQUN6QixlQUFJLEdBQWdCLElBQUksQ0FBQztJQUN6QixlQUFJLEdBQWdCLElBQUksQ0FBQztJQUN6QixlQUFJLEdBQWdCLElBQUksQ0FBQztJQUNwQyxpQkFBQztDQVZELEFBVUMsSUFBQTtBQVZZLGdDQUFVIiwiZmlsZSI6IiIsInNvdXJjZVJvb3QiOiIvIiwic291cmNlc0NvbnRlbnQiOlsiXHJcbmltcG9ydCAqIGFzIEludGVyZmFjZXMgZnJvbSBcIi4vSW50ZXJmYWNlc1wiO1xyXG5cclxuY29uc3QgeyBjY2NsYXNzLCBwcm9wZXJ0eSB9ID0gY2MuX2RlY29yYXRvcjtcclxuXHJcbmNvbnN0IE9wMTI6IEludGVyZmFjZXMuT3AxMiAgPSB7XHJcbiAgICByZXZpdmVDb3VudDogMyxcclxuICAgIHNob3dDVEE6IGZhbHNlLFxyXG59XHJcblxyXG5jb25zdCBPcDEzOiBJbnRlcmZhY2VzLk9wMTMgID0ge1xyXG4gICAgcmV2aXZlQ291bnQ6IDMsXHJcbiAgICBzaG93Q1RBOiBmYWxzZSxcclxufVxyXG5cclxuY29uc3QgT3AxNDogSW50ZXJmYWNlcy5PcDE0ICA9IHtcclxuICAgIHJldml2ZUNvdW50OiAzLFxyXG4gICAgc2hvd0NUQTogZmFsc2UsXHJcbn1cclxuXHJcbmNvbnN0IE9wMTY6IEludGVyZmFjZXMuT3AxNiAgPSB7XHJcbiAgICBpc1BvaW50VG91Y2hDbGVhckZpeEFyZWE6IGZhbHNlLFxyXG59XHJcblxyXG5cclxuY29uc3QgT3AxNzogSW50ZXJmYWNlcy5PcDE3ICA9IHtcclxuICAgIHJldml2ZUNvdW50OiAyLFxyXG4gICAgc2hvd0NUQTogZmFsc2UsXHJcbiAgICBpc1Bhc3NMZXZlbDI4OiBmYWxzZSxcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIEdhbWVPcHRpb24ge1xyXG5cclxuICAgIC8vIHN0YXRlICAgIFxyXG4gICAgc3RhdGljIGN1cnJlbnRPcHRpb246IG51bWJlciA9IDE1O1xyXG5cclxuICAgIHN0YXRpYyBPcDEyOiB0eXBlb2YgT3AxMiA9IE9wMTI7XHJcbiAgICBzdGF0aWMgT3AxMzogdHlwZW9mIE9wMTMgPSBPcDEzO1xyXG4gICAgc3RhdGljIE9wMTQ6IHR5cGVvZiBPcDE0ID0gT3AxNDtcclxuICAgIHN0YXRpYyBPcDE2OiB0eXBlb2YgT3AxNiA9IE9wMTY7XHJcbiAgICBzdGF0aWMgT3AxNzogdHlwZW9mIE9wMTcgPSBPcDE3O1xyXG59XHJcblxyXG5cclxuIl19
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/Data/constants.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'd0b68xTANVBsaIBjAI8Yj1K', 'constants');
// Script/Data/constants.ts

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Constants = void 0;
var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
var Event;
(function (Event) {
    Event["touchStart"] = "touchstart";
    Event["touchMove"] = "touchmove";
    Event["touchEnd"] = "touchend";
    Event["touchCancel"] = "touchcancel";
})(Event || (Event = {}));
var IronSource = {
    // ironsource 
    SoundState: true,
    State: 1,
    isEndGame: false,
    isPlayBgSound: false,
};
var Responsive = {
    calculated: 0,
    currentDevice: "",
};
var SoundTrack;
(function (SoundTrack) {
    SoundTrack["bgSound"] = "bgSound";
    SoundTrack["drawSound"] = "drawSound";
    SoundTrack["winSound"] = "winSound";
    SoundTrack["moveSound"] = "moveSound";
    SoundTrack["fireworksSound"] = "fireworksSound";
    SoundTrack["crySound"] = "crySound";
    SoundTrack["clickSound"] = "clickSound";
    SoundTrack["loseSound"] = "loseSound";
    SoundTrack["stingSound"] = "stingSound";
    SoundTrack["explosionSound"] = "explosionSound";
    SoundTrack["beeSound"] = "beeSound";
    SoundTrack["hatchEggSound"] = "hatchEggSound";
})(SoundTrack || (SoundTrack = {}));
var Constants = /** @class */ (function () {
    function Constants() {
    }
    // state    
    Constants.isClickGameStart = false;
    Constants.isRotate = false;
    Constants.isCanTouch = false;
    Constants.isToStore = false;
    Constants.currentPosition = null;
    Constants.CharacterPos = null;
    Constants.Char_Point1 = null;
    Constants.Char_Point2 = null;
    Constants.Char_Point3 = null;
    Constants.isHit = false;
    Constants.isWinGame = false;
    Constants.isLoseGame = false;
    Constants.currentLv = 1;
    Constants.currentOption = 14;
    // event
    Constants.Event = Event;
    // SoundTrack
    Constants.SoundTrack = SoundTrack;
    // ironSource
    Constants.ironSource = IronSource;
    // Responsive
    Constants.Responsive = Responsive;
    return Constants;
}());
exports.Constants = Constants;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0XFxEYXRhXFxjb25zdGFudHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQU0sSUFBQSxLQUF3QixFQUFFLENBQUMsVUFBVSxFQUFuQyxPQUFPLGFBQUEsRUFBRSxRQUFRLGNBQWtCLENBQUM7QUFHNUMsSUFBSyxLQUtKO0FBTEQsV0FBSyxLQUFLO0lBQ04sa0NBQXlCLENBQUE7SUFDekIsZ0NBQXVCLENBQUE7SUFDdkIsOEJBQXFCLENBQUE7SUFDckIsb0NBQTJCLENBQUE7QUFDL0IsQ0FBQyxFQUxJLEtBQUssS0FBTCxLQUFLLFFBS1Q7QUFHRCxJQUFNLFVBQVUsR0FBRztJQUNmLGNBQWM7SUFDZCxVQUFVLEVBQUUsSUFBSTtJQUNoQixLQUFLLEVBQUUsQ0FBQztJQUNSLFNBQVMsRUFBRSxLQUFLO0lBQ2hCLGFBQWEsRUFBRSxLQUFLO0NBQ3ZCLENBQUE7QUFHRCxJQUFNLFVBQVUsR0FBRztJQUNmLFVBQVUsRUFBRSxDQUFDO0lBQ2IsYUFBYSxFQUFFLEVBQUU7Q0FDcEIsQ0FBQTtBQUdELElBQUssVUFhSjtBQWJELFdBQUssVUFBVTtJQUNYLGlDQUFtQixDQUFBO0lBQ25CLHFDQUF1QixDQUFBO0lBQ3ZCLG1DQUFxQixDQUFBO0lBQ3JCLHFDQUF1QixDQUFBO0lBQ3ZCLCtDQUFpQyxDQUFBO0lBQ2pDLG1DQUFxQixDQUFBO0lBQ3JCLHVDQUF5QixDQUFBO0lBQ3pCLHFDQUF1QixDQUFBO0lBQ3ZCLHVDQUF5QixDQUFBO0lBQ3pCLCtDQUFpQyxDQUFBO0lBQ2pDLG1DQUFxQixDQUFBO0lBQ3JCLDZDQUErQixDQUFBO0FBQ25DLENBQUMsRUFiSSxVQUFVLEtBQVYsVUFBVSxRQWFkO0FBR0Q7SUFBQTtJQWtDQSxDQUFDO0lBaENHLFlBQVk7SUFDTCwwQkFBZ0IsR0FBWSxLQUFLLENBQUM7SUFDbEMsa0JBQVEsR0FBWSxLQUFLLENBQUM7SUFDMUIsb0JBQVUsR0FBWSxLQUFLLENBQUM7SUFDNUIsbUJBQVMsR0FBWSxLQUFLLENBQUM7SUFFM0IseUJBQWUsR0FBWSxJQUFJLENBQUM7SUFDaEMsc0JBQVksR0FBWSxJQUFJLENBQUM7SUFDN0IscUJBQVcsR0FBWSxJQUFJLENBQUM7SUFDNUIscUJBQVcsR0FBWSxJQUFJLENBQUM7SUFDNUIscUJBQVcsR0FBWSxJQUFJLENBQUM7SUFDNUIsZUFBSyxHQUFZLEtBQUssQ0FBQztJQUN2QixtQkFBUyxHQUFZLEtBQUssQ0FBQztJQUMzQixvQkFBVSxHQUFZLEtBQUssQ0FBQztJQUU1QixtQkFBUyxHQUFXLENBQUMsQ0FBQztJQUN0Qix1QkFBYSxHQUFXLEVBQUUsQ0FBQztJQUVsQyxRQUFRO0lBQ0QsZUFBSyxHQUFpQixLQUFLLENBQUM7SUFHbkMsYUFBYTtJQUNOLG9CQUFVLEdBQXNCLFVBQVUsQ0FBQztJQUdsRCxhQUFhO0lBQ04sb0JBQVUsR0FBc0IsVUFBVSxDQUFDO0lBR2xELGFBQWE7SUFDTixvQkFBVSxHQUFzQixVQUFVLENBQUM7SUFDdEQsZ0JBQUM7Q0FsQ0QsQUFrQ0MsSUFBQTtBQWxDWSw4QkFBUyIsImZpbGUiOiIiLCJzb3VyY2VSb290IjoiLyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHsgY2NjbGFzcywgcHJvcGVydHkgfSA9IGNjLl9kZWNvcmF0b3I7XHJcblxyXG5cclxuZW51bSBFdmVudCB7XHJcbiAgICB0b3VjaFN0YXJ0ID0gXCJ0b3VjaHN0YXJ0XCIsXHJcbiAgICB0b3VjaE1vdmUgPSBcInRvdWNobW92ZVwiLFxyXG4gICAgdG91Y2hFbmQgPSBcInRvdWNoZW5kXCIsXHJcbiAgICB0b3VjaENhbmNlbCA9IFwidG91Y2hjYW5jZWxcIlxyXG59XHJcblxyXG5cclxuY29uc3QgSXJvblNvdXJjZSA9IHtcclxuICAgIC8vIGlyb25zb3VyY2UgXHJcbiAgICBTb3VuZFN0YXRlOiB0cnVlLFxyXG4gICAgU3RhdGU6IDEsXHJcbiAgICBpc0VuZEdhbWU6IGZhbHNlLFxyXG4gICAgaXNQbGF5QmdTb3VuZDogZmFsc2UsXHJcbn1cclxuXHJcblxyXG5jb25zdCBSZXNwb25zaXZlID0ge1xyXG4gICAgY2FsY3VsYXRlZDogMCxcclxuICAgIGN1cnJlbnREZXZpY2U6IFwiXCIsXHJcbn1cclxuXHJcblxyXG5lbnVtIFNvdW5kVHJhY2sge1xyXG4gICAgYmdTb3VuZCA9IFwiYmdTb3VuZFwiLFxyXG4gICAgZHJhd1NvdW5kID0gXCJkcmF3U291bmRcIixcclxuICAgIHdpblNvdW5kID0gXCJ3aW5Tb3VuZFwiLFxyXG4gICAgbW92ZVNvdW5kID0gXCJtb3ZlU291bmRcIixcclxuICAgIGZpcmV3b3Jrc1NvdW5kID0gXCJmaXJld29ya3NTb3VuZFwiLFxyXG4gICAgY3J5U291bmQgPSBcImNyeVNvdW5kXCIsXHJcbiAgICBjbGlja1NvdW5kID0gXCJjbGlja1NvdW5kXCIsXHJcbiAgICBsb3NlU291bmQgPSBcImxvc2VTb3VuZFwiLFxyXG4gICAgc3RpbmdTb3VuZCA9IFwic3RpbmdTb3VuZFwiLFxyXG4gICAgZXhwbG9zaW9uU291bmQgPSBcImV4cGxvc2lvblNvdW5kXCIsXHJcbiAgICBiZWVTb3VuZCA9IFwiYmVlU291bmRcIixcclxuICAgIGhhdGNoRWdnU291bmQgPSBcImhhdGNoRWdnU291bmRcIlxyXG59XHJcblxyXG5cclxuZXhwb3J0IGNsYXNzIENvbnN0YW50cyB7XHJcblxyXG4gICAgLy8gc3RhdGUgICAgXHJcbiAgICBzdGF0aWMgaXNDbGlja0dhbWVTdGFydDogYm9vbGVhbiA9IGZhbHNlO1xyXG4gICAgc3RhdGljIGlzUm90YXRlOiBib29sZWFuID0gZmFsc2U7XHJcbiAgICBzdGF0aWMgaXNDYW5Ub3VjaDogYm9vbGVhbiA9IGZhbHNlO1xyXG4gICAgc3RhdGljIGlzVG9TdG9yZTogYm9vbGVhbiA9IGZhbHNlO1xyXG5cclxuICAgIHN0YXRpYyBjdXJyZW50UG9zaXRpb246IGNjLlZlYzIgPSBudWxsO1xyXG4gICAgc3RhdGljIENoYXJhY3RlclBvczogY2MuVmVjMiA9IG51bGw7XHJcbiAgICBzdGF0aWMgQ2hhcl9Qb2ludDE6IGNjLlZlYzIgPSBudWxsO1xyXG4gICAgc3RhdGljIENoYXJfUG9pbnQyOiBjYy5WZWMyID0gbnVsbDtcclxuICAgIHN0YXRpYyBDaGFyX1BvaW50MzogY2MuVmVjMiA9IG51bGw7XHJcbiAgICBzdGF0aWMgaXNIaXQ6IGJvb2xlYW4gPSBmYWxzZTtcclxuICAgIHN0YXRpYyBpc1dpbkdhbWU6IGJvb2xlYW4gPSBmYWxzZTtcclxuICAgIHN0YXRpYyBpc0xvc2VHYW1lOiBib29sZWFuID0gZmFsc2U7XHJcbiAgICBcclxuICAgIHN0YXRpYyBjdXJyZW50THY6IG51bWJlciA9IDE7XHJcbiAgICBzdGF0aWMgY3VycmVudE9wdGlvbjogbnVtYmVyID0gMTQ7XHJcblxyXG4gICAgLy8gZXZlbnRcclxuICAgIHN0YXRpYyBFdmVudDogdHlwZW9mIEV2ZW50ID0gRXZlbnQ7XHJcblxyXG5cclxuICAgIC8vIFNvdW5kVHJhY2tcclxuICAgIHN0YXRpYyBTb3VuZFRyYWNrOiB0eXBlb2YgU291bmRUcmFjayA9IFNvdW5kVHJhY2s7XHJcblxyXG5cclxuICAgIC8vIGlyb25Tb3VyY2VcclxuICAgIHN0YXRpYyBpcm9uU291cmNlOiB0eXBlb2YgSXJvblNvdXJjZSA9IElyb25Tb3VyY2U7XHJcblxyXG5cclxuICAgIC8vIFJlc3BvbnNpdmVcclxuICAgIHN0YXRpYyBSZXNwb25zaXZlOiB0eXBlb2YgUmVzcG9uc2l2ZSA9IFJlc3BvbnNpdmU7XHJcbn1cclxuXHJcblxyXG4iXX0=
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/Data/StateForJS.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '658d5P3MUBBApXFkwazlx6Z', 'StateForJS');
// Script/Data/StateForJS.js

"use strict";

exports.__esModule = true;
exports.StateForJs = void 0;
var _cc$_decorator = cc._decorator,
    ccclass = _cc$_decorator.ccclass,
    property = _cc$_decorator.property;

var StateForJs = function StateForJs() {};

exports.StateForJs = StateForJs;
StateForJs.isCanDraw = true;
StateForJs.timeToWin = 4;
StateForJs.isToStore = false;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0XFxEYXRhXFxTdGF0ZUZvckpTLmpzIl0sIm5hbWVzIjpbImNjIiwiX2RlY29yYXRvciIsImNjY2xhc3MiLCJwcm9wZXJ0eSIsIlN0YXRlRm9ySnMiLCJpc0NhbkRyYXciLCJ0aW1lVG9XaW4iLCJpc1RvU3RvcmUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSxxQkFBOEJBLEVBQUUsQ0FBQ0MsVUFBakM7QUFBQSxJQUFRQyxPQUFSLGtCQUFRQSxPQUFSO0FBQUEsSUFBaUJDLFFBQWpCLGtCQUFpQkEsUUFBakI7O0lBQ2FDOzs7QUFBQUEsV0FDRkMsWUFBWTtBQURWRCxXQUVGRSxZQUFZO0FBRlZGLFdBR0ZHLFlBQVkiLCJzb3VyY2VSb290IjoiLyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHsgY2NjbGFzcywgcHJvcGVydHkgfSA9IGNjLl9kZWNvcmF0b3I7XHJcbmV4cG9ydCBjbGFzcyBTdGF0ZUZvckpzIHtcclxuICAgIHN0YXRpYyBpc0NhbkRyYXcgPSB0cnVlO1xyXG4gICAgc3RhdGljIHRpbWVUb1dpbiA9IDQ7XHJcbiAgICBzdGF0aWMgaXNUb1N0b3JlID0gZmFsc2U7XHJcbn0iXX0=
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/Plugin/AudioManager.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '16092J/6+9HR5x8fJSUKKad', 'AudioManager');
// Script/Plugin/AudioManager.ts

"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var constants_1 = require("../Data/constants");
var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
var AudioManager = /** @class */ (function (_super) {
    __extends(AudioManager, _super);
    function AudioManager() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        // sound 
        _this.bgSound = null;
        _this.drawSound = null;
        _this.crySound = null;
        _this.clickSound = null;
        _this.loseSound = null;
        _this.winSound = null;
        _this.stingSound = null;
        _this.explosionSound = null;
        _this.hatchEggSound = null;
        return _this;
    }
    AudioManager.prototype.playSound = function (soundName) {
        if (constants_1.Constants.ironSource.SoundState) {
            switch (soundName) {
                case "bgSound":
                    this.bgSound.play();
                    break;
                case "hatchEggSound":
                    this.hatchEggSound.play();
                    break;
                case "explosionSound":
                    this.explosionSound.play();
                    break;
                case "drawSound":
                    this.drawSound.play();
                    break;
                case "winSound":
                    this.winSound.play();
                    break;
                case "crySound":
                    this.crySound.play();
                    break;
                case "clickSound":
                    this.clickSound.play();
                    break;
                case "loseSound":
                    this.loseSound.play();
                    break;
                case "stingSound":
                    this.stingSound.play();
                    break;
                default:
                    break;
            }
        }
    };
    AudioManager.prototype.stopSound = function (soundName) {
        switch (soundName) {
            case "bgSound":
                this.bgSound.stop();
                break;
            case "hatchEggSound":
                this.hatchEggSound.stop();
                break;
            case "explosionSound":
                this.explosionSound.stop();
                break;
            case "drawSound":
                this.drawSound.stop();
                break;
            case "winSound":
                this.winSound.stop();
                break;
            case "crySound":
                this.crySound.stop();
                break;
            case "clickSound":
                this.clickSound.stop();
                break;
            case "loseSound":
                this.loseSound.stop();
                break;
            case "stingSound":
                this.stingSound.stop();
                break;
            default:
                break;
        }
    };
    AudioManager.prototype.stopAllSound = function () {
        this.bgSound.stop();
        this.hatchEggSound.stop();
        this.explosionSound.stop();
        this.drawSound.stop();
        this.winSound.stop();
        this.crySound.stop();
        this.clickSound.stop();
        this.loseSound.stop();
        this.stingSound.stop();
    };
    __decorate([
        property(cc.AudioSource)
    ], AudioManager.prototype, "bgSound", void 0);
    __decorate([
        property(cc.AudioSource)
    ], AudioManager.prototype, "drawSound", void 0);
    __decorate([
        property(cc.AudioSource)
    ], AudioManager.prototype, "crySound", void 0);
    __decorate([
        property(cc.AudioSource)
    ], AudioManager.prototype, "clickSound", void 0);
    __decorate([
        property(cc.AudioSource)
    ], AudioManager.prototype, "loseSound", void 0);
    __decorate([
        property(cc.AudioSource)
    ], AudioManager.prototype, "winSound", void 0);
    __decorate([
        property(cc.AudioSource)
    ], AudioManager.prototype, "stingSound", void 0);
    __decorate([
        property(cc.AudioSource)
    ], AudioManager.prototype, "explosionSound", void 0);
    __decorate([
        property(cc.AudioSource)
    ], AudioManager.prototype, "hatchEggSound", void 0);
    AudioManager = __decorate([
        ccclass
    ], AudioManager);
    return AudioManager;
}(cc.Component));
exports.default = AudioManager;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/Plugin/MyPhysicsCollider.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '16fa2jbwqRENLjduRsp+GPv', 'MyPhysicsCollider');
// Script/Plugin/MyPhysicsCollider.js

"use strict";

var MyPhysicsCollider = cc.Class({
  "extends": cc.PhysicsCollider,
  editor: {
    menu: CC_EDITOR && 'i18n:MAIN_MENU.component.physics/Collider/Polygon',
    requireComponent: cc.RigidBody
  },
  properties: {
    lineWidth: 10,
    points: [cc.Vec2]
  },
  _createShape: function _createShape(scale) {
    var shapes = [];
    var polys = this.points;
    var offset = this.offset;
    var polyIdx = 0;

    for (var i = 0; i < polys.length - 1; i++) {
      var posBegin = polys[i];
      var posEnd = polys[i + 1];
      var linelen = posBegin.sub(posEnd).mag();
      var angle = Math.atan2(posEnd.y - posBegin.y, posEnd.x - posBegin.x) - Math.PI / 2;
      var midPos = posBegin.add(posEnd).mul(0.5);
      var shape = new b2.PolygonShape();

      if (shape) {
        shape.SetAsBox(this.lineWidth / 2 / 32, linelen / 2 / 32, new b2.Vec2(midPos.x / 32, midPos.y / 32), angle);
        shapes.push(shape);
      }
    }

    return shapes;
  }
});
module.exports = MyPhysicsCollider;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0XFxQbHVnaW5cXE15UGh5c2ljc0NvbGxpZGVyLmpzIl0sIm5hbWVzIjpbIk15UGh5c2ljc0NvbGxpZGVyIiwiY2MiLCJDbGFzcyIsIlBoeXNpY3NDb2xsaWRlciIsImVkaXRvciIsIm1lbnUiLCJDQ19FRElUT1IiLCJyZXF1aXJlQ29tcG9uZW50IiwiUmlnaWRCb2R5IiwicHJvcGVydGllcyIsImxpbmVXaWR0aCIsInBvaW50cyIsIlZlYzIiLCJfY3JlYXRlU2hhcGUiLCJzY2FsZSIsInNoYXBlcyIsInBvbHlzIiwib2Zmc2V0IiwicG9seUlkeCIsImkiLCJsZW5ndGgiLCJwb3NCZWdpbiIsInBvc0VuZCIsImxpbmVsZW4iLCJzdWIiLCJtYWciLCJhbmdsZSIsIk1hdGgiLCJhdGFuMiIsInkiLCJ4IiwiUEkiLCJtaWRQb3MiLCJhZGQiLCJtdWwiLCJzaGFwZSIsImIyIiwiUG9seWdvblNoYXBlIiwiU2V0QXNCb3giLCJwdXNoIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFDQSxJQUFJQSxpQkFBaUIsR0FBR0MsRUFBRSxDQUFDQyxLQUFILENBQVM7QUFDN0IsYUFBU0QsRUFBRSxDQUFDRSxlQURpQjtBQUU3QkMsRUFBQUEsTUFBTSxFQUFFO0FBQ0pDLElBQUFBLElBQUksRUFBRUMsU0FBUyxJQUFJLG1EQURmO0FBRUpDLElBQUFBLGdCQUFnQixFQUFFTixFQUFFLENBQUNPO0FBRmpCLEdBRnFCO0FBTTdCQyxFQUFBQSxVQUFVLEVBQUU7QUFDUkMsSUFBQUEsU0FBUyxFQUFFLEVBREg7QUFFUkMsSUFBQUEsTUFBTSxFQUFFLENBQUNWLEVBQUUsQ0FBQ1csSUFBSjtBQUZBLEdBTmlCO0FBVTdCQyxFQUFBQSxZQUFZLEVBQUUsc0JBQVVDLEtBQVYsRUFBaUI7QUFDM0IsUUFBSUMsTUFBTSxHQUFHLEVBQWI7QUFFQSxRQUFJQyxLQUFLLEdBQUcsS0FBS0wsTUFBakI7QUFDQSxRQUFJTSxNQUFNLEdBQUcsS0FBS0EsTUFBbEI7QUFFQSxRQUFJQyxPQUFPLEdBQUcsQ0FBZDs7QUFDQSxTQUFLLElBQUlDLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUdILEtBQUssQ0FBQ0ksTUFBTixHQUFlLENBQW5DLEVBQXNDRCxDQUFDLEVBQXZDLEVBQTJDO0FBQ3ZDLFVBQUlFLFFBQVEsR0FBR0wsS0FBSyxDQUFDRyxDQUFELENBQXBCO0FBQ0EsVUFBSUcsTUFBTSxHQUFHTixLQUFLLENBQUNHLENBQUMsR0FBRyxDQUFMLENBQWxCO0FBQ0EsVUFBSUksT0FBTyxHQUFHRixRQUFRLENBQUNHLEdBQVQsQ0FBYUYsTUFBYixFQUFxQkcsR0FBckIsRUFBZDtBQUVBLFVBQUlDLEtBQUssR0FBR0MsSUFBSSxDQUFDQyxLQUFMLENBQVdOLE1BQU0sQ0FBQ08sQ0FBUCxHQUFXUixRQUFRLENBQUNRLENBQS9CLEVBQWtDUCxNQUFNLENBQUNRLENBQVAsR0FBV1QsUUFBUSxDQUFDUyxDQUF0RCxJQUEyREgsSUFBSSxDQUFDSSxFQUFMLEdBQVUsQ0FBakY7QUFFQSxVQUFJQyxNQUFNLEdBQUdYLFFBQVEsQ0FBQ1ksR0FBVCxDQUFhWCxNQUFiLEVBQXFCWSxHQUFyQixDQUF5QixHQUF6QixDQUFiO0FBRUEsVUFBSUMsS0FBSyxHQUFHLElBQUlDLEVBQUUsQ0FBQ0MsWUFBUCxFQUFaOztBQUVBLFVBQUlGLEtBQUosRUFBVztBQUNQQSxRQUFBQSxLQUFLLENBQUNHLFFBQU4sQ0FBZSxLQUFLNUIsU0FBTCxHQUFpQixDQUFqQixHQUFxQixFQUFwQyxFQUF3Q2EsT0FBTyxHQUFHLENBQVYsR0FBYyxFQUF0RCxFQUEwRCxJQUFJYSxFQUFFLENBQUN4QixJQUFQLENBQVlvQixNQUFNLENBQUNGLENBQVAsR0FBVyxFQUF2QixFQUEyQkUsTUFBTSxDQUFDSCxDQUFQLEdBQVcsRUFBdEMsQ0FBMUQsRUFBcUdILEtBQXJHO0FBRUFYLFFBQUFBLE1BQU0sQ0FBQ3dCLElBQVAsQ0FBWUosS0FBWjtBQUNIO0FBQ0o7O0FBRUQsV0FBT3BCLE1BQVA7QUFDSDtBQXBDNEIsQ0FBVCxDQUF4QjtBQXVDQXlCLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQnpDLGlCQUFqQiIsInNvdXJjZVJvb3QiOiIvIiwic291cmNlc0NvbnRlbnQiOlsiXHJcbnZhciBNeVBoeXNpY3NDb2xsaWRlciA9IGNjLkNsYXNzKHtcclxuICAgIGV4dGVuZHM6IGNjLlBoeXNpY3NDb2xsaWRlcixcclxuICAgIGVkaXRvcjoge1xyXG4gICAgICAgIG1lbnU6IENDX0VESVRPUiAmJiAnaTE4bjpNQUlOX01FTlUuY29tcG9uZW50LnBoeXNpY3MvQ29sbGlkZXIvUG9seWdvbicsXHJcbiAgICAgICAgcmVxdWlyZUNvbXBvbmVudDogY2MuUmlnaWRCb2R5XHJcbiAgICB9LFxyXG4gICAgcHJvcGVydGllczoge1xyXG4gICAgICAgIGxpbmVXaWR0aDogMTAsXHJcbiAgICAgICAgcG9pbnRzOiBbY2MuVmVjMl1cclxuICAgIH0sXHJcbiAgICBfY3JlYXRlU2hhcGU6IGZ1bmN0aW9uIChzY2FsZSkge1xyXG4gICAgICAgIHZhciBzaGFwZXMgPSBbXTtcclxuXHJcbiAgICAgICAgdmFyIHBvbHlzID0gdGhpcy5wb2ludHM7XHJcbiAgICAgICAgdmFyIG9mZnNldCA9IHRoaXMub2Zmc2V0O1xyXG5cclxuICAgICAgICB2YXIgcG9seUlkeCA9IDA7XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwb2x5cy5sZW5ndGggLSAxOyBpKyspIHtcclxuICAgICAgICAgICAgdmFyIHBvc0JlZ2luID0gcG9seXNbaV07XHJcbiAgICAgICAgICAgIHZhciBwb3NFbmQgPSBwb2x5c1tpICsgMV07XHJcbiAgICAgICAgICAgIHZhciBsaW5lbGVuID0gcG9zQmVnaW4uc3ViKHBvc0VuZCkubWFnKCk7XHJcblxyXG4gICAgICAgICAgICB2YXIgYW5nbGUgPSBNYXRoLmF0YW4yKHBvc0VuZC55IC0gcG9zQmVnaW4ueSwgcG9zRW5kLnggLSBwb3NCZWdpbi54KSAtIE1hdGguUEkgLyAyO1xyXG5cclxuICAgICAgICAgICAgdmFyIG1pZFBvcyA9IHBvc0JlZ2luLmFkZChwb3NFbmQpLm11bCgwLjUpO1xyXG5cclxuICAgICAgICAgICAgdmFyIHNoYXBlID0gbmV3IGIyLlBvbHlnb25TaGFwZSgpO1xyXG5cclxuICAgICAgICAgICAgaWYgKHNoYXBlKSB7XHJcbiAgICAgICAgICAgICAgICBzaGFwZS5TZXRBc0JveCh0aGlzLmxpbmVXaWR0aCAvIDIgLyAzMiwgbGluZWxlbiAvIDIgLyAzMiwgbmV3IGIyLlZlYzIobWlkUG9zLnggLyAzMiwgbWlkUG9zLnkgLyAzMiksIGFuZ2xlKTtcclxuICAgIFxyXG4gICAgICAgICAgICAgICAgc2hhcGVzLnB1c2goc2hhcGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gc2hhcGVzO1xyXG4gICAgfVxyXG59KTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gTXlQaHlzaWNzQ29sbGlkZXI7Il19
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/Plugin/Responsive.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'd5c01VUSP5G8p7xJENgTwyO', 'Responsive');
// Script/Plugin/Responsive.ts

"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var NodesController_1 = require("../Controller/NodesController");
var constants_1 = require("../Data/constants");
var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
var Responsive = /** @class */ (function (_super) {
    __extends(Responsive, _super);
    function Responsive() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        // Component
        _this.NodesController = null;
        // state
        _this.device = "";
        _this.isRotate = false;
        _this.HORIZONTAL_IPX = "horizontal_IPX";
        _this.HORIZONTAL_TABLET = "horizontal_Tablet";
        _this.VERTICAL_IPX = "vertical_IPX";
        _this.VERTICAL_MOBILE = "vertical_Mobile";
        return _this;
    }
    Responsive.prototype.onLoad = function () {
    };
    Responsive.prototype.start = function () {
    };
    Responsive.prototype.handleRotate = function () {
        if (cc.view.getFrameSize().width > cc.view.getFrameSize().height) {
            this.isRotate = true;
            this.setHorizontal();
        }
        else {
            this.isRotate = false;
            this.setVertical();
        }
    };
    Responsive.prototype.setHorizontal = function () {
        if (cc.view.getFrameSize().height / cc.view.getFrameSize().width < 0.65) {
            // Iphone 6 / 6 plus / 7 / 7 Plus / X
            this.setHorizontalForIpX();
        }
        else {
            this.setHorizontalForTablet();
        }
    };
    Responsive.prototype.setHorizontalForIpX = function () {
        if (this.HORIZONTAL_IPX === this.device) {
            return;
        }
        this.device = this.HORIZONTAL_IPX;
        constants_1.Constants.Responsive.currentDevice = "horizon_Tablet";
    };
    Responsive.prototype.setHorizontalForTablet = function () {
        if (this.HORIZONTAL_TABLET === this.device) {
            return;
        }
        this.device = this.HORIZONTAL_TABLET;
        constants_1.Constants.Responsive.currentDevice = "horizon_Tablet";
    };
    Responsive.prototype.setVertical = function () {
        if (cc.view.getFrameSize().width / cc.view.getFrameSize().height < 0.5) {
            this.setIphoneX();
        }
        else {
            this.setMobile();
        }
    };
    Responsive.prototype.setIphoneX = function () {
        if (this.VERTICAL_IPX === this.device) {
            return;
        }
        this.device = this.VERTICAL_IPX;
        constants_1.Constants.Responsive.currentDevice = "vertical_mobile";
    };
    Responsive.prototype.setMobile = function () {
        if (this.VERTICAL_MOBILE === this.device) {
            return;
        }
        this.device = this.VERTICAL_MOBILE;
        constants_1.Constants.Responsive.currentDevice = "vertical_mobile";
        // if(cc.view.getFrameSize().width / cc.view.getFrameSize().height < 0.7) {
        //     // Iphone 6 / 6 plus / 7 / 7 Plus
        // } else {    
        //     // Ipad
        // }
    };
    Responsive.prototype.update = function (dt) {
        this.handleRotate();
    };
    __decorate([
        property(NodesController_1.default)
    ], Responsive.prototype, "NodesController", void 0);
    Responsive = __decorate([
        ccclass
    ], Responsive);
    return Responsive;
}(cc.Component));
exports.default = Responsive;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0XFxQbHVnaW5cXFJlc3BvbnNpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBRUEsaUVBQTREO0FBQzVELCtDQUE4QztBQUV4QyxJQUFBLEtBQXdCLEVBQUUsQ0FBQyxVQUFVLEVBQW5DLE9BQU8sYUFBQSxFQUFFLFFBQVEsY0FBa0IsQ0FBQztBQUc1QztJQUF3Qyw4QkFBWTtJQUFwRDtRQUFBLHFFQTRHQztRQTFHRyxZQUFZO1FBRVoscUJBQWUsR0FBb0IsSUFBSSxDQUFDO1FBR3hDLFFBQVE7UUFDUixZQUFNLEdBQVcsRUFBRSxDQUFDO1FBQ3BCLGNBQVEsR0FBWSxLQUFLLENBQUM7UUFFMUIsb0JBQWMsR0FBVyxnQkFBZ0IsQ0FBQztRQUMxQyx1QkFBaUIsR0FBVyxtQkFBbUIsQ0FBQztRQUNoRCxrQkFBWSxHQUFXLGNBQWMsQ0FBQztRQUN0QyxxQkFBZSxHQUFXLGlCQUFpQixDQUFDOztJQThGaEQsQ0FBQztJQTNGYSwyQkFBTSxHQUFoQjtJQUVBLENBQUM7SUFFUywwQkFBSyxHQUFmO0lBRUEsQ0FBQztJQUVPLGlDQUFZLEdBQXBCO1FBQ0ksSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDLEtBQUssR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDLE1BQU0sRUFBRTtZQUM5RCxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQztZQUNyQixJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7U0FDeEI7YUFBTTtZQUNILElBQUksQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDO1lBQ3RCLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztTQUN0QjtJQUNMLENBQUM7SUFFTyxrQ0FBYSxHQUFyQjtRQUVJLElBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQyxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQyxLQUFLLEdBQUcsSUFBSSxFQUFFO1lBQ3BFLHFDQUFxQztZQUNyQyxJQUFJLENBQUMsbUJBQW1CLEVBQUUsQ0FBQztTQUM5QjthQUFNO1lBQ0gsSUFBSSxDQUFDLHNCQUFzQixFQUFFLENBQUM7U0FDakM7SUFDTCxDQUFDO0lBRU8sd0NBQW1CLEdBQTNCO1FBQ0ksSUFBRyxJQUFJLENBQUMsY0FBYyxLQUFLLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDcEMsT0FBTztTQUNWO1FBRUQsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDO1FBQ2xDLHFCQUFTLENBQUMsVUFBVSxDQUFDLGFBQWEsR0FBRyxnQkFBZ0IsQ0FBQztJQUMxRCxDQUFDO0lBRU8sMkNBQXNCLEdBQTlCO1FBQ0ksSUFBRyxJQUFJLENBQUMsaUJBQWlCLEtBQUssSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUN2QyxPQUFPO1NBQ1Y7UUFFRCxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxpQkFBaUIsQ0FBQztRQUNyQyxxQkFBUyxDQUFDLFVBQVUsQ0FBQyxhQUFhLEdBQUcsZ0JBQWdCLENBQUM7SUFFMUQsQ0FBQztJQUVPLGdDQUFXLEdBQW5CO1FBRUksSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDLEtBQUssR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDLE1BQU0sR0FBRyxHQUFHLEVBQUU7WUFDcEUsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO1NBQ3JCO2FBQU07WUFDSCxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUM7U0FDcEI7SUFDTCxDQUFDO0lBRU8sK0JBQVUsR0FBbEI7UUFDSSxJQUFHLElBQUksQ0FBQyxZQUFZLEtBQUssSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUNsQyxPQUFPO1NBQ1Y7UUFFRCxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUM7UUFDaEMscUJBQVMsQ0FBQyxVQUFVLENBQUMsYUFBYSxHQUFHLGlCQUFpQixDQUFDO0lBRzNELENBQUM7SUFFTyw4QkFBUyxHQUFqQjtRQUNJLElBQUcsSUFBSSxDQUFDLGVBQWUsS0FBSyxJQUFJLENBQUMsTUFBTSxFQUFFO1lBQ3JDLE9BQU87U0FDVjtRQUVELElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQztRQUNuQyxxQkFBUyxDQUFDLFVBQVUsQ0FBQyxhQUFhLEdBQUcsaUJBQWlCLENBQUM7UUFHdkQsMkVBQTJFO1FBQzNFLHdDQUF3QztRQUV4QyxlQUFlO1FBQ2YsY0FBYztRQUVkLElBQUk7SUFFUixDQUFDO0lBR1MsMkJBQU0sR0FBaEIsVUFBaUIsRUFBVTtRQUN2QixJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDeEIsQ0FBQztJQXRHRDtRQURDLFFBQVEsQ0FBQyx5QkFBZSxDQUFDO3VEQUNjO0lBSnZCLFVBQVU7UUFEOUIsT0FBTztPQUNhLFVBQVUsQ0E0RzlCO0lBQUQsaUJBQUM7Q0E1R0QsQUE0R0MsQ0E1R3VDLEVBQUUsQ0FBQyxTQUFTLEdBNEduRDtrQkE1R29CLFVBQVUiLCJmaWxlIjoiIiwic291cmNlUm9vdCI6Ii8iLCJzb3VyY2VzQ29udGVudCI6WyJcclxuaW1wb3J0IEdhbWVQbGF5IGZyb20gXCIuLi9Db250cm9sbGVyL0dhbWVQbGF5XCI7XHJcbmltcG9ydCBOb2Rlc0NvbnRyb2xsZXIgZnJvbSBcIi4uL0NvbnRyb2xsZXIvTm9kZXNDb250cm9sbGVyXCI7XHJcbmltcG9ydCB7IENvbnN0YW50cyB9IGZyb20gXCIuLi9EYXRhL2NvbnN0YW50c1wiO1xyXG5cclxuY29uc3QgeyBjY2NsYXNzLCBwcm9wZXJ0eSB9ID0gY2MuX2RlY29yYXRvcjtcclxuXHJcbkBjY2NsYXNzXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJlc3BvbnNpdmUgZXh0ZW5kcyBjYy5Db21wb25lbnQge1xyXG5cclxuICAgIC8vIENvbXBvbmVudFxyXG4gICAgQHByb3BlcnR5KE5vZGVzQ29udHJvbGxlcilcclxuICAgIE5vZGVzQ29udHJvbGxlcjogTm9kZXNDb250cm9sbGVyID0gbnVsbDtcclxuXHJcblxyXG4gICAgLy8gc3RhdGVcclxuICAgIGRldmljZTogc3RyaW5nID0gXCJcIjtcclxuICAgIGlzUm90YXRlOiBib29sZWFuID0gZmFsc2U7XHJcblxyXG4gICAgSE9SSVpPTlRBTF9JUFg6IHN0cmluZyA9IFwiaG9yaXpvbnRhbF9JUFhcIjtcclxuICAgIEhPUklaT05UQUxfVEFCTEVUOiBzdHJpbmcgPSBcImhvcml6b250YWxfVGFibGV0XCI7XHJcbiAgICBWRVJUSUNBTF9JUFg6IHN0cmluZyA9IFwidmVydGljYWxfSVBYXCI7XHJcbiAgICBWRVJUSUNBTF9NT0JJTEU6IHN0cmluZyA9IFwidmVydGljYWxfTW9iaWxlXCI7XHJcblxyXG4gICAgXHJcbiAgICBwcm90ZWN0ZWQgb25Mb2FkKCk6IHZvaWQge1xyXG5cclxuICAgIH1cclxuXHJcbiAgICBwcm90ZWN0ZWQgc3RhcnQoKTogdm9pZCB7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgaGFuZGxlUm90YXRlKCk6IHZvaWQge1xyXG4gICAgICAgIGlmIChjYy52aWV3LmdldEZyYW1lU2l6ZSgpLndpZHRoID4gY2Mudmlldy5nZXRGcmFtZVNpemUoKS5oZWlnaHQpIHtcclxuICAgICAgICAgICAgdGhpcy5pc1JvdGF0ZSA9IHRydWU7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0SG9yaXpvbnRhbCgpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuaXNSb3RhdGUgPSBmYWxzZTtcclxuICAgICAgICAgICAgdGhpcy5zZXRWZXJ0aWNhbCgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHNldEhvcml6b250YWwoKTogdm9pZCB7XHJcbiAgICAgXHJcbiAgICAgICAgaWYoY2Mudmlldy5nZXRGcmFtZVNpemUoKS5oZWlnaHQgLyBjYy52aWV3LmdldEZyYW1lU2l6ZSgpLndpZHRoIDwgMC42NSkge1xyXG4gICAgICAgICAgICAvLyBJcGhvbmUgNiAvIDYgcGx1cyAvIDcgLyA3IFBsdXMgLyBYXHJcbiAgICAgICAgICAgIHRoaXMuc2V0SG9yaXpvbnRhbEZvcklwWCgpOyBcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLnNldEhvcml6b250YWxGb3JUYWJsZXQoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBzZXRIb3Jpem9udGFsRm9ySXBYKCk6IHZvaWQge1xyXG4gICAgICAgIGlmKHRoaXMuSE9SSVpPTlRBTF9JUFggPT09IHRoaXMuZGV2aWNlKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuZGV2aWNlID0gdGhpcy5IT1JJWk9OVEFMX0lQWDtcclxuICAgICAgICBDb25zdGFudHMuUmVzcG9uc2l2ZS5jdXJyZW50RGV2aWNlID0gXCJob3Jpem9uX1RhYmxldFwiO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgc2V0SG9yaXpvbnRhbEZvclRhYmxldCgpOiB2b2lkIHtcclxuICAgICAgICBpZih0aGlzLkhPUklaT05UQUxfVEFCTEVUID09PSB0aGlzLmRldmljZSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmRldmljZSA9IHRoaXMuSE9SSVpPTlRBTF9UQUJMRVQ7XHJcbiAgICAgICAgQ29uc3RhbnRzLlJlc3BvbnNpdmUuY3VycmVudERldmljZSA9IFwiaG9yaXpvbl9UYWJsZXRcIjtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBzZXRWZXJ0aWNhbCgpOiB2b2lkIHtcclxuXHJcbiAgICAgICAgaWYgKGNjLnZpZXcuZ2V0RnJhbWVTaXplKCkud2lkdGggLyBjYy52aWV3LmdldEZyYW1lU2l6ZSgpLmhlaWdodCA8IDAuNSkge1xyXG4gICAgICAgICAgICB0aGlzLnNldElwaG9uZVgoKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLnNldE1vYmlsZSgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHNldElwaG9uZVgoKTogdm9pZCB7XHJcbiAgICAgICAgaWYodGhpcy5WRVJUSUNBTF9JUFggPT09IHRoaXMuZGV2aWNlKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuZGV2aWNlID0gdGhpcy5WRVJUSUNBTF9JUFg7XHJcbiAgICAgICAgQ29uc3RhbnRzLlJlc3BvbnNpdmUuY3VycmVudERldmljZSA9IFwidmVydGljYWxfbW9iaWxlXCI7XHJcblxyXG5cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHNldE1vYmlsZSgpOiB2b2lkIHtcclxuICAgICAgICBpZih0aGlzLlZFUlRJQ0FMX01PQklMRSA9PT0gdGhpcy5kZXZpY2UpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH0gICBcclxuXHJcbiAgICAgICAgdGhpcy5kZXZpY2UgPSB0aGlzLlZFUlRJQ0FMX01PQklMRTtcclxuICAgICAgICBDb25zdGFudHMuUmVzcG9uc2l2ZS5jdXJyZW50RGV2aWNlID0gXCJ2ZXJ0aWNhbF9tb2JpbGVcIjtcclxuICAgICAgXHJcblxyXG4gICAgICAgIC8vIGlmKGNjLnZpZXcuZ2V0RnJhbWVTaXplKCkud2lkdGggLyBjYy52aWV3LmdldEZyYW1lU2l6ZSgpLmhlaWdodCA8IDAuNykge1xyXG4gICAgICAgIC8vICAgICAvLyBJcGhvbmUgNiAvIDYgcGx1cyAvIDcgLyA3IFBsdXNcclxuICAgICAgICAgICBcclxuICAgICAgICAvLyB9IGVsc2UgeyAgICBcclxuICAgICAgICAvLyAgICAgLy8gSXBhZFxyXG5cclxuICAgICAgICAvLyB9XHJcbiAgICAgICAgXHJcbiAgICB9XHJcblxyXG5cclxuICAgIHByb3RlY3RlZCB1cGRhdGUoZHQ6IG51bWJlcik6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuaGFuZGxlUm90YXRlKCk7XHJcbiAgICB9XHJcblxyXG59XHJcbiJdfQ==
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/Controller/EggController.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'b7838NrFfZMWpWVpJlrJ5k0', 'EggController');
// Script/Controller/EggController.ts

"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var constants_1 = require("../Data/constants");
var AudioManager_1 = require("../Plugin/AudioManager");
var GamePlay_1 = require("./GamePlay");
var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
var NewClass = /** @class */ (function (_super) {
    __extends(NewClass, _super);
    function NewClass() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.GamePlay = null;
        _this.AudioManager = null;
        _this.effectDies = [];
        _this.rigidbody = null;
        _this.collide = null;
        _this.isChangeEggRigidbodyType = false;
        _this.isActiveHelpAnim = false;
        return _this;
    }
    NewClass.prototype.start = function () {
        var _this = this;
        this.rigidbody = this.getComponent(cc.RigidBody);
        this.rigidbody.onBeginContact = function (c, s, o) {
            if (o.tag === 8) {
                constants_1.Constants.isHit = true;
                _this.rigidbody.destroy();
                _this.getComponent(cc.Collider).destroy();
                _this.node.getChildByName("Spine_Character").active = false;
                _this.AudioManager.playSound(constants_1.Constants.SoundTrack.explosionSound);
                _this.effectDies.forEach(function (fx) { return fx.resetSystem(); });
                // this.scheduleOnce(() => {this.GamePlay.lose()}, 2.5)
            }
        };
    };
    NewClass.prototype.changeRigidbodyType = function () {
        this.rigidbody.type = cc.RigidBodyType.Dynamic;
    };
    NewClass.prototype.activeHelpAnim = function () {
        if (this.isActiveHelpAnim)
            return;
        this.isActiveHelpAnim = true;
        this.node.getChildByName("Spine_Character").getComponent(sp.Skeleton).setAnimation(0, "being_hit", true);
    };
    NewClass.prototype.update = function (dt) {
        if (window.changeEggRigidbodyType && !this.isChangeEggRigidbodyType && window.isDraw) {
            this.isChangeEggRigidbodyType = true;
            this.changeRigidbodyType();
        }
        if (constants_1.Constants.isWinGame)
            this.rigidbody.type = cc.RigidBodyType.Static;
        window.isDraw && this.activeHelpAnim();
    };
    __decorate([
        property(GamePlay_1.default)
    ], NewClass.prototype, "GamePlay", void 0);
    __decorate([
        property(AudioManager_1.default)
    ], NewClass.prototype, "AudioManager", void 0);
    __decorate([
        property([cc.ParticleSystem])
    ], NewClass.prototype, "effectDies", void 0);
    NewClass = __decorate([
        ccclass
    ], NewClass);
    return NewClass;
}(cc.Component));
exports.default = NewClass;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0XFxDb250cm9sbGVyXFxFZ2dDb250cm9sbGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLCtDQUE4QztBQUM5Qyx1REFBa0Q7QUFDbEQsdUNBQWtDO0FBRTVCLElBQUEsS0FBc0IsRUFBRSxDQUFDLFVBQVUsRUFBbEMsT0FBTyxhQUFBLEVBQUUsUUFBUSxjQUFpQixDQUFDO0FBRzFDO0lBQXNDLDRCQUFZO0lBQWxEO1FBQUEscUVBdURDO1FBcERHLGNBQVEsR0FBYSxJQUFJLENBQUM7UUFFMUIsa0JBQVksR0FBaUIsSUFBSSxDQUFDO1FBRWxDLGdCQUFVLEdBQXdCLEVBQUUsQ0FBQztRQUVyQyxlQUFTLEdBQWlCLElBQUksQ0FBQztRQUMvQixhQUFPLEdBQWdCLElBQUksQ0FBQztRQUM1Qiw4QkFBd0IsR0FBWSxLQUFLLENBQUM7UUFDMUMsc0JBQWdCLEdBQVksS0FBSyxDQUFDOztJQTJDdEMsQ0FBQztJQXhDYSx3QkFBSyxHQUFmO1FBQUEsaUJBZUM7UUFkRyxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBRWpELElBQUksQ0FBQyxTQUFTLENBQUMsY0FBYyxHQUFHLFVBQUMsQ0FBbUIsRUFBRSxDQUFxQixFQUFFLENBQXFCO1lBQzlGLElBQUcsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLEVBQUU7Z0JBQ1oscUJBQVMsQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDO2dCQUV2QixLQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sRUFBRSxDQUFDO2dCQUN6QixLQUFJLENBQUMsWUFBWSxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztnQkFDekMsS0FBSSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDO2dCQUMzRCxLQUFJLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FBQyxxQkFBUyxDQUFDLFVBQVUsQ0FBQyxjQUFjLENBQUMsQ0FBQztnQkFDakUsS0FBSSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsVUFBQSxFQUFFLElBQUksT0FBQSxFQUFFLENBQUMsV0FBVyxFQUFFLEVBQWhCLENBQWdCLENBQUMsQ0FBQztnQkFDaEQsdURBQXVEO2FBQzFEO1FBQ0wsQ0FBQyxDQUFBO0lBQ0wsQ0FBQztJQUdNLHNDQUFtQixHQUExQjtRQUNJLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxHQUFHLEVBQUUsQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDO0lBQ25ELENBQUM7SUFHTyxpQ0FBYyxHQUF0QjtRQUNJLElBQUcsSUFBSSxDQUFDLGdCQUFnQjtZQUFFLE9BQU87UUFDakMsSUFBSSxDQUFDLGdCQUFnQixHQUFHLElBQUksQ0FBQztRQUM3QixJQUFJLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLFlBQVksQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxXQUFXLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDN0csQ0FBQztJQUdTLHlCQUFNLEdBQWhCLFVBQWlCLEVBQVU7UUFDdkIsSUFBRyxNQUFNLENBQUMsc0JBQXNCLElBQUksQ0FBQyxJQUFJLENBQUMsd0JBQXdCLElBQUksTUFBTSxDQUFDLE1BQU0sRUFBRTtZQUNqRixJQUFJLENBQUMsd0JBQXdCLEdBQUcsSUFBSSxDQUFDO1lBQ3JDLElBQUksQ0FBQyxtQkFBbUIsRUFBRSxDQUFDO1NBQzlCO1FBRUQsSUFBRyxxQkFBUyxDQUFDLFNBQVM7WUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksR0FBRyxFQUFFLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQztRQUV0RSxNQUFNLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQztJQUMzQyxDQUFDO0lBbkREO1FBREMsUUFBUSxDQUFDLGtCQUFRLENBQUM7OENBQ087SUFFMUI7UUFEQyxRQUFRLENBQUMsc0JBQVksQ0FBQztrREFDVztJQUVsQztRQURDLFFBQVEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxjQUFjLENBQUMsQ0FBQztnREFDTztJQVBwQixRQUFRO1FBRDVCLE9BQU87T0FDYSxRQUFRLENBdUQ1QjtJQUFELGVBQUM7Q0F2REQsQUF1REMsQ0F2RHFDLEVBQUUsQ0FBQyxTQUFTLEdBdURqRDtrQkF2RG9CLFFBQVEiLCJmaWxlIjoiIiwic291cmNlUm9vdCI6Ii8iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb25zdGFudHMgfSBmcm9tIFwiLi4vRGF0YS9jb25zdGFudHNcIjtcclxuaW1wb3J0IEF1ZGlvTWFuYWdlciBmcm9tIFwiLi4vUGx1Z2luL0F1ZGlvTWFuYWdlclwiO1xyXG5pbXBvcnQgR2FtZVBsYXkgZnJvbSBcIi4vR2FtZVBsYXlcIjtcclxuXHJcbmNvbnN0IHtjY2NsYXNzLCBwcm9wZXJ0eX0gPSBjYy5fZGVjb3JhdG9yO1xyXG5cclxuQGNjY2xhc3NcclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTmV3Q2xhc3MgZXh0ZW5kcyBjYy5Db21wb25lbnQge1xyXG5cclxuICAgIEBwcm9wZXJ0eShHYW1lUGxheSlcclxuICAgIEdhbWVQbGF5OiBHYW1lUGxheSA9IG51bGw7XHJcbiAgICBAcHJvcGVydHkoQXVkaW9NYW5hZ2VyKVxyXG4gICAgQXVkaW9NYW5hZ2VyOiBBdWRpb01hbmFnZXIgPSBudWxsO1xyXG4gICAgQHByb3BlcnR5KFtjYy5QYXJ0aWNsZVN5c3RlbV0pXHJcbiAgICBlZmZlY3REaWVzOiBjYy5QYXJ0aWNsZVN5c3RlbVtdID0gW107XHJcblxyXG4gICAgcmlnaWRib2R5OiBjYy5SaWdpZEJvZHkgPSBudWxsO1xyXG4gICAgY29sbGlkZTogY2MuQ29sbGlkZXIgPSBudWxsO1xyXG4gICAgaXNDaGFuZ2VFZ2dSaWdpZGJvZHlUeXBlOiBib29sZWFuID0gZmFsc2U7XHJcbiAgICBpc0FjdGl2ZUhlbHBBbmltOiBib29sZWFuID0gZmFsc2U7XHJcblxyXG5cclxuICAgIHByb3RlY3RlZCBzdGFydCgpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLnJpZ2lkYm9keSA9IHRoaXMuZ2V0Q29tcG9uZW50KGNjLlJpZ2lkQm9keSk7XHJcblxyXG4gICAgICAgIHRoaXMucmlnaWRib2R5Lm9uQmVnaW5Db250YWN0ID0gKGM6Y2MuUGh5c2ljc0NvbnRhY3QsIHM6IGNjLlBoeXNpY3NDb2xsaWRlciwgbzogY2MuUGh5c2ljc0NvbGxpZGVyKSA9PiB7XHJcbiAgICAgICAgICAgIGlmKG8udGFnID09PSA4KSB7XHJcbiAgICAgICAgICAgICAgICBDb25zdGFudHMuaXNIaXQgPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMucmlnaWRib2R5LmRlc3Ryb3koKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuZ2V0Q29tcG9uZW50KGNjLkNvbGxpZGVyKS5kZXN0cm95KCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm5vZGUuZ2V0Q2hpbGRCeU5hbWUoXCJTcGluZV9DaGFyYWN0ZXJcIikuYWN0aXZlID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB0aGlzLkF1ZGlvTWFuYWdlci5wbGF5U291bmQoQ29uc3RhbnRzLlNvdW5kVHJhY2suZXhwbG9zaW9uU291bmQpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5lZmZlY3REaWVzLmZvckVhY2goZnggPT4gZngucmVzZXRTeXN0ZW0oKSk7XHJcbiAgICAgICAgICAgICAgICAvLyB0aGlzLnNjaGVkdWxlT25jZSgoKSA9PiB7dGhpcy5HYW1lUGxheS5sb3NlKCl9LCAyLjUpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG5cclxuICAgIHB1YmxpYyBjaGFuZ2VSaWdpZGJvZHlUeXBlKCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMucmlnaWRib2R5LnR5cGUgPSBjYy5SaWdpZEJvZHlUeXBlLkR5bmFtaWM7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIHByaXZhdGUgYWN0aXZlSGVscEFuaW0oKTogdm9pZCB7XHJcbiAgICAgICAgaWYodGhpcy5pc0FjdGl2ZUhlbHBBbmltKSByZXR1cm47XHJcbiAgICAgICAgdGhpcy5pc0FjdGl2ZUhlbHBBbmltID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLm5vZGUuZ2V0Q2hpbGRCeU5hbWUoXCJTcGluZV9DaGFyYWN0ZXJcIikuZ2V0Q29tcG9uZW50KHNwLlNrZWxldG9uKS5zZXRBbmltYXRpb24oMCwgXCJiZWluZ19oaXRcIiwgdHJ1ZSk7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIHByb3RlY3RlZCB1cGRhdGUoZHQ6IG51bWJlcik6IHZvaWQge1xyXG4gICAgICAgIGlmKHdpbmRvdy5jaGFuZ2VFZ2dSaWdpZGJvZHlUeXBlICYmICF0aGlzLmlzQ2hhbmdlRWdnUmlnaWRib2R5VHlwZSAmJiB3aW5kb3cuaXNEcmF3KSB7XHJcbiAgICAgICAgICAgIHRoaXMuaXNDaGFuZ2VFZ2dSaWdpZGJvZHlUeXBlID0gdHJ1ZTtcclxuICAgICAgICAgICAgdGhpcy5jaGFuZ2VSaWdpZGJvZHlUeXBlKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZihDb25zdGFudHMuaXNXaW5HYW1lKSB0aGlzLnJpZ2lkYm9keS50eXBlID0gY2MuUmlnaWRCb2R5VHlwZS5TdGF0aWM7XHJcblxyXG4gICAgICAgIHdpbmRvdy5pc0RyYXcgJiYgdGhpcy5hY3RpdmVIZWxwQW5pbSgpO1xyXG4gICAgfVxyXG59XHJcbiJdfQ==
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/Plugin/Ultils.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'be0d17Ed0ZFy5GvuwVSQsnQ', 'Ultils');
// Script/Plugin/Ultils.ts

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Ultils = void 0;
var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
var decreaseRevive = function (reviveCount) {
    var result = null;
    result = reviveCount - 1;
    return result;
};
var Ultils = /** @class */ (function () {
    function Ultils() {
    }
    Ultils.decreaseRevive = decreaseRevive;
    return Ultils;
}());
exports.Ultils = Ultils;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0XFxQbHVnaW5cXFVsdGlscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFFTSxJQUFBLEtBQXdCLEVBQUUsQ0FBQyxVQUFVLEVBQW5DLE9BQU8sYUFBQSxFQUFFLFFBQVEsY0FBa0IsQ0FBQztBQUU1QyxJQUFNLGNBQWMsR0FBRyxVQUFDLFdBQW1CO0lBQ3ZDLElBQUksTUFBTSxHQUFXLElBQUksQ0FBQztJQUMxQixNQUFNLEdBQUcsV0FBVyxHQUFHLENBQUMsQ0FBQztJQUN6QixPQUFPLE1BQU0sQ0FBQztBQUNsQixDQUFDLENBQUE7QUFFRDtJQUFBO0lBSUEsQ0FBQztJQUZVLHFCQUFjLEdBQTBCLGNBQWMsQ0FBQTtJQUVqRSxhQUFDO0NBSkQsQUFJQyxJQUFBO0FBSlksd0JBQU0iLCJmaWxlIjoiIiwic291cmNlUm9vdCI6Ii8iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBHYW1lT3B0aW9uIH0gZnJvbSBcIi4uL0RhdGEvR2FtZU9wdGlvblwiO1xyXG5cclxuY29uc3QgeyBjY2NsYXNzLCBwcm9wZXJ0eSB9ID0gY2MuX2RlY29yYXRvcjtcclxuXHJcbmNvbnN0IGRlY3JlYXNlUmV2aXZlID0gKHJldml2ZUNvdW50OiBudW1iZXIpOiBudW1iZXIgPT4ge1xyXG4gICAgbGV0IHJlc3VsdDogbnVtYmVyID0gbnVsbDtcclxuICAgIHJlc3VsdCA9IHJldml2ZUNvdW50IC0gMTtcclxuICAgIHJldHVybiByZXN1bHQ7XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBVbHRpbHMge1xyXG5cclxuICAgIHN0YXRpYyBkZWNyZWFzZVJldml2ZTogdHlwZW9mIGRlY3JlYXNlUmV2aXZlID0gZGVjcmVhc2VSZXZpdmVcclxuXHJcbn0iXX0=
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/Plugin/PathFinding.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '7a986egxNlAsrw6JHknO4j0', 'PathFinding');
// Script/Plugin/PathFinding.ts

"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var constants_1 = require("../Data/constants");
var Astar_1 = require("./Astar");
var Grid_1 = require("./Grid");
var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
var PathFinding = /** @class */ (function (_super) {
    __extends(PathFinding, _super);
    function PathFinding() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.target = null;
        _this.nodesToMove = [];
        _this.isStartFindPath = false;
        return _this;
    }
    PathFinding.prototype.onLoad = function () {
        // Khởi tạo Grid và AStar
        this.grid = new Grid_1.Grid(20); // Khởi tạo grid với kích thước 10x10, ví dụ
        this.astar = new Astar_1.default(this.grid);
    };
    PathFinding.prototype.start = function () {
    };
    PathFinding.prototype.startFindPAth = function () {
        if (this.isStartFindPath)
            return;
        this.isStartFindPath = true;
        this.setupGridObstacles();
        this.findPaths();
    };
    PathFinding.prototype.setupGridObstacles = function () {
        // Ví dụ: Đặt vật cản trong grid
        this.grid.setObstacle(3, 3);
        this.grid.setObstacle(4, 4);
        // Thêm vật cản khác nếu cần
    };
    PathFinding.prototype.findPaths = function () {
        var _this = this;
        var targetPosition = this.grid.getNodePosition(this.target);
        this.nodesToMove.forEach(function (node) {
            var startPosition = _this.grid.getNodePosition(node);
            var path = _this.astar.findPath(startPosition, targetPosition);
            _this.moveNodeAlongPath(node, path);
        });
    };
    PathFinding.prototype.moveNodeAlongPath = function (node, path) {
        var _this = this;
        if (path.length === 0)
            return;
        var index = 0;
        var moveStep = function () {
            if (index < path.length) {
                var _a = path[index], x = _a.x, y = _a.y;
                var position = _this.grid.getWorldPosition(x, y);
                cc.tween(node)
                    .to(1, { position: position })
                    .call(function () {
                    index++;
                    moveStep();
                })
                    .start();
            }
        };
        moveStep();
    };
    PathFinding.prototype.update = function (dt) {
        if (window.isDraw && !constants_1.Constants.isWinGame) {
            this.startFindPAth();
        }
    };
    __decorate([
        property(cc.Node)
    ], PathFinding.prototype, "target", void 0);
    __decorate([
        property([cc.Node])
    ], PathFinding.prototype, "nodesToMove", void 0);
    PathFinding = __decorate([
        ccclass
    ], PathFinding);
    return PathFinding;
}(cc.Component));
exports.default = PathFinding;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0XFxQbHVnaW5cXFBhdGhGaW5kaW5nLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLCtDQUE4QztBQUM5QyxpQ0FBNEI7QUFDNUIsK0JBQThCO0FBRXhCLElBQUEsS0FBc0IsRUFBRSxDQUFDLFVBQVUsRUFBbEMsT0FBTyxhQUFBLEVBQUUsUUFBUSxjQUFpQixDQUFDO0FBRzFDO0lBQXlDLCtCQUFZO0lBQXJEO1FBQUEscUVBZ0ZDO1FBN0VHLFlBQU0sR0FBWSxJQUFJLENBQUM7UUFHdkIsaUJBQVcsR0FBYyxFQUFFLENBQUM7UUFFNUIscUJBQWUsR0FBWSxLQUFLLENBQUM7O0lBd0VyQyxDQUFDO0lBbkVhLDRCQUFNLEdBQWhCO1FBQ0kseUJBQXlCO1FBQ3pCLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxXQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyw0Q0FBNEM7UUFDdEUsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLGVBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDdEMsQ0FBQztJQUVTLDJCQUFLLEdBQWY7SUFFQSxDQUFDO0lBR0QsbUNBQWEsR0FBYjtRQUNJLElBQUcsSUFBSSxDQUFDLGVBQWU7WUFBRSxPQUFPO1FBRWhDLElBQUksQ0FBQyxlQUFlLEdBQUcsSUFBSSxDQUFDO1FBQzVCLElBQUksQ0FBQyxrQkFBa0IsRUFBRSxDQUFDO1FBQzFCLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQztJQUNyQixDQUFDO0lBR08sd0NBQWtCLEdBQTFCO1FBQ0ksZ0NBQWdDO1FBQ2hDLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUM1QixJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDNUIsNEJBQTRCO0lBQ2hDLENBQUM7SUFFTywrQkFBUyxHQUFqQjtRQUFBLGlCQVVDO1FBVEcsSUFBTSxjQUFjLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBRTlELElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLFVBQUEsSUFBSTtZQUN6QixJQUFNLGFBQWEsR0FBRyxLQUFJLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUV0RCxJQUFNLElBQUksR0FBRyxLQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxhQUFhLEVBQUUsY0FBYyxDQUFDLENBQUM7WUFFaEUsS0FBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztRQUN2QyxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7SUFFTyx1Q0FBaUIsR0FBekIsVUFBMEIsSUFBYSxFQUFFLElBQWdDO1FBQXpFLGlCQW9CQztRQW5CRyxJQUFJLElBQUksQ0FBQyxNQUFNLEtBQUssQ0FBQztZQUFFLE9BQU87UUFFOUIsSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDO1FBQ2QsSUFBTSxRQUFRLEdBQUc7WUFDYixJQUFJLEtBQUssR0FBRyxJQUFJLENBQUMsTUFBTSxFQUFFO2dCQUNmLElBQUEsS0FBVyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQXBCLENBQUMsT0FBQSxFQUFFLENBQUMsT0FBZ0IsQ0FBQztnQkFDN0IsSUFBTSxRQUFRLEdBQUcsS0FBSSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7Z0JBRWxELEVBQUUsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDO3FCQUNULEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLENBQUM7cUJBQzdCLElBQUksQ0FBQztvQkFDRixLQUFLLEVBQUUsQ0FBQztvQkFDUixRQUFRLEVBQUUsQ0FBQztnQkFDZixDQUFDLENBQUM7cUJBQ0QsS0FBSyxFQUFFLENBQUM7YUFDaEI7UUFDTCxDQUFDLENBQUM7UUFFRixRQUFRLEVBQUUsQ0FBQztJQUNmLENBQUM7SUFHUyw0QkFBTSxHQUFoQixVQUFpQixFQUFVO1FBQ3ZCLElBQUksTUFBTSxDQUFDLE1BQU0sSUFBSSxDQUFDLHFCQUFTLENBQUMsU0FBUyxFQUFFO1lBQ3ZDLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztTQUN4QjtJQUNMLENBQUM7SUE1RUQ7UUFEQyxRQUFRLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQzsrQ0FDSztJQUd2QjtRQURDLFFBQVEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQztvREFDUTtJQU5YLFdBQVc7UUFEL0IsT0FBTztPQUNhLFdBQVcsQ0FnRi9CO0lBQUQsa0JBQUM7Q0FoRkQsQUFnRkMsQ0FoRndDLEVBQUUsQ0FBQyxTQUFTLEdBZ0ZwRDtrQkFoRm9CLFdBQVciLCJmaWxlIjoiIiwic291cmNlUm9vdCI6Ii8iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb25zdGFudHMgfSBmcm9tIFwiLi4vRGF0YS9jb25zdGFudHNcIjtcclxuaW1wb3J0IEFTdGFyIGZyb20gXCIuL0FzdGFyXCI7XHJcbmltcG9ydCB7IEdyaWQgfSBmcm9tIFwiLi9HcmlkXCI7XHJcblxyXG5jb25zdCB7Y2NjbGFzcywgcHJvcGVydHl9ID0gY2MuX2RlY29yYXRvcjtcclxuXHJcbkBjY2NsYXNzXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBhdGhGaW5kaW5nIGV4dGVuZHMgY2MuQ29tcG9uZW50IHtcclxuXHJcbiAgICBAcHJvcGVydHkoY2MuTm9kZSlcclxuICAgIHRhcmdldDogY2MuTm9kZSA9IG51bGw7XHJcblxyXG4gICAgQHByb3BlcnR5KFtjYy5Ob2RlXSlcclxuICAgIG5vZGVzVG9Nb3ZlOiBjYy5Ob2RlW10gPSBbXTtcclxuXHJcbiAgICBpc1N0YXJ0RmluZFBhdGg6IGJvb2xlYW4gPSBmYWxzZTtcclxuXHJcbiAgICBwcml2YXRlIGdyaWQ6IEdyaWQ7XHJcbiAgICBwcml2YXRlIGFzdGFyOiBBU3RhcjtcclxuXHJcbiAgICBwcm90ZWN0ZWQgb25Mb2FkKCk6IHZvaWQge1xyXG4gICAgICAgIC8vIEto4bufaSB04bqhbyBHcmlkIHbDoCBBU3RhclxyXG4gICAgICAgIHRoaXMuZ3JpZCA9IG5ldyBHcmlkKDIwKTsgLy8gS2jhu59pIHThuqFvIGdyaWQgduG7m2kga8OtY2ggdGjGsOG7m2MgMTB4MTAsIHbDrSBk4bulXHJcbiAgICAgICAgdGhpcy5hc3RhciA9IG5ldyBBU3Rhcih0aGlzLmdyaWQpO1xyXG4gICAgfVxyXG5cclxuICAgIHByb3RlY3RlZCBzdGFydCgpOiB2b2lkIHtcclxuIFxyXG4gICAgfVxyXG5cclxuXHJcbiAgICBzdGFydEZpbmRQQXRoKCk6IHZvaWQge1xyXG4gICAgICAgIGlmKHRoaXMuaXNTdGFydEZpbmRQYXRoKSByZXR1cm47XHJcblxyXG4gICAgICAgIHRoaXMuaXNTdGFydEZpbmRQYXRoID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLnNldHVwR3JpZE9ic3RhY2xlcygpO1xyXG4gICAgICAgIHRoaXMuZmluZFBhdGhzKCk7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIHByaXZhdGUgc2V0dXBHcmlkT2JzdGFjbGVzKCk6IHZvaWQge1xyXG4gICAgICAgIC8vIFbDrSBk4bulOiDEkOG6t3QgduG6rXQgY+G6o24gdHJvbmcgZ3JpZFxyXG4gICAgICAgIHRoaXMuZ3JpZC5zZXRPYnN0YWNsZSgzLCAzKTtcclxuICAgICAgICB0aGlzLmdyaWQuc2V0T2JzdGFjbGUoNCwgNCk7XHJcbiAgICAgICAgLy8gVGjDqm0gduG6rXQgY+G6o24ga2jDoWMgbuG6v3UgY+G6p25cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGZpbmRQYXRocygpOiB2b2lkIHtcclxuICAgICAgICBjb25zdCB0YXJnZXRQb3NpdGlvbiA9IHRoaXMuZ3JpZC5nZXROb2RlUG9zaXRpb24odGhpcy50YXJnZXQpO1xyXG5cclxuICAgICAgICB0aGlzLm5vZGVzVG9Nb3ZlLmZvckVhY2gobm9kZSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IHN0YXJ0UG9zaXRpb24gPSB0aGlzLmdyaWQuZ2V0Tm9kZVBvc2l0aW9uKG5vZGUpO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgcGF0aCA9IHRoaXMuYXN0YXIuZmluZFBhdGgoc3RhcnRQb3NpdGlvbiwgdGFyZ2V0UG9zaXRpb24pO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5tb3ZlTm9kZUFsb25nUGF0aChub2RlLCBwYXRoKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIG1vdmVOb2RlQWxvbmdQYXRoKG5vZGU6IGNjLk5vZGUsIHBhdGg6IHsgeDogbnVtYmVyLCB5OiBudW1iZXIgfVtdKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKHBhdGgubGVuZ3RoID09PSAwKSByZXR1cm47XHJcblxyXG4gICAgICAgIGxldCBpbmRleCA9IDA7XHJcbiAgICAgICAgY29uc3QgbW92ZVN0ZXAgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChpbmRleCA8IHBhdGgubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB7IHgsIHkgfSA9IHBhdGhbaW5kZXhdO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcG9zaXRpb24gPSB0aGlzLmdyaWQuZ2V0V29ybGRQb3NpdGlvbih4LCB5KTtcclxuXHJcbiAgICAgICAgICAgICAgICBjYy50d2Vlbihub2RlKVxyXG4gICAgICAgICAgICAgICAgICAgIC50bygxLCB7IHBvc2l0aW9uOiBwb3NpdGlvbiB9KVxyXG4gICAgICAgICAgICAgICAgICAgIC5jYWxsKCgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXgrKztcclxuICAgICAgICAgICAgICAgICAgICAgICAgbW92ZVN0ZXAoKTtcclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgIC5zdGFydCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgbW92ZVN0ZXAoKTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgcHJvdGVjdGVkIHVwZGF0ZShkdDogbnVtYmVyKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKHdpbmRvdy5pc0RyYXcgJiYgIUNvbnN0YW50cy5pc1dpbkdhbWUpIHtcclxuICAgICAgICAgICAgdGhpcy5zdGFydEZpbmRQQXRoKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbiJdfQ==
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/Plugin/Astar.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '835e6+FhSxOmZO9WaB8eSN5', 'Astar');
// Script/Plugin/Astar.ts

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var AStar = /** @class */ (function () {
    function AStar(grid) {
        this.grid = grid;
    }
    AStar.prototype.heuristic = function (node, endNode) {
        return Math.abs(node.x - endNode.x) + Math.abs(node.y - endNode.y);
    };
    AStar.prototype.getNeighbors = function (node) {
        var neighbors = [];
        var directions = [
            { x: -1, y: 0 },
            { x: 1, y: 0 },
            { x: 0, y: -1 },
            { x: 0, y: 1 },
        ];
        for (var _i = 0, directions_1 = directions; _i < directions_1.length; _i++) {
            var direction = directions_1[_i];
            var newX = node.x + direction.x;
            var newY = node.y + direction.y;
            if (this.grid.isWalkable(newX, newY)) {
                neighbors.push({
                    x: newX,
                    y: newY,
                    g: 0,
                    h: 0,
                    f: 0,
                    parent: null,
                });
            }
        }
        return neighbors;
    };
    AStar.prototype.findPath = function (startPos, endPos) {
        var startNode = {
            x: startPos.x,
            y: startPos.y,
            g: 0,
            h: 0,
            f: 0,
            parent: null,
        };
        var endNode = {
            x: endPos.x,
            y: endPos.y,
            g: 0,
            h: 0,
            f: 0,
            parent: null,
        };
        var openList = [];
        var closedList = [];
        openList.push(startNode);
        while (openList.length > 0) {
            var currentNode = openList.reduce(function (prev, curr) { return (prev.f < curr.f ? prev : curr); });
            if (currentNode.x === endNode.x && currentNode.y === endNode.y) {
                return this.reconstructPath(currentNode);
            }
            openList.splice(openList.indexOf(currentNode), 1);
            closedList.push(currentNode);
            var neighbors = this.getNeighbors(currentNode);
            var _loop_1 = function (neighbor) {
                if (closedList.find(function (n) { return n.x === neighbor.x && n.y === neighbor.y; })) {
                    return "continue";
                }
                var tentativeG = currentNode.g + 1;
                var inOpenList = openList.find(function (n) { return n.x === neighbor.x && n.y === neighbor.y; });
                if (!inOpenList || tentativeG < neighbor.g) {
                    neighbor.g = tentativeG;
                    neighbor.h = this_1.heuristic(neighbor, endNode);
                    neighbor.f = neighbor.g + neighbor.h;
                    neighbor.parent = currentNode;
                    if (!inOpenList) {
                        openList.push(neighbor);
                    }
                }
            };
            var this_1 = this;
            for (var _i = 0, neighbors_1 = neighbors; _i < neighbors_1.length; _i++) {
                var neighbor = neighbors_1[_i];
                _loop_1(neighbor);
            }
        }
        return null;
    };
    AStar.prototype.reconstructPath = function (node) {
        var path = [];
        var currentNode = node;
        while (currentNode) {
            path.push(currentNode);
            currentNode = currentNode.parent;
        }
        return path.reverse();
    };
    return AStar;
}());
exports.default = AStar;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/neutrinoparticles/exported_effects/Fireworks01.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '8a177579ldA+rfTscjwOEOq', 'Fireworks01');
// neutrinoparticles/exported_effects/Fireworks01.js

"use strict";

// b27726ce-45eb-46cf-8709-409a1454ec2d
(function (root, factory) {
  if (typeof exports === 'object' && typeof module !== 'undefined') {
    module.exports = factory();
  } else if (typeof define === 'function' && define.amd) {
    define(['exports'], function (exports) {
      (root.NeutrinoEffect = exports)['Fireworks01'] = factory();
    });
  } else {
    var namespace = root.NeutrinoEffect || (root.NeutrinoEffect = {});
    namespace.__last__ = namespace['Fireworks01'] = factory();
  }
})(typeof self !== 'undefined' ? self : void 0, function () {
  function Fireworks01(ctx) {
    var Db = this;

    var ne = function ne(Ld, Bd) {
      this.Ld = Ld;
      this.Bd = Bd;

      if (this.Bd.we.pe.length > 0) {
        this.we = this.Bd.we.pe[0];
        this.Lc = [ne.prototype.Ec, ne.prototype.Fc][this.we.xe];
      } else this.we = null;
    };

    ne.prototype = {
      Ec: function Ec(fe, Ab, Xb) {
        var Gc = ctx.ib(Xb.Md);
        var Hc = Math.cos(Gc);
        var Ic = Math.sin(Gc);
        var ye = ctx.Ae(Xb.Nd[0]);
        var ze = ctx.Ae(Xb.Nd[1]);
        fe.
        /**/
        transform(ye * Hc, ye * Ic, ze * -Ic, ze * Hc, Ab[0], Ab[1]);
      },
      Fc: function Fc(fe, Ab, Xb) {
        var q = Xb.Mc;
        var z2 = 2.0 * q[2] * q[2];
        var xy = 2.0 * q[0] * q[1];
        var wz = 2.0 * q[3] * q[2];
        var ye = ctx.Ae(Xb.Nd[0]);
        var ze = ctx.Ae(Xb.Nd[1]);
        fe.
        /**/
        transform(ye * (1.0 - 2.0 * q[1] * q[1] - z2), ye * (xy + wz), ze * (wz - xy), ze * (2.0 * q[0] * q[0] + z2 - 1.0), Ab[0], Ab[1]);
      },
      Pc: function Pc(fe, Xb, ge) {
        Xb.vc(fe, -1, ge);

        if (this.we) {
          if (this.Be != null && !Xb.oc) {
            if (Xb.Od > 0.001) {
              var De = Math.floor(Xb.Qc % this.we.Rc);
              var Ee = Math.floor(Xb.Qc / this.we.Rc);
              var Ab = Xb.Ab.slice();
              var Nd = Xb.Nd.slice();

              if (!ge || ge.
              /**/
              transform(Ab, Nd)) {
                var df = Math.abs(Nd[0]);
                var ef = Math.abs(Nd[1]);

                if (df > 0.001 && ef > 0.001) {
                  fe.save();
                  this.Lc(fe, Ab, Xb);
                  fe.translate(-df * Xb.Pd[0], -ef * (1 - Xb.Pd[1]));
                  fe.globalAlpha *= Xb.Od;

                  if (Xb.gf[0] < 0.999 || Xb.gf[1] < 0.999 || Xb.gf[2] < 0.999) {
                    if (df >= 1 && ef >= 1) {
                      var Ye = df < this.Tc ? df : this.Tc;
                      var Ze = ef < this.Uc ? ef : this.Uc;
                      ctx.af(Ye, Ze);
                      ctx.bf.globalCompositeOperation = "copy";
                      ctx.bf.drawImage(this.Be.image, this.Be.x + this.Tc * De, this.Be.y + this.Uc * Ee, this.Tc, this.Uc, 0, 0, Ye, Ze);
                      ctx.bf.globalCompositeOperation = "multiply";
                      ctx.bf.fillStyle = ctx.ff(Xb.gf);
                      ctx.bf.fillRect(0, 0, Ye, Ze);
                      ctx.bf.globalCompositeOperation = "destination-atop";
                      ctx.bf.drawImage(this.Be.image, this.Be.x + this.Tc * De, this.Be.y + this.Uc * Ee, this.Tc, this.Uc, 0, 0, Ye, Ze);
                      fe.drawImage(ctx.cf, 0, 0, Ye, Ze, 0, 0, df, ef);
                    }
                  } else {
                    fe.drawImage(this.Be.image, this.Be.x + this.Tc * De, this.Be.y + this.Uc * Ee, this.Tc, this.Uc, 0, 0, df, ef);
                  }

                  fe.restore();
                }
              }
            }
          }
        }

        Xb.vc(fe, 1, ge);
      },
      Hd: function Hd(fe, ge) {
        fe.save();

        if (this.we) {
          fe.globalCompositeOperation = this.Ld.materials[this.Ld.
          /**/
          model.renderStyles[this.we.renderStyleIndex].materialIndex];
          this.Be = this.Ld.textureDescs[this.Ld.
          /**/
          model.renderStyles[this.we.renderStyleIndex].textureIndices[0]];
        } else {
          this.Be = null;
        }

        if (this.Be) {
          this.Tc = this.Be.width / this.we.Rc;
          this.Uc = this.Be.height / this.we.Sc;
        }

        function kd(a, b) {
          if (a.Ab[2] > b.Ab[2]) return 1;
          if (a.Ab[2] < b.Ab[2]) return -1;
          return 0;
        }

        switch (this.Bd.Vc) {
          case 0:
            for (var Wb = 0; Wb < this.Bd.tc.length; ++Wb) {
              this.Pc(fe, this.Bd.tc[Wb], ge);
            }

            break;

          case 1:
            for (var Wb = this.Bd.tc.length; Wb-- > 0;) {
              this.Pc(fe, this.Bd.tc[Wb], ge);
            }

            break;

          case 2:
            this.Bd.tc.sort(kd);

            for (var Wb = 0; Wb < this.Bd.tc.length; ++Wb) {
              this.Pc(fe, this.Bd.tc[Wb], ge);
            }

            break;
        }

        fe.restore();
      }
    };

    var oe = function oe(Ld, Bd) {
      this.Ld = Ld;
      this.Bd = Bd;
      if (this.Bd.we.pe.length > 0) this.we = this.Bd.we.pe[0];else this.we = null;
      this.vertex = [{
        /**/
        position: [0.0, 0.0, 0.0],

        /**/
        color: [0, 0, 0, 0],

        /**/
        texCoords: [[0.0, 0.0]]
      }, {
        /**/
        position: [0.0, 0.0, 0.0],

        /**/
        color: [0, 0, 0, 0],

        /**/
        texCoords: [[0.0, 0.0]]
      }, {
        /**/
        position: [0.0, 0.0, 0.0],

        /**/
        color: [0, 0, 0, 0],

        /**/
        texCoords: [[0.0, 0.0]]
      }, {
        /**/
        position: [0.0, 0.0, 0.0],

        /**/
        color: [0, 0, 0, 0],

        /**/
        texCoords: [[0.0, 0.0]]
      }];
    };

    oe.prototype = {
      qe: function qe(Xb, se, re, te, renderBuffer) {
        Xb.Ce(-1, se, re, te, renderBuffer);

        if (this.we) {
          if (!Xb.oc) {
            var v0 = this.vertex[0];
            var v1 = this.vertex[1];
            var v2 = this.vertex[2];
            var v3 = this.vertex[3];
            var Fe = [],
                Ge = [];

            if (this.we.xe == 0) {
              var a = ctx.ib(Xb.Md);
              var s = -Math.sin(a);
              var c = Math.cos(a);
              Fe[0] = se[0] * c + re[0] * s;
              Fe[1] = se[1] * c + re[1] * s;
              Fe[2] = se[2] * c + re[2] * s;
              Ge[0] = -se[0] * s + re[0] * c;
              Ge[1] = -se[1] * s + re[1] * c;
              Ge[2] = -se[2] * s + re[2] * c;
            } else {
              var q = Xb.Mc;
              var z2 = 2.0 * q[2] * q[2];
              var xy = 2.0 * q[0] * q[1];
              var wz = 2.0 * q[3] * q[2];
              Fe[0] = 1.0 - 2.0 * q[1] * q[1] - z2;
              Fe[1] = xy + wz;
              Fe[2] = 2.0 * q[0] * q[2] - 2.0 * q[3] * q[1];
              Ge[0] = xy - wz;
              Ge[1] = 1.0 - 2.0 * q[0] * q[0] - z2;
              Ge[2] = 2.0 * q[1] * q[2] + 2.0 * q[3] * q[0];
            }

            var He = [],
                Ie = [],
                Je = [],
                Ke = [];
            ctx.u(He, Fe, -Xb.Nd[0] * Xb.Pd[0]);
            ctx.u(Ie, Fe, Xb.Nd[0] * (1.0 - Xb.Pd[0]));
            ctx.u(Je, Ge, -Xb.Nd[1] * Xb.Pd[1]);
            ctx.u(Ke, Ge, Xb.Nd[1] * (1.0 - Xb.Pd[1]));
            ctx.c(v0.
            /**/
            position, He, Je);
            ctx.c(v0.
            /**/
            position, v0.
            /**/
            position, Xb.Ab);
            ctx.c(v1.
            /**/
            position, He, Ke);
            ctx.c(v1.
            /**/
            position, v1.
            /**/
            position, Xb.Ab);
            ctx.c(v2.
            /**/
            position, Ie, Ke);
            ctx.c(v2.
            /**/
            position, v2.
            /**/
            position, Xb.Ab);
            ctx.c(v3.
            /**/
            position, Ie, Je);
            ctx.c(v3.
            /**/
            position, v3.
            /**/
            position, Xb.Ab);
            {
              var rgb = ctx.v(Xb.gf, 255);
              v0.
              /**/
              color = v1.
              /**/
              color = v2.
              /**/
              color = v3.
              /**/
              color = [rgb[0], rgb[1], rgb[2], Xb.Od * 255];
            }
            {
              var De = Math.floor(Xb.Qc % this.we.Rc);
              var Ee = Math.floor(Xb.Qc / this.we.Rc);
              var Pe, Qe, Re, Se;
              var We = this.Ld.texturesRemap[this.Ld.
              /**/
              model.renderStyles[this.we.renderStyleIndex].textureIndices[0]];

              if (We) {
                var Ue = We.width / this.we.Rc;
                var Ve = We.height / this.we.Sc;
                var Pe = We.x + De * Ue;
                var Qe = Pe + Ue;
                var Re = We.y + We.height - Ee * Ve;
                var Se = Re - Ve;
              } else {
                var Ue = 1.0 / this.we.Rc;
                var Ve = 1.0 / this.we.Sc;
                var Pe = De * Ue;
                var Qe = Pe + Ue;
                var Re = 1.0 - Ee * Ve;
                var Se = Re - Ve;
              }

              v0.
              /**/
              texCoords[0] = [Pe, Se];
              v1.
              /**/
              texCoords[0] = [Pe, Re];
              v2.
              /**/
              texCoords[0] = [Qe, Re];
              v3.
              /**/
              texCoords[0] = [Qe, Se];
            }

            if (renderBuffer.beforeQuad) {
              renderBuffer.beforeQuad(this.we.renderStyleIndex);
            }

            renderBuffer.pushVertex(v0);
            renderBuffer.pushVertex(v1);
            renderBuffer.pushVertex(v2);
            renderBuffer.pushVertex(v3);

            if (!renderBuffer.__lastRenderCall) {
              renderBuffer.__lastRenderCall = new ctx.RenderCall(0, 6, this.we.renderStyleIndex);
            } else {
              var lastRenderCall = renderBuffer.__lastRenderCall;

              if (lastRenderCall.renderStyleIndex == this.we.renderStyleIndex) {
                lastRenderCall.numIndices += 6;
              } else {
                renderBuffer.pushRenderCall(lastRenderCall);
                renderBuffer.__lastRenderCall = new ctx.RenderCall(lastRenderCall.startIndex + lastRenderCall.numIndices, 6, this.we.renderStyleIndex);
              }
            }
          }
        }

        Xb.Ce(1, se, re, te, renderBuffer);
      },
      ue: function ue(se, re, te, renderBuffer) {
        switch (this.Bd.Vc) {
          case 0:
            for (var Wb = 0; Wb < this.Bd.tc.length; ++Wb) {
              this.qe(this.Bd.tc[Wb], se, re, te, renderBuffer);
            }

            break;

          case 1:
            for (var Wb = this.Bd.tc.length; Wb-- > 0;) {
              this.qe(this.Bd.tc[Wb], se, re, te, renderBuffer);
            }

            break;

          case 2:
            this.Bd.tc.forEach(function (Xb) {
              Xb.depth = ctx.H(te, Xb.Ab);
            });
            this.Bd.tc.sort(function (a, b) {
              if (a.depth < b.depth) return 1;
              if (a.depth > b.depth) return -1;
              return 0;
            });
            this.Bd.tc.forEach(function (Xb) {
              this.qe(Xb, se, re, te, renderBuffer);
            }, this);
            break;
        }
      }
    };

    var ld = function ld(Ld, we, ve) {
      var Vb = this;
      this.Ld = Ld;
      this.we = we; // Eb

      function Eb() {
        this.Fb = 0;
        this.Gb = 1;
        this.Hb = null;
        this.Ib = null;
        this.Kb = 0;
        this.Lb = 1;
        Vb.we.Mb(this); // IMPL

        this.Nb = function () {
          this.Ob = this.Gb;
          this.Fb = 0;
        };

        this.Nb();
      }

      Eb.prototype = {
        Jd: function Jd() {
          this.Nb();
        },
        Id: function Id(Qb, Ab, Mc) {
          Vb.we.Pb(Qb, Vb, this); // IMPL

          var Rb = Vb.Rb;
          var systemTime = Ld.Rb;
          var Sb = Qb;
          var ic = 0;

          if (this.zb > 0.000001) {
            var Tb = this.Ob + Qb * this.zb;

            while (Tb >= 1.0) {
              var Ub = this.zb < 0.001 ? 0.0 : (1.0 - this.Ob) / this.zb;
              Sb -= Ub;
              Rb += Ub;
              systemTime += Ub;

              if (this.Hb != null && Rb > this.Hb) {
                Vb.disactivate();
                break;
              }

              Vb.Rb = Rb;
              Ld.Rb = systemTime;
              if (Ab && Qb > 0) ctx.ab(Vb.Ab, Ab, Vb.Bb, Sb / Qb);
              if (Mc && Qb > 0) ctx.slerpq(Vb.Mc, Mc, Vb.prevRotation, Sb / Qb); // for the future when Jb would be external

              this.Lb = this.Jb;

              for (var Wb = 0; Wb < this.Jb; ++Wb) {
                if (Vb.sc.length == 0) break;
                if (this.Jb == 1) this.Kb = 0;else this.Kb = Wb / (this.Jb - 1);
                var Xb = Vb.sc.pop();
                Vb.tc.unshift(Xb);
                if (Wb == 0) Xb.Yb();else Xb.Zb();
                Xb.Id(Sb);
                ++ic;
              }

              this.Ob = 0.0;
              Tb -= 1.0;

              if (this.Ib != null && ++this.Fb >= this.Ib) {
                Vb.disactivate();
                break;
              }
            }

            this.Ob = Tb;
          }

          Rb += Sb;
          Vb.Rb = Rb;
          if (Ab) ctx.T(Vb.Ab, Ab);
          if (Mc) ctx.U(Vb.Mc, Mc);
          return ic;
        }
      }; // ac

      function ac() {
        this.Gb = 1;
        this.Kb = 0;
        this.Lb = 1;
        Vb.we.Mb(this); // IMPL

        this.Nb = function () {
          this.bc = this.Gb;
        };

        this.Nb();
      }

      ac.prototype = {
        Jd: function Jd() {
          this.Nb();
        },
        Id: function Id(Qb, Ab, Mc) {
          Vb.we.Pb(Qb, Vb, this); // IMPL

          var cc = Vb.Rb;
          var dc = cc + Qb;
          var systemTimeBeforeFrame = Ld.Rb;
          var systemTimeAfterFrame = systemTimeBeforeFrame + Qb;
          var ec = Ab ? ctx.O(ctx.h(Ab, Vb.Bb)) : 0;
          var ic = 0;

          if (ec > 0.000001) {
            var fc = ec / this.rd;
            var Tb = this.bc + fc;
            var hc = fc < 0.001 ? 1.0 - this.bc : (1.0 - this.bc) / fc;
            var jc = [];

            while (Tb > 1.0) {
              var kc = cc + hc * Qb;
              if (Ab) ctx.ab(jc, Vb.Bb, Ab, hc);
              Vb.Rb = kc;
              ctx.T(Vb.Ab, jc);
              Ld.Rb = ctx.X(systemTimeBeforeFrame, systemTimeAfterFrame, hc); // for the future when Jb would be external

              this.Lb = this.Jb;

              for (var Wb = 0; Wb < this.Jb; ++Wb) {
                if (Vb.sc.length == 0) break;
                if (this.Jb == 1) this.Kb = 0;else this.Kb = Wb / (this.Jb - 1);
                var Xb = Vb.sc.pop();
                Vb.tc.unshift(Xb);
                if (Wb == 0) Xb.Yb();else Xb.Zb();
                Xb.Id(Qb * (1.0 - hc));
                ++ic;
              }

              hc += 1.0 / fc;
              Tb -= 1.0;
            }

            this.bc = Tb;
          }

          Vb.Rb = dc;
          if (Ab) ctx.T(Vb.Ab, Ab);
          if (Mc) ctx.U(Vb.Mc, Mc);
          return ic;
        }
      }; // mc

      function mc() {
        this.Ab = [];
        this.Pd = [];
        this.Nd = [];
        this.gf = [];
        this.Kc = [];
      }

      mc.prototype = {
        nc: function nc() {
          this.oc = false;

          for (var i = 0; i < this.Kc.length; ++i) {
            var pc = this.Kc[i];
            pc.Bd.Jd(this.Ab, null);
            if (pc.Ad.sd) pc.Bd.disactivate();
          }
        },
        Yb: function Yb() {
          Vb.we.fd(Vb, this); // IMPL

          this.nc();
        },
        Zb: function Zb() {
          Vb.we.gd(Vb, this); // IMPL

          this.nc();
        },
        Id: function Id(Qb) {
          Vb.we.qc(Qb, Vb, this); // IMPL

          this.rc(Qb);
        },
        pc: function pc(je) {
          return this.Kc[je].Bd;
        },
        rc: function rc(Qb) {
          for (var i = 0; i < this.Kc.length; i++) {
            this.Kc[i].Bd.Id(Qb, this.Ab, null);
          }
        },
        uc: function uc(md, nd) {
          this.Kc.push({
            Bd: new ld(Ld, md, ve),
            Ad: nd
          });
        },
        vc: function vc(fe, xc, ge) {
          for (var i = 0; i < this.Kc.length; ++i) {
            var pc = this.Kc[i];
            if (xc == pc.Ad.xc) pc.Bd.Hd(fe, ge);
          }
        },
        Ce: function Ce(xc, se, re, te, renderBuffer) {
          for (var i = 0; i < this.Kc.length; ++i) {
            var pc = this.Kc[i];
            if (xc == pc.Ad.xc) pc.Bd.ue(se, re, te, renderBuffer);
          }
        },
        wc: function wc(fe) {
          this.oc = true;

          for (var i = 0; i < this.Kc.length; ++i) {
            var pc = this.Kc[i];

            if (pc.Ad.sd) {
              pc.Bd.activate();
              pc.Bd.Id(0);
            } else pc.Bd.disactivate();
          }
        },
        yc: function yc(Gd) {
          for (var i = 0; i < this.Kc.length; ++i) {
            this.Kc[i].Bd.Ed(Gd);
          }
        }
      }; // zc

      function zc() {}

      zc.prototype.Ac = function (Xb) {
        return Vb.we.Cc(Vb, Xb, this); // IMPL
      }; // ld Ad


      this.Ab = [];
      this.Bb = [];
      this.Mc = [];
      this.prevRotation = [];
      this.tc = [];
      this.sc = [];
      this.Wc = new zc();
      this.construct = new ve(this.Ld, this);
      this.Yc = [];
      this.ad = [];

      this.dd = function () {
        this.vd = new Eb();
      };

      this.ed = function () {
        this.vd = new ac();
      };

      this.we.ud(this); // IMPL

      for (var Wb = 0; Wb < this.jd; ++Wb) {
        var Xb = new mc();

        for (var id = 0; id < this.Yc.length; ++id) {
          var hd = this.Yc[id];
          Xb.uc(hd.Db, hd.Ad);
        }

        this.sc.push(Xb);
      }

      this.Nb = function (Ab, Mc) {
        ctx.T(this.Ab, Ab ? Ab : [0, 0, 0]);
        ctx.T(this.Bb, this.Ab);
        ctx.U(this.Mc, Mc ? Mc : [0, 0, 0, 1]);
        ctx.U(this.prevRotation, this.Mc);
        this.Rb = 0.0;
        this.wd = 0.0;
        this.Zc = true;
        this.paused_ = false;
        this.generatorsPaused_ = false;
        ctx.W(this.ad, 0, 0, 0);
      };
    };

    ld.prototype.Jd = function (Ab, Mc) {
      this.Nb(Ab, Mc);
      this.sc.push.apply(this.sc, this.tc);
      this.tc.length = 0;
      this.vd.Jd();
    };

    ld.prototype.Id = function (Qb, Ab, Mc) {
      if (this.paused_) {
        this.Td(Ab, Mc);
        return;
      }

      this.wd = this.Rb;

      if (Ab) {
        ctx.T(this.Bb, this.Ab);

        if (Qb > 0.0001) {
          var shift = [];
          ctx.g(shift, Ab, this.Bb);
          ctx.T(this.ad, shift);
          ctx.w(this.ad, this.ad, Qb);
        } else {
          ctx.W(this.ad, 0, 0, 0);
        }
      } else {
        ctx.W(this.ad, 0, 0, 0);
      }

      if (Mc) {
        ctx.U(this.prevRotation, this.Mc);
      }

      var ic;

      if (this.Zc && !this.generatorsPaused_) {
        ic = this.vd.Id(Qb, Ab, Mc);
      } else {
        if (Ab) ctx.T(this.Ab, Ab);
        if (Mc) ctx.U(this.Mc, Mc);
        ic = 0;
        this.Rb += Qb;
      }

      for (var Wb = ic; Wb < this.tc.length;) {
        var Xb = this.tc[Wb];

        if (!Xb.oc) {
          Xb.Id(Qb);

          if (this.Wc.Ac(this.tc[Wb])) {
            Xb.wc();
            if (this.xd(Wb)) continue;
          }
        } else {
          Xb.rc(Qb);
          if (this.xd(Wb)) continue;
        }

        ++Wb;
      }
    };

    ld.prototype.xd = function (je) {
      var Xb = this.tc[je];
      var ready = true;

      for (var id = 0; id < Xb.Kc.length; ++id) {
        var Bd = Xb.Kc[id].Bd;

        if (Bd.activated() || Bd.tc.length > 0) {
          ready = false;
          break;
        }
      }

      if (ready) {
        this.sc.push(this.tc[je]);
        this.tc.splice(je, 1);
        return true;
      }

      return false;
    };

    ld.prototype.Hd = function (fe, ge) {
      this.construct.Hd(fe, ge);
    };

    ld.prototype.ue = function (se, re, te, renderBuffer) {
      this.construct.ue(se, re, te, renderBuffer);
    };

    ld.prototype.Td = function (Ab, Mc) {
      this.wd = this.Rb;

      if (Ab) {
        ctx.T(this.Bb, this.Ab);
        ctx.T(this.Ab, Ab);
      }

      if (Mc) {
        ctx.U(this.prevRotation, this.Mc);
        ctx.U(this.Mc, Mc);
      }
    };

    ld.prototype.uc = function (md, nd) {
      this.Yc.push({
        Db: md,
        Ad: nd
      });
    };

    ld.prototype.
    /**/
    pause = function () {
      this.paused_ = true;
    };

    ld.prototype.
    /**/
    unpause = function () {
      this.paused_ = false;
    };

    ld.prototype.
    /**/
    paused = function () {
      return this.paused_;
    };

    ld.prototype.
    /**/
    pauseGenerators = function () {
      this.generatorsPaused_ = true;
    };

    ld.prototype.
    /**/
    unpauseGenerators = function () {
      this.generatorsPaused_ = false;
    };

    ld.prototype.
    /**/
    generatorsPaused = function () {
      return this.generatorsPaused_;
    };

    ld.prototype.activate = function () {
      this.Zc = true;
    };

    ld.prototype.disactivate = function () {
      this.Zc = false;
    };

    ld.prototype.activated = function () {
      return this.Zc;
    };

    ld.prototype.
    /**/
    getNumParticles = function () {
      return this.tc.length;
    };

    var ke = function ke() {
      var Cb = this;

      this._init = function (we, Ab, Mc, ve, options) {
        this.
        /**/
        model = we;
        this.Ab = [];
        this.Mc = []; // ke Ad

        this.od = [];

        this.pd = function (md) {
          var Bd = new ld(this, md, ve);
          Bd.Nb(this.Ab, this.Mc);
          this["_".concat(md.name)] = Bd;
          this.od.push(Bd);
        };

        this.Nb = function (Ab, Mc) {
          this.Cd = 0.0;
          this.Rb = 0.0;
          ctx.T(this.Ab, Ab ? Ab : [0, 0, 0]);
          ctx.U(this.Mc, Mc ? Mc : [0, 0, 0, 1]);
        };

        this.Nb(Ab, Mc);
        this.
        /**/
        model.qd(this); // IMPL

        this._presimNeeded = true;

        if (options.generatorsPaused) {
          this.
          /**/
          pauseGeneratorsInAllEmitters();
        }

        if (options.paused) {
          this.
          /**/
          pauseAllEmitters();
        } else {
          this.zeroUpdate();
          this.updateFixed(this.Ud, Ab, Mc, this.presimFrameTime);
          this._presimNeeded = false;
        }
      };
    };

    ke.prototype.
    /**/
    restart = function (
    /**/
    position,
    /**/
    rotation,
    /**/
    options) {
      this.Nb(
      /**/
      position ?
      /**/
      position : this.Ab,
      /**/
      rotation ?
      /**/
      rotation : this.Mc);
      this._presimNeeded = true;

      for (var i = 0; i < this.od.length; ++i) {
        this.od[i].Jd(this.Ab, this.Mc);
      }

      this._presimNeeded = true;

      if (options && options.generatorsPaused) {
        this.
        /**/
        pauseGeneratorsInAllEmitters();
      }

      if (options && options.paused) {
        this.
        /**/
        pauseAllEmitters();
      } else {
        this.zeroUpdate();
        this.updateFixed(this.Ud, this.Ab, this.Mc, this.presimFrameTime);
        this._presimNeeded = false;
      }
    };

    ke.prototype.zeroUpdate = function () {
      for (var i = 0; i < this.od.length; ++i) {
        this.od[i].Id(0, this.Ab, this.Mc);
      }
    };

    ke.prototype.
    /**/
    update = function (
    /**/
    dt,
    /**/
    position,
    /**/
    rotation) {
      if (this.Dd > 0.0) this.updateFixed(
      /**/
      dt,
      /**/
      position,
      /**/
      rotation, this.Dd);else this.updateFlex(
      /**/
      dt,
      /**/
      position,
      /**/
      rotation);
    };

    ke.prototype.updateFixed = function (
    /**/
    dt,
    /**/
    position,
    /**/
    rotation,
    /**/
    frameTime) {
      var updatedTime = 0.0;
      var hc = [];
      ctx.T(hc, this.Ab);
      var frameRotation = [];
      ctx.U(frameRotation, this.Mc);
      if (
      /**/
      position && ctx.equalv3_(
      /**/
      position, this.Ab))
        /**/
        position = null;
      if (
      /**/
      rotation && ctx.equalq_(
      /**/
      rotation, this.Mc))
        /**/
        rotation = null;

      while (
      /**/
      dt - updatedTime + this.Cd >=
      /**/
      frameTime) {
        var cc = this.Rb;
        if (
        /**/
        position) ctx.ab(hc, this.Ab,
        /**/
        position, updatedTime /
        /**/
        dt);
        if (
        /**/
        rotation) ctx.slerpq(frameRotation, this.Mc,
        /**/
        rotation, updatedTime /
        /**/
        dt);

        for (var i = 0; i < this.od.length; ++i) {
          this.od[i].Id(
          /**/
          frameTime, hc, frameRotation);
          this.Rb = cc;
        }

        updatedTime +=
        /**/
        frameTime - this.Cd;
        this.Cd = 0.0;
        this.Rb = cc +
        /**/
        frameTime;
      }

      if (
      /**/
      position) ctx.T(this.Ab,
      /**/
      position);
      if (
      /**/
      rotation) ctx.U(this.Mc,
      /**/
      rotation);
      this.Cd +=
      /**/
      dt - updatedTime;
    };

    ke.prototype.updateFlex = function (
    /**/
    dt,
    /**/
    position,
    /**/
    rotation) {
      var cc = this.Rb;

      for (var i = 0; i < this.od.length; ++i) {
        this.od[i].Id(
        /**/
        dt,
        /**/
        position,
        /**/
        rotation);
        this.Rb = cc;
      }

      this.Rb = cc +
      /**/
      dt;
      if (
      /**/
      position) ctx.T(this.Ab,
      /**/
      position);
      if (
      /**/
      rotation) ctx.U(this.Mc,
      /**/
      rotation);
    };

    ke.prototype.
    /**/
    resetPosition = function (
    /**/
    position,
    /**/
    rotation) {
      if (
      /**/
      position) ctx.T(this.Ab,
      /**/
      position);
      if (
      /**/
      rotation) ctx.U(this.Mc,
      /**/
      rotation);

      for (var i = 0; i < this.od.length; ++i) {
        this.od[i].Td(this.Ab, this.Mc);
      }
    };

    ke.prototype.
    /**/
    setPropertyInAllEmitters = function (
    /**/
    name,
    /**/
    value) {
      var propName = "_".concat(
      /**/
      name);

      if (
      /**/
      value instanceof Array) {
        if (
        /**/
        value.length == 2) {
          for (var i = 0; i < this.od.length; ++i) {
            ctx.S(this.od[i][propName],
            /**/
            value);
          }
        } else {
          for (var i = 0; i < this.od.length; ++i) {
            ctx.T(this.od[i][propName],
            /**/
            value);
          }
        }
      } else {
        for (var i = 0; i < this.od.length; ++i) {
          this.od[i][propName] =
          /**/
          value;
        }
      }
    };

    ke.prototype.
    /**/
    pauseAllEmitters = function () {
      for (var i = 0; i < this.od.length; ++i) {
        this.od[i].
        /**/
        pause();
      }
    };

    ke.prototype.
    /**/
    unpauseAllEmitters = function () {
      for (var i = 0; i < this.od.length; ++i) {
        this.od[i].
        /**/
        unpause();
      }

      this.zeroUpdate();

      if (this._presimNeeded) {
        this.updateFixed(this.Ud, this.Ab, this.Mc, this.presimFrameTime);
        this._presimNeeded = false;
      }
    };

    ke.prototype.
    /**/
    areAllEmittersPaused = function () {
      for (var i = 0; i < this.od.length; ++i) {
        if (!this.od[i].paused()) return false;
      }

      return true;
    };

    ke.prototype.
    /**/
    pauseGeneratorsInAllEmitters = function () {
      for (var i = 0; i < this.od.length; ++i) {
        this.od[i].
        /**/
        pauseGenerators();
      }
    };

    ke.prototype.
    /**/
    unpauseGeneratorsInAllEmitters = function () {
      for (var i = 0; i < this.od.length; ++i) {
        this.od[i].
        /**/
        unpauseGenerators();
      }
    };

    ke.prototype.
    /**/
    areGeneratorsInAllEmittersPaused = function () {
      for (var i = 0; i < this.od.length; ++i) {
        if (!this.od[i].generatorsPaused()) return false;
      }

      return true;
    };

    ke.prototype.
    /**/
    getNumParticles = function () {
      var numParticles = 0;

      for (var i = 0; i < this.od.length; ++i) {
        numParticles += this.od[i].getNumParticles();
      }

      return numParticles;
    };

    var le = function le() {
      this._init = function (we, Ab, Mc, renderBuffer, options) {
        le.prototype._init.call(this, we, Ab, Mc, oe, options);

        this.texturesRemap = [];
        var indices = [];
        {
          var verDisp;

          for (var Wb = 0; Wb < this.
          /**/
          model.Xe; ++Wb) {
            verDisp = Wb * 4;
            indices.push(verDisp + 0, verDisp + 3, verDisp + 1, verDisp + 1, verDisp + 3, verDisp + 2);
          }
        }
        this.renderBuffer = renderBuffer;
        this.renderBuffer.initialize(this.
        /**/
        model.Xe * 4, [2], indices, this.
        /**/
        model.Xe);
        this.renderBuffer.__numIndices = 0;
      };
    };

    le.prototype = new ke();

    le.prototype.
    /**/
    fillGeometryBuffers = function (
    /**/
    cameraRight,
    /**/
    cameraUp,
    /**/
    cameraDir) {
      this.renderBuffer.cleanup();
      this.renderBuffer.__lastRenderCall = null;
      this.od.forEach(function (Bd) {
        Bd.ue(
        /**/
        cameraRight,
        /**/
        cameraUp,
        /**/
        cameraDir, this.renderBuffer);
      }, this);
      if (this.renderBuffer.__lastRenderCall) this.renderBuffer.pushRenderCall(this.renderBuffer.__lastRenderCall);
    };

    var me = function me() {
      this._init = function (we, Ab, Mc, options) {
        me.prototype._init.call(this, we, Ab, Mc, ne, options);

        this.materials = [];
        this.
        /**/
        model.materials.forEach(function (value) {
          this.materials.push(['source-over', 'lighter', 'multiply'][value]);
        }, this);
        this.
        /**/
        textureDescs = [];
      };
    };

    me.prototype = new ke();

    me.prototype.
    /**/
    draw = function (
    /**/
    context,
    /**/
    camera) {
      for (var i = 0; i < this.od.length; ++i) {
        this.od[i].Hd(
        /**/
        context,
        /**/
        camera);
      }
    };

    this.createWGLInstance = function (
    /**/
    position,
    /**/
    rotation,
    /**/
    renderBuffer,
    /**/
    options) {
      var Ld = new le();

      Ld._init(this,
      /**/
      position,
      /**/
      rotation,
      /**/
      renderBuffer,
      /**/
      options || {});

      return Ld;
    };

    this.createCanvas2DInstance = function (
    /**/
    position,
    /**/
    rotation,
    /**/
    options) {
      var Ld = new me();

      Ld._init(this,
      /**/
      position,
      /**/
      rotation,
      /**/
      options || {});

      return Ld;
    };

    this.textures = ['fx/fireworks/sparks5x3_long.png', 'fx/fireworks/sparks2x3_violet.png'];
    this.materials = [1, 0];
    this.renderStyles = [{
      materialIndex: 0,
      textureIndices: [0]
    }, {
      materialIndex: 1,
      textureIndices: [1]
    }];
    this.Xe = 90600;

    function Emitter_Stripe_child() {
      var _1 = [],
          _5 = [],
          _7 = [],
          _9 = [],
          _10 = [],
          _10fs = [],
          _10vs = [],
          _10rw = [],
          _10rwn = [],
          _10rwl,
          _10v = [],
          _10p = [],
          _10dtl,
          _10dtp,
          _10df,
          _10fsd = [],
          _12 = [],
          _12i = [],
          _13,
          _11,
          _14,
          _15,
          _15i0,
          _15s0 = [],
          _16,
          _17,
          _17i0,
          _17s0 = [],
          _18,
          _18i0,
          _18s0 = [],
          _19;

      this.pe = [{
        xe: 1,
        Rc: 5,
        Sc: 3,
        renderStyleIndex: 0
      }];
      this.name = "Stripe_child";

      this.ud = function (Bd) {
        Bd._Rotation = [0, 0, 0, 1];
        Bd._Texture = 0;
        Bd.ed();
        Bd._15 = [[[0.48177, 0.934782, 0.982708, 0.96819, 0.923457, 0.860987, 0.787211, 0.706007, 0.619964, 0.530944, 0.440381, 0.349431, 0.259076, 0.170188, 0.0835716, 0, 0]]];
        Bd._17 = [[[1, 0, 0]]];
        Bd._18 = [[[0, 2.0657, 2.78929, 3.28572, 3.66181, 3.95916, 4.1992, 4.39469, 4.55401, 4.68298, 4.78584, 4.86582, 4.92541, 4.96661, 4.99103, 5, 5]]];
        Bd.jd = 300;
        Bd.Vc = 0;
      };

      this.Mb = function (vd) {
        vd.rd = 1;
        vd.Gb = 1;
        vd.Jb = 1;
      };

      this.Pb = function (Qb, Bd, vd) {
        vd.rd = 1;
      };

      this.fd = function (Bd, Xb) {
        Xb.Mc = [];
        Xb._ = 0.0;
        ctx.W(_1, 0, 0, 0);
        Xb._2 = [];
        ctx.c(Xb._2, Bd.Ab, _1);
        Xb._3 = 0;
        Xb._4 = [];
        ctx.U(Xb._4, Bd._Rotation);
        ctx.randv3gen(_5, 1, Bd.Ld.rand);
        Xb._6 = [];
        ctx.T(Xb._6, _5);
        ctx.randv3gen(_7, 10, Bd.Ld.rand);
        Xb._8 = [];
        ctx.T(Xb._8, _7);
        ctx.T(Xb.Ab, Xb._2);
      };

      this.gd = function (Bd, Xb) {
        Xb.Mc = [];
        Xb._ = 0.0;
        ctx.W(_1, 0, 0, 0);
        Xb._2 = [];
        ctx.c(Xb._2, Bd.Ab, _1);
        Xb._3 = 0;
        Xb._4 = [];
        ctx.U(Xb._4, Bd._Rotation);
        ctx.randv3gen(_5, 1, Bd.Ld.rand);
        Xb._6 = [];
        ctx.T(Xb._6, _5);
        ctx.randv3gen(_7, 10, Bd.Ld.rand);
        Xb._8 = [];
        ctx.T(Xb._8, _7);
        ctx.T(Xb.Ab, Xb._2);
      };

      this.qc = function (Qb, Bd, Xb) {
        Xb._ += Qb;
        ctx.W(_9, 0, 50, 0);
        ctx.T(_10fs, _9);
        ctx.T(_10vs, [0, 0, 0]);
        _10dtl = Qb;
        ctx.T(_10v, Xb._8);
        ctx.T(_10p, Xb._2);

        while (_10dtl > 0.0001) {
          _10dtp = _10dtl;
          ctx.T(_10fsd, _10fs);
          ctx.g(_10rw, _10vs, _10v);
          _10rwl = ctx.P(_10rw);

          if (_10rwl > 0.0001) {
            _10rwl = Math.sqrt(_10rwl);
            ctx.w(_10rwn, _10rw, _10rwl);
            _10df = 0.01 * 1 * _10rwl;
            if (_10df * _10dtp > 0.2) _10dtp = 0.2 / _10df;
            ctx.c(_10fsd, _10fsd, ctx.v(_10rwn, _10rwl * _10df));
          }

          ctx.c(_10v, _10v, ctx.v(_10fsd, _10dtp));
          ctx.c(_10p, _10p, ctx.v(_10v, _10dtp));
          _10dtl -= _10dtp;
        }

        ctx.T(Xb._2, _10p);
        ctx.T(Xb._8, _10v);
        ctx.T(Xb.Ab, Xb._2);
        ctx.Q(_12i, Xb._6);
        ctx.qb(_12, _12i, Xb._3);
        _13 = 7;
        _11 = 1;
        _14 = Xb._ / _11;
        _15i0 = _14 < 0 ? 0 : _14 > 1 ? 1 : _14;
        ctx.V(_15s0, 0, (_15i0 - 0) * 15);
        _15 = Db.nb(Bd._15[0][_15s0[0]], _15s0[1]);
        _16 = _13 * _15;
        _17i0 = _14 < 0 ? 0 : _14 > 1 ? 1 : _14;
        ctx.V(_17s0, 0, (_17i0 - 0) * 1);
        _17 = Db.nb(Bd._17[0][_17s0[0]], _17s0[1]);
        _18i0 = _14 < 0 ? 0 : _14 > 1 ? 0 + (_14 - 0) % 1 : _14;
        ctx.V(_18s0, 0, (_18i0 - 0) * 15);
        _18 = Db.nb(Bd._18[0][_18s0[0]], _18s0[1]);
        _19 = Bd._Texture * 5 + _18;
        ctx.S(Xb.Pd, [0.5, 0.5]);
        ctx.U(Xb.Mc, _12);
        ctx.V(Xb.Nd, _16, _16);
        ctx.T(Xb.gf, [1, 1, 1]);
        Xb.Od = _17;
        Xb.Qc = _19 < 0 ? 0 : _19 >= 15 ? 14 : _19;
      };

      this.Cc = function (Bd, Xb, Wc) {
        _11 = 1;
        if (Xb._ > _11) return true;
        return false;
      };
    }

    function Emitter_Stripe_parent() {
      var _1 = [],
          _3,
          _5 = [],
          _7 = [],
          _7x = [],
          _7y = [],
          _7z = [],
          _8,
          _8i0,
          _8s0 = [],
          _9 = [],
          _10 = [],
          _10fs = [],
          _10vs = [],
          _10rw = [],
          _10rwn = [],
          _10rwl,
          _10v = [],
          _10p = [],
          _10dtl,
          _10dtp,
          _10df,
          _10fsd = [],
          _11;

      this.pe = [];
      this.name = "Stripe_parent";

      this.ud = function (Bd) {
        Bd._Texture = 0;
        Bd.dd();
        Bd.uc(new Emitter_Stripe_child(), {
          xc: 1,
          sd: false
        });
        Bd._8 = [[[0, 0.0314964, 0.136246, 0.328507, 0.59644, 0.890682, 1.16035, 1.38407, 1.56152, 1.69908, 1.80373, 1.88132, 1.93649, 1.97287, 1.9933, 2, 2]]];
        Bd.jd = 100;
        Bd.Vc = 0;
      };

      this.Mb = function (vd) {
        vd.zb = 5;
        vd.Gb = 0.94;
        vd.Jb = 60;
        vd.Ib = 1;
      };

      this.Pb = function (Qb, Bd, vd) {
        vd.zb = 5;
      };

      this.fd = function (Bd, Xb) {
        Xb._ = 0.0;
        ctx.W(_1, 0, -0, 0);
        Xb._2 = [];
        ctx.rb(Xb._2, _1, Bd.Mc);
        ctx.c(Xb._2, Bd.Ab, Xb._2);
        _3 = 0 + Bd.Ld.rand() * (5 - 0);
        Xb._4 = _3;
        ctx.randv3gen(_5, 1000, Bd.Ld.rand);
        Xb._6 = [];
        ctx.rb(Xb._6, _5, Bd.Mc);
        ctx.c(Xb._6, Bd.ad, Xb._6);
        ctx.T(Xb.Ab, Xb._2);
        ctx.Q(_7z, [0, 0, 1]);
        ctx.I(_7x, Xb._6, _7z);
        ctx.Q(_7x, _7x);
        ctx.I(_7y, _7z, _7x);
        ctx.pb(_7, _7x, _7y, _7z);
        Xb.pc(0)._Rotation = _7;
        Xb.pc(0)._Texture = Bd._Texture;
      };

      this.gd = function (Bd, Xb) {
        Xb._ = 0.0;
        ctx.W(_1, 0, -0, 0);
        Xb._2 = [];
        ctx.rb(Xb._2, _1, Bd.Mc);
        ctx.c(Xb._2, Bd.Ab, Xb._2);
        _3 = 0 + Bd.Ld.rand() * (5 - 0);
        Xb._4 = _3;
        ctx.randv3gen(_5, 1000, Bd.Ld.rand);
        Xb._6 = [];
        ctx.rb(Xb._6, _5, Bd.Mc);
        ctx.c(Xb._6, Bd.ad, Xb._6);
        ctx.T(Xb.Ab, Xb._2);
        ctx.Q(_7z, [0, 0, 1]);
        ctx.I(_7x, Xb._6, _7z);
        ctx.Q(_7x, _7x);
        ctx.I(_7y, _7z, _7x);
        ctx.pb(_7, _7x, _7y, _7z);
        Xb.pc(0)._Rotation = _7;
        Xb.pc(0)._Texture = Bd._Texture;
      };

      this.qc = function (Qb, Bd, Xb) {
        Xb._ += Qb;
        _8i0 = Bd.Rb < 0 ? 0 : Bd.Rb > 1 ? 1 : Bd.Rb;
        ctx.V(_8s0, 0, (_8i0 - 0) * 15);
        _8 = Db.nb(Bd._8[0][_8s0[0]], _8s0[1]);
        ctx.W(_9, 0, 100, 0);
        ctx.T(_10fs, _9);
        ctx.T(_10vs, [0, 0, 0]);
        _10dtl = Qb;
        ctx.T(_10v, Xb._6);
        ctx.T(_10p, Xb._2);

        while (_10dtl > 0.0001) {
          _10dtp = _10dtl;
          ctx.T(_10fsd, _10fs);
          ctx.g(_10rw, _10vs, _10v);
          _10rwl = ctx.P(_10rw);

          if (_10rwl > 0.0001) {
            _10rwl = Math.sqrt(_10rwl);
            ctx.w(_10rwn, _10rw, _10rwl);
            _10df = 0.01 * _8 * _10rwl;
            if (_10df * _10dtp > 0.2) _10dtp = 0.2 / _10df;
            ctx.c(_10fsd, _10fsd, ctx.v(_10rwn, _10rwl * _10df));
          }

          ctx.c(_10v, _10v, ctx.v(_10fsd, _10dtp));
          ctx.c(_10p, _10p, ctx.v(_10v, _10dtp));
          _10dtl -= _10dtp;
        }

        ctx.T(Xb._2, _10p);
        ctx.T(Xb._6, _10v);
        ctx.T(Xb.Ab, Xb._2);
        ctx.Q(_7z, [0, 0, 1]);
        ctx.I(_7x, Xb._6, _7z);
        ctx.Q(_7x, _7x);
        ctx.I(_7y, _7z, _7x);
        ctx.pb(_7, _7x, _7y, _7z);
        Xb.pc(0)._Rotation = _7;
        Xb.pc(0)._Texture = Bd._Texture;
      };

      this.Cc = function (Bd, Xb, Wc) {
        _11 = 1;
        if (Xb._ > _11) return true;
        return false;
      };
    }

    function Emitter_Sparks() {
      var _,
          _i0,
          _s0 = [],
          _2 = [],
          _4,
          _6,
          _8,
          _10,
          _12 = [],
          _14 = [],
          _15,
          _16,
          _17,
          _17i0,
          _17s0 = [],
          _18,
          _19;

      this.pe = [{
        xe: 0,
        Rc: 2,
        Sc: 3,
        renderStyleIndex: 1
      }];
      this.name = "Sparks";

      this.ud = function (Bd) {
        Bd._Texture = 0;
        Bd._ = [[[0, 0, 0], [2, 2, 2]]];
        Bd.dd();
        Bd._17 = [[[0, 0.149709, 0.460975, 0.803237, 1.08303, 1.29919, 1.46717, 1.59926, 1.7039, 1.7869, 1.85236, 1.90328, 1.94194, 1.97007, 1.98906, 2, 2], [2, 1.66994, 1.37363, 1.11535, 0.895215, 0.710443, 0.556908, 0.430206, 0.326245, 0.241465, 0.172875, 0.118, 0.0748067, 0.0416215, 0.0170665, 0, 0], [0, 0.822571, 0.822571], [0.822571, 0.230368, 0.230368], [0.230368, 0.7, 0.7], [0.7, 0, 0], [0, 0.6, 0.6], [0.6, 0, 0]]];
        Bd.jd = 100;
        Bd.Vc = 0;
      };

      this.Mb = function (vd) {
        vd.zb = 5;
        vd.Gb = 1;
        vd.Jb = 100;
        vd.Ib = 1;
      };

      this.Pb = function (Qb, Bd, vd) {
        _i0 = Bd.Rb < 0 ? 0 : Bd.Rb > 2 ? 2 : Bd.Rb;
        _i0 < 0.9 ? ctx.V(_s0, 0, (_i0 - 0) * 1.11111) : ctx.V(_s0, 1, (_i0 - 0.9) * 0.909091);
        _ = Db.nb(Bd._[0][_s0[0]], _s0[1]);
        vd.zb = _;
      };

      this.fd = function (Bd, Xb) {
        Xb._1 = 0.0;
        ctx.randv3gen(_2, 300, Bd.Ld.rand);
        Xb._3 = [];
        ctx.rb(Xb._3, _2, Bd.Mc);
        ctx.c(Xb._3, Bd.Ab, Xb._3);
        _4 = 0 + Bd.Ld.rand() * (360 - 0);
        Xb._5 = _4;
        _6 = 0 + Bd.Ld.rand() * (2 - 0);
        Xb._7 = _6;
        _8 = 20 + Bd.Ld.rand() * (40 - 20);
        Xb._9 = _8;
        _10 = 1.5 + Bd.Ld.rand() * (3 - 1.5);
        Xb._11 = _10;
        ctx.W(_12, 0, 20, 0);
        Xb._13 = [];
        ctx.rb(Xb._13, _12, Bd.Mc);
        ctx.c(Xb._13, Bd.ad, Xb._13);
        ctx.T(Xb.Ab, Xb._3);
      };

      this.gd = function (Bd, Xb) {
        Xb._1 = 0.0;
        ctx.randv3gen(_2, 300, Bd.Ld.rand);
        Xb._3 = [];
        ctx.rb(Xb._3, _2, Bd.Mc);
        ctx.c(Xb._3, Bd.Ab, Xb._3);
        _4 = 0 + Bd.Ld.rand() * (360 - 0);
        Xb._5 = _4;
        _6 = 0 + Bd.Ld.rand() * (2 - 0);
        Xb._7 = _6;
        _8 = 20 + Bd.Ld.rand() * (40 - 20);
        Xb._9 = _8;
        _10 = 1.5 + Bd.Ld.rand() * (3 - 1.5);
        Xb._11 = _10;
        ctx.W(_12, 0, 20, 0);
        Xb._13 = [];
        ctx.rb(Xb._13, _12, Bd.Mc);
        ctx.c(Xb._13, Bd.ad, Xb._13);
        ctx.T(Xb.Ab, Xb._3);
      };

      this.qc = function (Qb, Bd, Xb) {
        Xb._1 += Qb;
        ctx.T(_14, Xb._13);
        ctx.u(_14, _14, Qb);
        ctx.c(_14, _14, Xb._3);
        ctx.T(Xb._3, _14);
        _15 = Xb._5 + Qb * 90;
        Xb._5 = _15;
        ctx.T(Xb.Ab, Xb._3);
        _16 = Xb._1 / Xb._11;
        _17i0 = _16 < 0 ? 0 : _16 > 1 ? 1 : _16;
        _17i0 < 0.744689 ? _17i0 < 0.6 ? _17i0 < 0.0577704 ? ctx.V(_17s0, 0, (_17i0 - 0) * 259.648) : ctx.V(_17s0, 1, (_17i0 - 0.0577704) * 27.6636) : _17i0 < 0.631187 ? ctx.V(_17s0, 2, (_17i0 - 0.6) * 32.0646) : ctx.V(_17s0, 3, (_17i0 - 0.631187) * 8.81045) : _17i0 < 0.9 ? _17i0 < 0.772 ? ctx.V(_17s0, 4, (_17i0 - 0.744689) * 36.6147) : ctx.V(_17s0, 5, (_17i0 - 0.772) * 7.8125) : _17i0 < 0.942044 ? ctx.V(_17s0, 6, (_17i0 - 0.9) * 23.7848) : ctx.V(_17s0, 7, (_17i0 - 0.942044) * 17.2544);
        _17 = Db.nb(Bd._17[0][_17s0[0]], _17s0[1]);
        _18 = Xb._9 * _17;
        _19 = Bd._Texture * 2 + Xb._7;
        ctx.S(Xb.Pd, [0.5, 0.5]);
        Xb.Md = Xb._5;
        ctx.V(Xb.Nd, _18, _18);
        ctx.T(Xb.gf, [1, 1, 1]);
        Xb.Od = 1;
        Xb.Qc = _19 < 0 ? 0 : _19 >= 6 ? 5 : _19;
      };

      this.Cc = function (Bd, Xb, Wc) {
        if (Xb._1 > Xb._11) return true;
        return false;
      };
    }

    function Emitter_Splash() {
      var _1 = [],
          _5,
          _4,
          _6,
          _7,
          _7i0,
          _7s0 = [],
          _8,
          _9;

      this.pe = [{
        xe: 0,
        Rc: 5,
        Sc: 3,
        renderStyleIndex: 0
      }];
      this.name = "Splash";

      this.ud = function (Bd) {
        Bd.dd();
        Bd._7 = [[[0, 1, 1], [1, 0.990835, 0.969351, 0.938093, 0.898586, 0.851781, 0.798265, 0.738368, 0.672217, 0.599762, 0.520766, 0.43479, 0.341128, 0.238703, 0.125869, 0, 0]]];
        Bd.jd = 100;
        Bd.Vc = 0;
      };

      this.Mb = function (vd) {
        vd.zb = 5;
        vd.Gb = 1;
        vd.Jb = 1;
        vd.Ib = 1;
      };

      this.Pb = function (Qb, Bd, vd) {
        vd.zb = 5;
      };

      this.fd = function (Bd, Xb) {
        Xb._ = 0.0;
        ctx.W(_1, 0, 0, 0);
        Xb._2 = [];
        ctx.rb(Xb._2, _1, Bd.Mc);
        ctx.c(Xb._2, Bd.Ab, Xb._2);
        Xb._3 = 0;
        ctx.T(Xb.Ab, Xb._2);
      };

      this.gd = function (Bd, Xb) {
        Xb._ = 0.0;
        ctx.W(_1, 0, 0, 0);
        Xb._2 = [];
        ctx.rb(Xb._2, _1, Bd.Mc);
        ctx.c(Xb._2, Bd.Ab, Xb._2);
        Xb._3 = 0;
        ctx.T(Xb.Ab, Xb._2);
      };

      this.qc = function (Qb, Bd, Xb) {
        Xb._ += Qb;
        ctx.T(Xb.Ab, Xb._2);
        _5 = 300;
        _4 = 0.3;
        _6 = Xb._ / _4;
        _7i0 = _6 < 0 ? 0 : _6 > 1 ? 1 : _6;
        _7i0 < 0.1 ? ctx.V(_7s0, 0, (_7i0 - 0) * 10) : ctx.V(_7s0, 1, (_7i0 - 0.1) * 16.6667);
        _7 = Db.nb(Bd._7[0][_7s0[0]], _7s0[1]);
        _8 = _5 * _7;
        _9 = 0;
        ctx.S(Xb.Pd, [0.5, 0.5]);
        Xb.Md = Xb._3;
        ctx.V(Xb.Nd, _8, _8);
        ctx.T(Xb.gf, [1, 1, 1]);
        Xb.Od = 1;
        Xb.Qc = _9 < 0 ? 0 : _9 >= 15 ? 14 : _9;
      };

      this.Cc = function (Bd, Xb, Wc) {
        _4 = 0.3;
        if (Xb._ > _4) return true;
        return false;
      };
    }

    function Emitter_Fireworks_parent() {
      var _,
          _i0,
          _s0 = [],
          _2,
          _3 = [],
          _3i,
          _3s = [],
          _4 = [],
          _4i,
          _4s = [],
          _5,
          _6 = [],
          _7 = [],
          _10,
          _11,
          _11i0,
          _11s0 = [],
          _13;

      this.pe = [];
      this.name = "Fireworks_parent";

      this.ud = function (Bd) {
        Bd._ = [[[1.47301, 1.47301, 1.47301], [0, 0, 0]]];
        Bd.dd();
        Bd._3 = [[[-383.168, 98.272], [-383.168, -101.728], [-383.168, -101.728]]];
        Bd._4 = [[[405.632, 91.36], [405.632, -108.64], [405.632, -108.64]]];
        Bd._11 = [[[0, 0, 0], [1, 1, 1], [2, 2, 2]]];
        Bd.uc(new Emitter_Stripe_parent(), {
          xc: 1,
          sd: false
        });
        Bd.uc(new Emitter_Sparks(), {
          xc: 1,
          sd: false
        });
        Bd.uc(new Emitter_Splash(), {
          xc: 1,
          sd: false
        });
        Bd.jd = 3;
        Bd.Vc = 0;
      };

      this.Mb = function (vd) {
        vd.zb = 5;
        vd.Gb = 1;
        vd.Jb = 1;
      };

      this.Pb = function (Qb, Bd, vd) {
        _i0 = Bd.Ld.Rb < 0 ? 0 : Bd.Ld.Rb > 5.99432 ? 0 + (Bd.Ld.Rb - 0) % 5.99432 : Bd.Ld.Rb;
        _i0 < 1.50077 ? ctx.V(_s0, 0, (_i0 - 0) * 0.666323) : ctx.V(_s0, 1, (_i0 - 1.50077) * 0.222541);
        _ = Db.nb(Bd._[0][_s0[0]], _s0[1]);
        vd.zb = _;
      };

      this.fd = function (Bd, Xb) {
        Xb._1 = 0.0;
        _2 = 0 + Bd.Ld.rand() * (1 - 0);
        _3i = Db.kb(_2);
        ctx.V(_3s, 0, (_3i - 0) * 1);
        Db.lb(_3, Bd._3[_3s[0]], _3s[1]);
        _4i = Db.kb(_2);
        ctx.V(_4s, 0, (_4i - 0) * 1);
        Db.lb(_4, Bd._4[_4s[0]], _4s[1]);
        _5 = 0 + Bd.Ld.rand() * (1 - 0);
        ctx.Y(_6, _3, _4, _5);
        ctx.W(_7, _6[0], _6[1], 0);
        Xb._8 = [];
        ctx.rb(Xb._8, _7, Bd.Mc);
        ctx.c(Xb._8, Bd.Ab, Xb._8);
        Xb._9 = 0;
        _10 = 0 + Bd.Ld.rand() * (1 - 0);
        _11i0 = _10 < 0 ? 0 : _10 > 1 ? 1 : _10;
        _11i0 < 0.710626 ? _11i0 < 0.388302 ? ctx.V(_11s0, 0, (_11i0 - 0) * 2.57531) : ctx.V(_11s0, 1, (_11i0 - 0.388302) * 3.10247) : ctx.V(_11s0, 2, (_11i0 - 0.710626) * 3.45573);
        _11 = Db.nb(Bd._11[0][_11s0[0]], _11s0[1]);
        Xb._12 = _11;
        ctx.T(Xb.Ab, Xb._8);
        Xb.pc(0)._Texture = Xb._12;
        Xb.pc(1)._Texture = Xb._12;
      };

      this.gd = function (Bd, Xb) {
        Xb._1 = 0.0;
        _2 = 0 + Bd.Ld.rand() * (1 - 0);
        _3i = Db.kb(_2);
        ctx.V(_3s, 0, (_3i - 0) * 1);
        Db.lb(_3, Bd._3[_3s[0]], _3s[1]);
        _4i = Db.kb(_2);
        ctx.V(_4s, 0, (_4i - 0) * 1);
        Db.lb(_4, Bd._4[_4s[0]], _4s[1]);
        _5 = 0 + Bd.Ld.rand() * (1 - 0);
        ctx.Y(_6, _3, _4, _5);
        ctx.W(_7, _6[0], _6[1], 0);
        Xb._8 = [];
        ctx.rb(Xb._8, _7, Bd.Mc);
        ctx.c(Xb._8, Bd.Ab, Xb._8);
        Xb._9 = 0;
        _10 = 0 + Bd.Ld.rand() * (1 - 0);
        _11i0 = _10 < 0 ? 0 : _10 > 1 ? 1 : _10;
        _11i0 < 0.710626 ? _11i0 < 0.388302 ? ctx.V(_11s0, 0, (_11i0 - 0) * 2.57531) : ctx.V(_11s0, 1, (_11i0 - 0.388302) * 3.10247) : ctx.V(_11s0, 2, (_11i0 - 0.710626) * 3.45573);
        _11 = Db.nb(Bd._11[0][_11s0[0]], _11s0[1]);
        Xb._12 = _11;
        ctx.T(Xb.Ab, Xb._8);
        Xb.pc(0)._Texture = Xb._12;
        Xb.pc(1)._Texture = Xb._12;
      };

      this.qc = function (Qb, Bd, Xb) {
        Xb._1 += Qb;
        ctx.T(Xb.Ab, Xb._8);
        Xb.pc(0)._Texture = Xb._12;
        Xb.pc(1)._Texture = Xb._12;
      };

      this.Cc = function (Bd, Xb, Wc) {
        _13 = 2;
        if (Xb._1 > _13) return true;
        return false;
      };
    }

    this.qd = function (Ld) {
      Ld.Dd = 0.0333333;
      Ld.Ud = 0;
      Ld.presimFrameTime = 0.1;

      Ld.rand = function () {
        return Math.random();
      };

      Ld.pd(new Emitter_Fireworks_parent());
    };

    this.kb = function (v) {
      return v < 0 ? 0 : v > 1 ? 1 : v;
    };

    this.lb = function (r, path, je) {
      var indexInt = Math.floor(je);
      var lerp = je - indexInt;
      ctx.Y(r, path[indexInt], path[indexInt + 1], lerp);
    };

    this.nb = function (funcValues, je) {
      var indexInt = Math.floor(je);
      var nextInt = indexInt + 1;
      return ctx.X(funcValues[indexInt], funcValues[nextInt], je - indexInt);
    };
  }

  return Fireworks01;
});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcbmV1dHJpbm9wYXJ0aWNsZXNcXGV4cG9ydGVkX2VmZmVjdHNcXEZpcmV3b3JrczAxLmpzIl0sIm5hbWVzIjpbInJvb3QiLCJmYWN0b3J5IiwiZXhwb3J0cyIsIm1vZHVsZSIsImRlZmluZSIsImFtZCIsIk5ldXRyaW5vRWZmZWN0IiwibmFtZXNwYWNlIiwiX19sYXN0X18iLCJzZWxmIiwiRmlyZXdvcmtzMDEiLCJjdHgiLCJEYiIsIm5lIiwiTGQiLCJCZCIsIndlIiwicGUiLCJsZW5ndGgiLCJMYyIsInByb3RvdHlwZSIsIkVjIiwiRmMiLCJ4ZSIsImZlIiwiQWIiLCJYYiIsIkdjIiwiaWIiLCJNZCIsIkhjIiwiTWF0aCIsImNvcyIsIkljIiwic2luIiwieWUiLCJBZSIsIk5kIiwiemUiLCJ0cmFuc2Zvcm0iLCJxIiwiTWMiLCJ6MiIsInh5Iiwid3oiLCJQYyIsImdlIiwidmMiLCJCZSIsIm9jIiwiT2QiLCJEZSIsImZsb29yIiwiUWMiLCJSYyIsIkVlIiwic2xpY2UiLCJkZiIsImFicyIsImVmIiwic2F2ZSIsInRyYW5zbGF0ZSIsIlBkIiwiZ2xvYmFsQWxwaGEiLCJnZiIsIlllIiwiVGMiLCJaZSIsIlVjIiwiYWYiLCJiZiIsImdsb2JhbENvbXBvc2l0ZU9wZXJhdGlvbiIsImRyYXdJbWFnZSIsImltYWdlIiwieCIsInkiLCJmaWxsU3R5bGUiLCJmZiIsImZpbGxSZWN0IiwiY2YiLCJyZXN0b3JlIiwiSGQiLCJtYXRlcmlhbHMiLCJtb2RlbCIsInJlbmRlclN0eWxlcyIsInJlbmRlclN0eWxlSW5kZXgiLCJtYXRlcmlhbEluZGV4IiwidGV4dHVyZURlc2NzIiwidGV4dHVyZUluZGljZXMiLCJ3aWR0aCIsImhlaWdodCIsIlNjIiwia2QiLCJhIiwiYiIsIlZjIiwiV2IiLCJ0YyIsInNvcnQiLCJvZSIsInZlcnRleCIsInBvc2l0aW9uIiwiY29sb3IiLCJ0ZXhDb29yZHMiLCJxZSIsInNlIiwicmUiLCJ0ZSIsInJlbmRlckJ1ZmZlciIsIkNlIiwidjAiLCJ2MSIsInYyIiwidjMiLCJGZSIsIkdlIiwicyIsImMiLCJIZSIsIkllIiwiSmUiLCJLZSIsInUiLCJyZ2IiLCJ2IiwiUGUiLCJRZSIsIlJlIiwiU2UiLCJXZSIsInRleHR1cmVzUmVtYXAiLCJVZSIsIlZlIiwiYmVmb3JlUXVhZCIsInB1c2hWZXJ0ZXgiLCJfX2xhc3RSZW5kZXJDYWxsIiwiUmVuZGVyQ2FsbCIsImxhc3RSZW5kZXJDYWxsIiwibnVtSW5kaWNlcyIsInB1c2hSZW5kZXJDYWxsIiwic3RhcnRJbmRleCIsInVlIiwiZm9yRWFjaCIsImRlcHRoIiwiSCIsImxkIiwidmUiLCJWYiIsIkViIiwiRmIiLCJHYiIsIkhiIiwiSWIiLCJLYiIsIkxiIiwiTWIiLCJOYiIsIk9iIiwiSmQiLCJJZCIsIlFiIiwiUGIiLCJSYiIsInN5c3RlbVRpbWUiLCJTYiIsImljIiwiemIiLCJUYiIsIlViIiwiZGlzYWN0aXZhdGUiLCJhYiIsIkJiIiwic2xlcnBxIiwicHJldlJvdGF0aW9uIiwiSmIiLCJzYyIsInBvcCIsInVuc2hpZnQiLCJZYiIsIlpiIiwiVCIsIlUiLCJhYyIsImJjIiwiY2MiLCJkYyIsInN5c3RlbVRpbWVCZWZvcmVGcmFtZSIsInN5c3RlbVRpbWVBZnRlckZyYW1lIiwiZWMiLCJPIiwiaCIsImZjIiwicmQiLCJoYyIsImpjIiwia2MiLCJYIiwibWMiLCJLYyIsIm5jIiwiaSIsInBjIiwiQWQiLCJzZCIsImZkIiwiZ2QiLCJxYyIsInJjIiwiamUiLCJ1YyIsIm1kIiwibmQiLCJwdXNoIiwieGMiLCJ3YyIsImFjdGl2YXRlIiwieWMiLCJHZCIsIkVkIiwiemMiLCJBYyIsIkNjIiwiV2MiLCJjb25zdHJ1Y3QiLCJZYyIsImFkIiwiZGQiLCJ2ZCIsImVkIiwidWQiLCJqZCIsImlkIiwiaGQiLCJ3ZCIsIlpjIiwicGF1c2VkXyIsImdlbmVyYXRvcnNQYXVzZWRfIiwiVyIsImFwcGx5IiwiVGQiLCJzaGlmdCIsImciLCJ3IiwieGQiLCJyZWFkeSIsImFjdGl2YXRlZCIsInNwbGljZSIsInBhdXNlIiwidW5wYXVzZSIsInBhdXNlZCIsInBhdXNlR2VuZXJhdG9ycyIsInVucGF1c2VHZW5lcmF0b3JzIiwiZ2VuZXJhdG9yc1BhdXNlZCIsImdldE51bVBhcnRpY2xlcyIsImtlIiwiQ2IiLCJfaW5pdCIsIm9wdGlvbnMiLCJvZCIsInBkIiwiY29uY2F0IiwibmFtZSIsIkNkIiwicWQiLCJfcHJlc2ltTmVlZGVkIiwicGF1c2VHZW5lcmF0b3JzSW5BbGxFbWl0dGVycyIsInBhdXNlQWxsRW1pdHRlcnMiLCJ6ZXJvVXBkYXRlIiwidXBkYXRlRml4ZWQiLCJVZCIsInByZXNpbUZyYW1lVGltZSIsInJlc3RhcnQiLCJyb3RhdGlvbiIsInVwZGF0ZSIsImR0IiwiRGQiLCJ1cGRhdGVGbGV4IiwiZnJhbWVUaW1lIiwidXBkYXRlZFRpbWUiLCJmcmFtZVJvdGF0aW9uIiwiZXF1YWx2M18iLCJlcXVhbHFfIiwicmVzZXRQb3NpdGlvbiIsInNldFByb3BlcnR5SW5BbGxFbWl0dGVycyIsInZhbHVlIiwicHJvcE5hbWUiLCJBcnJheSIsIlMiLCJ1bnBhdXNlQWxsRW1pdHRlcnMiLCJhcmVBbGxFbWl0dGVyc1BhdXNlZCIsInVucGF1c2VHZW5lcmF0b3JzSW5BbGxFbWl0dGVycyIsImFyZUdlbmVyYXRvcnNJbkFsbEVtaXR0ZXJzUGF1c2VkIiwibnVtUGFydGljbGVzIiwibGUiLCJjYWxsIiwiaW5kaWNlcyIsInZlckRpc3AiLCJYZSIsImluaXRpYWxpemUiLCJfX251bUluZGljZXMiLCJmaWxsR2VvbWV0cnlCdWZmZXJzIiwiY2FtZXJhUmlnaHQiLCJjYW1lcmFVcCIsImNhbWVyYURpciIsImNsZWFudXAiLCJtZSIsImRyYXciLCJjb250ZXh0IiwiY2FtZXJhIiwiY3JlYXRlV0dMSW5zdGFuY2UiLCJjcmVhdGVDYW52YXMyREluc3RhbmNlIiwidGV4dHVyZXMiLCJFbWl0dGVyX1N0cmlwZV9jaGlsZCIsIl8xIiwiXzUiLCJfNyIsIl85IiwiXzEwIiwiXzEwZnMiLCJfMTB2cyIsIl8xMHJ3IiwiXzEwcnduIiwiXzEwcndsIiwiXzEwdiIsIl8xMHAiLCJfMTBkdGwiLCJfMTBkdHAiLCJfMTBkZiIsIl8xMGZzZCIsIl8xMiIsIl8xMmkiLCJfMTMiLCJfMTEiLCJfMTQiLCJfMTUiLCJfMTVpMCIsIl8xNXMwIiwiXzE2IiwiXzE3IiwiXzE3aTAiLCJfMTdzMCIsIl8xOCIsIl8xOGkwIiwiXzE4czAiLCJfMTkiLCJfUm90YXRpb24iLCJfVGV4dHVyZSIsIl8iLCJfMiIsIl8zIiwiXzQiLCJyYW5kdjNnZW4iLCJyYW5kIiwiXzYiLCJfOCIsIlAiLCJzcXJ0IiwiUSIsInFiIiwiViIsIm5iIiwiRW1pdHRlcl9TdHJpcGVfcGFyZW50IiwiXzd4IiwiXzd5IiwiXzd6IiwiXzhpMCIsIl84czAiLCJyYiIsIkkiLCJwYiIsIkVtaXR0ZXJfU3BhcmtzIiwiX2kwIiwiX3MwIiwiRW1pdHRlcl9TcGxhc2giLCJfN2kwIiwiXzdzMCIsIkVtaXR0ZXJfRmlyZXdvcmtzX3BhcmVudCIsIl8zaSIsIl8zcyIsIl80aSIsIl80cyIsIl8xMWkwIiwiXzExczAiLCJrYiIsImxiIiwiWSIsInJhbmRvbSIsInIiLCJwYXRoIiwiaW5kZXhJbnQiLCJsZXJwIiwiZnVuY1ZhbHVlcyIsIm5leHRJbnQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFHQyxXQUFVQSxJQUFWLEVBQWdCQyxPQUFoQixFQUF5QjtBQUN0QixNQUFJLE9BQU9DLE9BQVAsS0FBbUIsUUFBbkIsSUFBK0IsT0FBT0MsTUFBUCxLQUFrQixXQUFyRCxFQUFrRTtBQUM5REEsSUFBQUEsTUFBTSxDQUFDRCxPQUFQLEdBQWlCRCxPQUFPLEVBQXhCO0FBQ0gsR0FGRCxNQUVPLElBQUksT0FBT0csTUFBUCxLQUFrQixVQUFsQixJQUFnQ0EsTUFBTSxDQUFDQyxHQUEzQyxFQUFnRDtBQUNuREQsSUFBQUEsTUFBTSxDQUFDLENBQUMsU0FBRCxDQUFELEVBQWMsVUFBVUYsT0FBVixFQUFtQjtBQUNuQyxPQUFDRixJQUFJLENBQUNNLGNBQUwsR0FBc0JKLE9BQXZC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QUFOLEVBQVNDLElBQUksQ0FBQ0MsUUFBRCxDQUFiLEVBQXlCRCxJQUFJLENBQUNDLFFBQVEsR0FBRyxDQUFaLENBQTdCLEVBQTZDQyxJQUE3QztBQUF1RCxLQUE1Sjs7QUFFQSxTQUFLOUIsRUFBTCxHQUFVLFVBQVMrQixVQUFULEVBQXFCdkwsRUFBckIsRUFBeUI7QUFBSyxVQUFJcUwsUUFBUSxHQUFHdFcsSUFBSSxDQUFDcUIsS0FBTCxDQUFXNEosRUFBWCxDQUFmO0FBQWtDLFVBQUl3TCxPQUFPLEdBQUdILFFBQVEsR0FBRyxDQUF6QjtBQUErQixhQUFPMVgsR0FBRyxDQUFDeUwsQ0FBSixDQUFNbU0sVUFBVSxDQUFDRixRQUFELENBQWhCLEVBQTRCRSxVQUFVLENBQUNDLE9BQUQsQ0FBdEMsRUFBaUR4TCxFQUFFLEdBQUdxTCxRQUF0RCxDQUFQO0FBQTJFLEtBQXBMO0FBR0Q7O0FBRUQsU0FBTzNYLFdBQVA7QUFDQyxDQXB1REEsQ0FBRCIsInNvdXJjZVJvb3QiOiIvIiwic291cmNlc0NvbnRlbnQiOlsiLy8gYjI3NzI2Y2UtNDVlYi00NmNmLTg3MDktNDA5YTE0NTRlYzJkXHJcblxyXG5cclxuKGZ1bmN0aW9uIChyb290LCBmYWN0b3J5KSB7XHJcbiAgICBpZiAodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7XHJcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkge1xyXG4gICAgICAgIGRlZmluZShbJ2V4cG9ydHMnXSwgZnVuY3Rpb24gKGV4cG9ydHMpIHtcclxuICAgICAgICAgICAgKHJvb3QuTmV1dHJpbm9FZmZlY3QgPSBleHBvcnRzKVsnRmlyZXdvcmtzMDEnXSA9IGZhY3RvcnkoKTtcclxuICAgICAgICB9KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdmFyIG5hbWVzcGFjZSA9IChyb290Lk5ldXRyaW5vRWZmZWN0IHx8IChyb290Lk5ldXRyaW5vRWZmZWN0ID0ge30pKTtcclxuICAgICAgICBuYW1lc3BhY2UuX19sYXN0X18gPSBuYW1lc3BhY2VbJ0ZpcmV3b3JrczAxJ10gPSBmYWN0b3J5KCk7XHJcbiAgICB9XHJcbn0odHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnID8gc2VsZiA6IHRoaXMsIGZ1bmN0aW9uICgpIHtcclxuXHJcbmZ1bmN0aW9uIEZpcmV3b3JrczAxKGN0eCkge1xyXG5cdHZhciBEYiA9IHRoaXM7XHJcblxyXG5cdHZhciBuZSA9IGZ1bmN0aW9uIChMZCwgQmQpIHtcclxuXHRcdHRoaXMuTGQgPSBMZDtcclxuXHRcdHRoaXMuQmQgPSBCZDtcclxuXHJcblx0XHRpZiAodGhpcy5CZC53ZS5wZS5sZW5ndGggPiAwKSB7XHJcblx0XHRcdHRoaXMud2UgPSB0aGlzLkJkLndlLnBlWzBdO1xyXG5cclxuXHRcdFx0dGhpcy5MYyA9IFtuZS5wcm90b3R5cGUuRWMsXHJcblx0XHRcdFx0bmUucHJvdG90eXBlLkZjXVt0aGlzLndlLnhlXTtcclxuXHRcdH1cclxuXHRcdGVsc2VcclxuXHRcdFx0dGhpcy53ZSA9IG51bGw7XHJcblx0fVxyXG5cclxuXHRuZS5wcm90b3R5cGUgPSB7XHJcblx0XHRFYzogZnVuY3Rpb24gKGZlLCBBYiwgWGIpIHtcclxuXHRcdFx0dmFyIEdjID0gY3R4LmliKFhiLk1kKTtcclxuXHRcdFx0dmFyIEhjID0gTWF0aC5jb3MoR2MpO1xyXG5cdFx0XHR2YXIgSWMgPSBNYXRoLnNpbihHYyk7XHJcblx0XHRcdHZhciB5ZSA9IGN0eC5BZShYYi5OZFswXSk7XHJcblx0XHRcdHZhciB6ZSA9IGN0eC5BZShYYi5OZFsxXSk7XHJcblx0XHRcdGZlLi8qKi90cmFuc2Zvcm0oeWUgKiBIYywgeWUgKiBJYywgemUgKiAtSWMsIHplICogSGMsIEFiWzBdLCBBYlsxXSk7XHJcblx0XHR9LFxyXG5cclxuXHRcdEZjOiBmdW5jdGlvbiAoZmUsIEFiLCBYYikge1xyXG5cdFx0XHR2YXIgcSA9IFhiLk1jO1xyXG5cdFx0XHR2YXIgejIgPSAyLjAgKiBxWzJdICogcVsyXTtcclxuXHRcdFx0dmFyIHh5ID0gMi4wICogcVswXSAqIHFbMV07XHJcblx0XHRcdHZhciB3eiA9IDIuMCAqIHFbM10gKiBxWzJdO1xyXG5cdFx0XHR2YXIgeWUgPSBjdHguQWUoWGIuTmRbMF0pO1xyXG5cdFx0XHR2YXIgemUgPSBjdHguQWUoWGIuTmRbMV0pO1xyXG5cdFx0XHRmZS4vKiovdHJhbnNmb3JtKFxyXG5cdFx0XHRcdHllICogKDEuMCAtIDIuMCAqIHFbMV0gKiBxWzFdIC0gejIpLFxyXG5cdFx0XHRcdHllICogKHh5ICsgd3opLFxyXG5cdFx0XHRcdHplICogKHd6IC0geHkpLFxyXG5cdFx0XHRcdHplICogKDIuMCAqIHFbMF0gKiBxWzBdICsgejIgLSAxLjApLFxyXG5cdFx0XHRcdEFiWzBdLCBBYlsxXSk7XHJcblx0XHR9LFxyXG5cclxuXHRcdFBjOiBmdW5jdGlvbiAoZmUsIFhiLCBnZSkge1xyXG5cdFx0XHRYYi52YyhmZSwgLTEsIGdlKTtcclxuXHJcblx0XHRcdGlmICh0aGlzLndlKSB7XHJcblxyXG5cdFx0XHRcdGlmICh0aGlzLkJlICE9IG51bGwgJiYgIVhiLm9jKSB7XHJcblxyXG5cdFx0XHRcdFx0aWYgKFhiLk9kID4gMC4wMDEpIHtcclxuXHRcdFx0XHRcdFx0dmFyIERlID0gTWF0aC5mbG9vcihYYi5RYyAlIHRoaXMud2UuUmMpO1xyXG5cdFx0XHRcdFx0XHR2YXIgRWUgPSBNYXRoLmZsb29yKFhiLlFjIC8gdGhpcy53ZS5SYyk7XHJcblxyXG5cdFx0XHRcdFx0XHR2YXIgQWIgPSBYYi5BYi5zbGljZSgpO1xyXG5cdFx0XHRcdFx0XHR2YXIgTmQgPSBYYi5OZC5zbGljZSgpO1xyXG5cdFx0XHRcdFx0XHRpZiAoIWdlIHx8IGdlLi8qKi90cmFuc2Zvcm0oQWIsIE5kKSkge1xyXG5cclxuXHRcdFx0XHRcdFx0XHR2YXIgZGYgPSBNYXRoLmFicyhOZFswXSk7XHJcblx0XHRcdFx0XHRcdFx0dmFyIGVmID0gTWF0aC5hYnMoTmRbMV0pO1xyXG5cclxuXHRcdFx0XHRcdFx0XHRpZiAoZGYgPiAwLjAwMSAmJiBlZiA+IDAuMDAxKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRmZS5zYXZlKCk7XHJcblx0XHRcdFx0XHRcdFx0XHR0aGlzLkxjKGZlLCBBYiwgWGIpO1xyXG5cclxuXHRcdFx0XHRcdFx0XHRcdGZlLnRyYW5zbGF0ZSgtZGYgKiBYYi5QZFswXSwgLWVmICogKDEgLSBYYi5QZFsxXSkpO1xyXG5cdFx0XHRcdFx0XHRcdFx0ZmUuZ2xvYmFsQWxwaGEgKj0gWGIuT2Q7XHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0aWYgKFhiLmdmWzBdIDwgMC45OTkgfHwgWGIuZ2ZbMV0gPCAwLjk5OSB8fCBYYi5nZlsyXSA8IDAuOTk5KSB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdGlmIChkZiA+PSAxICYmIGVmID49IDEpIHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHR2YXIgWWUgPSBkZiA8IHRoaXMuVGMgPyBkZiA6IHRoaXMuVGM7XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0dmFyIFplID0gZWYgPCB0aGlzLlVjID8gZWYgOiB0aGlzLlVjO1xyXG5cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRjdHguYWYoWWUsIFplKTtcclxuXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0Y3R4LmJmLmdsb2JhbENvbXBvc2l0ZU9wZXJhdGlvbiA9IFwiY29weVwiO1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGN0eC5iZi5kcmF3SW1hZ2UodGhpcy5CZS5pbWFnZSxcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHRoaXMuQmUueCArIHRoaXMuVGMgKiBEZSwgdGhpcy5CZS55ICsgdGhpcy5VYyAqIEVlLFxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dGhpcy5UYywgdGhpcy5VYyxcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdDAsIDAsIFllLCBaZSk7XHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGN0eC5iZi5nbG9iYWxDb21wb3NpdGVPcGVyYXRpb24gPSBcIm11bHRpcGx5XCI7XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0Y3R4LmJmLmZpbGxTdHlsZSA9IGN0eC5mZihYYi5nZik7XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0Y3R4LmJmLmZpbGxSZWN0KDAsIDAsIFllLCBaZSk7XHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGN0eC5iZi5nbG9iYWxDb21wb3NpdGVPcGVyYXRpb24gPSBcImRlc3RpbmF0aW9uLWF0b3BcIjtcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRjdHguYmYuZHJhd0ltYWdlKHRoaXMuQmUuaW1hZ2UsXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0aGlzLkJlLnggKyB0aGlzLlRjICogRGUsIHRoaXMuQmUueSArIHRoaXMuVWMgKiBFZSxcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHRoaXMuVGMsIHRoaXMuVWMsXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQwLCAwLCBZZSwgWmUpO1xyXG5cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRmZS5kcmF3SW1hZ2UoY3R4LmNmLCAwLCAwLCBZZSwgWmUsIDAsIDAsIGRmLCBlZik7XHJcblx0XHRcdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHRcdGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRmZS5kcmF3SW1hZ2UodGhpcy5CZS5pbWFnZSxcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHR0aGlzLkJlLnggKyB0aGlzLlRjICogRGUsIHRoaXMuQmUueSArIHRoaXMuVWMgKiBFZSxcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHR0aGlzLlRjLCB0aGlzLlVjLCAwLCAwLCBkZiwgZWYpO1xyXG5cdFx0XHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdFx0XHRcdGZlLnJlc3RvcmUoKTtcclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdFhiLnZjKGZlLCAxLCBnZSk7XHJcblx0XHR9LFxyXG5cclxuXHRcdEhkOiBmdW5jdGlvbiAoZmUsIGdlKSB7XHJcblx0XHRcdGZlLnNhdmUoKTtcclxuXHJcblx0XHRcdGlmICh0aGlzLndlKSB7XHJcblx0XHRcdFx0ZmUuZ2xvYmFsQ29tcG9zaXRlT3BlcmF0aW9uID0gdGhpcy5MZC5tYXRlcmlhbHNbdGhpcy5MZC4vKiovbW9kZWwucmVuZGVyU3R5bGVzW3RoaXMud2UucmVuZGVyU3R5bGVJbmRleF0ubWF0ZXJpYWxJbmRleF07XHJcblx0XHRcdFx0dGhpcy5CZSA9IHRoaXMuTGQudGV4dHVyZURlc2NzW3RoaXMuTGQuLyoqL21vZGVsLnJlbmRlclN0eWxlc1t0aGlzLndlLnJlbmRlclN0eWxlSW5kZXhdLnRleHR1cmVJbmRpY2VzWzBdXTtcclxuXHRcdFx0fVxyXG5cdFx0XHRlbHNlIHtcclxuXHRcdFx0XHR0aGlzLkJlID0gbnVsbDtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0aWYgKHRoaXMuQmUpIHtcclxuXHRcdFx0XHR0aGlzLlRjID0gdGhpcy5CZS53aWR0aCAvIHRoaXMud2UuUmM7XHJcblx0XHRcdFx0dGhpcy5VYyA9IHRoaXMuQmUuaGVpZ2h0IC8gdGhpcy53ZS5TYztcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0ZnVuY3Rpb24ga2QoYSwgYikge1xyXG5cdFx0XHRcdGlmIChhLkFiWzJdID4gYi5BYlsyXSlcclxuXHRcdFx0XHRcdHJldHVybiAxO1xyXG5cdFx0XHRcdGlmIChhLkFiWzJdIDwgYi5BYlsyXSlcclxuXHRcdFx0XHRcdHJldHVybiAtMTtcclxuXHRcdFx0XHRyZXR1cm4gMDtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0c3dpdGNoICh0aGlzLkJkLlZjKSB7XHJcblx0XHRcdFx0Y2FzZSAwOlxyXG5cdFx0XHRcdFx0Zm9yICh2YXIgV2IgPSAwOyBXYiA8IHRoaXMuQmQudGMubGVuZ3RoOyArK1diKSB7XHJcblx0XHRcdFx0XHRcdHRoaXMuUGMoZmUsIHRoaXMuQmQudGNbV2JdLCBnZSk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHRjYXNlIDE6XHJcblx0XHRcdFx0XHRmb3IgKHZhciBXYiA9IHRoaXMuQmQudGMubGVuZ3RoOyBXYi0tID4gMDspIHtcclxuXHRcdFx0XHRcdFx0dGhpcy5QYyhmZSwgdGhpcy5CZC50Y1tXYl0sIGdlKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdGNhc2UgMjpcclxuXHRcdFx0XHRcdHRoaXMuQmQudGMuc29ydChrZCk7XHJcblxyXG5cdFx0XHRcdFx0Zm9yICh2YXIgV2IgPSAwOyBXYiA8IHRoaXMuQmQudGMubGVuZ3RoOyArK1diKSB7XHJcblx0XHRcdFx0XHRcdHRoaXMuUGMoZmUsIHRoaXMuQmQudGNbV2JdLCBnZSk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0ZmUucmVzdG9yZSgpO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0dmFyIG9lID0gZnVuY3Rpb24gKExkLCBCZCkge1xyXG5cclxuXHRcdHRoaXMuTGQgPSBMZDtcclxuXHRcdHRoaXMuQmQgPSBCZDtcclxuXHJcblx0XHRpZiAodGhpcy5CZC53ZS5wZS5sZW5ndGggPiAwKVxyXG5cdFx0XHR0aGlzLndlID0gdGhpcy5CZC53ZS5wZVswXTtcclxuXHRcdGVsc2VcclxuXHRcdFx0dGhpcy53ZSA9IG51bGw7XHJcblxyXG5cdFx0dGhpcy52ZXJ0ZXggPSBbXHJcblx0XHRcdHsgLyoqL3Bvc2l0aW9uOiBbMC4wLCAwLjAsIDAuMF0sIC8qKi9jb2xvcjogWzAsIDAsIDAsIDBdLCAvKiovdGV4Q29vcmRzOiBbWzAuMCwgMC4wXV0gfSxcclxuXHRcdFx0eyAvKiovcG9zaXRpb246IFswLjAsIDAuMCwgMC4wXSwgLyoqL2NvbG9yOiBbMCwgMCwgMCwgMF0sIC8qKi90ZXhDb29yZHM6IFtbMC4wLCAwLjBdXSB9LFxyXG5cdFx0XHR7IC8qKi9wb3NpdGlvbjogWzAuMCwgMC4wLCAwLjBdLCAvKiovY29sb3I6IFswLCAwLCAwLCAwXSwgLyoqL3RleENvb3JkczogW1swLjAsIDAuMF1dIH0sXHJcblx0XHRcdHsgLyoqL3Bvc2l0aW9uOiBbMC4wLCAwLjAsIDAuMF0sIC8qKi9jb2xvcjogWzAsIDAsIDAsIDBdLCAvKiovdGV4Q29vcmRzOiBbWzAuMCwgMC4wXV0gfV07XHJcblx0fVxyXG5cclxuXHRvZS5wcm90b3R5cGUgPSB7XHJcblx0XHRxZTogZnVuY3Rpb24gKFhiLCBzZSwgcmUsIHRlLCByZW5kZXJCdWZmZXIpIHtcclxuXHRcdFx0WGIuQ2UoLTEsIHNlLCByZSwgdGUsIHJlbmRlckJ1ZmZlcik7XHJcblxyXG5cdFx0XHRpZiAodGhpcy53ZSkge1xyXG5cclxuXHRcdFx0XHRpZiAoIVhiLm9jKSB7XHJcblxyXG5cdFx0XHRcdFx0dmFyIHYwID0gdGhpcy52ZXJ0ZXhbMF07XHJcblx0XHRcdFx0XHR2YXIgdjEgPSB0aGlzLnZlcnRleFsxXTtcclxuXHRcdFx0XHRcdHZhciB2MiA9IHRoaXMudmVydGV4WzJdO1xyXG5cdFx0XHRcdFx0dmFyIHYzID0gdGhpcy52ZXJ0ZXhbM107XHJcblxyXG5cdFx0XHRcdFx0dmFyIEZlID0gW10sIEdlID0gW107XHJcblxyXG5cdFx0XHRcdFx0aWYgKHRoaXMud2UueGUgPT0gMCkge1xyXG5cdFx0XHRcdFx0XHR2YXIgYSA9IGN0eC5pYihYYi5NZCk7XHJcblx0XHRcdFx0XHRcdHZhciBzID0gLU1hdGguc2luKGEpO1xyXG5cdFx0XHRcdFx0XHR2YXIgYyA9IE1hdGguY29zKGEpO1xyXG5cclxuXHRcdFx0XHRcdFx0RmVbMF0gPSBzZVswXSAqIGMgKyByZVswXSAqIHM7XHJcblx0XHRcdFx0XHRcdEZlWzFdID0gc2VbMV0gKiBjICsgcmVbMV0gKiBzO1xyXG5cdFx0XHRcdFx0XHRGZVsyXSA9IHNlWzJdICogYyArIHJlWzJdICogcztcclxuXHJcblx0XHRcdFx0XHRcdEdlWzBdID0gLXNlWzBdICogcyArIHJlWzBdICogYztcclxuXHRcdFx0XHRcdFx0R2VbMV0gPSAtc2VbMV0gKiBzICsgcmVbMV0gKiBjO1xyXG5cdFx0XHRcdFx0XHRHZVsyXSA9IC1zZVsyXSAqIHMgKyByZVsyXSAqIGM7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRlbHNlIHtcclxuXHRcdFx0XHRcdFx0dmFyIHEgPSBYYi5NYztcclxuXHRcdFx0XHRcdFx0dmFyIHoyID0gMi4wICogcVsyXSAqIHFbMl07XHJcblx0XHRcdFx0XHRcdHZhciB4eSA9IDIuMCAqIHFbMF0gKiBxWzFdO1xyXG5cdFx0XHRcdFx0XHR2YXIgd3ogPSAyLjAgKiBxWzNdICogcVsyXTtcclxuXHJcblx0XHRcdFx0XHRcdEZlWzBdID0gMS4wIC0gMi4wICogcVsxXSAqIHFbMV0gLSB6MjtcclxuXHRcdFx0XHRcdFx0RmVbMV0gPSB4eSArIHd6O1xyXG5cdFx0XHRcdFx0XHRGZVsyXSA9IDIuMCAqIHFbMF0gKiBxWzJdIC0gMi4wICogcVszXSAqIHFbMV07XHJcblxyXG5cdFx0XHRcdFx0XHRHZVswXSA9IHh5IC0gd3o7XHJcblx0XHRcdFx0XHRcdEdlWzFdID0gMS4wIC0gMi4wICogcVswXSAqIHFbMF0gLSB6MjtcclxuXHRcdFx0XHRcdFx0R2VbMl0gPSAyLjAgKiBxWzFdICogcVsyXSArIDIuMCAqIHFbM10gKiBxWzBdO1xyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdHZhciBIZSA9IFtdLCBJZSA9IFtdLCBKZSA9IFtdLCBLZSA9IFtdO1xyXG5cdFx0XHRcdFx0Y3R4LnUoSGUsIEZlLCAtWGIuTmRbMF0gKiBYYi5QZFswXSk7XHJcblx0XHRcdFx0XHRjdHgudShJZSwgRmUsIFhiLk5kWzBdICogKDEuMCAtIFhiLlBkWzBdKSk7XHJcblx0XHRcdFx0XHRjdHgudShKZSwgR2UsIC1YYi5OZFsxXSAqIFhiLlBkWzFdKTtcclxuXHRcdFx0XHRcdGN0eC51KEtlLCBHZSwgWGIuTmRbMV0gKiAoMS4wIC0gWGIuUGRbMV0pKTtcclxuXHJcblx0XHRcdFx0XHRjdHguYyh2MC4vKiovcG9zaXRpb24sIEhlLCBKZSk7XHJcblx0XHRcdFx0XHRjdHguYyh2MC4vKiovcG9zaXRpb24sIHYwLi8qKi9wb3NpdGlvbiwgWGIuQWIpO1xyXG5cdFx0XHRcdFx0Y3R4LmModjEuLyoqL3Bvc2l0aW9uLCBIZSwgS2UpO1xyXG5cdFx0XHRcdFx0Y3R4LmModjEuLyoqL3Bvc2l0aW9uLCB2MS4vKiovcG9zaXRpb24sIFhiLkFiKTtcclxuXHRcdFx0XHRcdGN0eC5jKHYyLi8qKi9wb3NpdGlvbiwgSWUsIEtlKTtcclxuXHRcdFx0XHRcdGN0eC5jKHYyLi8qKi9wb3NpdGlvbiwgdjIuLyoqL3Bvc2l0aW9uLCBYYi5BYik7XHJcblx0XHRcdFx0XHRjdHguYyh2My4vKiovcG9zaXRpb24sIEllLCBKZSk7XHJcblx0XHRcdFx0XHRjdHguYyh2My4vKiovcG9zaXRpb24sIHYzLi8qKi9wb3NpdGlvbiwgWGIuQWIpO1xyXG5cclxuXHRcdFx0XHRcdHtcclxuXHRcdFx0XHRcdFx0dmFyIHJnYiA9IGN0eC52KFhiLmdmLCAyNTUpO1xyXG5cdFx0XHRcdFx0XHR2MC4vKiovY29sb3IgPSB2MS4vKiovY29sb3IgPSB2Mi4vKiovY29sb3IgPSB2My4vKiovY29sb3IgPSBbcmdiWzBdLCByZ2JbMV0sIHJnYlsyXSwgWGIuT2QgKiAyNTVdO1xyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdHtcclxuXHRcdFx0XHRcdFx0dmFyIERlID0gTWF0aC5mbG9vcihYYi5RYyAlIHRoaXMud2UuUmMpO1xyXG5cdFx0XHRcdFx0XHR2YXIgRWUgPSBNYXRoLmZsb29yKFhiLlFjIC8gdGhpcy53ZS5SYyk7XHJcblxyXG5cdFx0XHRcdFx0XHR2YXIgUGUsIFFlLCBSZSwgU2U7XHJcblxyXG5cdFx0XHRcdFx0XHR2YXIgV2UgPSB0aGlzLkxkLnRleHR1cmVzUmVtYXBbdGhpcy5MZC4vKiovbW9kZWwucmVuZGVyU3R5bGVzW3RoaXMud2UucmVuZGVyU3R5bGVJbmRleF0udGV4dHVyZUluZGljZXNbMF1dO1xyXG5cdFx0XHRcdFx0XHRpZiAoV2UpIHtcclxuXHRcdFx0XHRcdFx0XHR2YXIgVWUgPSBXZS53aWR0aCAvIHRoaXMud2UuUmM7XHJcblx0XHRcdFx0XHRcdFx0dmFyIFZlID0gV2UuaGVpZ2h0IC8gdGhpcy53ZS5TYztcclxuXHJcblx0XHRcdFx0XHRcdFx0dmFyIFBlID0gV2UueCArIERlICogVWU7XHJcblx0XHRcdFx0XHRcdFx0dmFyIFFlID0gUGUgKyBVZTtcclxuXHRcdFx0XHRcdFx0XHR2YXIgUmUgPSAoV2UueSArIFdlLmhlaWdodCAtIEVlICogVmUpO1xyXG5cdFx0XHRcdFx0XHRcdHZhciBTZSA9IFJlIC0gVmU7XHJcblx0XHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdFx0dmFyIFVlID0gMS4wIC8gdGhpcy53ZS5SYztcclxuXHRcdFx0XHRcdFx0XHR2YXIgVmUgPSAxLjAgLyB0aGlzLndlLlNjO1xyXG5cclxuXHRcdFx0XHRcdFx0XHR2YXIgUGUgPSBEZSAqIFVlO1xyXG5cdFx0XHRcdFx0XHRcdHZhciBRZSA9IFBlICsgVWU7XHJcblx0XHRcdFx0XHRcdFx0dmFyIFJlID0gKDEuMCAtIEVlICogVmUpO1xyXG5cdFx0XHRcdFx0XHRcdHZhciBTZSA9IFJlIC0gVmU7XHJcblx0XHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRcdHYwLi8qKi90ZXhDb29yZHNbMF0gPSBbUGUsIFNlXTtcclxuXHRcdFx0XHRcdFx0djEuLyoqL3RleENvb3Jkc1swXSA9IFtQZSwgUmVdO1xyXG5cdFx0XHRcdFx0XHR2Mi4vKiovdGV4Q29vcmRzWzBdID0gW1FlLCBSZV07XHJcblx0XHRcdFx0XHRcdHYzLi8qKi90ZXhDb29yZHNbMF0gPSBbUWUsIFNlXTtcclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRpZiAocmVuZGVyQnVmZmVyLmJlZm9yZVF1YWQpIHtcclxuXHRcdFx0XHRcdFx0cmVuZGVyQnVmZmVyLmJlZm9yZVF1YWQodGhpcy53ZS5yZW5kZXJTdHlsZUluZGV4KTtcclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRyZW5kZXJCdWZmZXIucHVzaFZlcnRleCh2MCk7XHJcblx0XHRcdFx0XHRyZW5kZXJCdWZmZXIucHVzaFZlcnRleCh2MSk7XHJcblx0XHRcdFx0XHRyZW5kZXJCdWZmZXIucHVzaFZlcnRleCh2Mik7XHJcblx0XHRcdFx0XHRyZW5kZXJCdWZmZXIucHVzaFZlcnRleCh2Myk7XHJcblxyXG5cdFx0XHRcdFx0aWYgKCFyZW5kZXJCdWZmZXIuX19sYXN0UmVuZGVyQ2FsbCkge1xyXG5cdFx0XHRcdFx0XHRyZW5kZXJCdWZmZXIuX19sYXN0UmVuZGVyQ2FsbCA9IG5ldyBjdHguUmVuZGVyQ2FsbCgwLCA2LCB0aGlzLndlLnJlbmRlclN0eWxlSW5kZXgpO1xyXG5cdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0dmFyIGxhc3RSZW5kZXJDYWxsID0gcmVuZGVyQnVmZmVyLl9fbGFzdFJlbmRlckNhbGw7XHJcblxyXG5cdFx0XHRcdFx0XHRpZiAobGFzdFJlbmRlckNhbGwucmVuZGVyU3R5bGVJbmRleCA9PSB0aGlzLndlLnJlbmRlclN0eWxlSW5kZXgpIHtcclxuXHRcdFx0XHRcdFx0XHRsYXN0UmVuZGVyQ2FsbC5udW1JbmRpY2VzICs9IDY7XHJcblx0XHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdFx0cmVuZGVyQnVmZmVyLnB1c2hSZW5kZXJDYWxsKGxhc3RSZW5kZXJDYWxsKTtcclxuXHRcdFx0XHRcdFx0XHRyZW5kZXJCdWZmZXIuX19sYXN0UmVuZGVyQ2FsbCA9IG5ldyBjdHguUmVuZGVyQ2FsbChcclxuXHRcdFx0XHRcdFx0XHRcdGxhc3RSZW5kZXJDYWxsLnN0YXJ0SW5kZXggKyBsYXN0UmVuZGVyQ2FsbC5udW1JbmRpY2VzLFxyXG5cdFx0XHRcdFx0XHRcdFx0NiwgdGhpcy53ZS5yZW5kZXJTdHlsZUluZGV4KTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0WGIuQ2UoMSwgc2UsIHJlLCB0ZSwgcmVuZGVyQnVmZmVyKTtcclxuXHRcdH0sXHJcblxyXG5cdFx0dWU6IGZ1bmN0aW9uIChzZSwgcmUsIHRlLCByZW5kZXJCdWZmZXIpIHtcclxuXHRcdFx0c3dpdGNoICh0aGlzLkJkLlZjKSB7XHJcblx0XHRcdFx0Y2FzZSAwOlxyXG5cdFx0XHRcdFx0Zm9yICh2YXIgV2IgPSAwOyBXYiA8IHRoaXMuQmQudGMubGVuZ3RoOyArK1diKSB7XHJcblx0XHRcdFx0XHRcdHRoaXMucWUodGhpcy5CZC50Y1tXYl0sIHNlLCByZSwgdGUsIHJlbmRlckJ1ZmZlcik7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRicmVhaztcclxuXHJcblx0XHRcdFx0Y2FzZSAxOlxyXG5cdFx0XHRcdFx0Zm9yICh2YXIgV2IgPSB0aGlzLkJkLnRjLmxlbmd0aDsgV2ItLSA+IDA7KSB7XHJcblx0XHRcdFx0XHRcdHRoaXMucWUodGhpcy5CZC50Y1tXYl0sIHNlLCByZSwgdGUsIHJlbmRlckJ1ZmZlcik7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRicmVhaztcclxuXHJcblx0XHRcdFx0Y2FzZSAyOlxyXG5cdFx0XHRcdFx0dGhpcy5CZC50Yy5mb3JFYWNoKGZ1bmN0aW9uIChYYikge1xyXG5cdFx0XHRcdFx0XHRYYi5kZXB0aCA9IGN0eC5IKHRlLCBYYi5BYik7XHJcblx0XHRcdFx0XHR9KTtcclxuXHJcblx0XHRcdFx0XHR0aGlzLkJkLnRjLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcclxuXHRcdFx0XHRcdFx0aWYgKGEuZGVwdGggPCBiLmRlcHRoKVxyXG5cdFx0XHRcdFx0XHRcdHJldHVybiAxO1xyXG5cdFx0XHRcdFx0XHRpZiAoYS5kZXB0aCA+IGIuZGVwdGgpXHJcblx0XHRcdFx0XHRcdFx0cmV0dXJuIC0xO1xyXG5cdFx0XHRcdFx0XHRyZXR1cm4gMDtcclxuXHRcdFx0XHRcdH0pO1xyXG5cclxuXHRcdFx0XHRcdHRoaXMuQmQudGMuZm9yRWFjaChmdW5jdGlvbiAoWGIpIHtcclxuXHRcdFx0XHRcdFx0dGhpcy5xZShYYiwgc2UsIHJlLCB0ZSwgcmVuZGVyQnVmZmVyKTtcclxuXHRcdFx0XHRcdH0sIHRoaXMpO1xyXG5cdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdHZhciBsZCA9IGZ1bmN0aW9uIChMZCwgd2UsIHZlKSB7XHJcblx0XHR2YXIgVmIgPSB0aGlzO1xyXG5cdFx0dGhpcy5MZCA9IExkO1xyXG5cdFx0dGhpcy53ZSA9IHdlO1xyXG5cclxuXHRcdC8vIEViXHJcblxyXG5cdFx0ZnVuY3Rpb24gRWIoKSB7XHJcblx0XHRcdHRoaXMuRmIgPSAwO1xyXG5cdFx0XHR0aGlzLkdiID0gMTtcclxuXHRcdFx0dGhpcy5IYiA9IG51bGw7XHJcblx0XHRcdHRoaXMuSWIgPSBudWxsO1xyXG5cdFx0XHR0aGlzLktiID0gMDtcclxuXHRcdFx0dGhpcy5MYiA9IDE7XHJcblxyXG5cdFx0XHRWYi53ZS5NYih0aGlzKTsgLy8gSU1QTFxyXG5cclxuXHRcdFx0dGhpcy5OYiA9IGZ1bmN0aW9uICgpIHtcclxuXHRcdFx0XHR0aGlzLk9iID0gdGhpcy5HYjtcclxuXHRcdFx0XHR0aGlzLkZiID0gMDtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0dGhpcy5OYigpO1xyXG5cdFx0fVxyXG5cclxuXHRcdEViLnByb3RvdHlwZSA9IHtcclxuXHRcdFx0SmQ6IGZ1bmN0aW9uICgpIHtcclxuXHRcdFx0XHR0aGlzLk5iKCk7XHJcblx0XHRcdH0sXHJcblxyXG5cdFx0XHRJZDogZnVuY3Rpb24gKFFiLCBBYiwgTWMpIHtcclxuXHRcdFx0XHRWYi53ZS5QYihRYiwgVmIsIHRoaXMpOyAvLyBJTVBMXHJcblxyXG5cdFx0XHRcdHZhciBSYiA9IFZiLlJiO1xyXG5cdFx0XHRcdHZhciBzeXN0ZW1UaW1lID0gTGQuUmI7XHJcblx0XHRcdFx0dmFyIFNiID0gUWI7XHJcblx0XHRcdFx0dmFyIGljID0gMDtcclxuXHJcblx0XHRcdFx0aWYgKHRoaXMuemIgPiAwLjAwMDAwMSkge1xyXG5cclxuXHRcdFx0XHRcdHZhciBUYiA9IHRoaXMuT2IgKyBRYiAqIHRoaXMuemI7XHJcblxyXG5cdFx0XHRcdFx0d2hpbGUgKFRiID49IDEuMCkge1xyXG5cdFx0XHRcdFx0XHR2YXIgVWIgPSB0aGlzLnpiIDwgMC4wMDEgPyAwLjAgOiAoMS4wIC0gdGhpcy5PYikgLyB0aGlzLnpiO1xyXG5cdFx0XHRcdFx0XHRTYiAtPSBVYjtcclxuXHRcdFx0XHRcdFx0UmIgKz0gVWI7XHJcblx0XHRcdFx0XHRcdHN5c3RlbVRpbWUgKz0gVWI7XHJcblxyXG5cdFx0XHRcdFx0XHRpZiAodGhpcy5IYiAhPSBudWxsICYmIFJiID4gdGhpcy5IYikge1xyXG5cdFx0XHRcdFx0XHRcdFZiLmRpc2FjdGl2YXRlKCk7XHJcblx0XHRcdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRcdFZiLlJiID0gUmI7XHJcblx0XHRcdFx0XHRcdExkLlJiID0gc3lzdGVtVGltZTtcclxuXHJcblx0XHRcdFx0XHRcdGlmIChBYiAmJiBRYiA+IDApXHJcblx0XHRcdFx0XHRcdFx0Y3R4LmFiKFZiLkFiLCBBYiwgVmIuQmIsIFNiIC8gUWIpO1xyXG5cclxuXHRcdFx0XHRcdFx0aWYgKE1jICYmIFFiID4gMClcclxuXHRcdFx0XHRcdFx0XHRjdHguc2xlcnBxKFZiLk1jLCBNYywgVmIucHJldlJvdGF0aW9uLCBTYiAvIFFiKTtcclxuXHJcblx0XHRcdFx0XHRcdC8vIGZvciB0aGUgZnV0dXJlIHdoZW4gSmIgd291bGQgYmUgZXh0ZXJuYWxcclxuXHRcdFx0XHRcdFx0dGhpcy5MYiA9IHRoaXMuSmI7XHJcblxyXG5cdFx0XHRcdFx0XHRmb3IgKHZhciBXYiA9IDA7IFdiIDwgdGhpcy5KYjsgKytXYikge1xyXG5cdFx0XHRcdFx0XHRcdGlmIChWYi5zYy5sZW5ndGggPT0gMClcclxuXHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xyXG5cclxuXHRcdFx0XHRcdFx0XHRpZiAodGhpcy5KYiA9PSAxKVxyXG5cdFx0XHRcdFx0XHRcdFx0dGhpcy5LYiA9IDA7XHJcblx0XHRcdFx0XHRcdFx0ZWxzZVxyXG5cdFx0XHRcdFx0XHRcdFx0dGhpcy5LYiA9IFdiIC8gKHRoaXMuSmIgLSAxKTtcclxuXHJcblx0XHRcdFx0XHRcdFx0dmFyIFhiID0gVmIuc2MucG9wKCk7XHJcblx0XHRcdFx0XHRcdFx0VmIudGMudW5zaGlmdChYYik7XHJcblxyXG5cdFx0XHRcdFx0XHRcdGlmIChXYiA9PSAwKVxyXG5cdFx0XHRcdFx0XHRcdFx0WGIuWWIoKTtcclxuXHRcdFx0XHRcdFx0XHRlbHNlXHJcblx0XHRcdFx0XHRcdFx0XHRYYi5aYigpO1xyXG5cclxuXHRcdFx0XHRcdFx0XHRYYi5JZChTYik7XHJcblx0XHRcdFx0XHRcdFx0KytpYztcclxuXHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdFx0dGhpcy5PYiA9IDAuMDtcclxuXHRcdFx0XHRcdFx0VGIgLT0gMS4wO1xyXG5cclxuXHRcdFx0XHRcdFx0aWYgKHRoaXMuSWIgIT0gbnVsbCAmJiArK3RoaXMuRmIgPj0gdGhpcy5JYikge1xyXG5cdFx0XHRcdFx0XHRcdFZiLmRpc2FjdGl2YXRlKCk7XHJcblx0XHRcdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHR0aGlzLk9iID0gVGI7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdFJiICs9IFNiO1xyXG5cdFx0XHRcdFZiLlJiID0gUmI7XHJcblxyXG5cdFx0XHRcdGlmIChBYilcclxuXHRcdFx0XHRcdGN0eC5UKFZiLkFiLCBBYik7XHJcblxyXG5cdFx0XHRcdGlmIChNYylcclxuXHRcdFx0XHRcdGN0eC5VKFZiLk1jLCBNYyk7XHJcblxyXG5cdFx0XHRcdHJldHVybiBpYztcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdC8vIGFjXHJcblxyXG5cdFx0ZnVuY3Rpb24gYWMoKSB7XHJcblx0XHRcdHRoaXMuR2IgPSAxO1xyXG5cdFx0XHR0aGlzLktiID0gMDtcclxuXHRcdFx0dGhpcy5MYiA9IDE7XHJcblxyXG5cdFx0XHRWYi53ZS5NYih0aGlzKTsgLy8gSU1QTFxyXG5cclxuXHRcdFx0dGhpcy5OYiA9IGZ1bmN0aW9uICgpIHtcclxuXHRcdFx0XHR0aGlzLmJjID0gdGhpcy5HYjtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0dGhpcy5OYigpO1xyXG5cdFx0fVxyXG5cclxuXHRcdGFjLnByb3RvdHlwZSA9IHtcclxuXHRcdFx0SmQ6IGZ1bmN0aW9uICgpIHtcclxuXHRcdFx0XHR0aGlzLk5iKCk7XHJcblx0XHRcdH0sXHJcblxyXG5cdFx0XHRJZDogZnVuY3Rpb24gKFFiLCBBYiwgTWMpIHtcclxuXHRcdFx0XHRWYi53ZS5QYihRYiwgVmIsIHRoaXMpOyAvLyBJTVBMXHJcblxyXG5cdFx0XHRcdHZhciBjYyA9IFZiLlJiO1xyXG5cdFx0XHRcdHZhciBkYyA9IGNjICsgUWI7XHJcblx0XHRcdFx0dmFyIHN5c3RlbVRpbWVCZWZvcmVGcmFtZSA9IExkLlJiO1xyXG5cdFx0XHRcdHZhciBzeXN0ZW1UaW1lQWZ0ZXJGcmFtZSA9IHN5c3RlbVRpbWVCZWZvcmVGcmFtZSArIFFiO1xyXG5cdFx0XHRcdHZhciBlYyA9IEFiID8gY3R4Lk8oY3R4LmgoQWIsIFZiLkJiKSkgOiAwO1xyXG5cdFx0XHRcdHZhciBpYyA9IDA7XHJcblxyXG5cdFx0XHRcdGlmIChlYyA+IDAuMDAwMDAxKSB7XHJcblx0XHRcdFx0XHR2YXIgZmMgPSBlYyAvIHRoaXMucmQ7XHJcblx0XHRcdFx0XHR2YXIgVGIgPSB0aGlzLmJjICsgZmM7XHJcblxyXG5cdFx0XHRcdFx0dmFyIGhjID0gZmMgPCAwLjAwMSA/XHJcblx0XHRcdFx0XHRcdDEuMCAtIHRoaXMuYmMgOiAoMS4wIC0gdGhpcy5iYykgLyBmYztcclxuXHJcblx0XHRcdFx0XHR2YXIgamMgPSBbXTtcclxuXHJcblx0XHRcdFx0XHR3aGlsZSAoVGIgPiAxLjApIHtcclxuXHRcdFx0XHRcdFx0dmFyIGtjID0gY2MgKyBoYyAqIFFiO1xyXG5cclxuXHRcdFx0XHRcdFx0aWYgKEFiKVxyXG5cdFx0XHRcdFx0XHRcdGN0eC5hYihqYywgVmIuQmIsIEFiLCBoYyk7XHJcblxyXG5cdFx0XHRcdFx0XHRWYi5SYiA9IGtjO1xyXG5cdFx0XHRcdFx0XHRjdHguVChWYi5BYiwgamMpO1xyXG5cdFx0XHRcdFx0XHRMZC5SYiA9IGN0eC5YKHN5c3RlbVRpbWVCZWZvcmVGcmFtZSwgc3lzdGVtVGltZUFmdGVyRnJhbWUsIGhjKTtcclxuXHJcblx0XHRcdFx0XHRcdC8vIGZvciB0aGUgZnV0dXJlIHdoZW4gSmIgd291bGQgYmUgZXh0ZXJuYWxcclxuXHRcdFx0XHRcdFx0dGhpcy5MYiA9IHRoaXMuSmI7XHJcblxyXG5cdFx0XHRcdFx0XHRmb3IgKHZhciBXYiA9IDA7IFdiIDwgdGhpcy5KYjsgKytXYikge1xyXG5cdFx0XHRcdFx0XHRcdGlmIChWYi5zYy5sZW5ndGggPT0gMClcclxuXHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xyXG5cclxuXHRcdFx0XHRcdFx0XHRpZiAodGhpcy5KYiA9PSAxKVxyXG5cdFx0XHRcdFx0XHRcdFx0dGhpcy5LYiA9IDA7XHJcblx0XHRcdFx0XHRcdFx0ZWxzZVxyXG5cdFx0XHRcdFx0XHRcdFx0dGhpcy5LYiA9IFdiIC8gKHRoaXMuSmIgLSAxKTtcclxuXHJcblx0XHRcdFx0XHRcdFx0dmFyIFhiID0gVmIuc2MucG9wKCk7XHJcblx0XHRcdFx0XHRcdFx0VmIudGMudW5zaGlmdChYYik7XHJcblxyXG5cdFx0XHRcdFx0XHRcdGlmIChXYiA9PSAwKVxyXG5cdFx0XHRcdFx0XHRcdFx0WGIuWWIoKTtcclxuXHRcdFx0XHRcdFx0XHRlbHNlXHJcblx0XHRcdFx0XHRcdFx0XHRYYi5aYigpO1xyXG5cclxuXHRcdFx0XHRcdFx0XHRYYi5JZChRYiAqICgxLjAgLSBoYykpO1xyXG5cdFx0XHRcdFx0XHRcdCsraWM7XHJcblx0XHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRcdGhjICs9IDEuMCAvIGZjO1xyXG5cdFx0XHRcdFx0XHRUYiAtPSAxLjA7XHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0dGhpcy5iYyA9IFRiO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0VmIuUmIgPSBkYztcclxuXHJcblx0XHRcdFx0aWYgKEFiKVxyXG5cdFx0XHRcdFx0Y3R4LlQoVmIuQWIsIEFiKTtcclxuXHJcblx0XHRcdFx0aWYgKE1jKVxyXG5cdFx0XHRcdFx0Y3R4LlUoVmIuTWMsIE1jKTtcclxuXHJcblx0XHRcdFx0cmV0dXJuIGljO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gbWNcclxuXHJcblx0XHRmdW5jdGlvbiBtYygpIHtcclxuXHRcdFx0dGhpcy5BYiA9IFtdO1xyXG5cdFx0XHR0aGlzLlBkID0gW107XHJcblx0XHRcdHRoaXMuTmQgPSBbXTtcclxuXHRcdFx0dGhpcy5nZiA9IFtdO1xyXG5cdFx0XHR0aGlzLktjID0gW107XHJcblx0XHR9XHJcblxyXG5cdFx0bWMucHJvdG90eXBlID0ge1xyXG5cdFx0XHRuYzogZnVuY3Rpb24gKCkge1xyXG5cdFx0XHRcdHRoaXMub2MgPSBmYWxzZTtcclxuXHJcblx0XHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLktjLmxlbmd0aDsgKytpKSB7XHJcblx0XHRcdFx0XHR2YXIgcGMgPSB0aGlzLktjW2ldO1xyXG5cdFx0XHRcdFx0cGMuQmQuSmQodGhpcy5BYiwgbnVsbCk7XHJcblxyXG5cdFx0XHRcdFx0aWYgKHBjLkFkLnNkKVxyXG5cdFx0XHRcdFx0XHRwYy5CZC5kaXNhY3RpdmF0ZSgpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSxcclxuXHJcblx0XHRcdFliOiBmdW5jdGlvbiAoKSB7XHJcblx0XHRcdFx0VmIud2UuZmQoVmIsIHRoaXMpOyAvLyBJTVBMXHJcblx0XHRcdFx0dGhpcy5uYygpO1xyXG5cdFx0XHR9LFxyXG5cclxuXHRcdFx0WmI6IGZ1bmN0aW9uICgpIHtcclxuXHRcdFx0XHRWYi53ZS5nZChWYiwgdGhpcyk7IC8vIElNUExcclxuXHRcdFx0XHR0aGlzLm5jKCk7XHJcblx0XHRcdH0sXHJcblxyXG5cdFx0XHRJZDogZnVuY3Rpb24gKFFiKSB7XHJcblx0XHRcdFx0VmIud2UucWMoUWIsIFZiLCB0aGlzKTsgLy8gSU1QTFxyXG5cclxuXHRcdFx0XHR0aGlzLnJjKFFiKTtcclxuXHRcdFx0fSxcclxuXHJcblx0XHRcdHBjOiBmdW5jdGlvbiAoamUpIHtcclxuXHRcdFx0XHRyZXR1cm4gdGhpcy5LY1tqZV0uQmQ7XHJcblx0XHRcdH0sXHJcblxyXG5cdFx0XHRyYzogZnVuY3Rpb24gKFFiKSB7XHJcblx0XHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLktjLmxlbmd0aDsgaSsrKSB7XHJcblx0XHRcdFx0XHR0aGlzLktjW2ldLkJkLklkKFFiLCB0aGlzLkFiLCBudWxsKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0sXHJcblxyXG5cdFx0XHR1YzogZnVuY3Rpb24gKG1kLCBuZCkge1xyXG5cdFx0XHRcdHRoaXMuS2MucHVzaCh7XHJcblx0XHRcdFx0XHRCZDogbmV3IGxkKExkLCBtZCwgdmUpLFxyXG5cdFx0XHRcdFx0QWQ6IG5kXHJcblx0XHRcdFx0fSk7XHJcblx0XHRcdH0sXHJcblxyXG5cdFx0XHR2YzogZnVuY3Rpb24gKGZlLCB4YywgZ2UpIHtcclxuXHRcdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuS2MubGVuZ3RoOyArK2kpIHtcclxuXHRcdFx0XHRcdHZhciBwYyA9IHRoaXMuS2NbaV07XHJcblxyXG5cdFx0XHRcdFx0aWYgKHhjID09IHBjLkFkLnhjKVxyXG5cdFx0XHRcdFx0XHRwYy5CZC5IZChmZSwgZ2UpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSxcclxuXHJcblx0XHRcdENlOiBmdW5jdGlvbiAoeGMsIHNlLCByZSwgdGUsIHJlbmRlckJ1ZmZlcikge1xyXG5cdFx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5LYy5sZW5ndGg7ICsraSkge1xyXG5cdFx0XHRcdFx0dmFyIHBjID0gdGhpcy5LY1tpXTtcclxuXHJcblx0XHRcdFx0XHRpZiAoeGMgPT0gcGMuQWQueGMpXHJcblx0XHRcdFx0XHRcdHBjLkJkLnVlKHNlLCByZSwgdGUsIHJlbmRlckJ1ZmZlcik7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9LFxyXG5cclxuXHRcdFx0d2M6IGZ1bmN0aW9uIChmZSkge1xyXG5cdFx0XHRcdHRoaXMub2MgPSB0cnVlO1xyXG5cdFx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5LYy5sZW5ndGg7ICsraSkge1xyXG5cdFx0XHRcdFx0dmFyIHBjID0gdGhpcy5LY1tpXTtcclxuXHJcblx0XHRcdFx0XHRpZiAocGMuQWQuc2QpIHtcclxuXHRcdFx0XHRcdFx0cGMuQmQuYWN0aXZhdGUoKTtcclxuXHRcdFx0XHRcdFx0cGMuQmQuSWQoMCk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRlbHNlXHJcblx0XHRcdFx0XHRcdHBjLkJkLmRpc2FjdGl2YXRlKCk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9LFxyXG5cclxuXHRcdFx0eWM6IGZ1bmN0aW9uIChHZCkge1xyXG5cdFx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5LYy5sZW5ndGg7ICsraSkge1xyXG5cdFx0XHRcdFx0dGhpcy5LY1tpXS5CZC5FZChHZCk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gemNcclxuXHJcblx0XHRmdW5jdGlvbiB6YygpIHtcclxuXHRcdH1cclxuXHJcblx0XHR6Yy5wcm90b3R5cGUuQWMgPSBmdW5jdGlvbiAoWGIpIHtcclxuXHRcdFx0cmV0dXJuIFZiLndlLkNjKFZiLCBYYiwgdGhpcyk7IC8vIElNUExcclxuXHRcdH1cclxuXHJcblx0XHQvLyBsZCBBZFxyXG5cclxuXHRcdHRoaXMuQWIgPSBbXTtcclxuXHRcdHRoaXMuQmIgPSBbXTtcclxuXHRcdHRoaXMuTWMgPSBbXTtcclxuXHRcdHRoaXMucHJldlJvdGF0aW9uID0gW107XHJcblx0XHR0aGlzLnRjID0gW107XHJcblx0XHR0aGlzLnNjID0gW107XHJcblx0XHR0aGlzLldjID0gbmV3IHpjKCk7XHJcblx0XHR0aGlzLmNvbnN0cnVjdCA9IG5ldyB2ZSh0aGlzLkxkLCB0aGlzKTtcclxuXHRcdHRoaXMuWWMgPSBbXTtcclxuXHRcdHRoaXMuYWQgPSBbXTtcclxuXHJcblx0XHR0aGlzLmRkID0gZnVuY3Rpb24gKCkge1xyXG5cdFx0XHR0aGlzLnZkID0gbmV3IEViKCk7XHJcblx0XHR9XHJcblxyXG5cdFx0dGhpcy5lZCA9IGZ1bmN0aW9uICgpIHtcclxuXHRcdFx0dGhpcy52ZCA9IG5ldyBhYygpO1xyXG5cdFx0fVxyXG5cclxuXHRcdHRoaXMud2UudWQodGhpcyk7IC8vIElNUExcclxuXHJcblx0XHRmb3IgKHZhciBXYiA9IDA7IFdiIDwgdGhpcy5qZDsgKytXYikge1xyXG5cdFx0XHR2YXIgWGIgPSBuZXcgbWMoKTtcclxuXHJcblx0XHRcdGZvciAodmFyIGlkID0gMDsgaWQgPCB0aGlzLlljLmxlbmd0aDsgKytpZCkge1xyXG5cdFx0XHRcdHZhciBoZCA9IHRoaXMuWWNbaWRdO1xyXG5cdFx0XHRcdFhiLnVjKGhkLkRiLCBoZC5BZCk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHRoaXMuc2MucHVzaChYYik7XHJcblx0XHR9XHJcblxyXG5cdFx0dGhpcy5OYiA9IGZ1bmN0aW9uIChBYiwgTWMpIHtcclxuXHJcblx0XHRcdGN0eC5UKHRoaXMuQWIsIEFiID8gQWIgOiBbMCwgMCwgMF0pO1xyXG5cdFx0XHRjdHguVCh0aGlzLkJiLCB0aGlzLkFiKTtcclxuXHRcdFx0Y3R4LlUodGhpcy5NYywgTWMgPyBNYyA6IFswLCAwLCAwLCAxXSk7XHJcblx0XHRcdGN0eC5VKHRoaXMucHJldlJvdGF0aW9uLCB0aGlzLk1jKTtcclxuXHJcblx0XHRcdHRoaXMuUmIgPSAwLjA7XHJcblx0XHRcdHRoaXMud2QgPSAwLjA7XHJcblx0XHRcdHRoaXMuWmMgPSB0cnVlO1xyXG5cdFx0XHR0aGlzLnBhdXNlZF8gPSBmYWxzZTtcclxuXHRcdFx0dGhpcy5nZW5lcmF0b3JzUGF1c2VkXyA9IGZhbHNlO1xyXG5cdFx0XHRjdHguVyh0aGlzLmFkLCAwLCAwLCAwKTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdGxkLnByb3RvdHlwZS5KZCA9IGZ1bmN0aW9uIChBYiwgTWMpIHtcclxuXHRcdHRoaXMuTmIoQWIsIE1jKTtcclxuXHJcblx0XHR0aGlzLnNjLnB1c2guYXBwbHkodGhpcy5zYywgdGhpcy50Yyk7XHJcblx0XHR0aGlzLnRjLmxlbmd0aCA9IDA7XHJcblxyXG5cdFx0dGhpcy52ZC5KZCgpO1xyXG5cdH1cclxuXHJcblx0bGQucHJvdG90eXBlLklkID0gZnVuY3Rpb24gKFFiLCBBYiwgTWMpIHtcclxuXHJcblx0XHRpZiAodGhpcy5wYXVzZWRfKVxyXG5cdFx0e1xyXG5cdFx0XHR0aGlzLlRkKEFiLCBNYyk7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHJcblx0XHR0aGlzLndkID0gdGhpcy5SYjtcclxuXHJcblx0XHRpZiAoQWIpIHtcclxuXHRcdFx0Y3R4LlQodGhpcy5CYiwgdGhpcy5BYik7XHJcblx0XHRcdGlmIChRYiA+IDAuMDAwMSkge1xyXG5cdFx0XHRcdHZhciBzaGlmdCA9IFtdO1xyXG5cdFx0XHRcdGN0eC5nKHNoaWZ0LCBBYiwgdGhpcy5CYik7XHJcblx0XHRcdFx0Y3R4LlQodGhpcy5hZCwgc2hpZnQpO1xyXG5cdFx0XHRcdGN0eC53KHRoaXMuYWQsIHRoaXMuYWQsIFFiKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRlbHNlIHtcclxuXHRcdFx0XHRjdHguVyh0aGlzLmFkLCAwLCAwLCAwKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdFx0ZWxzZSB7XHJcblx0XHRcdGN0eC5XKHRoaXMuYWQsIDAsIDAsIDApO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmIChNYylcclxuXHRcdHtcclxuXHRcdFx0Y3R4LlUodGhpcy5wcmV2Um90YXRpb24sIHRoaXMuTWMpO1xyXG5cdFx0fVxyXG5cclxuXHRcdHZhciBpYztcclxuXHJcblx0XHRpZiAodGhpcy5aYyAmJiAhdGhpcy5nZW5lcmF0b3JzUGF1c2VkXykge1xyXG5cdFx0XHRpYyA9IHRoaXMudmQuSWQoUWIsIEFiLCBNYyk7XHJcblx0XHR9XHJcblx0XHRlbHNlIHtcclxuXHRcdFx0aWYgKEFiKVxyXG5cdFx0XHRcdGN0eC5UKHRoaXMuQWIsIEFiKTtcclxuXHJcblx0XHRcdGlmIChNYylcclxuXHRcdFx0XHRjdHguVSh0aGlzLk1jLCBNYyk7XHJcblxyXG5cdFx0XHRpYyA9IDA7XHJcblx0XHRcdHRoaXMuUmIgKz0gUWI7XHJcblx0XHR9XHJcblxyXG5cdFx0Zm9yICh2YXIgV2IgPSBpYzsgV2IgPCB0aGlzLnRjLmxlbmd0aDspIHtcclxuXHRcdFx0dmFyIFhiID0gdGhpcy50Y1tXYl07XHJcblxyXG5cdFx0XHRpZiAoIVhiLm9jKSB7XHJcblx0XHRcdFx0WGIuSWQoUWIpO1xyXG5cclxuXHRcdFx0XHRpZiAodGhpcy5XYy5BYyh0aGlzLnRjW1diXSkpIHtcclxuXHRcdFx0XHRcdFhiLndjKCk7XHJcblxyXG5cdFx0XHRcdFx0aWYgKHRoaXMueGQoV2IpKVxyXG5cdFx0XHRcdFx0XHRjb250aW51ZTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdFx0ZWxzZSB7XHJcblx0XHRcdFx0WGIucmMoUWIpO1xyXG5cclxuXHRcdFx0XHRpZiAodGhpcy54ZChXYikpXHJcblx0XHRcdFx0XHRjb250aW51ZTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0KytXYjtcclxuXHRcdH1cclxuXHR9O1xyXG5cclxuXHRsZC5wcm90b3R5cGUueGQgPSBmdW5jdGlvbiAoamUpIHtcclxuXHRcdHZhciBYYiA9IHRoaXMudGNbamVdO1xyXG5cclxuXHRcdHZhciByZWFkeSA9IHRydWU7XHJcblxyXG5cdFx0Zm9yICh2YXIgaWQgPSAwOyBpZCA8IFhiLktjLmxlbmd0aDsgKytpZCkge1xyXG5cdFx0XHR2YXIgQmQgPSBYYi5LY1tpZF0uQmQ7XHJcblxyXG5cdFx0XHRpZiAoQmQuYWN0aXZhdGVkKCkgfHwgQmQudGMubGVuZ3RoID4gMCkge1xyXG5cdFx0XHRcdHJlYWR5ID0gZmFsc2U7XHJcblx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHRpZiAocmVhZHkpIHtcclxuXHRcdFx0dGhpcy5zYy5wdXNoKHRoaXMudGNbamVdKTtcclxuXHRcdFx0dGhpcy50Yy5zcGxpY2UoamUsIDEpO1xyXG5cdFx0XHRyZXR1cm4gdHJ1ZTtcclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gZmFsc2U7XHJcblx0fVxyXG5cclxuXHRsZC5wcm90b3R5cGUuSGQgPSBmdW5jdGlvbiAoZmUsIGdlKSB7XHJcblx0XHR0aGlzLmNvbnN0cnVjdC5IZChmZSwgZ2UpO1xyXG5cdH1cclxuXHJcblx0bGQucHJvdG90eXBlLnVlID0gZnVuY3Rpb24gKHNlLCByZSwgdGUsIHJlbmRlckJ1ZmZlcikge1xyXG5cdFx0dGhpcy5jb25zdHJ1Y3QudWUoc2UsIHJlLCB0ZSwgcmVuZGVyQnVmZmVyKTtcclxuXHR9XHJcblxyXG5cdGxkLnByb3RvdHlwZS5UZCA9IGZ1bmN0aW9uIChBYiwgTWMpIHtcclxuXHRcdHRoaXMud2QgPSB0aGlzLlJiO1xyXG5cclxuXHRcdGlmIChBYikge1xyXG5cdFx0XHRjdHguVCh0aGlzLkJiLCB0aGlzLkFiKTtcclxuXHRcdFx0Y3R4LlQodGhpcy5BYiwgQWIpO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmIChNYykge1xyXG5cdFx0XHRjdHguVSh0aGlzLnByZXZSb3RhdGlvbiwgdGhpcy5NYyk7XHJcblx0XHRcdGN0eC5VKHRoaXMuTWMsIE1jKTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdGxkLnByb3RvdHlwZS51YyA9IGZ1bmN0aW9uIChtZCwgbmQpIHtcclxuXHRcdHRoaXMuWWMucHVzaCh7IERiOiBtZCwgQWQ6IG5kIH0pO1xyXG5cdH1cclxuXHJcblx0bGQucHJvdG90eXBlLi8qKi9wYXVzZSA9IGZ1bmN0aW9uICgpIHtcclxuXHRcdHRoaXMucGF1c2VkXyA9IHRydWU7XHJcblx0fVxyXG5cclxuXHRsZC5wcm90b3R5cGUuLyoqL3VucGF1c2UgPSBmdW5jdGlvbiAoKSB7XHJcblx0XHR0aGlzLnBhdXNlZF8gPSBmYWxzZTtcclxuXHR9XHJcblxyXG5cdGxkLnByb3RvdHlwZS4vKiovcGF1c2VkID0gZnVuY3Rpb24gKCkge1xyXG5cdFx0cmV0dXJuIHRoaXMucGF1c2VkXztcclxuXHR9XHJcblxyXG5cdGxkLnByb3RvdHlwZS4vKiovcGF1c2VHZW5lcmF0b3JzID0gZnVuY3Rpb24gKCkge1xyXG5cdFx0dGhpcy5nZW5lcmF0b3JzUGF1c2VkXyA9IHRydWU7XHJcblx0fVxyXG5cclxuXHRsZC5wcm90b3R5cGUuLyoqL3VucGF1c2VHZW5lcmF0b3JzID0gZnVuY3Rpb24gKCkge1xyXG5cdFx0dGhpcy5nZW5lcmF0b3JzUGF1c2VkXyA9IGZhbHNlO1xyXG5cdH1cclxuXHJcblx0bGQucHJvdG90eXBlLi8qKi9nZW5lcmF0b3JzUGF1c2VkID0gZnVuY3Rpb24gKCkge1xyXG5cdFx0cmV0dXJuIHRoaXMuZ2VuZXJhdG9yc1BhdXNlZF87XHJcblx0fVxyXG5cclxuXHRsZC5wcm90b3R5cGUuYWN0aXZhdGUgPSBmdW5jdGlvbiAoKSB7XHJcblx0XHR0aGlzLlpjID0gdHJ1ZTtcclxuXHR9XHJcblxyXG5cdGxkLnByb3RvdHlwZS5kaXNhY3RpdmF0ZSA9IGZ1bmN0aW9uICgpIHtcclxuXHRcdHRoaXMuWmMgPSBmYWxzZTtcclxuXHR9XHJcblxyXG5cdGxkLnByb3RvdHlwZS5hY3RpdmF0ZWQgPSBmdW5jdGlvbiAoKSB7XHJcblx0XHRyZXR1cm4gdGhpcy5aYztcclxuXHR9XHJcblxyXG5cdGxkLnByb3RvdHlwZS4vKiovZ2V0TnVtUGFydGljbGVzID0gZnVuY3Rpb24gKCkge1xyXG5cdFx0cmV0dXJuIHRoaXMudGMubGVuZ3RoO1xyXG5cdH1cclxuXHJcblx0dmFyIGtlID0gZnVuY3Rpb24gKCkge1xyXG5cdFx0dmFyIENiID0gdGhpcztcclxuXHJcblx0XHR0aGlzLl9pbml0ID0gZnVuY3Rpb24gKHdlLCBBYiwgTWMsIHZlLCBvcHRpb25zKSB7XHJcblx0XHRcdHRoaXMuLyoqL21vZGVsID0gd2U7XHJcblxyXG5cdFx0XHR0aGlzLkFiID0gW107XHJcblx0XHRcdHRoaXMuTWMgPSBbXTtcclxuXHJcblx0XHRcdC8vIGtlIEFkXHJcblxyXG5cdFx0XHR0aGlzLm9kID0gW107XHJcblxyXG5cdFx0XHR0aGlzLnBkID0gZnVuY3Rpb24gKG1kKSB7XHJcblx0XHRcdFx0dmFyIEJkID0gbmV3IGxkKHRoaXMsIG1kLCB2ZSk7XHJcblx0XHRcdFx0QmQuTmIodGhpcy5BYiwgdGhpcy5NYyk7XHJcblx0XHRcdFx0dGhpc1tcIl9cIi5jb25jYXQobWQubmFtZSldID0gQmQ7XHJcblx0XHRcdFx0dGhpcy5vZC5wdXNoKEJkKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0dGhpcy5OYiA9IGZ1bmN0aW9uIChBYiwgTWMpIHtcclxuXHRcdFx0XHR0aGlzLkNkID0gMC4wO1xyXG5cdFx0XHRcdHRoaXMuUmIgPSAwLjA7XHJcblx0XHRcdFx0Y3R4LlQodGhpcy5BYiwgQWIgPyBBYiA6IFswLCAwLCAwXSk7XHJcblx0XHRcdFx0Y3R4LlUodGhpcy5NYywgTWMgPyBNYyA6IFswLCAwLCAwLCAxXSk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHRoaXMuTmIoQWIsIE1jKTtcclxuXHRcdFx0dGhpcy4vKiovbW9kZWwucWQodGhpcyk7IC8vIElNUExcclxuXHJcblx0XHRcdHRoaXMuX3ByZXNpbU5lZWRlZCA9IHRydWU7XHJcblxyXG5cdFx0XHRpZiAob3B0aW9ucy5nZW5lcmF0b3JzUGF1c2VkKSB7XHJcblx0XHRcdFx0dGhpcy4vKiovcGF1c2VHZW5lcmF0b3JzSW5BbGxFbWl0dGVycygpO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRpZiAob3B0aW9ucy5wYXVzZWQpIHtcclxuXHRcdFx0XHR0aGlzLi8qKi9wYXVzZUFsbEVtaXR0ZXJzKCk7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0dGhpcy56ZXJvVXBkYXRlKCk7XHJcblx0XHRcdFx0dGhpcy51cGRhdGVGaXhlZCh0aGlzLlVkLCBBYiwgTWMsIHRoaXMucHJlc2ltRnJhbWVUaW1lKTtcclxuXHRcdFx0XHR0aGlzLl9wcmVzaW1OZWVkZWQgPSBmYWxzZTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0a2UucHJvdG90eXBlLi8qKi9yZXN0YXJ0ID0gZnVuY3Rpb24gKC8qKi9wb3NpdGlvbiwgLyoqL3JvdGF0aW9uLCAvKiovb3B0aW9ucykge1xyXG5cclxuXHRcdHRoaXMuTmIoLyoqL3Bvc2l0aW9uID8gLyoqL3Bvc2l0aW9uIDogdGhpcy5BYiwgLyoqL3JvdGF0aW9uID8gLyoqL3JvdGF0aW9uIDogdGhpcy5NYyk7XHJcblx0XHR0aGlzLl9wcmVzaW1OZWVkZWQgPSB0cnVlO1xyXG5cclxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5vZC5sZW5ndGg7ICsraSkge1xyXG5cdFx0XHR0aGlzLm9kW2ldLkpkKHRoaXMuQWIsIHRoaXMuTWMpO1xyXG5cdFx0fVxyXG5cclxuXHRcdHRoaXMuX3ByZXNpbU5lZWRlZCA9IHRydWU7XHJcblxyXG5cdFx0aWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5nZW5lcmF0b3JzUGF1c2VkKSB7XHJcblx0XHRcdHRoaXMuLyoqL3BhdXNlR2VuZXJhdG9yc0luQWxsRW1pdHRlcnMoKTtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAob3B0aW9ucyAmJiBvcHRpb25zLnBhdXNlZCkge1xyXG5cdFx0XHR0aGlzLi8qKi9wYXVzZUFsbEVtaXR0ZXJzKCk7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHR0aGlzLnplcm9VcGRhdGUoKTtcclxuXHRcdFx0dGhpcy51cGRhdGVGaXhlZCh0aGlzLlVkLCB0aGlzLkFiLCB0aGlzLk1jLCB0aGlzLnByZXNpbUZyYW1lVGltZSk7XHJcblx0XHRcdHRoaXMuX3ByZXNpbU5lZWRlZCA9IGZhbHNlO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0a2UucHJvdG90eXBlLnplcm9VcGRhdGUgPSBmdW5jdGlvbiAoKSB7XHJcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMub2QubGVuZ3RoOyArK2kpIHtcclxuXHRcdFx0dGhpcy5vZFtpXS5JZCgwLCB0aGlzLkFiLCB0aGlzLk1jKTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdGtlLnByb3RvdHlwZS4vKiovdXBkYXRlID0gZnVuY3Rpb24gKC8qKi9kdCwgLyoqL3Bvc2l0aW9uLCAvKiovcm90YXRpb24pIHtcclxuXHRcdGlmICh0aGlzLkRkID4gMC4wKVxyXG5cdFx0XHR0aGlzLnVwZGF0ZUZpeGVkKC8qKi9kdCwgLyoqL3Bvc2l0aW9uLCAvKiovcm90YXRpb24sIHRoaXMuRGQpO1xyXG5cdFx0ZWxzZVxyXG5cdFx0XHR0aGlzLnVwZGF0ZUZsZXgoLyoqL2R0LCAvKiovcG9zaXRpb24sIC8qKi9yb3RhdGlvbik7XHJcblx0fVxyXG5cclxuXHRrZS5wcm90b3R5cGUudXBkYXRlRml4ZWQgPSBmdW5jdGlvbiAoLyoqL2R0LCAvKiovcG9zaXRpb24sIC8qKi9yb3RhdGlvbiwgLyoqL2ZyYW1lVGltZSkge1xyXG5cdFx0dmFyIHVwZGF0ZWRUaW1lID0gMC4wO1xyXG5cdFx0dmFyIGhjID0gW107XHJcblx0XHRjdHguVChoYywgdGhpcy5BYik7XHJcblx0XHR2YXIgZnJhbWVSb3RhdGlvbiA9IFtdO1xyXG5cdFx0Y3R4LlUoZnJhbWVSb3RhdGlvbiwgdGhpcy5NYyk7XHJcblxyXG5cdFx0aWYgKC8qKi9wb3NpdGlvbiAmJiBjdHguZXF1YWx2M18oLyoqL3Bvc2l0aW9uLCB0aGlzLkFiKSlcclxuXHRcdFx0LyoqL3Bvc2l0aW9uID0gbnVsbDtcclxuXHJcblx0XHRpZiAoLyoqL3JvdGF0aW9uICYmIGN0eC5lcXVhbHFfKC8qKi9yb3RhdGlvbiwgdGhpcy5NYykpXHJcblx0XHRcdC8qKi9yb3RhdGlvbiA9IG51bGw7XHJcblxyXG5cdFx0d2hpbGUgKCgvKiovZHQgLSB1cGRhdGVkVGltZSkgKyB0aGlzLkNkID49IC8qKi9mcmFtZVRpbWUpIHtcclxuXHRcdFx0dmFyIGNjID0gdGhpcy5SYjtcclxuXHJcblx0XHRcdGlmICgvKiovcG9zaXRpb24pXHJcblx0XHRcdFx0Y3R4LmFiKGhjLCB0aGlzLkFiLCAvKiovcG9zaXRpb24sIHVwZGF0ZWRUaW1lIC8gLyoqL2R0KTtcclxuXHJcblx0XHRcdGlmICgvKiovcm90YXRpb24pXHJcblx0XHRcdFx0Y3R4LnNsZXJwcShmcmFtZVJvdGF0aW9uLCB0aGlzLk1jLCAvKiovcm90YXRpb24sIHVwZGF0ZWRUaW1lIC8gLyoqL2R0KTtcclxuXHJcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5vZC5sZW5ndGg7ICsraSkge1xyXG5cdFx0XHRcdHRoaXMub2RbaV0uSWQoLyoqL2ZyYW1lVGltZSwgaGMsIGZyYW1lUm90YXRpb24pO1xyXG5cclxuXHRcdFx0XHR0aGlzLlJiID0gY2M7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHVwZGF0ZWRUaW1lICs9IC8qKi9mcmFtZVRpbWUgLSB0aGlzLkNkO1xyXG5cdFx0XHR0aGlzLkNkID0gMC4wO1xyXG5cdFx0XHR0aGlzLlJiID0gY2MgKyAvKiovZnJhbWVUaW1lO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmICgvKiovcG9zaXRpb24pXHJcblx0XHRcdGN0eC5UKHRoaXMuQWIsIC8qKi9wb3NpdGlvbik7XHJcblxyXG5cdFx0aWYgKC8qKi9yb3RhdGlvbilcclxuXHRcdFx0Y3R4LlUodGhpcy5NYywgLyoqL3JvdGF0aW9uKTtcclxuXHJcblx0XHR0aGlzLkNkICs9IC8qKi9kdCAtIHVwZGF0ZWRUaW1lO1xyXG5cdH1cclxuXHJcblx0a2UucHJvdG90eXBlLnVwZGF0ZUZsZXggPSBmdW5jdGlvbiAoLyoqL2R0LCAvKiovcG9zaXRpb24sIC8qKi9yb3RhdGlvbikge1xyXG5cdFx0dmFyIGNjID0gdGhpcy5SYjtcclxuXHJcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMub2QubGVuZ3RoOyArK2kpIHtcclxuXHRcdFx0dGhpcy5vZFtpXS5JZCgvKiovZHQsIC8qKi9wb3NpdGlvbiwgLyoqL3JvdGF0aW9uKTtcclxuXHRcdFx0dGhpcy5SYiA9IGNjO1xyXG5cdFx0fVxyXG5cclxuXHRcdHRoaXMuUmIgPSBjYyArIC8qKi9kdDtcclxuXHJcblx0XHRpZiAoLyoqL3Bvc2l0aW9uKVxyXG5cdFx0XHRjdHguVCh0aGlzLkFiLCAvKiovcG9zaXRpb24pO1xyXG5cclxuXHRcdGlmICgvKiovcm90YXRpb24pXHJcblx0XHRcdGN0eC5VKHRoaXMuTWMsIC8qKi9yb3RhdGlvbik7XHJcblx0fVxyXG5cclxuXHRrZS5wcm90b3R5cGUuLyoqL3Jlc2V0UG9zaXRpb24gPSBmdW5jdGlvbiAoLyoqL3Bvc2l0aW9uLCAvKiovcm90YXRpb24pIHtcclxuXHJcblx0XHRpZiAoLyoqL3Bvc2l0aW9uKVxyXG5cdFx0XHRjdHguVCh0aGlzLkFiLCAvKiovcG9zaXRpb24pO1xyXG5cclxuXHRcdGlmICgvKiovcm90YXRpb24pXHJcblx0XHRcdGN0eC5VKHRoaXMuTWMsIC8qKi9yb3RhdGlvbik7XHJcblxyXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLm9kLmxlbmd0aDsgKytpKSB7XHJcblx0XHRcdHRoaXMub2RbaV0uVGQodGhpcy5BYiwgdGhpcy5NYyk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRrZS5wcm90b3R5cGUuLyoqL3NldFByb3BlcnR5SW5BbGxFbWl0dGVycyA9IGZ1bmN0aW9uICgvKiovbmFtZSwgLyoqL3ZhbHVlKSB7XHJcblx0XHR2YXIgcHJvcE5hbWUgPSBcIl9cIi5jb25jYXQoLyoqL25hbWUpO1xyXG5cclxuXHRcdGlmICgvKiovdmFsdWUgaW5zdGFuY2VvZiBBcnJheSkge1xyXG5cdFx0XHRpZiAoLyoqL3ZhbHVlLmxlbmd0aCA9PSAyKSB7XHJcblx0XHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLm9kLmxlbmd0aDsgKytpKSB7XHJcblx0XHRcdFx0XHRjdHguUyh0aGlzLm9kW2ldW3Byb3BOYW1lXSwgLyoqL3ZhbHVlKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdFx0ZWxzZSB7XHJcblx0XHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLm9kLmxlbmd0aDsgKytpKSB7XHJcblx0XHRcdFx0XHRjdHguVCh0aGlzLm9kW2ldW3Byb3BOYW1lXSwgLyoqL3ZhbHVlKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHRcdGVsc2Uge1xyXG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMub2QubGVuZ3RoOyArK2kpIHtcclxuXHRcdFx0XHR0aGlzLm9kW2ldW3Byb3BOYW1lXSA9IC8qKi92YWx1ZTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0a2UucHJvdG90eXBlLi8qKi9wYXVzZUFsbEVtaXR0ZXJzID0gZnVuY3Rpb24oKSB7XHJcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMub2QubGVuZ3RoOyArK2kpIHtcclxuXHRcdFx0dGhpcy5vZFtpXS4vKiovcGF1c2UoKTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdGtlLnByb3RvdHlwZS4vKiovdW5wYXVzZUFsbEVtaXR0ZXJzID0gZnVuY3Rpb24gKCkge1xyXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLm9kLmxlbmd0aDsgKytpKSB7XHJcblx0XHRcdHRoaXMub2RbaV0uLyoqL3VucGF1c2UoKTtcclxuXHRcdH1cclxuXHRcdHRoaXMuemVyb1VwZGF0ZSgpO1xyXG5cclxuXHRcdGlmICh0aGlzLl9wcmVzaW1OZWVkZWQpIHtcclxuXHRcdFx0dGhpcy51cGRhdGVGaXhlZCh0aGlzLlVkLCB0aGlzLkFiLCB0aGlzLk1jLCB0aGlzLnByZXNpbUZyYW1lVGltZSk7XHJcblx0XHRcdHRoaXMuX3ByZXNpbU5lZWRlZCA9IGZhbHNlO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0a2UucHJvdG90eXBlLi8qKi9hcmVBbGxFbWl0dGVyc1BhdXNlZCA9IGZ1bmN0aW9uICgpIHtcclxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5vZC5sZW5ndGg7ICsraSkge1xyXG5cdFx0XHRpZiAoIXRoaXMub2RbaV0ucGF1c2VkKCkpXHJcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIHRydWU7XHJcblx0fVxyXG5cclxuXHRrZS5wcm90b3R5cGUuLyoqL3BhdXNlR2VuZXJhdG9yc0luQWxsRW1pdHRlcnMgPSBmdW5jdGlvbiAoKSB7XHJcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMub2QubGVuZ3RoOyArK2kpIHtcclxuXHRcdFx0dGhpcy5vZFtpXS4vKiovcGF1c2VHZW5lcmF0b3JzKCk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRrZS5wcm90b3R5cGUuLyoqL3VucGF1c2VHZW5lcmF0b3JzSW5BbGxFbWl0dGVycyA9IGZ1bmN0aW9uICgpIHtcclxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5vZC5sZW5ndGg7ICsraSkge1xyXG5cdFx0XHR0aGlzLm9kW2ldLi8qKi91bnBhdXNlR2VuZXJhdG9ycygpO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0a2UucHJvdG90eXBlLi8qKi9hcmVHZW5lcmF0b3JzSW5BbGxFbWl0dGVyc1BhdXNlZCA9IGZ1bmN0aW9uICgpIHtcclxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5vZC5sZW5ndGg7ICsraSkge1xyXG5cdFx0XHRpZiAoIXRoaXMub2RbaV0uZ2VuZXJhdG9yc1BhdXNlZCgpKVxyXG5cdFx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdH1cclxuXHRcdHJldHVybiB0cnVlO1xyXG5cdH1cclxuXHJcblx0a2UucHJvdG90eXBlLi8qKi9nZXROdW1QYXJ0aWNsZXMgPSBmdW5jdGlvbigpIHtcclxuXHRcdHZhciBudW1QYXJ0aWNsZXMgPSAwO1xyXG5cclxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5vZC5sZW5ndGg7ICsraSkge1xyXG5cdFx0XHRudW1QYXJ0aWNsZXMgKz0gdGhpcy5vZFtpXS5nZXROdW1QYXJ0aWNsZXMoKTtcclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gbnVtUGFydGljbGVzO1xyXG5cdH1cclxuXHJcblxyXG5cdHZhciBsZSA9IGZ1bmN0aW9uICgpIHtcclxuXHRcdHRoaXMuX2luaXQgPSBmdW5jdGlvbiAod2UsIEFiLCBNYywgcmVuZGVyQnVmZmVyLCBvcHRpb25zKSB7XHJcblx0XHRcdGxlLnByb3RvdHlwZS5faW5pdC5jYWxsKHRoaXMsIHdlLCBBYiwgTWMsIG9lLCBvcHRpb25zKTtcclxuXHJcblx0XHRcdHRoaXMudGV4dHVyZXNSZW1hcCA9IFtdO1xyXG5cclxuXHRcdFx0dmFyIGluZGljZXMgPSBbXTtcclxuXHJcblx0XHRcdHtcclxuXHRcdFx0XHR2YXIgdmVyRGlzcDtcclxuXHRcdFx0XHRmb3IgKHZhciBXYiA9IDA7IFdiIDwgdGhpcy4vKiovbW9kZWwuWGU7ICsrV2IpIHtcclxuXHRcdFx0XHRcdHZlckRpc3AgPSBXYiAqIDQ7XHJcblx0XHRcdFx0XHRpbmRpY2VzLnB1c2godmVyRGlzcCArIDAsIHZlckRpc3AgKyAzLCB2ZXJEaXNwICsgMSwgdmVyRGlzcCArIDEsIHZlckRpc3AgKyAzLCB2ZXJEaXNwICsgMik7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHR0aGlzLnJlbmRlckJ1ZmZlciA9IHJlbmRlckJ1ZmZlcjtcclxuXHRcdFx0dGhpcy5yZW5kZXJCdWZmZXIuaW5pdGlhbGl6ZSh0aGlzLi8qKi9tb2RlbC5YZSAqIDQsIFsyXSwgaW5kaWNlcywgdGhpcy4vKiovbW9kZWwuWGUpO1xyXG5cdFx0XHR0aGlzLnJlbmRlckJ1ZmZlci5fX251bUluZGljZXMgPSAwO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0bGUucHJvdG90eXBlID0gbmV3IGtlKCk7XHJcblxyXG5cdGxlLnByb3RvdHlwZS4vKiovZmlsbEdlb21ldHJ5QnVmZmVycyA9IGZ1bmN0aW9uICgvKiovY2FtZXJhUmlnaHQsIC8qKi9jYW1lcmFVcCwgLyoqL2NhbWVyYURpcikge1xyXG5cdFx0dGhpcy5yZW5kZXJCdWZmZXIuY2xlYW51cCgpO1xyXG5cdFx0dGhpcy5yZW5kZXJCdWZmZXIuX19sYXN0UmVuZGVyQ2FsbCA9IG51bGw7XHJcblxyXG5cdFx0dGhpcy5vZC5mb3JFYWNoKGZ1bmN0aW9uIChCZCkge1xyXG5cdFx0XHRCZC51ZSgvKiovY2FtZXJhUmlnaHQsIC8qKi9jYW1lcmFVcCwgLyoqL2NhbWVyYURpciwgdGhpcy5yZW5kZXJCdWZmZXIpO1xyXG5cdFx0fSwgdGhpcyk7XHJcblxyXG5cdFx0aWYgKHRoaXMucmVuZGVyQnVmZmVyLl9fbGFzdFJlbmRlckNhbGwpXHJcblx0XHRcdHRoaXMucmVuZGVyQnVmZmVyLnB1c2hSZW5kZXJDYWxsKHRoaXMucmVuZGVyQnVmZmVyLl9fbGFzdFJlbmRlckNhbGwpO1xyXG5cdH1cclxuXHJcblx0dmFyIG1lID0gZnVuY3Rpb24gKCkge1xyXG5cdFx0dGhpcy5faW5pdCA9IGZ1bmN0aW9uICh3ZSwgQWIsIE1jLCBvcHRpb25zKSB7XHJcblx0XHRcdG1lLnByb3RvdHlwZS5faW5pdC5jYWxsKHRoaXMsIHdlLCBBYiwgTWMsIG5lLCBvcHRpb25zKTtcclxuXHJcblx0XHRcdHRoaXMubWF0ZXJpYWxzID0gW107XHJcblx0XHRcdHRoaXMuLyoqL21vZGVsLm1hdGVyaWFscy5mb3JFYWNoKGZ1bmN0aW9uICh2YWx1ZSkge1xyXG5cdFx0XHRcdHRoaXMubWF0ZXJpYWxzLnB1c2goWydzb3VyY2Utb3ZlcicsICdsaWdodGVyJywgJ211bHRpcGx5J11bdmFsdWVdKTtcclxuXHRcdFx0fSwgdGhpcyk7XHJcblxyXG5cdFx0XHR0aGlzLi8qKi90ZXh0dXJlRGVzY3MgPSBbXTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdG1lLnByb3RvdHlwZSA9IG5ldyBrZSgpO1xyXG5cclxuXHRtZS5wcm90b3R5cGUuLyoqL2RyYXcgPSBmdW5jdGlvbiAoLyoqL2NvbnRleHQsIC8qKi9jYW1lcmEpIHtcclxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5vZC5sZW5ndGg7ICsraSkge1xyXG5cdFx0XHR0aGlzLm9kW2ldLkhkKC8qKi9jb250ZXh0LCAvKiovY2FtZXJhKTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdHRoaXMuY3JlYXRlV0dMSW5zdGFuY2UgPSBmdW5jdGlvbiAoLyoqL3Bvc2l0aW9uLCAvKiovcm90YXRpb24sIC8qKi9yZW5kZXJCdWZmZXIsIC8qKi9vcHRpb25zKSB7XHJcblx0XHR2YXIgTGQgPSBuZXcgbGUoKTtcclxuXHRcdExkLl9pbml0KHRoaXMsIC8qKi9wb3NpdGlvbiwgLyoqL3JvdGF0aW9uLCAvKiovcmVuZGVyQnVmZmVyLCAvKiovb3B0aW9ucyB8fCB7fSk7XHJcblx0XHRyZXR1cm4gTGQ7XHJcblx0fVxyXG5cclxuXHR0aGlzLmNyZWF0ZUNhbnZhczJESW5zdGFuY2UgPSBmdW5jdGlvbiAoLyoqL3Bvc2l0aW9uLCAvKiovcm90YXRpb24sIC8qKi9vcHRpb25zKSB7XHJcblx0XHR2YXIgTGQgPSBuZXcgbWUoKTtcclxuXHRcdExkLl9pbml0KHRoaXMsIC8qKi9wb3NpdGlvbiwgLyoqL3JvdGF0aW9uLCAvKiovb3B0aW9ucyB8fCB7fSk7XHJcblx0XHRyZXR1cm4gTGQ7XHJcblx0fVxyXG5cdHRoaXMudGV4dHVyZXMgPSBbJ2Z4L2ZpcmV3b3Jrcy9zcGFya3M1eDNfbG9uZy5wbmcnLCdmeC9maXJld29ya3Mvc3BhcmtzMngzX3Zpb2xldC5wbmcnXTtcclxuXHR0aGlzLm1hdGVyaWFscyA9IFsxLDBdO1xyXG5cdHRoaXMucmVuZGVyU3R5bGVzID0gW3ttYXRlcmlhbEluZGV4OjAsdGV4dHVyZUluZGljZXM6WzBdfSx7bWF0ZXJpYWxJbmRleDoxLHRleHR1cmVJbmRpY2VzOlsxXX1dO1xyXG5cdHRoaXMuWGUgPSA5MDYwMDtcclxuXHJcblx0ZnVuY3Rpb24gRW1pdHRlcl9TdHJpcGVfY2hpbGQoKSB7XHJcblxyXG5cdFx0dmFyIF8xID0gW10sIF81ID0gW10sIF83ID0gW10sIF85ID0gW10sIF8xMD1bXSwgXzEwZnM9W10sIF8xMHZzPVtdLCBfMTBydz1bXSwgXzEwcnduPVtdLCBfMTByd2wsIF8xMHY9W10sIF8xMHA9W10sIF8xMGR0bCwgXzEwZHRwLCBfMTBkZiwgXzEwZnNkPVtdLCBfMTI9W10sIF8xMmk9W10sIF8xMywgXzExLCBfMTQsIF8xNSwgXzE1aTAsIF8xNXMwID0gW10sIF8xNiwgXzE3LCBfMTdpMCwgXzE3czAgPSBbXSwgXzE4LCBfMThpMCwgXzE4czAgPSBbXSwgXzE5O1xyXG5cdFx0dGhpcy5wZSA9IFt7eGU6MSxSYzo1LFNjOjMscmVuZGVyU3R5bGVJbmRleDowfV07XHJcblx0XHR0aGlzLm5hbWUgPSBcIlN0cmlwZV9jaGlsZFwiO1xyXG5cclxuXHRcdHRoaXMudWQgPSBmdW5jdGlvbihCZCkge1xyXG5cdFx0XHRCZC5fUm90YXRpb24gPSBbMCwwLDAsMV07XHJcblx0XHRcdEJkLl9UZXh0dXJlID0gMDtcclxuXHRcdFx0QmQuZWQoKTtcclxuXHRcdFx0QmQuXzE1ID0gW1xyXG5cdFx0XHRcdFtcclxuXHRcdFx0XHRcdFswLjQ4MTc3LDAuOTM0NzgyLDAuOTgyNzA4LDAuOTY4MTksMC45MjM0NTcsMC44NjA5ODcsMC43ODcyMTEsMC43MDYwMDcsMC42MTk5NjQsMC41MzA5NDQsMC40NDAzODEsMC4zNDk0MzEsMC4yNTkwNzYsMC4xNzAxODgsMC4wODM1NzE2LDAsMF1cclxuXHRcdFx0XHRdXHJcblx0XHRcdF07XHJcblx0XHRcdEJkLl8xNyA9IFtcclxuXHRcdFx0XHRbXHJcblx0XHRcdFx0XHRbMSwwLDBdXHJcblx0XHRcdFx0XVxyXG5cdFx0XHRdO1xyXG5cdFx0XHRCZC5fMTggPSBbXHJcblx0XHRcdFx0W1xyXG5cdFx0XHRcdFx0WzAsMi4wNjU3LDIuNzg5MjksMy4yODU3MiwzLjY2MTgxLDMuOTU5MTYsNC4xOTkyLDQuMzk0NjksNC41NTQwMSw0LjY4Mjk4LDQuNzg1ODQsNC44NjU4Miw0LjkyNTQxLDQuOTY2NjEsNC45OTEwMyw1LDVdXHJcblx0XHRcdFx0XVxyXG5cdFx0XHRdO1xyXG5cdFx0XHRCZC5qZCA9IDMwMDtcclxuXHRcdFx0QmQuVmMgPSAwO1xyXG5cdFx0fVxyXG5cclxuXHRcdHRoaXMuTWIgPSBmdW5jdGlvbih2ZCkge1xyXG5cdFx0XHR2ZC5yZCA9IDE7XHJcblx0XHRcdHZkLkdiID0gMTtcclxuXHRcdFx0dmQuSmIgPSAxO1xyXG5cdFx0fVxyXG5cclxuXHRcdHRoaXMuUGIgPSBmdW5jdGlvbihRYiwgQmQsIHZkKSB7XHJcblx0XHRcdHZkLnJkID0gMTtcclxuXHRcdH1cclxuXHJcblx0XHR0aGlzLmZkID0gZnVuY3Rpb24oQmQsIFhiKSB7XHJcblx0XHRcdFhiLk1jPVtdO1xyXG5cdFx0XHRYYi5fID0gMC4wO1xyXG5cdFx0XHRjdHguVyhfMSwgMCwgMCwgMCk7XHJcblx0XHRcdFhiLl8yID0gW107XHJcblx0XHRcdGN0eC5jKFhiLl8yLCBCZC5BYiwgXzEpO1xyXG5cdFx0XHRYYi5fMyA9IDA7XHJcblx0XHRcdFhiLl80ID0gW107XHJcblx0XHRcdGN0eC5VKFhiLl80LCBCZC5fUm90YXRpb24pO1xyXG5cdFx0XHRjdHgucmFuZHYzZ2VuKF81LCAxLCBCZC5MZC5yYW5kKTtcclxuXHRcdFx0WGIuXzYgPSBbXTtcclxuXHRcdFx0Y3R4LlQoWGIuXzYsIF81KTtcclxuXHRcdFx0Y3R4LnJhbmR2M2dlbihfNywgMTAsIEJkLkxkLnJhbmQpO1xyXG5cdFx0XHRYYi5fOCA9IFtdO1xyXG5cdFx0XHRjdHguVChYYi5fOCwgXzcpO1xyXG5cdFx0XHRjdHguVChYYi5BYiwgWGIuXzIpO1xyXG5cdFx0fVxyXG5cclxuXHRcdHRoaXMuZ2QgPSBmdW5jdGlvbihCZCwgWGIpIHtcclxuXHRcdFx0WGIuTWM9W107XHJcblx0XHRcdFhiLl8gPSAwLjA7XHJcblx0XHRcdGN0eC5XKF8xLCAwLCAwLCAwKTtcclxuXHRcdFx0WGIuXzIgPSBbXTtcclxuXHRcdFx0Y3R4LmMoWGIuXzIsIEJkLkFiLCBfMSk7XHJcblx0XHRcdFhiLl8zID0gMDtcclxuXHRcdFx0WGIuXzQgPSBbXTtcclxuXHRcdFx0Y3R4LlUoWGIuXzQsIEJkLl9Sb3RhdGlvbik7XHJcblx0XHRcdGN0eC5yYW5kdjNnZW4oXzUsIDEsIEJkLkxkLnJhbmQpO1xyXG5cdFx0XHRYYi5fNiA9IFtdO1xyXG5cdFx0XHRjdHguVChYYi5fNiwgXzUpO1xyXG5cdFx0XHRjdHgucmFuZHYzZ2VuKF83LCAxMCwgQmQuTGQucmFuZCk7XHJcblx0XHRcdFhiLl84ID0gW107XHJcblx0XHRcdGN0eC5UKFhiLl84LCBfNyk7XHJcblx0XHRcdGN0eC5UKFhiLkFiLCBYYi5fMik7XHJcblx0XHR9XHJcblxyXG5cdFx0dGhpcy5xYyA9IGZ1bmN0aW9uKFFiLCBCZCwgWGIpIHtcclxuXHRcdFx0WGIuXyArPSBRYjtcclxuXHRcdFx0Y3R4LlcoXzksIDAsIDUwLCAwKTtcclxuXHRcdFx0Y3R4LlQoXzEwZnMsIF85KTtcclxuXHRcdFx0Y3R4LlQoXzEwdnMsIFswLDAsMF0pO1xyXG5cdFx0XHRfMTBkdGwgPSBRYjtcclxuXHRcdFx0Y3R4LlQoXzEwdiwgWGIuXzgpO1xyXG5cdFx0XHRjdHguVChfMTBwLCBYYi5fMik7XHJcblx0XHRcdHdoaWxlIChfMTBkdGwgPiAwLjAwMDEpIHtcclxuXHRcdFx0XHRfMTBkdHAgPSBfMTBkdGw7XHJcblx0XHRcdFx0Y3R4LlQoXzEwZnNkLCBfMTBmcyk7XHJcblx0XHRcdFx0Y3R4LmcoXzEwcncsIF8xMHZzLCBfMTB2KTtcclxuXHRcdFx0XHRfMTByd2wgPSBjdHguUChfMTBydyk7XHJcblx0XHRcdFx0aWYgKF8xMHJ3bCA+IDAuMDAwMSkge1xyXG5cdFx0XHRcdFx0XzEwcndsID0gTWF0aC5zcXJ0KF8xMHJ3bCk7XHJcblx0XHRcdFx0XHRjdHgudyhfMTByd24sIF8xMHJ3LCBfMTByd2wpO1xyXG5cdFx0XHRcdFx0XzEwZGYgPSAwLjAxICogMSAqIF8xMHJ3bDtcclxuXHRcdFx0XHRcdGlmIChfMTBkZiAqIF8xMGR0cCA+IDAuMilcclxuXHRcdFx0XHRcdFx0XzEwZHRwID0gMC4yIC8gXzEwZGY7XHJcblx0XHRcdFx0XHRjdHguYyhfMTBmc2QsIF8xMGZzZCwgY3R4LnYoXzEwcnduLCBfMTByd2wgKiBfMTBkZikpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRjdHguYyhfMTB2LCBfMTB2LCBjdHgudihfMTBmc2QsIF8xMGR0cCkpO1xyXG5cdFx0XHRcdGN0eC5jKF8xMHAsIF8xMHAsIGN0eC52KF8xMHYsIF8xMGR0cCkpO1xyXG5cdFx0XHRcdF8xMGR0bCAtPSBfMTBkdHA7XHJcblx0XHRcdH1cclxuXHRcdFx0Y3R4LlQoWGIuXzIsIF8xMHApO1xyXG5cdFx0XHRjdHguVChYYi5fOCwgXzEwdik7XHJcblx0XHRcdGN0eC5UKFhiLkFiLCBYYi5fMik7XHJcblx0XHRcdGN0eC5RKF8xMmksIFhiLl82KTtcclxuXHRcdFx0Y3R4LnFiKF8xMiwgXzEyaSwgWGIuXzMpO1xyXG5cdFx0XHRfMTMgPSA3O1xyXG5cdFx0XHRfMTEgPSAxO1xyXG5cdFx0XHRfMTQgPSAoWGIuXyAvIF8xMSk7XHJcblx0XHRcdF8xNWkwPShfMTQ8MD8wOihfMTQ+MT8xOl8xNCkpO1xyXG5cdFx0XHRjdHguVihfMTVzMCwwLChfMTVpMC0wKSoxNSk7XHJcblx0XHRcdF8xNSA9IERiLm5iKEJkLl8xNVswXVtfMTVzMFswXV0sXzE1czBbMV0pO1xyXG5cdFx0XHRfMTYgPSAoXzEzICogXzE1KTtcclxuXHRcdFx0XzE3aTA9KF8xNDwwPzA6KF8xND4xPzE6XzE0KSk7XHJcblx0XHRcdGN0eC5WKF8xN3MwLDAsKF8xN2kwLTApKjEpO1xyXG5cdFx0XHRfMTcgPSBEYi5uYihCZC5fMTdbMF1bXzE3czBbMF1dLF8xN3MwWzFdKTtcclxuXHRcdFx0XzE4aTA9KF8xNDwwPzA6KF8xND4xPygwKygoXzE0LTApJTEpKTpfMTQpKTtcclxuXHRcdFx0Y3R4LlYoXzE4czAsMCwoXzE4aTAtMCkqMTUpO1xyXG5cdFx0XHRfMTggPSBEYi5uYihCZC5fMThbMF1bXzE4czBbMF1dLF8xOHMwWzFdKTtcclxuXHRcdFx0XzE5ID0gKChCZC5fVGV4dHVyZSAqIDUpICsgXzE4KTtcclxuXHRcdFx0Y3R4LlMoWGIuUGQsWzAuNSwwLjVdKTtcclxuXHRcdFx0Y3R4LlUoWGIuTWMsIF8xMik7XHJcblx0XHRcdGN0eC5WKFhiLk5kLF8xNixfMTYpO1xyXG5cdFx0XHRjdHguVChYYi5nZixbMSwxLDFdKTtcclxuXHRcdFx0WGIuT2QgPSBfMTc7XHJcblx0XHRcdFhiLlFjID0gKF8xOSA8IDApID8gMCA6ICgoXzE5ID49IDE1KSA/IDE0IDogXzE5KTtcclxuXHRcdH1cclxuXHJcblx0XHR0aGlzLkNjID0gZnVuY3Rpb24oQmQsIFhiLCBXYykge1xyXG5cdFx0XHRfMTEgPSAxO1xyXG5cdFx0XHRpZiAoWGIuXyA+IF8xMSkgcmV0dXJuIHRydWU7XHJcblx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdH1cclxuXHJcblxyXG5cdH1cclxuXHJcblx0ZnVuY3Rpb24gRW1pdHRlcl9TdHJpcGVfcGFyZW50KCkge1xyXG5cclxuXHRcdHZhciBfMSA9IFtdLCBfMywgXzUgPSBbXSwgXzc9W10sIF83eD1bXSwgXzd5PVtdLCBfN3o9W10sIF84LCBfOGkwLCBfOHMwID0gW10sIF85ID0gW10sIF8xMD1bXSwgXzEwZnM9W10sIF8xMHZzPVtdLCBfMTBydz1bXSwgXzEwcnduPVtdLCBfMTByd2wsIF8xMHY9W10sIF8xMHA9W10sIF8xMGR0bCwgXzEwZHRwLCBfMTBkZiwgXzEwZnNkPVtdLCBfMTE7XHJcblx0XHR0aGlzLnBlID0gW107XHJcblx0XHR0aGlzLm5hbWUgPSBcIlN0cmlwZV9wYXJlbnRcIjtcclxuXHJcblx0XHR0aGlzLnVkID0gZnVuY3Rpb24oQmQpIHtcclxuXHRcdFx0QmQuX1RleHR1cmUgPSAwO1xyXG5cdFx0XHRCZC5kZCgpO1xyXG5cdFx0XHRCZC51YyhuZXcgRW1pdHRlcl9TdHJpcGVfY2hpbGQoKSwgeyB4YzogMSwgc2Q6IGZhbHNlIH0pO1xyXG5cdFx0XHRCZC5fOCA9IFtcclxuXHRcdFx0XHRbXHJcblx0XHRcdFx0XHRbMCwwLjAzMTQ5NjQsMC4xMzYyNDYsMC4zMjg1MDcsMC41OTY0NCwwLjg5MDY4MiwxLjE2MDM1LDEuMzg0MDcsMS41NjE1MiwxLjY5OTA4LDEuODAzNzMsMS44ODEzMiwxLjkzNjQ5LDEuOTcyODcsMS45OTMzLDIsMl1cclxuXHRcdFx0XHRdXHJcblx0XHRcdF07XHJcblx0XHRcdEJkLmpkID0gMTAwO1xyXG5cdFx0XHRCZC5WYyA9IDA7XHJcblx0XHR9XHJcblxyXG5cdFx0dGhpcy5NYiA9IGZ1bmN0aW9uKHZkKSB7XHJcblx0XHRcdHZkLnpiID0gNTtcclxuXHRcdFx0dmQuR2IgPSAwLjk0O1xyXG5cdFx0XHR2ZC5KYiA9IDYwO1xyXG5cdFx0XHR2ZC5JYiA9IDE7XHJcblx0XHR9XHJcblxyXG5cdFx0dGhpcy5QYiA9IGZ1bmN0aW9uKFFiLCBCZCwgdmQpIHtcclxuXHRcdFx0dmQuemIgPSA1O1xyXG5cdFx0fVxyXG5cclxuXHRcdHRoaXMuZmQgPSBmdW5jdGlvbihCZCwgWGIpIHtcclxuXHRcdFx0WGIuXyA9IDAuMDtcclxuXHRcdFx0Y3R4LlcoXzEsIDAsIC0wLCAwKTtcclxuXHRcdFx0WGIuXzIgPSBbXTtcclxuXHRcdFx0Y3R4LnJiKFhiLl8yLCBfMSwgQmQuTWMpO1xyXG5cdFx0XHRjdHguYyhYYi5fMiwgQmQuQWIsIFhiLl8yKTtcclxuXHRcdFx0XzMgPSAwICsgQmQuTGQucmFuZCgpICogKDUgLSAwKTtcclxuXHRcdFx0WGIuXzQgPSBfMztcclxuXHRcdFx0Y3R4LnJhbmR2M2dlbihfNSwgMTAwMCwgQmQuTGQucmFuZCk7XHJcblx0XHRcdFhiLl82ID0gW107XHJcblx0XHRcdGN0eC5yYihYYi5fNiwgXzUsIEJkLk1jKTtcclxuXHRcdFx0Y3R4LmMoWGIuXzYsIEJkLmFkLCBYYi5fNik7XHJcblx0XHRcdGN0eC5UKFhiLkFiLCBYYi5fMik7XHJcblx0XHRcdGN0eC5RKF83eiwgWzAsMCwxXSk7XHJcblx0XHRcdGN0eC5JKF83eCwgWGIuXzYsIF83eik7XHJcblx0XHRcdGN0eC5RKF83eCwgXzd4KTtcclxuXHRcdFx0Y3R4LkkoXzd5LCBfN3osIF83eCk7XHJcblx0XHRcdGN0eC5wYihfNywgXzd4LCBfN3ksIF83eik7XHJcblx0XHRcdFhiLnBjKDApLl9Sb3RhdGlvbiA9IF83O1xyXG5cdFx0XHRYYi5wYygwKS5fVGV4dHVyZSA9IEJkLl9UZXh0dXJlO1xyXG5cdFx0fVxyXG5cclxuXHRcdHRoaXMuZ2QgPSBmdW5jdGlvbihCZCwgWGIpIHtcclxuXHRcdFx0WGIuXyA9IDAuMDtcclxuXHRcdFx0Y3R4LlcoXzEsIDAsIC0wLCAwKTtcclxuXHRcdFx0WGIuXzIgPSBbXTtcclxuXHRcdFx0Y3R4LnJiKFhiLl8yLCBfMSwgQmQuTWMpO1xyXG5cdFx0XHRjdHguYyhYYi5fMiwgQmQuQWIsIFhiLl8yKTtcclxuXHRcdFx0XzMgPSAwICsgQmQuTGQucmFuZCgpICogKDUgLSAwKTtcclxuXHRcdFx0WGIuXzQgPSBfMztcclxuXHRcdFx0Y3R4LnJhbmR2M2dlbihfNSwgMTAwMCwgQmQuTGQucmFuZCk7XHJcblx0XHRcdFhiLl82ID0gW107XHJcblx0XHRcdGN0eC5yYihYYi5fNiwgXzUsIEJkLk1jKTtcclxuXHRcdFx0Y3R4LmMoWGIuXzYsIEJkLmFkLCBYYi5fNik7XHJcblx0XHRcdGN0eC5UKFhiLkFiLCBYYi5fMik7XHJcblx0XHRcdGN0eC5RKF83eiwgWzAsMCwxXSk7XHJcblx0XHRcdGN0eC5JKF83eCwgWGIuXzYsIF83eik7XHJcblx0XHRcdGN0eC5RKF83eCwgXzd4KTtcclxuXHRcdFx0Y3R4LkkoXzd5LCBfN3osIF83eCk7XHJcblx0XHRcdGN0eC5wYihfNywgXzd4LCBfN3ksIF83eik7XHJcblx0XHRcdFhiLnBjKDApLl9Sb3RhdGlvbiA9IF83O1xyXG5cdFx0XHRYYi5wYygwKS5fVGV4dHVyZSA9IEJkLl9UZXh0dXJlO1xyXG5cdFx0fVxyXG5cclxuXHRcdHRoaXMucWMgPSBmdW5jdGlvbihRYiwgQmQsIFhiKSB7XHJcblx0XHRcdFhiLl8gKz0gUWI7XHJcblx0XHRcdF84aTA9KEJkLlJiPDA/MDooQmQuUmI+MT8xOkJkLlJiKSk7XHJcblx0XHRcdGN0eC5WKF84czAsMCwoXzhpMC0wKSoxNSk7XHJcblx0XHRcdF84ID0gRGIubmIoQmQuXzhbMF1bXzhzMFswXV0sXzhzMFsxXSk7XHJcblx0XHRcdGN0eC5XKF85LCAwLCAxMDAsIDApO1xyXG5cdFx0XHRjdHguVChfMTBmcywgXzkpO1xyXG5cdFx0XHRjdHguVChfMTB2cywgWzAsMCwwXSk7XHJcblx0XHRcdF8xMGR0bCA9IFFiO1xyXG5cdFx0XHRjdHguVChfMTB2LCBYYi5fNik7XHJcblx0XHRcdGN0eC5UKF8xMHAsIFhiLl8yKTtcclxuXHRcdFx0d2hpbGUgKF8xMGR0bCA+IDAuMDAwMSkge1xyXG5cdFx0XHRcdF8xMGR0cCA9IF8xMGR0bDtcclxuXHRcdFx0XHRjdHguVChfMTBmc2QsIF8xMGZzKTtcclxuXHRcdFx0XHRjdHguZyhfMTBydywgXzEwdnMsIF8xMHYpO1xyXG5cdFx0XHRcdF8xMHJ3bCA9IGN0eC5QKF8xMHJ3KTtcclxuXHRcdFx0XHRpZiAoXzEwcndsID4gMC4wMDAxKSB7XHJcblx0XHRcdFx0XHRfMTByd2wgPSBNYXRoLnNxcnQoXzEwcndsKTtcclxuXHRcdFx0XHRcdGN0eC53KF8xMHJ3biwgXzEwcncsIF8xMHJ3bCk7XHJcblx0XHRcdFx0XHRfMTBkZiA9IDAuMDEgKiBfOCAqIF8xMHJ3bDtcclxuXHRcdFx0XHRcdGlmIChfMTBkZiAqIF8xMGR0cCA+IDAuMilcclxuXHRcdFx0XHRcdFx0XzEwZHRwID0gMC4yIC8gXzEwZGY7XHJcblx0XHRcdFx0XHRjdHguYyhfMTBmc2QsIF8xMGZzZCwgY3R4LnYoXzEwcnduLCBfMTByd2wgKiBfMTBkZikpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRjdHguYyhfMTB2LCBfMTB2LCBjdHgudihfMTBmc2QsIF8xMGR0cCkpO1xyXG5cdFx0XHRcdGN0eC5jKF8xMHAsIF8xMHAsIGN0eC52KF8xMHYsIF8xMGR0cCkpO1xyXG5cdFx0XHRcdF8xMGR0bCAtPSBfMTBkdHA7XHJcblx0XHRcdH1cclxuXHRcdFx0Y3R4LlQoWGIuXzIsIF8xMHApO1xyXG5cdFx0XHRjdHguVChYYi5fNiwgXzEwdik7XHJcblx0XHRcdGN0eC5UKFhiLkFiLCBYYi5fMik7XHJcblx0XHRcdGN0eC5RKF83eiwgWzAsMCwxXSk7XHJcblx0XHRcdGN0eC5JKF83eCwgWGIuXzYsIF83eik7XHJcblx0XHRcdGN0eC5RKF83eCwgXzd4KTtcclxuXHRcdFx0Y3R4LkkoXzd5LCBfN3osIF83eCk7XHJcblx0XHRcdGN0eC5wYihfNywgXzd4LCBfN3ksIF83eik7XHJcblx0XHRcdFhiLnBjKDApLl9Sb3RhdGlvbiA9IF83O1xyXG5cdFx0XHRYYi5wYygwKS5fVGV4dHVyZSA9IEJkLl9UZXh0dXJlO1xyXG5cdFx0fVxyXG5cclxuXHRcdHRoaXMuQ2MgPSBmdW5jdGlvbihCZCwgWGIsIFdjKSB7XHJcblx0XHRcdF8xMSA9IDE7XHJcblx0XHRcdGlmIChYYi5fID4gXzExKSByZXR1cm4gdHJ1ZTtcclxuXHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cdFx0fVxyXG5cclxuXHJcblx0fVxyXG5cclxuXHRmdW5jdGlvbiBFbWl0dGVyX1NwYXJrcygpIHtcclxuXHJcblx0XHR2YXIgXywgX2kwLCBfczAgPSBbXSwgXzIgPSBbXSwgXzQsIF82LCBfOCwgXzEwLCBfMTIgPSBbXSwgXzE0PVtdLCBfMTUsIF8xNiwgXzE3LCBfMTdpMCwgXzE3czAgPSBbXSwgXzE4LCBfMTk7XHJcblx0XHR0aGlzLnBlID0gW3t4ZTowLFJjOjIsU2M6MyxyZW5kZXJTdHlsZUluZGV4OjF9XTtcclxuXHRcdHRoaXMubmFtZSA9IFwiU3BhcmtzXCI7XHJcblxyXG5cdFx0dGhpcy51ZCA9IGZ1bmN0aW9uKEJkKSB7XHJcblx0XHRcdEJkLl9UZXh0dXJlID0gMDtcclxuXHRcdFx0QmQuXyA9IFtcclxuXHRcdFx0XHRbXHJcblx0XHRcdFx0XHRbMCwwLDBdLFxyXG5cdFx0XHRcdFx0WzIsMiwyXVxyXG5cdFx0XHRcdF1cclxuXHRcdFx0XTtcclxuXHRcdFx0QmQuZGQoKTtcclxuXHRcdFx0QmQuXzE3ID0gW1xyXG5cdFx0XHRcdFtcclxuXHRcdFx0XHRcdFswLDAuMTQ5NzA5LDAuNDYwOTc1LDAuODAzMjM3LDEuMDgzMDMsMS4yOTkxOSwxLjQ2NzE3LDEuNTk5MjYsMS43MDM5LDEuNzg2OSwxLjg1MjM2LDEuOTAzMjgsMS45NDE5NCwxLjk3MDA3LDEuOTg5MDYsMiwyXSxcclxuXHRcdFx0XHRcdFsyLDEuNjY5OTQsMS4zNzM2MywxLjExNTM1LDAuODk1MjE1LDAuNzEwNDQzLDAuNTU2OTA4LDAuNDMwMjA2LDAuMzI2MjQ1LDAuMjQxNDY1LDAuMTcyODc1LDAuMTE4LDAuMDc0ODA2NywwLjA0MTYyMTUsMC4wMTcwNjY1LDAsMF0sXHJcblx0XHRcdFx0XHRbMCwwLjgyMjU3MSwwLjgyMjU3MV0sXHJcblx0XHRcdFx0XHRbMC44MjI1NzEsMC4yMzAzNjgsMC4yMzAzNjhdLFxyXG5cdFx0XHRcdFx0WzAuMjMwMzY4LDAuNywwLjddLFxyXG5cdFx0XHRcdFx0WzAuNywwLDBdLFxyXG5cdFx0XHRcdFx0WzAsMC42LDAuNl0sXHJcblx0XHRcdFx0XHRbMC42LDAsMF1cclxuXHRcdFx0XHRdXHJcblx0XHRcdF07XHJcblx0XHRcdEJkLmpkID0gMTAwO1xyXG5cdFx0XHRCZC5WYyA9IDA7XHJcblx0XHR9XHJcblxyXG5cdFx0dGhpcy5NYiA9IGZ1bmN0aW9uKHZkKSB7XHJcblx0XHRcdHZkLnpiID0gNTtcclxuXHRcdFx0dmQuR2IgPSAxO1xyXG5cdFx0XHR2ZC5KYiA9IDEwMDtcclxuXHRcdFx0dmQuSWIgPSAxO1xyXG5cdFx0fVxyXG5cclxuXHRcdHRoaXMuUGIgPSBmdW5jdGlvbihRYiwgQmQsIHZkKSB7XHJcblx0XHRcdF9pMD0oQmQuUmI8MD8wOihCZC5SYj4yPzI6QmQuUmIpKTtcclxuXHRcdFx0X2kwPDAuOT9jdHguVihfczAsMCwoX2kwLTApKjEuMTExMTEpOmN0eC5WKF9zMCwxLChfaTAtMC45KSowLjkwOTA5MSk7XHJcblx0XHRcdF8gPSBEYi5uYihCZC5fWzBdW19zMFswXV0sX3MwWzFdKTtcclxuXHRcdFx0dmQuemIgPSBfO1xyXG5cdFx0fVxyXG5cclxuXHRcdHRoaXMuZmQgPSBmdW5jdGlvbihCZCwgWGIpIHtcclxuXHRcdFx0WGIuXzEgPSAwLjA7XHJcblx0XHRcdGN0eC5yYW5kdjNnZW4oXzIsIDMwMCwgQmQuTGQucmFuZCk7XHJcblx0XHRcdFhiLl8zID0gW107XHJcblx0XHRcdGN0eC5yYihYYi5fMywgXzIsIEJkLk1jKTtcclxuXHRcdFx0Y3R4LmMoWGIuXzMsIEJkLkFiLCBYYi5fMyk7XHJcblx0XHRcdF80ID0gMCArIEJkLkxkLnJhbmQoKSAqICgzNjAgLSAwKTtcclxuXHRcdFx0WGIuXzUgPSBfNDtcclxuXHRcdFx0XzYgPSAwICsgQmQuTGQucmFuZCgpICogKDIgLSAwKTtcclxuXHRcdFx0WGIuXzcgPSBfNjtcclxuXHRcdFx0XzggPSAyMCArIEJkLkxkLnJhbmQoKSAqICg0MCAtIDIwKTtcclxuXHRcdFx0WGIuXzkgPSBfODtcclxuXHRcdFx0XzEwID0gMS41ICsgQmQuTGQucmFuZCgpICogKDMgLSAxLjUpO1xyXG5cdFx0XHRYYi5fMTEgPSBfMTA7XHJcblx0XHRcdGN0eC5XKF8xMiwgMCwgMjAsIDApO1xyXG5cdFx0XHRYYi5fMTMgPSBbXTtcclxuXHRcdFx0Y3R4LnJiKFhiLl8xMywgXzEyLCBCZC5NYyk7XHJcblx0XHRcdGN0eC5jKFhiLl8xMywgQmQuYWQsIFhiLl8xMyk7XHJcblx0XHRcdGN0eC5UKFhiLkFiLCBYYi5fMyk7XHJcblx0XHR9XHJcblxyXG5cdFx0dGhpcy5nZCA9IGZ1bmN0aW9uKEJkLCBYYikge1xyXG5cdFx0XHRYYi5fMSA9IDAuMDtcclxuXHRcdFx0Y3R4LnJhbmR2M2dlbihfMiwgMzAwLCBCZC5MZC5yYW5kKTtcclxuXHRcdFx0WGIuXzMgPSBbXTtcclxuXHRcdFx0Y3R4LnJiKFhiLl8zLCBfMiwgQmQuTWMpO1xyXG5cdFx0XHRjdHguYyhYYi5fMywgQmQuQWIsIFhiLl8zKTtcclxuXHRcdFx0XzQgPSAwICsgQmQuTGQucmFuZCgpICogKDM2MCAtIDApO1xyXG5cdFx0XHRYYi5fNSA9IF80O1xyXG5cdFx0XHRfNiA9IDAgKyBCZC5MZC5yYW5kKCkgKiAoMiAtIDApO1xyXG5cdFx0XHRYYi5fNyA9IF82O1xyXG5cdFx0XHRfOCA9IDIwICsgQmQuTGQucmFuZCgpICogKDQwIC0gMjApO1xyXG5cdFx0XHRYYi5fOSA9IF84O1xyXG5cdFx0XHRfMTAgPSAxLjUgKyBCZC5MZC5yYW5kKCkgKiAoMyAtIDEuNSk7XHJcblx0XHRcdFhiLl8xMSA9IF8xMDtcclxuXHRcdFx0Y3R4LlcoXzEyLCAwLCAyMCwgMCk7XHJcblx0XHRcdFhiLl8xMyA9IFtdO1xyXG5cdFx0XHRjdHgucmIoWGIuXzEzLCBfMTIsIEJkLk1jKTtcclxuXHRcdFx0Y3R4LmMoWGIuXzEzLCBCZC5hZCwgWGIuXzEzKTtcclxuXHRcdFx0Y3R4LlQoWGIuQWIsIFhiLl8zKTtcclxuXHRcdH1cclxuXHJcblx0XHR0aGlzLnFjID0gZnVuY3Rpb24oUWIsIEJkLCBYYikge1xyXG5cdFx0XHRYYi5fMSArPSBRYjtcclxuXHRcdFx0Y3R4LlQoXzE0LCBYYi5fMTMpO1xyXG5cdFx0XHRjdHgudShfMTQsIF8xNCwgUWIpO1xyXG5cdFx0XHRjdHguYyhfMTQsIF8xNCwgWGIuXzMpO1xyXG5cdFx0XHRjdHguVChYYi5fMywgXzE0KTtcclxuXHRcdFx0XzE1ID0gWGIuXzUgKyBRYiAqIDkwO1xyXG5cdFx0XHRYYi5fNSA9IF8xNTtcclxuXHRcdFx0Y3R4LlQoWGIuQWIsIFhiLl8zKTtcclxuXHRcdFx0XzE2ID0gKFhiLl8xIC8gWGIuXzExKTtcclxuXHRcdFx0XzE3aTA9KF8xNjwwPzA6KF8xNj4xPzE6XzE2KSk7XHJcblx0XHRcdF8xN2kwPDAuNzQ0Njg5P18xN2kwPDAuNj9fMTdpMDwwLjA1Nzc3MDQ/Y3R4LlYoXzE3czAsMCwoXzE3aTAtMCkqMjU5LjY0OCk6Y3R4LlYoXzE3czAsMSwoXzE3aTAtMC4wNTc3NzA0KSoyNy42NjM2KTpfMTdpMDwwLjYzMTE4Nz9jdHguVihfMTdzMCwyLChfMTdpMC0wLjYpKjMyLjA2NDYpOmN0eC5WKF8xN3MwLDMsKF8xN2kwLTAuNjMxMTg3KSo4LjgxMDQ1KTpfMTdpMDwwLjk/XzE3aTA8MC43NzI/Y3R4LlYoXzE3czAsNCwoXzE3aTAtMC43NDQ2ODkpKjM2LjYxNDcpOmN0eC5WKF8xN3MwLDUsKF8xN2kwLTAuNzcyKSo3LjgxMjUpOl8xN2kwPDAuOTQyMDQ0P2N0eC5WKF8xN3MwLDYsKF8xN2kwLTAuOSkqMjMuNzg0OCk6Y3R4LlYoXzE3czAsNywoXzE3aTAtMC45NDIwNDQpKjE3LjI1NDQpO1xyXG5cdFx0XHRfMTcgPSBEYi5uYihCZC5fMTdbMF1bXzE3czBbMF1dLF8xN3MwWzFdKTtcclxuXHRcdFx0XzE4ID0gKFhiLl85ICogXzE3KTtcclxuXHRcdFx0XzE5ID0gKChCZC5fVGV4dHVyZSAqIDIpICsgWGIuXzcpO1xyXG5cdFx0XHRjdHguUyhYYi5QZCxbMC41LDAuNV0pO1xyXG5cdFx0XHRYYi5NZCA9IFhiLl81O1xyXG5cdFx0XHRjdHguVihYYi5OZCxfMTgsXzE4KTtcclxuXHRcdFx0Y3R4LlQoWGIuZ2YsWzEsMSwxXSk7XHJcblx0XHRcdFhiLk9kID0gMTtcclxuXHRcdFx0WGIuUWMgPSAoXzE5IDwgMCkgPyAwIDogKChfMTkgPj0gNikgPyA1IDogXzE5KTtcclxuXHRcdH1cclxuXHJcblx0XHR0aGlzLkNjID0gZnVuY3Rpb24oQmQsIFhiLCBXYykge1xyXG5cdFx0XHRpZiAoWGIuXzEgPiBYYi5fMTEpIHJldHVybiB0cnVlO1xyXG5cdFx0XHRyZXR1cm4gZmFsc2U7XHJcblx0XHR9XHJcblxyXG5cclxuXHR9XHJcblxyXG5cdGZ1bmN0aW9uIEVtaXR0ZXJfU3BsYXNoKCkge1xyXG5cclxuXHRcdHZhciBfMSA9IFtdLCBfNSwgXzQsIF82LCBfNywgXzdpMCwgXzdzMCA9IFtdLCBfOCwgXzk7XHJcblx0XHR0aGlzLnBlID0gW3t4ZTowLFJjOjUsU2M6MyxyZW5kZXJTdHlsZUluZGV4OjB9XTtcclxuXHRcdHRoaXMubmFtZSA9IFwiU3BsYXNoXCI7XHJcblxyXG5cdFx0dGhpcy51ZCA9IGZ1bmN0aW9uKEJkKSB7XHJcblx0XHRcdEJkLmRkKCk7XHJcblx0XHRcdEJkLl83ID0gW1xyXG5cdFx0XHRcdFtcclxuXHRcdFx0XHRcdFswLDEsMV0sXHJcblx0XHRcdFx0XHRbMSwwLjk5MDgzNSwwLjk2OTM1MSwwLjkzODA5MywwLjg5ODU4NiwwLjg1MTc4MSwwLjc5ODI2NSwwLjczODM2OCwwLjY3MjIxNywwLjU5OTc2MiwwLjUyMDc2NiwwLjQzNDc5LDAuMzQxMTI4LDAuMjM4NzAzLDAuMTI1ODY5LDAsMF1cclxuXHRcdFx0XHRdXHJcblx0XHRcdF07XHJcblx0XHRcdEJkLmpkID0gMTAwO1xyXG5cdFx0XHRCZC5WYyA9IDA7XHJcblx0XHR9XHJcblxyXG5cdFx0dGhpcy5NYiA9IGZ1bmN0aW9uKHZkKSB7XHJcblx0XHRcdHZkLnpiID0gNTtcclxuXHRcdFx0dmQuR2IgPSAxO1xyXG5cdFx0XHR2ZC5KYiA9IDE7XHJcblx0XHRcdHZkLkliID0gMTtcclxuXHRcdH1cclxuXHJcblx0XHR0aGlzLlBiID0gZnVuY3Rpb24oUWIsIEJkLCB2ZCkge1xyXG5cdFx0XHR2ZC56YiA9IDU7XHJcblx0XHR9XHJcblxyXG5cdFx0dGhpcy5mZCA9IGZ1bmN0aW9uKEJkLCBYYikge1xyXG5cdFx0XHRYYi5fID0gMC4wO1xyXG5cdFx0XHRjdHguVyhfMSwgMCwgMCwgMCk7XHJcblx0XHRcdFhiLl8yID0gW107XHJcblx0XHRcdGN0eC5yYihYYi5fMiwgXzEsIEJkLk1jKTtcclxuXHRcdFx0Y3R4LmMoWGIuXzIsIEJkLkFiLCBYYi5fMik7XHJcblx0XHRcdFhiLl8zID0gMDtcclxuXHRcdFx0Y3R4LlQoWGIuQWIsIFhiLl8yKTtcclxuXHRcdH1cclxuXHJcblx0XHR0aGlzLmdkID0gZnVuY3Rpb24oQmQsIFhiKSB7XHJcblx0XHRcdFhiLl8gPSAwLjA7XHJcblx0XHRcdGN0eC5XKF8xLCAwLCAwLCAwKTtcclxuXHRcdFx0WGIuXzIgPSBbXTtcclxuXHRcdFx0Y3R4LnJiKFhiLl8yLCBfMSwgQmQuTWMpO1xyXG5cdFx0XHRjdHguYyhYYi5fMiwgQmQuQWIsIFhiLl8yKTtcclxuXHRcdFx0WGIuXzMgPSAwO1xyXG5cdFx0XHRjdHguVChYYi5BYiwgWGIuXzIpO1xyXG5cdFx0fVxyXG5cclxuXHRcdHRoaXMucWMgPSBmdW5jdGlvbihRYiwgQmQsIFhiKSB7XHJcblx0XHRcdFhiLl8gKz0gUWI7XHJcblx0XHRcdGN0eC5UKFhiLkFiLCBYYi5fMik7XHJcblx0XHRcdF81ID0gMzAwO1xyXG5cdFx0XHRfNCA9IDAuMztcclxuXHRcdFx0XzYgPSAoWGIuXyAvIF80KTtcclxuXHRcdFx0XzdpMD0oXzY8MD8wOihfNj4xPzE6XzYpKTtcclxuXHRcdFx0XzdpMDwwLjE/Y3R4LlYoXzdzMCwwLChfN2kwLTApKjEwKTpjdHguVihfN3MwLDEsKF83aTAtMC4xKSoxNi42NjY3KTtcclxuXHRcdFx0XzcgPSBEYi5uYihCZC5fN1swXVtfN3MwWzBdXSxfN3MwWzFdKTtcclxuXHRcdFx0XzggPSAoXzUgKiBfNyk7XHJcblx0XHRcdF85ID0gMDtcclxuXHRcdFx0Y3R4LlMoWGIuUGQsWzAuNSwwLjVdKTtcclxuXHRcdFx0WGIuTWQgPSBYYi5fMztcclxuXHRcdFx0Y3R4LlYoWGIuTmQsXzgsXzgpO1xyXG5cdFx0XHRjdHguVChYYi5nZixbMSwxLDFdKTtcclxuXHRcdFx0WGIuT2QgPSAxO1xyXG5cdFx0XHRYYi5RYyA9IChfOSA8IDApID8gMCA6ICgoXzkgPj0gMTUpID8gMTQgOiBfOSk7XHJcblx0XHR9XHJcblxyXG5cdFx0dGhpcy5DYyA9IGZ1bmN0aW9uKEJkLCBYYiwgV2MpIHtcclxuXHRcdFx0XzQgPSAwLjM7XHJcblx0XHRcdGlmIChYYi5fID4gXzQpIHJldHVybiB0cnVlO1xyXG5cdFx0XHRyZXR1cm4gZmFsc2U7XHJcblx0XHR9XHJcblxyXG5cclxuXHR9XHJcblxyXG5cdGZ1bmN0aW9uIEVtaXR0ZXJfRmlyZXdvcmtzX3BhcmVudCgpIHtcclxuXHJcblx0XHR2YXIgXywgX2kwLCBfczAgPSBbXSwgXzIsIF8zID0gW10sIF8zaSwgXzNzID0gW10sIF80ID0gW10sIF80aSwgXzRzID0gW10sIF81LCBfNiA9IFtdLCBfNyA9IFtdLCBfMTAsIF8xMSwgXzExaTAsIF8xMXMwID0gW10sIF8xMztcclxuXHRcdHRoaXMucGUgPSBbXTtcclxuXHRcdHRoaXMubmFtZSA9IFwiRmlyZXdvcmtzX3BhcmVudFwiO1xyXG5cclxuXHRcdHRoaXMudWQgPSBmdW5jdGlvbihCZCkge1xyXG5cdFx0XHRCZC5fID0gW1xyXG5cdFx0XHRcdFtcclxuXHRcdFx0XHRcdFsxLjQ3MzAxLDEuNDczMDEsMS40NzMwMV0sXHJcblx0XHRcdFx0XHRbMCwwLDBdXHJcblx0XHRcdFx0XVxyXG5cdFx0XHRdO1xyXG5cdFx0XHRCZC5kZCgpO1xyXG5cdFx0XHRCZC5fMyA9IFtcclxuXHRcdFx0XHRbWy0zODMuMTY4LDk4LjI3Ml0sWy0zODMuMTY4LC0xMDEuNzI4XSxbLTM4My4xNjgsLTEwMS43MjhdXVxyXG5cdFx0XHRdO1xyXG5cdFx0XHRCZC5fNCA9IFtcclxuXHRcdFx0XHRbWzQwNS42MzIsOTEuMzZdLFs0MDUuNjMyLC0xMDguNjRdLFs0MDUuNjMyLC0xMDguNjRdXVxyXG5cdFx0XHRdO1xyXG5cdFx0XHRCZC5fMTEgPSBbXHJcblx0XHRcdFx0W1xyXG5cdFx0XHRcdFx0WzAsMCwwXSxcclxuXHRcdFx0XHRcdFsxLDEsMV0sXHJcblx0XHRcdFx0XHRbMiwyLDJdXHJcblx0XHRcdFx0XVxyXG5cdFx0XHRdO1xyXG5cdFx0XHRCZC51YyhuZXcgRW1pdHRlcl9TdHJpcGVfcGFyZW50KCksIHsgeGM6IDEsIHNkOiBmYWxzZSB9KTtcclxuXHRcdFx0QmQudWMobmV3IEVtaXR0ZXJfU3BhcmtzKCksIHsgeGM6IDEsIHNkOiBmYWxzZSB9KTtcclxuXHRcdFx0QmQudWMobmV3IEVtaXR0ZXJfU3BsYXNoKCksIHsgeGM6IDEsIHNkOiBmYWxzZSB9KTtcclxuXHRcdFx0QmQuamQgPSAzO1xyXG5cdFx0XHRCZC5WYyA9IDA7XHJcblx0XHR9XHJcblxyXG5cdFx0dGhpcy5NYiA9IGZ1bmN0aW9uKHZkKSB7XHJcblx0XHRcdHZkLnpiID0gNTtcclxuXHRcdFx0dmQuR2IgPSAxO1xyXG5cdFx0XHR2ZC5KYiA9IDE7XHJcblx0XHR9XHJcblxyXG5cdFx0dGhpcy5QYiA9IGZ1bmN0aW9uKFFiLCBCZCwgdmQpIHtcclxuXHRcdFx0X2kwPShCZC5MZC5SYjwwPzA6KEJkLkxkLlJiPjUuOTk0MzI/KDArKChCZC5MZC5SYi0wKSU1Ljk5NDMyKSk6QmQuTGQuUmIpKTtcclxuXHRcdFx0X2kwPDEuNTAwNzc/Y3R4LlYoX3MwLDAsKF9pMC0wKSowLjY2NjMyMyk6Y3R4LlYoX3MwLDEsKF9pMC0xLjUwMDc3KSowLjIyMjU0MSk7XHJcblx0XHRcdF8gPSBEYi5uYihCZC5fWzBdW19zMFswXV0sX3MwWzFdKTtcclxuXHRcdFx0dmQuemIgPSBfO1xyXG5cdFx0fVxyXG5cclxuXHRcdHRoaXMuZmQgPSBmdW5jdGlvbihCZCwgWGIpIHtcclxuXHRcdFx0WGIuXzEgPSAwLjA7XHJcblx0XHRcdF8yID0gMCArIEJkLkxkLnJhbmQoKSAqICgxIC0gMCk7XHJcblx0XHRcdF8zaSA9IERiLmtiKF8yKTtcclxuXHRcdFx0Y3R4LlYoXzNzLDAsKF8zaS0wKSoxKTtcclxuXHRcdFx0RGIubGIoXzMsIEJkLl8zW18zc1swXV0sIF8zc1sxXSk7XHJcblx0XHRcdF80aSA9IERiLmtiKF8yKTtcclxuXHRcdFx0Y3R4LlYoXzRzLDAsKF80aS0wKSoxKTtcclxuXHRcdFx0RGIubGIoXzQsIEJkLl80W180c1swXV0sIF80c1sxXSk7XHJcblx0XHRcdF81ID0gMCArIEJkLkxkLnJhbmQoKSAqICgxIC0gMCk7XHJcblx0XHRcdGN0eC5ZKF82LCBfMywgXzQsIF81KTtcclxuXHRcdFx0Y3R4LlcoXzcsIF82WzBdLCBfNlsxXSwgMCk7XHJcblx0XHRcdFhiLl84ID0gW107XHJcblx0XHRcdGN0eC5yYihYYi5fOCwgXzcsIEJkLk1jKTtcclxuXHRcdFx0Y3R4LmMoWGIuXzgsIEJkLkFiLCBYYi5fOCk7XHJcblx0XHRcdFhiLl85ID0gMDtcclxuXHRcdFx0XzEwID0gMCArIEJkLkxkLnJhbmQoKSAqICgxIC0gMCk7XHJcblx0XHRcdF8xMWkwPShfMTA8MD8wOihfMTA+MT8xOl8xMCkpO1xyXG5cdFx0XHRfMTFpMDwwLjcxMDYyNj9fMTFpMDwwLjM4ODMwMj9jdHguVihfMTFzMCwwLChfMTFpMC0wKSoyLjU3NTMxKTpjdHguVihfMTFzMCwxLChfMTFpMC0wLjM4ODMwMikqMy4xMDI0Nyk6Y3R4LlYoXzExczAsMiwoXzExaTAtMC43MTA2MjYpKjMuNDU1NzMpO1xyXG5cdFx0XHRfMTEgPSBEYi5uYihCZC5fMTFbMF1bXzExczBbMF1dLF8xMXMwWzFdKTtcclxuXHRcdFx0WGIuXzEyID0gXzExO1xyXG5cdFx0XHRjdHguVChYYi5BYiwgWGIuXzgpO1xyXG5cdFx0XHRYYi5wYygwKS5fVGV4dHVyZSA9IFhiLl8xMjtcclxuXHRcdFx0WGIucGMoMSkuX1RleHR1cmUgPSBYYi5fMTI7XHJcblx0XHR9XHJcblxyXG5cdFx0dGhpcy5nZCA9IGZ1bmN0aW9uKEJkLCBYYikge1xyXG5cdFx0XHRYYi5fMSA9IDAuMDtcclxuXHRcdFx0XzIgPSAwICsgQmQuTGQucmFuZCgpICogKDEgLSAwKTtcclxuXHRcdFx0XzNpID0gRGIua2IoXzIpO1xyXG5cdFx0XHRjdHguVihfM3MsMCwoXzNpLTApKjEpO1xyXG5cdFx0XHREYi5sYihfMywgQmQuXzNbXzNzWzBdXSwgXzNzWzFdKTtcclxuXHRcdFx0XzRpID0gRGIua2IoXzIpO1xyXG5cdFx0XHRjdHguVihfNHMsMCwoXzRpLTApKjEpO1xyXG5cdFx0XHREYi5sYihfNCwgQmQuXzRbXzRzWzBdXSwgXzRzWzFdKTtcclxuXHRcdFx0XzUgPSAwICsgQmQuTGQucmFuZCgpICogKDEgLSAwKTtcclxuXHRcdFx0Y3R4LlkoXzYsIF8zLCBfNCwgXzUpO1xyXG5cdFx0XHRjdHguVyhfNywgXzZbMF0sIF82WzFdLCAwKTtcclxuXHRcdFx0WGIuXzggPSBbXTtcclxuXHRcdFx0Y3R4LnJiKFhiLl84LCBfNywgQmQuTWMpO1xyXG5cdFx0XHRjdHguYyhYYi5fOCwgQmQuQWIsIFhiLl84KTtcclxuXHRcdFx0WGIuXzkgPSAwO1xyXG5cdFx0XHRfMTAgPSAwICsgQmQuTGQucmFuZCgpICogKDEgLSAwKTtcclxuXHRcdFx0XzExaTA9KF8xMDwwPzA6KF8xMD4xPzE6XzEwKSk7XHJcblx0XHRcdF8xMWkwPDAuNzEwNjI2P18xMWkwPDAuMzg4MzAyP2N0eC5WKF8xMXMwLDAsKF8xMWkwLTApKjIuNTc1MzEpOmN0eC5WKF8xMXMwLDEsKF8xMWkwLTAuMzg4MzAyKSozLjEwMjQ3KTpjdHguVihfMTFzMCwyLChfMTFpMC0wLjcxMDYyNikqMy40NTU3Myk7XHJcblx0XHRcdF8xMSA9IERiLm5iKEJkLl8xMVswXVtfMTFzMFswXV0sXzExczBbMV0pO1xyXG5cdFx0XHRYYi5fMTIgPSBfMTE7XHJcblx0XHRcdGN0eC5UKFhiLkFiLCBYYi5fOCk7XHJcblx0XHRcdFhiLnBjKDApLl9UZXh0dXJlID0gWGIuXzEyO1xyXG5cdFx0XHRYYi5wYygxKS5fVGV4dHVyZSA9IFhiLl8xMjtcclxuXHRcdH1cclxuXHJcblx0XHR0aGlzLnFjID0gZnVuY3Rpb24oUWIsIEJkLCBYYikge1xyXG5cdFx0XHRYYi5fMSArPSBRYjtcclxuXHRcdFx0Y3R4LlQoWGIuQWIsIFhiLl84KTtcclxuXHRcdFx0WGIucGMoMCkuX1RleHR1cmUgPSBYYi5fMTI7XHJcblx0XHRcdFhiLnBjKDEpLl9UZXh0dXJlID0gWGIuXzEyO1xyXG5cdFx0fVxyXG5cclxuXHRcdHRoaXMuQ2MgPSBmdW5jdGlvbihCZCwgWGIsIFdjKSB7XHJcblx0XHRcdF8xMyA9IDI7XHJcblx0XHRcdGlmIChYYi5fMSA+IF8xMykgcmV0dXJuIHRydWU7XHJcblx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdH1cclxuXHJcblxyXG5cdH1cclxuXHJcblx0dGhpcy5xZCA9IGZ1bmN0aW9uKExkKSB7XHJcblx0XHRMZC5EZCA9IDAuMDMzMzMzMztcclxuXHRcdExkLlVkID0gMDtcclxuXHRcdExkLnByZXNpbUZyYW1lVGltZSA9IDAuMTtcclxuXHRcdExkLnJhbmQgPSBmdW5jdGlvbigpIHsgcmV0dXJuIE1hdGgucmFuZG9tKCk7IH07XHJcblx0XHRMZC5wZChuZXcgRW1pdHRlcl9GaXJld29ya3NfcGFyZW50KCkpO1xyXG5cdH1cclxuXHRcdHRoaXMua2IgPSBmdW5jdGlvbiAodikgeyBcdFx0XHRyZXR1cm4gKHYgPCAwKSA/IDAgOiAoKHYgPiAxKSA/IDEgOiB2KTsgXHRcdH1cclxuXHJcblx0XHR0aGlzLmxiID0gZnVuY3Rpb24gKHIsIHBhdGgsIGplKSB7IFx0XHRcdHZhciBpbmRleEludCA9IE1hdGguZmxvb3IoamUpOyBcdFx0XHR2YXIgbGVycCA9IGplIC0gaW5kZXhJbnQ7IFx0XHRcdGN0eC5ZKHIsIHBhdGhbaW5kZXhJbnRdLCBwYXRoW2luZGV4SW50ICsgMV0sIGxlcnApOyBcdFx0fVxyXG5cclxuXHRcdHRoaXMubmIgPSBmdW5jdGlvbihmdW5jVmFsdWVzLCBqZSkgeyBcdFx0XHR2YXIgaW5kZXhJbnQgPSBNYXRoLmZsb29yKGplKTsgXHRcdFx0dmFyIG5leHRJbnQgPSBpbmRleEludCArIDE7IFx0XHRcdHJldHVybiBjdHguWChmdW5jVmFsdWVzW2luZGV4SW50XSwgZnVuY1ZhbHVlc1tuZXh0SW50XSwgamUgLSBpbmRleEludCk7IFx0XHR9XHJcblxyXG5cclxufVxyXG5cclxucmV0dXJuIEZpcmV3b3JrczAxO1xyXG59KSk7Il19
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/neutrinoparticles/exported_effects/Fireworks02.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '08769ZLqc9Nu6D6l7xZB5mo', 'Fireworks02');
// neutrinoparticles/exported_effects/Fireworks02.js

"use strict";

// c3ebcd02-0d7c-41bb-b884-16930ec48c46
(function (root, factory) {
  if (typeof exports === 'object' && typeof module !== 'undefined') {
    module.exports = factory();
  } else if (typeof define === 'function' && define.amd) {
    define(['exports'], function (exports) {
      (root.NeutrinoEffect = exports)['Fireworks02'] = factory();
    });
  } else {
    var namespace = root.NeutrinoEffect || (root.NeutrinoEffect = {});
    namespace.__last__ = namespace['Fireworks02'] = factory();
  }
})(typeof self !== 'undefined' ? self : void 0, function () {
  function Fireworks02(ctx) {
    var Db = this;

    var ne = function ne(Ld, Bd) {
      this.Ld = Ld;
      this.Bd = Bd;

      if (this.Bd.we.pe.length > 0) {
        this.we = this.Bd.we.pe[0];
        this.Lc = [ne.prototype.Ec, ne.prototype.Fc][this.we.xe];
      } else this.we = null;
    };

    ne.prototype = {
      Ec: function Ec(fe, Ab, Xb) {
        var Gc = ctx.ib(Xb.Md);
        var Hc = Math.cos(Gc);
        var Ic = Math.sin(Gc);
        var ye = ctx.Ae(Xb.Nd[0]);
        var ze = ctx.Ae(Xb.Nd[1]);
        fe.
        /**/
        transform(ye * Hc, ye * Ic, ze * -Ic, ze * Hc, Ab[0], Ab[1]);
      },
      Fc: function Fc(fe, Ab, Xb) {
        var q = Xb.Mc;
        var z2 = 2.0 * q[2] * q[2];
        var xy = 2.0 * q[0] * q[1];
        var wz = 2.0 * q[3] * q[2];
        var ye = ctx.Ae(Xb.Nd[0]);
        var ze = ctx.Ae(Xb.Nd[1]);
        fe.
        /**/
        transform(ye * (1.0 - 2.0 * q[1] * q[1] - z2), ye * (xy + wz), ze * (wz - xy), ze * (2.0 * q[0] * q[0] + z2 - 1.0), Ab[0], Ab[1]);
      },
      Pc: function Pc(fe, Xb, ge) {
        Xb.vc(fe, -1, ge);

        if (this.we) {
          if (this.Be != null && !Xb.oc) {
            if (Xb.Od > 0.001) {
              var De = Math.floor(Xb.Qc % this.we.Rc);
              var Ee = Math.floor(Xb.Qc / this.we.Rc);
              var Ab = Xb.Ab.slice();
              var Nd = Xb.Nd.slice();

              if (!ge || ge.
              /**/
              transform(Ab, Nd)) {
                var df = Math.abs(Nd[0]);
                var ef = Math.abs(Nd[1]);

                if (df > 0.001 && ef > 0.001) {
                  fe.save();
                  this.Lc(fe, Ab, Xb);
                  fe.translate(-df * Xb.Pd[0], -ef * (1 - Xb.Pd[1]));
                  fe.globalAlpha *= Xb.Od;

                  if (Xb.gf[0] < 0.999 || Xb.gf[1] < 0.999 || Xb.gf[2] < 0.999) {
                    if (df >= 1 && ef >= 1) {
                      var Ye = df < this.Tc ? df : this.Tc;
                      var Ze = ef < this.Uc ? ef : this.Uc;
                      ctx.af(Ye, Ze);
                      ctx.bf.globalCompositeOperation = "copy";
                      ctx.bf.drawImage(this.Be.image, this.Be.x + this.Tc * De, this.Be.y + this.Uc * Ee, this.Tc, this.Uc, 0, 0, Ye, Ze);
                      ctx.bf.globalCompositeOperation = "multiply";
                      ctx.bf.fillStyle = ctx.ff(Xb.gf);
                      ctx.bf.fillRect(0, 0, Ye, Ze);
                      ctx.bf.globalCompositeOperation = "destination-atop";
                      ctx.bf.drawImage(this.Be.image, this.Be.x + this.Tc * De, this.Be.y + this.Uc * Ee, this.Tc, this.Uc, 0, 0, Ye, Ze);
                      fe.drawImage(ctx.cf, 0, 0, Ye, Ze, 0, 0, df, ef);
                    }
                  } else {
                    fe.drawImage(this.Be.image, this.Be.x + this.Tc * De, this.Be.y + this.Uc * Ee, this.Tc, this.Uc, 0, 0, df, ef);
                  }

                  fe.restore();
                }
              }
            }
          }
        }

        Xb.vc(fe, 1, ge);
      },
      Hd: function Hd(fe, ge) {
        fe.save();

        if (this.we) {
          fe.globalCompositeOperation = this.Ld.materials[this.Ld.
          /**/
          model.renderStyles[this.we.renderStyleIndex].materialIndex];
          this.Be = this.Ld.textureDescs[this.Ld.
          /**/
          model.renderStyles[this.we.renderStyleIndex].textureIndices[0]];
        } else {
          this.Be = null;
        }

        if (this.Be) {
          this.Tc = this.Be.width / this.we.Rc;
          this.Uc = this.Be.height / this.we.Sc;
        }

        function kd(a, b) {
          if (a.Ab[2] > b.Ab[2]) return 1;
          if (a.Ab[2] < b.Ab[2]) return -1;
          return 0;
        }

        switch (this.Bd.Vc) {
          case 0:
            for (var Wb = 0; Wb < this.Bd.tc.length; ++Wb) {
              this.Pc(fe, this.Bd.tc[Wb], ge);
            }

            break;

          case 1:
            for (var Wb = this.Bd.tc.length; Wb-- > 0;) {
              this.Pc(fe, this.Bd.tc[Wb], ge);
            }

            break;

          case 2:
            this.Bd.tc.sort(kd);

            for (var Wb = 0; Wb < this.Bd.tc.length; ++Wb) {
              this.Pc(fe, this.Bd.tc[Wb], ge);
            }

            break;
        }

        fe.restore();
      }
    };

    var oe = function oe(Ld, Bd) {
      this.Ld = Ld;
      this.Bd = Bd;
      if (this.Bd.we.pe.length > 0) this.we = this.Bd.we.pe[0];else this.we = null;
      this.vertex = [{
        /**/
        position: [0.0, 0.0, 0.0],

        /**/
        color: [0, 0, 0, 0],

        /**/
        texCoords: [[0.0, 0.0]]
      }, {
        /**/
        position: [0.0, 0.0, 0.0],

        /**/
        color: [0, 0, 0, 0],

        /**/
        texCoords: [[0.0, 0.0]]
      }, {
        /**/
        position: [0.0, 0.0, 0.0],

        /**/
        color: [0, 0, 0, 0],

        /**/
        texCoords: [[0.0, 0.0]]
      }, {
        /**/
        position: [0.0, 0.0, 0.0],

        /**/
        color: [0, 0, 0, 0],

        /**/
        texCoords: [[0.0, 0.0]]
      }];
    };

    oe.prototype = {
      qe: function qe(Xb, se, re, te, renderBuffer) {
        Xb.Ce(-1, se, re, te, renderBuffer);

        if (this.we) {
          if (!Xb.oc) {
            var v0 = this.vertex[0];
            var v1 = this.vertex[1];
            var v2 = this.vertex[2];
            var v3 = this.vertex[3];
            var Fe = [],
                Ge = [];

            if (this.we.xe == 0) {
              var a = ctx.ib(Xb.Md);
              var s = -Math.sin(a);
              var c = Math.cos(a);
              Fe[0] = se[0] * c + re[0] * s;
              Fe[1] = se[1] * c + re[1] * s;
              Fe[2] = se[2] * c + re[2] * s;
              Ge[0] = -se[0] * s + re[0] * c;
              Ge[1] = -se[1] * s + re[1] * c;
              Ge[2] = -se[2] * s + re[2] * c;
            } else {
              var q = Xb.Mc;
              var z2 = 2.0 * q[2] * q[2];
              var xy = 2.0 * q[0] * q[1];
              var wz = 2.0 * q[3] * q[2];
              Fe[0] = 1.0 - 2.0 * q[1] * q[1] - z2;
              Fe[1] = xy + wz;
              Fe[2] = 2.0 * q[0] * q[2] - 2.0 * q[3] * q[1];
              Ge[0] = xy - wz;
              Ge[1] = 1.0 - 2.0 * q[0] * q[0] - z2;
              Ge[2] = 2.0 * q[1] * q[2] + 2.0 * q[3] * q[0];
            }

            var He = [],
                Ie = [],
                Je = [],
                Ke = [];
            ctx.u(He, Fe, -Xb.Nd[0] * Xb.Pd[0]);
            ctx.u(Ie, Fe, Xb.Nd[0] * (1.0 - Xb.Pd[0]));
            ctx.u(Je, Ge, -Xb.Nd[1] * Xb.Pd[1]);
            ctx.u(Ke, Ge, Xb.Nd[1] * (1.0 - Xb.Pd[1]));
            ctx.c(v0.
            /**/
            position, He, Je);
            ctx.c(v0.
            /**/
            position, v0.
            /**/
            position, Xb.Ab);
            ctx.c(v1.
            /**/
            position, He, Ke);
            ctx.c(v1.
            /**/
            position, v1.
            /**/
            position, Xb.Ab);
            ctx.c(v2.
            /**/
            position, Ie, Ke);
            ctx.c(v2.
            /**/
            position, v2.
            /**/
            position, Xb.Ab);
            ctx.c(v3.
            /**/
            position, Ie, Je);
            ctx.c(v3.
            /**/
            position, v3.
            /**/
            position, Xb.Ab);
            {
              var rgb = ctx.v(Xb.gf, 255);
              v0.
              /**/
              color = v1.
              /**/
              color = v2.
              /**/
              color = v3.
              /**/
              color = [rgb[0], rgb[1], rgb[2], Xb.Od * 255];
            }
            {
              var De = Math.floor(Xb.Qc % this.we.Rc);
              var Ee = Math.floor(Xb.Qc / this.we.Rc);
              var Pe, Qe, Re, Se;
              var We = this.Ld.texturesRemap[this.Ld.
              /**/
              model.renderStyles[this.we.renderStyleIndex].textureIndices[0]];

              if (We) {
                var Ue = We.width / this.we.Rc;
                var Ve = We.height / this.we.Sc;
                var Pe = We.x + De * Ue;
                var Qe = Pe + Ue;
                var Re = We.y + We.height - Ee * Ve;
                var Se = Re - Ve;
              } else {
                var Ue = 1.0 / this.we.Rc;
                var Ve = 1.0 / this.we.Sc;
                var Pe = De * Ue;
                var Qe = Pe + Ue;
                var Re = 1.0 - Ee * Ve;
                var Se = Re - Ve;
              }

              v0.
              /**/
              texCoords[0] = [Pe, Se];
              v1.
              /**/
              texCoords[0] = [Pe, Re];
              v2.
              /**/
              texCoords[0] = [Qe, Re];
              v3.
              /**/
              texCoords[0] = [Qe, Se];
            }

            if (renderBuffer.beforeQuad) {
              renderBuffer.beforeQuad(this.we.renderStyleIndex);
            }

            renderBuffer.pushVertex(v0);
            renderBuffer.pushVertex(v1);
            renderBuffer.pushVertex(v2);
            renderBuffer.pushVertex(v3);

            if (!renderBuffer.__lastRenderCall) {
              renderBuffer.__lastRenderCall = new ctx.RenderCall(0, 6, this.we.renderStyleIndex);
            } else {
              var lastRenderCall = renderBuffer.__lastRenderCall;

              if (lastRenderCall.renderStyleIndex == this.we.renderStyleIndex) {
                lastRenderCall.numIndices += 6;
              } else {
                renderBuffer.pushRenderCall(lastRenderCall);
                renderBuffer.__lastRenderCall = new ctx.RenderCall(lastRenderCall.startIndex + lastRenderCall.numIndices, 6, this.we.renderStyleIndex);
              }
            }
          }
        }

        Xb.Ce(1, se, re, te, renderBuffer);
      },
      ue: function ue(se, re, te, renderBuffer) {
        switch (this.Bd.Vc) {
          case 0:
            for (var Wb = 0; Wb < this.Bd.tc.length; ++Wb) {
              this.qe(this.Bd.tc[Wb], se, re, te, renderBuffer);
            }

            break;

          case 1:
            for (var Wb = this.Bd.tc.length; Wb-- > 0;) {
              this.qe(this.Bd.tc[Wb], se, re, te, renderBuffer);
            }

            break;

          case 2:
            this.Bd.tc.forEach(function (Xb) {
              Xb.depth = ctx.H(te, Xb.Ab);
            });
            this.Bd.tc.sort(function (a, b) {
              if (a.depth < b.depth) return 1;
              if (a.depth > b.depth) return -1;
              return 0;
            });
            this.Bd.tc.forEach(function (Xb) {
              this.qe(Xb, se, re, te, renderBuffer);
            }, this);
            break;
        }
      }
    };

    var ld = function ld(Ld, we, ve) {
      var Vb = this;
      this.Ld = Ld;
      this.we = we; // Eb

      function Eb() {
        this.Fb = 0;
        this.Gb = 1;
        this.Hb = null;
        this.Ib = null;
        this.Kb = 0;
        this.Lb = 1;
        Vb.we.Mb(this); // IMPL

        this.Nb = function () {
          this.Ob = this.Gb;
          this.Fb = 0;
        };

        this.Nb();
      }

      Eb.prototype = {
        Jd: function Jd() {
          this.Nb();
        },
        Id: function Id(Qb, Ab, Mc) {
          Vb.we.Pb(Qb, Vb, this); // IMPL

          var Rb = Vb.Rb;
          var systemTime = Ld.Rb;
          var Sb = Qb;
          var ic = 0;

          if (this.zb > 0.000001) {
            var Tb = this.Ob + Qb * this.zb;

            while (Tb >= 1.0) {
              var Ub = this.zb < 0.001 ? 0.0 : (1.0 - this.Ob) / this.zb;
              Sb -= Ub;
              Rb += Ub;
              systemTime += Ub;

              if (this.Hb != null && Rb > this.Hb) {
                Vb.disactivate();
                break;
              }

              Vb.Rb = Rb;
              Ld.Rb = systemTime;
              if (Ab && Qb > 0) ctx.ab(Vb.Ab, Ab, Vb.Bb, Sb / Qb);
              if (Mc && Qb > 0) ctx.slerpq(Vb.Mc, Mc, Vb.prevRotation, Sb / Qb); // for the future when Jb would be external

              this.Lb = this.Jb;

              for (var Wb = 0; Wb < this.Jb; ++Wb) {
                if (Vb.sc.length == 0) break;
                if (this.Jb == 1) this.Kb = 0;else this.Kb = Wb / (this.Jb - 1);
                var Xb = Vb.sc.pop();
                Vb.tc.unshift(Xb);
                if (Wb == 0) Xb.Yb();else Xb.Zb();
                Xb.Id(Sb);
                ++ic;
              }

              this.Ob = 0.0;
              Tb -= 1.0;

              if (this.Ib != null && ++this.Fb >= this.Ib) {
                Vb.disactivate();
                break;
              }
            }

            this.Ob = Tb;
          }

          Rb += Sb;
          Vb.Rb = Rb;
          if (Ab) ctx.T(Vb.Ab, Ab);
          if (Mc) ctx.U(Vb.Mc, Mc);
          return ic;
        }
      }; // ac

      function ac() {
        this.Gb = 1;
        this.Kb = 0;
        this.Lb = 1;
        Vb.we.Mb(this); // IMPL

        this.Nb = function () {
          this.bc = this.Gb;
        };

        this.Nb();
      }

      ac.prototype = {
        Jd: function Jd() {
          this.Nb();
        },
        Id: function Id(Qb, Ab, Mc) {
          Vb.we.Pb(Qb, Vb, this); // IMPL

          var cc = Vb.Rb;
          var dc = cc + Qb;
          var systemTimeBeforeFrame = Ld.Rb;
          var systemTimeAfterFrame = systemTimeBeforeFrame + Qb;
          var ec = Ab ? ctx.O(ctx.h(Ab, Vb.Bb)) : 0;
          var ic = 0;

          if (ec > 0.000001) {
            var fc = ec / this.rd;
            var Tb = this.bc + fc;
            var hc = fc < 0.001 ? 1.0 - this.bc : (1.0 - this.bc) / fc;
            var jc = [];

            while (Tb > 1.0) {
              var kc = cc + hc * Qb;
              if (Ab) ctx.ab(jc, Vb.Bb, Ab, hc);
              Vb.Rb = kc;
              ctx.T(Vb.Ab, jc);
              Ld.Rb = ctx.X(systemTimeBeforeFrame, systemTimeAfterFrame, hc); // for the future when Jb would be external

              this.Lb = this.Jb;

              for (var Wb = 0; Wb < this.Jb; ++Wb) {
                if (Vb.sc.length == 0) break;
                if (this.Jb == 1) this.Kb = 0;else this.Kb = Wb / (this.Jb - 1);
                var Xb = Vb.sc.pop();
                Vb.tc.unshift(Xb);
                if (Wb == 0) Xb.Yb();else Xb.Zb();
                Xb.Id(Qb * (1.0 - hc));
                ++ic;
              }

              hc += 1.0 / fc;
              Tb -= 1.0;
            }

            this.bc = Tb;
          }

          Vb.Rb = dc;
          if (Ab) ctx.T(Vb.Ab, Ab);
          if (Mc) ctx.U(Vb.Mc, Mc);
          return ic;
        }
      }; // mc

      function mc() {
        this.Ab = [];
        this.Pd = [];
        this.Nd = [];
        this.gf = [];
        this.Kc = [];
      }

      mc.prototype = {
        nc: function nc() {
          this.oc = false;

          for (var i = 0; i < this.Kc.length; ++i) {
            var pc = this.Kc[i];
            pc.Bd.Jd(this.Ab, null);
            if (pc.Ad.sd) pc.Bd.disactivate();
          }
        },
        Yb: function Yb() {
          Vb.we.fd(Vb, this); // IMPL

          this.nc();
        },
        Zb: function Zb() {
          Vb.we.gd(Vb, this); // IMPL

          this.nc();
        },
        Id: function Id(Qb) {
          Vb.we.qc(Qb, Vb, this); // IMPL

          this.rc(Qb);
        },
        pc: function pc(je) {
          return this.Kc[je].Bd;
        },
        rc: function rc(Qb) {
          for (var i = 0; i < this.Kc.length; i++) {
            this.Kc[i].Bd.Id(Qb, this.Ab, null);
          }
        },
        uc: function uc(md, nd) {
          this.Kc.push({
            Bd: new ld(Ld, md, ve),
            Ad: nd
          });
        },
        vc: function vc(fe, xc, ge) {
          for (var i = 0; i < this.Kc.length; ++i) {
            var pc = this.Kc[i];
            if (xc == pc.Ad.xc) pc.Bd.Hd(fe, ge);
          }
        },
        Ce: function Ce(xc, se, re, te, renderBuffer) {
          for (var i = 0; i < this.Kc.length; ++i) {
            var pc = this.Kc[i];
            if (xc == pc.Ad.xc) pc.Bd.ue(se, re, te, renderBuffer);
          }
        },
        wc: function wc(fe) {
          this.oc = true;

          for (var i = 0; i < this.Kc.length; ++i) {
            var pc = this.Kc[i];

            if (pc.Ad.sd) {
              pc.Bd.activate();
              pc.Bd.Id(0);
            } else pc.Bd.disactivate();
          }
        },
        yc: function yc(Gd) {
          for (var i = 0; i < this.Kc.length; ++i) {
            this.Kc[i].Bd.Ed(Gd);
          }
        }
      }; // zc

      function zc() {}

      zc.prototype.Ac = function (Xb) {
        return Vb.we.Cc(Vb, Xb, this); // IMPL
      }; // ld Ad


      this.Ab = [];
      this.Bb = [];
      this.Mc = [];
      this.prevRotation = [];
      this.tc = [];
      this.sc = [];
      this.Wc = new zc();
      this.construct = new ve(this.Ld, this);
      this.Yc = [];
      this.ad = [];

      this.dd = function () {
        this.vd = new Eb();
      };

      this.ed = function () {
        this.vd = new ac();
      };

      this.we.ud(this); // IMPL

      for (var Wb = 0; Wb < this.jd; ++Wb) {
        var Xb = new mc();

        for (var id = 0; id < this.Yc.length; ++id) {
          var hd = this.Yc[id];
          Xb.uc(hd.Db, hd.Ad);
        }

        this.sc.push(Xb);
      }

      this.Nb = function (Ab, Mc) {
        ctx.T(this.Ab, Ab ? Ab : [0, 0, 0]);
        ctx.T(this.Bb, this.Ab);
        ctx.U(this.Mc, Mc ? Mc : [0, 0, 0, 1]);
        ctx.U(this.prevRotation, this.Mc);
        this.Rb = 0.0;
        this.wd = 0.0;
        this.Zc = true;
        this.paused_ = false;
        this.generatorsPaused_ = false;
        ctx.W(this.ad, 0, 0, 0);
      };
    };

    ld.prototype.Jd = function (Ab, Mc) {
      this.Nb(Ab, Mc);
      this.sc.push.apply(this.sc, this.tc);
      this.tc.length = 0;
      this.vd.Jd();
    };

    ld.prototype.Id = function (Qb, Ab, Mc) {
      if (this.paused_) {
        this.Td(Ab, Mc);
        return;
      }

      this.wd = this.Rb;

      if (Ab) {
        ctx.T(this.Bb, this.Ab);

        if (Qb > 0.0001) {
          var shift = [];
          ctx.g(shift, Ab, this.Bb);
          ctx.T(this.ad, shift);
          ctx.w(this.ad, this.ad, Qb);
        } else {
          ctx.W(this.ad, 0, 0, 0);
        }
      } else {
        ctx.W(this.ad, 0, 0, 0);
      }

      if (Mc) {
        ctx.U(this.prevRotation, this.Mc);
      }

      var ic;

      if (this.Zc && !this.generatorsPaused_) {
        ic = this.vd.Id(Qb, Ab, Mc);
      } else {
        if (Ab) ctx.T(this.Ab, Ab);
        if (Mc) ctx.U(this.Mc, Mc);
        ic = 0;
        this.Rb += Qb;
      }

      for (var Wb = ic; Wb < this.tc.length;) {
        var Xb = this.tc[Wb];

        if (!Xb.oc) {
          Xb.Id(Qb);

          if (this.Wc.Ac(this.tc[Wb])) {
            Xb.wc();
            if (this.xd(Wb)) continue;
          }
        } else {
          Xb.rc(Qb);
          if (this.xd(Wb)) continue;
        }

        ++Wb;
      }
    };

    ld.prototype.xd = function (je) {
      var Xb = this.tc[je];
      var ready = true;

      for (var id = 0; id < Xb.Kc.length; ++id) {
        var Bd = Xb.Kc[id].Bd;

        if (Bd.activated() || Bd.tc.length > 0) {
          ready = false;
          break;
        }
      }

      if (ready) {
        this.sc.push(this.tc[je]);
        this.tc.splice(je, 1);
        return true;
      }

      return false;
    };

    ld.prototype.Hd = function (fe, ge) {
      this.construct.Hd(fe, ge);
    };

    ld.prototype.ue = function (se, re, te, renderBuffer) {
      this.construct.ue(se, re, te, renderBuffer);
    };

    ld.prototype.Td = function (Ab, Mc) {
      this.wd = this.Rb;

      if (Ab) {
        ctx.T(this.Bb, this.Ab);
        ctx.T(this.Ab, Ab);
      }

      if (Mc) {
        ctx.U(this.prevRotation, this.Mc);
        ctx.U(this.Mc, Mc);
      }
    };

    ld.prototype.uc = function (md, nd) {
      this.Yc.push({
        Db: md,
        Ad: nd
      });
    };

    ld.prototype.
    /**/
    pause = function () {
      this.paused_ = true;
    };

    ld.prototype.
    /**/
    unpause = function () {
      this.paused_ = false;
    };

    ld.prototype.
    /**/
    paused = function () {
      return this.paused_;
    };

    ld.prototype.
    /**/
    pauseGenerators = function () {
      this.generatorsPaused_ = true;
    };

    ld.prototype.
    /**/
    unpauseGenerators = function () {
      this.generatorsPaused_ = false;
    };

    ld.prototype.
    /**/
    generatorsPaused = function () {
      return this.generatorsPaused_;
    };

    ld.prototype.activate = function () {
      this.Zc = true;
    };

    ld.prototype.disactivate = function () {
      this.Zc = false;
    };

    ld.prototype.activated = function () {
      return this.Zc;
    };

    ld.prototype.
    /**/
    getNumParticles = function () {
      return this.tc.length;
    };

    var ke = function ke() {
      var Cb = this;

      this._init = function (we, Ab, Mc, ve, options) {
        this.
        /**/
        model = we;
        this.Ab = [];
        this.Mc = []; // ke Ad

        this.od = [];

        this.pd = function (md) {
          var Bd = new ld(this, md, ve);
          Bd.Nb(this.Ab, this.Mc);
          this["_".concat(md.name)] = Bd;
          this.od.push(Bd);
        };

        this.Nb = function (Ab, Mc) {
          this.Cd = 0.0;
          this.Rb = 0.0;
          ctx.T(this.Ab, Ab ? Ab : [0, 0, 0]);
          ctx.U(this.Mc, Mc ? Mc : [0, 0, 0, 1]);
        };

        this.Nb(Ab, Mc);
        this.
        /**/
        model.qd(this); // IMPL

        this._presimNeeded = true;

        if (options.generatorsPaused) {
          this.
          /**/
          pauseGeneratorsInAllEmitters();
        }

        if (options.paused) {
          this.
          /**/
          pauseAllEmitters();
        } else {
          this.zeroUpdate();
          this.updateFixed(this.Ud, Ab, Mc, this.presimFrameTime);
          this._presimNeeded = false;
        }
      };
    };

    ke.prototype.
    /**/
    restart = function (
    /**/
    position,
    /**/
    rotation,
    /**/
    options) {
      this.Nb(
      /**/
      position ?
      /**/
      position : this.Ab,
      /**/
      rotation ?
      /**/
      rotation : this.Mc);
      this._presimNeeded = true;

      for (var i = 0; i < this.od.length; ++i) {
        this.od[i].Jd(this.Ab, this.Mc);
      }

      this._presimNeeded = true;

      if (options && options.generatorsPaused) {
        this.
        /**/
        pauseGeneratorsInAllEmitters();
      }

      if (options && options.paused) {
        this.
        /**/
        pauseAllEmitters();
      } else {
        this.zeroUpdate();
        this.updateFixed(this.Ud, this.Ab, this.Mc, this.presimFrameTime);
        this._presimNeeded = false;
      }
    };

    ke.prototype.zeroUpdate = function () {
      for (var i = 0; i < this.od.length; ++i) {
        this.od[i].Id(0, this.Ab, this.Mc);
      }
    };

    ke.prototype.
    /**/
    update = function (
    /**/
    dt,
    /**/
    position,
    /**/
    rotation) {
      if (this.Dd > 0.0) this.updateFixed(
      /**/
      dt,
      /**/
      position,
      /**/
      rotation, this.Dd);else this.updateFlex(
      /**/
      dt,
      /**/
      position,
      /**/
      rotation);
    };

    ke.prototype.updateFixed = function (
    /**/
    dt,
    /**/
    position,
    /**/
    rotation,
    /**/
    frameTime) {
      var updatedTime = 0.0;
      var hc = [];
      ctx.T(hc, this.Ab);
      var frameRotation = [];
      ctx.U(frameRotation, this.Mc);
      if (
      /**/
      position && ctx.equalv3_(
      /**/
      position, this.Ab))
        /**/
        position = null;
      if (
      /**/
      rotation && ctx.equalq_(
      /**/
      rotation, this.Mc))
        /**/
        rotation = null;

      while (
      /**/
      dt - updatedTime + this.Cd >=
      /**/
      frameTime) {
        var cc = this.Rb;
        if (
        /**/
        position) ctx.ab(hc, this.Ab,
        /**/
        position, updatedTime /
        /**/
        dt);
        if (
        /**/
        rotation) ctx.slerpq(frameRotation, this.Mc,
        /**/
        rotation, updatedTime /
        /**/
        dt);

        for (var i = 0; i < this.od.length; ++i) {
          this.od[i].Id(
          /**/
          frameTime, hc, frameRotation);
          this.Rb = cc;
        }

        updatedTime +=
        /**/
        frameTime - this.Cd;
        this.Cd = 0.0;
        this.Rb = cc +
        /**/
        frameTime;
      }

      if (
      /**/
      position) ctx.T(this.Ab,
      /**/
      position);
      if (
      /**/
      rotation) ctx.U(this.Mc,
      /**/
      rotation);
      this.Cd +=
      /**/
      dt - updatedTime;
    };

    ke.prototype.updateFlex = function (
    /**/
    dt,
    /**/
    position,
    /**/
    rotation) {
      var cc = this.Rb;

      for (var i = 0; i < this.od.length; ++i) {
        this.od[i].Id(
        /**/
        dt,
        /**/
        position,
        /**/
        rotation);
        this.Rb = cc;
      }

      this.Rb = cc +
      /**/
      dt;
      if (
      /**/
      position) ctx.T(this.Ab,
      /**/
      position);
      if (
      /**/
      rotation) ctx.U(this.Mc,
      /**/
      rotation);
    };

    ke.prototype.
    /**/
    resetPosition = function (
    /**/
    position,
    /**/
    rotation) {
      if (
      /**/
      position) ctx.T(this.Ab,
      /**/
      position);
      if (
      /**/
      rotation) ctx.U(this.Mc,
      /**/
      rotation);

      for (var i = 0; i < this.od.length; ++i) {
        this.od[i].Td(this.Ab, this.Mc);
      }
    };

    ke.prototype.
    /**/
    setPropertyInAllEmitters = function (
    /**/
    name,
    /**/
    value) {
      var propName = "_".concat(
      /**/
      name);

      if (
      /**/
      value instanceof Array) {
        if (
        /**/
        value.length == 2) {
          for (var i = 0; i < this.od.length; ++i) {
            ctx.S(this.od[i][propName],
            /**/
            value);
          }
        } else {
          for (var i = 0; i < this.od.length; ++i) {
            ctx.T(this.od[i][propName],
            /**/
            value);
          }
        }
      } else {
        for (var i = 0; i < this.od.length; ++i) {
          this.od[i][propName] =
          /**/
          value;
        }
      }
    };

    ke.prototype.
    /**/
    pauseAllEmitters = function () {
      for (var i = 0; i < this.od.length; ++i) {
        this.od[i].
        /**/
        pause();
      }
    };

    ke.prototype.
    /**/
    unpauseAllEmitters = function () {
      for (var i = 0; i < this.od.length; ++i) {
        this.od[i].
        /**/
        unpause();
      }

      this.zeroUpdate();

      if (this._presimNeeded) {
        this.updateFixed(this.Ud, this.Ab, this.Mc, this.presimFrameTime);
        this._presimNeeded = false;
      }
    };

    ke.prototype.
    /**/
    areAllEmittersPaused = function () {
      for (var i = 0; i < this.od.length; ++i) {
        if (!this.od[i].paused()) return false;
      }

      return true;
    };

    ke.prototype.
    /**/
    pauseGeneratorsInAllEmitters = function () {
      for (var i = 0; i < this.od.length; ++i) {
        this.od[i].
        /**/
        pauseGenerators();
      }
    };

    ke.prototype.
    /**/
    unpauseGeneratorsInAllEmitters = function () {
      for (var i = 0; i < this.od.length; ++i) {
        this.od[i].
        /**/
        unpauseGenerators();
      }
    };

    ke.prototype.
    /**/
    areGeneratorsInAllEmittersPaused = function () {
      for (var i = 0; i < this.od.length; ++i) {
        if (!this.od[i].generatorsPaused()) return false;
      }

      return true;
    };

    ke.prototype.
    /**/
    getNumParticles = function () {
      var numParticles = 0;

      for (var i = 0; i < this.od.length; ++i) {
        numParticles += this.od[i].getNumParticles();
      }

      return numParticles;
    };

    var le = function le() {
      this._init = function (we, Ab, Mc, renderBuffer, options) {
        le.prototype._init.call(this, we, Ab, Mc, oe, options);

        this.texturesRemap = [];
        var indices = [];
        {
          var verDisp;

          for (var Wb = 0; Wb < this.
          /**/
          model.Xe; ++Wb) {
            verDisp = Wb * 4;
            indices.push(verDisp + 0, verDisp + 3, verDisp + 1, verDisp + 1, verDisp + 3, verDisp + 2);
          }
        }
        this.renderBuffer = renderBuffer;
        this.renderBuffer.initialize(this.
        /**/
        model.Xe * 4, [2], indices, this.
        /**/
        model.Xe);
        this.renderBuffer.__numIndices = 0;
      };
    };

    le.prototype = new ke();

    le.prototype.
    /**/
    fillGeometryBuffers = function (
    /**/
    cameraRight,
    /**/
    cameraUp,
    /**/
    cameraDir) {
      this.renderBuffer.cleanup();
      this.renderBuffer.__lastRenderCall = null;
      this.od.forEach(function (Bd) {
        Bd.ue(
        /**/
        cameraRight,
        /**/
        cameraUp,
        /**/
        cameraDir, this.renderBuffer);
      }, this);
      if (this.renderBuffer.__lastRenderCall) this.renderBuffer.pushRenderCall(this.renderBuffer.__lastRenderCall);
    };

    var me = function me() {
      this._init = function (we, Ab, Mc, options) {
        me.prototype._init.call(this, we, Ab, Mc, ne, options);

        this.materials = [];
        this.
        /**/
        model.materials.forEach(function (value) {
          this.materials.push(['source-over', 'lighter', 'multiply'][value]);
        }, this);
        this.
        /**/
        textureDescs = [];
      };
    };

    me.prototype = new ke();

    me.prototype.
    /**/
    draw = function (
    /**/
    context,
    /**/
    camera) {
      for (var i = 0; i < this.od.length; ++i) {
        this.od[i].Hd(
        /**/
        context,
        /**/
        camera);
      }
    };

    this.createWGLInstance = function (
    /**/
    position,
    /**/
    rotation,
    /**/
    renderBuffer,
    /**/
    options) {
      var Ld = new le();

      Ld._init(this,
      /**/
      position,
      /**/
      rotation,
      /**/
      renderBuffer,
      /**/
      options || {});

      return Ld;
    };

    this.createCanvas2DInstance = function (
    /**/
    position,
    /**/
    rotation,
    /**/
    options) {
      var Ld = new me();

      Ld._init(this,
      /**/
      position,
      /**/
      rotation,
      /**/
      options || {});

      return Ld;
    };

    this.textures = ['fx/fireworks/sparks5x3_long.png', 'fx/fireworks/stars4x1_white.png'];
    this.materials = [1, 0];
    this.renderStyles = [{
      materialIndex: 0,
      textureIndices: [0]
    }, {
      materialIndex: 1,
      textureIndices: [1]
    }];
    this.Xe = 90300;

    function Emitter_Stripe_child() {
      var _1 = [],
          _5 = [],
          _7 = [],
          _9 = [],
          _10 = [],
          _10fs = [],
          _10vs = [],
          _10rw = [],
          _10rwn = [],
          _10rwl,
          _10v = [],
          _10p = [],
          _10dtl,
          _10dtp,
          _10df,
          _10fsd = [],
          _12 = [],
          _12i = [],
          _13,
          _11,
          _14,
          _15,
          _15i0,
          _15s0 = [],
          _16,
          _17,
          _17i0,
          _17s0 = [],
          _18,
          _18i0,
          _18s0 = [],
          _19;

      this.pe = [{
        xe: 1,
        Rc: 5,
        Sc: 3,
        renderStyleIndex: 0
      }];
      this.name = "Stripe_child";

      this.ud = function (Bd) {
        Bd._Rotation = [0, 0, 0, 1];
        Bd._Texture = 0;
        Bd.ed();
        Bd._15 = [[[0.48177, 0.934782, 0.982708, 0.96819, 0.923457, 0.860987, 0.787211, 0.706007, 0.619964, 0.530944, 0.440381, 0.349431, 0.259076, 0.170188, 0.0835716, 0, 0]]];
        Bd._17 = [[[1, 1, 1], [1, 0, 0]]];
        Bd._18 = [[[5, 4.99872, 4.99458, 4.98671, 4.97402, 4.95508, 4.92796, 4.89001, 4.83749, 4.76485, 4.66351, 4.5192, 4.30565, 3.96616, 3.3344, 0, 0]]];
        Bd.jd = 300;
        Bd.Vc = 0;
      };

      this.Mb = function (vd) {
        vd.rd = 2;
        vd.Gb = 1;
        vd.Jb = 1;
      };

      this.Pb = function (Qb, Bd, vd) {
        vd.rd = 2;
      };

      this.fd = function (Bd, Xb) {
        Xb.Mc = [];
        Xb._ = 0.0;
        ctx.W(_1, 0, 0, 0);
        Xb._2 = [];
        ctx.c(Xb._2, Bd.Ab, _1);
        Xb._3 = 0;
        Xb._4 = [];
        ctx.U(Xb._4, Bd._Rotation);
        ctx.randv3gen(_5, 1, Bd.Ld.rand);
        Xb._6 = [];
        ctx.T(Xb._6, _5);
        ctx.randv3gen(_7, 10, Bd.Ld.rand);
        Xb._8 = [];
        ctx.T(Xb._8, _7);
        ctx.T(Xb.Ab, Xb._2);
      };

      this.gd = function (Bd, Xb) {
        Xb.Mc = [];
        Xb._ = 0.0;
        ctx.W(_1, 0, 0, 0);
        Xb._2 = [];
        ctx.c(Xb._2, Bd.Ab, _1);
        Xb._3 = 0;
        Xb._4 = [];
        ctx.U(Xb._4, Bd._Rotation);
        ctx.randv3gen(_5, 1, Bd.Ld.rand);
        Xb._6 = [];
        ctx.T(Xb._6, _5);
        ctx.randv3gen(_7, 10, Bd.Ld.rand);
        Xb._8 = [];
        ctx.T(Xb._8, _7);
        ctx.T(Xb.Ab, Xb._2);
      };

      this.qc = function (Qb, Bd, Xb) {
        Xb._ += Qb;
        ctx.W(_9, 0, 50, 0);
        ctx.T(_10fs, _9);
        ctx.T(_10vs, [0, 0, 0]);
        _10dtl = Qb;
        ctx.T(_10v, Xb._8);
        ctx.T(_10p, Xb._2);

        while (_10dtl > 0.0001) {
          _10dtp = _10dtl;
          ctx.T(_10fsd, _10fs);
          ctx.g(_10rw, _10vs, _10v);
          _10rwl = ctx.P(_10rw);

          if (_10rwl > 0.0001) {
            _10rwl = Math.sqrt(_10rwl);
            ctx.w(_10rwn, _10rw, _10rwl);
            _10df = 0.01 * 1 * _10rwl;
            if (_10df * _10dtp > 0.2) _10dtp = 0.2 / _10df;
            ctx.c(_10fsd, _10fsd, ctx.v(_10rwn, _10rwl * _10df));
          }

          ctx.c(_10v, _10v, ctx.v(_10fsd, _10dtp));
          ctx.c(_10p, _10p, ctx.v(_10v, _10dtp));
          _10dtl -= _10dtp;
        }

        ctx.T(Xb._2, _10p);
        ctx.T(Xb._8, _10v);
        ctx.T(Xb.Ab, Xb._2);
        ctx.Q(_12i, Xb._6);
        ctx.qb(_12, _12i, Xb._3);
        _13 = 7;
        _11 = 1;
        _14 = Xb._ / _11;
        _15i0 = _14 < 0 ? 0 : _14 > 1 ? 1 : _14;
        ctx.V(_15s0, 0, (_15i0 - 0) * 15);
        _15 = Db.nb(Bd._15[0][_15s0[0]], _15s0[1]);
        _16 = _13 * _15;
        _17i0 = _14 < 0 ? 0 : _14 > 1 ? 1 : _14;
        _17i0 < 0.7 ? ctx.V(_17s0, 0, (_17i0 - 0) * 1.42857) : ctx.V(_17s0, 1, (_17i0 - 0.7) * 3.33333);
        _17 = Db.nb(Bd._17[0][_17s0[0]], _17s0[1]);
        _18i0 = _14 < 0 ? 0 : _14 > 1 ? 0 + (_14 - 0) % 1 : _14;
        ctx.V(_18s0, 0, (_18i0 - 0) * 15);
        _18 = Db.nb(Bd._18[0][_18s0[0]], _18s0[1]);
        _19 = Bd._Texture * 5 + _18;
        ctx.S(Xb.Pd, [0.5, 0.5]);
        ctx.U(Xb.Mc, _12);
        ctx.V(Xb.Nd, _16, _16);
        ctx.T(Xb.gf, [1, 1, 1]);
        Xb.Od = _17;
        Xb.Qc = _19 < 0 ? 0 : _19 >= 15 ? 14 : _19;
      };

      this.Cc = function (Bd, Xb, Wc) {
        _11 = 1;
        if (Xb._ > _11) return true;
        return false;
      };
    }

    function Emitter_Stripe_parent() {
      var _,
          _i0,
          _s0 = [],
          _2 = [],
          _4,
          _6 = [],
          _8 = [],
          _8x = [],
          _8y = [],
          _8z = [],
          _9,
          _9i0,
          _9s0 = [],
          _10 = [],
          _11 = [],
          _11fs = [],
          _11vs = [],
          _11rw = [],
          _11rwn = [],
          _11rwl,
          _11v = [],
          _11p = [],
          _11dtl,
          _11dtp,
          _11df,
          _11fsd = [],
          _12;

      this.pe = [];
      this.name = "Stripe_parent";

      this.ud = function (Bd) {
        Bd._Texture = 0;
        Bd._ = [[[0, 0, 0], [5, 5, 5]]];
        Bd.dd();
        Bd.uc(new Emitter_Stripe_child(), {
          xc: 1,
          sd: false
        });
        Bd._9 = [[[0, 0.201485, 0.578107, 1.01262, 1.40576, 1.70529, 1.89569, 1.97991, 1.96774, 1.87042, 1.69852, 1.46129, 1.16666, 0.821281, 0.430806, 0, 0]]];
        Bd.jd = 100;
        Bd.Vc = 0;
      };

      this.Mb = function (vd) {
        vd.zb = 5;
        vd.Gb = 0.94;
        vd.Jb = 50;
        vd.Ib = 1;
      };

      this.Pb = function (Qb, Bd, vd) {
        _i0 = Bd.Rb < 0 ? 0 : Bd.Rb > 1 ? 1 : Bd.Rb;
        _i0 < 0.14741 ? ctx.V(_s0, 0, (_i0 - 0) * 6.78378) : ctx.V(_s0, 1, (_i0 - 0.14741) * 1.1729);
        _ = Db.nb(Bd._[0][_s0[0]], _s0[1]);
        vd.zb = _;
      };

      this.fd = function (Bd, Xb) {
        Xb._1 = 0.0;
        ctx.W(_2, 0, 0, 0);
        Xb._3 = [];
        ctx.rb(Xb._3, _2, Bd.Mc);
        ctx.c(Xb._3, Bd.Ab, Xb._3);
        _4 = 0 + Bd.Ld.rand() * (5 - 0);
        Xb._5 = _4;
        ctx.randv3gen(_6, 1000, Bd.Ld.rand);
        Xb._7 = [];
        ctx.rb(Xb._7, _6, Bd.Mc);
        ctx.c(Xb._7, Bd.ad, Xb._7);
        ctx.T(Xb.Ab, Xb._3);
        ctx.Q(_8z, [0, 0, 1]);
        ctx.I(_8x, Xb._7, _8z);
        ctx.Q(_8x, _8x);
        ctx.I(_8y, _8z, _8x);
        ctx.pb(_8, _8x, _8y, _8z);
        Xb.pc(0)._Rotation = _8;
        Xb.pc(0)._Texture = Bd._Texture;
      };

      this.gd = function (Bd, Xb) {
        Xb._1 = 0.0;
        ctx.W(_2, 0, 0, 0);
        Xb._3 = [];
        ctx.rb(Xb._3, _2, Bd.Mc);
        ctx.c(Xb._3, Bd.Ab, Xb._3);
        _4 = 0 + Bd.Ld.rand() * (5 - 0);
        Xb._5 = _4;
        ctx.randv3gen(_6, 1000, Bd.Ld.rand);
        Xb._7 = [];
        ctx.rb(Xb._7, _6, Bd.Mc);
        ctx.c(Xb._7, Bd.ad, Xb._7);
        ctx.T(Xb.Ab, Xb._3);
        ctx.Q(_8z, [0, 0, 1]);
        ctx.I(_8x, Xb._7, _8z);
        ctx.Q(_8x, _8x);
        ctx.I(_8y, _8z, _8x);
        ctx.pb(_8, _8x, _8y, _8z);
        Xb.pc(0)._Rotation = _8;
        Xb.pc(0)._Texture = Bd._Texture;
      };

      this.qc = function (Qb, Bd, Xb) {
        Xb._1 += Qb;
        _9i0 = Bd.Rb < 0 ? 0 : Bd.Rb > 1 ? 1 : Bd.Rb;
        ctx.V(_9s0, 0, (_9i0 - 0) * 15);
        _9 = Db.nb(Bd._9[0][_9s0[0]], _9s0[1]);
        ctx.W(_10, 0, 100, 0);
        ctx.T(_11fs, _10);
        ctx.T(_11vs, [0, 0, 0]);
        _11dtl = Qb;
        ctx.T(_11v, Xb._7);
        ctx.T(_11p, Xb._3);

        while (_11dtl > 0.0001) {
          _11dtp = _11dtl;
          ctx.T(_11fsd, _11fs);
          ctx.g(_11rw, _11vs, _11v);
          _11rwl = ctx.P(_11rw);

          if (_11rwl > 0.0001) {
            _11rwl = Math.sqrt(_11rwl);
            ctx.w(_11rwn, _11rw, _11rwl);
            _11df = 0.01 * _9 * _11rwl;
            if (_11df * _11dtp > 0.2) _11dtp = 0.2 / _11df;
            ctx.c(_11fsd, _11fsd, ctx.v(_11rwn, _11rwl * _11df));
          }

          ctx.c(_11v, _11v, ctx.v(_11fsd, _11dtp));
          ctx.c(_11p, _11p, ctx.v(_11v, _11dtp));
          _11dtl -= _11dtp;
        }

        ctx.T(Xb._3, _11p);
        ctx.T(Xb._7, _11v);
        ctx.T(Xb.Ab, Xb._3);
        ctx.Q(_8z, [0, 0, 1]);
        ctx.I(_8x, Xb._7, _8z);
        ctx.Q(_8x, _8x);
        ctx.I(_8y, _8z, _8x);
        ctx.pb(_8, _8x, _8y, _8z);
        Xb.pc(0)._Rotation = _8;
        Xb.pc(0)._Texture = Bd._Texture;
      };

      this.Cc = function (Bd, Xb, Wc) {
        _12 = 1.2;
        if (Xb._1 > _12) return true;
        return false;
      };
    }

    function Emitter_Sparks() {
      var _1 = [],
          _3 = [],
          _6,
          _8,
          _10,
          _12 = [],
          _13 = [],
          _13fs = [],
          _13vs = [],
          _13rw = [],
          _13rwn = [],
          _13rwl,
          _13v = [],
          _13p = [],
          _13dtl,
          _13dtp,
          _13df,
          _13fsd = [],
          _14,
          _15,
          _15i0,
          _15s0 = [],
          _16;

      this.pe = [{
        xe: 0,
        Rc: 4,
        Sc: 1,
        renderStyleIndex: 1
      }];
      this.name = "Sparks";

      this.ud = function (Bd) {
        Bd._Texture = 0;
        Bd.dd();
        Bd._15 = [[[1, 0, 0], [0, 1, 1], [1, 0, 0], [0, 0.7, 0.7], [0.7, 0.2, 0.2], [0.2, 0.838202, 0.838202], [0.838202, 0.4, 0.4], [0.4, 1, 1], [1, 0, 0], [0, 0.6, 0.6], [0.6, 0, 0]]];
        Bd.jd = 100;
        Bd.Vc = 0;
      };

      this.Mb = function (vd) {
        vd.zb = 1;
        vd.Gb = 1;
        vd.Jb = 80;
        vd.Ib = 1;
      };

      this.Pb = function (Qb, Bd, vd) {
        vd.zb = 1;
      };

      this.fd = function (Bd, Xb) {
        Xb._ = 0.0;
        ctx.W(_1, 0, 0, 0);
        Xb._2 = [];
        ctx.rb(Xb._2, _1, Bd.Mc);
        ctx.c(Xb._2, Bd.Ab, Xb._2);
        ctx.randv3gen(_3, 100, Bd.Ld.rand);
        Xb._4 = [];
        ctx.rb(Xb._4, _3, Bd.Mc);
        ctx.c(Xb._4, Bd.ad, Xb._4);
        Xb._5 = 0;
        _6 = 0 + Bd.Ld.rand() * (4 - 0);
        Xb._7 = _6;
        _8 = 10 + Bd.Ld.rand() * (20 - 10);
        Xb._9 = _8;
        _10 = 1 + Bd.Ld.rand() * (2 - 1);
        Xb._11 = _10;
        ctx.T(Xb.Ab, Xb._2);
      };

      this.gd = function (Bd, Xb) {
        Xb._ = 0.0;
        ctx.W(_1, 0, 0, 0);
        Xb._2 = [];
        ctx.rb(Xb._2, _1, Bd.Mc);
        ctx.c(Xb._2, Bd.Ab, Xb._2);
        ctx.randv3gen(_3, 100, Bd.Ld.rand);
        Xb._4 = [];
        ctx.rb(Xb._4, _3, Bd.Mc);
        ctx.c(Xb._4, Bd.ad, Xb._4);
        Xb._5 = 0;
        _6 = 0 + Bd.Ld.rand() * (4 - 0);
        Xb._7 = _6;
        _8 = 10 + Bd.Ld.rand() * (20 - 10);
        Xb._9 = _8;
        _10 = 1 + Bd.Ld.rand() * (2 - 1);
        Xb._11 = _10;
        ctx.T(Xb.Ab, Xb._2);
      };

      this.qc = function (Qb, Bd, Xb) {
        Xb._ += Qb;
        ctx.W(_12, 0, 100, 0);
        ctx.T(_13fs, _12);
        ctx.T(_13vs, [0, 0, 0]);
        ctx.u(_13v, _13fs, Qb);
        ctx.c(_13v, _13v, Xb._4);
        ctx.u(_13p, _13v, Qb);
        ctx.c(_13p, _13p, Xb._2);
        ctx.T(Xb._2, _13p);
        ctx.T(Xb._4, _13v);
        ctx.T(Xb.Ab, Xb._2);
        _14 = Xb._ / Xb._11;
        _15i0 = _14 < 0 ? 0 : _14 > 1 ? 1 : _14;
        _15i0 < 0.531495 ? _15i0 < 0.3 ? _15i0 < 0.16726 ? _15i0 < 0.1 ? ctx.V(_15s0, 0, (_15i0 - 0) * 10) : ctx.V(_15s0, 1, (_15i0 - 0.1) * 14.8677) : ctx.V(_15s0, 2, (_15i0 - 0.16726) * 7.53351) : _15i0 < 0.464218 ? _15i0 < 0.353203 ? ctx.V(_15s0, 3, (_15i0 - 0.3) * 18.796) : ctx.V(_15s0, 4, (_15i0 - 0.353203) * 9.00779) : ctx.V(_15s0, 5, (_15i0 - 0.464218) * 14.864) : _15i0 < 0.9 ? _15i0 < 0.7 ? _15i0 < 0.641996 ? ctx.V(_15s0, 6, (_15i0 - 0.531495) * 9.04964) : ctx.V(_15s0, 7, (_15i0 - 0.641996) * 17.2403) : ctx.V(_15s0, 8, (_15i0 - 0.7) * 5) : _15i0 < 0.942044 ? ctx.V(_15s0, 9, (_15i0 - 0.9) * 23.7848) : ctx.V(_15s0, 10, (_15i0 - 0.942044) * 17.2544);
        _15 = Db.nb(Bd._15[0][_15s0[0]], _15s0[1]);
        _16 = Xb._9 * _15;
        ctx.S(Xb.Pd, [0.5, 0.5]);
        Xb.Md = Xb._5;
        ctx.V(Xb.Nd, _16, _16);
        ctx.T(Xb.gf, [1, 1, 1]);
        Xb.Od = 1;
        Xb.Qc = Xb._7 < 0 ? 0 : Xb._7 >= 4 ? 3 : Xb._7;
      };

      this.Cc = function (Bd, Xb, Wc) {
        if (Xb._ > Xb._11) return true;
        return false;
      };
    }

    function Emitter_Fireworks_parent() {
      var _,
          _i0,
          _s0 = [],
          _2,
          _3 = [],
          _3i,
          _3s = [],
          _4 = [],
          _4i,
          _4s = [],
          _5,
          _6 = [],
          _7 = [],
          _10,
          _11,
          _11i0,
          _11s0 = [],
          _13;

      this.pe = [];
      this.name = "Fireworks_parent";

      this.ud = function (Bd) {
        Bd._ = [[[1.72379, 1.72379, 1.72379], [0, 0, 0]]];
        Bd.dd();
        Bd._3 = [[[-438, 1], [-440, -296], [-440, -296]]];
        Bd._4 = [[[327, 3], [326, -285], [326, -285]]];
        Bd._11 = [[[0, 0, 0], [1, 1, 1], [2, 2, 2]]];
        Bd.uc(new Emitter_Stripe_parent(), {
          xc: 1,
          sd: false
        });
        Bd.uc(new Emitter_Sparks(), {
          xc: 1,
          sd: false
        });
        Bd.jd = 3;
        Bd.Vc = 0;
      };

      this.Mb = function (vd) {
        vd.zb = 5;
        vd.Gb = 1;
        vd.Jb = 1;
      };

      this.Pb = function (Qb, Bd, vd) {
        _i0 = Bd.Ld.Rb < 0 ? 0 : Bd.Ld.Rb > 5.99432 ? 0 + (Bd.Ld.Rb - 0) % 5.99432 : Bd.Ld.Rb;
        _i0 < 1.50077 ? ctx.V(_s0, 0, (_i0 - 0) * 0.666323) : ctx.V(_s0, 1, (_i0 - 1.50077) * 0.222541);
        _ = Db.nb(Bd._[0][_s0[0]], _s0[1]);
        vd.zb = _;
      };

      this.fd = function (Bd, Xb) {
        Xb._1 = 0.0;
        _2 = 0 + Bd.Ld.rand() * (1 - 0);
        _3i = Db.kb(_2);
        ctx.V(_3s, 0, (_3i - 0) * 1);
        Db.lb(_3, Bd._3[_3s[0]], _3s[1]);
        _4i = Db.kb(_2);
        ctx.V(_4s, 0, (_4i - 0) * 1);
        Db.lb(_4, Bd._4[_4s[0]], _4s[1]);
        _5 = 0 + Bd.Ld.rand() * (1 - 0);
        ctx.Y(_6, _3, _4, _5);
        ctx.W(_7, _6[0], _6[1], 0);
        Xb._8 = [];
        ctx.rb(Xb._8, _7, Bd.Mc);
        ctx.c(Xb._8, Bd.Ab, Xb._8);
        Xb._9 = 0;
        _10 = 0 + Bd.Ld.rand() * (1 - 0);
        _11i0 = _10 < 0 ? 0 : _10 > 1 ? 1 : _10;
        _11i0 < 0.710626 ? _11i0 < 0.388302 ? ctx.V(_11s0, 0, (_11i0 - 0) * 2.57531) : ctx.V(_11s0, 1, (_11i0 - 0.388302) * 3.10247) : ctx.V(_11s0, 2, (_11i0 - 0.710626) * 3.45573);
        _11 = Db.nb(Bd._11[0][_11s0[0]], _11s0[1]);
        Xb._12 = _11;
        ctx.T(Xb.Ab, Xb._8);
        Xb.pc(0)._Texture = Xb._12;
        Xb.pc(1)._Texture = Xb._12;
      };

      this.gd = function (Bd, Xb) {
        Xb._1 = 0.0;
        _2 = 0 + Bd.Ld.rand() * (1 - 0);
        _3i = Db.kb(_2);
        ctx.V(_3s, 0, (_3i - 0) * 1);
        Db.lb(_3, Bd._3[_3s[0]], _3s[1]);
        _4i = Db.kb(_2);
        ctx.V(_4s, 0, (_4i - 0) * 1);
        Db.lb(_4, Bd._4[_4s[0]], _4s[1]);
        _5 = 0 + Bd.Ld.rand() * (1 - 0);
        ctx.Y(_6, _3, _4, _5);
        ctx.W(_7, _6[0], _6[1], 0);
        Xb._8 = [];
        ctx.rb(Xb._8, _7, Bd.Mc);
        ctx.c(Xb._8, Bd.Ab, Xb._8);
        Xb._9 = 0;
        _10 = 0 + Bd.Ld.rand() * (1 - 0);
        _11i0 = _10 < 0 ? 0 : _10 > 1 ? 1 : _10;
        _11i0 < 0.710626 ? _11i0 < 0.388302 ? ctx.V(_11s0, 0, (_11i0 - 0) * 2.57531) : ctx.V(_11s0, 1, (_11i0 - 0.388302) * 3.10247) : ctx.V(_11s0, 2, (_11i0 - 0.710626) * 3.45573);
        _11 = Db.nb(Bd._11[0][_11s0[0]], _11s0[1]);
        Xb._12 = _11;
        ctx.T(Xb.Ab, Xb._8);
        Xb.pc(0)._Texture = Xb._12;
        Xb.pc(1)._Texture = Xb._12;
      };

      this.qc = function (Qb, Bd, Xb) {
        Xb._1 += Qb;
        ctx.T(Xb.Ab, Xb._8);
        Xb.pc(0)._Texture = Xb._12;
        Xb.pc(1)._Texture = Xb._12;
      };

      this.Cc = function (Bd, Xb, Wc) {
        _13 = 2;
        if (Xb._1 > _13) return true;
        return false;
      };
    }

    this.qd = function (Ld) {
      Ld.Dd = 0.0333333;
      Ld.Ud = 0;
      Ld.presimFrameTime = 0.1;

      Ld.rand = function () {
        return Math.random();
      };

      Ld.pd(new Emitter_Fireworks_parent());
    };

    this.kb = function (v) {
      return v < 0 ? 0 : v > 1 ? 1 : v;
    };

    this.lb = function (r, path, je) {
      var indexInt = Math.floor(je);
      var lerp = je - indexInt;
      ctx.Y(r, path[indexInt], path[indexInt + 1], lerp);
    };

    this.nb = function (funcValues, je) {
      var indexInt = Math.floor(je);
      var nextInt = indexInt + 1;
      return ctx.X(funcValues[indexInt], funcValues[nextInt], je - indexInt);
    };
  }

  return Fireworks02;
});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/neutrinoparticles/components/NeutrinoEffect_Bubbles.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '7bc79VOoF9P2ahXTDUFnAEE', 'NeutrinoEffect_Bubbles');
// neutrinoparticles/components/NeutrinoEffect_Bubbles.ts

"use strict";
// !!! This file is generated by NeutrinoParticles extension package.
// !!! Don't modify it manually.
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var NeutrinoEffect = require("../exported_effects/Bubbles.js");
var textures_1 = require("../textures");
var NeutrinoComponent_1 = require("NeutrinoComponent");
var NeutrinoAssembler_1 = require("NeutrinoAssembler");
var _a = cc._decorator, ccclass = _a.ccclass, executeInEditMode = _a.executeInEditMode, playOnFocus = _a.playOnFocus, menu = _a.menu;
var NeutrinoEffectComponent = /** @class */ (function (_super) {
    __extends(NeutrinoEffectComponent, _super);
    function NeutrinoEffectComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    NeutrinoEffectComponent.prototype.getEffectClass = function () { return NeutrinoEffect; };
    NeutrinoEffectComponent.prototype.getTexturesDatabase = function () { return textures_1.default; };
    NeutrinoEffectComponent = __decorate([
        ccclass,
        executeInEditMode,
        playOnFocus,
        menu('i18n:MAIN_MENU.component.renderers/NeutrinoComponent/Bubbles')
    ], NeutrinoEffectComponent);
    return NeutrinoEffectComponent;
}(NeutrinoComponent_1.default));
exports.default = NeutrinoEffectComponent;
cc.Assembler.register(NeutrinoEffectComponent, NeutrinoAssembler_1.default);

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcbmV1dHJpbm9wYXJ0aWNsZXNcXGNvbXBvbmVudHNcXE5ldXRyaW5vRWZmZWN0X0J1YmJsZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLHFFQUFxRTtBQUNyRSxnQ0FBZ0M7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUVoQywrREFBaUU7QUFDakUsd0NBQW1DO0FBQ25DLHVEQUFrRDtBQUNsRCx1REFBa0Q7QUFFNUMsSUFBQSxLQUFrRCxFQUFFLENBQUMsVUFBVSxFQUE5RCxPQUFPLGFBQUEsRUFBRSxpQkFBaUIsdUJBQUEsRUFBRSxXQUFXLGlCQUFBLEVBQUUsSUFBSSxVQUFpQixDQUFDO0FBTXRFO0lBQXFELDJDQUFpQjtJQUF0RTs7SUFHQSxDQUFDO0lBRkEsZ0RBQWMsR0FBZCxjQUFtQixPQUFPLGNBQWMsQ0FBQyxDQUFDLENBQUM7SUFDM0MscURBQW1CLEdBQW5CLGNBQXdCLE9BQU8sa0JBQVEsQ0FBQyxDQUFDLENBQUM7SUFGdEIsdUJBQXVCO1FBSjNDLE9BQU87UUFDUCxpQkFBaUI7UUFDakIsV0FBVztRQUNYLElBQUksQ0FBQyw4REFBOEQsQ0FBQztPQUNoRCx1QkFBdUIsQ0FHM0M7SUFBRCw4QkFBQztDQUhELEFBR0MsQ0FIb0QsMkJBQWlCLEdBR3JFO2tCQUhvQix1QkFBdUI7QUFLNUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsdUJBQXVCLEVBQUUsMkJBQWlCLENBQUMsQ0FBQyIsImZpbGUiOiIiLCJzb3VyY2VSb290IjoiLyIsInNvdXJjZXNDb250ZW50IjpbIi8vICEhISBUaGlzIGZpbGUgaXMgZ2VuZXJhdGVkIGJ5IE5ldXRyaW5vUGFydGljbGVzIGV4dGVuc2lvbiBwYWNrYWdlLlxuLy8gISEhIERvbid0IG1vZGlmeSBpdCBtYW51YWxseS5cblxuaW1wb3J0ICogYXMgTmV1dHJpbm9FZmZlY3QgZnJvbSAnLi4vZXhwb3J0ZWRfZWZmZWN0cy9CdWJibGVzLmpzJztcbmltcG9ydCB0ZXh0dXJlcyBmcm9tICcuLi90ZXh0dXJlcyc7XG5pbXBvcnQgTmV1dHJpbm9Db21wb25lbnQgZnJvbSAnTmV1dHJpbm9Db21wb25lbnQnO1xuaW1wb3J0IE5ldXRyaW5vQXNzZW1ibGVyIGZyb20gJ05ldXRyaW5vQXNzZW1ibGVyJztcblxuY29uc3Qge2NjY2xhc3MsIGV4ZWN1dGVJbkVkaXRNb2RlLCBwbGF5T25Gb2N1cywgbWVudX0gPSBjYy5fZGVjb3JhdG9yO1xuXG5AY2NjbGFzc1xuQGV4ZWN1dGVJbkVkaXRNb2RlXG5AcGxheU9uRm9jdXNcbkBtZW51KCdpMThuOk1BSU5fTUVOVS5jb21wb25lbnQucmVuZGVyZXJzL05ldXRyaW5vQ29tcG9uZW50L0J1YmJsZXMnKVxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTmV1dHJpbm9FZmZlY3RDb21wb25lbnQgZXh0ZW5kcyBOZXV0cmlub0NvbXBvbmVudCB7XG5cdGdldEVmZmVjdENsYXNzKCkgeyByZXR1cm4gTmV1dHJpbm9FZmZlY3Q7IH1cblx0Z2V0VGV4dHVyZXNEYXRhYmFzZSgpIHsgcmV0dXJuIHRleHR1cmVzOyB9XG59XG5cbmNjLkFzc2VtYmxlci5yZWdpc3RlcihOZXV0cmlub0VmZmVjdENvbXBvbmVudCwgTmV1dHJpbm9Bc3NlbWJsZXIpO1xuIl19
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/neutrinoparticles/components/NeutrinoEffect_Sparks burst.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '45e6egENJdLKbk97qqcdFTy', 'NeutrinoEffect_Sparks burst');
// neutrinoparticles/components/NeutrinoEffect_Sparks burst.ts

"use strict";
// !!! This file is generated by NeutrinoParticles extension package.
// !!! Don't modify it manually.
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var NeutrinoEffect = require("../exported_effects/Sparks burst.js");
var textures_1 = require("../textures");
var NeutrinoComponent_1 = require("NeutrinoComponent");
var NeutrinoAssembler_1 = require("NeutrinoAssembler");
var _a = cc._decorator, ccclass = _a.ccclass, executeInEditMode = _a.executeInEditMode, playOnFocus = _a.playOnFocus, menu = _a.menu;
var NeutrinoEffectComponent = /** @class */ (function (_super) {
    __extends(NeutrinoEffectComponent, _super);
    function NeutrinoEffectComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    NeutrinoEffectComponent.prototype.getEffectClass = function () { return NeutrinoEffect; };
    NeutrinoEffectComponent.prototype.getTexturesDatabase = function () { return textures_1.default; };
    NeutrinoEffectComponent = __decorate([
        ccclass,
        executeInEditMode,
        playOnFocus,
        menu('i18n:MAIN_MENU.component.renderers/NeutrinoComponent/Sparks burst')
    ], NeutrinoEffectComponent);
    return NeutrinoEffectComponent;
}(NeutrinoComponent_1.default));
exports.default = NeutrinoEffectComponent;
cc.Assembler.register(NeutrinoEffectComponent, NeutrinoAssembler_1.default);

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcbmV1dHJpbm9wYXJ0aWNsZXNcXGNvbXBvbmVudHNcXE5ldXRyaW5vRWZmZWN0X1NwYXJrcyBidXJzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7O0FBQUEscUVBQXFFO0FBQ3JFLGdDQUFnQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBRWhDLG9FQUFzRTtBQUN0RSx3Q0FBbUM7QUFDbkMsdURBQWtEO0FBQ2xELHVEQUFrRDtBQUU1QyxJQUFBLEtBQWtELEVBQUUsQ0FBQyxVQUFVLEVBQTlELE9BQU8sYUFBQSxFQUFFLGlCQUFpQix1QkFBQSxFQUFFLFdBQVcsaUJBQUEsRUFBRSxJQUFJLFVBQWlCLENBQUM7QUFNdEU7SUFBcUQsMkNBQWlCO0lBQXRFOztJQUdBLENBQUM7SUFGQSxnREFBYyxHQUFkLGNBQW1CLE9BQU8sY0FBYyxDQUFDLENBQUMsQ0FBQztJQUMzQyxxREFBbUIsR0FBbkIsY0FBd0IsT0FBTyxrQkFBUSxDQUFDLENBQUMsQ0FBQztJQUZ0Qix1QkFBdUI7UUFKM0MsT0FBTztRQUNQLGlCQUFpQjtRQUNqQixXQUFXO1FBQ1gsSUFBSSxDQUFDLG1FQUFtRSxDQUFDO09BQ3JELHVCQUF1QixDQUczQztJQUFELDhCQUFDO0NBSEQsQUFHQyxDQUhvRCwyQkFBaUIsR0FHckU7a0JBSG9CLHVCQUF1QjtBQUs1QyxFQUFFLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyx1QkFBdUIsRUFBRSwyQkFBaUIsQ0FBQyxDQUFDIiwiZmlsZSI6IiIsInNvdXJjZVJvb3QiOiIvIiwic291cmNlc0NvbnRlbnQiOlsiLy8gISEhIFRoaXMgZmlsZSBpcyBnZW5lcmF0ZWQgYnkgTmV1dHJpbm9QYXJ0aWNsZXMgZXh0ZW5zaW9uIHBhY2thZ2UuXG4vLyAhISEgRG9uJ3QgbW9kaWZ5IGl0IG1hbnVhbGx5LlxuXG5pbXBvcnQgKiBhcyBOZXV0cmlub0VmZmVjdCBmcm9tICcuLi9leHBvcnRlZF9lZmZlY3RzL1NwYXJrcyBidXJzdC5qcyc7XG5pbXBvcnQgdGV4dHVyZXMgZnJvbSAnLi4vdGV4dHVyZXMnO1xuaW1wb3J0IE5ldXRyaW5vQ29tcG9uZW50IGZyb20gJ05ldXRyaW5vQ29tcG9uZW50JztcbmltcG9ydCBOZXV0cmlub0Fzc2VtYmxlciBmcm9tICdOZXV0cmlub0Fzc2VtYmxlcic7XG5cbmNvbnN0IHtjY2NsYXNzLCBleGVjdXRlSW5FZGl0TW9kZSwgcGxheU9uRm9jdXMsIG1lbnV9ID0gY2MuX2RlY29yYXRvcjtcblxuQGNjY2xhc3NcbkBleGVjdXRlSW5FZGl0TW9kZVxuQHBsYXlPbkZvY3VzXG5AbWVudSgnaTE4bjpNQUlOX01FTlUuY29tcG9uZW50LnJlbmRlcmVycy9OZXV0cmlub0NvbXBvbmVudC9TcGFya3MgYnVyc3QnKVxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTmV1dHJpbm9FZmZlY3RDb21wb25lbnQgZXh0ZW5kcyBOZXV0cmlub0NvbXBvbmVudCB7XG5cdGdldEVmZmVjdENsYXNzKCkgeyByZXR1cm4gTmV1dHJpbm9FZmZlY3Q7IH1cblx0Z2V0VGV4dHVyZXNEYXRhYmFzZSgpIHsgcmV0dXJuIHRleHR1cmVzOyB9XG59XG5cbmNjLkFzc2VtYmxlci5yZWdpc3RlcihOZXV0cmlub0VmZmVjdENvbXBvbmVudCwgTmV1dHJpbm9Bc3NlbWJsZXIpO1xuIl19
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/neutrinoparticles/components/NeutrinoEffect_Fireworks02.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'b1a1aOLe8JBmpHFX67xgfDQ', 'NeutrinoEffect_Fireworks02');
// neutrinoparticles/components/NeutrinoEffect_Fireworks02.ts

"use strict";
// !!! This file is generated by NeutrinoParticles extension package.
// !!! Don't modify it manually.
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var NeutrinoEffect = require("../exported_effects/Fireworks02.js");
var textures_1 = require("../textures");
var NeutrinoComponent_1 = require("NeutrinoComponent");
var NeutrinoAssembler_1 = require("NeutrinoAssembler");
var _a = cc._decorator, ccclass = _a.ccclass, executeInEditMode = _a.executeInEditMode, playOnFocus = _a.playOnFocus, menu = _a.menu;
var NeutrinoEffectComponent = /** @class */ (function (_super) {
    __extends(NeutrinoEffectComponent, _super);
    function NeutrinoEffectComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    NeutrinoEffectComponent.prototype.getEffectClass = function () { return NeutrinoEffect; };
    NeutrinoEffectComponent.prototype.getTexturesDatabase = function () { return textures_1.default; };
    NeutrinoEffectComponent = __decorate([
        ccclass,
        executeInEditMode,
        playOnFocus,
        menu('i18n:MAIN_MENU.component.renderers/NeutrinoComponent/Fireworks02')
    ], NeutrinoEffectComponent);
    return NeutrinoEffectComponent;
}(NeutrinoComponent_1.default));
exports.default = NeutrinoEffectComponent;
cc.Assembler.register(NeutrinoEffectComponent, NeutrinoAssembler_1.default);

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcbmV1dHJpbm9wYXJ0aWNsZXNcXGNvbXBvbmVudHNcXE5ldXRyaW5vRWZmZWN0X0ZpcmV3b3JrczAyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSxxRUFBcUU7QUFDckUsZ0NBQWdDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFFaEMsbUVBQXFFO0FBQ3JFLHdDQUFtQztBQUNuQyx1REFBa0Q7QUFDbEQsdURBQWtEO0FBRTVDLElBQUEsS0FBa0QsRUFBRSxDQUFDLFVBQVUsRUFBOUQsT0FBTyxhQUFBLEVBQUUsaUJBQWlCLHVCQUFBLEVBQUUsV0FBVyxpQkFBQSxFQUFFLElBQUksVUFBaUIsQ0FBQztBQU10RTtJQUFxRCwyQ0FBaUI7SUFBdEU7O0lBR0EsQ0FBQztJQUZBLGdEQUFjLEdBQWQsY0FBbUIsT0FBTyxjQUFjLENBQUMsQ0FBQyxDQUFDO0lBQzNDLHFEQUFtQixHQUFuQixjQUF3QixPQUFPLGtCQUFRLENBQUMsQ0FBQyxDQUFDO0lBRnRCLHVCQUF1QjtRQUozQyxPQUFPO1FBQ1AsaUJBQWlCO1FBQ2pCLFdBQVc7UUFDWCxJQUFJLENBQUMsa0VBQWtFLENBQUM7T0FDcEQsdUJBQXVCLENBRzNDO0lBQUQsOEJBQUM7Q0FIRCxBQUdDLENBSG9ELDJCQUFpQixHQUdyRTtrQkFIb0IsdUJBQXVCO0FBSzVDLEVBQUUsQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLHVCQUF1QixFQUFFLDJCQUFpQixDQUFDLENBQUMiLCJmaWxlIjoiIiwic291cmNlUm9vdCI6Ii8iLCJzb3VyY2VzQ29udGVudCI6WyIvLyAhISEgVGhpcyBmaWxlIGlzIGdlbmVyYXRlZCBieSBOZXV0cmlub1BhcnRpY2xlcyBleHRlbnNpb24gcGFja2FnZS5cbi8vICEhISBEb24ndCBtb2RpZnkgaXQgbWFudWFsbHkuXG5cbmltcG9ydCAqIGFzIE5ldXRyaW5vRWZmZWN0IGZyb20gJy4uL2V4cG9ydGVkX2VmZmVjdHMvRmlyZXdvcmtzMDIuanMnO1xuaW1wb3J0IHRleHR1cmVzIGZyb20gJy4uL3RleHR1cmVzJztcbmltcG9ydCBOZXV0cmlub0NvbXBvbmVudCBmcm9tICdOZXV0cmlub0NvbXBvbmVudCc7XG5pbXBvcnQgTmV1dHJpbm9Bc3NlbWJsZXIgZnJvbSAnTmV1dHJpbm9Bc3NlbWJsZXInO1xuXG5jb25zdCB7Y2NjbGFzcywgZXhlY3V0ZUluRWRpdE1vZGUsIHBsYXlPbkZvY3VzLCBtZW51fSA9IGNjLl9kZWNvcmF0b3I7XG5cbkBjY2NsYXNzXG5AZXhlY3V0ZUluRWRpdE1vZGVcbkBwbGF5T25Gb2N1c1xuQG1lbnUoJ2kxOG46TUFJTl9NRU5VLmNvbXBvbmVudC5yZW5kZXJlcnMvTmV1dHJpbm9Db21wb25lbnQvRmlyZXdvcmtzMDInKVxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTmV1dHJpbm9FZmZlY3RDb21wb25lbnQgZXh0ZW5kcyBOZXV0cmlub0NvbXBvbmVudCB7XG5cdGdldEVmZmVjdENsYXNzKCkgeyByZXR1cm4gTmV1dHJpbm9FZmZlY3Q7IH1cblx0Z2V0VGV4dHVyZXNEYXRhYmFzZSgpIHsgcmV0dXJuIHRleHR1cmVzOyB9XG59XG5cbmNjLkFzc2VtYmxlci5yZWdpc3RlcihOZXV0cmlub0VmZmVjdENvbXBvbmVudCwgTmV1dHJpbm9Bc3NlbWJsZXIpO1xuIl19
//------QC-SOURCE-SPLIT------
