{"version":3,"sources":["assets\\Script\\Plugin\\PathFinding.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import { Constants } from \"../Data/constants\";\r\nimport AStar from \"./Astar\";\r\nimport { Grid } from \"./Grid\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class PathFinding extends cc.Component {\r\n\r\n    @property(cc.Node)\r\n    target: cc.Node = null;\r\n\r\n    @property([cc.Node])\r\n    nodesToMove: cc.Node[] = [];\r\n\r\n    isStartFindPath: boolean = false;\r\n\r\n    private grid: Grid;\r\n    private astar: AStar;\r\n\r\n    protected onLoad(): void {\r\n        // Khởi tạo Grid và AStar\r\n        this.grid = new Grid(20); // Khởi tạo grid với kích thước 10x10, ví dụ\r\n        this.astar = new AStar(this.grid);\r\n    }\r\n\r\n    protected start(): void {\r\n \r\n    }\r\n\r\n\r\n    startFindPAth(): void {\r\n        if(this.isStartFindPath) return;\r\n\r\n        this.isStartFindPath = true;\r\n        this.setupGridObstacles();\r\n        this.findPaths();\r\n    }\r\n\r\n\r\n    private setupGridObstacles(): void {\r\n        // Ví dụ: Đặt vật cản trong grid\r\n        this.grid.setObstacle(3, 3);\r\n        this.grid.setObstacle(4, 4);\r\n        // Thêm vật cản khác nếu cần\r\n    }\r\n\r\n    private findPaths(): void {\r\n        const targetPosition = this.grid.getNodePosition(this.target);\r\n\r\n        this.nodesToMove.forEach(node => {\r\n            const startPosition = this.grid.getNodePosition(node);\r\n\r\n            const path = this.astar.findPath(startPosition, targetPosition);\r\n\r\n            this.moveNodeAlongPath(node, path);\r\n        });\r\n    }\r\n\r\n    private moveNodeAlongPath(node: cc.Node, path: { x: number, y: number }[]): void {\r\n        if (path.length === 0) return;\r\n\r\n        let index = 0;\r\n        const moveStep = () => {\r\n            if (index < path.length) {\r\n                const { x, y } = path[index];\r\n                const position = this.grid.getWorldPosition(x, y);\r\n\r\n                cc.tween(node)\r\n                    .to(1, { position: position })\r\n                    .call(() => {\r\n                        index++;\r\n                        moveStep();\r\n                    })\r\n                    .start();\r\n            }\r\n        };\r\n\r\n        moveStep();\r\n    }\r\n\r\n\r\n    protected update(dt: number): void {\r\n        if (window.isDraw && !Constants.isWinGame) {\r\n            this.startFindPAth();\r\n        }\r\n    }\r\n}\r\n"]}