[1,0,0,[["cc.EffectAsset",["_name","shaders","techniques"],0]],[[0,0,1,2,4]],[[0,"NeutrinoEffect",[{"hash":1760556102,"record":null,"name":"NeutrinoEffect|vs|fs","glsl3":{"vert":"\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nuniform NEUTRINO {\n  mat4 worldParentMat;\n};\nin vec3 a_position;\nin vec4 a_color;\nin vec2 a_uv0;\nout vec4 v_color;\nout vec2 v_uv0;\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * (worldParentMat * pos);\n  v_uv0 = a_uv0;\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\nin vec4 v_color;\nin vec2 v_uv0;\nuniform sampler2D texture;\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  vec4 texture_tmp = texture(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  o *= v_color;\n  gl_FragColor = o;\n}"},"glsl1":{"vert":"\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 worldParentMat;\nattribute vec3 a_position;\nattribute vec4 a_color;\nattribute vec2 a_uv0;\nvarying vec4 v_color;\nvarying vec2 v_uv0;\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * (worldParentMat * pos);\n  v_uv0 = a_uv0;\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\nvarying vec4 v_color;\nvarying vec2 v_uv0;\nuniform sampler2D texture;\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  vec4 texture_tmp = texture2D(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  o *= v_color;\n  gl_FragColor = o;\n}"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplers":[]}},"defines":[{"name":"CC_USE_ALPHA_ATLAS_texture","type":"boolean","defines":[]},{"name":"INPUT_IS_GAMMA","type":"boolean","defines":[]}],"blocks":[{"name":"NEUTRINO","binding":0,"members":[{"name":"worldParentMat","type":26,"count":1}],"defines":[]}],"samplers":[{"name":"texture","type":29,"count":1,"binding":30,"defines":[]}]},{"hash":2585400596,"record":null,"name":"NeutrinoEffect|vs_premul|fs","glsl3":{"vert":"\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nuniform NEUTRINO {\n  mat4 worldParentMat;\n};\nin vec3 a_position;\nin vec4 a_color;\nin vec2 a_uv0;\nout vec4 v_color;\nout vec2 v_uv0;\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * (worldParentMat * pos);\n  v_uv0 = a_uv0;\n  v_color = vec4(a_color.rgb * a_color.a, a_color.a);\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\nin vec4 v_color;\nin vec2 v_uv0;\nuniform sampler2D texture;\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  vec4 texture_tmp = texture(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  o *= v_color;\n  gl_FragColor = o;\n}"},"glsl1":{"vert":"\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 worldParentMat;\nattribute vec3 a_position;\nattribute vec4 a_color;\nattribute vec2 a_uv0;\nvarying vec4 v_color;\nvarying vec2 v_uv0;\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * (worldParentMat * pos);\n  v_uv0 = a_uv0;\n  v_color = vec4(a_color.rgb * a_color.a, a_color.a);\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\nvarying vec4 v_color;\nvarying vec2 v_uv0;\nuniform sampler2D texture;\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  vec4 texture_tmp = texture2D(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  o *= v_color;\n  gl_FragColor = o;\n}"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplers":[]}},"defines":[{"name":"CC_USE_ALPHA_ATLAS_texture","type":"boolean","defines":[]},{"name":"INPUT_IS_GAMMA","type":"boolean","defines":[]}],"blocks":[{"name":"NEUTRINO","binding":0,"members":[{"name":"worldParentMat","type":26,"count":1}],"defines":[]}],"samplers":[{"name":"texture","type":29,"count":1,"binding":30,"defines":[]}]},{"hash":2564961200,"record":null,"name":"NeutrinoEffect|vs|fs_multiply","glsl3":{"vert":"\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nuniform NEUTRINO {\n  mat4 worldParentMat;\n};\nin vec3 a_position;\nin vec4 a_color;\nin vec2 a_uv0;\nout vec4 v_color;\nout vec2 v_uv0;\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * (worldParentMat * pos);\n  v_uv0 = a_uv0;\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\nin vec4 v_color;\nin vec2 v_uv0;\nuniform sampler2D texture;\nvoid main () {\n  vec4 tex = vec4(1, 1, 1, 1);\n  vec4 texture_tmp = texture(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    tex.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    tex.a *= texture_tmp.a;\n  #else\n    tex *= texture_tmp;\n  #endif\n  float alpha = tex.a * v_color.a;\n  vec3 color = mix(vec3(1, 1, 1), v_color.rgb * tex.rgb, alpha);\n  gl_FragColor = vec4(color, alpha);\n}"},"glsl1":{"vert":"\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 worldParentMat;\nattribute vec3 a_position;\nattribute vec4 a_color;\nattribute vec2 a_uv0;\nvarying vec4 v_color;\nvarying vec2 v_uv0;\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * (worldParentMat * pos);\n  v_uv0 = a_uv0;\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\nvarying vec4 v_color;\nvarying vec2 v_uv0;\nuniform sampler2D texture;\nvoid main () {\n  vec4 tex = vec4(1, 1, 1, 1);\n  vec4 texture_tmp = texture2D(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    tex.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    tex.a *= texture_tmp.a;\n  #else\n    tex *= texture_tmp;\n  #endif\n  float alpha = tex.a * v_color.a;\n  vec3 color = mix(vec3(1, 1, 1), v_color.rgb * tex.rgb, alpha);\n  gl_FragColor = vec4(color, alpha);\n}"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplers":[]}},"defines":[{"name":"CC_USE_ALPHA_ATLAS_texture","type":"boolean","defines":[]},{"name":"INPUT_IS_GAMMA","type":"boolean","defines":[]}],"blocks":[{"name":"NEUTRINO","binding":0,"members":[{"name":"worldParentMat","type":26,"count":1}],"defines":[]}],"samplers":[{"name":"texture","type":29,"count":1,"binding":30,"defines":[]}]},{"hash":2736591465,"record":null,"name":"NeutrinoEffect|vs|fs_multiply_premul","glsl3":{"vert":"\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nuniform NEUTRINO {\n  mat4 worldParentMat;\n};\nin vec3 a_position;\nin vec4 a_color;\nin vec2 a_uv0;\nout vec4 v_color;\nout vec2 v_uv0;\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * (worldParentMat * pos);\n  v_uv0 = a_uv0;\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\nin vec4 v_color;\nin vec2 v_uv0;\nuniform sampler2D texture;\nvoid main () {\n  vec4 tex = vec4(1, 1, 1, 1);\n  vec4 texture_tmp = texture(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    tex.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    tex.a *= texture_tmp.a;\n  #else\n    tex *= texture_tmp;\n  #endif\n  float alpha = tex.a * v_color.a;\n  if (tex.a < 0.01)\n  {\n    gl_FragColor = vec4(1, 1, 1, 0);\n  }\n  else\n  {\n    vec3 texColor = tex.rgb / tex.a;\n    vec3 color = mix(vec3(1, 1, 1), v_color.rgb * texColor, alpha);\n    gl_FragColor = vec4(color, alpha);\n  }\n}"},"glsl1":{"vert":"\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 worldParentMat;\nattribute vec3 a_position;\nattribute vec4 a_color;\nattribute vec2 a_uv0;\nvarying vec4 v_color;\nvarying vec2 v_uv0;\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * (worldParentMat * pos);\n  v_uv0 = a_uv0;\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\nvarying vec4 v_color;\nvarying vec2 v_uv0;\nuniform sampler2D texture;\nvoid main () {\n  vec4 tex = vec4(1, 1, 1, 1);\n  vec4 texture_tmp = texture2D(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    tex.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    tex.a *= texture_tmp.a;\n  #else\n    tex *= texture_tmp;\n  #endif\n  float alpha = tex.a * v_color.a;\n  if (tex.a < 0.01)\n  {\n    gl_FragColor = vec4(1, 1, 1, 0);\n  }\n  else\n  {\n    vec3 texColor = tex.rgb / tex.a;\n    vec3 color = mix(vec3(1, 1, 1), v_color.rgb * texColor, alpha);\n    gl_FragColor = vec4(color, alpha);\n  }\n}"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplers":[]}},"defines":[{"name":"CC_USE_ALPHA_ATLAS_texture","type":"boolean","defines":[]},{"name":"INPUT_IS_GAMMA","type":"boolean","defines":[]}],"blocks":[{"name":"NEUTRINO","binding":0,"members":[{"name":"worldParentMat","type":26,"count":1}],"defines":[]}],"samplers":[{"name":"texture","type":29,"count":1,"binding":30,"defines":[]}]}],[{"name":"normal","passes":[{"program":"NeutrinoEffect|vs|fs","blendState":{"targets":[{"blend":true,"blendSrc":770,"blendDst":771}]},"rasterizerState":{"cullMode":0},"properties":{"texture":{"value":"white","type":29}}}]},{"name":"normal_premul","passes":[{"program":"NeutrinoEffect|vs_premul|fs","blendState":{"targets":[{"blend":true,"blendSrc":1,"blendDst":771}]},"rasterizerState":{"cullMode":0},"properties":{"texture":{"value":"white","type":29}}}]},{"name":"add","passes":[{"program":"NeutrinoEffect|vs|fs","blendState":{"targets":[{"blend":true,"blendSrc":770,"blendDst":1}]},"rasterizerState":{"cullMode":0},"properties":{"texture":{"value":"white","type":29}}}]},{"name":"add_premul","passes":[{"program":"NeutrinoEffect|vs_premul|fs","blendState":{"targets":[{"blend":true,"blendSrc":1,"blendDst":1}]},"rasterizerState":{"cullMode":0},"properties":{"texture":{"value":"white","type":29}}}]},{"name":"multiply","passes":[{"program":"NeutrinoEffect|vs|fs_multiply","blendState":{"targets":[{"blend":true,"blendSrc":774,"blendDst":0}]},"rasterizerState":{"cullMode":0},"properties":{"texture":{"value":"white","type":29}}}]},{"name":"multiply_premul","passes":[{"program":"NeutrinoEffect|vs|fs_multiply_premul","blendState":{"targets":[{"blend":true,"blendSrc":774,"blendDst":0}]},"rasterizerState":{"cullMode":0},"properties":{"texture":{"value":"white","type":29}}}]}]]],0,0,[],[],[]]