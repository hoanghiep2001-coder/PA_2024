{"version":3,"sources":["assets\\Script\\Controller\\TouchAreaController.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import { Constants } from \"../Data/constants\";\r\nimport AudioManager from \"../Plugin/AudioManager\";\r\nimport { GameController } from \"./GameController\";\r\nimport GamePlay from \"./GamePlay\";\r\nimport NodesContainer from \"./NodesContainer\";\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport class TouchAreaController extends cc.Component {\r\n\r\n  // Component\r\n  @property(NodesContainer)\r\n  NodesContainer: NodesContainer = null;\r\n  @property(AudioManager)\r\n  AudioManager: AudioManager = null;\r\n  @property(GameController)\r\n  GameController: GameController = null;\r\n  @property(GamePlay)\r\n  GamePlay: GamePlay = null;\r\n\r\n\r\n  protected onLoad() {\r\n\r\n  }\r\n\r\n\r\n  protected start() {\r\n    this.registerEvent();\r\n  }\r\n\r\n\r\n  private registerEvent(): void {\r\n    // this.NodesContainer.hideMask.on(cc.Node.EventType.TOUCH_START, this.hideMaskTouch, this);\r\n\r\n    this.NodesContainer.Lobsters.forEach(lobster => {\r\n      lobster.on(cc.Node.EventType.TOUCH_START, this.lobsterTouchStart, this);\r\n      lobster.on(cc.Node.EventType.TOUCH_MOVE, this.lobsterTouchMove, this);\r\n      lobster.on(cc.Node.EventType.TOUCH_END, this.lobsterTouchEnd, this);\r\n      lobster.on(cc.Node.EventType.TOUCH_CANCEL, this.lobsterTouchEnd, this);\r\n    });\r\n\r\n    this.NodesContainer.CTA_button.on(cc.Node.EventType.TOUCH_START, () => {\r\n      this.GameController.installHandle();\r\n    }, this);\r\n  }\r\n\r\n\r\n  private lobsterTouchStart(e: cc.Event.EventTouch): void {\r\n    if (Constants.isToStore) this.GameController.installHandle();\r\n\r\n    if (!Constants.isCanTouch) return;\r\n\r\n    this.handleIronSourcePlaySound();\r\n\r\n    this.AudioManager.playSound(Constants.SoundTrack.TouchSound);\r\n\r\n    Constants.isGameStart = true;\r\n\r\n    let targetNode: cc.Node = e.currentTarget,\r\n      parentNode: cc.Node = targetNode.parent,\r\n      childCount: number = parentNode.childrenCount,\r\n      targetNodeScale: number = targetNode.scale;\r\n\r\n    this.NodesContainer.hand.active = false;\r\n\r\n    // lấy ra số tương ứng của lobster đang click\r\n    Constants.currentLobsterIndex = this.getNumberFromNodeName(targetNode.name);\r\n\r\n    // scale up target node\r\n    cc.tween(targetNode)\r\n      .to(0.5, { scale: targetNodeScale + 0.03 }, { easing: cc.easing.elasticOut })\r\n      .start();\r\n\r\n    // luôn luôn cho nổi trên bề mặt canvas khi đc chọn\r\n    targetNode.setSiblingIndex(childCount - 1);\r\n  }\r\n\r\n\r\n  private lobsterTouchMove(e: cc.Event.EventTouch): void {\r\n    if (!Constants.isCanTouch) return;\r\n\r\n    let targetNode: cc.Node = e.currentTarget,\r\n      touchPos: cc.Vec2 = e.getLocation();\r\n\r\n    targetNode.setPosition(this.node.convertToNodeSpaceAR(touchPos));\r\n  }\r\n\r\n\r\n  private lobsterTouchEnd(e: cc.Event.EventTouch): void {\r\n    if (!Constants.isCanTouch) return;\r\n\r\n    let targetNode: cc.Node = e.currentTarget,\r\n      targetNodeScale = targetNode.scale,\r\n      demoLobster = this.NodesContainer.UI\r\n        .getChildByName(\"Demo\")\r\n        .getChildByName(`Lobster${Constants.currentLobsterIndex}`);\r\n\r\n    // check collide correct area or not\r\n    this.isCollideCorrectLobsterArea(targetNode)\r\n      ? this.correct(targetNode, targetNodeScale, demoLobster)\r\n      : this.wrong(targetNode, targetNodeScale);\r\n\r\n  }\r\n\r\n\r\n  private correct(targetNode: cc.Node, targetNodeScale: number, demoLobster: cc.Node): void {\r\n    targetNode.setSiblingIndex(Constants.currentLobsterIndex);\r\n\r\n    this.AudioManager.playSound(Constants.SoundTrack.CorrectSound);\r\n\r\n    Constants.currentCorrectStatus += 1;\r\n\r\n    if (Constants.lobsterStatus.every(status => status === true)) {\r\n      this.GamePlay.doneFlow();\r\n\r\n      this.scheduleOnce(() => {\r\n        this.GamePlay.showNextFlow(2);\r\n      }, 1.5);\r\n    }\r\n\r\n    cc.tween(targetNode)\r\n      .to(0.5, { scale: targetNodeScale - 0.03, position: demoLobster.position }, { easing: cc.easing.elasticOut })\r\n      .start();\r\n  }\r\n\r\n\r\n  private wrong(targetNode: cc.Node, targetNodeScale: number): void {\r\n    cc.tween(targetNode)\r\n      .to(0.5, { scale: targetNodeScale - 0.03 }, { easing: cc.easing.elasticOut })\r\n      .start();\r\n  }\r\n\r\n\r\n  private hideMaskTouch(): void {\r\n    // mtg & applovin\r\n    if (Constants.isToStore) this.GameController.installHandle();\r\n  }\r\n\r\n\r\n  private getNumberFromNodeName(nodeName: string): number {\r\n    let match = nodeName.match(/\\d+$/);\r\n    if (match) return parseInt(match[0], 10);\r\n    return null;\r\n  }\r\n\r\n\r\n  private isCollideCorrectLobsterArea(lobster: cc.Node): boolean {\r\n    let lobsterBdx = lobster.getBoundingBox(),\r\n      correctArea = this.NodesContainer.CorrectLobsterAreas[Constants.currentLobsterIndex - 1],\r\n      correctAreaBdx = correctArea.getBoundingBox();\r\n      \r\n      \r\n      if (lobsterBdx.intersects(correctAreaBdx)) {\r\n        Constants.lobsterStatus[Constants.currentLobsterIndex - 1] = true;\r\n        return true\r\n      }\r\n      \r\n      else {\r\n        Constants.lobsterStatus[Constants.currentLobsterIndex - 1] = false;\r\n      return false;\r\n    }\r\n  }\r\n\r\n\r\n  public handleIronSourcePlaySound(): void {\r\n    if (Constants.ironSource.isPlayBgSound) {\r\n      return;\r\n    }\r\n\r\n    if (Constants.ironSource.SoundState) {\r\n      Constants.ironSource.isPlayBgSound = true;\r\n      this.AudioManager.playSound(Constants.SoundTrack.bgSound);\r\n    }\r\n  }\r\n\r\n\r\n  protected update(dt: number): void {\r\n    this.GamePlay.handleMuteSoundIronSource();\r\n  }\r\n}\r\n"]}