{"version":3,"sources":["packages\\neutrinoparticles\\runtime\\NeutrinoAssemblerJSB.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import NeutrinoComponent from './NeutrinoComponent';\r\n\r\nconst renderer = <any>cc.renderer;\r\n//const gfx = renderer.renderEngine.gfx;\r\n\r\nconst quadIndices = [0, 1, 3, 1, 2, 3];\r\nconst numQuadVertices = 4;\r\nconst maxQuadsInDrawCall = 512;\r\nconst maxVerticesInDrawCall = numQuadVertices * maxQuadsInDrawCall;\r\nconst maxIndicesInDrawCall = quadIndices.length * maxQuadsInDrawCall;\r\n\r\nexport default class NeutrinoAssembler extends cc.MeshRenderer.__assembler__ {\r\n    _currentVertex = 0;\r\n    _renderStyleIndex = null;\r\n    _worldScale = new cc.Vec3();\r\n\r\n    static _vertexFormat = cc.gfx.VertexFormat.XYZ_UV_Color;\r\n    static _vertexBuffers: ArrayBuffer[] = [];\r\n    static _vertexFloatBuffers: Float32Array[] = [];\r\n    static _vertexUint32Buffers: Uint32Array[] = [];\r\n    static _indexBuffers: Uint16Array[] = [];\r\n    static _bufferIndex: number;\r\n    static _numBufferVertices: number;\r\n    static _numBufferIndices: number;\r\n    static _startBufferVertex: number;\r\n    static _startBufferIndex: number;\r\n\r\n    _drawCallIndex: number;\r\n\r\n    static _checkAndCreateCurrentBuffer() {\r\n        const bufIndex = NeutrinoAssembler._bufferIndex;\r\n\r\n        if (!NeutrinoAssembler._vertexBuffers[bufIndex]) {\r\n            NeutrinoAssembler._vertexBuffers[bufIndex] = new ArrayBuffer(NeutrinoAssembler._vertexFormat._bytes *\r\n                maxVerticesInDrawCall);\r\n            NeutrinoAssembler._vertexFloatBuffers[bufIndex] = new Float32Array(NeutrinoAssembler._vertexBuffers[bufIndex]);\r\n            NeutrinoAssembler._vertexUint32Buffers[bufIndex] = new Uint32Array(NeutrinoAssembler._vertexBuffers[bufIndex]);\r\n        }\r\n\r\n        if (!NeutrinoAssembler._indexBuffers[bufIndex]) {\r\n            NeutrinoAssembler._indexBuffers[bufIndex] = new Uint16Array(maxIndicesInDrawCall);\r\n        }\r\n    }\r\n\r\n    static _incBuffer() {\r\n        ++NeutrinoAssembler._bufferIndex;\r\n        NeutrinoAssembler._numBufferVertices = 0;\r\n        NeutrinoAssembler._numBufferIndices = 0;\r\n        NeutrinoAssembler._startBufferVertex = 0;\r\n        NeutrinoAssembler._startBufferIndex = 0;\r\n        NeutrinoAssembler._checkAndCreateCurrentBuffer();\r\n    }\r\n\r\n    _prepareForGeometry(numVertices: number, numIndices: number) {\r\n        if (NeutrinoAssembler._numBufferVertices + numVertices == maxVerticesInDrawCall) {\r\n            const i = 0;\r\n        }\r\n\r\n        if (NeutrinoAssembler._numBufferVertices + numVertices > maxVerticesInDrawCall\r\n            || NeutrinoAssembler._numBufferIndices + numIndices > maxIndicesInDrawCall) {\r\n                this._finishDrawCall();\r\n                NeutrinoAssembler._incBuffer();\r\n            }        \r\n    }\r\n\r\n    _commitGeometry(numVertices: number, numIndices: number) {\r\n        NeutrinoAssembler._numBufferVertices += numVertices;\r\n        NeutrinoAssembler._numBufferIndices += numIndices;\r\n    }\r\n\r\n    static _resetGeometryBuffers() {\r\n        \r\n        this._bufferIndex = 0;\r\n        this._numBufferVertices = 0;\r\n        this._numBufferIndices = 0;\r\n        this._startBufferVertex = 0;\r\n        this._startBufferIndex = 0;\r\n        this._checkAndCreateCurrentBuffer();\r\n    }\r\n\r\n    _finishDrawCall() {\r\n        if (NeutrinoAssembler._startBufferIndex === NeutrinoAssembler._numBufferIndices) {\r\n            return;\r\n        }\r\n\r\n        const bufIndex = NeutrinoAssembler._bufferIndex;\r\n\r\n        const subVertices = new Float32Array(NeutrinoAssembler._vertexBuffers[bufIndex],\r\n            NeutrinoAssembler._startBufferVertex * NeutrinoAssembler._vertexFormat._bytes,\r\n            ((NeutrinoAssembler._numBufferVertices - NeutrinoAssembler._startBufferVertex) * NeutrinoAssembler._vertexFormat._bytes) / 4);\r\n\r\n        const subIndices = new Uint16Array(NeutrinoAssembler._indexBuffers[bufIndex].buffer, \r\n            NeutrinoAssembler._startBufferIndex * 2,\r\n            NeutrinoAssembler._numBufferIndices - NeutrinoAssembler._startBufferIndex);\r\n\r\n        this.updateIAData(this._drawCallIndex, NeutrinoAssembler._vertexFormat._nativeObj,\r\n            subVertices, subIndices);\r\n\r\n        const effect = this._renderComp.materials[this._renderStyleIndex].effect;\r\n        this.updateEffect(this._drawCallIndex, effect._nativeObj);\r\n\r\n        NeutrinoAssembler._startBufferVertex = NeutrinoAssembler._numBufferVertices;\r\n        NeutrinoAssembler._startBufferIndex = NeutrinoAssembler._numBufferIndices;\r\n        ++this._drawCallIndex;\r\n    }\r\n\r\n    updateRenderData (comp) { \r\n        this.fillBuffers(comp);\r\n        comp.node._renderFlag |= cc.RenderFlow.FLAG_UPDATE_RENDER_DATA;\r\n    }\r\n\r\n    fillBuffers (comp) {\r\n        if (!comp._neutrinoEffect || !comp.context.loaded()) {\r\n            return;\r\n        }\r\n\r\n        this.reset(); // CustomAssembler.reset()\r\n        NeutrinoAssembler._resetGeometryBuffers();\r\n        this._drawCallIndex = 0;\r\n        this._currentVertex = 0;\r\n        this._renderStyleIndex = null;\r\n        this._worldScale = comp._worldScale;\r\n        \r\n        comp._neutrinoEffect.fillGeometryBuffers([1, 0, 0], [0, 1, 0], [0, 0, -1]);\r\n        this._finishDrawCall();\r\n    }\r\n\r\n    // Methods called by neutrinoEffect\r\n\r\n    initialize(maxNumVertices, texChannels, indices, maxNumRenderCalls) {\r\n    }\r\n\r\n    beforeQuad(renderStyleIndex) {\r\n        if (this._renderStyleIndex !== renderStyleIndex) {\r\n            this._finishDrawCall();\r\n            this._renderStyleIndex = renderStyleIndex;\r\n        }\r\n        \r\n        this._prepareForGeometry(numQuadVertices, quadIndices.length);\r\n    }\r\n\r\n    pushVertex(vertex) {\r\n        const bufIndex = NeutrinoAssembler._bufferIndex;\r\n        const floatsPerVertex = NeutrinoAssembler._vertexFormat._bytes / 4;\r\n        const floatsBuffer = NeutrinoAssembler._vertexFloatBuffers[bufIndex];\r\n        const uintsBuffer = NeutrinoAssembler._vertexUint32Buffers[bufIndex];\r\n\r\n        let floatsStart = (NeutrinoAssembler._numBufferVertices + this._currentVertex) * floatsPerVertex;\r\n\r\n        const x = vertex.position[0] * this._worldScale.x;\r\n        const y = vertex.position[1] * this._worldScale.y;\r\n        const z = vertex.position[2] * this._worldScale.z;\r\n\r\n        floatsBuffer[floatsStart++] = x;\r\n        floatsBuffer[floatsStart++] = y;\r\n        floatsBuffer[floatsStart++] = z;\r\n\r\n        floatsBuffer[floatsStart++] = vertex.texCoords[0][0];\r\n        floatsBuffer[floatsStart++] = 1.0 - vertex.texCoords[0][1];\r\n\r\n        uintsBuffer[floatsStart++] = \r\n            (vertex.color[0]) |\r\n            (vertex.color[1] << 8) |\r\n            (vertex.color[2] << 16) |\r\n            (vertex.color[3] << 24);\r\n\r\n        ++this._currentVertex;\r\n\r\n        if (this._currentVertex == 4) {\r\n            const idicesBuffer = NeutrinoAssembler._indexBuffers[bufIndex];\r\n\r\n            for (let i = 0; i < quadIndices.length; ++i) {\r\n                idicesBuffer[NeutrinoAssembler._numBufferIndices + i] = \r\n                    (NeutrinoAssembler._numBufferVertices - NeutrinoAssembler._startBufferVertex) \r\n                    + quadIndices[i];\r\n            }\r\n\r\n            this._commitGeometry(numQuadVertices, quadIndices.length);\r\n            this._currentVertex = 0;\r\n        }\r\n    }\r\n\r\n    pushRenderCall(rc) {\r\n    }\r\n\r\n    cleanup() {\r\n    }\r\n}\r\n"]}