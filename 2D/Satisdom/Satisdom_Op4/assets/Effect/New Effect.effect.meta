{
  "ver": "1.0.27",
  "uuid": "1def9568-a251-4cd7-b162-072324e8ab67",
  "importer": "effect",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nuniform vec4 cc_time;\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nfloat hash(float p)\n{\n  vec3 p3  = fract(vec3(p) * 0.1031);\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.x + p3.y) * p3.z);\n}\nfloat fade(float t) { return t*t*t*(t*(6.*t-15.)+10.); }\nfloat grad(float hash, float p)\n{\n    int m = int(mod(1e4*hash,2.0));\n    if(m==0){\n      return p;\n    }else{\n      return -p;\n    }\n}\nfloat perlinNoise1D(float p)\n{\n  float pi = floor(p), pf = p - pi, w = fade(pf);\n  return mix(grad(hash(pi), pf), grad(hash(pi + 1.0), pf - 1.0), w) * 2.0;\n}\nfloat fbm(float pos, int octaves, float persistence)\n{\n  float total = 0.;\n  float frequency = 1.;\n  float amplitude = 1.;\n  float maxValue = 0.;\n  const int MAX_FOR_NUM = 100;\n  for(int i = 0; i < MAX_FOR_NUM; ++i)\n  {\n    if(i>octaves) break;\n    total += perlinNoise1D(pos * frequency) * amplitude;\n    maxValue += amplitude;\n    amplitude *= persistence;\n    frequency *= 2.;\n  }\n  return total / maxValue;\n}\nvec4 renderLR(in vec2 uv)\n{\n    float noise = .04 * (fbm(uv.x, 4, .1) + fbm(uv.x + cc_time.x, 4, .1));\n    float d = (uv.y + noise + .24) * 30.0;\n  float t = clamp(d, 0., 1.);\n    vec3 skyColor = vec3(.0, .3, .3) - uv.y * .3;\n    vec3 waterColor = vec3(.0, .1, .3) + .3 * uv.y;\n    return vec4(mix(waterColor, skyColor, t), 1.);\n}\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture2D(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  vec2 iResolution = vec2(500.0,500.0);\n  vec2 uv = 1.0 -2.0* v_uv0;\n  gl_FragColor = renderLR(uv);\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nfloat hash(float p)\n{\n  vec3 p3  = fract(vec3(p) * 0.1031);\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.x + p3.y) * p3.z);\n}\nfloat fade(float t) { return t*t*t*(t*(6.*t-15.)+10.); }\nfloat grad(float hash, float p)\n{\n    int m = int(mod(1e4*hash,2.0));\n    if(m==0){\n      return p;\n    }else{\n      return -p;\n    }\n}\nfloat perlinNoise1D(float p)\n{\n  float pi = floor(p), pf = p - pi, w = fade(pf);\n  return mix(grad(hash(pi), pf), grad(hash(pi + 1.0), pf - 1.0), w) * 2.0;\n}\nfloat fbm(float pos, int octaves, float persistence)\n{\n  float total = 0.;\n  float frequency = 1.;\n  float amplitude = 1.;\n  float maxValue = 0.;\n  const int MAX_FOR_NUM = 100;\n  for(int i = 0; i < MAX_FOR_NUM; ++i)\n  {\n    if(i>octaves) break;\n    total += perlinNoise1D(pos * frequency) * amplitude;\n    maxValue += amplitude;\n    amplitude *= persistence;\n    frequency *= 2.;\n  }\n  return total / maxValue;\n}\nvec4 renderLR(in vec2 uv)\n{\n    float noise = .04 * (fbm(uv.x, 4, .1) + fbm(uv.x + cc_time.x, 4, .1));\n    float d = (uv.y + noise + .24) * 30.0;\n  float t = clamp(d, 0., 1.);\n    vec3 skyColor = vec3(.0, .3, .3) - uv.y * .3;\n    vec3 waterColor = vec3(.0, .1, .3) + .3 * uv.y;\n    return vec4(mix(waterColor, skyColor, t), 1.);\n}\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  vec2 iResolution = vec2(500.0,500.0);\n  vec2 uv = 1.0 -2.0* v_uv0;\n  gl_FragColor = renderLR(uv);\n}"
      }
    }
  ],
  "subMetas": {}
}