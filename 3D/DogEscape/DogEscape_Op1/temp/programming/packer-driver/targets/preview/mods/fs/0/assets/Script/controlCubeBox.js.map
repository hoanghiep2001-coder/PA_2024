{"version":3,"sources":["file:///D:/PA_2024/3D/CatEscape/CatEscape_OP15/assets/Script/controlCubeBox.ts"],"names":["_decorator","Component","RigidBody","v3","CCString","SkeletalAnimation","Quat","Vec3","Vec2","BoxCollider","JoyStick","Game","ccclass","property","controlCubeBox","start","isMoving","_body","node","getComponent","setRotationFromEuler","_aniSkeleton","play","handleCollideDoor","rigidbody","collider","on","e","otherCollider","name","console","log","GamePlay","bg","stop","catSound","Cat","active","Boss","endGame","handleEndGame","handleAngleCat","directionVector","joyStickPos","joyStick","getPosition","newPos","x","y","stick","subtract","rotationRadians","Math","atan2","rotationDegrees","cc","misc","radiansToDegrees","radian","angle","update","deltaTime","flag","resume","pause","moveDirection","sin","cos","normalize","multiplyScalar","speed","pos","z","isRun","setPosition","position","add"],"mappings":"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","sourcesContent":["import {\n  _decorator,\n  Component,\n  Node,\n  RigidBody,\n  v3,\n  CCString,\n  CCFloat,\n  SkeletalAnimation,\n  Quat,\n  Vec3,\n  Vec2,\n  BoxCollider,\n  ICollisionEvent,\n} from \"cc\";\nimport { JoyStick } from \"./JoyStick\";\nimport { Game } from \"./Game\";\nconst { ccclass, property } = _decorator;\n\n@ccclass(\"controlCubeBox\")\nexport class controlCubeBox extends Component {\n  @property(Game)\n  GamePlay: Game;\n  @property(JoyStick)\n  joyStick: JoyStick;\n  @property(RigidBody)\n  _body: RigidBody = null;\n  @property(CCString)\n  catDirectionMove: string = \"stop\";\n  @property(SkeletalAnimation)\n  _aniSkeleton: SkeletalAnimation = null;\n\n  // state\n  speed: number = 5;\n  radian: number = null;\n\n  isMoving: boolean = false;\n  flag: boolean = false;\n  isRun: boolean = true;\n\n  rigidbody: RigidBody = null;\n  collider: BoxCollider = null;\n\n  angle: number = null;\n  private targetRotation: Quat = new Quat();\n  private currentRotation: Quat = new Quat();\n\n\n  start() {\n    this.isMoving = false;\n    this._body = this.node.getComponent(RigidBody);\n    this.node.setRotationFromEuler(v3(0, 90, 0));\n    this._aniSkeleton = this.node.getComponent(SkeletalAnimation);\n    this._aniSkeleton.play(\"Cats_Runcycle\");\n\n    this.handleCollideDoor();\n  }\n\n\n  private handleCollideDoor(): void {\n    this.rigidbody = this.getComponent(RigidBody);\n    this.collider = this.getComponent(BoxCollider);\n\n    this.collider.on(\"onCollisionEnter\", (e: ICollisionEvent) => {\n      if (e.otherCollider.node.name === \"Door\") {\n        console.log(\"end\");\n        this.GamePlay.bg.stop();\n        this.GamePlay.catSound.stop();\n        this.GamePlay.Cat.active = false;\n        this.GamePlay.Boss.active = false;\n        this.GamePlay.endGame = true;\n        this.GamePlay.handleEndGame();\n      }\n  });\n  }\n\n\n  public handleAngleCat(): void {\n    let directionVector: Vec2;\n    let joyStickPos = this.joyStick.node.getPosition();\n\n    let newPos: Vec2 = new Vec2(joyStickPos.x, joyStickPos.y);\n    directionVector = this.joyStick.stick.getPosition().subtract(newPos);\n    \n    \n    const rotationRadians = Math.atan2(directionVector.y, directionVector.x);\n    const rotationDegrees = cc.misc.radiansToDegrees(rotationRadians);\n    this.radian = rotationRadians;\n    this.angle = rotationDegrees;\n  }\n\n\n  update(deltaTime: number) {\n    if(this.flag && this.isMoving) {\n      this.flag = false;\n      this._aniSkeleton.resume();\n    }\n    \n    if (!this.flag && !this.isMoving) {\n      this.flag = true;\n      this._aniSkeleton.pause();\n    }\n\n    if (this.isMoving) {\n      const moveDirection = new Vec3(Math.sin(this.radian), 0, Math.cos(this.radian));\n      moveDirection.normalize();\n      moveDirection.multiplyScalar(this.speed * deltaTime); \n\n      let pos = new Vec3(moveDirection.x, 0 , moveDirection.z)\n\n      this.node.setRotationFromEuler(v3(0, this.angle, 0));\n      if(this.isRun) {\n        if(this.node.getPosition().y > 0 ) {\n          return;\n        }\n        this.node.setPosition(this.node.position.add(pos));\n      }\n    }\n  }\n}\n"]}