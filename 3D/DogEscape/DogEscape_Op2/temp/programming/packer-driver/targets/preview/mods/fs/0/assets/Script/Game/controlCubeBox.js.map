{"version":3,"sources":["file:///D:/PA_2024/3D/CatEscape/CatEscape_OP15/assets/Script/Game/controlCubeBox.ts"],"names":["_decorator","Component","RigidBody","v3","CCString","SkeletalAnimation","Quat","Vec3","Vec2","BoxCollider","JoyStick","Game","Constants","ccclass","property","controlCubeBox","start","isMoving","_body","node","getComponent","setRotationFromEuler","_aniSkeleton","play","handleCollide","rigidbody","collider","on","e","otherCollider","name","isEatFood","active","destroy","handleCatIsCatched","isCatched","handleAngleCat","directionVector","joyStickPos","joyStick","getPosition","newPos","x","y","stick","subtract","rotationRadians","Math","atan2","rotationDegrees","cc","misc","radiansToDegrees","radian","angle","update","deltaTime","flag","resume","pause","moveDirection","sin","cos","normalize","multiplyScalar","speed","pos","z","isRun","setPosition","position","add"],"mappings":"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","sourcesContent":["import {\n  _decorator,\n  Component,\n  Node,\n  RigidBody,\n  v3,\n  CCString,\n  CCFloat,\n  SkeletalAnimation,\n  Quat,\n  Vec3,\n  Vec2,\n  BoxCollider,\n  ICollisionEvent,\n} from \"cc\";\nimport { JoyStick } from \"./JoyStick\";\nimport { Game } from \"./Game\";\nimport { Constants } from \"../Data/Constant\";\nconst { ccclass, property } = _decorator;\n\n@ccclass(\"controlCubeBox\")\nexport class controlCubeBox extends Component {\n  @property(Game)\n  GamePlay: Game;\n  @property(JoyStick)\n  joyStick: JoyStick;\n  @property(RigidBody)\n  _body: RigidBody = null;\n  @property(CCString)\n  catDirectionMove: string = \"stop\";\n  @property(SkeletalAnimation)\n  _aniSkeleton: SkeletalAnimation = null;\n\n  // state\n  speed: number = 4;\n  radian: number = null;\n\n  isMoving: boolean = false;\n  flag: boolean = false;\n  isRun: boolean = true;\n\n  rigidbody: RigidBody = null;\n  collider: BoxCollider = null;\n\n  angle: number = null;\n  private targetRotation: Quat = new Quat();\n  private currentRotation: Quat = new Quat();\n\n\n  start() {\n    this.isMoving = false;\n    this._body = this.node.getComponent(RigidBody);\n    this.node.setRotationFromEuler(v3(0, 90, 0));\n    this._aniSkeleton = this.node.getComponent(SkeletalAnimation);\n    this._aniSkeleton.play(\"Cats_Runcycle\");\n    \n\n    this.handleCollide();\n  }\n\n\n  private handleCollide(): void {\n    this.rigidbody = this.getComponent(RigidBody);\n    this.collider = this.getComponent(BoxCollider);\n\n    this.collider.on(\"onCollisionEnter\", (e: ICollisionEvent) => {\n      if (e.otherCollider.node.name === \"Food\") {\n        Constants.isEatFood = true;\n        e.otherCollider.node.active = false;\n        e.otherCollider.destroy();\n      }\n\n      if(e.otherCollider.node.name === \"Vision\") {\n        this.handleCatIsCatched();\n      }\n      \n  });\n  }\n\n\n  private handleCatIsCatched(): void {\n    Constants.isCatched = true;\n  }\n\n\n  public handleAngleCat(): void {\n    let directionVector: Vec2;\n    let joyStickPos = this.joyStick.node.getPosition();\n\n    let newPos: Vec2 = new Vec2(joyStickPos.x, joyStickPos.y);\n    directionVector = this.joyStick.stick.getPosition().subtract(newPos);\n    \n    const rotationRadians = Math.atan2(directionVector.y, directionVector.x);\n    const rotationDegrees = cc.misc.radiansToDegrees(rotationRadians);\n    this.radian = rotationRadians;\n    this.angle = rotationDegrees;\n  }\n\n\n  update(deltaTime: number) {\n    if(this.flag && this.isMoving) {\n      this.flag = false;\n      this._aniSkeleton.resume();\n    }\n    \n    if (!this.flag && !this.isMoving) {\n      this.flag = true;\n      this._aniSkeleton.pause();\n    }\n\n    if (this.isMoving) {\n      const moveDirection = new Vec3(Math.sin(this.radian), 0, Math.cos(this.radian));\n      moveDirection.normalize();\n      moveDirection.multiplyScalar(this.speed * deltaTime); \n\n      let pos = new Vec3(moveDirection.x, 0 , moveDirection.z)\n\n      this.node.setRotationFromEuler(v3(0, this.angle, 0));\n      if(this.isRun) {\n        if(this.node.getPosition().y > 0 ) {\n          return;\n        }\n        this.node.setPosition(this.node.position.add(pos));\n      }\n    }\n  }\n}\n"]}