[1,["28x68I08tKwqUgRgqSZY3u","306efPA0VAepWohoSyWEXL","1brw/JvvpFnIvdrxpFCgMZ","adFj3JcEZNabOAtAOTI+9s@6c48a","dekWuT619A/q1w1/RRuOyC","12Y9dMgWdJKJGmTiZyQR9H@a804a","3dQRl9999Ln48uZMmJUNbH","da3hn+VT5BI7Imvui8H+H/@188ca","327Eau3p1KoI1OILp375fz","d1NGQ2rJZCcbhjH0/erZWw","d6mOIqaoFHxJ2MWdGyABjA","18jY5QeThPTa7dCH0bZGAc","daTD5QLjlE2IHqyf/C+AaJ","b2MxkzZKxHeq7NsiMjm/Lr@6c48a","4bZDSSVblK26WEVRzRq3tn@0c841","12Y9dMgWdJKJGmTiZyQR9H@fc873","5fznSWmjNEjI9g7ISI9f9m@9d1b8","a6lHJKIjBAeL6LSfAe6SlX@6c48a","214ncfEupO/ZqevD3MdL4v@6c48a","52vf0vl2VCIIG7oj5WyUi9@6c48a","5ctFLl/cJMRIhD5/iGUcCB@80c75","5ctFLl/cJMRIhD5/iGUcCB@ff8ed","2btlgKBkRMOY2L4a6Ykdn/@eba59","0brGFIMmpD0I21VJrI9zgc@3a9f7","3fqRnCheBLuYh8+9JsK5Ci","c6q4qImG9J8qs7j3XMkTZj@6c48a","41AtY+9wlBh5iT+l3zm8Ft","86GjebjoVLmYXNs9a9pg/O@b3a4e","86GjebjoVLmYXNs9a9pg/O@a936f","86GjebjoVLmYXNs9a9pg/O@abcf7","86GjebjoVLmYXNs9a9pg/O@0eef8","86GjebjoVLmYXNs9a9pg/O@3b708","86GjebjoVLmYXNs9a9pg/O@bb92a","86GjebjoVLmYXNs9a9pg/O@dde5c","86GjebjoVLmYXNs9a9pg/O@13853","86GjebjoVLmYXNs9a9pg/O@94a35","86GjebjoVLmYXNs9a9pg/O@f78f3","86GjebjoVLmYXNs9a9pg/O@ac63e","86GjebjoVLmYXNs9a9pg/O@b13bd","86GjebjoVLmYXNs9a9pg/O@ff196","86GjebjoVLmYXNs9a9pg/O@8921a","86GjebjoVLmYXNs9a9pg/O@39332","86GjebjoVLmYXNs9a9pg/O@c3c84","86GjebjoVLmYXNs9a9pg/O@b0e2d","86GjebjoVLmYXNs9a9pg/O@5e7fd","86GjebjoVLmYXNs9a9pg/O@8b436","86GjebjoVLmYXNs9a9pg/O@7076d","86GjebjoVLmYXNs9a9pg/O@0f747","86GjebjoVLmYXNs9a9pg/O@1142d","86GjebjoVLmYXNs9a9pg/O@c228e","86GjebjoVLmYXNs9a9pg/O@de95e","6caxowAWhAT4A/zNPB/TVA","386D/5q0hHBrKpe8g95ETV@ffa6a","a1mEBg+QlDZrAolqiT5z8D","6cSzmCVxZAK6tMfJs2Oyd4@29327","377R8c85FK4Kq8wHfX+ut/","e5z0AfRGFPrpIsh8yybzCP@c2762","4bZDSSVblK26WEVRzRq3tn@6da96","4e0J8yuxRGY7Q9IsdtqBVE","da3hn+VT5BI7Imvui8H+H/@e97a2","da3hn+VT5BI7Imvui8H+H/@30732","da3hn+VT5BI7Imvui8H+H/@5e001","da3hn+VT5BI7Imvui8H+H/@f1394","da3hn+VT5BI7Imvui8H+H/@189a7","da3hn+VT5BI7Imvui8H+H/@75ee4","da3hn+VT5BI7Imvui8H+H/@06592","da3hn+VT5BI7Imvui8H+H/@a72ab","da3hn+VT5BI7Imvui8H+H/@7f7e1","da3hn+VT5BI7Imvui8H+H/@2224c","983/v+dBZMAJUGpWhi6J2q","08gWyCeEpJULmXrFOvxLO/@527d6","d5tGY46PlMOLMxi1XUJTCS@6a562","57rS2YgBpNR5gz+M0RLUqx@f9941","c4vasun1xPlKO1bbtzMFZ9@f9941","5eqcFo77ZHoqnCyByekAus","2aXH9TKYJA2rjYSsF90buD@f9941","7dj5uJT9FMn6OrOOx83tfK@f9941","f81y4yLaFHCocibYs7JUiD","dcCTiT2PVBO4UvIzXQfNk9@f9941","a7LBYTKOZBco+3QwPThJd0@f9941","4ddd7ZHC5HvIu9o+AIJWFx","78QsGkwjtJmbbd8ilB3p7E","204urOeBBFb6okeRgZ/Mqp@52d44","27qRkgS3NCrJOlfnzVPafe","4fpjdKWEtMxJ/UDDkkfnP7@e9151","4fpjdKWEtMxJ/UDDkkfnP7@ac9ae","30MEMp/qFOKaiMB7fkbBaw","4fpjdKWEtMxJ/UDDkkfnP7@5369c","f0Y2cRfUxERIWFFRr3+AeG","00V2jqAchFuqEQtoZhaXeA@eeb51","0brGFIMmpD0I21VJrI9zgc@2c52c","0brGFIMmpD0I21VJrI9zgc@438fe","0brGFIMmpD0I21VJrI9zgc@7af42","2aXH9TKYJA2rjYSsF90buD@6c48a","bc63h9KIhEzLmfAiVN+b6y","2btlgKBkRMOY2L4a6Ykdn/@fbd31","4cvCa1mgxPlLhFCZMoZz6x@6c48a","82YlGVG2lAU43r3KX6/SUr","41czDe+hJIArQqaw4XZ+L6@6c48a","96ISdYN/pKSK1CQW/sEPvF@6c48a","dfCgmZJRlMnaDrul8xDoQa@6c48a","50LQlrSVNMD70mm+01Hc0E@6c48a","57rS2YgBpNR5gz+M0RLUqx@6c48a","5aYelt7SZIzat2vnJTRi7a@6c48a","5dbVvn+olAg4I5LaULAS+p@6c48a","65SurAC7ZOsqQNrThONHXU@6c48a","7dj5uJT9FMn6OrOOx83tfK@6c48a","81Xulflq5JgafTcVZul88U@7d6ab","81Xulflq5JgafTcVZul88U@2a0e3","81Xulflq5JgafTcVZul88U@aaa20","8fzCJGh7xEKrfC7z4lTGoe@6c48a","b7wS4ssk9NqbyI19bmAGNP@6c48a","a7LBYTKOZBco+3QwPThJd0@6c48a","edGoT/hLNPK7dChjeBJYcx@6c48a","f2oym0FMFB+bmlBrvKnZnC@6c48a","bdlD1yPolAV6FO+5ND3N7x@6c48a","c4vasun1xPlKO1bbtzMFZ9@6c48a","da3hn+VT5BI7Imvui8H+H/@36c77","62BflQnDlPi4iyJvQocT+3@6c48a","dcCTiT2PVBO4UvIzXQfNk9@6c48a","e71uS35VpPpbPKtBCx7x94@6c48a","6d2oscZpdLZbAdfTnJcCOn","12Y9dMgWdJKJGmTiZyQR9H@2e76e","a4f1KGfAZNxJ7dF4dvQejD@9177b","36MImJPctK5pVk4bS1fEWB","2cnB0UpNBL4LoEkPi7fmB4@18cc7","2cnB0UpNBL4LoEkPi7fmB4@96715","a851jW/G9IdKpbyUeIH3i8","cdzWAOlmZAyIeWQtE22GQN","dbhkAO1P1C9aUAmP7m6RoS","00V2jqAchFuqEQtoZhaXeA@7fa36","81Xulflq5JgafTcVZul88U@be422","42manZkmBPR7jbcMLKWpOc","06byByTIZOqY5vs86dF7G1@08bc7","42N/vGm0NP3KS6FHmo0EzW","06byByTIZOqY5vs86dF7G1@0f51f","06byByTIZOqY5vs86dF7G1@c1428","5dbVvn+olAg4I5LaULAS+p@f9941","5aYelt7SZIzat2vnJTRi7a@f9941","e71uS35VpPpbPKtBCx7x94@f9941","41czDe+hJIArQqaw4XZ+L6@f9941","bdlD1yPolAV6FO+5ND3N7x@f9941","50LQlrSVNMD70mm+01Hc0E@f9941","65SurAC7ZOsqQNrThONHXU@f9941","79AAGWkNxFsahhFM1C2heB","0brGFIMmpD0I21VJrI9zgc@2e7b4","c4i/KZ0wFOaYQ6r7JW0KxI@61b85","1er33eqKZM9oktPYT3PYXm@3a5c0","d0MqyYBeFAkIi762QNy1/B@b47c0","6fAc9/gb9Kfr1dCvwZaWSA@b47c0","2a+EUWtexCH7Bg/8LqUu+k","0853Pmi+RGwoXkPoBjWP50","1f6yUxR0BADJeOdFSL/fW6","b74CgMjsZAXZw09YGFU9Xt","71ABQpDbJBR4w8FzLa0Nhg","05wjrTOOVFQp3ElKpAt8z+","74/GVTi31M8aFSDeUqSx83"],["node","_mesh","_parent","_effectAsset","mainTexture","_particleSystem","_mainTexture","targetInfo","_spriteFrame","_textureSource","root","value","_skeleton","asset","_defaultClip","_clip","data","target","source","vision","fakeCat","Game","AudioManager","normalMap","pbrMap","_cameraComponent","scene","eatSound","loseSound","winSound","electric2Sound","electricSound","catAngrySound","bgSound","CTA_Download","CTA_tryBtn","CTA_btn","HideMask","camera","title","text","navigate","icon","GameController","JoyStickComponent","_normalSprite","_envmapHDR","_envmapLDR"],[["cc.Node",["_name","_layer","_active","_objFlags","__editorExtras__","_id","_parent","_lpos","_components","_children","_lscale","_prefab","_lrot","_euler"],-3,1,5,9,2,5,4,5,5],"cc.ImageAsset","cc.Texture2D","cc.SpriteFrame",["cc.Node",["_name","_id","_parent","_components","_lrot","_euler","_children","_prefab","_lpos"],1,1,2,5,5,9,4,5],["cc.CurveRange",["mode","constantMin","constantMax","constant","multiplier","spline"],-2,4],["cc.MeshRenderer",["_shadowCastingMode","_name","node","_materials","lightmapSettings","_mesh","__prefab"],1,1,3,4,6,4],["cc.RealKeyframeValue",["interpolationMode","rightTangent","leftTangent","rightTangentWeight","leftTangentWeight","value","tangentWeightMode"],-4],["cc.RigidBody",["_group","_mass","_enabled","_type","node","_angularFactor","_linearFactor"],-1,1,5,5],["cc.ParticleSystem",["duration","loop","playOnAwake","_simulationSpace","node","_materials","startColor","startSizeX","startSizeY","startSizeZ","startSpeed","startRotationX","startRotationY","startRotationZ","startDelay","startLifetime","gravityModifier","rateOverTime","rateOverDistance","bursts","_colorOverLifetimeModule","_shapeModule","_sizeOvertimeModule","_velocityOvertimeModule","_forceOvertimeModule","_limitVelocityOvertimeModule","_rotationOvertimeModule","_textureAnimationModule","_trailModule","renderer","__prefab"],-1,1,3,4,4,4,4,4,4,4,4,4,4,4,4,4,9,4,4,4,4,4,4,4,4,4,4,4],["cc.ColorKey",["time","color"],2,5],["cc.ShapeModule",["_shapeType","_enable","radius","emitFrom","radiusThickness","arcSpeed"],-2,4],["cc.TextureAnimationModule",["_numTilesX","_numTilesY","_enable","cycleCount","frameOverTime","startFrame"],-1,4,4],["cc.Sprite",["_sizeMode","node","_spriteFrame","_color"],2,1,6,5],["cc.Node",["_name","_id","_children","_components","_lrot","_euler","_prefab","_parent","_lpos","_lscale"],1,2,2,5,5,4,1,5,5],["cc.Node",["_name","_layer","_children","_lpos","_parent","_components","_lrot","_euler"],1,12,5,1,12,5,5],["cc.ModelLightmapSettings",["_castShadow","_receiveShadow"],1],["cc.Material",["_states","_defines","_name","_techIdx","_props"],-1,12],["cc.GradientRange",["_mode","color","gradient"],2,5,4],["cc.ParticleSystemRenderer",["_renderMode","_velocityScale","_mainTexture"],1,6],["cc.UITransform",["node","_contentSize","_anchorPoint"],3,1,5,5],["cc.BoxCollider",["node","_size","_center"],3,1,5,5],["cc.PrefabInstance",["fileId","prefabRootNode","propertyOverrides","mountedComponents"],1,9,9],"cc.TextureCube",["cc.Prefab",["_name"],2],["cc.PrefabInfo",["fileId","root","asset","targetOverrides","nestedPrefabInstanceRoots"],2,1,1,9,2],["cc.SkeletalAnimation",["playOnLoad","node","__prefab","_clips","_defaultClip"],2,1,4,3,6],["cc.SkinnedMeshRenderer",["_shadowCastingMode","node","_materials","lightmapSettings","_skinningRoot","_mesh","_skeleton","__prefab"],2,1,3,4,1,6,6,4],["cc.Gradient",["colorKeys","alphaKeys"],3,9,9],["cc.SizeOvertimeModule",["_enable","size","x","y","z"],2,4,4,4,4],["cc.LimitVelocityOvertimeModule",["_enable","dampen","limitX","limitY","limitZ","limit"],1,4,4,4,4],["cc.AlphaKey",["alpha","time"],1],["cc.Animation",["playOnLoad","node","_clips","_defaultClip"],2,1,3,6],["cc.Camera",["_priority","_visibility","_name","_projection","_orthoHeight","_far","_clearFlags","node","_color"],-4,1,5],["cc.AudioSource",["_playOnAwake","_loop","node"],1,1],["RenderQueueDesc",["stages","isTransparent","sortMode"],0],["cc.PrefabInfo",["fileId","root","instance","asset"],2,1,4,6],["cc.CompPrefabInfo",["fileId"],2],["cc.Mesh",["_native","_hash","_struct"],1,11],["cc.AudioClip",["_name","_native","_duration"],0],["cc.Skeleton",["_name","_hash","_joints","_bindposes"],0,12],["cc.EffectAsset",["_name","shaders","techniques"],0],["cc.Burst",["count"],3,4],["cc.ColorOvertimeModule",["_enable","color"],2,4],["cc.RealCurve",["_times","_values"],2,9],["cc.VelocityOvertimeModule",["x","y","z","speedModifier"],3,4,4,4,4],["cc.ForceOvertimeModule",["x","y","z"],3,4,4,4],["cc.RotationOvertimeModule",["x","y","z"],3,4,4,4],["cc.TrailModule",["lifeTime","widthRatio","colorOverTrail","colorOvertime","_particleSystem"],3,4,4,4,4,1],["cc.SceneAsset",["_name"],2],["cc.TargetInfo",["localID"],2],["cc.Canvas",["node","_cameraComponent"],3,1,1],["cc.Widget",["_alignFlags","_top","_bottom","node"],0,1],["d3eadinT6dHdY+UphBQAWhj",["node","AudioManager","Game","fakeCat","vision"],3,1,1,1,1,1],["CCPropertyOverrideInfo",["value","propertyPath","targetInfo"],1,4],["CCPropertyOverrideInfo",["propertyPath","targetInfo","value"],2,4,8],["CCPropertyOverrideInfo",["propertyPath","targetInfo","value"],2,4,6],["CCPropertyOverrideInfo",["propertyPath","targetInfo","value"],2,1,8],["CCPropertyOverrideInfo",["propertyPath","targetInfo","value"],2,1,6],["CCPropertyOverrideInfo",["value","propertyPath","targetInfo"],1,1],["CCPropertyOverrideInfo",["propertyPath","targetInfo","value"],2,1,4],["CCPropertyOverrideInfo",["propertyPath","targetInfo","value"],2,1,1],["cc.MountedComponentsInfo",["targetInfo","components"],3,4,12],["d948b2gMqdAD6CRzTBJFAiN",["node"],3,1],["cc.Scene",["_name","_children","_prefab","_globals"],2,2,4,4],["cc.TargetOverrideInfo",["propertyPath","source","sourceInfo","target","targetInfo"],2,1,4,1,4],["cc.SceneGlobals",["ambient","shadows","_skybox","fog","octree"],3,4,4,4,4,4],["cc.AmbientInfo",["_skyIllumLDR","_skyColorHDR","_groundAlbedoHDR","_skyColorLDR","_groundAlbedoLDR"],2,5,5,5,5],["cc.ShadowsInfo",["_type","_enabled","_pcf","_bias","_normalBias","_near","_shadowDistance","_invisibleOcclusionRange","_orthoSize","_saturation","_shadowColor","_size"],-7,5,5],["cc.SkyboxInfo",["_enabled","_envmapHDR","_envmapLDR"],2,6,6],["cc.FogInfo",[],3],["cc.OctreeInfo",[],3],["cc.UIOpacity",["_opacity","node"],2,1],["ab7fdcqdMJBlbVEI/I8YoiE",["node","AudioManager","Cat","canvas2D","joyStick","CTA"],3,1,1,1,1,1,1],["cc.Button",["_transition","_zoomScale","node","_normalSprite"],1,1,6],["cc.PlaneCollider",["node"],3,1],["c3658qOQadEYZt80EqPpq5n",["node","AudioManager","Game","controlCubeBox","stick","fakeBg"],3,1,1,1,1,1,1],["cc.DirectionalLight",["_useColorTemperature","_illuminanceHDR","_illuminanceLDR","node","_staticSettings"],0,1,4],["cc.StaticLightSettings",[],3],["50226TeMLNKEqzuYMFQBSOm",["node","AudioManager","GamePlay","Door1","joyStick"],3,1,1,1,1,1],["cf8e1aetmhO9Ixn3ulRoUSJ",["AudioManager"],3,1],["a31f86fp3JJCbWTGM9ai5co",["node","AudioManager","CatController","wallLaser_1","wallLaser_2","Laser","LaserBtn_Red","LaserBtn_Blue","wallLaserBtn_Red","wallLaserBtn_Blue","Fx_Lightning"],3,1,1,1,1,1,1,1,1,1,1,2],["9d69fA7YXNFdJ3sO7cec90s",["node","Cubes"],3,1,2],["2fa136ZOf9Fl5lXghH8qCrM",["node","Gradient","Game"],3,1,1,1],["ForwardPipeline",["_flows"],3,9],["ShadowFlow",["_name","_stages"],2,9],["ShadowStage",["_name"],2],["ForwardFlow",["_name","_priority","_stages"],1,9],["ForwardStage",["_name","renderQueues"],2,9]],[[5,1],[16,1],[5,3,2],[6,0,2,3,4,5,2],[0,0,6,9,7,12,13,2],[50,0,2],[25,0,1,2,2],[0,0,6,8,7,2],[21,0,1,1],[18,1],[38,0,1,2,3],[8,0,4,2],[54,0,1,2,3],[0,0,6,9,11,7,12,13,2],[0,0,6,7,2],[4,0,2,6,8,4,5,2],[59,0,1,2,3],[5,0,1,2,4],[57,0,1,2,2],[5,0,5,2],[10,0,1,2],[44,0,1,2],[0,0,6,8,2],[18,0,2,2],[42,0,1],[43,0,1,2],[45,0,1,2,3,1],[46,0,1,2,1],[47,0,1,2,1],[48,0,1,2,3,4,1],[20,0,1,1],[17,0,1,4,3],[21,0,2,1,1],[0,0,6,9,7,2],[28,0,1],[29,1,2,3,4,1],[7,1,3,2,4,5],[7,5,1,3,2,4,6],[6,1,0,2,3,4,5,3],[8,0,3,4,3],[0,0,1,6,8,7,10,3],[30,2,3,4,5,1],[19,2,1],[0,0,9,2],[0,0,6,8,7,12,10,13,2],[10,1],[21,0,1],[4,0,2,3,4,5,2],[27,0,1,2,3,4,5,6,2],[9,0,1,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,3],[11,0,5,2],[12,2,0,1,3,4,5,5],[55,0,1,2,2],[7,0,5,3],[0,0,6,9,2],[0,0,8,7,2],[37,0,2],[17,3,0,1,4,4],[8,0,1,4,6,5,3],[58,0,1,2,2],[65,0,1,2,3,4,2],[0,0,6,11,7,2],[4,0,2,6,7,8,4,5,2],[4,0,2,3,2],[36,0,1,2,3,2],[39,0,1,2,4],[0,0,9,7,12,13,2],[40,0,1,2,3,4],[10,1,1],[30,0,1,2,3,4,5,3],[13,1,3,2,1],[13,1,2,1],[0,0,6,2],[0,3,4,6,11,3],[0,0,6,9,7,10,2],[14,0,7,2,3,8,4,9,5,2],[9,0,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,3],[5,0,2,3],[11,1,0,2,4,5,5],[12,0,1,3,4,5,4],[19,0,2,2],[34,0,2,2],[24,1],[0,0,6,9,7,12,10,13,2],[4,0,2,6,2],[6,1,2,3,4,5,2],[6,2,3,4,5,1],[22,0,2,2],[13,0,1,3,2,2],[0,0,9,11,2],[0,0,6,8,11,2],[0,0,1,6,8,7,3],[0,0,5,6,8,3],[6,2,6,3,4,5,1],[17,2,0,1,4,4],[10,0,2],[31,0,1,3],[32,0,1,2,3,2],[56,0,1,2,2],[60,0,1,2,2],[0,0,9,11,7,12,13,2],[0,0,6,9,11,7,2],[0,0,1,6,9,8,3],[0,3,4,11,3],[0,0,6,9,8,7,10,2],[0,0,1,6,8,3],[0,0,1,6,8,7,12,10,13,3],[0,0,6,8,7,10,2],[0,0,6,8,7,12,13,2],[0,0,2,6,8,3],[14,0,1,2,3,3],[15,0,2,3,6,7,2],[16,0,2],[26,0,1,3,4,2],[41,0,1,2,4],[9,0,1,2,4,30,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,4],[28,0,1,1],[11,3,5,2],[29,0,1,2,3,4,2],[7,0,1,2,4],[12,4,5,1],[31,0,2],[20,0,1],[8,2,0,1,4,5,4],[53,0,1,2,3,4,1],[32,1,2,3,1],[22,0,1,2,3],[13,0,1,2,2],[72,0,1,2],[34,1,0,2,3],[24,0,2],[0,0,9,8,11,2],[0,0,6,9,11,2],[0,0,6,8,11,7,2],[0,0,1,9,8,7,3],[0,0,9,10,2],[0,0,9,8,7,12,10,13,2],[0,0,9,8,7,10,2],[0,0,1,6,9,8,10,3],[0,0,2,6,8,7,10,3],[0,0,6,9,8,7,12,10,13,2],[0,0,6,8,10,2],[0,0,1,6,8,10,3],[0,0,2,6,9,7,10,3],[4,0,2,3,7,2],[4,0,2,3,7,4,5,2],[4,0,2,3,8,2],[4,0,1,2,3,3],[14,0,2,3,6,4,5,2],[15,0,2,2],[15,0,1,4,5,3,3],[25,0,3,4,2],[6,2,3,4,1],[16,1,2],[26,1,2,1],[27,1,7,2,3,4,5,6,1],[9,0,1,2,3,4,30,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,5],[18,1,1],[5,0,1,3],[5,0,1,2,4,5],[11,1,0,2,5,4],[7,0,6,1,3,2,4,7],[7,0,6,5,3,4,6],[12,2,0,1,4,5,4],[19,0,1,2,3],[49,0,2],[20,0,1,2,1],[51,0,1,1],[52,0,1,2,3,4],[8,4,5,1],[22,0,3,2,2],[61,0,1,2,2],[62,0,1,1],[63,0,1],[64,0,1,2,3,2],[66,0,1,2,3,4,1],[67,0,1,2,3,4,2],[68,0,1,2,3,4,5,6,7,8,9,10,11,11],[69,0,1,2,2],[70,1],[71,1],[73,0,1,2,3,4,5,1],[74,0,1,2,3,3],[33,2,0,1,7,8,4],[33,3,0,4,5,6,1,7,8,7],[75,0,1],[76,0,1,2,3,4,5,1],[77,0,1,2,3,4,4],[78,1],[79,0,1,2,3,4,1],[80,0,1],[81,0,1,2,3,4,5,6,7,8,9,10,1],[82,0,1,1],[83,0,1,2,1],[84,0,1],[85,0,1,2],[86,0,2],[87,0,1,2,3],[88,0,1,2],[35,0,2],[35,1,2,0,4]],[[[[82],[89,"lamp",[-2],[6,"88VDQVisBbw5m9OxjU+gSN",-1,0]],[90,"Lamp",1,[[93,-3,[56,"6aTg9z5L9YKLFfuC6s5ZQe"],[0],[1],1]],[6,"d7p4IWeJ5WZ5ZUYl9TqCaj",1,0]]],0,[0,10,1,0,-1,2,0,0,2,0,16,1,3],[0,0],[-1,1],[88,89]],[[[10,".bin",669826071,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":18720,"length":5280,"count":1320,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":18720,"count":390,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.0034193038009107113,0,-0.0034193038009107113],"maxPosition",8,[1,0.0034193038009107113,0.013177032582461834,0.0034193038009107113]]],-1],0,0,[],[],[]],[[[65,"sfx_Lose",".mp3",1.8],-1],0,0,[],[],[]],[[[10,".bin",2583196069,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":36960,"length":5040,"count":1260,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":36960,"count":770,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.0018714733887463808,-2.382876118645072e-10,-0.0029920602682977915],"maxPosition",8,[1,0.001871500862762332,0.013806384056806564,0.0010497719049453735]]],-1],0,0,[],[],[]],[[[10,".bin",4186905938,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":2016,"length":432,"count":108,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":2016,"count":42,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.0009921710006892681,-0.005100779701024294,-0.018094662576913834],"maxPosition",8,[1,0.0009921706514433026,0.005100778304040432,0.018094660714268684]]],-1],0,0,[],[],[]],[[[10,".bin",2086787151,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":36960,"length":5040,"count":1260,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":36960,"count":770,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.0018714733887463808,-2.382876118645072e-10,-0.0010497719049453735],"maxPosition",8,[1,0.001871500862762332,0.013806384056806564,0.0029920602682977915]]],-1],0,0,[],[],[]],[[[65,"sfx-Catch",".mp3",1.2],-1],0,0,[],[],[]],[[[10,".bin",3999486386,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":321984,"length":46116,"count":23058,"stride":2}},{"primitiveMode":7,"jointMapIndex":1,"vertexBundelIndices":[1],"indexView":{"offset":422604,"length":7440,"count":3720,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":321984,"count":4472,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]},{"view":{"offset":368100,"length":54504,"count":757,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,1,2,3,4,8,9,10,11,12,13,15,16,17,18,19,20,27,28,29,30,31,32,33,34,35,36,37,38],[0,2,3,4,5,6,7,8,9,13,15,16,17,19,20,28,29]]},"minPosition",8,[1,-0.0109719755128026,0.00002661293910932727,-0.01999668776988983],"maxPosition",8,[1,0.011171560734510422,0.0379662960767746,0.02745170146226883]]],-1],0,0,[],[],[]],[[[82],[131,"Dog01_base",[-3,-4],[[154,-2,[56,"6fx9MD3wxcP7BQqAxTdce8"]]],[6,"c9MvU9yHNU6LSwn2Uz07lA",-1,0]],[13,"Root_M",1,[-5,-6,-7,-8],[6,"e5yduVL0taIaIOS9Lwg7K1",1,0],[1,-9.926165279876456e-26,0.0157761387526989,-0.0048415507189929485],[3,0.6874759283453021,-0.16545938162885845,0.6874759879499477,-0.16545938162885845],[1,179.99999873090616,-90.00000527302531,-27.064766147664777]],[100,"Chest_M",[-9,-10,-11],[6,"a44C8jCvZUco+3V7NZxXWe",1,0],[1,0.005437308456748724,2.2204460823375376e-17,3.0298428493880733e-18],[3,1.858925659003597e-15,-9.28063981023139e-17,-0.018244788520824493,0.9998335499931128],[1,2.1292945908587198e-13,-6.751100616015785e-15,-2.0908147673687516]],[100,"HeadEnd_M",[-12,-13],[6,"f7gCKFDA9XQpHpDmAP897q",1,0],[1,0.010589845478534698,1.1102229998097382e-18,6.703950931897134e-19],[3,1.4348600649179104e-16,3.129576010591653e-17,-0.004977178351635199,0.9999876137711188],[1,1.6460746371691365e-14,3.668203447146243e-15,-0.5703449816749264]],[13,"Tail0_M",2,[-14],[6,"935wSgFrhenqGInj+EpaXH",1,0],[1,-0.005060264840722084,-0.003174217650666833,5.703013616908947e-10],[3,0.15250631101198137,0.988302496759729,-1.0039893640552361e-8,-4.6320978565275916e-8],[1,3.435054018983045e-7,-179.9999946821885,17.544397987357364]],[13,"Tail1_M",5,[-15],[6,"367eTYii1QP46LwgERVhtF",1,0],[1,0.003908764570951462,3.108624482185328e-17,-6.997988348612507e-17],[3,6.182801464124789e-16,1.0100019829855982e-17,-0.07379267959273583,0.9972736036005985],[1,7.152084090504396e-14,6.452684090277526e-15,-8.46371140899017]],[13,"Tail2_M",6,[-16],[6,"f7zxcPLdlSbqoQ3JI6Fkd9",1,0],[1,0.0037857897114008665,0,-1.5720624410237404e-18],[3,-8.385806927497043e-17,6.612914671325719e-17,-0.20808138185123265,0.9781115164064279],[1,-8.563878525601409e-15,5.9255598611319965e-15,-24.019879943162262]],[13,"Tail3_M",7,[-17],[6,"871sc/2/BcR6kop1IYqVfi",1,0],[1,0.003702085930854082,2.2204459996194763e-18,-1.418571065052342e-19],[3,1.4264618504337917e-16,3.675140634978486e-17,-0.27049192812641426,0.9627222428190048],[1,1.9768633757048414e-14,9.928779440480781e-15,-31.387083058909038]],[13,"Tail4_M",8,[-18],[6,"4bXsIydfVTZokr6Ki4dVvf",1,0],[1,0.0027893066871911287,-3.108624482185328e-17,-3.605657801145744e-19],[3,1.4271692359614517e-16,-6.87729731684157e-17,-0.15890605547964293,0.9872937078356676],[1,1.568623749639847e-14,-5.457508789533013e-15,-18.286810965291608]],[62,"Tail5_M",9,[[61,"Tail6_M",-19,[6,"39PGEpJMhW8ImnsYKAyy9+",1,0],[1,0.002999505028128624,8.881783998477905e-18,-1.98182949265964e-19]]],[6,"32vO3InmtVEoeSHa3LREWS",1,0],[1,0.0026767118833959103,2.4424906409404546e-17,-4.4936954872315815e-18],[3,8.680179647547737e-17,1.0392483832147773e-16,-0.13719892102817985,0.9905435154846572],[1,1.1935934542378819e-14,1.367583187786505e-14,-15.771584250525965]],[13,"Hip_R",2,[-20],[6,"36hzNdsXBbK6s1zksXLyCt",1,0],[1,0.00021893827943131328,0.001547324238345027,-0.005602690391242504],[3,0.9362116009413809,0.31845176728220115,-0.14817214248643115,0.011888076741003806],[1,171.67349123168867,20.7250650677066,36.35265036421384]],[13,"Knee_R",11,[-21],[6,"d3UmHMR4RZQYH5RuGZD/ts",1,0],[1,0.005299943033605814,-7.36637764675585e-11,-9.992007618673103e-18],[3,-1.581601223932772e-16,1.583021062907597e-16,-0.6142947064727947,0.7890766842325928],[1,-1.2873734974291444e-14,1.2966823268506148e-14,-75.8013805313396]],[13,"Ankle_R",12,[-22],[6,"e90VdKKaRbQamosBL3EKl3",1,0],[1,0.006178718991577625,-8.587786731739655e-11,-2.2204459996194763e-18],[3,-0.12391382319571964,0.08210772185640224,0.5462254821796664,0.8243430166200005],[1,-38.27713040216629,34.78285674742188,61.667194095075004]],[62,"Toes1_R",13,[[61,"Toes2_R",-23,[6,"d3lnZhTqdTlpKg/FYqf9oN",1,0],[1,0.002875857288017869,-0.0018572276458144188,-2.735906293183099e-11]]],[6,"69ltBaouBYC4jnZMnbZm1+",1,0],[1,0.0039573307149112225,-3.605031898001876e-11,-6.3031936441138026e-12],[3,-3.7315985439783135e-14,2.6284716293573373e-14,0.5974790417160275,0.8018845270424523],[1,-1.827922972499943e-11,1.737589741185159e-11,73.37911972907881]],[101,"RootPart1_M",2,[-24],[6,"85kDTdgLBauYHhGNMtSUc4",1,0],[1,0.002145906910300255,0,5.690535542779429e-11]],[101,"RootPart2_M",15,[-25],[6,"38DWpbRjVbQ6VQO4K1vtBm",1,0],[1,0.002145906910300255,8.881783998477905e-18,1.116706131258199e-18]],[13,"Spine2_M",16,[3],[6,"17rYXIyTdZgqFJa7FgPZH5",1,0],[1,0.002145906910300255,-2.2204459996194763e-18,2.000742279432023e-18],[3,5.385721064201506e-25,1.5778514886277438e-24,-0.20315349220143952,0.9791469034860701],[1,1.0590217122729605e-22,2.0663177015605624e-22,-23.44285510195472]],[13,"Neck_M",3,[-26],[6,"2cmAINoXJYLY8rKeOY6/ob",1,0],[1,0.0025766268372535706,-0.0028804654721170664,-2.813613494568496e-17],[3,9.380052052009325e-17,-1.0956857472808042e-16,-0.6571801851605074,0.7537335100898734],[1,-1.098319172397341e-15,-1.761554610178312e-14,-82.17034120889222]],[13,"Neck1_M",18,[-27],[6,"22/g2rZoxS+5mIowtuWgWy",1,0],[1,0.005955461412668228,0,5.5284488792439745e-11],[3,1.4435267737588425e-16,-1.2512767658224482e-17,-0.0013423018298796777,0.9999990991124929],[1,1.6539718380041925e-14,-1.4116575311855238e-15,-0.15381650556004475]],[13,"Head_M",19,[4],[6,"19TpuCnmJWp5HGPNJOxstI",1,0],[1,0.005998783744871616,1.5099033293720807e-16,9.072517737074293e-11],[3,8.562711026236727e-17,-4.955305717806862e-18,-0.06254078475318006,0.998042409040045],[1,9.834354170926696e-15,4.7304622837740085e-17,-7.17132614632062]],[13,"joint1_R",4,[-28],[6,"46tVk8NYBdPIEZIw1jo3w+",1,0],[1,0.00023726775543764234,0.00007671236380701885,-0.0059566739946603775],[3,-0.3303359165363477,-0.6252025393228912,0.6334450272664235,-0.3142409338417576],[1,91.18903913014546,125.75545242856032,0.8563169532765427]],[13,"joint2_R",21,[-29],[6,"4cvFJlbBtfnpOzy6Z7eeA1",1,0],[1,0.005432054866105318,-1.776356799695581e-17,-1.1102230411687688e-17],[3,-3.554199757739122e-15,1.3681250597676265e-15,-0.39592125562175173,0.918284465373827],[1,-4.5438107132791327e-13,-2.518123917075493e-14,-46.646885615594144]],[62,"joint3_R",22,[[61,"joint4_R",-30,[6,"6feTvkbuBV9J7z3IlpqxSe",1,0],[1,0.004969385918229818,0,6.217248964370656e-17]]],[6,"97LGTew7RXQ5mBb5cGuN0J",1,0],[1,0.00642115343362093,-8.881783998477905e-18,2.8865797581462886e-17],[3,3.5320784100794047e-16,2.6304576332228954e-15,-0.09821070700437393,0.9951656430111026],[1,7.125704629115589e-14,3.099247328368064e-13,-11.272288645567434]],[13,"joint1_L",4,[-31],[6,"b2yacPU8VSvq8VwOWGpg7r",1,0],[1,0.00023726775543764234,0.00007671236380701885,0.0059566739946603775],[3,-0.6252024794110879,0.33033591637405557,0.3142409336873729,0.6334450865598606],[1,-88.81095227277629,54.24454758999086,-0.8563125493614947]],[13,"joint2_L",24,[-32],[6,"e807NhUVdaa5q3LTXn7X7U",1,0],[1,-0.005432054866105318,4.440891999238953e-18,-5.773159516292577e-17],[3,-3.554199757739122e-15,1.3681250597676265e-15,-0.39592125562175173,0.918284465373827],[1,-4.5438107132791327e-13,-2.518123917075493e-14,-46.646885615594144]],[62,"joint3_L",25,[[61,"joint4_L",-33,[6,"a4wkzdPuRVZb6k/aa6NsDn",1,0],[1,-0.004969385918229818,-3.3306689994292145e-18,-6.217248964370656e-17]]],[6,"ebFwcx0XRQGb694TTaXre2",1,0],[1,-0.00642115343362093,-4.440891999238953e-18,-6.661338412448735e-17],[3,3.5320784100794047e-16,2.6304576332228954e-15,-0.09821070700437393,0.9951656430111026],[1,7.125704629115589e-14,3.099247328368064e-13,-11.272288645567434]],[13,"Scapula_R",3,[-34],[6,"bdFBmFwaJTr7+e68Nfbn/e",1,0],[1,0.0007621239055879414,-0.0016057604225352407,-0.0037318235263228416],[3,0.851977486134545,0.47713155595886464,-0.18810290508795774,0.10534295669670848],[1,145.50764959400775,41.61844993852246,50.6583927361595]],[13,"Shoulder_R",27,[-35],[6,"9cMtZy4oBcn4/ypIw5jB5v",1,0],[1,0.0033235829323530197,-1.554312241092664e-17,7.77156120546332e-18],[3,-0.07508488602213975,0.20209428285060313,-0.34008323501824506,0.9153488700979905],[1,0.0000018017148155675181,24.90050370288076,-40.76348720265139]],[13,"Elbow_R",28,[-36],[6,"a1lULJEopbV6aAwVWF0Rhu",1,0],[1,0.005529609974473715,-4.440891999238953e-18,6.88338280561553e-17],[3,1.1494767847135787e-17,-1.290200154868521e-16,0.2629253200294311,0.9648161877204494],[1,5.985683332133825e-15,-1.6954931554956637e-14,30.48742269323807]],[13,"Wrist_R",29,[-37],[6,"b5zWrUdIpbOqQLNno+XjVQ",1,0],[1,0.004068256821483374,1.3322675997716858e-17,1.367009543756792e-11],[3,1.7415311898815334e-8,4.428409649042988e-9,0.24643997903977663,0.9691580555981951],[1,0.000002059156127092143,-2.7972597928292237e-14,28.53389597988347]],[62,"Fingers1_R",30,[[61,"Fingers2_R",-38,[6,"2eVh+y2ehWyZEA1/1BPRzT",1,0],[1,0.001291081658564508,-0.00027761535602621734,1.3544721218064265e-16]]],[6,"33JADfACJb6rB/ic7nUhSY",1,0],[1,0.002782498486340046,0,-1.799551133108146e-11],[3,-1.6354711688442052e-8,1.2642151577385542e-8,0.3565211069010064,0.9342872686353383],[1,-0.000003040345477595779,0.000002710762822906583,41.77339668171125]],[13,"Scapula_L",3,[-39],[6,"ddGRX/KwhWCLN6Tifha8dq",1,0],[1,0.0007621239055879414,-0.0016057604225352407,0.0037318235263228416],[3,-0.47713155558438025,0.8519774854658567,0.10534296406460912,0.1881029049403221],[1,-34.49235143203646,138.38154967531779,-50.658392373107176]],[13,"Shoulder_L",32,[-40],[6,"8cylpMgkZShJ/xohvsXFB1",1,0],[1,-0.0033235829323530197,1.3322675997716858e-17,1.776356799695581e-17],[3,-0.0750849164174496,0.20209428444665592,-0.3400832079017525,0.9153488773270179],[1,-0.0000032367285063756897,24.9005018309278,-40.7634847668195]],[13,"Elbow_L",33,[-41],[6,"6dqiwyKdNcEJaooKWAF7fo",1,0],[1,-0.005529609974473715,-8.881783998477905e-18,6.647535993886677e-11],[3,1.1494771983038743e-17,-1.2902002872174157e-16,0.2629253200294311,0.9648161877204494],[1,5.985684325494117e-15,-1.6954933397573096e-14,30.48742269323807]],[13,"Wrist_L",34,[-42],[6,"b4M9DWGvRVL6H4WL375Iar",1,0],[1,-0.004068256821483374,-1.8873791617151008e-17,-3.196488559953359e-11],[3,-1.912819966064254e-16,-7.06755623940558e-17,0.24643997903977669,0.9691580555981953],[1,-2.1908520113678542e-14,-2.785600993134222e-15,28.533895979883475]],[62,"Fingers1_L",35,[[61,"Fingers2_L",-43,[6,"47J2U/s1FVtoZpBPby8vpX",1,0],[1,-0.001291081658564508,0.00027761535602621734,-1.803965136992769e-11]]],[6,"12FD+AAUZZ/Y3hmMy2sFqJ",1,0],[1,-0.002782498486340046,-2.1094237203180178e-17,-4.088200611374049e-11],[3,1.8681532248790958e-9,2.8939645922713398e-8,0.35652110690100636,0.9342872686353381],[1,-0.0000013171377248608856,0.000004052101179851396,41.77339668171126]],[13,"Hip_L",2,[-44],[6,"2d+esFq59Uc6h91irZwaUz",1,0],[1,0.00021893954544793814,0.001547324238345027,0.005602690391242504],[3,-0.3184517379118146,0.9362116022112241,0.011888018083805142,0.14817220229205225],[1,-8.326502693704521,159.27493003803417,-36.352647644905005]],[13,"Knee_L",37,[-45],[6,"646LH6nM9QRbTaGbpoSw8k",1,0],[1,-0.005299943033605814,-6.566659022100296e-11,4.440891999238953e-18],[3,-3.2851915051505123e-17,2.557515916601964e-17,-0.6142947724770481,0.7890766328484018],[1,-4.7708318523491496e-15,3.72475126030546e-22,-75.80139011663172]],[13,"Ankle_L",38,[-46],[6,"00PsN7H45f+4icscxG1NgB",1,0],[1,-0.006178718991577625,-7.655466538469824e-11,2.2204459996194763e-18],[3,-0.12391388226417716,0.08210768424821226,0.5462254798160993,0.8243430130529935],[1,-38.2771374206888,34.78285567533081,61.6671931083595]],[62,"Toes1_L",39,[[61,"Toes2_L",-47,[6,"26Afz1/9NffJdjTDBEqIi4",1,0],[1,-0.002875857288017869,0.0018572276458144188,1.1509220659844388e-11]]],[6,"c6fccvfNpbyLz8u1SOyVIR",1,0],[1,-0.0039573307149112225,-6.551975628710238e-11,1.8022023109964813e-11],[3,-3.7315985439783135e-14,2.6284716293573373e-14,0.5974790417160275,0.8018845270424523],[1,-1.827922972499943e-11,1.737589741185159e-11,73.37911972907881]],[132,"Dog",1,[-48],[6,"e6bgeVYFtTA6p/pcdONS4G",1,0]],[90,"dog_01",41,[[155,-49,[56,"e7E27pwmdbf4OoEqZsfVAY"],[0,1],[1],1,2,3]],[6,"47cxOib+hfwbBe69sxR+52",1,0]]],0,[0,10,1,0,0,1,0,-1,2,0,-2,41,0,-1,5,0,-2,11,0,-3,15,0,-4,37,0,-1,18,0,-2,27,0,-3,32,0,-1,21,0,-2,24,0,-1,6,0,-1,7,0,-1,8,0,-1,9,0,-1,10,0,2,10,0,-1,12,0,-1,13,0,-1,14,0,2,14,0,-1,16,0,-1,17,0,-1,19,0,-1,20,0,-1,22,0,-1,23,0,2,23,0,-1,25,0,-1,26,0,2,26,0,-1,28,0,-1,29,0,-1,30,0,-1,31,0,2,31,0,-1,33,0,-1,34,0,-1,35,0,-1,36,0,2,36,0,-1,38,0,-1,39,0,-1,40,0,2,40,0,-1,42,0,0,42,0,16,1,3,2,17,4,2,20,49],[0,0,0,0],[-1,-2,1,12],[23,23,90,91]],[[[94,"dog1",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true}],[[[{},"albedoScale",8,[1,0.800000011920929,0.800000011920929,0.800000011920929],"mainTexture",6,0]],11]]],0,0,[0,0],[4,3],[92,2]],[[[67,"Skin-0",2187550975,["Root_M/Hip_L/Knee_L/Ankle_L/Toes1_L","Root_M/Hip_L/Knee_L/Ankle_L","Root_M/Tail0_M","Root_M/Tail0_M/Tail1_M","Root_M","Root_M/Tail0_M/Tail1_M/Tail2_M/Tail3_M/Tail4_M/Tail5_M","Root_M/Tail0_M/Tail1_M/Tail2_M/Tail3_M","Root_M/Tail0_M/Tail1_M/Tail2_M/Tail3_M/Tail4_M","Root_M/Tail0_M/Tail1_M/Tail2_M","Root_M/Hip_R","Root_M/Hip_R/Knee_R/Ankle_R/Toes1_R","Root_M/Hip_R/Knee_R/Ankle_R","Root_M/Hip_R/Knee_R","Root_M/RootPart1_M/RootPart2_M/Spine2_M/Chest_M","Root_M/RootPart1_M/RootPart2_M/Spine2_M/Chest_M/Neck_M/Neck1_M/Head_M/HeadEnd_M/joint1_R","Root_M/RootPart1_M","Root_M/RootPart1_M/RootPart2_M/Spine2_M/Chest_M/Neck_M","Root_M/RootPart1_M/RootPart2_M/Spine2_M/Chest_M/Neck_M/Neck1_M","Root_M/RootPart1_M/RootPart2_M","Root_M/RootPart1_M/RootPart2_M/Spine2_M/Chest_M/Neck_M/Neck1_M/Head_M","Root_M/RootPart1_M/RootPart2_M/Spine2_M","Root_M/RootPart1_M/RootPart2_M/Spine2_M/Chest_M/Neck_M/Neck1_M/Head_M/HeadEnd_M","Root_M/RootPart1_M/RootPart2_M/Spine2_M/Chest_M/Neck_M/Neck1_M/Head_M/HeadEnd_M/joint1_R/joint2_R","Root_M/RootPart1_M/RootPart2_M/Spine2_M/Chest_M/Neck_M/Neck1_M/Head_M/HeadEnd_M/joint1_L/joint2_L","Root_M/RootPart1_M/RootPart2_M/Spine2_M/Chest_M/Neck_M/Neck1_M/Head_M/HeadEnd_M/joint1_R/joint2_R/joint3_R","Root_M/RootPart1_M/RootPart2_M/Spine2_M/Chest_M/Neck_M/Neck1_M/Head_M/HeadEnd_M/joint1_L","Root_M/RootPart1_M/RootPart2_M/Spine2_M/Chest_M/Neck_M/Neck1_M/Head_M/HeadEnd_M/joint1_L/joint2_L/joint3_L","Root_M/RootPart1_M/RootPart2_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L","Root_M/RootPart1_M/RootPart2_M/Spine2_M/Chest_M/Scapula_L","Root_M/RootPart1_M/RootPart2_M/Spine2_M/Chest_M/Scapula_R","Root_M/RootPart1_M/RootPart2_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R","Root_M/RootPart1_M/RootPart2_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/Elbow_R","Root_M/RootPart1_M/RootPart2_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/Elbow_R/Wrist_R","Root_M/RootPart1_M/RootPart2_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/Elbow_R/Wrist_R/Fingers1_R","Root_M/RootPart1_M/RootPart2_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/Elbow_L","Root_M/RootPart1_M/RootPart2_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/Elbow_L/Wrist_L","Root_M/Hip_L","Root_M/Hip_L/Knee_L","Root_M/RootPart1_M/RootPart2_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/Elbow_L/Wrist_L/Fingers1_L"],[[[7,4.6345800086555755e-8,-2.2414699429873508e-8,-1,0,2.4108507514602e-31,-1,2.2414699429873508e-8,0,-1,-1.0388271468966836e-15,-4.6345800086555755e-8,0,-0.006856350228190422,0.0019572998862713575,0.007113240193575621,1],[7,2.114216890447551e-8,-7.53703055522692e-9,-1,0,0.958217978477478,-0.28603801131248474,2.241469587715983e-8,0,-0.28603801131248474,-0.958217978477478,1.1746553729707898e-9,0,-0.007794030010700226,-0.006010020151734352,0.007113240193575621,1],[7,1.3274420496145467e-7,-4.796363484160793e-8,-1,0,0.1653980016708374,-0.9862269759178162,6.925864681761595e-8,0,-0.9862269759178162,-0.1653980016708374,-1.2298281149014656e-7,0,-0.011252240277826786,0.01931001991033554,-1.6147123638177163e-9,1],[7,1.3835776258019905e-7,-2.7901652543960154e-8,-1,0,0.30875301361083984,-0.9511420130729675,6.925684203906712e-8,0,-0.9511420130729675,-0.30875301361083984,-1.2298320939407859e-7,0,-0.017837999388575554,0.01686828024685383,-1.6146782799708603e-9,1],[7,-4.6406661624587286e-8,7.571735935723439e-14,1,0,-0.4549970030784607,-0.8904929757118225,-2.1114823667289784e-8,0,0.8904929757118225,-0.4549970030784607,4.132483866214898e-8,0,0.011489469558000565,0.011845650151371956,5.331869945557344e-10,1],[7,2.9192234407560136e-8,1.3809101062634e-7,-1,0,0.9539819955825806,0.2998639941215515,6.92573820515463e-8,0,0.2998639941215515,-0.9539819955825806,-1.2298262674903526e-7,0,-0.023494549095630646,-0.027122389525175095,-1.6146795012161874e-9,1],[7,1.0152106000305139e-7,9.805518175198813e-8,-1,0,0.9582780003547668,-0.2858380079269409,6.925749573838402e-8,0,-0.2858380079269409,-0.9582780003547668,-1.2298268359245412e-7,0,-0.02932317927479744,-0.010152069851756096,-1.6146867176658475e-9,1],[7,6.562685683775271e-8,1.2495800660872192e-7,-1,0,0.9995710253715515,0.02927990071475506,6.925749573838402e-8,0,0.02927990071475506,-0.9995710253715515,-1.2298291096612957e-7,0,-0.027305280789732933,-0.019715430215001106,-1.6146881609557795e-9,1],[7,1.3773441764897143e-7,3.0832236319611184e-8,-1,0,0.6691820025444031,-0.7430989742279053,6.925794338030755e-8,0,-0.7430989742279053,-0.6691820025444031,-1.2298259832732583e-7,0,-0.026617560535669327,0.006605519913136959,-1.6146939341155075e-9,1],[7,-0.28501278162002563,-0.0721120536327362,-0.9558069705963135,0,-0.8705774545669556,0.4367210268974304,0.2266489416360855,0,0.40107712149620056,0.896701991558075,-0.18725013732910156,0,0.01299725379794836,-0.0018506415653973818,-0.009597769938409328,1],[7,1.2274900029751734e-7,1.800020044129269e-8,-1,0,3.944304526105059e-31,1,1.800020044129269e-8,0,1,-2.2095066187365238e-15,1.2274900029751734e-7,0,0.006856350228190422,-0.0019572998862713575,-0.007113240193575621,1],[7,-1.608969846245145e-8,9.029399450355413e-9,-1,0,-0.958217978477478,0.28603801131248474,1.800020044129269e-8,0,0.28603801131248474,0.958217978477478,4.0498702169600165e-9,0,0.007794030010700226,0.006010020151734352,-0.007113240193575621,1],[7,-3.4277817917427456e-7,-0.293994277715683,-0.9558068513870239,0,-0.6369192600250244,-0.7368609309196472,0.22664932906627655,0,-0.7709307670593262,0.6087719202041626,-0.1872502714395523,0,0.0036821316462010145,0.007008227054029703,-0.009597772732377052,1],[7,-1.7946069519325647e-8,-8.571631404663549e-9,1,0,-0.02671949937939644,-0.9996430277824402,-9.048080507056966e-9,0,0.9996430277824402,-0.02671949937939644,1.7710631183831538e-8,0,-0.00598130002617836,0.012667849659919739,2.284941819086228e-10,1],[7,-0.8114280104637146,-0.5844529867172241,1.7722099343586706e-8,0,-0.5844529867172241,0.8114280104637146,1.3953900257490659e-8,0,-2.2535607158147286e-8,9.648504217807385e-10,-1,0,0.017334969714283943,-0.034258969128131866,0.011357690207660198,1],[7,-1.9888542368562412e-8,1.1201362239013704e-13,1,0,-0.4549970030784607,-0.8904929757118225,-9.049126781235373e-9,0,0.8904929757118225,-0.4549970030784607,1.771065782918413e-8,0,0.009343559853732586,0.011845650151371956,2.285075045849183e-10,1],[7,6.048111345080542e-9,-1.8946600732761e-8,1,0,0.9866840243339539,-0.162650004029274,-9.049236027180996e-9,0,0.162650004029274,0.9866840243339539,1.7710576116769516e-8,0,-0.016569189727306366,-0.006360020022839308,2.2850915604166744e-10,1],[7,6.0989449046644495e-9,-1.8930299106045823e-8,1,0,0.9871169924736023,-0.1600009948015213,-9.049236027180996e-9,0,0.1600009948015213,0.9871169924736023,1.7710577893126356e-8,0,-0.022507499903440475,-0.006420469842851162,1.732251425634601e-10,1],[7,-1.9888542368562412e-8,1.1201362239013704e-13,1,0,-0.4549970030784607,-0.8904929757118225,-9.049126781235373e-9,0,0.8904929757118225,-0.4549970030784607,1.771065782918413e-8,0,0.007197650149464607,0.011845650151371956,2.285074907071305e-10,1],[7,8.414438923409762e-9,-1.8020900327542222e-8,1,0,0.9993690252304077,-0.03552059829235077,-9.049241356251514e-9,0,0.03552059829235077,0.9993690252304077,1.7710640065615735e-8,0,-0.02748177945613861,-0.009928880259394646,8.249899374757064e-11,1],[7,-1.824689377372124e-8,-7.912238864093979e-9,1,0,-0.06317219883203506,-0.9980030059814453,-9.049127669413792e-9,0,0.9980030059814453,-0.06317219883203506,1.7710608091192626e-8,0,-0.00007784069748595357,0.012877630069851875,2.2850742131819146e-10,1],[7,8.593405098622497e-9,-1.793620008072594e-8,1,0,0.9996730089187622,-0.02557089924812317,-9.049239579894675e-9,0,0.02557089924812317,0.9996730089187622,1.771059388033791e-8,0,-0.037970900535583496,-0.01030736044049263,8.24994586534622e-11,1],[7,-0.13206200301647186,-0.9912409782409668,1.7722099343586706e-8,0,-0.9912409782409668,0.13206200301647186,1.3953900257490659e-8,0,-1.6172092998090193e-8,-1.572409225047977e-8,-1,0,0.03308222070336342,-0.014863490127027035,0.011357690207660198,1],[7,-0.13206200301647186,-0.9912409782409668,2.1438499586690085e-10,0,0.9912409782409668,-0.13206200301647186,6.974306166735344e-27,0,2.831211133591527e-11,2.1250720627641329e-10,1,0,-0.03308222070336342,0.014863490127027035,-0.011357690207660198,1],[7,0.06424520164728165,-0.9979339838027954,1.7722099343586706e-8,0,-0.9979339838027954,-0.06424520164728165,1.3953900257490659e-8,0,-1.2786511405238343e-8,-1.8581957306196273e-8,-1,0,0.02905214950442314,-0.009365269914269447,0.011357690207660198,1],[7,-0.8114280104637146,-0.5844529867172241,2.1438499586690085e-10,0,0.5844529867172241,-0.8114280104637146,2.584941263120958e-26,0,1.7395798690422737e-10,1.2529795256899234e-10,1,0,-0.017334969714283943,0.034258969128131866,-0.011357690207660198,1],[7,0.06424520164728165,-0.9979339838027954,2.1438499586690085e-10,0,0.9979339838027954,0.06424520164728165,-1.6155860553718633e-26,0,-1.3773207400979981e-11,2.1394208626901445e-10,1,0,-0.02905214950442314,0.009365269914269447,-0.011357690207660198,1],[7,-8.327573630673157e-10,6.497339199995622e-8,-1,0,0.9823049902915955,0.1872909963130951,1.1350898887485528e-8,0,0.1872909963130951,-0.9823049902915955,-6.397959140258536e-8,0,-0.012889680452644825,0.006326110102236271,0.005131199955940247,1],[7,-0.4210436940193176,-1.5859285440456006e-7,-0.907039999961853,0,0.785767138004303,-0.49952808022499084,-0.36474892497062683,0,-0.4530920088291168,-0.8662979602813721,0.21032311022281647,0,-0.006271783262491226,0.013207631185650826,0.007025618571788073,1],[7,-0.4210436940193176,-1.8341454222081666e-7,-0.907039999961853,0,-0.7857671976089478,0.49952808022499084,0.36474892497062683,0,0.4530920088291168,0.8662979602813721,-0.21032312512397766,0,0.0062717837281525135,-0.013207631185650826,-0.007025618106126785,1],[7,6.264236240838272e-9,-3.7391796325891846e-8,-1,0,-0.9823049902915955,-0.1872909963130951,8.497555437081417e-10,0,-0.1872909963130951,0.9823049902915955,-3.790334446307497e-8,0,0.012889680452644825,-0.006326119881123304,-0.005131199955940247,1],[7,-1.3572601709199716e-8,-3.540019832826147e-8,-1,0,-0.9415130019187927,0.33697599172592163,8.497641479365825e-10,0,0.33697599172592163,0.9415130019187927,-3.790340485920751e-8,0,0.0031329200137406588,-0.009185600094497204,-0.005131199955940247,1],[7,-2.8833854415211135e-8,-6.055605439314604e-8,-1,0,-0.6661859750747681,0.7457849979400635,-2.595310810704632e-8,0,0.7457849979400635,0.6661859750747681,-6.184550471743933e-8,0,-0.005209490191191435,-0.007623069919645786,-0.005131199955940247,1],[7,9.832500325046567e-8,-4.407460174604694e-9,-1,0,0,1,-4.407460174604694e-9,0,1,4.3336349633677743e-16,9.832500325046567e-8,0,-0.011038689874112606,-0.00036102801095694304,-0.005131199955940247,1],[7,3.224661071499213e-8,5.64126949598176e-8,-1,0,0.9415130019187927,-0.33697599172592163,1.1350882012095553e-8,0,-0.33697599172592163,-0.9415130019187927,-6.397964824600422e-8,0,-0.0031329200137406588,0.009185589849948883,0.005131199955940247,1],[7,5.527683555328622e-8,3.415707183762606e-8,-1,0,0.6661859750747681,-0.7457849979400635,1.135083405046089e-8,0,-0.7457849979400635,-0.6661859750747681,-6.397965535143157e-8,0,0.005209490191191435,0.007623069919645786,0.005131199955940247,1],[7,-0.2850128412246704,-0.0721120685338974,-0.9558069705963135,0,0.8705770969390869,-0.4367220103740692,-0.22664883732795715,0,-0.40107786655426025,-0.896701991558075,0.18725034594535828,0,-0.012997251935303211,0.0018506406340748072,0.009597769007086754,1],[7,-3.4277817917427456e-7,-0.2939944565296173,-0.9558067917823792,0,0.6369192600250244,0.7368608713150024,-0.2266494780778885,0,0.7709307670593262,-0.6087719202041626,0.18725039064884186,0,-0.0036821304820477962,-0.007008225191384554,0.009597774595022202,1],[7,1.5028899724711664e-7,-3.547690141658677e-8,-1,0,2.3665827156630354e-30,-1,3.547690141658677e-8,0,-1,-5.331787799895543e-15,-1.5028899724711664e-7,0,0.011038689874112606,0.00036102801095694304,0.005131199955940247,1]],8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]]],0,0,[],[],[]],[[{"base":"2,2,0,0,0,0","mipmaps":["0brGFIMmpD0I21VJrI9zgc@8659f"]}],[2],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[1],0,[],[],[]],[[[10,".bin",3219909449,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":6776,"length":2400,"count":600,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":6776,"count":121,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-5,0,-5],"maxPosition",8,[1,5,0,5]]],-1],0,0,[],[],[]],[[[10,".bin",3434579268,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1344,"length":144,"count":36,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1344,"count":24,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.5,-0.5,-0.5],"maxPosition",8,[1,0.5,0.5,0.5]]],-1],0,0,[],[],[]],[[[10,".bin",3383603168,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":224,"length":24,"count":6,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":224,"count":4,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.5,-0.5,0],"maxPosition",8,[1,0.5,0.5,0]]],-1],0,0,[],[],[]],[[[31,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[4,3],[3,9]],[[[114,"builtin-standard",[{"hash":4038009253,"name":"builtin-standard|standard-vs|standard-fs","blocks":[{"name":"Constants","stageFlags":17,"binding":0,"members":[{"name":"tilingOffset","type":16,"count":1},{"name":"albedo","type":16,"count":1},{"name":"albedoScaleAndCutoff","type":16,"count":1},{"name":"pbrParams","type":16,"count":1},{"name":"emissive","type":16,"count":1},{"name":"emissiveScaleParam","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"albedoMap","type":28,"count":1,"stageFlags":16,"binding":1,"defines":["USE_ALBEDO_MAP"]},{"name":"normalMap","type":28,"count":1,"stageFlags":16,"binding":2,"defines":["USE_NORMAL_MAP"]},{"name":"pbrMap","type":28,"count":1,"stageFlags":16,"binding":3,"defines":["USE_PBR_MAP"]},{"name":"metallicRoughnessMap","type":28,"count":1,"stageFlags":16,"binding":4,"defines":["USE_METALLIC_ROUGHNESS_MAP"]},{"name":"occlusionMap","type":28,"count":1,"stageFlags":16,"binding":5,"defines":["USE_OCCLUSION_MAP"]},{"name":"emissiveMap","type":28,"count":1,"stageFlags":16,"binding":6,"defines":["USE_EMISSIVE_MAP"]}],"samplers":[],"textures":[],"buffers":[{"name":"b_ccLightsBuffer","memoryAccess":1,"stageFlags":16,"binding":7,"defines":["CC_FORWARD_ADD","CC_ENABLE_CLUSTERED_LIGHT_CULLING"]},{"name":"b_clusterLightIndicesBuffer","memoryAccess":1,"stageFlags":16,"binding":8,"defines":["CC_FORWARD_ADD","CC_ENABLE_CLUSTERED_LIGHT_CULLING"]},{"name":"b_clusterLightGridBuffer","memoryAccess":1,"stageFlags":16,"binding":9,"defines":["CC_FORWARD_ADD","CC_ENABLE_CLUSTERED_LIGHT_CULLING"]}],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_normal","format":32,"location":1,"defines":[]},{"name":"a_texCoord","format":21,"location":2,"defines":[]},{"name":"a_tangent","format":44,"location":3,"defines":[]},{"name":"a_vertexId","format":11,"location":6,"defines":["CC_USE_MORPH"]},{"name":"a_joints","location":4,"defines":["CC_USE_SKINNING"]},{"name":"a_weights","format":44,"location":5,"defines":["CC_USE_SKINNING"]},{"name":"a_jointAnimInfo","format":44,"isInstanced":true,"location":7,"defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION","USE_INSTANCING"]},{"name":"a_matWorld0","format":44,"isInstanced":true,"location":8,"defines":["USE_INSTANCING"]},{"name":"a_matWorld1","format":44,"isInstanced":true,"location":9,"defines":["USE_INSTANCING"]},{"name":"a_matWorld2","format":44,"isInstanced":true,"location":10,"defines":["USE_INSTANCING"]},{"name":"a_lightingMapUVParam","format":44,"isInstanced":true,"location":11,"defines":["USE_INSTANCING","USE_LIGHTMAP"]},{"name":"a_dyn_batch_id","format":11,"location":12,"defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"a_color","format":44,"location":13,"defines":["USE_VERTEX_COLOR"]},{"name":"a_texCoord1","format":21,"location":14,"defines":[]}],"varyings":[{"name":"v_fog_factor","type":13,"count":1,"stageFlags":17,"location":0,"defines":["!CC_USE_ACCURATE_FOG"]},{"name":"v_shadowPos","type":16,"count":1,"stageFlags":17,"location":1,"defines":[]},{"name":"v_color","type":16,"count":1,"stageFlags":17,"location":2,"defines":["USE_VERTEX_COLOR"]},{"name":"v_position","type":15,"count":1,"stageFlags":17,"location":3,"defines":[]},{"name":"v_normal","type":15,"count":1,"stageFlags":17,"location":4,"defines":[]},{"name":"v_uv","type":14,"count":1,"stageFlags":17,"location":5,"defines":[]},{"name":"v_uv1","type":14,"count":1,"stageFlags":17,"location":6,"defines":[]},{"name":"v_tangent","type":15,"count":1,"stageFlags":17,"location":7,"defines":["USE_NORMAL_MAP"]},{"name":"v_bitangent","type":15,"count":1,"stageFlags":17,"location":8,"defines":["USE_NORMAL_MAP"]},{"name":"v_luv","type":15,"count":1,"stageFlags":17,"location":9,"defines":["USE_LIGHTMAP","!USE_BATCHING","!CC_FORWARD_ADD"]}],"fragColors":[{"name":"fragColorX","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":["CC_FORWARD_ADD"]},{"name":"fragColor0","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":1,"defines":["!CC_FORWARD_ADD","CC_PIPELINE_TYPE"]},{"name":"fragColor1","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":2,"defines":["!CC_FORWARD_ADD","CC_PIPELINE_TYPE"]},{"name":"fragColor2","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":3,"defines":["!CC_FORWARD_ADD","CC_PIPELINE_TYPE"]}],"glsl4":{"vert":"#extension GL_EXT_shader_explicit_arithmetic_types_int32: require\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec3 a_normal;\nlayout(location = 2) in vec2 a_texCoord;\nlayout(location = 3) in vec4 a_tangent;\n#if CC_USE_MORPH\n    int getVertexId() {\n      return gl_VertexIndex;\n    }\n  layout(set = 2, binding = 4) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    layout(set = 2, binding = 7) uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    layout(set = 2, binding = 8) uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    layout(set = 2, binding = 9) uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n    layout(location = 4) in u32vec4 a_joints;\n  layout(location = 5) in vec4 a_weights;\n  #if CC_USE_BAKED_ANIMATION\n    #if USE_INSTANCING\n      layout(location = 7) in highp vec4 a_jointAnimInfo;\n    #endif\n    layout(set = 2, binding = 3) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(set = 2, binding = 2) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    layout(set = 2, binding = 6) uniform highp sampler2D cc_jointTexture;\n      #else\n    layout(set = 2, binding = 3) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout StandardVertInput attr) {\n    mat4 m = skinMatrix();\n    attr.position = m * attr.position;\n    attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n    attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n  }\n#endif\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if USE_INSTANCING\n  layout(location = 8) in vec4 a_matWorld0;\n  layout(location = 9) in vec4 a_matWorld1;\n  layout(location = 10) in vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    layout(location = 11) in vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  layout(location = 12) in float a_dyn_batch_id;\n  layout(set = 2, binding = 0) uniform CCLocalBatched {\n    highp mat4 cc_matWorlds[10];\n  };\n#else\n  layout(set = 2, binding = 0) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n  };\n#endif\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n  #if CC_USE_FOG == 0\n\tfactor = LinearFog(pos);\n  #elif CC_USE_FOG == 1\n    factor = ExpFog(pos);\n  #elif CC_USE_FOG == 2\n    factor = ExpSquaredFog(pos);\n  #elif CC_USE_FOG == 3\n    factor = LayeredFog(pos);\n  #else\n    factor = 1.0;\n  #endif\n}\n#if !CC_USE_ACCURATE_FOG\nlayout(location = 0) out float v_fog_factor;\n#endif\nvoid CC_TRANSFER_FOG(vec4 pos) {\n#if !CC_USE_ACCURATE_FOG\n    CC_TRANSFER_FOG_BASE(pos, v_fog_factor);\n#endif\n}\nlayout(location = 1) out highp vec4 v_shadowPos;\nlayout(set = 0, binding = 2) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\n#if CC_RECEIVE_SHADOW\n  layout(set = 0, binding = 3) uniform highp sampler2D cc_shadowMap;\n  layout(set = 0, binding = 5) uniform highp sampler2D cc_spotLightingMap;\n#endif\n#if USE_VERTEX_COLOR\n  layout(location = 13) in vec4 a_color;\n  layout(location = 2) out vec4 v_color;\n#endif\nlayout(location = 3) out vec3 v_position;\nlayout(location = 4) out vec3 v_normal;\nlayout(location = 5) out vec2 v_uv;\nlayout(location = 6) out vec2 v_uv1;\n#if USE_NORMAL_MAP\n  layout(location = 7) out vec3 v_tangent;\n  layout(location = 8) out vec3 v_bitangent;\n#endif\n#if HAS_SECOND_UV || USE_LIGHTMAP\n  layout(location = 14) in vec2 a_texCoord1;\n#endif\n#if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n  layout(location = 9) out vec3 v_luv;\n  void CCLightingMapCaclUV()\n  {\n  #if !USE_INSTANCING\n    v_luv.xy = cc_lightingMapUVParam.xy + a_texCoord1 * cc_lightingMapUVParam.zw;\n    v_luv.z = cc_lightingMapUVParam.z;\n  #else\n    v_luv.xy = a_lightingMapUVParam.xy + a_texCoord1 * a_lightingMapUVParam.zw;\n    v_luv.z = a_lightingMapUVParam.z;\n  #endif\n  }\n#endif\nvoid main () {\n  StandardVertInput In;\n      In.position = vec4(a_position, 1.0);\n      In.normal = a_normal;\n      In.tangent = a_tangent;\n    #if CC_USE_MORPH\n      applyMorph(In);\n    #endif\n    #if CC_USE_SKINNING\n      CCSkin(In);\n    #endif\n  mat4 matWorld, matWorldIT;\n    #if USE_INSTANCING\n      matWorld = mat4(\n        vec4(a_matWorld0.xyz, 0.0),\n        vec4(a_matWorld1.xyz, 0.0),\n        vec4(a_matWorld2.xyz, 0.0),\n        vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n      );\n      matWorldIT = matWorld;\n    #elif USE_BATCHING\n      matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n      matWorldIT = matWorld;\n    #else\n      matWorld = cc_matWorld;\n      matWorldIT = cc_matWorldIT;\n    #endif\n  vec4 pos = matWorld * In.position;\n  v_position = pos.xyz;\n  v_normal = normalize((matWorldIT * vec4(In.normal, 0.0)).xyz);\n  #if USE_TWOSIDE\n    vec3 viewDirect = normalize(cc_cameraPos.xyz - v_position);\n    v_normal *= dot(v_normal, viewDirect) < 0.0 ? -1.0 : 1.0;\n  #endif\n  #if USE_NORMAL_MAP\n    v_tangent = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n    v_bitangent = cross(v_normal, v_tangent) * In.tangent.w;\n  #endif\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if SAMPLE_FROM_RT\n    v_uv = cc_cameraPos.w > 1.0 ? vec2(v_uv.x, 1.0 - v_uv.y) : v_uv;\n  #endif\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n    #if SAMPLE_FROM_RT\n      v_uv1 = cc_cameraPos.w > 1.0 ? vec2(v_uv1.x, 1.0 - v_uv1.y) : v_uv1;\n    #endif\n  #endif\n  #if USE_VERTEX_COLOR\n    v_color = a_color;\n  #endif\n  CC_TRANSFER_FOG(pos);\n  v_shadowPos = cc_matLightViewProj * pos;\n  #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    CCLightingMapCaclUV();\n  #endif\n  gl_Position = cc_matProj * (cc_matView * matWorld) * In.position;\n}","frag":"\nprecision highp float;\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n  #if CC_USE_FOG == 0\n\tfactor = LinearFog(pos);\n  #elif CC_USE_FOG == 1\n    factor = ExpFog(pos);\n  #elif CC_USE_FOG == 2\n    factor = ExpSquaredFog(pos);\n  #elif CC_USE_FOG == 3\n    factor = LayeredFog(pos);\n  #else\n    factor = 1.0;\n  #endif\n}\nvoid CC_APPLY_FOG_BASE(inout vec4 color, float factor) {\n  color = vec4(mix(cc_fogColor.rgb, color.rgb, factor), color.a);\n}\n#if !CC_USE_ACCURATE_FOG\nlayout(location = 0) in float v_fog_factor;\n#endif\nvoid CC_APPLY_FOG(inout vec4 color) {\n#if !CC_USE_ACCURATE_FOG\n    CC_APPLY_FOG_BASE(color, v_fog_factor);\n#endif\n}\nvoid CC_APPLY_FOG(inout vec4 color, vec3 worldPos) {\n#if CC_USE_ACCURATE_FOG\n    float factor;\n    CC_TRANSFER_FOG_BASE(vec4(worldPos, 1.0), factor);\n#else\n    float factor = v_fog_factor;\n#endif\n    CC_APPLY_FOG_BASE(color, factor);\n}\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nlayout(set = 0, binding = 2) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\nhighp float unpackHighpData (float mainPart, float modPart) {\n  highp float data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out float mainPart, out float modPart, highp float data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp float unpackHighpData (float mainPart, float modPart, const float modValue) {\n  highp float data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out float mainPart, out float modPart, highp float data, const float modValue) {\n  highp float divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec2 unpackHighpData (vec2 mainPart, vec2 modPart) {\n  highp vec2 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec2 unpackHighpData (vec2 mainPart, vec2 modPart, const float modValue) {\n  highp vec2 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data, const float modValue) {\n  highp vec2 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec3 unpackHighpData (vec3 mainPart, vec3 modPart) {\n  highp vec3 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec3 unpackHighpData (vec3 mainPart, vec3 modPart, const float modValue) {\n  highp vec3 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data, const float modValue) {\n  highp vec3 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec4 unpackHighpData (vec4 mainPart, vec4 modPart) {\n  highp vec4 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec4 unpackHighpData (vec4 mainPart, vec4 modPart, const float modValue) {\n  highp vec4 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data, const float modValue) {\n  highp vec4 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nfloat CCGetLinearDepthFromViewSpace(vec3 viewPos) {\n  float dist = length(viewPos);\n  return (dist - cc_shadowNFLSInfo.x) / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n  vec4 viewStartPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  return CCGetLinearDepthFromViewSpace(viewStartPos.xyz);\n}\n#if CC_RECEIVE_SHADOW\n  layout(set = 0, binding = 3) uniform highp sampler2D cc_shadowMap;\n  layout(set = 0, binding = 5) uniform highp sampler2D cc_spotLightingMap;\n  vec4 ApplyShadowDepthBias_FaceNormal(vec4 shadowPos, vec3 worldNormal)\n  {\n    vec4 newShadowPos = shadowPos;\n    if(cc_shadowLPNNInfo.z > 0.0001)\n    {\n      vec4 viewNormal = cc_matLightView * vec4(worldNormal, 0.0);\n      if(viewNormal.z < 0.1)\n        newShadowPos.xy += viewNormal.xy * cc_shadowProjInfo.xy * cc_shadowLPNNInfo.z * clamp(viewNormal.z, 0.001, 0.1);\n    }\n    return newShadowPos;\n  }\n  vec4 ApplyShadowDepthBias_Perspective(vec4 shadowPos, float viewspaceDepthBias)\n  {\n    vec3 viewSpacePos;\n    viewSpacePos.xy = shadowPos.xy * cc_shadowProjInfo.zw;\n    viewSpacePos.z = shadowPos.z * cc_shadowInvProjDepthInfo.x + shadowPos.w * cc_shadowInvProjDepthInfo.y;\n    viewSpacePos.xyz += cc_shadowProjDepthInfo.z * normalize(viewSpacePos.xyz) * viewspaceDepthBias;\n    vec4 clipSpacePos;\n    clipSpacePos.xy = viewSpacePos.xy * cc_shadowProjInfo.xy;\n    clipSpacePos.zw = viewSpacePos.z * cc_shadowProjDepthInfo.xz + vec2(cc_shadowProjDepthInfo.y, 0.0);\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      clipSpacePos.z = CCGetLinearDepthFromViewSpace(viewSpacePos.xyz);\n      clipSpacePos.z = (clipSpacePos.z * 2.0 - 1.0) * clipSpacePos.w;\n    }\n    return clipSpacePos;\n  }\n  vec4 ApplyShadowDepthBias_Orthographic(vec4 shadowPos, float viewspaceDepthBias)\n  {\n    float coeffA = cc_shadowProjDepthInfo.x;\n    float coeffB = cc_shadowProjDepthInfo.y;\n    float viewSpacePos_z = (shadowPos.z - coeffB) / coeffA;\n    viewSpacePos_z += viewspaceDepthBias;\n    vec4 result = shadowPos;\n    result.z = viewSpacePos_z * coeffA + coeffB;\n    return result;\n  }\n  float CCGetShadowFactorHard (vec4 shadowPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float shadow = 0.0;\n    float closestDepth = 0.0;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      closestDepth = dot(texture(cc_shadowMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0));\n    } else {\n      closestDepth = texture(cc_shadowMap, clipPos.xy).x;\n    }\n    shadow = step(clipPos.z, closestDepth);\n    return shadow;\n  }\n  float CCGetShadowFactorSoft (vec4 shadowPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float offsetDepth = clipPos.z;\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    vec2 clipPos_offset = clipPos.xy + oneTap;\n    float block0, block1, block2, block3;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      block0 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n      block1 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)).x);\n      block2 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)).x);\n      block3 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)).x);\n    }\n    float coefX   = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block2, block3, coefX);\n    float coefY   = mod(clipPos.y, oneTap.y) * mapSize.y;\n    return mix(resultX, resultY, coefY);\n  }\n  float CCGetShadowFactorSoft2X (vec4 shadowPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float offsetDepth = clipPos.z;\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    float clipPos_offset_L = clipPos.x - oneTap.x;\n    float clipPos_offset_R = clipPos.x + oneTap.x;\n    float clipPos_offset_U = clipPos.y - oneTap.y;\n    float clipPos_offset_D = clipPos.y + oneTap.y;\n    float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      block0 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)).x);\n      block1 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)).x);\n      block2 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)).x);\n      block3 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)).x);\n      block4 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n      block5 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)).x);\n      block6 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)).x);\n      block7 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)).x);\n      block8 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)).x);\n    }\n    float coefX = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float coefY = mod(clipPos.y, oneTap.y) * mapSize.y;\n    float shadow = 0.0;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block3, block4, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block1, block2, coefX);\n    resultY = mix(block4, block5, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block3, block4, coefX);\n    resultY = mix(block6, block7, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    resultX = mix(block4, block5, coefX);\n    resultY = mix(block7, block8, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    return shadow * 0.25;\n  }\n  float CCGetSpotLightShadowFactorHard (vec4 shadowPos, vec3 worldPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float shadow = 0.0;\n    float closestDepth = 0.0;\n    float depth = clipPos.z;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      closestDepth = dot(texture(cc_spotLightingMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0));\n    } else {\n      closestDepth = texture(cc_spotLightingMap, clipPos.xy).x;\n    }\n    shadow = step(depth, closestDepth);\n    return shadow;\n  }\n  float CCGetSpotLightShadowFactorSoft (vec4 shadowPos, vec3 worldPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float depth = 0.0;\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      depth = CCGetLinearDepth(worldPos);\n    } else {\n      depth = clipPos.z;\n    }\n    float bias = cc_shadowWHPBInfo.w;\n    vec2 oneTap = 1.0 / cc_shadowWHPBInfo.xy;\n    vec2 clipPos_offset = clipPos.xy + oneTap;\n    float block0, block1, block2, block3;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      block0 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)).x);\n      block1 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos.y)).x);\n      block2 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset.y)).x);\n      block3 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos_offset.y)).x);\n    }\n    float coefX   = mod(clipPos.x, oneTap.x) * cc_shadowWHPBInfo.x;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block2, block3, coefX);\n    float coefY   = mod(clipPos.y, oneTap.y) * cc_shadowWHPBInfo.y;\n    return mix(resultX, resultY, coefY);\n  }\n  float CCGetSpotLightShadowFactorSoft2X (vec4 shadowPos, vec3 worldPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float depth = 0.0;\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      depth = CCGetLinearDepth(worldPos);\n    } else {\n      depth = clipPos.z;\n    }\n    float bias = cc_shadowWHPBInfo.w;\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    float clipPos_offset_L = clipPos.x - oneTap.x;\n    float clipPos_offset_R = clipPos.x + oneTap.x;\n    float clipPos_offset_U = clipPos.y - oneTap.y;\n    float clipPos_offset_D = clipPos.y + oneTap.y;\n    float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      block0 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_U)).x);\n      block1 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_U)).x);\n      block2 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_U)).x);\n      block3 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos.y)).x);\n      block4 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)).x);\n      block5 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos.y)).x);\n      block6 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_D)).x);\n      block7 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_D)).x);\n      block8 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_D)).x);\n    }\n    float coefX = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float coefY = mod(clipPos.y, oneTap.y) * mapSize.y;\n    float shadow = 0.0;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block3, block4, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block1, block2, coefX);\n    resultY = mix(block4, block5, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block3, block4, coefX);\n    resultY = mix(block6, block7, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    resultX = mix(block4, block5, coefX);\n    resultY = mix(block7, block8, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    return shadow * 0.25;\n  }\n#endif\n#if CC_USE_IBL\n  layout(set = 0, binding = 4) uniform samplerCube cc_environment;\n  vec4 fragTextureLod (sampler2D tex, vec2 coord, float lod) {\n      return textureLod(tex, coord, lod);\n  }\n  vec4 fragTextureLod (samplerCube tex, vec3 coord, float lod) {\n      return textureLod(tex, coord, lod);\n  }\n  vec3 unpackRGBE (vec4 rgbe) {\n    return rgbe.rgb * pow(1.1, rgbe.a * 255.0 - 128.0);\n  }\n  #if CC_USE_DIFFUSEMAP\n    layout(set = 0, binding = 6) uniform samplerCube cc_diffuseMap;\n  #endif\n#endif\nfloat GGXMobile (float roughness, float NoH, vec3 H, vec3 N) {\n  vec3 NxH = cross(N, H);\n  float OneMinusNoHSqr = dot(NxH, NxH);\n  float a = roughness * roughness;\n  float n = NoH * a;\n  float p = a / (OneMinusNoHSqr + n * n);\n  return p * p;\n}\nfloat CalcSpecular (float roughness, float NoH, vec3 H, vec3 N) {\n  return (roughness * 0.25 + 0.25) * GGXMobile(roughness, NoH, H, N);\n}\nvec3 BRDFApprox (vec3 specular, float roughness, float NoV) {\n  const vec4 c0 = vec4(-1.0, -0.0275, -0.572, 0.022);\n  const vec4 c1 = vec4(1.0, 0.0425, 1.04, -0.04);\n  vec4 r = roughness * c0 + c1;\n  float a004 = min(r.x * r.x, exp2(-9.28 * NoV)) * r.x + r.y;\n  vec2 AB = vec2(-1.04, 1.04) * a004 + r.zw;\n  AB.y *= clamp(50.0 * specular.g, 0.0, 1.0);\n  return specular * AB.x + AB.y;\n}\n#if USE_REFLECTION_DENOISE\n  vec3 GetEnvReflectionWithMipFiltering(vec3 R, float roughness, float mipCount, float denoiseIntensity) {\n    #if CC_USE_IBL\n    \tfloat mip = roughness * mipCount;\n    \tfloat delta = (dot(dFdx(R), dFdy(R))) * 1000.0;\n    \tfloat mipBias = mix(0.0, 5.0, clamp(delta, 0.0, 1.0));\n    \tvec4 biased = fragTextureLod(cc_environment, R, mip + mipBias);\n     \tvec4 filtered = texture(cc_environment, R);\n      #if CC_USE_IBL == 2\n      \tbiased.rgb = unpackRGBE(biased);\n      \tfiltered.rgb = unpackRGBE(filtered);\n      #else\n      \tbiased.rgb = SRGBToLinear(biased.rgb);\n      \tfiltered.rgb = SRGBToLinear(filtered.rgb);\n      #endif\n      return mix(biased.rgb, filtered.rgb, denoiseIntensity);\n    #else\n      return vec3(0.0, 0.0, 0.0);\n    #endif\n  }\n#endif\nstruct StandardSurface {\n  vec4 albedo;\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  vec3 position, position_fract_part;\n  #else\n  vec3 position;\n  #endif\n  vec3 normal;\n  vec3 emissive;\n  vec3 lightmap;\n  float lightmap_test;\n  float roughness;\n  float metallic;\n  float occlusion;\n};\nvec4 CCStandardShadingBase (StandardSurface s, vec4 shadowPos) {\n  vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n  vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n  vec3 position;\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  position = unpackHighpData(s.position, s.position_fract_part);\n  #else\n  position = s.position;\n  #endif\n  vec3 N = normalize(s.normal);\n  vec3 V = normalize(cc_cameraPos.xyz - position);\n  float NV = max(abs(dot(N, V)), 0.0);\n  specular = BRDFApprox(specular, s.roughness, NV);\n  vec3 L = normalize(-cc_mainLitDir.xyz);\n  vec3 H = normalize(L + V);\n  float NH = max(dot(N, H), 0.0);\n  float NL = max(dot(N, L), 0.0);\n  vec3 finalColor = NL * cc_mainLitColor.rgb * cc_mainLitColor.w;\n  vec3 diffuseContrib = diffuse;\n  #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    if (s.lightmap_test > 0.0001) {\n      finalColor = s.lightmap.rgb;\n    }\n  #else\n    diffuseContrib /= 3.14159265359;\n  #endif\n  vec3 specularContrib = specular * CalcSpecular(s.roughness, NH, H, N);\n  vec3 dirlightContrib = (diffuseContrib + specularContrib);\n  float shadow = 1.0;\n  #if CC_RECEIVE_SHADOW\n    if (NL > 0.0 && cc_mainLitDir.w > 0.0) {\n      {\n        vec4 pos = ApplyShadowDepthBias_FaceNormal(shadowPos, N);\n        float pcf = cc_shadowWHPBInfo.z;\n        if (pcf > 1.9) shadow = CCGetShadowFactorSoft2X(pos);\n        else if (pcf > 0.9) shadow = CCGetShadowFactorSoft(pos);\n        else shadow = CCGetShadowFactorHard(pos);\n        shadow = mix(shadow, 1.0, cc_shadowNFLSInfo.w);\n      }\n    }\n  #endif\n  dirlightContrib *= shadow;\n  finalColor *= dirlightContrib;\n  float fAmb = 0.5 - N.y * 0.5;\n  vec3 ambDiff = mix(cc_ambientSky.rgb, cc_ambientGround.rgb, fAmb);\n  #if CC_USE_IBL\n    #if CC_USE_DIFFUSEMAP\n      vec4 diffuseMap = texture(cc_diffuseMap, N);\n      #if CC_USE_DIFFUSEMAP == 2\n        ambDiff = unpackRGBE(diffuseMap);\n      #else\n        ambDiff = SRGBToLinear(diffuseMap.rgb);\n      #endif\n    #endif\n    vec3 R = normalize(reflect(-V, N));\n    #if USE_REFLECTION_DENOISE\n      vec3 env = GetEnvReflectionWithMipFiltering(R, s.roughness, cc_ambientGround.w, 0.6);\n    #else\n      vec4 envmap = fragTextureLod(cc_environment, R, s.roughness * cc_ambientGround.w);\n      #if CC_USE_IBL == 2\n        vec3 env = unpackRGBE(envmap);\n      #else\n        vec3 env = SRGBToLinear(envmap.rgb);\n      #endif\n    #endif\n    finalColor += env * cc_ambientSky.w * specular * s.occlusion;\n  #endif\n  finalColor += ambDiff.rgb * cc_ambientSky.w * diffuse * s.occlusion;\n  finalColor += s.emissive;\n  return vec4(finalColor, s.albedo.a);\n}\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = ACESToneMap(color.rgb);\n  #endif\n  color.rgb = sqrt(color.rgb);\n  return color;\n}\nlayout(location = 1) in highp vec4 v_shadowPos;\n#if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n  layout(location = 9) in vec3 v_luv;\n  layout(set = 2, binding = 10) uniform sampler2D cc_lightingMap;\n  vec3 UnpackLightingmap(vec4 color) {\n    vec3 c;\n    float e = 1.0 + color.a * (8.0 - 1.0);\n    c.r = color.r * e;\n    c.g = color.g * e;\n    c.b = color.b * e;\n    return c;\n  }\n#endif\nlayout(location = 3) in vec3 v_position;\nlayout(location = 5) in vec2 v_uv;\nlayout(location = 6) in vec2 v_uv1;\nlayout(location = 4) in vec3 v_normal;\n#if USE_VERTEX_COLOR\n  layout(location = 2) in vec4 v_color;\n#endif\n#if USE_ALBEDO_MAP\n  layout(set = 1, binding = 1) uniform sampler2D albedoMap;\n#endif\n#if USE_NORMAL_MAP\n  layout(location = 7) in vec3 v_tangent;\n  layout(location = 8) in vec3 v_bitangent;\n  layout(set = 1, binding = 2) uniform sampler2D normalMap;\n#endif\n#if USE_PBR_MAP\n  layout(set = 1, binding = 3) uniform sampler2D pbrMap;\n#endif\n#if USE_METALLIC_ROUGHNESS_MAP\n  layout(set = 1, binding = 4) uniform sampler2D metallicRoughnessMap;\n#endif\n#if USE_OCCLUSION_MAP\n  layout(set = 1, binding = 5) uniform sampler2D occlusionMap;\n#endif\n#if USE_EMISSIVE_MAP\n  layout(set = 1, binding = 6) uniform sampler2D emissiveMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvoid surf (out StandardSurface s) {\n  vec4 baseColor = albedo;\n  #if USE_VERTEX_COLOR\n    baseColor.rgb *= SRGBToLinear(v_color.rgb);\n    baseColor.a *= v_color.a;\n  #endif\n  #if USE_ALBEDO_MAP\n    vec4 texColor = texture(albedoMap, ALBEDO_UV);\n    texColor.rgb = SRGBToLinear(texColor.rgb);\n    baseColor *= texColor;\n  #endif\n  s.albedo = baseColor;\n  s.albedo.rgb *= albedoScaleAndCutoff.xyz;\n  #if USE_ALPHA_TEST\n    if (s.albedo.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n  #endif\n  #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    vec4 lightColor = texture(cc_lightingMap, v_luv.xy);\n    s.lightmap = UnpackLightingmap(lightColor);\n    s.lightmap_test = v_luv.z;\n  #endif\n  s.normal = v_normal;\n  #if USE_NORMAL_MAP\n    vec3 nmmp = texture(normalMap, NORMAL_UV).xyz - vec3(0.5);\n    s.normal =\n      (nmmp.x * emissiveScaleParam.w) * normalize(v_tangent) +\n      (nmmp.y * emissiveScaleParam.w) * normalize(v_bitangent) +\n      nmmp.z * normalize(s.normal);\n  #endif\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  packHighpData(s.position, s.position_fract_part, v_position);\n  #else\n  s.position = v_position;\n  #endif\n  vec4 pbr = pbrParams;\n  #if USE_PBR_MAP\n    vec4 res = texture(pbrMap, PBR_UV);\n    pbr.x *= res.r;\n    pbr.y *= res.g;\n    pbr.z *= res.b;\n    pbr.w *= res.a;\n  #endif\n  #if USE_METALLIC_ROUGHNESS_MAP\n    vec4 metallicRoughness = texture(metallicRoughnessMap, PBR_UV);\n    pbr.z *= metallicRoughness.b;\n    pbr.y *= metallicRoughness.g;\n  #endif\n  #if USE_OCCLUSION_MAP\n    pbr.x *= texture(occlusionMap, PBR_UV).r;\n  #endif\n  s.occlusion = pbr.x;\n  s.roughness = pbr.y;\n  s.metallic = pbr.z;\n  s.emissive = emissive.rgb * emissiveScaleParam.xyz;\n  #if USE_EMISSIVE_MAP\n    s.emissive *= SRGBToLinear(texture(emissiveMap, EMISSIVE_UV).rgb);\n  #endif\n}\n#if CC_FORWARD_ADD\n  #if CC_PIPELINE_TYPE == 0\n  # define LIGHTS_PER_PASS 1\n  #else\n  # define LIGHTS_PER_PASS 10\n  #endif\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n  layout(set = 2, binding = 1) uniform CCForwardLight {\n    highp vec4 cc_lightPos[LIGHTS_PER_PASS];\n    vec4 cc_lightColor[LIGHTS_PER_PASS];\n    vec4 cc_lightSizeRangeAngle[LIGHTS_PER_PASS];\n    vec4 cc_lightDir[LIGHTS_PER_PASS];\n  };\n  #endif\n  float SmoothDistAtt (float distSqr, float invSqrAttRadius) {\n    float factor = distSqr * invSqrAttRadius;\n    float smoothFactor = clamp(1.0 - factor * factor, 0.0, 1.0);\n    return smoothFactor * smoothFactor;\n  }\n  float GetDistAtt (float distSqr, float invSqrAttRadius) {\n    float attenuation = 1.0 / max(distSqr, 0.01*0.01);\n    attenuation *= SmoothDistAtt(distSqr , invSqrAttRadius);\n    return attenuation;\n  }\n  float GetAngleAtt (vec3 L, vec3 litDir, float litAngleScale, float litAngleOffset) {\n    float cd = dot(litDir, L);\n    float attenuation = clamp(cd * litAngleScale + litAngleOffset, 0.0, 1.0);\n    return (attenuation * attenuation);\n  }\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n  vec4 CCStandardShadingAdditive (StandardSurface s, vec4 shadowPos) {\n    vec3 position;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    position = unpackHighpData(s.position, s.position_fract_part);\n    #else\n    position = s.position;\n    #endif\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n    vec3 diffuseContrib = diffuse / 3.14159265359;\n    vec3 N = normalize(s.normal);\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    float NV = max(abs(dot(N, V)), 0.0);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 finalColor = vec3(0.0);\n    int numLights = CC_PIPELINE_TYPE == 0 ? LIGHTS_PER_PASS : int(cc_lightDir[0].w);\n    for (int i = 0; i < LIGHTS_PER_PASS; i++) {\n      if (i >= numLights) break;\n      vec3 SLU = cc_lightPos[i].xyz - position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = max(dot(N, SL), 0.0);\n      float SNH = max(dot(N, SH), 0.0);\n      float distSqr = dot(SLU, SLU);\n      float litRadius = cc_lightSizeRangeAngle[i].x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = 3.14159265359 * (litRadiusSqr / max(litRadiusSqr , distSqr));\n      float attRadiusSqrInv = 1.0 / max(cc_lightSizeRangeAngle[i].y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\n      if (cc_lightPos[i].w > 0.0) {\n        float cosInner = max(dot(-cc_lightDir[i].xyz, SL), 0.01);\n        float cosOuter = cc_lightSizeRangeAngle[i].z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -cc_lightDir[i].xyz, litAngleScale, litAngleOffset);\n      }\n      vec3 lightColor = cc_lightColor[i].rgb;\n      float shadow = 1.0;\n      #if CC_RECEIVE_SHADOW\n        if (cc_lightPos[i].w > 0.0 && cc_lightSizeRangeAngle[i].w > 0.0) {\n          {\n            float pcf = cc_shadowWHPBInfo.z;\n            if (pcf > 1.9) shadow = CCGetSpotLightShadowFactorSoft2X(shadowPos, position);\n            else if (pcf > 0.9) shadow = CCGetSpotLightShadowFactorSoft(shadowPos, position);\n            else shadow = CCGetSpotLightShadowFactorHard(shadowPos, position);\n          }\n        }\n      #endif\n      lightColor *= shadow;\n      finalColor += SNL * lightColor * cc_lightColor[i].w * illum * att * (diffuseContrib + lspec);\n    }\n    return vec4(finalColor, 0.0);\n  }\n  #endif\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 1\n  layout(set = 1, binding = 7) readonly buffer b_ccLightsBuffer { vec4 b_ccLights[]; };\n  layout(set = 1, binding = 8) readonly buffer b_clusterLightIndicesBuffer { uint b_clusterLightIndices[]; };\n  layout(set = 1, binding = 9) readonly buffer b_clusterLightGridBuffer { uvec4 b_clusterLightGrid[]; };\n  struct CCLight\n  {\n    vec4 cc_lightPos;\n    vec4 cc_lightColor;\n    vec4 cc_lightSizeRangeAngle;\n    vec4 cc_lightDir;\n  };\n  struct Cluster\n  {\n    vec3 minBounds;\n    vec3 maxBounds;\n  };\n  struct LightGrid\n  {\n    uint offset;\n    uint ccLights;\n  };\n  CCLight getCCLight(uint i)\n  {\n    CCLight light;\n    light.cc_lightPos = b_ccLights[4u * i + 0u];\n    light.cc_lightColor = b_ccLights[4u * i + 1u];\n    light.cc_lightSizeRangeAngle = b_ccLights[4u * i + 2u];\n    light.cc_lightDir = b_ccLights[4u * i + 3u];\n    return light;\n  }\n  LightGrid getLightGrid(uint cluster)\n  {\n    uvec4 gridvec = b_clusterLightGrid[cluster];\n    LightGrid grid;\n    grid.offset = gridvec.x;\n    grid.ccLights = gridvec.y;\n    return grid;\n  }\n  uint getGridLightIndex(uint start, uint offset)\n  {\n    return b_clusterLightIndices[start + offset];\n  }\n  uint getClusterZIndex(vec4 worldPos)\n  {\n    float scale = float(24) / log(cc_nearFar.y / cc_nearFar.x);\n    float bias = -(float(24) * log(cc_nearFar.x) / log(cc_nearFar.y / cc_nearFar.x));\n    float eyeDepth = -(cc_matView * worldPos).z;\n    uint zIndex = uint(max(log(eyeDepth) * scale + bias, 0.0));\n    return zIndex;\n  }\n  uint getClusterIndex(vec4 fragCoord, vec4 worldPos)\n  {\n    uint zIndex = getClusterZIndex(worldPos);\n    float clusterSizeX = ceil(cc_viewPort.z / float(16));\n    float clusterSizeY = ceil(cc_viewPort.w / float(8));\n    uvec3 indices = uvec3(uvec2(fragCoord.xy / vec2(clusterSizeX, clusterSizeY)), zIndex);\n    uint cluster = (16u * 8u) * indices.z + 16u * indices.y + indices.x;\n    return cluster;\n  }\n  vec4 CCClusterShadingAdditive (StandardSurface s, vec4 shadowPos) {\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n    vec3 diffuseContrib = diffuse / 3.14159265359;\n    vec3 position;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    position = unpackHighpData(s.position, s.position_fract_part);\n    #else\n    position = s.position;\n    #endif\n    vec3 N = normalize(s.normal);\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    float NV = max(abs(dot(N, V)), 0.001);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 finalColor = vec3(0.0);\n    uint cluster = getClusterIndex(gl_FragCoord, vec4(position, 1.0));\n    LightGrid grid = getLightGrid(cluster);\n    uint numLights = grid.ccLights;\n    for (uint i = 0u; i < 100u; i++) {\n      if (i >= numLights) break;\n      uint lightIndex = getGridLightIndex(grid.offset, i);\n      CCLight light = getCCLight(lightIndex);\n      vec3 SLU = light.cc_lightPos.xyz - position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = max(dot(N, SL), 0.001);\n      float SNH = max(dot(N, SH), 0.0);\n      float distSqr = dot(SLU, SLU);\n      float litRadius = light.cc_lightSizeRangeAngle.x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = 3.14159265359 * (litRadiusSqr / max(litRadiusSqr , distSqr));\n      float attRadiusSqrInv = 1.0 / max(light.cc_lightSizeRangeAngle.y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\n      if (light.cc_lightPos.w > 0.0) {\n        float cosInner = max(dot(-light.cc_lightDir.xyz, SL), 0.01);\n        float cosOuter = light.cc_lightSizeRangeAngle.z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -light.cc_lightDir.xyz, litAngleScale, litAngleOffset);\n      }\n      vec3 lightColor = light.cc_lightColor.rgb;\n      float shadow = 1.0;\n      #if CC_RECEIVE_SHADOW\n        if (light.cc_lightPos.w > 0.0) {\n          {\n            float pcf = cc_shadowWHPBInfo.z;\n            if (pcf > 1.9) shadow = CCGetSpotLightShadowFactorSoft2X(shadowPos, position);\n            else if (pcf > 0.9) shadow = CCGetSpotLightShadowFactorSoft(shadowPos, position);\n            else shadow = CCGetSpotLightShadowFactorHard(shadowPos, position);\n          }\n        }\n      #endif\n      lightColor *= shadow;\n      finalColor += SNL * lightColor * light.cc_lightColor.w * illum * att * (diffuseContrib + lspec);\n    }\n    return vec4(finalColor, 0.0);\n  }\n  #endif\n  layout(location = 0) out vec4 fragColorX;\n  void main () {\n    StandardSurface s; surf(s);\n    #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 1\n    vec4 color = CCClusterShadingAdditive(s, v_shadowPos);\n    #else\n    vec4 color = CCStandardShadingAdditive(s, v_shadowPos);\n    #endif\n    CC_APPLY_FOG(color, s.position.xyz);\n    fragColorX = CCFragOutput(color);\n  }\n#elif (CC_PIPELINE_TYPE == 0 || CC_FORCE_FORWARD_SHADING)\n  layout(location = 0) out vec4 fragColorX;\n  void main () {\n    StandardSurface s; surf(s);\n    vec4 color = CCStandardShadingBase(s, v_shadowPos);\n    CC_APPLY_FOG(color, s.position.xyz);\n    fragColorX = CCFragOutput(color);\n  }\n#elif CC_PIPELINE_TYPE == 1\n  vec2 signNotZero(vec2 v) {\n    return vec2((v.x >= 0.0) ? +1.0 : -1.0, (v.y >= 0.0) ? +1.0 : -1.0);\n  }\n  vec2 float32x3_to_oct(in vec3 v) {\n    vec2 p = v.xy * (1.0 / (abs(v.x) + abs(v.y) + abs(v.z)));\n    return (v.z <= 0.0) ? ((1.0 - abs(p.yx)) * signNotZero(p)) : p;\n  }\n  layout(location = 0) out vec4 fragColor0;\n  layout(location = 1) out vec4 fragColor1;\n  layout(location = 2) out vec4 fragColor2;\n  void main () {\n    StandardSurface s; surf(s);\n    fragColor0 = s.albedo;\n    fragColor1 = vec4(float32x3_to_oct(s.normal), s.roughness, s.metallic);\n    fragColor2 = vec4(s.emissive, s.occlusion);\n  }\n#endif"},"glsl3":{"vert":"\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nin vec3 a_position;\nin vec3 a_normal;\nin vec2 a_texCoord;\nin vec4 a_tangent;\n#if CC_USE_MORPH\n    in float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n  layout(std140) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n    in vec4 a_joints;\n  in vec4 a_weights;\n  #if CC_USE_BAKED_ANIMATION\n    #if USE_INSTANCING\n      in highp vec4 a_jointAnimInfo;\n    #endif\n    layout(std140) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(std140) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    uniform highp sampler2D cc_jointTexture;\n      #else\n    layout(std140) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout StandardVertInput attr) {\n    mat4 m = skinMatrix();\n    attr.position = m * attr.position;\n    attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n    attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n  }\n#endif\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if USE_INSTANCING\n  in vec4 a_matWorld0;\n  in vec4 a_matWorld1;\n  in vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    in vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  in float a_dyn_batch_id;\n  layout(std140) uniform CCLocalBatched {\n    highp mat4 cc_matWorlds[10];\n  };\n#else\n  layout(std140) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n  };\n#endif\nlayout(std140) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n  #if CC_USE_FOG == 0\n\tfactor = LinearFog(pos);\n  #elif CC_USE_FOG == 1\n    factor = ExpFog(pos);\n  #elif CC_USE_FOG == 2\n    factor = ExpSquaredFog(pos);\n  #elif CC_USE_FOG == 3\n    factor = LayeredFog(pos);\n  #else\n    factor = 1.0;\n  #endif\n}\n#if !CC_USE_ACCURATE_FOG\nout float v_fog_factor;\n#endif\nvoid CC_TRANSFER_FOG(vec4 pos) {\n#if !CC_USE_ACCURATE_FOG\n    CC_TRANSFER_FOG_BASE(pos, v_fog_factor);\n#endif\n}\nout highp vec4 v_shadowPos;\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotLightingMap;\n#endif\n#if USE_VERTEX_COLOR\n  in vec4 a_color;\n  out vec4 v_color;\n#endif\nout vec3 v_position;\nout vec3 v_normal;\nout vec2 v_uv;\nout vec2 v_uv1;\n#if USE_NORMAL_MAP\n  out vec3 v_tangent;\n  out vec3 v_bitangent;\n#endif\n#if HAS_SECOND_UV || USE_LIGHTMAP\n  in vec2 a_texCoord1;\n#endif\n#if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n  out vec3 v_luv;\n  void CCLightingMapCaclUV()\n  {\n  #if !USE_INSTANCING\n    v_luv.xy = cc_lightingMapUVParam.xy + a_texCoord1 * cc_lightingMapUVParam.zw;\n    v_luv.z = cc_lightingMapUVParam.z;\n  #else\n    v_luv.xy = a_lightingMapUVParam.xy + a_texCoord1 * a_lightingMapUVParam.zw;\n    v_luv.z = a_lightingMapUVParam.z;\n  #endif\n  }\n#endif\nvoid main () {\n  StandardVertInput In;\n      In.position = vec4(a_position, 1.0);\n      In.normal = a_normal;\n      In.tangent = a_tangent;\n    #if CC_USE_MORPH\n      applyMorph(In);\n    #endif\n    #if CC_USE_SKINNING\n      CCSkin(In);\n    #endif\n  mat4 matWorld, matWorldIT;\n    #if USE_INSTANCING\n      matWorld = mat4(\n        vec4(a_matWorld0.xyz, 0.0),\n        vec4(a_matWorld1.xyz, 0.0),\n        vec4(a_matWorld2.xyz, 0.0),\n        vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n      );\n      matWorldIT = matWorld;\n    #elif USE_BATCHING\n      matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n      matWorldIT = matWorld;\n    #else\n      matWorld = cc_matWorld;\n      matWorldIT = cc_matWorldIT;\n    #endif\n  vec4 pos = matWorld * In.position;\n  v_position = pos.xyz;\n  v_normal = normalize((matWorldIT * vec4(In.normal, 0.0)).xyz);\n  #if USE_TWOSIDE\n    vec3 viewDirect = normalize(cc_cameraPos.xyz - v_position);\n    v_normal *= dot(v_normal, viewDirect) < 0.0 ? -1.0 : 1.0;\n  #endif\n  #if USE_NORMAL_MAP\n    v_tangent = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n    v_bitangent = cross(v_normal, v_tangent) * In.tangent.w;\n  #endif\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if SAMPLE_FROM_RT\n    v_uv = cc_cameraPos.w > 1.0 ? vec2(v_uv.x, 1.0 - v_uv.y) : v_uv;\n  #endif\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n    #if SAMPLE_FROM_RT\n      v_uv1 = cc_cameraPos.w > 1.0 ? vec2(v_uv1.x, 1.0 - v_uv1.y) : v_uv1;\n    #endif\n  #endif\n  #if USE_VERTEX_COLOR\n    v_color = a_color;\n  #endif\n  CC_TRANSFER_FOG(pos);\n  v_shadowPos = cc_matLightViewProj * pos;\n  #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    CCLightingMapCaclUV();\n  #endif\n  gl_Position = cc_matProj * (cc_matView * matWorld) * In.position;\n}","frag":"\nprecision highp float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(std140) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n  #if CC_USE_FOG == 0\n\tfactor = LinearFog(pos);\n  #elif CC_USE_FOG == 1\n    factor = ExpFog(pos);\n  #elif CC_USE_FOG == 2\n    factor = ExpSquaredFog(pos);\n  #elif CC_USE_FOG == 3\n    factor = LayeredFog(pos);\n  #else\n    factor = 1.0;\n  #endif\n}\nvoid CC_APPLY_FOG_BASE(inout vec4 color, float factor) {\n  color = vec4(mix(cc_fogColor.rgb, color.rgb, factor), color.a);\n}\n#if !CC_USE_ACCURATE_FOG\nin float v_fog_factor;\n#endif\nvoid CC_APPLY_FOG(inout vec4 color) {\n#if !CC_USE_ACCURATE_FOG\n    CC_APPLY_FOG_BASE(color, v_fog_factor);\n#endif\n}\nvoid CC_APPLY_FOG(inout vec4 color, vec3 worldPos) {\n#if CC_USE_ACCURATE_FOG\n    float factor;\n    CC_TRANSFER_FOG_BASE(vec4(worldPos, 1.0), factor);\n#else\n    float factor = v_fog_factor;\n#endif\n    CC_APPLY_FOG_BASE(color, factor);\n}\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\nhighp float unpackHighpData (float mainPart, float modPart) {\n  highp float data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out float mainPart, out float modPart, highp float data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp float unpackHighpData (float mainPart, float modPart, const float modValue) {\n  highp float data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out float mainPart, out float modPart, highp float data, const float modValue) {\n  highp float divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec2 unpackHighpData (vec2 mainPart, vec2 modPart) {\n  highp vec2 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec2 unpackHighpData (vec2 mainPart, vec2 modPart, const float modValue) {\n  highp vec2 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data, const float modValue) {\n  highp vec2 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec3 unpackHighpData (vec3 mainPart, vec3 modPart) {\n  highp vec3 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec3 unpackHighpData (vec3 mainPart, vec3 modPart, const float modValue) {\n  highp vec3 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data, const float modValue) {\n  highp vec3 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec4 unpackHighpData (vec4 mainPart, vec4 modPart) {\n  highp vec4 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec4 unpackHighpData (vec4 mainPart, vec4 modPart, const float modValue) {\n  highp vec4 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data, const float modValue) {\n  highp vec4 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nfloat CCGetLinearDepthFromViewSpace(vec3 viewPos) {\n  float dist = length(viewPos);\n  return (dist - cc_shadowNFLSInfo.x) / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n  vec4 viewStartPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  return CCGetLinearDepthFromViewSpace(viewStartPos.xyz);\n}\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotLightingMap;\n  vec4 ApplyShadowDepthBias_FaceNormal(vec4 shadowPos, vec3 worldNormal)\n  {\n    vec4 newShadowPos = shadowPos;\n    if(cc_shadowLPNNInfo.z > 0.0001)\n    {\n      vec4 viewNormal = cc_matLightView * vec4(worldNormal, 0.0);\n      if(viewNormal.z < 0.1)\n        newShadowPos.xy += viewNormal.xy * cc_shadowProjInfo.xy * cc_shadowLPNNInfo.z * clamp(viewNormal.z, 0.001, 0.1);\n    }\n    return newShadowPos;\n  }\n  vec4 ApplyShadowDepthBias_Perspective(vec4 shadowPos, float viewspaceDepthBias)\n  {\n    vec3 viewSpacePos;\n    viewSpacePos.xy = shadowPos.xy * cc_shadowProjInfo.zw;\n    viewSpacePos.z = shadowPos.z * cc_shadowInvProjDepthInfo.x + shadowPos.w * cc_shadowInvProjDepthInfo.y;\n    viewSpacePos.xyz += cc_shadowProjDepthInfo.z * normalize(viewSpacePos.xyz) * viewspaceDepthBias;\n    vec4 clipSpacePos;\n    clipSpacePos.xy = viewSpacePos.xy * cc_shadowProjInfo.xy;\n    clipSpacePos.zw = viewSpacePos.z * cc_shadowProjDepthInfo.xz + vec2(cc_shadowProjDepthInfo.y, 0.0);\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      clipSpacePos.z = CCGetLinearDepthFromViewSpace(viewSpacePos.xyz);\n      clipSpacePos.z = (clipSpacePos.z * 2.0 - 1.0) * clipSpacePos.w;\n    }\n    return clipSpacePos;\n  }\n  vec4 ApplyShadowDepthBias_Orthographic(vec4 shadowPos, float viewspaceDepthBias)\n  {\n    float coeffA = cc_shadowProjDepthInfo.x;\n    float coeffB = cc_shadowProjDepthInfo.y;\n    float viewSpacePos_z = (shadowPos.z - coeffB) / coeffA;\n    viewSpacePos_z += viewspaceDepthBias;\n    vec4 result = shadowPos;\n    result.z = viewSpacePos_z * coeffA + coeffB;\n    return result;\n  }\n  float CCGetShadowFactorHard (vec4 shadowPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float shadow = 0.0;\n    float closestDepth = 0.0;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      closestDepth = dot(texture(cc_shadowMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0));\n    } else {\n      closestDepth = texture(cc_shadowMap, clipPos.xy).x;\n    }\n    shadow = step(clipPos.z, closestDepth);\n    return shadow;\n  }\n  float CCGetShadowFactorSoft (vec4 shadowPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float offsetDepth = clipPos.z;\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    vec2 clipPos_offset = clipPos.xy + oneTap;\n    float block0, block1, block2, block3;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      block0 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n      block1 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)).x);\n      block2 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)).x);\n      block3 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)).x);\n    }\n    float coefX   = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block2, block3, coefX);\n    float coefY   = mod(clipPos.y, oneTap.y) * mapSize.y;\n    return mix(resultX, resultY, coefY);\n  }\n  float CCGetShadowFactorSoft2X (vec4 shadowPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float offsetDepth = clipPos.z;\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    float clipPos_offset_L = clipPos.x - oneTap.x;\n    float clipPos_offset_R = clipPos.x + oneTap.x;\n    float clipPos_offset_U = clipPos.y - oneTap.y;\n    float clipPos_offset_D = clipPos.y + oneTap.y;\n    float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      block0 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)).x);\n      block1 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)).x);\n      block2 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)).x);\n      block3 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)).x);\n      block4 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n      block5 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)).x);\n      block6 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)).x);\n      block7 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)).x);\n      block8 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)).x);\n    }\n    float coefX = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float coefY = mod(clipPos.y, oneTap.y) * mapSize.y;\n    float shadow = 0.0;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block3, block4, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block1, block2, coefX);\n    resultY = mix(block4, block5, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block3, block4, coefX);\n    resultY = mix(block6, block7, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    resultX = mix(block4, block5, coefX);\n    resultY = mix(block7, block8, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    return shadow * 0.25;\n  }\n  float CCGetSpotLightShadowFactorHard (vec4 shadowPos, vec3 worldPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float shadow = 0.0;\n    float closestDepth = 0.0;\n    float depth = clipPos.z;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      closestDepth = dot(texture(cc_spotLightingMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0));\n    } else {\n      closestDepth = texture(cc_spotLightingMap, clipPos.xy).x;\n    }\n    shadow = step(depth, closestDepth);\n    return shadow;\n  }\n  float CCGetSpotLightShadowFactorSoft (vec4 shadowPos, vec3 worldPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float depth = 0.0;\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      depth = CCGetLinearDepth(worldPos);\n    } else {\n      depth = clipPos.z;\n    }\n    float bias = cc_shadowWHPBInfo.w;\n    vec2 oneTap = 1.0 / cc_shadowWHPBInfo.xy;\n    vec2 clipPos_offset = clipPos.xy + oneTap;\n    float block0, block1, block2, block3;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      block0 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)).x);\n      block1 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos.y)).x);\n      block2 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset.y)).x);\n      block3 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos_offset.y)).x);\n    }\n    float coefX   = mod(clipPos.x, oneTap.x) * cc_shadowWHPBInfo.x;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block2, block3, coefX);\n    float coefY   = mod(clipPos.y, oneTap.y) * cc_shadowWHPBInfo.y;\n    return mix(resultX, resultY, coefY);\n  }\n  float CCGetSpotLightShadowFactorSoft2X (vec4 shadowPos, vec3 worldPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float depth = 0.0;\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      depth = CCGetLinearDepth(worldPos);\n    } else {\n      depth = clipPos.z;\n    }\n    float bias = cc_shadowWHPBInfo.w;\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    float clipPos_offset_L = clipPos.x - oneTap.x;\n    float clipPos_offset_R = clipPos.x + oneTap.x;\n    float clipPos_offset_U = clipPos.y - oneTap.y;\n    float clipPos_offset_D = clipPos.y + oneTap.y;\n    float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      block0 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_U)).x);\n      block1 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_U)).x);\n      block2 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_U)).x);\n      block3 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos.y)).x);\n      block4 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)).x);\n      block5 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos.y)).x);\n      block6 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_D)).x);\n      block7 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_D)).x);\n      block8 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_D)).x);\n    }\n    float coefX = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float coefY = mod(clipPos.y, oneTap.y) * mapSize.y;\n    float shadow = 0.0;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block3, block4, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block1, block2, coefX);\n    resultY = mix(block4, block5, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block3, block4, coefX);\n    resultY = mix(block6, block7, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    resultX = mix(block4, block5, coefX);\n    resultY = mix(block7, block8, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    return shadow * 0.25;\n  }\n#endif\n#if CC_USE_IBL\n  uniform samplerCube cc_environment;\n  vec4 fragTextureLod (sampler2D tex, vec2 coord, float lod) {\n      return textureLod(tex, coord, lod);\n  }\n  vec4 fragTextureLod (samplerCube tex, vec3 coord, float lod) {\n      return textureLod(tex, coord, lod);\n  }\n  vec3 unpackRGBE (vec4 rgbe) {\n    return rgbe.rgb * pow(1.1, rgbe.a * 255.0 - 128.0);\n  }\n  #if CC_USE_DIFFUSEMAP\n    uniform samplerCube cc_diffuseMap;\n  #endif\n#endif\nfloat GGXMobile (float roughness, float NoH, vec3 H, vec3 N) {\n  vec3 NxH = cross(N, H);\n  float OneMinusNoHSqr = dot(NxH, NxH);\n  float a = roughness * roughness;\n  float n = NoH * a;\n  float p = a / (OneMinusNoHSqr + n * n);\n  return p * p;\n}\nfloat CalcSpecular (float roughness, float NoH, vec3 H, vec3 N) {\n  return (roughness * 0.25 + 0.25) * GGXMobile(roughness, NoH, H, N);\n}\nvec3 BRDFApprox (vec3 specular, float roughness, float NoV) {\n  const vec4 c0 = vec4(-1.0, -0.0275, -0.572, 0.022);\n  const vec4 c1 = vec4(1.0, 0.0425, 1.04, -0.04);\n  vec4 r = roughness * c0 + c1;\n  float a004 = min(r.x * r.x, exp2(-9.28 * NoV)) * r.x + r.y;\n  vec2 AB = vec2(-1.04, 1.04) * a004 + r.zw;\n  AB.y *= clamp(50.0 * specular.g, 0.0, 1.0);\n  return specular * AB.x + AB.y;\n}\n#if USE_REFLECTION_DENOISE\n  vec3 GetEnvReflectionWithMipFiltering(vec3 R, float roughness, float mipCount, float denoiseIntensity) {\n    #if CC_USE_IBL\n    \tfloat mip = roughness * mipCount;\n    \tfloat delta = (dot(dFdx(R), dFdy(R))) * 1000.0;\n    \tfloat mipBias = mix(0.0, 5.0, clamp(delta, 0.0, 1.0));\n    \tvec4 biased = fragTextureLod(cc_environment, R, mip + mipBias);\n     \tvec4 filtered = texture(cc_environment, R);\n      #if CC_USE_IBL == 2\n      \tbiased.rgb = unpackRGBE(biased);\n      \tfiltered.rgb = unpackRGBE(filtered);\n      #else\n      \tbiased.rgb = SRGBToLinear(biased.rgb);\n      \tfiltered.rgb = SRGBToLinear(filtered.rgb);\n      #endif\n      return mix(biased.rgb, filtered.rgb, denoiseIntensity);\n    #else\n      return vec3(0.0, 0.0, 0.0);\n    #endif\n  }\n#endif\nstruct StandardSurface {\n  vec4 albedo;\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  vec3 position, position_fract_part;\n  #else\n  vec3 position;\n  #endif\n  vec3 normal;\n  vec3 emissive;\n  vec3 lightmap;\n  float lightmap_test;\n  float roughness;\n  float metallic;\n  float occlusion;\n};\nvec4 CCStandardShadingBase (StandardSurface s, vec4 shadowPos) {\n  vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n  vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n  vec3 position;\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  position = unpackHighpData(s.position, s.position_fract_part);\n  #else\n  position = s.position;\n  #endif\n  vec3 N = normalize(s.normal);\n  vec3 V = normalize(cc_cameraPos.xyz - position);\n  float NV = max(abs(dot(N, V)), 0.0);\n  specular = BRDFApprox(specular, s.roughness, NV);\n  vec3 L = normalize(-cc_mainLitDir.xyz);\n  vec3 H = normalize(L + V);\n  float NH = max(dot(N, H), 0.0);\n  float NL = max(dot(N, L), 0.0);\n  vec3 finalColor = NL * cc_mainLitColor.rgb * cc_mainLitColor.w;\n  vec3 diffuseContrib = diffuse;\n  #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    if (s.lightmap_test > 0.0001) {\n      finalColor = s.lightmap.rgb;\n    }\n  #else\n    diffuseContrib /= 3.14159265359;\n  #endif\n  vec3 specularContrib = specular * CalcSpecular(s.roughness, NH, H, N);\n  vec3 dirlightContrib = (diffuseContrib + specularContrib);\n  float shadow = 1.0;\n  #if CC_RECEIVE_SHADOW\n    if (NL > 0.0 && cc_mainLitDir.w > 0.0) {\n      {\n        vec4 pos = ApplyShadowDepthBias_FaceNormal(shadowPos, N);\n        float pcf = cc_shadowWHPBInfo.z;\n        if (pcf > 1.9) shadow = CCGetShadowFactorSoft2X(pos);\n        else if (pcf > 0.9) shadow = CCGetShadowFactorSoft(pos);\n        else shadow = CCGetShadowFactorHard(pos);\n        shadow = mix(shadow, 1.0, cc_shadowNFLSInfo.w);\n      }\n    }\n  #endif\n  dirlightContrib *= shadow;\n  finalColor *= dirlightContrib;\n  float fAmb = 0.5 - N.y * 0.5;\n  vec3 ambDiff = mix(cc_ambientSky.rgb, cc_ambientGround.rgb, fAmb);\n  #if CC_USE_IBL\n    #if CC_USE_DIFFUSEMAP\n      vec4 diffuseMap = texture(cc_diffuseMap, N);\n      #if CC_USE_DIFFUSEMAP == 2\n        ambDiff = unpackRGBE(diffuseMap);\n      #else\n        ambDiff = SRGBToLinear(diffuseMap.rgb);\n      #endif\n    #endif\n    vec3 R = normalize(reflect(-V, N));\n    #if USE_REFLECTION_DENOISE\n      vec3 env = GetEnvReflectionWithMipFiltering(R, s.roughness, cc_ambientGround.w, 0.6);\n    #else\n      vec4 envmap = fragTextureLod(cc_environment, R, s.roughness * cc_ambientGround.w);\n      #if CC_USE_IBL == 2\n        vec3 env = unpackRGBE(envmap);\n      #else\n        vec3 env = SRGBToLinear(envmap.rgb);\n      #endif\n    #endif\n    finalColor += env * cc_ambientSky.w * specular * s.occlusion;\n  #endif\n  finalColor += ambDiff.rgb * cc_ambientSky.w * diffuse * s.occlusion;\n  finalColor += s.emissive;\n  return vec4(finalColor, s.albedo.a);\n}\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = ACESToneMap(color.rgb);\n  #endif\n  color.rgb = sqrt(color.rgb);\n  return color;\n}\nin highp vec4 v_shadowPos;\n#if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n  in vec3 v_luv;\n  uniform sampler2D cc_lightingMap;\n  vec3 UnpackLightingmap(vec4 color) {\n    vec3 c;\n    float e = 1.0 + color.a * (8.0 - 1.0);\n    c.r = color.r * e;\n    c.g = color.g * e;\n    c.b = color.b * e;\n    return c;\n  }\n#endif\nin vec3 v_position;\nin vec2 v_uv;\nin vec2 v_uv1;\nin vec3 v_normal;\n#if USE_VERTEX_COLOR\n  in vec4 v_color;\n#endif\n#if USE_ALBEDO_MAP\n  uniform sampler2D albedoMap;\n#endif\n#if USE_NORMAL_MAP\n  in vec3 v_tangent;\n  in vec3 v_bitangent;\n  uniform sampler2D normalMap;\n#endif\n#if USE_PBR_MAP\n  uniform sampler2D pbrMap;\n#endif\n#if USE_METALLIC_ROUGHNESS_MAP\n  uniform sampler2D metallicRoughnessMap;\n#endif\n#if USE_OCCLUSION_MAP\n  uniform sampler2D occlusionMap;\n#endif\n#if USE_EMISSIVE_MAP\n  uniform sampler2D emissiveMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvoid surf (out StandardSurface s) {\n  vec4 baseColor = albedo;\n  #if USE_VERTEX_COLOR\n    baseColor.rgb *= SRGBToLinear(v_color.rgb);\n    baseColor.a *= v_color.a;\n  #endif\n  #if USE_ALBEDO_MAP\n    vec4 texColor = texture(albedoMap, ALBEDO_UV);\n    texColor.rgb = SRGBToLinear(texColor.rgb);\n    baseColor *= texColor;\n  #endif\n  s.albedo = baseColor;\n  s.albedo.rgb *= albedoScaleAndCutoff.xyz;\n  #if USE_ALPHA_TEST\n    if (s.albedo.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n  #endif\n  #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    vec4 lightColor = texture(cc_lightingMap, v_luv.xy);\n    s.lightmap = UnpackLightingmap(lightColor);\n    s.lightmap_test = v_luv.z;\n  #endif\n  s.normal = v_normal;\n  #if USE_NORMAL_MAP\n    vec3 nmmp = texture(normalMap, NORMAL_UV).xyz - vec3(0.5);\n    s.normal =\n      (nmmp.x * emissiveScaleParam.w) * normalize(v_tangent) +\n      (nmmp.y * emissiveScaleParam.w) * normalize(v_bitangent) +\n      nmmp.z * normalize(s.normal);\n  #endif\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  packHighpData(s.position, s.position_fract_part, v_position);\n  #else\n  s.position = v_position;\n  #endif\n  vec4 pbr = pbrParams;\n  #if USE_PBR_MAP\n    vec4 res = texture(pbrMap, PBR_UV);\n    pbr.x *= res.r;\n    pbr.y *= res.g;\n    pbr.z *= res.b;\n    pbr.w *= res.a;\n  #endif\n  #if USE_METALLIC_ROUGHNESS_MAP\n    vec4 metallicRoughness = texture(metallicRoughnessMap, PBR_UV);\n    pbr.z *= metallicRoughness.b;\n    pbr.y *= metallicRoughness.g;\n  #endif\n  #if USE_OCCLUSION_MAP\n    pbr.x *= texture(occlusionMap, PBR_UV).r;\n  #endif\n  s.occlusion = pbr.x;\n  s.roughness = pbr.y;\n  s.metallic = pbr.z;\n  s.emissive = emissive.rgb * emissiveScaleParam.xyz;\n  #if USE_EMISSIVE_MAP\n    s.emissive *= SRGBToLinear(texture(emissiveMap, EMISSIVE_UV).rgb);\n  #endif\n}\n#if CC_FORWARD_ADD\n  #if CC_PIPELINE_TYPE == 0\n  # define LIGHTS_PER_PASS 1\n  #else\n  # define LIGHTS_PER_PASS 10\n  #endif\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n  layout(std140) uniform CCForwardLight {\n    highp vec4 cc_lightPos[LIGHTS_PER_PASS];\n    vec4 cc_lightColor[LIGHTS_PER_PASS];\n    vec4 cc_lightSizeRangeAngle[LIGHTS_PER_PASS];\n    vec4 cc_lightDir[LIGHTS_PER_PASS];\n  };\n  #endif\n  float SmoothDistAtt (float distSqr, float invSqrAttRadius) {\n    float factor = distSqr * invSqrAttRadius;\n    float smoothFactor = clamp(1.0 - factor * factor, 0.0, 1.0);\n    return smoothFactor * smoothFactor;\n  }\n  float GetDistAtt (float distSqr, float invSqrAttRadius) {\n    float attenuation = 1.0 / max(distSqr, 0.01*0.01);\n    attenuation *= SmoothDistAtt(distSqr , invSqrAttRadius);\n    return attenuation;\n  }\n  float GetAngleAtt (vec3 L, vec3 litDir, float litAngleScale, float litAngleOffset) {\n    float cd = dot(litDir, L);\n    float attenuation = clamp(cd * litAngleScale + litAngleOffset, 0.0, 1.0);\n    return (attenuation * attenuation);\n  }\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n  vec4 CCStandardShadingAdditive (StandardSurface s, vec4 shadowPos) {\n    vec3 position;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    position = unpackHighpData(s.position, s.position_fract_part);\n    #else\n    position = s.position;\n    #endif\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n    vec3 diffuseContrib = diffuse / 3.14159265359;\n    vec3 N = normalize(s.normal);\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    float NV = max(abs(dot(N, V)), 0.0);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 finalColor = vec3(0.0);\n    int numLights = CC_PIPELINE_TYPE == 0 ? LIGHTS_PER_PASS : int(cc_lightDir[0].w);\n    for (int i = 0; i < LIGHTS_PER_PASS; i++) {\n      if (i >= numLights) break;\n      vec3 SLU = cc_lightPos[i].xyz - position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = max(dot(N, SL), 0.0);\n      float SNH = max(dot(N, SH), 0.0);\n      float distSqr = dot(SLU, SLU);\n      float litRadius = cc_lightSizeRangeAngle[i].x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = 3.14159265359 * (litRadiusSqr / max(litRadiusSqr , distSqr));\n      float attRadiusSqrInv = 1.0 / max(cc_lightSizeRangeAngle[i].y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\n      if (cc_lightPos[i].w > 0.0) {\n        float cosInner = max(dot(-cc_lightDir[i].xyz, SL), 0.01);\n        float cosOuter = cc_lightSizeRangeAngle[i].z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -cc_lightDir[i].xyz, litAngleScale, litAngleOffset);\n      }\n      vec3 lightColor = cc_lightColor[i].rgb;\n      float shadow = 1.0;\n      #if CC_RECEIVE_SHADOW\n        if (cc_lightPos[i].w > 0.0 && cc_lightSizeRangeAngle[i].w > 0.0) {\n          {\n            float pcf = cc_shadowWHPBInfo.z;\n            if (pcf > 1.9) shadow = CCGetSpotLightShadowFactorSoft2X(shadowPos, position);\n            else if (pcf > 0.9) shadow = CCGetSpotLightShadowFactorSoft(shadowPos, position);\n            else shadow = CCGetSpotLightShadowFactorHard(shadowPos, position);\n          }\n        }\n      #endif\n      lightColor *= shadow;\n      finalColor += SNL * lightColor * cc_lightColor[i].w * illum * att * (diffuseContrib + lspec);\n    }\n    return vec4(finalColor, 0.0);\n  }\n  #endif\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 1\n  layout(std430, binding = 4) readonly buffer b_ccLightsBuffer { vec4 b_ccLights[]; };\n  layout(std430, binding = 5) readonly buffer b_clusterLightIndicesBuffer { uint b_clusterLightIndices[]; };\n  layout(std430, binding = 6) readonly buffer b_clusterLightGridBuffer { uvec4 b_clusterLightGrid[]; };\n  struct CCLight\n  {\n    vec4 cc_lightPos;\n    vec4 cc_lightColor;\n    vec4 cc_lightSizeRangeAngle;\n    vec4 cc_lightDir;\n  };\n  struct Cluster\n  {\n    vec3 minBounds;\n    vec3 maxBounds;\n  };\n  struct LightGrid\n  {\n    uint offset;\n    uint ccLights;\n  };\n  CCLight getCCLight(uint i)\n  {\n    CCLight light;\n    light.cc_lightPos = b_ccLights[4u * i + 0u];\n    light.cc_lightColor = b_ccLights[4u * i + 1u];\n    light.cc_lightSizeRangeAngle = b_ccLights[4u * i + 2u];\n    light.cc_lightDir = b_ccLights[4u * i + 3u];\n    return light;\n  }\n  LightGrid getLightGrid(uint cluster)\n  {\n    uvec4 gridvec = b_clusterLightGrid[cluster];\n    LightGrid grid;\n    grid.offset = gridvec.x;\n    grid.ccLights = gridvec.y;\n    return grid;\n  }\n  uint getGridLightIndex(uint start, uint offset)\n  {\n    return b_clusterLightIndices[start + offset];\n  }\n  uint getClusterZIndex(vec4 worldPos)\n  {\n    float scale = float(24) / log(cc_nearFar.y / cc_nearFar.x);\n    float bias = -(float(24) * log(cc_nearFar.x) / log(cc_nearFar.y / cc_nearFar.x));\n    float eyeDepth = -(cc_matView * worldPos).z;\n    uint zIndex = uint(max(log(eyeDepth) * scale + bias, 0.0));\n    return zIndex;\n  }\n  uint getClusterIndex(vec4 fragCoord, vec4 worldPos)\n  {\n    uint zIndex = getClusterZIndex(worldPos);\n    float clusterSizeX = ceil(cc_viewPort.z / float(16));\n    float clusterSizeY = ceil(cc_viewPort.w / float(8));\n    uvec3 indices = uvec3(uvec2(fragCoord.xy / vec2(clusterSizeX, clusterSizeY)), zIndex);\n    uint cluster = (16u * 8u) * indices.z + 16u * indices.y + indices.x;\n    return cluster;\n  }\n  vec4 CCClusterShadingAdditive (StandardSurface s, vec4 shadowPos) {\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n    vec3 diffuseContrib = diffuse / 3.14159265359;\n    vec3 position;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    position = unpackHighpData(s.position, s.position_fract_part);\n    #else\n    position = s.position;\n    #endif\n    vec3 N = normalize(s.normal);\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    float NV = max(abs(dot(N, V)), 0.001);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 finalColor = vec3(0.0);\n    uint cluster = getClusterIndex(gl_FragCoord, vec4(position, 1.0));\n    LightGrid grid = getLightGrid(cluster);\n    uint numLights = grid.ccLights;\n    for (uint i = 0u; i < 100u; i++) {\n      if (i >= numLights) break;\n      uint lightIndex = getGridLightIndex(grid.offset, i);\n      CCLight light = getCCLight(lightIndex);\n      vec3 SLU = light.cc_lightPos.xyz - position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = max(dot(N, SL), 0.001);\n      float SNH = max(dot(N, SH), 0.0);\n      float distSqr = dot(SLU, SLU);\n      float litRadius = light.cc_lightSizeRangeAngle.x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = 3.14159265359 * (litRadiusSqr / max(litRadiusSqr , distSqr));\n      float attRadiusSqrInv = 1.0 / max(light.cc_lightSizeRangeAngle.y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\n      if (light.cc_lightPos.w > 0.0) {\n        float cosInner = max(dot(-light.cc_lightDir.xyz, SL), 0.01);\n        float cosOuter = light.cc_lightSizeRangeAngle.z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -light.cc_lightDir.xyz, litAngleScale, litAngleOffset);\n      }\n      vec3 lightColor = light.cc_lightColor.rgb;\n      float shadow = 1.0;\n      #if CC_RECEIVE_SHADOW\n        if (light.cc_lightPos.w > 0.0) {\n          {\n            float pcf = cc_shadowWHPBInfo.z;\n            if (pcf > 1.9) shadow = CCGetSpotLightShadowFactorSoft2X(shadowPos, position);\n            else if (pcf > 0.9) shadow = CCGetSpotLightShadowFactorSoft(shadowPos, position);\n            else shadow = CCGetSpotLightShadowFactorHard(shadowPos, position);\n          }\n        }\n      #endif\n      lightColor *= shadow;\n      finalColor += SNL * lightColor * light.cc_lightColor.w * illum * att * (diffuseContrib + lspec);\n    }\n    return vec4(finalColor, 0.0);\n  }\n  #endif\n  layout(location = 0) out vec4 fragColorX;\n  void main () {\n    StandardSurface s; surf(s);\n    #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 1\n    vec4 color = CCClusterShadingAdditive(s, v_shadowPos);\n    #else\n    vec4 color = CCStandardShadingAdditive(s, v_shadowPos);\n    #endif\n    CC_APPLY_FOG(color, s.position.xyz);\n    fragColorX = CCFragOutput(color);\n  }\n#elif (CC_PIPELINE_TYPE == 0 || CC_FORCE_FORWARD_SHADING)\n  layout(location = 0) out vec4 fragColorX;\n  void main () {\n    StandardSurface s; surf(s);\n    vec4 color = CCStandardShadingBase(s, v_shadowPos);\n    CC_APPLY_FOG(color, s.position.xyz);\n    fragColorX = CCFragOutput(color);\n  }\n#elif CC_PIPELINE_TYPE == 1\n  vec2 signNotZero(vec2 v) {\n    return vec2((v.x >= 0.0) ? +1.0 : -1.0, (v.y >= 0.0) ? +1.0 : -1.0);\n  }\n  vec2 float32x3_to_oct(in vec3 v) {\n    vec2 p = v.xy * (1.0 / (abs(v.x) + abs(v.y) + abs(v.z)));\n    return (v.z <= 0.0) ? ((1.0 - abs(p.yx)) * signNotZero(p)) : p;\n  }\n  layout(location = 0) out vec4 fragColor0;\n  layout(location = 1) out vec4 fragColor1;\n  layout(location = 2) out vec4 fragColor2;\n  void main () {\n    StandardSurface s; surf(s);\n    fragColor0 = s.albedo;\n    fragColor1 = vec4(float32x3_to_oct(s.normal), s.roughness, s.metallic);\n    fragColor2 = vec4(s.emissive, s.occlusion);\n  }\n#endif"},"glsl1":{"vert":"\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec2 a_texCoord;\nattribute vec4 a_tangent;\n#if CC_USE_MORPH\n    attribute float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n  uniform vec4 cc_displacementWeights[15];\n  uniform vec4 cc_displacementTextureInfo;\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n        int pixelIndex = elementIndex;\n        vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n        vec2 uv = getPixelCoordFromLocation(location, cc_displacementTextureInfo.xy);\n        return texture2D(tex, uv);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture2D(tex, x)),\n        decode32(texture2D(tex, y)),\n        decode32(texture2D(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n    attribute vec4 a_joints;\n  attribute vec4 a_weights;\n  #if CC_USE_BAKED_ANIMATION\n    #if USE_INSTANCING\n      attribute highp vec4 a_jointAnimInfo;\n    #endif\n    uniform highp vec4 cc_jointTextureInfo;\n    uniform highp vec4 cc_jointAnimInfo;\n    uniform highp sampler2D cc_jointTexture;\n      #else\n    uniform highp vec4 cc_joints[90];\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout StandardVertInput attr) {\n    mat4 m = skinMatrix();\n    attr.position = m * attr.position;\n    attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n    attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n  }\n#endif\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matProj;\n  uniform highp vec4 cc_cameraPos;\n  uniform mediump vec4 cc_fogBase;\n  uniform mediump vec4 cc_fogAdd;\n#if USE_INSTANCING\n  attribute vec4 a_matWorld0;\n  attribute vec4 a_matWorld1;\n  attribute vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    attribute vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  attribute float a_dyn_batch_id;\n  uniform highp mat4 cc_matWorlds[10];\n#else\n  uniform highp mat4 cc_matWorld;\n  uniform highp mat4 cc_matWorldIT;\n  uniform highp vec4 cc_lightingMapUVParam;\n#endif\n      uniform vec4 tilingOffset;\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n  #if CC_USE_FOG == 0\n\tfactor = LinearFog(pos);\n  #elif CC_USE_FOG == 1\n    factor = ExpFog(pos);\n  #elif CC_USE_FOG == 2\n    factor = ExpSquaredFog(pos);\n  #elif CC_USE_FOG == 3\n    factor = LayeredFog(pos);\n  #else\n    factor = 1.0;\n  #endif\n}\n#if !CC_USE_ACCURATE_FOG\nvarying float v_fog_factor;\n#endif\nvoid CC_TRANSFER_FOG(vec4 pos) {\n#if !CC_USE_ACCURATE_FOG\n    CC_TRANSFER_FOG_BASE(pos, v_fog_factor);\n#endif\n}\nvarying highp vec4 v_shadowPos;\nuniform highp mat4 cc_matLightViewProj;\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotLightingMap;\n#endif\n#if USE_VERTEX_COLOR\n  attribute vec4 a_color;\n  varying vec4 v_color;\n#endif\nvarying vec3 v_position;\nvarying vec3 v_normal;\nvarying vec2 v_uv;\nvarying vec2 v_uv1;\n#if USE_NORMAL_MAP\n  varying vec3 v_tangent;\n  varying vec3 v_bitangent;\n#endif\n#if HAS_SECOND_UV || USE_LIGHTMAP\n  attribute vec2 a_texCoord1;\n#endif\n#if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n  varying vec3 v_luv;\n  void CCLightingMapCaclUV()\n  {\n  #if !USE_INSTANCING\n    v_luv.xy = cc_lightingMapUVParam.xy + a_texCoord1 * cc_lightingMapUVParam.zw;\n    v_luv.z = cc_lightingMapUVParam.z;\n  #else\n    v_luv.xy = a_lightingMapUVParam.xy + a_texCoord1 * a_lightingMapUVParam.zw;\n    v_luv.z = a_lightingMapUVParam.z;\n  #endif\n  }\n#endif\nvoid main () {\n  StandardVertInput In;\n      In.position = vec4(a_position, 1.0);\n      In.normal = a_normal;\n      In.tangent = a_tangent;\n    #if CC_USE_MORPH\n      applyMorph(In);\n    #endif\n    #if CC_USE_SKINNING\n      CCSkin(In);\n    #endif\n  mat4 matWorld, matWorldIT;\n    #if USE_INSTANCING\n      matWorld = mat4(\n        vec4(a_matWorld0.xyz, 0.0),\n        vec4(a_matWorld1.xyz, 0.0),\n        vec4(a_matWorld2.xyz, 0.0),\n        vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n      );\n      matWorldIT = matWorld;\n    #elif USE_BATCHING\n      matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n      matWorldIT = matWorld;\n    #else\n      matWorld = cc_matWorld;\n      matWorldIT = cc_matWorldIT;\n    #endif\n  vec4 pos = matWorld * In.position;\n  v_position = pos.xyz;\n  v_normal = normalize((matWorldIT * vec4(In.normal, 0.0)).xyz);\n  #if USE_TWOSIDE\n    vec3 viewDirect = normalize(cc_cameraPos.xyz - v_position);\n    v_normal *= dot(v_normal, viewDirect) < 0.0 ? -1.0 : 1.0;\n  #endif\n  #if USE_NORMAL_MAP\n    v_tangent = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n    v_bitangent = cross(v_normal, v_tangent) * In.tangent.w;\n  #endif\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if SAMPLE_FROM_RT\n    v_uv = cc_cameraPos.w > 1.0 ? vec2(v_uv.x, 1.0 - v_uv.y) : v_uv;\n  #endif\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n    #if SAMPLE_FROM_RT\n      v_uv1 = cc_cameraPos.w > 1.0 ? vec2(v_uv1.x, 1.0 - v_uv1.y) : v_uv1;\n    #endif\n  #endif\n  #if USE_VERTEX_COLOR\n    v_color = a_color;\n  #endif\n  CC_TRANSFER_FOG(pos);\n  v_shadowPos = cc_matLightViewProj * pos;\n  #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    CCLightingMapCaclUV();\n  #endif\n  gl_Position = cc_matProj * (cc_matView * matWorld) * In.position;\n}","frag":"\n#ifdef GL_EXT_draw_buffers\n#extension GL_EXT_draw_buffers: enable\n#endif\n#ifdef GL_OES_standard_derivatives\n#extension GL_OES_standard_derivatives: enable\n#endif\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod: enable\n#endif\nprecision highp float;\nuniform highp mat4 cc_matView;\n  uniform highp vec4 cc_cameraPos;\n  uniform mediump vec4 cc_mainLitDir;\n  uniform mediump vec4 cc_mainLitColor;\n  uniform mediump vec4 cc_ambientSky;\n  uniform mediump vec4 cc_ambientGround;\n  uniform mediump vec4 cc_fogColor;\n  uniform mediump vec4 cc_fogBase;\n  uniform mediump vec4 cc_fogAdd;\n  uniform mediump vec4 cc_nearFar;\n  uniform mediump vec4 cc_viewPort;\n     uniform vec4 albedo;\n     uniform vec4 albedoScaleAndCutoff;\n     uniform vec4 pbrParams;\n     uniform vec4 emissive;\n     uniform vec4 emissiveScaleParam;\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n  #if CC_USE_FOG == 0\n\tfactor = LinearFog(pos);\n  #elif CC_USE_FOG == 1\n    factor = ExpFog(pos);\n  #elif CC_USE_FOG == 2\n    factor = ExpSquaredFog(pos);\n  #elif CC_USE_FOG == 3\n    factor = LayeredFog(pos);\n  #else\n    factor = 1.0;\n  #endif\n}\nvoid CC_APPLY_FOG_BASE(inout vec4 color, float factor) {\n  color = vec4(mix(cc_fogColor.rgb, color.rgb, factor), color.a);\n}\n#if !CC_USE_ACCURATE_FOG\nvarying float v_fog_factor;\n#endif\nvoid CC_APPLY_FOG(inout vec4 color) {\n#if !CC_USE_ACCURATE_FOG\n    CC_APPLY_FOG_BASE(color, v_fog_factor);\n#endif\n}\nvoid CC_APPLY_FOG(inout vec4 color, vec3 worldPos) {\n#if CC_USE_ACCURATE_FOG\n    float factor;\n    CC_TRANSFER_FOG_BASE(vec4(worldPos, 1.0), factor);\n#else\n    float factor = v_fog_factor;\n#endif\n    CC_APPLY_FOG_BASE(color, factor);\n}\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nuniform highp mat4 cc_matLightView;\n  uniform highp vec4 cc_shadowInvProjDepthInfo;\n  uniform highp vec4 cc_shadowProjDepthInfo;\n  uniform highp vec4 cc_shadowProjInfo;\n  uniform mediump vec4 cc_shadowNFLSInfo;\n  uniform mediump vec4 cc_shadowWHPBInfo;\n  uniform mediump vec4 cc_shadowLPNNInfo;\nhighp float unpackHighpData (float mainPart, float modPart) {\n  highp float data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out float mainPart, out float modPart, highp float data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp float unpackHighpData (float mainPart, float modPart, const float modValue) {\n  highp float data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out float mainPart, out float modPart, highp float data, const float modValue) {\n  highp float divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec2 unpackHighpData (vec2 mainPart, vec2 modPart) {\n  highp vec2 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec2 unpackHighpData (vec2 mainPart, vec2 modPart, const float modValue) {\n  highp vec2 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data, const float modValue) {\n  highp vec2 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec3 unpackHighpData (vec3 mainPart, vec3 modPart) {\n  highp vec3 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec3 unpackHighpData (vec3 mainPart, vec3 modPart, const float modValue) {\n  highp vec3 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data, const float modValue) {\n  highp vec3 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec4 unpackHighpData (vec4 mainPart, vec4 modPart) {\n  highp vec4 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec4 unpackHighpData (vec4 mainPart, vec4 modPart, const float modValue) {\n  highp vec4 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data, const float modValue) {\n  highp vec4 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nfloat CCGetLinearDepthFromViewSpace(vec3 viewPos) {\n  float dist = length(viewPos);\n  return (dist - cc_shadowNFLSInfo.x) / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n  vec4 viewStartPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  return CCGetLinearDepthFromViewSpace(viewStartPos.xyz);\n}\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotLightingMap;\n  vec4 ApplyShadowDepthBias_FaceNormal(vec4 shadowPos, vec3 worldNormal)\n  {\n    vec4 newShadowPos = shadowPos;\n    if(cc_shadowLPNNInfo.z > 0.0001)\n    {\n      vec4 viewNormal = cc_matLightView * vec4(worldNormal, 0.0);\n      if(viewNormal.z < 0.1)\n        newShadowPos.xy += viewNormal.xy * cc_shadowProjInfo.xy * cc_shadowLPNNInfo.z * clamp(viewNormal.z, 0.001, 0.1);\n    }\n    return newShadowPos;\n  }\n  vec4 ApplyShadowDepthBias_Perspective(vec4 shadowPos, float viewspaceDepthBias)\n  {\n    vec3 viewSpacePos;\n    viewSpacePos.xy = shadowPos.xy * cc_shadowProjInfo.zw;\n    viewSpacePos.z = shadowPos.z * cc_shadowInvProjDepthInfo.x + shadowPos.w * cc_shadowInvProjDepthInfo.y;\n    viewSpacePos.xyz += cc_shadowProjDepthInfo.z * normalize(viewSpacePos.xyz) * viewspaceDepthBias;\n    vec4 clipSpacePos;\n    clipSpacePos.xy = viewSpacePos.xy * cc_shadowProjInfo.xy;\n    clipSpacePos.zw = viewSpacePos.z * cc_shadowProjDepthInfo.xz + vec2(cc_shadowProjDepthInfo.y, 0.0);\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      clipSpacePos.z = CCGetLinearDepthFromViewSpace(viewSpacePos.xyz);\n      clipSpacePos.z = (clipSpacePos.z * 2.0 - 1.0) * clipSpacePos.w;\n    }\n    return clipSpacePos;\n  }\n  vec4 ApplyShadowDepthBias_Orthographic(vec4 shadowPos, float viewspaceDepthBias)\n  {\n    float coeffA = cc_shadowProjDepthInfo.x;\n    float coeffB = cc_shadowProjDepthInfo.y;\n    float viewSpacePos_z = (shadowPos.z - coeffB) / coeffA;\n    viewSpacePos_z += viewspaceDepthBias;\n    vec4 result = shadowPos;\n    result.z = viewSpacePos_z * coeffA + coeffB;\n    return result;\n  }\n  float CCGetShadowFactorHard (vec4 shadowPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float shadow = 0.0;\n    float closestDepth = 0.0;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      closestDepth = dot(texture2D(cc_shadowMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0));\n    } else {\n      closestDepth = texture2D(cc_shadowMap, clipPos.xy).x;\n    }\n    shadow = step(clipPos.z, closestDepth);\n    return shadow;\n  }\n  float CCGetShadowFactorSoft (vec4 shadowPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float offsetDepth = clipPos.z;\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    vec2 clipPos_offset = clipPos.xy + oneTap;\n    float block0, block1, block2, block3;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      block0 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n      block1 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)).x);\n      block2 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)).x);\n      block3 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)).x);\n    }\n    float coefX   = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block2, block3, coefX);\n    float coefY   = mod(clipPos.y, oneTap.y) * mapSize.y;\n    return mix(resultX, resultY, coefY);\n  }\n  float CCGetShadowFactorSoft2X (vec4 shadowPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float offsetDepth = clipPos.z;\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    float clipPos_offset_L = clipPos.x - oneTap.x;\n    float clipPos_offset_R = clipPos.x + oneTap.x;\n    float clipPos_offset_U = clipPos.y - oneTap.y;\n    float clipPos_offset_D = clipPos.y + oneTap.y;\n    float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      block0 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)).x);\n      block1 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)).x);\n      block2 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)).x);\n      block3 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)).x);\n      block4 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n      block5 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)).x);\n      block6 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)).x);\n      block7 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)).x);\n      block8 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)).x);\n    }\n    float coefX = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float coefY = mod(clipPos.y, oneTap.y) * mapSize.y;\n    float shadow = 0.0;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block3, block4, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block1, block2, coefX);\n    resultY = mix(block4, block5, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block3, block4, coefX);\n    resultY = mix(block6, block7, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    resultX = mix(block4, block5, coefX);\n    resultY = mix(block7, block8, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    return shadow * 0.25;\n  }\n  float CCGetSpotLightShadowFactorHard (vec4 shadowPos, vec3 worldPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float shadow = 0.0;\n    float closestDepth = 0.0;\n    float depth = clipPos.z;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      closestDepth = dot(texture2D(cc_spotLightingMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0));\n    } else {\n      closestDepth = texture2D(cc_spotLightingMap, clipPos.xy).x;\n    }\n    shadow = step(depth, closestDepth);\n    return shadow;\n  }\n  float CCGetSpotLightShadowFactorSoft (vec4 shadowPos, vec3 worldPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float depth = 0.0;\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      depth = CCGetLinearDepth(worldPos);\n    } else {\n      depth = clipPos.z;\n    }\n    float bias = cc_shadowWHPBInfo.w;\n    vec2 oneTap = 1.0 / cc_shadowWHPBInfo.xy;\n    vec2 clipPos_offset = clipPos.xy + oneTap;\n    float block0, block1, block2, block3;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      block0 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)).x);\n      block1 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos.y)).x);\n      block2 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset.y)).x);\n      block3 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos_offset.y)).x);\n    }\n    float coefX   = mod(clipPos.x, oneTap.x) * cc_shadowWHPBInfo.x;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block2, block3, coefX);\n    float coefY   = mod(clipPos.y, oneTap.y) * cc_shadowWHPBInfo.y;\n    return mix(resultX, resultY, coefY);\n  }\n  float CCGetSpotLightShadowFactorSoft2X (vec4 shadowPos, vec3 worldPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float depth = 0.0;\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      depth = CCGetLinearDepth(worldPos);\n    } else {\n      depth = clipPos.z;\n    }\n    float bias = cc_shadowWHPBInfo.w;\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    float clipPos_offset_L = clipPos.x - oneTap.x;\n    float clipPos_offset_R = clipPos.x + oneTap.x;\n    float clipPos_offset_U = clipPos.y - oneTap.y;\n    float clipPos_offset_D = clipPos.y + oneTap.y;\n    float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      block0 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_U)).x);\n      block1 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_U)).x);\n      block2 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_U)).x);\n      block3 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos.y)).x);\n      block4 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)).x);\n      block5 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos.y)).x);\n      block6 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_D)).x);\n      block7 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_D)).x);\n      block8 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_D)).x);\n    }\n    float coefX = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float coefY = mod(clipPos.y, oneTap.y) * mapSize.y;\n    float shadow = 0.0;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block3, block4, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block1, block2, coefX);\n    resultY = mix(block4, block5, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block3, block4, coefX);\n    resultY = mix(block6, block7, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    resultX = mix(block4, block5, coefX);\n    resultY = mix(block7, block8, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    return shadow * 0.25;\n  }\n#endif\n#if CC_USE_IBL\n  uniform samplerCube cc_environment;\n  vec4 fragTextureLod (sampler2D tex, vec2 coord, float lod) {\n      #ifdef GL_EXT_shader_texture_lod\n        return texture2DLodEXT(tex, coord, lod);\n      #else\n        return texture2D(tex, coord, lod);\n      #endif\n  }\n  vec4 fragTextureLod (samplerCube tex, vec3 coord, float lod) {\n      #ifdef GL_EXT_shader_texture_lod\n        return textureCubeLodEXT(tex, coord, lod);\n      #else\n        return textureCube(tex, coord, lod);\n      #endif\n  }\n  vec3 unpackRGBE (vec4 rgbe) {\n    return rgbe.rgb * pow(1.1, rgbe.a * 255.0 - 128.0);\n  }\n  #if CC_USE_DIFFUSEMAP\n    uniform samplerCube cc_diffuseMap;\n  #endif\n#endif\nfloat GGXMobile (float roughness, float NoH, vec3 H, vec3 N) {\n  vec3 NxH = cross(N, H);\n  float OneMinusNoHSqr = dot(NxH, NxH);\n  float a = roughness * roughness;\n  float n = NoH * a;\n  float p = a / (OneMinusNoHSqr + n * n);\n  return p * p;\n}\nfloat CalcSpecular (float roughness, float NoH, vec3 H, vec3 N) {\n  return (roughness * 0.25 + 0.25) * GGXMobile(roughness, NoH, H, N);\n}\nvec3 BRDFApprox (vec3 specular, float roughness, float NoV) {\n  const vec4 c0 = vec4(-1.0, -0.0275, -0.572, 0.022);\n  const vec4 c1 = vec4(1.0, 0.0425, 1.04, -0.04);\n  vec4 r = roughness * c0 + c1;\n  float a004 = min(r.x * r.x, exp2(-9.28 * NoV)) * r.x + r.y;\n  vec2 AB = vec2(-1.04, 1.04) * a004 + r.zw;\n  AB.y *= clamp(50.0 * specular.g, 0.0, 1.0);\n  return specular * AB.x + AB.y;\n}\n#if USE_REFLECTION_DENOISE\n  vec3 GetEnvReflectionWithMipFiltering(vec3 R, float roughness, float mipCount, float denoiseIntensity) {\n    #if CC_USE_IBL\n    \tfloat mip = roughness * mipCount;\n    \tfloat delta = (dot(dFdx(R), dFdy(R))) * 1000.0;\n    \tfloat mipBias = mix(0.0, 5.0, clamp(delta, 0.0, 1.0));\n    \tvec4 biased = fragTextureLod(cc_environment, R, mip + mipBias);\n     \tvec4 filtered = textureCube(cc_environment, R);\n      #if CC_USE_IBL == 2\n      \tbiased.rgb = unpackRGBE(biased);\n      \tfiltered.rgb = unpackRGBE(filtered);\n      #else\n      \tbiased.rgb = SRGBToLinear(biased.rgb);\n      \tfiltered.rgb = SRGBToLinear(filtered.rgb);\n      #endif\n      return mix(biased.rgb, filtered.rgb, denoiseIntensity);\n    #else\n      return vec3(0.0, 0.0, 0.0);\n    #endif\n  }\n#endif\nstruct StandardSurface {\n  vec4 albedo;\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  vec3 position, position_fract_part;\n  #else\n  vec3 position;\n  #endif\n  vec3 normal;\n  vec3 emissive;\n  vec3 lightmap;\n  float lightmap_test;\n  float roughness;\n  float metallic;\n  float occlusion;\n};\nvec4 CCStandardShadingBase (StandardSurface s, vec4 shadowPos) {\n  vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n  vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n  vec3 position;\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  position = unpackHighpData(s.position, s.position_fract_part);\n  #else\n  position = s.position;\n  #endif\n  vec3 N = normalize(s.normal);\n  vec3 V = normalize(cc_cameraPos.xyz - position);\n  float NV = max(abs(dot(N, V)), 0.0);\n  specular = BRDFApprox(specular, s.roughness, NV);\n  vec3 L = normalize(-cc_mainLitDir.xyz);\n  vec3 H = normalize(L + V);\n  float NH = max(dot(N, H), 0.0);\n  float NL = max(dot(N, L), 0.0);\n  vec3 finalColor = NL * cc_mainLitColor.rgb * cc_mainLitColor.w;\n  vec3 diffuseContrib = diffuse;\n  #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    if (s.lightmap_test > 0.0001) {\n      finalColor = s.lightmap.rgb;\n    }\n  #else\n    diffuseContrib /= 3.14159265359;\n  #endif\n  vec3 specularContrib = specular * CalcSpecular(s.roughness, NH, H, N);\n  vec3 dirlightContrib = (diffuseContrib + specularContrib);\n  float shadow = 1.0;\n  #if CC_RECEIVE_SHADOW\n    if (NL > 0.0 && cc_mainLitDir.w > 0.0) {\n      {\n        vec4 pos = ApplyShadowDepthBias_FaceNormal(shadowPos, N);\n        float pcf = cc_shadowWHPBInfo.z;\n        if (pcf > 1.9) shadow = CCGetShadowFactorSoft2X(pos);\n        else if (pcf > 0.9) shadow = CCGetShadowFactorSoft(pos);\n        else shadow = CCGetShadowFactorHard(pos);\n        shadow = mix(shadow, 1.0, cc_shadowNFLSInfo.w);\n      }\n    }\n  #endif\n  dirlightContrib *= shadow;\n  finalColor *= dirlightContrib;\n  float fAmb = 0.5 - N.y * 0.5;\n  vec3 ambDiff = mix(cc_ambientSky.rgb, cc_ambientGround.rgb, fAmb);\n  #if CC_USE_IBL\n    #if CC_USE_DIFFUSEMAP\n      vec4 diffuseMap = textureCube(cc_diffuseMap, N);\n      #if CC_USE_DIFFUSEMAP == 2\n        ambDiff = unpackRGBE(diffuseMap);\n      #else\n        ambDiff = SRGBToLinear(diffuseMap.rgb);\n      #endif\n    #endif\n    vec3 R = normalize(reflect(-V, N));\n    #if USE_REFLECTION_DENOISE\n      vec3 env = GetEnvReflectionWithMipFiltering(R, s.roughness, cc_ambientGround.w, 0.6);\n    #else\n      vec4 envmap = fragTextureLod(cc_environment, R, s.roughness * cc_ambientGround.w);\n      #if CC_USE_IBL == 2\n        vec3 env = unpackRGBE(envmap);\n      #else\n        vec3 env = SRGBToLinear(envmap.rgb);\n      #endif\n    #endif\n    finalColor += env * cc_ambientSky.w * specular * s.occlusion;\n  #endif\n  finalColor += ambDiff.rgb * cc_ambientSky.w * diffuse * s.occlusion;\n  finalColor += s.emissive;\n  return vec4(finalColor, s.albedo.a);\n}\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = ACESToneMap(color.rgb);\n  #endif\n  color.rgb = sqrt(color.rgb);\n  return color;\n}\nvarying highp vec4 v_shadowPos;\n#if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n  varying vec3 v_luv;\n  uniform sampler2D cc_lightingMap;\n  vec3 UnpackLightingmap(vec4 color) {\n    vec3 c;\n    float e = 1.0 + color.a * (8.0 - 1.0);\n    c.r = color.r * e;\n    c.g = color.g * e;\n    c.b = color.b * e;\n    return c;\n  }\n#endif\nvarying vec3 v_position;\nvarying vec2 v_uv;\nvarying vec2 v_uv1;\nvarying vec3 v_normal;\n#if USE_VERTEX_COLOR\n  varying vec4 v_color;\n#endif\n#if USE_ALBEDO_MAP\n  uniform sampler2D albedoMap;\n#endif\n#if USE_NORMAL_MAP\n  varying vec3 v_tangent;\n  varying vec3 v_bitangent;\n  uniform sampler2D normalMap;\n#endif\n#if USE_PBR_MAP\n  uniform sampler2D pbrMap;\n#endif\n#if USE_METALLIC_ROUGHNESS_MAP\n  uniform sampler2D metallicRoughnessMap;\n#endif\n#if USE_OCCLUSION_MAP\n  uniform sampler2D occlusionMap;\n#endif\n#if USE_EMISSIVE_MAP\n  uniform sampler2D emissiveMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvoid surf (out StandardSurface s) {\n  vec4 baseColor = albedo;\n  #if USE_VERTEX_COLOR\n    baseColor.rgb *= SRGBToLinear(v_color.rgb);\n    baseColor.a *= v_color.a;\n  #endif\n  #if USE_ALBEDO_MAP\n    vec4 texColor = texture2D(albedoMap, ALBEDO_UV);\n    texColor.rgb = SRGBToLinear(texColor.rgb);\n    baseColor *= texColor;\n  #endif\n  s.albedo = baseColor;\n  s.albedo.rgb *= albedoScaleAndCutoff.xyz;\n  #if USE_ALPHA_TEST\n    if (s.albedo.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n  #endif\n  #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    vec4 lightColor = texture2D(cc_lightingMap, v_luv.xy);\n    s.lightmap = UnpackLightingmap(lightColor);\n    s.lightmap_test = v_luv.z;\n  #endif\n  s.normal = v_normal;\n  #if USE_NORMAL_MAP\n    vec3 nmmp = texture2D(normalMap, NORMAL_UV).xyz - vec3(0.5);\n    s.normal =\n      (nmmp.x * emissiveScaleParam.w) * normalize(v_tangent) +\n      (nmmp.y * emissiveScaleParam.w) * normalize(v_bitangent) +\n      nmmp.z * normalize(s.normal);\n  #endif\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  packHighpData(s.position, s.position_fract_part, v_position);\n  #else\n  s.position = v_position;\n  #endif\n  vec4 pbr = pbrParams;\n  #if USE_PBR_MAP\n    vec4 res = texture2D(pbrMap, PBR_UV);\n    pbr.x *= res.r;\n    pbr.y *= res.g;\n    pbr.z *= res.b;\n    pbr.w *= res.a;\n  #endif\n  #if USE_METALLIC_ROUGHNESS_MAP\n    vec4 metallicRoughness = texture2D(metallicRoughnessMap, PBR_UV);\n    pbr.z *= metallicRoughness.b;\n    pbr.y *= metallicRoughness.g;\n  #endif\n  #if USE_OCCLUSION_MAP\n    pbr.x *= texture2D(occlusionMap, PBR_UV).r;\n  #endif\n  s.occlusion = pbr.x;\n  s.roughness = pbr.y;\n  s.metallic = pbr.z;\n  s.emissive = emissive.rgb * emissiveScaleParam.xyz;\n  #if USE_EMISSIVE_MAP\n    s.emissive *= SRGBToLinear(texture2D(emissiveMap, EMISSIVE_UV).rgb);\n  #endif\n}\n#if CC_FORWARD_ADD\n  #if CC_PIPELINE_TYPE == 0\n  # define LIGHTS_PER_PASS 1\n  #else\n  # define LIGHTS_PER_PASS 10\n  #endif\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n  uniform highp vec4 cc_lightPos[LIGHTS_PER_PASS];\n  uniform vec4 cc_lightColor[LIGHTS_PER_PASS];\n  uniform vec4 cc_lightSizeRangeAngle[LIGHTS_PER_PASS];\n  uniform vec4 cc_lightDir[LIGHTS_PER_PASS];\n  #endif\n  float SmoothDistAtt (float distSqr, float invSqrAttRadius) {\n    float factor = distSqr * invSqrAttRadius;\n    float smoothFactor = clamp(1.0 - factor * factor, 0.0, 1.0);\n    return smoothFactor * smoothFactor;\n  }\n  float GetDistAtt (float distSqr, float invSqrAttRadius) {\n    float attenuation = 1.0 / max(distSqr, 0.01*0.01);\n    attenuation *= SmoothDistAtt(distSqr , invSqrAttRadius);\n    return attenuation;\n  }\n  float GetAngleAtt (vec3 L, vec3 litDir, float litAngleScale, float litAngleOffset) {\n    float cd = dot(litDir, L);\n    float attenuation = clamp(cd * litAngleScale + litAngleOffset, 0.0, 1.0);\n    return (attenuation * attenuation);\n  }\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n  vec4 CCStandardShadingAdditive (StandardSurface s, vec4 shadowPos) {\n    vec3 position;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    position = unpackHighpData(s.position, s.position_fract_part);\n    #else\n    position = s.position;\n    #endif\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n    vec3 diffuseContrib = diffuse / 3.14159265359;\n    vec3 N = normalize(s.normal);\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    float NV = max(abs(dot(N, V)), 0.0);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 finalColor = vec3(0.0);\n    int numLights = CC_PIPELINE_TYPE == 0 ? LIGHTS_PER_PASS : int(cc_lightDir[0].w);\n    for (int i = 0; i < LIGHTS_PER_PASS; i++) {\n      if (i >= numLights) break;\n      vec3 SLU = cc_lightPos[i].xyz - position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = max(dot(N, SL), 0.0);\n      float SNH = max(dot(N, SH), 0.0);\n      float distSqr = dot(SLU, SLU);\n      float litRadius = cc_lightSizeRangeAngle[i].x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = 3.14159265359 * (litRadiusSqr / max(litRadiusSqr , distSqr));\n      float attRadiusSqrInv = 1.0 / max(cc_lightSizeRangeAngle[i].y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\n      if (cc_lightPos[i].w > 0.0) {\n        float cosInner = max(dot(-cc_lightDir[i].xyz, SL), 0.01);\n        float cosOuter = cc_lightSizeRangeAngle[i].z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -cc_lightDir[i].xyz, litAngleScale, litAngleOffset);\n      }\n      vec3 lightColor = cc_lightColor[i].rgb;\n      float shadow = 1.0;\n      #if CC_RECEIVE_SHADOW\n        if (cc_lightPos[i].w > 0.0 && cc_lightSizeRangeAngle[i].w > 0.0) {\n          {\n            float pcf = cc_shadowWHPBInfo.z;\n            if (pcf > 1.9) shadow = CCGetSpotLightShadowFactorSoft2X(shadowPos, position);\n            else if (pcf > 0.9) shadow = CCGetSpotLightShadowFactorSoft(shadowPos, position);\n            else shadow = CCGetSpotLightShadowFactorHard(shadowPos, position);\n          }\n        }\n      #endif\n      lightColor *= shadow;\n      finalColor += SNL * lightColor * cc_lightColor[i].w * illum * att * (diffuseContrib + lspec);\n    }\n    return vec4(finalColor, 0.0);\n  }\n  #endif\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 1\n  readonly buffer b_ccLightsBuffer { vec4 b_ccLights[]; };\n  readonly buffer b_clusterLightIndicesBuffer { uint b_clusterLightIndices[]; };\n  readonly buffer b_clusterLightGridBuffer { uvec4 b_clusterLightGrid[]; };\n  struct CCLight\n  {\n    vec4 cc_lightPos;\n    vec4 cc_lightColor;\n    vec4 cc_lightSizeRangeAngle;\n    vec4 cc_lightDir;\n  };\n  struct Cluster\n  {\n    vec3 minBounds;\n    vec3 maxBounds;\n  };\n  struct LightGrid\n  {\n    uint offset;\n    uint ccLights;\n  };\n  CCLight getCCLight(uint i)\n  {\n    CCLight light;\n    light.cc_lightPos = b_ccLights[4u * i + 0u];\n    light.cc_lightColor = b_ccLights[4u * i + 1u];\n    light.cc_lightSizeRangeAngle = b_ccLights[4u * i + 2u];\n    light.cc_lightDir = b_ccLights[4u * i + 3u];\n    return light;\n  }\n  LightGrid getLightGrid(uint cluster)\n  {\n    uvec4 gridvec = b_clusterLightGrid[cluster];\n    LightGrid grid;\n    grid.offset = gridvec.x;\n    grid.ccLights = gridvec.y;\n    return grid;\n  }\n  uint getGridLightIndex(uint start, uint offset)\n  {\n    return b_clusterLightIndices[start + offset];\n  }\n  uint getClusterZIndex(vec4 worldPos)\n  {\n    float scale = float(24) / log(cc_nearFar.y / cc_nearFar.x);\n    float bias = -(float(24) * log(cc_nearFar.x) / log(cc_nearFar.y / cc_nearFar.x));\n    float eyeDepth = -(cc_matView * worldPos).z;\n    uint zIndex = uint(max(log(eyeDepth) * scale + bias, 0.0));\n    return zIndex;\n  }\n  uint getClusterIndex(vec4 fragCoord, vec4 worldPos)\n  {\n    uint zIndex = getClusterZIndex(worldPos);\n    float clusterSizeX = ceil(cc_viewPort.z / float(16));\n    float clusterSizeY = ceil(cc_viewPort.w / float(8));\n    uvec3 indices = uvec3(uvec2(fragCoord.xy / vec2(clusterSizeX, clusterSizeY)), zIndex);\n    uint cluster = (16u * 8u) * indices.z + 16u * indices.y + indices.x;\n    return cluster;\n  }\n  vec4 CCClusterShadingAdditive (StandardSurface s, vec4 shadowPos) {\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n    vec3 diffuseContrib = diffuse / 3.14159265359;\n    vec3 position;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    position = unpackHighpData(s.position, s.position_fract_part);\n    #else\n    position = s.position;\n    #endif\n    vec3 N = normalize(s.normal);\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    float NV = max(abs(dot(N, V)), 0.001);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 finalColor = vec3(0.0);\n    uint cluster = getClusterIndex(gl_FragCoord, vec4(position, 1.0));\n    LightGrid grid = getLightGrid(cluster);\n    uint numLights = grid.ccLights;\n    for (uint i = 0u; i < 100u; i++) {\n      if (i >= numLights) break;\n      uint lightIndex = getGridLightIndex(grid.offset, i);\n      CCLight light = getCCLight(lightIndex);\n      vec3 SLU = light.cc_lightPos.xyz - position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = max(dot(N, SL), 0.001);\n      float SNH = max(dot(N, SH), 0.0);\n      float distSqr = dot(SLU, SLU);\n      float litRadius = light.cc_lightSizeRangeAngle.x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = 3.14159265359 * (litRadiusSqr / max(litRadiusSqr , distSqr));\n      float attRadiusSqrInv = 1.0 / max(light.cc_lightSizeRangeAngle.y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\n      if (light.cc_lightPos.w > 0.0) {\n        float cosInner = max(dot(-light.cc_lightDir.xyz, SL), 0.01);\n        float cosOuter = light.cc_lightSizeRangeAngle.z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -light.cc_lightDir.xyz, litAngleScale, litAngleOffset);\n      }\n      vec3 lightColor = light.cc_lightColor.rgb;\n      float shadow = 1.0;\n      #if CC_RECEIVE_SHADOW\n        if (light.cc_lightPos.w > 0.0) {\n          {\n            float pcf = cc_shadowWHPBInfo.z;\n            if (pcf > 1.9) shadow = CCGetSpotLightShadowFactorSoft2X(shadowPos, position);\n            else if (pcf > 0.9) shadow = CCGetSpotLightShadowFactorSoft(shadowPos, position);\n            else shadow = CCGetSpotLightShadowFactorHard(shadowPos, position);\n          }\n        }\n      #endif\n      lightColor *= shadow;\n      finalColor += SNL * lightColor * light.cc_lightColor.w * illum * att * (diffuseContrib + lspec);\n    }\n    return vec4(finalColor, 0.0);\n  }\n  #endif\n  void main () {\n    StandardSurface s; surf(s);\n    #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 1\n    vec4 color = CCClusterShadingAdditive(s, v_shadowPos);\n    #else\n    vec4 color = CCStandardShadingAdditive(s, v_shadowPos);\n    #endif\n    CC_APPLY_FOG(color, s.position.xyz);\n    gl_FragData[0] = CCFragOutput(color);\n  }\n#elif (CC_PIPELINE_TYPE == 0 || CC_FORCE_FORWARD_SHADING)\n  void main () {\n    StandardSurface s; surf(s);\n    vec4 color = CCStandardShadingBase(s, v_shadowPos);\n    CC_APPLY_FOG(color, s.position.xyz);\n    gl_FragData[0] = CCFragOutput(color);\n  }\n#elif CC_PIPELINE_TYPE == 1\n  vec2 signNotZero(vec2 v) {\n    return vec2((v.x >= 0.0) ? +1.0 : -1.0, (v.y >= 0.0) ? +1.0 : -1.0);\n  }\n  vec2 float32x3_to_oct(in vec3 v) {\n    vec2 p = v.xy * (1.0 / (abs(v.x) + abs(v.y) + abs(v.z)));\n    return (v.z <= 0.0) ? ((1.0 - abs(p.yx)) * signNotZero(p)) : p;\n  }\n  void main () {\n    StandardSurface s; surf(s);\n    gl_FragData[0] = s.albedo;\n    gl_FragData[1] = vec4(float32x3_to_oct(s.normal), s.roughness, s.metallic);\n    gl_FragData[2] = vec4(s.emissive, s.occlusion);\n  }\n#endif"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]},{"name":"CCShadow","defines":[]}],"samplerTextures":[{"name":"cc_shadowMap","defines":["CC_RECEIVE_SHADOW"]},{"name":"cc_spotLightingMap","defines":["CC_RECEIVE_SHADOW"]},{"name":"cc_environment","defines":["CC_USE_IBL"]},{"name":"cc_diffuseMap","defines":["CC_USE_IBL","CC_USE_DIFFUSEMAP"]}],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCMorph","defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION"]},{"name":"CCLocalBatched","defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"CCLocal","defines":["!USE_INSTANCING","!USE_BATCHING"]},{"name":"CCForwardLight","defines":["CC_FORWARD_ADD","CC_ENABLE_CLUSTERED_LIGHT_CULLING"]}],"samplerTextures":[{"name":"cc_PositionDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"cc_lightingMap","defines":["USE_LIGHTMAP","!USE_BATCHING","!CC_FORWARD_ADD"]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":222,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":65}},"defines":[{"name":"CC_USE_MORPH","type":"boolean","defines":[]},{"name":"CC_MORPH_TARGET_COUNT","type":"number","defines":["CC_USE_MORPH"],"range":[2,8]},{"name":"CC_MORPH_PRECOMPUTED","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_POSITION","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_NORMAL","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_TANGENT","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_USE_SKINNING","type":"boolean","defines":[]},{"name":"CC_USE_BAKED_ANIMATION","type":"boolean","defines":["CC_USE_SKINNING"]},{"name":"USE_INSTANCING","type":"boolean","defines":[],"editor":{"elevated":true}},{"name":"USE_BATCHING","type":"boolean","defines":["!USE_INSTANCING"],"editor":{"elevated":true}},{"name":"USE_LIGHTMAP","type":"boolean","defines":[]},{"name":"CC_USE_FOG","type":"number","defines":[],"range":[0,4]},{"name":"CC_USE_ACCURATE_FOG","type":"boolean","defines":[]},{"name":"CC_RECEIVE_SHADOW","type":"boolean","defines":[]},{"name":"USE_VERTEX_COLOR","type":"boolean","defines":[]},{"name":"USE_NORMAL_MAP","type":"boolean","defines":[]},{"name":"HAS_SECOND_UV","type":"boolean","defines":[]},{"name":"CC_FORWARD_ADD","type":"boolean","defines":[]},{"name":"USE_TWOSIDE","type":"boolean","defines":[]},{"name":"SAMPLE_FROM_RT","type":"boolean","defines":[]},{"name":"CC_USE_IBL","type":"number","defines":[],"range":[0,2]},{"name":"CC_USE_DIFFUSEMAP","type":"number","defines":["CC_USE_IBL"],"range":[0,2]},{"name":"USE_REFLECTION_DENOISE","type":"boolean","defines":[]},{"name":"CC_USE_HDR","type":"boolean","defines":[]},{"name":"USE_ALBEDO_MAP","type":"boolean","defines":[]},{"name":"ALBEDO_UV","type":"string","defines":["USE_ALBEDO_MAP"],"options":["v_uv","v_uv1"]},{"name":"NORMAL_UV","type":"string","defines":["USE_NORMAL_MAP"],"options":["v_uv","v_uv1"]},{"name":"PBR_UV","type":"string","defines":[],"options":["v_uv","v_uv1"]},{"name":"USE_PBR_MAP","type":"boolean","defines":[]},{"name":"USE_METALLIC_ROUGHNESS_MAP","type":"boolean","defines":[]},{"name":"USE_OCCLUSION_MAP","type":"boolean","defines":[]},{"name":"USE_EMISSIVE_MAP","type":"boolean","defines":[]},{"name":"EMISSIVE_UV","type":"string","defines":["USE_EMISSIVE_MAP"],"options":["v_uv","v_uv1"]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"ALPHA_TEST_CHANNEL","type":"string","defines":["USE_ALPHA_TEST"],"options":["a","r"]},{"name":"CC_PIPELINE_TYPE","type":"number","defines":["CC_FORWARD_ADD"],"range":[0,1]},{"name":"CC_FORCE_FORWARD_SHADING","type":"boolean","defines":["CC_FORWARD_ADD"]}]},{"hash":210600745,"name":"builtin-standard|shadow-caster-vs:vert|shadow-caster-fs:frag","blocks":[{"name":"Constants","stageFlags":17,"binding":0,"members":[{"name":"tilingOffset","type":16,"count":1},{"name":"albedo","type":16,"count":1},{"name":"albedoScaleAndCutoff","type":16,"count":1},{"name":"pbrParams","type":16,"count":1},{"name":"emissive","type":16,"count":1},{"name":"emissiveScaleParam","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"albedoMap","type":28,"count":1,"stageFlags":16,"binding":1,"defines":["USE_ALBEDO_MAP"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_normal","format":32,"location":1,"defines":[]},{"name":"a_texCoord","format":21,"location":2,"defines":[]},{"name":"a_tangent","format":44,"location":3,"defines":[]},{"name":"a_vertexId","format":11,"location":6,"defines":["CC_USE_MORPH"]},{"name":"a_joints","location":4,"defines":["CC_USE_SKINNING"]},{"name":"a_weights","format":44,"location":5,"defines":["CC_USE_SKINNING"]},{"name":"a_jointAnimInfo","format":44,"isInstanced":true,"location":7,"defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION","USE_INSTANCING"]},{"name":"a_matWorld0","format":44,"isInstanced":true,"location":8,"defines":["USE_INSTANCING"]},{"name":"a_matWorld1","format":44,"isInstanced":true,"location":9,"defines":["USE_INSTANCING"]},{"name":"a_matWorld2","format":44,"isInstanced":true,"location":10,"defines":["USE_INSTANCING"]},{"name":"a_lightingMapUVParam","format":44,"isInstanced":true,"location":11,"defines":["USE_INSTANCING","USE_LIGHTMAP"]},{"name":"a_dyn_batch_id","format":11,"location":12,"defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"a_texCoord1","format":21,"location":13,"defines":[]}],"varyings":[{"name":"v_uv","type":14,"count":1,"stageFlags":17,"location":0,"defines":[]},{"name":"v_uv1","type":14,"count":1,"stageFlags":17,"location":1,"defines":[]},{"name":"v_worldPos","type":16,"count":1,"stageFlags":17,"location":2,"defines":[]},{"name":"v_clip_depth","type":13,"count":1,"stageFlags":17,"location":3,"defines":[]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"glsl4":{"vert":"#extension GL_EXT_shader_explicit_arithmetic_types_int32: require\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec3 a_normal;\nlayout(location = 2) in vec2 a_texCoord;\nlayout(location = 3) in vec4 a_tangent;\n#if CC_USE_MORPH\n    int getVertexId() {\n      return gl_VertexIndex;\n    }\n  layout(set = 2, binding = 4) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    layout(set = 2, binding = 7) uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    layout(set = 2, binding = 8) uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    layout(set = 2, binding = 9) uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n    layout(location = 4) in u32vec4 a_joints;\n  layout(location = 5) in vec4 a_weights;\n  #if CC_USE_BAKED_ANIMATION\n    #if USE_INSTANCING\n      layout(location = 7) in highp vec4 a_jointAnimInfo;\n    #endif\n    layout(set = 2, binding = 3) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(set = 2, binding = 2) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    layout(set = 2, binding = 6) uniform highp sampler2D cc_jointTexture;\n      #else\n    layout(set = 2, binding = 3) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout StandardVertInput attr) {\n    mat4 m = skinMatrix();\n    attr.position = m * attr.position;\n    attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n    attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n  }\n#endif\n#if USE_INSTANCING\n  layout(location = 8) in vec4 a_matWorld0;\n  layout(location = 9) in vec4 a_matWorld1;\n  layout(location = 10) in vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    layout(location = 11) in vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  layout(location = 12) in float a_dyn_batch_id;\n  layout(set = 2, binding = 0) uniform CCLocalBatched {\n    highp mat4 cc_matWorlds[10];\n  };\n#else\n  layout(set = 2, binding = 0) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n  };\n#endif\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\nlayout(set = 0, binding = 2) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\n#if HAS_SECOND_UV || USE_LIGHTMAP\n  layout(location = 13) in vec2 a_texCoord1;\n#endif\nlayout(location = 0) out vec2 v_uv;\nlayout(location = 1) out vec2 v_uv1;\nlayout(location = 2) out vec4 v_worldPos;\nlayout(location = 3) out float v_clip_depth;\nvec4 vert () {\n  StandardVertInput In;\n      In.position = vec4(a_position, 1.0);\n      In.normal = a_normal;\n      In.tangent = a_tangent;\n    #if CC_USE_MORPH\n      applyMorph(In);\n    #endif\n    #if CC_USE_SKINNING\n      CCSkin(In);\n    #endif\n  mat4 matWorld, matWorldIT;\n    #if USE_INSTANCING\n      matWorld = mat4(\n        vec4(a_matWorld0.xyz, 0.0),\n        vec4(a_matWorld1.xyz, 0.0),\n        vec4(a_matWorld2.xyz, 0.0),\n        vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n      );\n      matWorldIT = matWorld;\n    #elif USE_BATCHING\n      matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n      matWorldIT = matWorld;\n    #else\n      matWorld = cc_matWorld;\n      matWorldIT = cc_matWorldIT;\n    #endif\n  v_worldPos = matWorld * In.position;\n  vec4 clipPos = cc_matLightViewProj * v_worldPos;\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n  #endif\n  v_clip_depth = clipPos.z / clipPos.w * 0.5 + 0.5;\n  return clipPos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\nvec4 packDepthToRGBA (float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 16581375.0) * depth;\n  ret = fract(ret);\n  ret -= vec4(ret.yzw, 0.0) / 255.0;\n  return ret;\n}\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(set = 0, binding = 2) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\nfloat CCGetLinearDepthFromViewSpace(vec3 viewPos) {\n  float dist = length(viewPos);\n  return (dist - cc_shadowNFLSInfo.x) / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n  vec4 viewStartPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  return CCGetLinearDepthFromViewSpace(viewStartPos.xyz);\n}\n#if CC_RECEIVE_SHADOW\n  layout(set = 0, binding = 3) uniform highp sampler2D cc_shadowMap;\n  layout(set = 0, binding = 5) uniform highp sampler2D cc_spotLightingMap;\n#endif\nlayout(location = 0) in vec2 v_uv;\nlayout(location = 1) in vec2 v_uv1;\nlayout(location = 2) in vec4 v_worldPos;\nlayout(location = 3) in float v_clip_depth;\n#if USE_ALBEDO_MAP\n  layout(set = 1, binding = 1) uniform sampler2D albedoMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvec4 frag () {\n  vec4 baseColor = albedo;\n  #if USE_ALBEDO_MAP\n    baseColor *= texture(albedoMap, ALBEDO_UV);\n  #endif\n  #if USE_ALPHA_TEST\n    if (baseColor.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n  #endif\n  if(cc_shadowLPNNInfo.x > 0.000001 && cc_shadowLPNNInfo.x < 1.999999) {\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      return vec4(CCGetLinearDepth(v_worldPos.xyz), 1.0, 1.0, 1.0);\n    }\n  }\n  if (cc_shadowLPNNInfo.y > 0.000001) {\n    return packDepthToRGBA(v_clip_depth);\n  }\n  return vec4(v_clip_depth, 1.0, 1.0, 1.0);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl3":{"vert":"\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nin vec3 a_position;\nin vec3 a_normal;\nin vec2 a_texCoord;\nin vec4 a_tangent;\n#if CC_USE_MORPH\n    in float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n  layout(std140) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n    in vec4 a_joints;\n  in vec4 a_weights;\n  #if CC_USE_BAKED_ANIMATION\n    #if USE_INSTANCING\n      in highp vec4 a_jointAnimInfo;\n    #endif\n    layout(std140) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(std140) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    uniform highp sampler2D cc_jointTexture;\n      #else\n    layout(std140) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout StandardVertInput attr) {\n    mat4 m = skinMatrix();\n    attr.position = m * attr.position;\n    attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n    attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n  }\n#endif\n#if USE_INSTANCING\n  in vec4 a_matWorld0;\n  in vec4 a_matWorld1;\n  in vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    in vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  in float a_dyn_batch_id;\n  layout(std140) uniform CCLocalBatched {\n    highp mat4 cc_matWorlds[10];\n  };\n#else\n  layout(std140) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n  };\n#endif\nlayout(std140) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\n#if HAS_SECOND_UV || USE_LIGHTMAP\n  in vec2 a_texCoord1;\n#endif\nout vec2 v_uv;\nout vec2 v_uv1;\nout vec4 v_worldPos;\nout float v_clip_depth;\nvec4 vert () {\n  StandardVertInput In;\n      In.position = vec4(a_position, 1.0);\n      In.normal = a_normal;\n      In.tangent = a_tangent;\n    #if CC_USE_MORPH\n      applyMorph(In);\n    #endif\n    #if CC_USE_SKINNING\n      CCSkin(In);\n    #endif\n  mat4 matWorld, matWorldIT;\n    #if USE_INSTANCING\n      matWorld = mat4(\n        vec4(a_matWorld0.xyz, 0.0),\n        vec4(a_matWorld1.xyz, 0.0),\n        vec4(a_matWorld2.xyz, 0.0),\n        vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n      );\n      matWorldIT = matWorld;\n    #elif USE_BATCHING\n      matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n      matWorldIT = matWorld;\n    #else\n      matWorld = cc_matWorld;\n      matWorldIT = cc_matWorldIT;\n    #endif\n  v_worldPos = matWorld * In.position;\n  vec4 clipPos = cc_matLightViewProj * v_worldPos;\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n  #endif\n  v_clip_depth = clipPos.z / clipPos.w * 0.5 + 0.5;\n  return clipPos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nlayout(std140) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\nvec4 packDepthToRGBA (float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 16581375.0) * depth;\n  ret = fract(ret);\n  ret -= vec4(ret.yzw, 0.0) / 255.0;\n  return ret;\n}\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\nfloat CCGetLinearDepthFromViewSpace(vec3 viewPos) {\n  float dist = length(viewPos);\n  return (dist - cc_shadowNFLSInfo.x) / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n  vec4 viewStartPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  return CCGetLinearDepthFromViewSpace(viewStartPos.xyz);\n}\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotLightingMap;\n#endif\nin vec2 v_uv;\nin vec2 v_uv1;\nin vec4 v_worldPos;\nin float v_clip_depth;\n#if USE_ALBEDO_MAP\n  uniform sampler2D albedoMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvec4 frag () {\n  vec4 baseColor = albedo;\n  #if USE_ALBEDO_MAP\n    baseColor *= texture(albedoMap, ALBEDO_UV);\n  #endif\n  #if USE_ALPHA_TEST\n    if (baseColor.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n  #endif\n  if(cc_shadowLPNNInfo.x > 0.000001 && cc_shadowLPNNInfo.x < 1.999999) {\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      return vec4(CCGetLinearDepth(v_worldPos.xyz), 1.0, 1.0, 1.0);\n    }\n  }\n  if (cc_shadowLPNNInfo.y > 0.000001) {\n    return packDepthToRGBA(v_clip_depth);\n  }\n  return vec4(v_clip_depth, 1.0, 1.0, 1.0);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec2 a_texCoord;\nattribute vec4 a_tangent;\n#if CC_USE_MORPH\n    attribute float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n  uniform vec4 cc_displacementWeights[15];\n  uniform vec4 cc_displacementTextureInfo;\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n        int pixelIndex = elementIndex;\n        vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n        vec2 uv = getPixelCoordFromLocation(location, cc_displacementTextureInfo.xy);\n        return texture2D(tex, uv);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture2D(tex, x)),\n        decode32(texture2D(tex, y)),\n        decode32(texture2D(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n    attribute vec4 a_joints;\n  attribute vec4 a_weights;\n  #if CC_USE_BAKED_ANIMATION\n    #if USE_INSTANCING\n      attribute highp vec4 a_jointAnimInfo;\n    #endif\n    uniform highp vec4 cc_jointTextureInfo;\n    uniform highp vec4 cc_jointAnimInfo;\n    uniform highp sampler2D cc_jointTexture;\n      #else\n    uniform highp vec4 cc_joints[90];\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout StandardVertInput attr) {\n    mat4 m = skinMatrix();\n    attr.position = m * attr.position;\n    attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n    attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n  }\n#endif\n#if USE_INSTANCING\n  attribute vec4 a_matWorld0;\n  attribute vec4 a_matWorld1;\n  attribute vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    attribute vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  attribute float a_dyn_batch_id;\n  uniform highp mat4 cc_matWorlds[10];\n#else\n  uniform highp mat4 cc_matWorld;\n  uniform highp mat4 cc_matWorldIT;\n#endif\n      uniform vec4 tilingOffset;\nuniform highp mat4 cc_matLightViewProj;\n#if HAS_SECOND_UV || USE_LIGHTMAP\n  attribute vec2 a_texCoord1;\n#endif\nvarying vec2 v_uv;\nvarying vec2 v_uv1;\nvarying vec4 v_worldPos;\nvarying float v_clip_depth;\nvec4 vert () {\n  StandardVertInput In;\n      In.position = vec4(a_position, 1.0);\n      In.normal = a_normal;\n      In.tangent = a_tangent;\n    #if CC_USE_MORPH\n      applyMorph(In);\n    #endif\n    #if CC_USE_SKINNING\n      CCSkin(In);\n    #endif\n  mat4 matWorld, matWorldIT;\n    #if USE_INSTANCING\n      matWorld = mat4(\n        vec4(a_matWorld0.xyz, 0.0),\n        vec4(a_matWorld1.xyz, 0.0),\n        vec4(a_matWorld2.xyz, 0.0),\n        vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n      );\n      matWorldIT = matWorld;\n    #elif USE_BATCHING\n      matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n      matWorldIT = matWorld;\n    #else\n      matWorld = cc_matWorld;\n      matWorldIT = cc_matWorldIT;\n    #endif\n  v_worldPos = matWorld * In.position;\n  vec4 clipPos = cc_matLightViewProj * v_worldPos;\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n  #endif\n  v_clip_depth = clipPos.z / clipPos.w * 0.5 + 0.5;\n  return clipPos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\n   uniform vec4 albedo;\n   uniform vec4 albedoScaleAndCutoff;\nvec4 packDepthToRGBA (float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 16581375.0) * depth;\n  ret = fract(ret);\n  ret -= vec4(ret.yzw, 0.0) / 255.0;\n  return ret;\n}\nuniform highp mat4 cc_matLightView;\n  uniform mediump vec4 cc_shadowNFLSInfo;\n  uniform mediump vec4 cc_shadowLPNNInfo;\nfloat CCGetLinearDepthFromViewSpace(vec3 viewPos) {\n  float dist = length(viewPos);\n  return (dist - cc_shadowNFLSInfo.x) / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n  vec4 viewStartPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  return CCGetLinearDepthFromViewSpace(viewStartPos.xyz);\n}\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotLightingMap;\n#endif\nvarying vec2 v_uv;\nvarying vec2 v_uv1;\nvarying vec4 v_worldPos;\nvarying float v_clip_depth;\n#if USE_ALBEDO_MAP\n  uniform sampler2D albedoMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvec4 frag () {\n  vec4 baseColor = albedo;\n  #if USE_ALBEDO_MAP\n    baseColor *= texture2D(albedoMap, ALBEDO_UV);\n  #endif\n  #if USE_ALPHA_TEST\n    if (baseColor.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n  #endif\n  if(cc_shadowLPNNInfo.x > 0.000001 && cc_shadowLPNNInfo.x < 1.999999) {\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      return vec4(CCGetLinearDepth(v_worldPos.xyz), 1.0, 1.0, 1.0);\n    }\n  }\n  if (cc_shadowLPNNInfo.y > 0.000001) {\n    return packDepthToRGBA(v_clip_depth);\n  }\n  return vec4(v_clip_depth, 1.0, 1.0, 1.0);\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCShadow","defines":[]},{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[{"name":"cc_shadowMap","defines":["CC_RECEIVE_SHADOW"]},{"name":"cc_spotLightingMap","defines":["CC_RECEIVE_SHADOW"]}],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCMorph","defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION"]},{"name":"CCLocalBatched","defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"CCLocal","defines":["!USE_INSTANCING","!USE_BATCHING"]}],"samplerTextures":[{"name":"cc_PositionDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":183,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":65}},"defines":[{"name":"CC_USE_MORPH","type":"boolean","defines":[]},{"name":"CC_MORPH_TARGET_COUNT","type":"number","defines":["CC_USE_MORPH"],"range":[2,8]},{"name":"CC_MORPH_PRECOMPUTED","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_POSITION","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_NORMAL","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_TANGENT","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_USE_SKINNING","type":"boolean","defines":[]},{"name":"CC_USE_BAKED_ANIMATION","type":"boolean","defines":["CC_USE_SKINNING"]},{"name":"USE_INSTANCING","type":"boolean","defines":[],"editor":{"elevated":true}},{"name":"USE_BATCHING","type":"boolean","defines":["!USE_INSTANCING"],"editor":{"elevated":true}},{"name":"USE_LIGHTMAP","type":"boolean","defines":["USE_INSTANCING"]},{"name":"HAS_SECOND_UV","type":"boolean","defines":[]},{"name":"CC_RECEIVE_SHADOW","type":"boolean","defines":[]},{"name":"USE_ALBEDO_MAP","type":"boolean","defines":[]},{"name":"ALBEDO_UV","type":"string","defines":["USE_ALBEDO_MAP"],"options":["v_uv","v_uv1"]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"ALPHA_TEST_CHANNEL","type":"string","defines":["USE_ALPHA_TEST"],"options":["a","r"]}]}],[{"name":"opaque","passes":[{"program":"builtin-standard|standard-vs|standard-fs","properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"linear":true,"type":16,"value":[1,1,1,1],"editor":{"displayName":"Albedo","type":"color"},"handleInfo":["albedo",0,16]},"albedoScale":{"type":15,"value":[1,1,1],"handleInfo":["albedoScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST","slide":true,"step":0.001,"range":[0,1]},"handleInfo":["albedoScaleAndCutoff",3,13]},"occlusion":{"type":13,"value":[1],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",0,13]},"roughness":{"type":13,"value":[0.8],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",1,13]},"metallic":{"type":13,"value":[0.6],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",2,13]},"SpecularIntensity":{"type":13,"value":[0.5],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",3,13]},"emissive":{"linear":true,"type":16,"value":[0,0,0,1],"editor":{"type":"color"}},"emissiveScale":{"type":15,"value":[1,1,1],"handleInfo":["emissiveScaleParam",0,15]},"normalStrenth":{"type":13,"value":[1],"editor":{"parent":"USE_NORMAL_MAP","slide":true,"step":0.001,"range":[0,1]},"handleInfo":["emissiveScaleParam",3,13]},"mainTexture":{"value":"grey","type":28,"editor":{"displayName":"AlbedoMap"},"handleInfo":["albedoMap",0,28]},"normalMap":{"value":"normal","type":28},"pbrMap":{"value":"grey","type":28},"metallicRoughnessMap":{"value":"grey","type":28},"occlusionMap":{"value":"white","type":28},"emissiveMap":{"value":"grey","type":28},"albedo":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"albedoScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]},"pbrParams":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,0.8,0.6,0.5]},"emissiveScaleParam":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"albedoMap":{"type":28,"value":"grey","editor":{"visible":false,"deprecated":true}}}},{"phase":"forward-add","propertyIndex":0,"program":"builtin-standard|standard-vs|standard-fs","embeddedMacros":{"CC_FORWARD_ADD":true},"blendState":{"targets":[{"blend":true,"blendSrc":1,"blendDst":1,"blendSrcAlpha":0,"blendDstAlpha":1}]},"depthStencilState":{"depthFunc":2,"depthTest":true,"depthWrite":false}},{"phase":"shadow-caster","propertyIndex":0,"program":"builtin-standard|shadow-caster-vs:vert|shadow-caster-fs:frag","rasterizerState":{"cullMode":1},"properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"type":16,"value":[1,1,1,1],"editor":{"displayName":"Albedo","type":"color"},"handleInfo":["albedo",0,16]},"albedoScale":{"type":15,"value":[1,1,1],"handleInfo":["albedoScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST"},"handleInfo":["albedoScaleAndCutoff",3,13]},"mainTexture":{"value":"grey","type":28,"editor":{"displayName":"AlbedoMap"},"handleInfo":["albedoMap",0,28]},"albedo":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"albedoScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]},"albedoMap":{"type":28,"value":"grey","editor":{"visible":false,"deprecated":true}}}}]},{"name":"transparent","passes":[{"program":"builtin-standard|standard-vs|standard-fs","embeddedMacros":{"CC_FORCE_FORWARD_SHADING":true},"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendDstAlpha":4}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"linear":true,"type":16,"value":[1,1,1,1],"editor":{"displayName":"Albedo","type":"color"},"handleInfo":["albedo",0,16]},"albedoScale":{"type":15,"value":[1,1,1],"handleInfo":["albedoScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST","slide":true,"step":0.001,"range":[0,1]},"handleInfo":["albedoScaleAndCutoff",3,13]},"occlusion":{"type":13,"value":[1],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",0,13]},"roughness":{"type":13,"value":[0.8],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",1,13]},"metallic":{"type":13,"value":[0.6],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",2,13]},"SpecularIntensity":{"type":13,"value":[0.5],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",3,13]},"emissive":{"linear":true,"type":16,"value":[0,0,0,1],"editor":{"type":"color"}},"emissiveScale":{"type":15,"value":[1,1,1],"handleInfo":["emissiveScaleParam",0,15]},"normalStrenth":{"type":13,"value":[1],"editor":{"parent":"USE_NORMAL_MAP","slide":true,"step":0.001,"range":[0,1]},"handleInfo":["emissiveScaleParam",3,13]},"mainTexture":{"value":"grey","type":28,"editor":{"displayName":"AlbedoMap"},"handleInfo":["albedoMap",0,28]},"normalMap":{"value":"normal","type":28},"pbrMap":{"value":"grey","type":28},"metallicRoughnessMap":{"value":"grey","type":28},"occlusionMap":{"value":"white","type":28},"emissiveMap":{"value":"grey","type":28},"albedo":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"albedoScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]},"pbrParams":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,0.8,0.6,0.5]},"emissiveScaleParam":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"albedoMap":{"type":28,"value":"grey","editor":{"visible":false,"deprecated":true}}}},{"phase":"forward-add","propertyIndex":0,"program":"builtin-standard|standard-vs|standard-fs","embeddedMacros":{"CC_FORWARD_ADD":true},"blendState":{"targets":[{"blend":true,"blendSrc":1,"blendDst":1,"blendSrcAlpha":0,"blendDstAlpha":1}]},"depthStencilState":{"depthFunc":2,"depthTest":true,"depthWrite":false}},{"phase":"shadow-caster","propertyIndex":0,"program":"builtin-standard|shadow-caster-vs:vert|shadow-caster-fs:frag","rasterizerState":{"cullMode":1},"properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"type":16,"value":[1,1,1,1],"editor":{"displayName":"Albedo","type":"color"},"handleInfo":["albedo",0,16]},"albedoScale":{"type":15,"value":[1,1,1],"handleInfo":["albedoScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST"},"handleInfo":["albedoScaleAndCutoff",3,13]},"mainTexture":{"value":"grey","type":28,"editor":{"displayName":"AlbedoMap"},"handleInfo":["albedoMap",0,28]},"albedo":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"albedoScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]},"albedoMap":{"type":28,"value":"grey","editor":{"visible":false,"deprecated":true}}}}]}]]],0,0,[],[],[]],[[[65,"electric_sfx",".mp3",1.56],-1],0,0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[1],0,[],[],[]],[[{"base":"2,2,0,0,0,0","mipmaps":["214ncfEupO/ZqevD3MdL4v"]}],[2],0,[],[],[]],[[[31,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{}],[{"USE_LIGHTMAP":true,"USE_ALBEDO_MAP":true,"NORMAL_UV":"v_uv1"},{},{}],[[[{"normalStrenth":0.063},"mainTexture",6,0,"normalMap",6,1,"pbrMap",6,2],{},{}],11,0,0]]],0,0,[0,0,0,0],[4,23,24,3],[17,17,17,2]],[[[31,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{}],[{"USE_LIGHTMAP":true},{},{}],[[[{},"mainColor",8,[4,4294957690]],{},{}],11,0,0]]],0,0,[0],[3],[2]],[[{"fmt":"0","w":0,"h":0},-1],[1],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["2aXH9TKYJA2rjYSsF90buD"]}],[2],0,[],[],[]],[[{"name":"joy","rect":{"x":0,"y":0,"width":143,"height":143},"offset":{"x":0,"y":0},"originalSize":{"width":143,"height":143},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[3],0,[0],[9],[93]],[[[65,"bg-MusicMenu",".mp3",6.336],-1],0,0,[],[],[]],[[[82],[89,"Plant_03",[-2],[6,"979k7HCjtdTLyKwDgx/GX2",-1,0]],[90,"Plant_03",1,[[93,-3,[56,"9628QWGXldzot0isW7KTrl"],[0],[1],1]],[6,"f3f6n5gDhW0pKhoUqgiMqx",1,0]]],0,[0,10,1,0,-1,2,0,0,2,0,16,1,3],[0,0],[-1,1],[94,95]],[[[10,".bin",3951917388,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":30720,"length":8976,"count":2244,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":30720,"count":640,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.006071255076676607,-1.19209286886246e-9,-0.00747106084600091],"maxPosition",8,[1,0.006655471865087748,0.025992613285779953,0.006760803516954184]]],-1],0,0,[],[],[]],[[[10,".bin",1765631370,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":12480,"length":1920,"count":480,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":12480,"count":260,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.0016748126363381743,-0.007465453818440437,-0.0030989127699285746],"maxPosition",8,[1,0.019027747213840485,0.007291050627827644,0.0016704918816685677]]],-1],0,0,[],[],[]],[[[10,".bin",917030569,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":12480,"length":1920,"count":480,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":12480,"count":260,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.019027747213840485,-0.007465453818440437,-0.003098907880485058],"maxPosition",8,[1,0.0016748126363381743,0.007291050627827644,0.0016704918816685677]]],-1],0,0,[],[],[]],[[[57,"1",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{}],[{"USE_LIGHTMAP":true,"USE_ALBEDO_MAP":true},{},{}],[[[{},"mainColor",8,[4,3959422975],"mainTexture",6,0],{},{}],11,0,0]]],0,0,[0,0],[4,3],[96,2]],[[[31,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{}],[{"USE_LIGHTMAP":true},{},{}],[[[{},"mainColor",8,[4,4294940928]],{},{}],11,0,0]]],0,0,[0],[3],[2]],[[[57,"0",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{}],[{"USE_LIGHTMAP":true,"USE_ALBEDO_MAP":true},{},{}],[[[{"occlusion":0,"roughness":0,"metallic":0,"SpecularIntensity":0},"mainColor",8,[4,4278234623],"mainTexture",6,0],{},{}],11,0,0]]],0,0,[0,0],[4,3],[13,2]],[[[130,"Walk Break"],[148,"Walk Break",[-3,-4],[-2],[6,"f6h5JTA61Krp7fpJXxRpdl",-1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,90,0,0]],[144,"Sparkle",1,[-5],[6,"ec12r82KpHmrFyR4IuXAYD",1,0]],[156,1,false,false,0,2,[56,"d6dNQQc1JJ872kZBLdCYV/"],[0],[157,[4,2181038079]],[17,3,0.5,2],[0],[0],[2,5],[0],[0],[158,3,4.71238898038469],[0],[17,3,0.2,0.8],[2,0.2],[0],[0],[[24,[2,10]]],[25,true,[23,1,[34,[[45],[20,0.10044642857142858,[4,4284012543]],[20,0.2700892857142857,[4,4280130815]],[20,1,[4,4278190335]]]]]],[160,true,3,0.01,[2,1]],[35,[19,1,[21,[0,0.2846153846153846,0.49230769230769234,0.6846153846153846,1],[[119,2,6.066666666666666,6.066666666666666],[53,2,0.9925925925925926],[53,2,0.5148148148148148],[53,2,0.9962962962962965],[119,2,-5.149758454106279,-5.149758454106279]]]],[0],[0],[0]],[26,[0],[0],[0],[2,1]],[27,[0],[0],[0]],[69,true,0.01,[0],[0],[0],[2,10]],[28,[0],[0],[159,3,-0.7853981633974483,0.7853981633974483,180]],[163,true,2,2,[19,1,[21,[0,1],[[53,2,1],[53,2,1]]]],[2,3]],[29,[2,1],[0],[9],[9],-6],[164,1,0,1]],[145,"Ring",1,[-7],[6,"f2sDa1qWtF56f7v5izDlLP",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[115,1,false,false,4,[56,"d8s2smx0BGKZuCh9SYwYNL"],[2],[9],[2,1],[0],[0],[2,0.01],[0],[0],[0],[0],[2,0.5],[0],[0],[0],[[24,[2,1]]],[25,true,[23,1,[116,[[68,[4,4278203391]],[95,0.9888392857142857]],[[121,255],[96,0,0.9955357142857143]]]]],[117,0,[2,1]],[118,true,[19,1,[21,[0,1],[[161,2,3,2.6376811594202896,0.49907870413964467,2.6376811594202896,1],[162,2,3,1,1,0.4714045207910316]]]],[0],[0],[0]],[26,[0],[0],[0],[2,1]],[27,[0],[0],[0]],[41,[0],[0],[0],[0]],[28,[0],[0],[0]],[120,[19,1,[21,[0,1],[[53,2,1],[53,2,1]]]],[0]],[29,[2,1],[0],[9],[9],-8],[42,3]],[115,1,false,false,1,[56,"b2Z3tunMxD543DLFEf8MY1"],[4],[9],[17,3,1.5,2.3],[0],[0],[0],[0],[0],[77,3,4.71238898038469],[0],[2,0.12],[0],[0],[0],[[24,[2,1]]],[25,true,[23,1,[116,[[95,0.002232142857142857],[20,0.5200892857142857,[4,4280596991]],[20,0.9977678571428571,[4,4278216447]]],[[121,255],[96,255,0.9977678571428571]]]]],[117,0,[2,1]],[118,true,[19,1,[21,[0,1],[[36,1,1,1,1],[37,1,1,1,1,1]]]],[0],[0],[0]],[26,[0],[0],[0],[2,1]],[27,[0],[0],[0]],[41,[0],[0],[0],[0]],[28,[0],[0],[0]],[120,[19,1,[21,[0,1],[[53,2,1],[53,2,1]]]],[0]],[29,[2,1],[0],[9],[9],-9],[42,5]]],0,[0,10,1,0,-1,6,0,-1,2,0,-2,4,0,-1,3,0,5,3,0,-1,5,0,5,5,0,5,6,0,16,1,9],[0,0,0,0,0,0],[-1,6,-1,6,-1,6],[24,18,97,25,26,19]],[[{"fmt":"0","w":0,"h":0},-1],[1],0,[],[],[]],[[[10,".bin",3557673830,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":130512,"length":23172,"count":5793,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":130512,"count":2719,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.003197639249265194,-0.00005396946653490886,-0.003193923505023122],"maxPosition",8,[1,0.005336482543498278,0.019998442381620407,0.005217656027525663]]],-1],0,0,[],[],[]],[[[31,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{}],[{"USE_LIGHTMAP":true,"HAS_SECOND_UV":true,"USE_ALBEDO_MAP":true},{},{}],[[[{"metallic":0.4000000059604645},"mainTexture",6,0],{},{}],11,0,0]]],0,0,[0,0],[4,3],[13,2]],[[[31,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[4,3],[18,9]],[[[31,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[4,3],[19,9]],[[{"fmt":"0","w":0,"h":0},-1],[1],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["41czDe+hJIArQqaw4XZ+L6"]}],[2],0,[],[],[]],[[{"name":"tut_hand","rect":{"x":2,"y":2,"width":108,"height":134},"offset":{"x":0,"y":0},"originalSize":{"width":112,"height":138},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[3],0,[0],[9],[98]],[[[57,"1",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{}],[{"USE_INSTANCING":true,"USE_LIGHTMAP":true},{},{}],[[[{},"mainColor",8,[4,3372208186],"mainTexture",6,0],{},{}],11,0,0]]],0,0,[0,0],[4,3],[99,2]],[[[31,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{}],[{"USE_LIGHTMAP":true,"USE_ALBEDO_MAP":true},{},{}],[[[{},"mainTexture",6,0],{},{}],11,0,0]]],0,0,[0,0],[4,3],[100,2]],[[[10,".bin",187543112,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":7008,"length":1680,"count":420,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":7008,"count":146,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.004699284676462412,0.0015650882851332426,-0.004699224140495062],"maxPosition",8,[1,0.004699284676462412,0.004009468946605921,0.004699224140495062]]],-1],0,0,[],[],[]],[[[10,".bin",199009772,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":6768,"length":1680,"count":420,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":6768,"count":141,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.005977137014269829,-9.73795377667841e-10,-0.00597704341635108],"maxPosition",8,[1,0.005977113265544176,0.0024210817646235228,0.005977053195238113]]],-1],0,0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[1],0,[],[],[]],[[{"base":"2,2,0,0,0,0","mipmaps":["4cvCa1mgxPlLhFCZMoZz6x"]}],[2],0,[],[],[]],[[[57,"1",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{}],[{"USE_LIGHTMAP":true},{},{}],[[[{},"mainColor",8,[4,4278190335]],{},{}],11,0,0]]],0,0,[0],[3],[2]],[[[10,".bin",2254166265,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":4608,"length":1008,"count":252,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":4608,"count":96,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.0008237636648118496,-0.006162404548376799,-0.014634717255830765],"maxPosition",8,[1,0.0008237636648118496,0.006162403151392937,0.014634717255830765]]],-1],0,0,[],[],[]],[[[10,".bin",2975573567,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":35280,"length":7920,"count":1980,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":35280,"count":735,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.007146873511373997,-1.225123752446322e-10,-0.0007057737093418837],"maxPosition",8,[1,0.002633505268022418,0.01577996276319027,0.001747388974763453]]],-1],0,0,[],[],[]],[[[10,".bin",2912657917,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":35280,"length":7920,"count":1980,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":35280,"count":735,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.007146873511373997,-1.225123752446322e-10,-0.0017473874613642693],"maxPosition",8,[1,0.002633505268022418,0.01577996276319027,0.0007057737675495446]]],-1],0,0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[1],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["50LQlrSVNMD70mm+01Hc0E"]}],[2],0,[],[],[]],[[{"name":"hand","rect":{"x":0,"y":0,"width":205,"height":168},"offset":{"x":0,"y":0},"originalSize":{"width":205,"height":168},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[3],0,[0],[9],[101]],[[{"fmt":"0","w":0,"h":0},-1],[1],0,[],[],[]],[[{"base":"2,2,0,0,0,0","mipmaps":["52vf0vl2VCIIG7oj5WyUi9"]}],[2],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[1],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["57rS2YgBpNR5gz+M0RLUqx"]}],[2],0,[],[],[]],[[{"name":"Logo","rect":{"x":0,"y":0,"width":734,"height":391},"offset":{"x":0,"y":0},"originalSize":{"width":734,"height":391},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[3],0,[0],[9],[102]],[[{"fmt":"0","w":0,"h":0},-1],[1],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["5aYelt7SZIzat2vnJTRi7a"]}],[2],0,[],[],[]],[[{"name":"text_dragtomove","rect":{"x":1,"y":2,"width":438,"height":56},"offset":{"x":0,"y":0},"originalSize":{"width":440,"height":60},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[3],0,[0],[9],[103]],[[[10,".bin",96470146,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":19264,"length":2496,"count":624,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":19264,"count":344,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.007814688608050346,-0.007526932284235954,-0.0010816886788234115],"maxPosition",8,[1,0,0.007286946754902601,0.0011317601893097162]]],-1],0,0,[],[],[]],[[[10,".bin",212083226,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":19264,"length":2496,"count":624,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":19264,"count":344,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,0,-0.007526932284235954,-0.0010816886788234115],"maxPosition",8,[1,0.007814688608050346,0.007286946754902601,0.0011317601893097162]]],-1],0,0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[1],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["5dbVvn+olAg4I5LaULAS+p"]}],[2],0,[],[],[]],[[{"name":"text_gradient","rect":{"x":0,"y":0,"width":16,"height":478},"offset":{"x":0,"y":0},"originalSize":{"width":16,"height":478},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[3],0,[0],[9],[104]],[[{"fmt":"0","w":0,"h":0},-1],[1],0,[],[],[]],[[{"base":"2,2,0,0,0,0","mipmaps":["62BflQnDlPi4iyJvQocT+3"]}],[2],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[1],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["65SurAC7ZOsqQNrThONHXU"]}],[2],0,[],[],[]],[[{"name":"notie (2)","rect":{"x":3,"y":3,"width":346,"height":467},"offset":{"x":0,"y":0},"originalSize":{"width":352,"height":473},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[3],0,[0],[9],[105]],[[[10,".bin",1983878921,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":249760,"length":25728,"count":6432,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":249760,"count":4460,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.0034827557392418385,-1.7630813475832952e-9,-0.0033954354003071785],"maxPosition",8,[1,0.0034827557392418385,0.0037849312648177147,0.003395435865968466]]],-1],0,0,[],[],[]],[[[31,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{}],[{"USE_ALBEDO_MAP":true},{},{}],[[[{"roughness":0.30151134729385376,"metallic":0.4000000059604645},"mainTexture",6,0],{},{}],11,0,0]]],0,0,[0,0],[4,3],[13,2]],[[[31,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{}],[{"HAS_SECOND_UV":true},{},{}],[[[{"roughness":0.617,"metallic":0.4000000059604645},"mainColor",8,[4,4292530541]],{},{}],11,0,0]]],0,0,[0],[3],[2]],[[{"base":"2,2,0,0,2,0","rgbe":false,"mipmaps":[{"front":"6f01cf7f-81bf-4a7e-bd5d-0afc19696480@b47c0@e9a6d","back":"6f01cf7f-81bf-4a7e-bd5d-0afc19696480@b47c0@40c10","left":"6f01cf7f-81bf-4a7e-bd5d-0afc19696480@b47c0@8fd34","right":"6f01cf7f-81bf-4a7e-bd5d-0afc19696480@b47c0@74afd","top":"6f01cf7f-81bf-4a7e-bd5d-0afc19696480@b47c0@bb97f","bottom":"6f01cf7f-81bf-4a7e-bd5d-0afc19696480@b47c0@7d38f"}]}],[23],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[1],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[1],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[1],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[1],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[1],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[1],0,[],[],[]],[[[65,"sfx-Win",".mp3",2.088],-1],0,0,[],[],[]],[[[65,"sfx-CollectItem",".mp3",0.792],-1],0,0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[1],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["7dj5uJT9FMn6OrOOx83tfK"]}],[2],0,[],[],[]],[[{"name":"default_sprite_splash","rect":{"x":0,"y":0,"width":2,"height":2},"offset":{"x":0,"y":0},"originalSize":{"width":2,"height":2},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[3],0,[0],[9],[106]],[[[94,"Enviroment1",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true}],[[[{"metallic":0.4000000059604645,"roughness":0.30151134729385376},"mainTexture",6,0]],11]]],0,0,[0,0],[4,3],[107,2]],[[{"fmt":"0","w":0,"h":0},-1],[1],0,[],[],[]],[[{"base":"2,2,0,0,0,0","mipmaps":["81Xulflq5JgafTcVZul88U@48b02"]}],[2],0,[],[],[]],[[[10,".bin",421978446,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":70560,"length":12732,"count":3183,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":70560,"count":1470,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.007551106158643961,-1.1798646504246335e-9,-0.0036420279648154974],"maxPosition",8,[1,0.00742979533970356,0.016202783212065697,0.0036675964947789907]]],-1],0,0,[],[],[]],[[[82],[89,"livingroom_tv",[-2],[6,"d73kkFTbpYrKPfopvD8lvZ",-1,0]],[133,"nordic_tv",1,[[93,-3,[56,"7bmiDjvI1TFaz/LbY1vImK"],[0],[1],1]],[6,"50B/LZjQNULLdcgQzSu7cL",1,0],[1,0.001781553728505969,0.0007205585134215653,0.00004407183587318286]]],0,[0,10,1,0,-1,2,0,0,2,0,16,1,3],[0,0],[-1,1],[108,109]],[[[31,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[4,3],[25,9]],[[[10,".bin",847924299,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":4608,"length":528,"count":132,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":4608,"count":96,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.0024998162407428026,-0.002499816007912159,-0.002499816007912159],"maxPosition",8,[1,0.0024998162407428026,0.002499816007912159,0.002499816007912159]]],-1],0,0,[],[],[]],[[[10,".bin",3629589560,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":4608,"length":528,"count":132,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":4608,"count":96,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.002499816007912159,-0.0024998162407428026,-0.002499816007912159],"maxPosition",8,[1,0.002499816007912159,0.0024998157750815153,0.002499816007912159]]],-1],0,0,[],[],[]],[[[10,".bin",1623857048,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":4608,"length":528,"count":132,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":4608,"count":96,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.0024998157750815153,-0.0024998162407428026,-0.002499816007912159],"maxPosition",8,[1,0.0024998157750815153,0.0024998157750815153,0.002499816007912159]]],-1],0,0,[],[],[]],[[[10,".bin",2661431015,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":4608,"length":528,"count":132,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":4608,"count":96,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.0024998169392347336,-0.002499816007912159,-0.002499816007912159],"maxPosition",8,[1,0.002499815309420228,0.002499816007912159,0.002499816007912159]]],-1],0,0,[],[],[]],[[[10,".bin",66674010,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":4608,"length":528,"count":132,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":4608,"count":96,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.002499816007912159,-0.0024998157750815153,-0.002499816007912159],"maxPosition",8,[1,0.002499816007912159,0.0024998162407428026,0.002499816007912159]]],-1],0,0,[],[],[]],[[[10,".bin",1264274950,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":4608,"length":528,"count":132,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":4608,"count":96,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.002499816007912159,-0.002499816007912159,-0.002499816007912159],"maxPosition",8,[1,0.002499816007912159,0.002499816007912159,0.002499816007912159]]],-1],0,0,[],[],[]],[[[10,".bin",3031773104,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":4608,"length":528,"count":132,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":4608,"count":96,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.0024998162407428026,-0.0024998162407428026,-0.002499816007912159],"maxPosition",8,[1,0.0024998162407428026,0.0024998157750815153,0.002499816007912159]]],-1],0,0,[],[],[]],[[[10,".bin",3031773104,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":4608,"length":528,"count":132,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":4608,"count":96,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.0024998162407428026,-0.0024998162407428026,-0.002499816007912159],"maxPosition",8,[1,0.0024998162407428026,0.0024998157750815153,0.002499816007912159]]],-1],0,0,[],[],[]],[[[10,".bin",1637630638,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":4608,"length":528,"count":132,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":4608,"count":96,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.0024998157750815153,-0.0024998157750815153,-0.002499816007912159],"maxPosition",8,[1,0.0024998157750815153,0.0024998162407428026,0.002499816007912159]]],-1],0,0,[],[],[]],[[[10,".bin",4119393415,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":4608,"length":528,"count":132,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":4608,"count":96,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.002499816007912159,-0.0024998162407428026,-0.002499816007912159],"maxPosition",8,[1,0.002499816007912159,0.0024998157750815153,0.002499816007912159]]],-1],0,0,[],[],[]],[[[10,".bin",66674010,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":4608,"length":528,"count":132,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":4608,"count":96,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.002499816007912159,-0.0024998157750815153,-0.002499816007912159],"maxPosition",8,[1,0.002499816007912159,0.0024998162407428026,0.002499816007912159]]],-1],0,0,[],[],[]],[[[10,".bin",847924299,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":4608,"length":528,"count":132,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":4608,"count":96,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.0024998162407428026,-0.002499816007912159,-0.002499816007912159],"maxPosition",8,[1,0.0024998162407428026,0.002499816007912159,0.002499816007912159]]],-1],0,0,[],[],[]],[[[10,".bin",3192444665,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":4608,"length":528,"count":132,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":4608,"count":96,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.002499816007912159,-0.002499816007912159,-0.002499816007912159],"maxPosition",8,[1,0.002499816007912159,0.002499816007912159,0.002499816007912159]]],-1],0,0,[],[],[]],[[[10,".bin",66674010,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":4608,"length":528,"count":132,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":4608,"count":96,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.002499816007912159,-0.0024998157750815153,-0.002499816007912159],"maxPosition",8,[1,0.002499816007912159,0.0024998162407428026,0.002499816007912159]]],-1],0,0,[],[],[]],[[[10,".bin",4119393415,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":4608,"length":528,"count":132,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":4608,"count":96,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.002499816007912159,-0.0024998162407428026,-0.002499816007912159],"maxPosition",8,[1,0.002499816007912159,0.0024998157750815153,0.002499816007912159]]],-1],0,0,[],[],[]],[[[10,".bin",3294857006,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":4608,"length":528,"count":132,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":4608,"count":96,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.0024998162407428026,-0.0024998157750815153,-0.002499816007912159],"maxPosition",8,[1,0.0024998162407428026,0.0024998162407428026,0.002499816007912159]]],-1],0,0,[],[],[]],[[[10,".bin",215310685,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":4608,"length":528,"count":132,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":4608,"count":96,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.002499816007912159,-0.002499816007912159,-0.002499816007912159],"maxPosition",8,[1,0.002499816007912159,0.002499816007912159,0.002499816007912159]]],-1],0,0,[],[],[]],[[[10,".bin",2529725536,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":4608,"length":528,"count":132,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":4608,"count":96,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.0024998157750815153,-0.002499816007912159,-0.002499816007912159],"maxPosition",8,[1,0.0024998157750815153,0.002499816007912159,0.002499816007912159]]],-1],0,0,[],[],[]],[[[10,".bin",4119393415,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":4608,"length":528,"count":132,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":4608,"count":96,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.002499816007912159,-0.0024998162407428026,-0.002499816007912159],"maxPosition",8,[1,0.002499816007912159,0.0024998157750815153,0.002499816007912159]]],-1],0,0,[],[],[]],[[[10,".bin",3119301634,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":4608,"length":528,"count":132,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":4608,"count":96,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.0024998169392347336,-0.0024998157750815153,-0.002499816007912159],"maxPosition",8,[1,0.002499815309420228,0.0024998162407428026,0.002499816007912159]]],-1],0,0,[],[],[]],[[[10,".bin",3192444665,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":4608,"length":528,"count":132,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":4608,"count":96,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.002499816007912159,-0.002499816007912159,-0.002499816007912159],"maxPosition",8,[1,0.002499816007912159,0.002499816007912159,0.002499816007912159]]],-1],0,0,[],[],[]],[[[10,".bin",816707279,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":4608,"length":528,"count":132,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":4608,"count":96,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.0024998169392347336,-0.0024998162407428026,-0.002499816007912159],"maxPosition",8,[1,0.002499815309420228,0.0024998157750815153,0.002499816007912159]]],-1],0,0,[],[],[]],[[[10,".bin",3294857006,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":4608,"length":528,"count":132,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":4608,"count":96,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.0024998162407428026,-0.0024998157750815153,-0.002499816007912159],"maxPosition",8,[1,0.0024998162407428026,0.0024998162407428026,0.002499816007912159]]],-1],0,0,[],[],[]],[[[10,".bin",1255485749,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":4608,"length":528,"count":132,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":4608,"count":96,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.002499816007912159,-0.0024998157750815153,-0.002499816007912159],"maxPosition",8,[1,0.002499816007912159,0.0024998162407428026,0.002499816007912159]]],-1],0,0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[1],0,[],[],[]],[[{"base":"2,2,0,0,0,0","mipmaps":["8fzCJGh7xEKrfC7z4lTGoe"]}],[2],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[1],0,[],[],[]],[[{"base":"2,2,0,0,0,0","mipmaps":["96ISdYN/pKSK1CQW/sEPvF"]}],[2],0,[],[],[]],[[[57,"1",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{}],[{"USE_LIGHTMAP":true,"USE_ALBEDO_MAP":true},{},{}],[[[{},"mainTexture",6,0],{},{}],11,0,0]]],0,0,[0,0],[4,3],[110,2]],[[[31,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{}],[{"USE_ALBEDO_MAP":true},{},{}],[[[{"roughness":0.30151134729385376,"metallic":0.4000000059604645},"mainTexture",6,0],{},{}],11,0,0]]],0,0,[0,0],[4,3],[111,2]],[[[10,".bin",923119503,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":25200,"length":10476,"count":2619,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":25200,"count":525,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.008112297393381596,-0.0000025160081804642687,-0.008118667639791965],"maxPosition",8,[1,0.008211755193769932,0.00033962499583140016,0.008173173293471336]]],-1],0,0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[1],0,[],[],[]],[[{"base":"2,2,0,0,0,0","mipmaps":["a6lHJKIjBAeL6LSfAe6SlX"]}],[2],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[1],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["a7LBYTKOZBco+3QwPThJd0"]}],[2],0,[],[],[]],[[{"name":"Update","rect":{"x":0,"y":0,"width":84,"height":35},"offset":{"x":0,"y":0},"originalSize":{"width":84,"height":35},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[3],0,[0],[9],[112]],[[[57,"1",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{}],[{"USE_LIGHTMAP":true,"USE_ALBEDO_MAP":true},{},{}],[[[{},"mainColor",8,[4,4278255605],"mainTexture",6,0],{},{}],11,0,0]]],0,0,[0,0],[4,3],[113,2]],[[{"fmt":"0","w":0,"h":0},-1],[1],0,[],[],[]],[[{"base":"2,2,0,0,0,0","mipmaps":["adFj3JcEZNabOAtAOTI+9s"]}],[2],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[1],0,[],[],[]],[[{"base":"2,2,0,0,0,0","mipmaps":["b2MxkzZKxHeq7NsiMjm/Lr"]}],[2],0,[],[],[]],[[{"fmt":"1","w":0,"h":0},-1],[1],0,[],[],[]],[[{"base":"2,2,0,0,0,0","mipmaps":["b7wS4ssk9NqbyI19bmAGNP"]}],[2],0,[],[],[]],[[[65,"electric2_sfx",".mp3",0.485333],-1],0,0,[],[],[]],[[[31,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{}],[{"USE_ALBEDO_MAP":true},{},{}],[[[{"roughness":0.30151134729385376,"metallic":0.4000000059604645},"mainTexture",6,0],{},{}],11,0,0]]],0,0,[0,0],[4,3],[114,2]],[[{"fmt":"0","w":0,"h":0},-1],[1],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["bdlD1yPolAV6FO+5ND3N7x"]}],[2],0,[],[],[]],[[{"name":"Download","rect":{"x":0,"y":0,"width":373,"height":167},"offset":{"x":0,"y":0},"originalSize":{"width":373,"height":167},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[3],0,[0],[9],[115]],[[{"fmt":"0","w":0,"h":0},-1],[1],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["c4vasun1xPlKO1bbtzMFZ9"]}],[2],0,[],[],[]],[[{"name":"icon_legacy","rect":{"x":0,"y":0,"width":192,"height":192},"offset":{"x":0,"y":0},"originalSize":{"width":192,"height":192},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[3],0,[0],[9],[116]],[[{"fmt":"0","w":0,"h":0},-1],[1],0,[],[],[]],[[{"base":"2,2,0,0,0,0","mipmaps":["c6q4qImG9J8qs7j3XMkTZj"]}],[2],0,[],[],[]],[[[57,"1",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{}],[{"USE_LIGHTMAP":true},{},{}],[[[{},"mainColor",8,[4,4287233800]],{},{}],11,0,0]]],0,0,[0],[3],[2]],[[{"base":"2,2,0,0,2,0","rgbe":true,"mipmaps":[{"front":"d032ac98-05e1-4090-88bb-eb640dcb5fc1@b47c0@e9a6d","back":"d032ac98-05e1-4090-88bb-eb640dcb5fc1@b47c0@40c10","left":"d032ac98-05e1-4090-88bb-eb640dcb5fc1@b47c0@8fd34","right":"d032ac98-05e1-4090-88bb-eb640dcb5fc1@b47c0@74afd","top":"d032ac98-05e1-4090-88bb-eb640dcb5fc1@b47c0@bb97f","bottom":"d032ac98-05e1-4090-88bb-eb640dcb5fc1@b47c0@7d38f"}]}],[23],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[1],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[1],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[1],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[1],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[1],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[1],0,[],[],[]],[[[114,"builtin-particle",[{"hash":2554907268,"name":"builtin-particle|particle-vs-legacy:lpvs_main|tinted-fs:add","blocks":[{"name":"Constants","stageFlags":1,"binding":0,"members":[{"name":"mainTiling_Offset","type":16,"count":1},{"name":"frameTile_velLenScale","type":16,"count":1},{"name":"scale","type":16,"count":1},{"name":"nodeRotation","type":16,"count":1}],"defines":[]},{"name":"FragConstants","stageFlags":16,"binding":1,"members":[{"name":"tintColor","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"mainTexture","type":28,"count":1,"stageFlags":16,"binding":2,"defines":[]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_texCoord","format":32,"location":1,"defines":[]},{"name":"a_texCoord1","format":32,"location":2,"defines":[]},{"name":"a_texCoord2","format":32,"location":3,"defines":[]},{"name":"a_color","format":44,"location":4,"defines":[]},{"name":"a_color1","format":32,"location":8,"defines":["CC_RENDER_MODE"]},{"name":"a_texCoord3","format":32,"location":6,"defines":["CC_RENDER_MODE"]},{"name":"a_normal","format":32,"location":7,"defines":["CC_RENDER_MODE"]}],"varyings":[{"name":"uv","type":14,"count":1,"stageFlags":17,"location":0,"defines":[]},{"name":"color","type":16,"count":1,"stageFlags":17,"location":1,"defines":[]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"glsl4":{"vert":"\nprecision highp float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\n  mat3 m = mat3(xAxis,yAxis,zAxis);\n  float trace = m[0][0] + m[1][1] + m[2][2];\n  vec4 quat;\n  if (trace > 0.) {\n    float s = 0.5 / sqrt(trace + 1.0);\n    quat.w = 0.25 / s;\n    quat.x = (m[2][1] - m[1][2]) * s;\n    quat.y = (m[0][2] - m[2][0]) * s;\n    quat.z = (m[1][0] - m[0][1]) * s;\n  } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n    float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n    quat.w = (m[2][1] - m[1][2]) / s;\n    quat.x = 0.25 * s;\n    quat.y = (m[0][1] + m[1][0]) / s;\n    quat.z = (m[0][2] + m[2][0]) / s;\n  } else if (m[1][1] > m[2][2]) {\n    float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n    quat.w = (m[0][2] - m[2][0]) / s;\n    quat.x = (m[0][1] + m[1][0]) / s;\n    quat.y = 0.25 * s;\n    quat.z = (m[1][2] + m[2][1]) / s;\n  } else {\n    float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n    quat.w = (m[1][0] - m[0][1]) / s;\n    quat.x = (m[0][2] + m[2][0]) / s;\n    quat.y = (m[1][2] + m[2][1]) / s;\n    quat.z = 0.25 * s;\n  }\n  float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n  if (len > 0.) {\n    len = 1. / sqrt(len);\n    quat.x = quat.x * len;\n    quat.y = quat.y * len;\n    quat.z = quat.z * len;\n    quat.w = quat.w * len;\n  }\n  return quat;\n}\nvec4 quaternionFromEuler (vec3 angle){\n  float x = angle.x / 2.;\n  float y = angle.y / 2.;\n  float z = angle.z / 2.;\n  float sx = sin(x);\n  float cx = cos(x);\n  float sy = sin(y);\n  float cy = cos(y);\n  float sz = sin(z);\n  float cz = cos(z);\n  vec4 quat = vec4(0);\n  quat.x = sx * cy * cz + cx * sy * sz;\n  quat.y = cx * sy * cz + sx * cy * sz;\n  quat.z = cx * cy * sz - sx * sy * cz;\n  quat.w = cx * cy * cz - sx * sy * sz;\n  return quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\n  float x2 = q.x + q.x;\n  float y2 = q.y + q.y;\n  float z2 = q.z + q.z;\n  float xx = q.x * x2;\n  float xy = q.x * y2;\n  float xz = q.x * z2;\n  float yy = q.y * y2;\n  float yz = q.y * z2;\n  float zz = q.z * z2;\n  float wx = q.w * x2;\n  float wy = q.w * y2;\n  float wz = q.w * z2;\n  return mat4(\n    1. - (yy + zz), xy + wz, xz - wy, 0,\n    xy - wz, 1. - (xx + zz), yz + wx, 0,\n    xz + wy, yz - wx, 1. - (xx + yy), 0,\n    p.x, p.y, p.z, 1\n  );\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  float x2 = x + x;\n  float y2 = y + y;\n  float z2 = z + z;\n  float xx = x * x2;\n  float xy = x * y2;\n  float xz = x * z2;\n  float yy = y * y2;\n  float yz = y * z2;\n  float zz = z * z2;\n  float wx = w * x2;\n  float wy = w * y2;\n  float wz = w * z2;\n  float sx = s.x;\n  float sy = s.y;\n  float sz = s.z;\n  return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n    (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n    (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n    t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\n  vec4 quat;\n  quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n  quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n  quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n  quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n  return quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\n  float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n  float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n  float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n  float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n  v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n  v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n  v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n  vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n  vec4 rotQuat = quatMultiply(viewQuat, q);\n  rotateVecFromQuat(pos, rotQuat);\n  return pos;\n}\nmat3 quatToMat3(vec4 q) {\n  vec3 m0 = vec3(\n    1.0 - 2.0 * q.y * q.y - 2.0 * q.z * q.z,\n    2.0 * q.x * q.y + 2.0 * q.w * q.z,\n    2.0 * q.x * q.z - 2.0 * q.w * q.y);\n\tvec3 m1 = vec3(\n    2.0 * q.x * q.y - 2.0 * q.w * q.z,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.z * q.z,\n    2.0 * q.y * q.z + 2.0 * q.w * q.x);\n\tvec3 m2 = vec3(\n    2.0 * q.x * q.z + 2.0 * q.w * q.y,\n    2.0 * q.y * q.z - 2.0 * q.w * q.x,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.y * q.y);\n  return mat3(m0, m1, m2);\n}\nvec4 mat3ToQuat(mat3 mat) {\n  float tr = mat[0][0] + mat[1][1] + mat[2][2];\n\tfloat qw, qx, qy, qz;\n  if (tr > 0.0) {\n    float S = sqrt(tr + 1.0) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = 0.25 * S;\n\t  qx = (mat[1][2] - mat[2][1]) * invS;\n\t  qy = (mat[2][0] - mat[0][2]) * invS;\n\t  qz = (mat[0][1] - mat[1][0]) * invS;\n  } else if ((mat[0][0] > mat[1][1])&&(mat[0][0] > mat[2][2])) {\n    float S = sqrt(1.0 + mat[0][0] - mat[1][1] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[1][2] - mat[2][1]) * invS;\n\t  qx = 0.25 * S;\n\t  qy = (mat[1][0] + mat[0][1]) * invS;\n\t  qz = (mat[2][0] + mat[0][2]) * invS;\n  } else if (mat[1][1] > mat[2][2]) {\n\t  float S = sqrt(1.0 + mat[1][1] - mat[0][0] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[2][0] - mat[0][2]) * invS;\n\t  qx = (mat[1][0] + mat[0][1]) * invS;\n\t  qy = 0.25 * S;\n\t  qz = (mat[2][1] + mat[1][2]) * invS;\n  } else {\n\t  float S = sqrt(1.0 + mat[2][2] - mat[0][0] - mat[1][1]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[0][1] - mat[1][0]) * invS;\n\t  qx = (mat[2][0] + mat[0][2]) * invS;\n\t  qy = (mat[2][1] + mat[1][2]) * invS;\n\t  qz = 0.25 * S;\n  }\n  return vec4(qx, qy, qz, qw);\n}\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 mainTiling_Offset;\n  vec4 frameTile_velLenScale;\n  vec4 scale;\n  vec4 nodeRotation;\n};\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(set = 2, binding = 0) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n};\nlayout(location = 0) out mediump vec2 uv;\nlayout(location = 1) out mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n  , mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n  vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n  vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = vec3(1, 0, 0);\n  vec3 camY = vec3(0, 0, -1);\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  rotateVecFromQuat(viewSpaceVert, q);\n  vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n  vec3 camY = vec3(0, 1, 0);\n  vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n  pos.xyz += offset;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\n  vertIndex.y = 1. - vertIndex.y;\n#endif\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec3 a_texCoord;\nlayout(location = 2) in vec3 a_texCoord1;\nlayout(location = 3) in vec3 a_texCoord2;\nlayout(location = 4) in vec4 a_color;\n#if CC_RENDER_MODE == 1\n  layout(location = 8) in vec3 a_color1;\n#endif\n#if CC_RENDER_MODE == 4\n  layout(location = 6) in vec3 a_texCoord3;\n  layout(location = 7) in vec3 a_normal;\n  layout(location = 8) in vec4 a_color1;\n#endif\nvec4 lpvs_main () {\n  vec3 compScale = scale.xyz * a_texCoord1;\n  vec4 pos = vec4(a_position, 1);\n  #if CC_RENDER_MODE == 1\n    vec4 velocity = vec4(a_color1.xyz, 0);\n  #endif\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_RENDER_MODE == 1\n      velocity = cc_matWorld * velocity;\n    #endif\n  #endif\n  #if ROTATION_OVER_TIME_MODULE_ENABLE\n    vec3 rotTmp = a_texCoord2;\n    float mulFactor = 1.0;\n    if (rotTmp.x > 10.0 * 0.5) {\n        rotTmp.x -= 10.0;\n        mulFactor = -1.0;\n    }\n    vec4 rot = vec4(rotTmp, 0.0);\n    rot.w = mulFactor * sqrt(abs(1.0 - rot.x * rot.x - rot.y * rot.y - rot.z * rot.z));\n  #else\n    #if CC_RENDER_MODE != 4\n      #if CC_RENDER_MODE == 0\n        vec3 rotEuler = a_texCoord2;\n      #elif CC_RENDER_MODE == 1\n        vec3 rotEuler = vec3(0.);\n      #else\n        vec3 rotEuler = vec3(0., 0., a_texCoord2.z);\n      #endif\n      vec4 rot = quaternionFromEuler(rotEuler);\n    #else\n      vec4 rot = quaternionFromEuler(a_texCoord2);\n    #endif\n  #endif\n  #if CC_RENDER_MODE != 4\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n    #if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_matViewInv);\n    #elif CC_RENDER_MODE == 1\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_cameraPos.xyz, velocity, frameTile_velLenScale.z, frameTile_velLenScale.w, a_texCoord.x);\n    #elif 2\n      computeVertPos(pos, cornerOffset, rot, compScale);\n    #endif\n    color = a_color;\n  #else\n    mat3 rotMat = quatToMat3(rot);\n    mat3 nodeMat = quatToMat3(nodeRotation);\n    rotMat = nodeMat * rotMat;\n    rot = mat3ToQuat(rotMat);\n    mat4 xformNoScale = matrixFromRT(rot, pos.xyz);\n    mat4 xform = matFromRTS(rot, pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n  #endif\n  uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  pos = cc_matViewProj * pos;\n  return pos;\n}\nvoid main() { gl_Position = lpvs_main(); }","frag":"\nprecision mediump float;\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nlayout(location = 0) in vec2 uv;\nlayout(location = 1) in vec4 color;\nlayout(set = 1, binding = 2) uniform sampler2D mainTexture;\nlayout(set = 1, binding = 1) uniform FragConstants {\n  vec4 tintColor;\n};\nvec4 add () {\n  vec4 col = 2.0 * color * tintColor * texture(mainTexture, uv);\n  return CCFragOutput(col);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = add(); }"},"glsl3":{"vert":"\nprecision highp float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\n  mat3 m = mat3(xAxis,yAxis,zAxis);\n  float trace = m[0][0] + m[1][1] + m[2][2];\n  vec4 quat;\n  if (trace > 0.) {\n    float s = 0.5 / sqrt(trace + 1.0);\n    quat.w = 0.25 / s;\n    quat.x = (m[2][1] - m[1][2]) * s;\n    quat.y = (m[0][2] - m[2][0]) * s;\n    quat.z = (m[1][0] - m[0][1]) * s;\n  } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n    float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n    quat.w = (m[2][1] - m[1][2]) / s;\n    quat.x = 0.25 * s;\n    quat.y = (m[0][1] + m[1][0]) / s;\n    quat.z = (m[0][2] + m[2][0]) / s;\n  } else if (m[1][1] > m[2][2]) {\n    float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n    quat.w = (m[0][2] - m[2][0]) / s;\n    quat.x = (m[0][1] + m[1][0]) / s;\n    quat.y = 0.25 * s;\n    quat.z = (m[1][2] + m[2][1]) / s;\n  } else {\n    float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n    quat.w = (m[1][0] - m[0][1]) / s;\n    quat.x = (m[0][2] + m[2][0]) / s;\n    quat.y = (m[1][2] + m[2][1]) / s;\n    quat.z = 0.25 * s;\n  }\n  float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n  if (len > 0.) {\n    len = 1. / sqrt(len);\n    quat.x = quat.x * len;\n    quat.y = quat.y * len;\n    quat.z = quat.z * len;\n    quat.w = quat.w * len;\n  }\n  return quat;\n}\nvec4 quaternionFromEuler (vec3 angle){\n  float x = angle.x / 2.;\n  float y = angle.y / 2.;\n  float z = angle.z / 2.;\n  float sx = sin(x);\n  float cx = cos(x);\n  float sy = sin(y);\n  float cy = cos(y);\n  float sz = sin(z);\n  float cz = cos(z);\n  vec4 quat = vec4(0);\n  quat.x = sx * cy * cz + cx * sy * sz;\n  quat.y = cx * sy * cz + sx * cy * sz;\n  quat.z = cx * cy * sz - sx * sy * cz;\n  quat.w = cx * cy * cz - sx * sy * sz;\n  return quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\n  float x2 = q.x + q.x;\n  float y2 = q.y + q.y;\n  float z2 = q.z + q.z;\n  float xx = q.x * x2;\n  float xy = q.x * y2;\n  float xz = q.x * z2;\n  float yy = q.y * y2;\n  float yz = q.y * z2;\n  float zz = q.z * z2;\n  float wx = q.w * x2;\n  float wy = q.w * y2;\n  float wz = q.w * z2;\n  return mat4(\n    1. - (yy + zz), xy + wz, xz - wy, 0,\n    xy - wz, 1. - (xx + zz), yz + wx, 0,\n    xz + wy, yz - wx, 1. - (xx + yy), 0,\n    p.x, p.y, p.z, 1\n  );\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  float x2 = x + x;\n  float y2 = y + y;\n  float z2 = z + z;\n  float xx = x * x2;\n  float xy = x * y2;\n  float xz = x * z2;\n  float yy = y * y2;\n  float yz = y * z2;\n  float zz = z * z2;\n  float wx = w * x2;\n  float wy = w * y2;\n  float wz = w * z2;\n  float sx = s.x;\n  float sy = s.y;\n  float sz = s.z;\n  return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n    (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n    (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n    t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\n  vec4 quat;\n  quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n  quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n  quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n  quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n  return quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\n  float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n  float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n  float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n  float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n  v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n  v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n  v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n  vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n  vec4 rotQuat = quatMultiply(viewQuat, q);\n  rotateVecFromQuat(pos, rotQuat);\n  return pos;\n}\nmat3 quatToMat3(vec4 q) {\n  vec3 m0 = vec3(\n    1.0 - 2.0 * q.y * q.y - 2.0 * q.z * q.z,\n    2.0 * q.x * q.y + 2.0 * q.w * q.z,\n    2.0 * q.x * q.z - 2.0 * q.w * q.y);\n\tvec3 m1 = vec3(\n    2.0 * q.x * q.y - 2.0 * q.w * q.z,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.z * q.z,\n    2.0 * q.y * q.z + 2.0 * q.w * q.x);\n\tvec3 m2 = vec3(\n    2.0 * q.x * q.z + 2.0 * q.w * q.y,\n    2.0 * q.y * q.z - 2.0 * q.w * q.x,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.y * q.y);\n  return mat3(m0, m1, m2);\n}\nvec4 mat3ToQuat(mat3 mat) {\n  float tr = mat[0][0] + mat[1][1] + mat[2][2];\n\tfloat qw, qx, qy, qz;\n  if (tr > 0.0) {\n    float S = sqrt(tr + 1.0) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = 0.25 * S;\n\t  qx = (mat[1][2] - mat[2][1]) * invS;\n\t  qy = (mat[2][0] - mat[0][2]) * invS;\n\t  qz = (mat[0][1] - mat[1][0]) * invS;\n  } else if ((mat[0][0] > mat[1][1])&&(mat[0][0] > mat[2][2])) {\n    float S = sqrt(1.0 + mat[0][0] - mat[1][1] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[1][2] - mat[2][1]) * invS;\n\t  qx = 0.25 * S;\n\t  qy = (mat[1][0] + mat[0][1]) * invS;\n\t  qz = (mat[2][0] + mat[0][2]) * invS;\n  } else if (mat[1][1] > mat[2][2]) {\n\t  float S = sqrt(1.0 + mat[1][1] - mat[0][0] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[2][0] - mat[0][2]) * invS;\n\t  qx = (mat[1][0] + mat[0][1]) * invS;\n\t  qy = 0.25 * S;\n\t  qz = (mat[2][1] + mat[1][2]) * invS;\n  } else {\n\t  float S = sqrt(1.0 + mat[2][2] - mat[0][0] - mat[1][1]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[0][1] - mat[1][0]) * invS;\n\t  qx = (mat[2][0] + mat[0][2]) * invS;\n\t  qy = (mat[2][1] + mat[1][2]) * invS;\n\t  qz = 0.25 * S;\n  }\n  return vec4(qx, qy, qz, qw);\n}\nlayout(std140) uniform Constants {\n  vec4 mainTiling_Offset;\n  vec4 frameTile_velLenScale;\n  vec4 scale;\n  vec4 nodeRotation;\n};\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(std140) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n};\nout mediump vec2 uv;\nout mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n  , mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n  vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n  vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = vec3(1, 0, 0);\n  vec3 camY = vec3(0, 0, -1);\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  rotateVecFromQuat(viewSpaceVert, q);\n  vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n  vec3 camY = vec3(0, 1, 0);\n  vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n  pos.xyz += offset;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\n  vertIndex.y = 1. - vertIndex.y;\n#endif\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nin vec3 a_position;\nin vec3 a_texCoord;\nin vec3 a_texCoord1;\nin vec3 a_texCoord2;\nin vec4 a_color;\n#if CC_RENDER_MODE == 1\n  in vec3 a_color1;\n#endif\n#if CC_RENDER_MODE == 4\n  in vec3 a_texCoord3;\n  in vec3 a_normal;\n  in vec4 a_color1;\n#endif\nvec4 lpvs_main () {\n  vec3 compScale = scale.xyz * a_texCoord1;\n  vec4 pos = vec4(a_position, 1);\n  #if CC_RENDER_MODE == 1\n    vec4 velocity = vec4(a_color1.xyz, 0);\n  #endif\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_RENDER_MODE == 1\n      velocity = cc_matWorld * velocity;\n    #endif\n  #endif\n  #if ROTATION_OVER_TIME_MODULE_ENABLE\n    vec3 rotTmp = a_texCoord2;\n    float mulFactor = 1.0;\n    if (rotTmp.x > 10.0 * 0.5) {\n        rotTmp.x -= 10.0;\n        mulFactor = -1.0;\n    }\n    vec4 rot = vec4(rotTmp, 0.0);\n    rot.w = mulFactor * sqrt(abs(1.0 - rot.x * rot.x - rot.y * rot.y - rot.z * rot.z));\n  #else\n    #if CC_RENDER_MODE != 4\n      #if CC_RENDER_MODE == 0\n        vec3 rotEuler = a_texCoord2;\n      #elif CC_RENDER_MODE == 1\n        vec3 rotEuler = vec3(0.);\n      #else\n        vec3 rotEuler = vec3(0., 0., a_texCoord2.z);\n      #endif\n      vec4 rot = quaternionFromEuler(rotEuler);\n    #else\n      vec4 rot = quaternionFromEuler(a_texCoord2);\n    #endif\n  #endif\n  #if CC_RENDER_MODE != 4\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n    #if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_matViewInv);\n    #elif CC_RENDER_MODE == 1\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_cameraPos.xyz, velocity, frameTile_velLenScale.z, frameTile_velLenScale.w, a_texCoord.x);\n    #elif 2\n      computeVertPos(pos, cornerOffset, rot, compScale);\n    #endif\n    color = a_color;\n  #else\n    mat3 rotMat = quatToMat3(rot);\n    mat3 nodeMat = quatToMat3(nodeRotation);\n    rotMat = nodeMat * rotMat;\n    rot = mat3ToQuat(rotMat);\n    mat4 xformNoScale = matrixFromRT(rot, pos.xyz);\n    mat4 xform = matFromRTS(rot, pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n  #endif\n  uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  pos = cc_matViewProj * pos;\n  return pos;\n}\nvoid main() { gl_Position = lpvs_main(); }","frag":"\nprecision mediump float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nin vec2 uv;\nin vec4 color;\nuniform sampler2D mainTexture;\nlayout(std140) uniform FragConstants {\n  vec4 tintColor;\n};\nvec4 add () {\n  vec4 col = 2.0 * color * tintColor * texture(mainTexture, uv);\n  return CCFragOutput(col);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = add(); }"},"glsl1":{"vert":"\nprecision highp float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\n  mat3 m = mat3(xAxis,yAxis,zAxis);\n  float trace = m[0][0] + m[1][1] + m[2][2];\n  vec4 quat;\n  if (trace > 0.) {\n    float s = 0.5 / sqrt(trace + 1.0);\n    quat.w = 0.25 / s;\n    quat.x = (m[2][1] - m[1][2]) * s;\n    quat.y = (m[0][2] - m[2][0]) * s;\n    quat.z = (m[1][0] - m[0][1]) * s;\n  } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n    float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n    quat.w = (m[2][1] - m[1][2]) / s;\n    quat.x = 0.25 * s;\n    quat.y = (m[0][1] + m[1][0]) / s;\n    quat.z = (m[0][2] + m[2][0]) / s;\n  } else if (m[1][1] > m[2][2]) {\n    float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n    quat.w = (m[0][2] - m[2][0]) / s;\n    quat.x = (m[0][1] + m[1][0]) / s;\n    quat.y = 0.25 * s;\n    quat.z = (m[1][2] + m[2][1]) / s;\n  } else {\n    float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n    quat.w = (m[1][0] - m[0][1]) / s;\n    quat.x = (m[0][2] + m[2][0]) / s;\n    quat.y = (m[1][2] + m[2][1]) / s;\n    quat.z = 0.25 * s;\n  }\n  float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n  if (len > 0.) {\n    len = 1. / sqrt(len);\n    quat.x = quat.x * len;\n    quat.y = quat.y * len;\n    quat.z = quat.z * len;\n    quat.w = quat.w * len;\n  }\n  return quat;\n}\nvec4 quaternionFromEuler (vec3 angle){\n  float x = angle.x / 2.;\n  float y = angle.y / 2.;\n  float z = angle.z / 2.;\n  float sx = sin(x);\n  float cx = cos(x);\n  float sy = sin(y);\n  float cy = cos(y);\n  float sz = sin(z);\n  float cz = cos(z);\n  vec4 quat = vec4(0);\n  quat.x = sx * cy * cz + cx * sy * sz;\n  quat.y = cx * sy * cz + sx * cy * sz;\n  quat.z = cx * cy * sz - sx * sy * cz;\n  quat.w = cx * cy * cz - sx * sy * sz;\n  return quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\n  float x2 = q.x + q.x;\n  float y2 = q.y + q.y;\n  float z2 = q.z + q.z;\n  float xx = q.x * x2;\n  float xy = q.x * y2;\n  float xz = q.x * z2;\n  float yy = q.y * y2;\n  float yz = q.y * z2;\n  float zz = q.z * z2;\n  float wx = q.w * x2;\n  float wy = q.w * y2;\n  float wz = q.w * z2;\n  return mat4(\n    1. - (yy + zz), xy + wz, xz - wy, 0,\n    xy - wz, 1. - (xx + zz), yz + wx, 0,\n    xz + wy, yz - wx, 1. - (xx + yy), 0,\n    p.x, p.y, p.z, 1\n  );\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  float x2 = x + x;\n  float y2 = y + y;\n  float z2 = z + z;\n  float xx = x * x2;\n  float xy = x * y2;\n  float xz = x * z2;\n  float yy = y * y2;\n  float yz = y * z2;\n  float zz = z * z2;\n  float wx = w * x2;\n  float wy = w * y2;\n  float wz = w * z2;\n  float sx = s.x;\n  float sy = s.y;\n  float sz = s.z;\n  return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n    (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n    (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n    t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\n  vec4 quat;\n  quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n  quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n  quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n  quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n  return quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\n  float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n  float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n  float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n  float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n  v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n  v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n  v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n  vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n  vec4 rotQuat = quatMultiply(viewQuat, q);\n  rotateVecFromQuat(pos, rotQuat);\n  return pos;\n}\nmat3 quatToMat3(vec4 q) {\n  vec3 m0 = vec3(\n    1.0 - 2.0 * q.y * q.y - 2.0 * q.z * q.z,\n    2.0 * q.x * q.y + 2.0 * q.w * q.z,\n    2.0 * q.x * q.z - 2.0 * q.w * q.y);\n\tvec3 m1 = vec3(\n    2.0 * q.x * q.y - 2.0 * q.w * q.z,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.z * q.z,\n    2.0 * q.y * q.z + 2.0 * q.w * q.x);\n\tvec3 m2 = vec3(\n    2.0 * q.x * q.z + 2.0 * q.w * q.y,\n    2.0 * q.y * q.z - 2.0 * q.w * q.x,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.y * q.y);\n  return mat3(m0, m1, m2);\n}\nvec4 mat3ToQuat(mat3 mat) {\n  float tr = mat[0][0] + mat[1][1] + mat[2][2];\n\tfloat qw, qx, qy, qz;\n  if (tr > 0.0) {\n    float S = sqrt(tr + 1.0) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = 0.25 * S;\n\t  qx = (mat[1][2] - mat[2][1]) * invS;\n\t  qy = (mat[2][0] - mat[0][2]) * invS;\n\t  qz = (mat[0][1] - mat[1][0]) * invS;\n  } else if ((mat[0][0] > mat[1][1])&&(mat[0][0] > mat[2][2])) {\n    float S = sqrt(1.0 + mat[0][0] - mat[1][1] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[1][2] - mat[2][1]) * invS;\n\t  qx = 0.25 * S;\n\t  qy = (mat[1][0] + mat[0][1]) * invS;\n\t  qz = (mat[2][0] + mat[0][2]) * invS;\n  } else if (mat[1][1] > mat[2][2]) {\n\t  float S = sqrt(1.0 + mat[1][1] - mat[0][0] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[2][0] - mat[0][2]) * invS;\n\t  qx = (mat[1][0] + mat[0][1]) * invS;\n\t  qy = 0.25 * S;\n\t  qz = (mat[2][1] + mat[1][2]) * invS;\n  } else {\n\t  float S = sqrt(1.0 + mat[2][2] - mat[0][0] - mat[1][1]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[0][1] - mat[1][0]) * invS;\n\t  qx = (mat[2][0] + mat[0][2]) * invS;\n\t  qy = (mat[2][1] + mat[1][2]) * invS;\n\t  qz = 0.25 * S;\n  }\n  return vec4(qx, qy, qz, qw);\n}\n   uniform vec4 mainTiling_Offset;\n   uniform vec4 frameTile_velLenScale;\n   uniform vec4 scale;\n   uniform vec4 nodeRotation;\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matViewInv;\n  uniform highp mat4 cc_matViewProj;\n  uniform highp vec4 cc_cameraPos;\nuniform highp mat4 cc_matWorld;\nvarying mediump vec2 uv;\nvarying mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n  , mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n  vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n  vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = vec3(1, 0, 0);\n  vec3 camY = vec3(0, 0, -1);\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  rotateVecFromQuat(viewSpaceVert, q);\n  vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n  vec3 camY = vec3(0, 1, 0);\n  vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n  pos.xyz += offset;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\n  vertIndex.y = 1. - vertIndex.y;\n#endif\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nattribute vec3 a_position;\nattribute vec3 a_texCoord;\nattribute vec3 a_texCoord1;\nattribute vec3 a_texCoord2;\nattribute vec4 a_color;\n#if CC_RENDER_MODE == 1\n  attribute vec3 a_color1;\n#endif\n#if CC_RENDER_MODE == 4\n  attribute vec3 a_texCoord3;\n  attribute vec3 a_normal;\n  attribute vec4 a_color1;\n#endif\nvec4 lpvs_main () {\n  vec3 compScale = scale.xyz * a_texCoord1;\n  vec4 pos = vec4(a_position, 1);\n  #if CC_RENDER_MODE == 1\n    vec4 velocity = vec4(a_color1.xyz, 0);\n  #endif\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_RENDER_MODE == 1\n      velocity = cc_matWorld * velocity;\n    #endif\n  #endif\n  #if ROTATION_OVER_TIME_MODULE_ENABLE\n    vec3 rotTmp = a_texCoord2;\n    float mulFactor = 1.0;\n    if (rotTmp.x > 10.0 * 0.5) {\n        rotTmp.x -= 10.0;\n        mulFactor = -1.0;\n    }\n    vec4 rot = vec4(rotTmp, 0.0);\n    rot.w = mulFactor * sqrt(abs(1.0 - rot.x * rot.x - rot.y * rot.y - rot.z * rot.z));\n  #else\n    #if CC_RENDER_MODE != 4\n      #if CC_RENDER_MODE == 0\n        vec3 rotEuler = a_texCoord2;\n      #elif CC_RENDER_MODE == 1\n        vec3 rotEuler = vec3(0.);\n      #else\n        vec3 rotEuler = vec3(0., 0., a_texCoord2.z);\n      #endif\n      vec4 rot = quaternionFromEuler(rotEuler);\n    #else\n      vec4 rot = quaternionFromEuler(a_texCoord2);\n    #endif\n  #endif\n  #if CC_RENDER_MODE != 4\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n    #if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_matViewInv);\n    #elif CC_RENDER_MODE == 1\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_cameraPos.xyz, velocity, frameTile_velLenScale.z, frameTile_velLenScale.w, a_texCoord.x);\n    #elif 2\n      computeVertPos(pos, cornerOffset, rot, compScale);\n    #endif\n    color = a_color;\n  #else\n    mat3 rotMat = quatToMat3(rot);\n    mat3 nodeMat = quatToMat3(nodeRotation);\n    rotMat = nodeMat * rotMat;\n    rot = mat3ToQuat(rotMat);\n    mat4 xformNoScale = matrixFromRT(rot, pos.xyz);\n    mat4 xform = matFromRTS(rot, pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n  #endif\n  uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  pos = cc_matViewProj * pos;\n  return pos;\n}\nvoid main() { gl_Position = lpvs_main(); }","frag":"\nprecision mediump float;\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nvarying vec2 uv;\nvarying vec4 color;\nuniform sampler2D mainTexture;\n  uniform vec4 tintColor;\nvec4 add () {\n  vec4 col = 2.0 * color * tintColor * texture2D(mainTexture, uv);\n  return CCFragOutput(col);\n}\nvoid main() { gl_FragColor = add(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":52,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":40}},"defines":[{"name":"CC_RENDER_MODE","type":"number","defines":[],"range":[0,4]},{"name":"CC_USE_WORLD_SPACE","type":"boolean","defines":[]},{"name":"ROTATION_OVER_TIME_MODULE_ENABLE","type":"boolean","defines":[]}]},{"hash":1720952533,"name":"builtin-particle|particle-vs-legacy:lpvs_main|tinted-fs:multiply","blocks":[{"name":"Constants","stageFlags":1,"binding":0,"members":[{"name":"mainTiling_Offset","type":16,"count":1},{"name":"frameTile_velLenScale","type":16,"count":1},{"name":"scale","type":16,"count":1},{"name":"nodeRotation","type":16,"count":1}],"defines":[]},{"name":"FragConstants","stageFlags":16,"binding":1,"members":[{"name":"tintColor","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"mainTexture","type":28,"count":1,"stageFlags":16,"binding":2,"defines":[]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_texCoord","format":32,"location":1,"defines":[]},{"name":"a_texCoord1","format":32,"location":2,"defines":[]},{"name":"a_texCoord2","format":32,"location":3,"defines":[]},{"name":"a_color","format":44,"location":4,"defines":[]},{"name":"a_color1","format":32,"location":8,"defines":["CC_RENDER_MODE"]},{"name":"a_texCoord3","format":32,"location":6,"defines":["CC_RENDER_MODE"]},{"name":"a_normal","format":32,"location":7,"defines":["CC_RENDER_MODE"]}],"varyings":[{"name":"uv","type":14,"count":1,"stageFlags":17,"location":0,"defines":[]},{"name":"color","type":16,"count":1,"stageFlags":17,"location":1,"defines":[]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"glsl4":{"vert":"\nprecision highp float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\n  mat3 m = mat3(xAxis,yAxis,zAxis);\n  float trace = m[0][0] + m[1][1] + m[2][2];\n  vec4 quat;\n  if (trace > 0.) {\n    float s = 0.5 / sqrt(trace + 1.0);\n    quat.w = 0.25 / s;\n    quat.x = (m[2][1] - m[1][2]) * s;\n    quat.y = (m[0][2] - m[2][0]) * s;\n    quat.z = (m[1][0] - m[0][1]) * s;\n  } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n    float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n    quat.w = (m[2][1] - m[1][2]) / s;\n    quat.x = 0.25 * s;\n    quat.y = (m[0][1] + m[1][0]) / s;\n    quat.z = (m[0][2] + m[2][0]) / s;\n  } else if (m[1][1] > m[2][2]) {\n    float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n    quat.w = (m[0][2] - m[2][0]) / s;\n    quat.x = (m[0][1] + m[1][0]) / s;\n    quat.y = 0.25 * s;\n    quat.z = (m[1][2] + m[2][1]) / s;\n  } else {\n    float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n    quat.w = (m[1][0] - m[0][1]) / s;\n    quat.x = (m[0][2] + m[2][0]) / s;\n    quat.y = (m[1][2] + m[2][1]) / s;\n    quat.z = 0.25 * s;\n  }\n  float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n  if (len > 0.) {\n    len = 1. / sqrt(len);\n    quat.x = quat.x * len;\n    quat.y = quat.y * len;\n    quat.z = quat.z * len;\n    quat.w = quat.w * len;\n  }\n  return quat;\n}\nvec4 quaternionFromEuler (vec3 angle){\n  float x = angle.x / 2.;\n  float y = angle.y / 2.;\n  float z = angle.z / 2.;\n  float sx = sin(x);\n  float cx = cos(x);\n  float sy = sin(y);\n  float cy = cos(y);\n  float sz = sin(z);\n  float cz = cos(z);\n  vec4 quat = vec4(0);\n  quat.x = sx * cy * cz + cx * sy * sz;\n  quat.y = cx * sy * cz + sx * cy * sz;\n  quat.z = cx * cy * sz - sx * sy * cz;\n  quat.w = cx * cy * cz - sx * sy * sz;\n  return quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\n  float x2 = q.x + q.x;\n  float y2 = q.y + q.y;\n  float z2 = q.z + q.z;\n  float xx = q.x * x2;\n  float xy = q.x * y2;\n  float xz = q.x * z2;\n  float yy = q.y * y2;\n  float yz = q.y * z2;\n  float zz = q.z * z2;\n  float wx = q.w * x2;\n  float wy = q.w * y2;\n  float wz = q.w * z2;\n  return mat4(\n    1. - (yy + zz), xy + wz, xz - wy, 0,\n    xy - wz, 1. - (xx + zz), yz + wx, 0,\n    xz + wy, yz - wx, 1. - (xx + yy), 0,\n    p.x, p.y, p.z, 1\n  );\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  float x2 = x + x;\n  float y2 = y + y;\n  float z2 = z + z;\n  float xx = x * x2;\n  float xy = x * y2;\n  float xz = x * z2;\n  float yy = y * y2;\n  float yz = y * z2;\n  float zz = z * z2;\n  float wx = w * x2;\n  float wy = w * y2;\n  float wz = w * z2;\n  float sx = s.x;\n  float sy = s.y;\n  float sz = s.z;\n  return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n    (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n    (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n    t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\n  vec4 quat;\n  quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n  quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n  quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n  quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n  return quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\n  float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n  float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n  float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n  float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n  v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n  v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n  v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n  vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n  vec4 rotQuat = quatMultiply(viewQuat, q);\n  rotateVecFromQuat(pos, rotQuat);\n  return pos;\n}\nmat3 quatToMat3(vec4 q) {\n  vec3 m0 = vec3(\n    1.0 - 2.0 * q.y * q.y - 2.0 * q.z * q.z,\n    2.0 * q.x * q.y + 2.0 * q.w * q.z,\n    2.0 * q.x * q.z - 2.0 * q.w * q.y);\n\tvec3 m1 = vec3(\n    2.0 * q.x * q.y - 2.0 * q.w * q.z,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.z * q.z,\n    2.0 * q.y * q.z + 2.0 * q.w * q.x);\n\tvec3 m2 = vec3(\n    2.0 * q.x * q.z + 2.0 * q.w * q.y,\n    2.0 * q.y * q.z - 2.0 * q.w * q.x,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.y * q.y);\n  return mat3(m0, m1, m2);\n}\nvec4 mat3ToQuat(mat3 mat) {\n  float tr = mat[0][0] + mat[1][1] + mat[2][2];\n\tfloat qw, qx, qy, qz;\n  if (tr > 0.0) {\n    float S = sqrt(tr + 1.0) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = 0.25 * S;\n\t  qx = (mat[1][2] - mat[2][1]) * invS;\n\t  qy = (mat[2][0] - mat[0][2]) * invS;\n\t  qz = (mat[0][1] - mat[1][0]) * invS;\n  } else if ((mat[0][0] > mat[1][1])&&(mat[0][0] > mat[2][2])) {\n    float S = sqrt(1.0 + mat[0][0] - mat[1][1] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[1][2] - mat[2][1]) * invS;\n\t  qx = 0.25 * S;\n\t  qy = (mat[1][0] + mat[0][1]) * invS;\n\t  qz = (mat[2][0] + mat[0][2]) * invS;\n  } else if (mat[1][1] > mat[2][2]) {\n\t  float S = sqrt(1.0 + mat[1][1] - mat[0][0] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[2][0] - mat[0][2]) * invS;\n\t  qx = (mat[1][0] + mat[0][1]) * invS;\n\t  qy = 0.25 * S;\n\t  qz = (mat[2][1] + mat[1][2]) * invS;\n  } else {\n\t  float S = sqrt(1.0 + mat[2][2] - mat[0][0] - mat[1][1]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[0][1] - mat[1][0]) * invS;\n\t  qx = (mat[2][0] + mat[0][2]) * invS;\n\t  qy = (mat[2][1] + mat[1][2]) * invS;\n\t  qz = 0.25 * S;\n  }\n  return vec4(qx, qy, qz, qw);\n}\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 mainTiling_Offset;\n  vec4 frameTile_velLenScale;\n  vec4 scale;\n  vec4 nodeRotation;\n};\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(set = 2, binding = 0) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n};\nlayout(location = 0) out mediump vec2 uv;\nlayout(location = 1) out mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n  , mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n  vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n  vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = vec3(1, 0, 0);\n  vec3 camY = vec3(0, 0, -1);\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  rotateVecFromQuat(viewSpaceVert, q);\n  vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n  vec3 camY = vec3(0, 1, 0);\n  vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n  pos.xyz += offset;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\n  vertIndex.y = 1. - vertIndex.y;\n#endif\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec3 a_texCoord;\nlayout(location = 2) in vec3 a_texCoord1;\nlayout(location = 3) in vec3 a_texCoord2;\nlayout(location = 4) in vec4 a_color;\n#if CC_RENDER_MODE == 1\n  layout(location = 8) in vec3 a_color1;\n#endif\n#if CC_RENDER_MODE == 4\n  layout(location = 6) in vec3 a_texCoord3;\n  layout(location = 7) in vec3 a_normal;\n  layout(location = 8) in vec4 a_color1;\n#endif\nvec4 lpvs_main () {\n  vec3 compScale = scale.xyz * a_texCoord1;\n  vec4 pos = vec4(a_position, 1);\n  #if CC_RENDER_MODE == 1\n    vec4 velocity = vec4(a_color1.xyz, 0);\n  #endif\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_RENDER_MODE == 1\n      velocity = cc_matWorld * velocity;\n    #endif\n  #endif\n  #if ROTATION_OVER_TIME_MODULE_ENABLE\n    vec3 rotTmp = a_texCoord2;\n    float mulFactor = 1.0;\n    if (rotTmp.x > 10.0 * 0.5) {\n        rotTmp.x -= 10.0;\n        mulFactor = -1.0;\n    }\n    vec4 rot = vec4(rotTmp, 0.0);\n    rot.w = mulFactor * sqrt(abs(1.0 - rot.x * rot.x - rot.y * rot.y - rot.z * rot.z));\n  #else\n    #if CC_RENDER_MODE != 4\n      #if CC_RENDER_MODE == 0\n        vec3 rotEuler = a_texCoord2;\n      #elif CC_RENDER_MODE == 1\n        vec3 rotEuler = vec3(0.);\n      #else\n        vec3 rotEuler = vec3(0., 0., a_texCoord2.z);\n      #endif\n      vec4 rot = quaternionFromEuler(rotEuler);\n    #else\n      vec4 rot = quaternionFromEuler(a_texCoord2);\n    #endif\n  #endif\n  #if CC_RENDER_MODE != 4\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n    #if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_matViewInv);\n    #elif CC_RENDER_MODE == 1\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_cameraPos.xyz, velocity, frameTile_velLenScale.z, frameTile_velLenScale.w, a_texCoord.x);\n    #elif 2\n      computeVertPos(pos, cornerOffset, rot, compScale);\n    #endif\n    color = a_color;\n  #else\n    mat3 rotMat = quatToMat3(rot);\n    mat3 nodeMat = quatToMat3(nodeRotation);\n    rotMat = nodeMat * rotMat;\n    rot = mat3ToQuat(rotMat);\n    mat4 xformNoScale = matrixFromRT(rot, pos.xyz);\n    mat4 xform = matFromRTS(rot, pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n  #endif\n  uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  pos = cc_matViewProj * pos;\n  return pos;\n}\nvoid main() { gl_Position = lpvs_main(); }","frag":"\nprecision mediump float;\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nlayout(location = 0) in vec2 uv;\nlayout(location = 1) in vec4 color;\nlayout(set = 1, binding = 2) uniform sampler2D mainTexture;\nlayout(set = 1, binding = 1) uniform FragConstants {\n  vec4 tintColor;\n};\nvec4 multiply () {\n  vec4 col;\n  vec4 texColor = texture(mainTexture, uv);\n  col.rgb = tintColor.rgb * texColor.rgb * color.rgb * vec3(2.0);\n  return CCFragOutput(col);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = multiply(); }"},"glsl3":{"vert":"\nprecision highp float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\n  mat3 m = mat3(xAxis,yAxis,zAxis);\n  float trace = m[0][0] + m[1][1] + m[2][2];\n  vec4 quat;\n  if (trace > 0.) {\n    float s = 0.5 / sqrt(trace + 1.0);\n    quat.w = 0.25 / s;\n    quat.x = (m[2][1] - m[1][2]) * s;\n    quat.y = (m[0][2] - m[2][0]) * s;\n    quat.z = (m[1][0] - m[0][1]) * s;\n  } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n    float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n    quat.w = (m[2][1] - m[1][2]) / s;\n    quat.x = 0.25 * s;\n    quat.y = (m[0][1] + m[1][0]) / s;\n    quat.z = (m[0][2] + m[2][0]) / s;\n  } else if (m[1][1] > m[2][2]) {\n    float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n    quat.w = (m[0][2] - m[2][0]) / s;\n    quat.x = (m[0][1] + m[1][0]) / s;\n    quat.y = 0.25 * s;\n    quat.z = (m[1][2] + m[2][1]) / s;\n  } else {\n    float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n    quat.w = (m[1][0] - m[0][1]) / s;\n    quat.x = (m[0][2] + m[2][0]) / s;\n    quat.y = (m[1][2] + m[2][1]) / s;\n    quat.z = 0.25 * s;\n  }\n  float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n  if (len > 0.) {\n    len = 1. / sqrt(len);\n    quat.x = quat.x * len;\n    quat.y = quat.y * len;\n    quat.z = quat.z * len;\n    quat.w = quat.w * len;\n  }\n  return quat;\n}\nvec4 quaternionFromEuler (vec3 angle){\n  float x = angle.x / 2.;\n  float y = angle.y / 2.;\n  float z = angle.z / 2.;\n  float sx = sin(x);\n  float cx = cos(x);\n  float sy = sin(y);\n  float cy = cos(y);\n  float sz = sin(z);\n  float cz = cos(z);\n  vec4 quat = vec4(0);\n  quat.x = sx * cy * cz + cx * sy * sz;\n  quat.y = cx * sy * cz + sx * cy * sz;\n  quat.z = cx * cy * sz - sx * sy * cz;\n  quat.w = cx * cy * cz - sx * sy * sz;\n  return quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\n  float x2 = q.x + q.x;\n  float y2 = q.y + q.y;\n  float z2 = q.z + q.z;\n  float xx = q.x * x2;\n  float xy = q.x * y2;\n  float xz = q.x * z2;\n  float yy = q.y * y2;\n  float yz = q.y * z2;\n  float zz = q.z * z2;\n  float wx = q.w * x2;\n  float wy = q.w * y2;\n  float wz = q.w * z2;\n  return mat4(\n    1. - (yy + zz), xy + wz, xz - wy, 0,\n    xy - wz, 1. - (xx + zz), yz + wx, 0,\n    xz + wy, yz - wx, 1. - (xx + yy), 0,\n    p.x, p.y, p.z, 1\n  );\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  float x2 = x + x;\n  float y2 = y + y;\n  float z2 = z + z;\n  float xx = x * x2;\n  float xy = x * y2;\n  float xz = x * z2;\n  float yy = y * y2;\n  float yz = y * z2;\n  float zz = z * z2;\n  float wx = w * x2;\n  float wy = w * y2;\n  float wz = w * z2;\n  float sx = s.x;\n  float sy = s.y;\n  float sz = s.z;\n  return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n    (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n    (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n    t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\n  vec4 quat;\n  quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n  quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n  quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n  quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n  return quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\n  float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n  float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n  float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n  float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n  v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n  v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n  v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n  vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n  vec4 rotQuat = quatMultiply(viewQuat, q);\n  rotateVecFromQuat(pos, rotQuat);\n  return pos;\n}\nmat3 quatToMat3(vec4 q) {\n  vec3 m0 = vec3(\n    1.0 - 2.0 * q.y * q.y - 2.0 * q.z * q.z,\n    2.0 * q.x * q.y + 2.0 * q.w * q.z,\n    2.0 * q.x * q.z - 2.0 * q.w * q.y);\n\tvec3 m1 = vec3(\n    2.0 * q.x * q.y - 2.0 * q.w * q.z,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.z * q.z,\n    2.0 * q.y * q.z + 2.0 * q.w * q.x);\n\tvec3 m2 = vec3(\n    2.0 * q.x * q.z + 2.0 * q.w * q.y,\n    2.0 * q.y * q.z - 2.0 * q.w * q.x,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.y * q.y);\n  return mat3(m0, m1, m2);\n}\nvec4 mat3ToQuat(mat3 mat) {\n  float tr = mat[0][0] + mat[1][1] + mat[2][2];\n\tfloat qw, qx, qy, qz;\n  if (tr > 0.0) {\n    float S = sqrt(tr + 1.0) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = 0.25 * S;\n\t  qx = (mat[1][2] - mat[2][1]) * invS;\n\t  qy = (mat[2][0] - mat[0][2]) * invS;\n\t  qz = (mat[0][1] - mat[1][0]) * invS;\n  } else if ((mat[0][0] > mat[1][1])&&(mat[0][0] > mat[2][2])) {\n    float S = sqrt(1.0 + mat[0][0] - mat[1][1] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[1][2] - mat[2][1]) * invS;\n\t  qx = 0.25 * S;\n\t  qy = (mat[1][0] + mat[0][1]) * invS;\n\t  qz = (mat[2][0] + mat[0][2]) * invS;\n  } else if (mat[1][1] > mat[2][2]) {\n\t  float S = sqrt(1.0 + mat[1][1] - mat[0][0] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[2][0] - mat[0][2]) * invS;\n\t  qx = (mat[1][0] + mat[0][1]) * invS;\n\t  qy = 0.25 * S;\n\t  qz = (mat[2][1] + mat[1][2]) * invS;\n  } else {\n\t  float S = sqrt(1.0 + mat[2][2] - mat[0][0] - mat[1][1]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[0][1] - mat[1][0]) * invS;\n\t  qx = (mat[2][0] + mat[0][2]) * invS;\n\t  qy = (mat[2][1] + mat[1][2]) * invS;\n\t  qz = 0.25 * S;\n  }\n  return vec4(qx, qy, qz, qw);\n}\nlayout(std140) uniform Constants {\n  vec4 mainTiling_Offset;\n  vec4 frameTile_velLenScale;\n  vec4 scale;\n  vec4 nodeRotation;\n};\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(std140) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n};\nout mediump vec2 uv;\nout mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n  , mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n  vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n  vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = vec3(1, 0, 0);\n  vec3 camY = vec3(0, 0, -1);\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  rotateVecFromQuat(viewSpaceVert, q);\n  vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n  vec3 camY = vec3(0, 1, 0);\n  vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n  pos.xyz += offset;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\n  vertIndex.y = 1. - vertIndex.y;\n#endif\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nin vec3 a_position;\nin vec3 a_texCoord;\nin vec3 a_texCoord1;\nin vec3 a_texCoord2;\nin vec4 a_color;\n#if CC_RENDER_MODE == 1\n  in vec3 a_color1;\n#endif\n#if CC_RENDER_MODE == 4\n  in vec3 a_texCoord3;\n  in vec3 a_normal;\n  in vec4 a_color1;\n#endif\nvec4 lpvs_main () {\n  vec3 compScale = scale.xyz * a_texCoord1;\n  vec4 pos = vec4(a_position, 1);\n  #if CC_RENDER_MODE == 1\n    vec4 velocity = vec4(a_color1.xyz, 0);\n  #endif\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_RENDER_MODE == 1\n      velocity = cc_matWorld * velocity;\n    #endif\n  #endif\n  #if ROTATION_OVER_TIME_MODULE_ENABLE\n    vec3 rotTmp = a_texCoord2;\n    float mulFactor = 1.0;\n    if (rotTmp.x > 10.0 * 0.5) {\n        rotTmp.x -= 10.0;\n        mulFactor = -1.0;\n    }\n    vec4 rot = vec4(rotTmp, 0.0);\n    rot.w = mulFactor * sqrt(abs(1.0 - rot.x * rot.x - rot.y * rot.y - rot.z * rot.z));\n  #else\n    #if CC_RENDER_MODE != 4\n      #if CC_RENDER_MODE == 0\n        vec3 rotEuler = a_texCoord2;\n      #elif CC_RENDER_MODE == 1\n        vec3 rotEuler = vec3(0.);\n      #else\n        vec3 rotEuler = vec3(0., 0., a_texCoord2.z);\n      #endif\n      vec4 rot = quaternionFromEuler(rotEuler);\n    #else\n      vec4 rot = quaternionFromEuler(a_texCoord2);\n    #endif\n  #endif\n  #if CC_RENDER_MODE != 4\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n    #if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_matViewInv);\n    #elif CC_RENDER_MODE == 1\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_cameraPos.xyz, velocity, frameTile_velLenScale.z, frameTile_velLenScale.w, a_texCoord.x);\n    #elif 2\n      computeVertPos(pos, cornerOffset, rot, compScale);\n    #endif\n    color = a_color;\n  #else\n    mat3 rotMat = quatToMat3(rot);\n    mat3 nodeMat = quatToMat3(nodeRotation);\n    rotMat = nodeMat * rotMat;\n    rot = mat3ToQuat(rotMat);\n    mat4 xformNoScale = matrixFromRT(rot, pos.xyz);\n    mat4 xform = matFromRTS(rot, pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n  #endif\n  uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  pos = cc_matViewProj * pos;\n  return pos;\n}\nvoid main() { gl_Position = lpvs_main(); }","frag":"\nprecision mediump float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nin vec2 uv;\nin vec4 color;\nuniform sampler2D mainTexture;\nlayout(std140) uniform FragConstants {\n  vec4 tintColor;\n};\nvec4 multiply () {\n  vec4 col;\n  vec4 texColor = texture(mainTexture, uv);\n  col.rgb = tintColor.rgb * texColor.rgb * color.rgb * vec3(2.0);\n  return CCFragOutput(col);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = multiply(); }"},"glsl1":{"vert":"\nprecision highp float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\n  mat3 m = mat3(xAxis,yAxis,zAxis);\n  float trace = m[0][0] + m[1][1] + m[2][2];\n  vec4 quat;\n  if (trace > 0.) {\n    float s = 0.5 / sqrt(trace + 1.0);\n    quat.w = 0.25 / s;\n    quat.x = (m[2][1] - m[1][2]) * s;\n    quat.y = (m[0][2] - m[2][0]) * s;\n    quat.z = (m[1][0] - m[0][1]) * s;\n  } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n    float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n    quat.w = (m[2][1] - m[1][2]) / s;\n    quat.x = 0.25 * s;\n    quat.y = (m[0][1] + m[1][0]) / s;\n    quat.z = (m[0][2] + m[2][0]) / s;\n  } else if (m[1][1] > m[2][2]) {\n    float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n    quat.w = (m[0][2] - m[2][0]) / s;\n    quat.x = (m[0][1] + m[1][0]) / s;\n    quat.y = 0.25 * s;\n    quat.z = (m[1][2] + m[2][1]) / s;\n  } else {\n    float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n    quat.w = (m[1][0] - m[0][1]) / s;\n    quat.x = (m[0][2] + m[2][0]) / s;\n    quat.y = (m[1][2] + m[2][1]) / s;\n    quat.z = 0.25 * s;\n  }\n  float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n  if (len > 0.) {\n    len = 1. / sqrt(len);\n    quat.x = quat.x * len;\n    quat.y = quat.y * len;\n    quat.z = quat.z * len;\n    quat.w = quat.w * len;\n  }\n  return quat;\n}\nvec4 quaternionFromEuler (vec3 angle){\n  float x = angle.x / 2.;\n  float y = angle.y / 2.;\n  float z = angle.z / 2.;\n  float sx = sin(x);\n  float cx = cos(x);\n  float sy = sin(y);\n  float cy = cos(y);\n  float sz = sin(z);\n  float cz = cos(z);\n  vec4 quat = vec4(0);\n  quat.x = sx * cy * cz + cx * sy * sz;\n  quat.y = cx * sy * cz + sx * cy * sz;\n  quat.z = cx * cy * sz - sx * sy * cz;\n  quat.w = cx * cy * cz - sx * sy * sz;\n  return quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\n  float x2 = q.x + q.x;\n  float y2 = q.y + q.y;\n  float z2 = q.z + q.z;\n  float xx = q.x * x2;\n  float xy = q.x * y2;\n  float xz = q.x * z2;\n  float yy = q.y * y2;\n  float yz = q.y * z2;\n  float zz = q.z * z2;\n  float wx = q.w * x2;\n  float wy = q.w * y2;\n  float wz = q.w * z2;\n  return mat4(\n    1. - (yy + zz), xy + wz, xz - wy, 0,\n    xy - wz, 1. - (xx + zz), yz + wx, 0,\n    xz + wy, yz - wx, 1. - (xx + yy), 0,\n    p.x, p.y, p.z, 1\n  );\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  float x2 = x + x;\n  float y2 = y + y;\n  float z2 = z + z;\n  float xx = x * x2;\n  float xy = x * y2;\n  float xz = x * z2;\n  float yy = y * y2;\n  float yz = y * z2;\n  float zz = z * z2;\n  float wx = w * x2;\n  float wy = w * y2;\n  float wz = w * z2;\n  float sx = s.x;\n  float sy = s.y;\n  float sz = s.z;\n  return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n    (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n    (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n    t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\n  vec4 quat;\n  quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n  quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n  quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n  quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n  return quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\n  float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n  float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n  float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n  float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n  v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n  v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n  v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n  vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n  vec4 rotQuat = quatMultiply(viewQuat, q);\n  rotateVecFromQuat(pos, rotQuat);\n  return pos;\n}\nmat3 quatToMat3(vec4 q) {\n  vec3 m0 = vec3(\n    1.0 - 2.0 * q.y * q.y - 2.0 * q.z * q.z,\n    2.0 * q.x * q.y + 2.0 * q.w * q.z,\n    2.0 * q.x * q.z - 2.0 * q.w * q.y);\n\tvec3 m1 = vec3(\n    2.0 * q.x * q.y - 2.0 * q.w * q.z,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.z * q.z,\n    2.0 * q.y * q.z + 2.0 * q.w * q.x);\n\tvec3 m2 = vec3(\n    2.0 * q.x * q.z + 2.0 * q.w * q.y,\n    2.0 * q.y * q.z - 2.0 * q.w * q.x,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.y * q.y);\n  return mat3(m0, m1, m2);\n}\nvec4 mat3ToQuat(mat3 mat) {\n  float tr = mat[0][0] + mat[1][1] + mat[2][2];\n\tfloat qw, qx, qy, qz;\n  if (tr > 0.0) {\n    float S = sqrt(tr + 1.0) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = 0.25 * S;\n\t  qx = (mat[1][2] - mat[2][1]) * invS;\n\t  qy = (mat[2][0] - mat[0][2]) * invS;\n\t  qz = (mat[0][1] - mat[1][0]) * invS;\n  } else if ((mat[0][0] > mat[1][1])&&(mat[0][0] > mat[2][2])) {\n    float S = sqrt(1.0 + mat[0][0] - mat[1][1] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[1][2] - mat[2][1]) * invS;\n\t  qx = 0.25 * S;\n\t  qy = (mat[1][0] + mat[0][1]) * invS;\n\t  qz = (mat[2][0] + mat[0][2]) * invS;\n  } else if (mat[1][1] > mat[2][2]) {\n\t  float S = sqrt(1.0 + mat[1][1] - mat[0][0] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[2][0] - mat[0][2]) * invS;\n\t  qx = (mat[1][0] + mat[0][1]) * invS;\n\t  qy = 0.25 * S;\n\t  qz = (mat[2][1] + mat[1][2]) * invS;\n  } else {\n\t  float S = sqrt(1.0 + mat[2][2] - mat[0][0] - mat[1][1]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[0][1] - mat[1][0]) * invS;\n\t  qx = (mat[2][0] + mat[0][2]) * invS;\n\t  qy = (mat[2][1] + mat[1][2]) * invS;\n\t  qz = 0.25 * S;\n  }\n  return vec4(qx, qy, qz, qw);\n}\n   uniform vec4 mainTiling_Offset;\n   uniform vec4 frameTile_velLenScale;\n   uniform vec4 scale;\n   uniform vec4 nodeRotation;\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matViewInv;\n  uniform highp mat4 cc_matViewProj;\n  uniform highp vec4 cc_cameraPos;\nuniform highp mat4 cc_matWorld;\nvarying mediump vec2 uv;\nvarying mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n  , mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n  vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n  vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = vec3(1, 0, 0);\n  vec3 camY = vec3(0, 0, -1);\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  rotateVecFromQuat(viewSpaceVert, q);\n  vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n  vec3 camY = vec3(0, 1, 0);\n  vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n  pos.xyz += offset;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\n  vertIndex.y = 1. - vertIndex.y;\n#endif\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nattribute vec3 a_position;\nattribute vec3 a_texCoord;\nattribute vec3 a_texCoord1;\nattribute vec3 a_texCoord2;\nattribute vec4 a_color;\n#if CC_RENDER_MODE == 1\n  attribute vec3 a_color1;\n#endif\n#if CC_RENDER_MODE == 4\n  attribute vec3 a_texCoord3;\n  attribute vec3 a_normal;\n  attribute vec4 a_color1;\n#endif\nvec4 lpvs_main () {\n  vec3 compScale = scale.xyz * a_texCoord1;\n  vec4 pos = vec4(a_position, 1);\n  #if CC_RENDER_MODE == 1\n    vec4 velocity = vec4(a_color1.xyz, 0);\n  #endif\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_RENDER_MODE == 1\n      velocity = cc_matWorld * velocity;\n    #endif\n  #endif\n  #if ROTATION_OVER_TIME_MODULE_ENABLE\n    vec3 rotTmp = a_texCoord2;\n    float mulFactor = 1.0;\n    if (rotTmp.x > 10.0 * 0.5) {\n        rotTmp.x -= 10.0;\n        mulFactor = -1.0;\n    }\n    vec4 rot = vec4(rotTmp, 0.0);\n    rot.w = mulFactor * sqrt(abs(1.0 - rot.x * rot.x - rot.y * rot.y - rot.z * rot.z));\n  #else\n    #if CC_RENDER_MODE != 4\n      #if CC_RENDER_MODE == 0\n        vec3 rotEuler = a_texCoord2;\n      #elif CC_RENDER_MODE == 1\n        vec3 rotEuler = vec3(0.);\n      #else\n        vec3 rotEuler = vec3(0., 0., a_texCoord2.z);\n      #endif\n      vec4 rot = quaternionFromEuler(rotEuler);\n    #else\n      vec4 rot = quaternionFromEuler(a_texCoord2);\n    #endif\n  #endif\n  #if CC_RENDER_MODE != 4\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n    #if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_matViewInv);\n    #elif CC_RENDER_MODE == 1\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_cameraPos.xyz, velocity, frameTile_velLenScale.z, frameTile_velLenScale.w, a_texCoord.x);\n    #elif 2\n      computeVertPos(pos, cornerOffset, rot, compScale);\n    #endif\n    color = a_color;\n  #else\n    mat3 rotMat = quatToMat3(rot);\n    mat3 nodeMat = quatToMat3(nodeRotation);\n    rotMat = nodeMat * rotMat;\n    rot = mat3ToQuat(rotMat);\n    mat4 xformNoScale = matrixFromRT(rot, pos.xyz);\n    mat4 xform = matFromRTS(rot, pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n  #endif\n  uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  pos = cc_matViewProj * pos;\n  return pos;\n}\nvoid main() { gl_Position = lpvs_main(); }","frag":"\nprecision mediump float;\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nvarying vec2 uv;\nvarying vec4 color;\nuniform sampler2D mainTexture;\n  uniform vec4 tintColor;\nvec4 multiply () {\n  vec4 col;\n  vec4 texColor = texture2D(mainTexture, uv);\n  col.rgb = tintColor.rgb * texColor.rgb * color.rgb * vec3(2.0);\n  return CCFragOutput(col);\n}\nvoid main() { gl_FragColor = multiply(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":52,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":40}},"defines":[{"name":"CC_RENDER_MODE","type":"number","defines":[],"range":[0,4]},{"name":"CC_USE_WORLD_SPACE","type":"boolean","defines":[]},{"name":"ROTATION_OVER_TIME_MODULE_ENABLE","type":"boolean","defines":[]}]},{"hash":1759026248,"name":"builtin-particle|particle-vs-legacy:lpvs_main|no-tint-fs:addSmooth","blocks":[{"name":"Constants","stageFlags":1,"binding":0,"members":[{"name":"mainTiling_Offset","type":16,"count":1},{"name":"frameTile_velLenScale","type":16,"count":1},{"name":"scale","type":16,"count":1},{"name":"nodeRotation","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"mainTexture","type":28,"count":1,"stageFlags":16,"binding":1,"defines":[]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_texCoord","format":32,"location":1,"defines":[]},{"name":"a_texCoord1","format":32,"location":2,"defines":[]},{"name":"a_texCoord2","format":32,"location":3,"defines":[]},{"name":"a_color","format":44,"location":4,"defines":[]},{"name":"a_color1","format":32,"location":8,"defines":["CC_RENDER_MODE"]},{"name":"a_texCoord3","format":32,"location":6,"defines":["CC_RENDER_MODE"]},{"name":"a_normal","format":32,"location":7,"defines":["CC_RENDER_MODE"]}],"varyings":[{"name":"uv","type":14,"count":1,"stageFlags":17,"location":0,"defines":[]},{"name":"color","type":16,"count":1,"stageFlags":17,"location":1,"defines":[]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"glsl4":{"vert":"\nprecision highp float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\n  mat3 m = mat3(xAxis,yAxis,zAxis);\n  float trace = m[0][0] + m[1][1] + m[2][2];\n  vec4 quat;\n  if (trace > 0.) {\n    float s = 0.5 / sqrt(trace + 1.0);\n    quat.w = 0.25 / s;\n    quat.x = (m[2][1] - m[1][2]) * s;\n    quat.y = (m[0][2] - m[2][0]) * s;\n    quat.z = (m[1][0] - m[0][1]) * s;\n  } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n    float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n    quat.w = (m[2][1] - m[1][2]) / s;\n    quat.x = 0.25 * s;\n    quat.y = (m[0][1] + m[1][0]) / s;\n    quat.z = (m[0][2] + m[2][0]) / s;\n  } else if (m[1][1] > m[2][2]) {\n    float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n    quat.w = (m[0][2] - m[2][0]) / s;\n    quat.x = (m[0][1] + m[1][0]) / s;\n    quat.y = 0.25 * s;\n    quat.z = (m[1][2] + m[2][1]) / s;\n  } else {\n    float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n    quat.w = (m[1][0] - m[0][1]) / s;\n    quat.x = (m[0][2] + m[2][0]) / s;\n    quat.y = (m[1][2] + m[2][1]) / s;\n    quat.z = 0.25 * s;\n  }\n  float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n  if (len > 0.) {\n    len = 1. / sqrt(len);\n    quat.x = quat.x * len;\n    quat.y = quat.y * len;\n    quat.z = quat.z * len;\n    quat.w = quat.w * len;\n  }\n  return quat;\n}\nvec4 quaternionFromEuler (vec3 angle){\n  float x = angle.x / 2.;\n  float y = angle.y / 2.;\n  float z = angle.z / 2.;\n  float sx = sin(x);\n  float cx = cos(x);\n  float sy = sin(y);\n  float cy = cos(y);\n  float sz = sin(z);\n  float cz = cos(z);\n  vec4 quat = vec4(0);\n  quat.x = sx * cy * cz + cx * sy * sz;\n  quat.y = cx * sy * cz + sx * cy * sz;\n  quat.z = cx * cy * sz - sx * sy * cz;\n  quat.w = cx * cy * cz - sx * sy * sz;\n  return quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\n  float x2 = q.x + q.x;\n  float y2 = q.y + q.y;\n  float z2 = q.z + q.z;\n  float xx = q.x * x2;\n  float xy = q.x * y2;\n  float xz = q.x * z2;\n  float yy = q.y * y2;\n  float yz = q.y * z2;\n  float zz = q.z * z2;\n  float wx = q.w * x2;\n  float wy = q.w * y2;\n  float wz = q.w * z2;\n  return mat4(\n    1. - (yy + zz), xy + wz, xz - wy, 0,\n    xy - wz, 1. - (xx + zz), yz + wx, 0,\n    xz + wy, yz - wx, 1. - (xx + yy), 0,\n    p.x, p.y, p.z, 1\n  );\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  float x2 = x + x;\n  float y2 = y + y;\n  float z2 = z + z;\n  float xx = x * x2;\n  float xy = x * y2;\n  float xz = x * z2;\n  float yy = y * y2;\n  float yz = y * z2;\n  float zz = z * z2;\n  float wx = w * x2;\n  float wy = w * y2;\n  float wz = w * z2;\n  float sx = s.x;\n  float sy = s.y;\n  float sz = s.z;\n  return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n    (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n    (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n    t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\n  vec4 quat;\n  quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n  quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n  quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n  quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n  return quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\n  float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n  float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n  float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n  float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n  v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n  v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n  v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n  vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n  vec4 rotQuat = quatMultiply(viewQuat, q);\n  rotateVecFromQuat(pos, rotQuat);\n  return pos;\n}\nmat3 quatToMat3(vec4 q) {\n  vec3 m0 = vec3(\n    1.0 - 2.0 * q.y * q.y - 2.0 * q.z * q.z,\n    2.0 * q.x * q.y + 2.0 * q.w * q.z,\n    2.0 * q.x * q.z - 2.0 * q.w * q.y);\n\tvec3 m1 = vec3(\n    2.0 * q.x * q.y - 2.0 * q.w * q.z,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.z * q.z,\n    2.0 * q.y * q.z + 2.0 * q.w * q.x);\n\tvec3 m2 = vec3(\n    2.0 * q.x * q.z + 2.0 * q.w * q.y,\n    2.0 * q.y * q.z - 2.0 * q.w * q.x,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.y * q.y);\n  return mat3(m0, m1, m2);\n}\nvec4 mat3ToQuat(mat3 mat) {\n  float tr = mat[0][0] + mat[1][1] + mat[2][2];\n\tfloat qw, qx, qy, qz;\n  if (tr > 0.0) {\n    float S = sqrt(tr + 1.0) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = 0.25 * S;\n\t  qx = (mat[1][2] - mat[2][1]) * invS;\n\t  qy = (mat[2][0] - mat[0][2]) * invS;\n\t  qz = (mat[0][1] - mat[1][0]) * invS;\n  } else if ((mat[0][0] > mat[1][1])&&(mat[0][0] > mat[2][2])) {\n    float S = sqrt(1.0 + mat[0][0] - mat[1][1] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[1][2] - mat[2][1]) * invS;\n\t  qx = 0.25 * S;\n\t  qy = (mat[1][0] + mat[0][1]) * invS;\n\t  qz = (mat[2][0] + mat[0][2]) * invS;\n  } else if (mat[1][1] > mat[2][2]) {\n\t  float S = sqrt(1.0 + mat[1][1] - mat[0][0] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[2][0] - mat[0][2]) * invS;\n\t  qx = (mat[1][0] + mat[0][1]) * invS;\n\t  qy = 0.25 * S;\n\t  qz = (mat[2][1] + mat[1][2]) * invS;\n  } else {\n\t  float S = sqrt(1.0 + mat[2][2] - mat[0][0] - mat[1][1]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[0][1] - mat[1][0]) * invS;\n\t  qx = (mat[2][0] + mat[0][2]) * invS;\n\t  qy = (mat[2][1] + mat[1][2]) * invS;\n\t  qz = 0.25 * S;\n  }\n  return vec4(qx, qy, qz, qw);\n}\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 mainTiling_Offset;\n  vec4 frameTile_velLenScale;\n  vec4 scale;\n  vec4 nodeRotation;\n};\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(set = 2, binding = 0) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n};\nlayout(location = 0) out mediump vec2 uv;\nlayout(location = 1) out mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n  , mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n  vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n  vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = vec3(1, 0, 0);\n  vec3 camY = vec3(0, 0, -1);\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  rotateVecFromQuat(viewSpaceVert, q);\n  vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n  vec3 camY = vec3(0, 1, 0);\n  vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n  pos.xyz += offset;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\n  vertIndex.y = 1. - vertIndex.y;\n#endif\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec3 a_texCoord;\nlayout(location = 2) in vec3 a_texCoord1;\nlayout(location = 3) in vec3 a_texCoord2;\nlayout(location = 4) in vec4 a_color;\n#if CC_RENDER_MODE == 1\n  layout(location = 8) in vec3 a_color1;\n#endif\n#if CC_RENDER_MODE == 4\n  layout(location = 6) in vec3 a_texCoord3;\n  layout(location = 7) in vec3 a_normal;\n  layout(location = 8) in vec4 a_color1;\n#endif\nvec4 lpvs_main () {\n  vec3 compScale = scale.xyz * a_texCoord1;\n  vec4 pos = vec4(a_position, 1);\n  #if CC_RENDER_MODE == 1\n    vec4 velocity = vec4(a_color1.xyz, 0);\n  #endif\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_RENDER_MODE == 1\n      velocity = cc_matWorld * velocity;\n    #endif\n  #endif\n  #if ROTATION_OVER_TIME_MODULE_ENABLE\n    vec3 rotTmp = a_texCoord2;\n    float mulFactor = 1.0;\n    if (rotTmp.x > 10.0 * 0.5) {\n        rotTmp.x -= 10.0;\n        mulFactor = -1.0;\n    }\n    vec4 rot = vec4(rotTmp, 0.0);\n    rot.w = mulFactor * sqrt(abs(1.0 - rot.x * rot.x - rot.y * rot.y - rot.z * rot.z));\n  #else\n    #if CC_RENDER_MODE != 4\n      #if CC_RENDER_MODE == 0\n        vec3 rotEuler = a_texCoord2;\n      #elif CC_RENDER_MODE == 1\n        vec3 rotEuler = vec3(0.);\n      #else\n        vec3 rotEuler = vec3(0., 0., a_texCoord2.z);\n      #endif\n      vec4 rot = quaternionFromEuler(rotEuler);\n    #else\n      vec4 rot = quaternionFromEuler(a_texCoord2);\n    #endif\n  #endif\n  #if CC_RENDER_MODE != 4\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n    #if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_matViewInv);\n    #elif CC_RENDER_MODE == 1\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_cameraPos.xyz, velocity, frameTile_velLenScale.z, frameTile_velLenScale.w, a_texCoord.x);\n    #elif 2\n      computeVertPos(pos, cornerOffset, rot, compScale);\n    #endif\n    color = a_color;\n  #else\n    mat3 rotMat = quatToMat3(rot);\n    mat3 nodeMat = quatToMat3(nodeRotation);\n    rotMat = nodeMat * rotMat;\n    rot = mat3ToQuat(rotMat);\n    mat4 xformNoScale = matrixFromRT(rot, pos.xyz);\n    mat4 xform = matFromRTS(rot, pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n  #endif\n  uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  pos = cc_matViewProj * pos;\n  return pos;\n}\nvoid main() { gl_Position = lpvs_main(); }","frag":"\nprecision mediump float;\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nlayout(location = 0) in vec2 uv;\nlayout(location = 1) in vec4 color;\nlayout(set = 1, binding = 1) uniform sampler2D mainTexture;\nvec4 addSmooth () {\n  vec4 col = color * texture(mainTexture, uv);\n  col.rgb *= col.a;\n  return CCFragOutput(col);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = addSmooth(); }"},"glsl3":{"vert":"\nprecision highp float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\n  mat3 m = mat3(xAxis,yAxis,zAxis);\n  float trace = m[0][0] + m[1][1] + m[2][2];\n  vec4 quat;\n  if (trace > 0.) {\n    float s = 0.5 / sqrt(trace + 1.0);\n    quat.w = 0.25 / s;\n    quat.x = (m[2][1] - m[1][2]) * s;\n    quat.y = (m[0][2] - m[2][0]) * s;\n    quat.z = (m[1][0] - m[0][1]) * s;\n  } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n    float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n    quat.w = (m[2][1] - m[1][2]) / s;\n    quat.x = 0.25 * s;\n    quat.y = (m[0][1] + m[1][0]) / s;\n    quat.z = (m[0][2] + m[2][0]) / s;\n  } else if (m[1][1] > m[2][2]) {\n    float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n    quat.w = (m[0][2] - m[2][0]) / s;\n    quat.x = (m[0][1] + m[1][0]) / s;\n    quat.y = 0.25 * s;\n    quat.z = (m[1][2] + m[2][1]) / s;\n  } else {\n    float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n    quat.w = (m[1][0] - m[0][1]) / s;\n    quat.x = (m[0][2] + m[2][0]) / s;\n    quat.y = (m[1][2] + m[2][1]) / s;\n    quat.z = 0.25 * s;\n  }\n  float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n  if (len > 0.) {\n    len = 1. / sqrt(len);\n    quat.x = quat.x * len;\n    quat.y = quat.y * len;\n    quat.z = quat.z * len;\n    quat.w = quat.w * len;\n  }\n  return quat;\n}\nvec4 quaternionFromEuler (vec3 angle){\n  float x = angle.x / 2.;\n  float y = angle.y / 2.;\n  float z = angle.z / 2.;\n  float sx = sin(x);\n  float cx = cos(x);\n  float sy = sin(y);\n  float cy = cos(y);\n  float sz = sin(z);\n  float cz = cos(z);\n  vec4 quat = vec4(0);\n  quat.x = sx * cy * cz + cx * sy * sz;\n  quat.y = cx * sy * cz + sx * cy * sz;\n  quat.z = cx * cy * sz - sx * sy * cz;\n  quat.w = cx * cy * cz - sx * sy * sz;\n  return quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\n  float x2 = q.x + q.x;\n  float y2 = q.y + q.y;\n  float z2 = q.z + q.z;\n  float xx = q.x * x2;\n  float xy = q.x * y2;\n  float xz = q.x * z2;\n  float yy = q.y * y2;\n  float yz = q.y * z2;\n  float zz = q.z * z2;\n  float wx = q.w * x2;\n  float wy = q.w * y2;\n  float wz = q.w * z2;\n  return mat4(\n    1. - (yy + zz), xy + wz, xz - wy, 0,\n    xy - wz, 1. - (xx + zz), yz + wx, 0,\n    xz + wy, yz - wx, 1. - (xx + yy), 0,\n    p.x, p.y, p.z, 1\n  );\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  float x2 = x + x;\n  float y2 = y + y;\n  float z2 = z + z;\n  float xx = x * x2;\n  float xy = x * y2;\n  float xz = x * z2;\n  float yy = y * y2;\n  float yz = y * z2;\n  float zz = z * z2;\n  float wx = w * x2;\n  float wy = w * y2;\n  float wz = w * z2;\n  float sx = s.x;\n  float sy = s.y;\n  float sz = s.z;\n  return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n    (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n    (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n    t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\n  vec4 quat;\n  quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n  quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n  quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n  quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n  return quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\n  float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n  float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n  float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n  float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n  v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n  v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n  v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n  vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n  vec4 rotQuat = quatMultiply(viewQuat, q);\n  rotateVecFromQuat(pos, rotQuat);\n  return pos;\n}\nmat3 quatToMat3(vec4 q) {\n  vec3 m0 = vec3(\n    1.0 - 2.0 * q.y * q.y - 2.0 * q.z * q.z,\n    2.0 * q.x * q.y + 2.0 * q.w * q.z,\n    2.0 * q.x * q.z - 2.0 * q.w * q.y);\n\tvec3 m1 = vec3(\n    2.0 * q.x * q.y - 2.0 * q.w * q.z,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.z * q.z,\n    2.0 * q.y * q.z + 2.0 * q.w * q.x);\n\tvec3 m2 = vec3(\n    2.0 * q.x * q.z + 2.0 * q.w * q.y,\n    2.0 * q.y * q.z - 2.0 * q.w * q.x,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.y * q.y);\n  return mat3(m0, m1, m2);\n}\nvec4 mat3ToQuat(mat3 mat) {\n  float tr = mat[0][0] + mat[1][1] + mat[2][2];\n\tfloat qw, qx, qy, qz;\n  if (tr > 0.0) {\n    float S = sqrt(tr + 1.0) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = 0.25 * S;\n\t  qx = (mat[1][2] - mat[2][1]) * invS;\n\t  qy = (mat[2][0] - mat[0][2]) * invS;\n\t  qz = (mat[0][1] - mat[1][0]) * invS;\n  } else if ((mat[0][0] > mat[1][1])&&(mat[0][0] > mat[2][2])) {\n    float S = sqrt(1.0 + mat[0][0] - mat[1][1] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[1][2] - mat[2][1]) * invS;\n\t  qx = 0.25 * S;\n\t  qy = (mat[1][0] + mat[0][1]) * invS;\n\t  qz = (mat[2][0] + mat[0][2]) * invS;\n  } else if (mat[1][1] > mat[2][2]) {\n\t  float S = sqrt(1.0 + mat[1][1] - mat[0][0] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[2][0] - mat[0][2]) * invS;\n\t  qx = (mat[1][0] + mat[0][1]) * invS;\n\t  qy = 0.25 * S;\n\t  qz = (mat[2][1] + mat[1][2]) * invS;\n  } else {\n\t  float S = sqrt(1.0 + mat[2][2] - mat[0][0] - mat[1][1]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[0][1] - mat[1][0]) * invS;\n\t  qx = (mat[2][0] + mat[0][2]) * invS;\n\t  qy = (mat[2][1] + mat[1][2]) * invS;\n\t  qz = 0.25 * S;\n  }\n  return vec4(qx, qy, qz, qw);\n}\nlayout(std140) uniform Constants {\n  vec4 mainTiling_Offset;\n  vec4 frameTile_velLenScale;\n  vec4 scale;\n  vec4 nodeRotation;\n};\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(std140) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n};\nout mediump vec2 uv;\nout mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n  , mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n  vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n  vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = vec3(1, 0, 0);\n  vec3 camY = vec3(0, 0, -1);\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  rotateVecFromQuat(viewSpaceVert, q);\n  vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n  vec3 camY = vec3(0, 1, 0);\n  vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n  pos.xyz += offset;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\n  vertIndex.y = 1. - vertIndex.y;\n#endif\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nin vec3 a_position;\nin vec3 a_texCoord;\nin vec3 a_texCoord1;\nin vec3 a_texCoord2;\nin vec4 a_color;\n#if CC_RENDER_MODE == 1\n  in vec3 a_color1;\n#endif\n#if CC_RENDER_MODE == 4\n  in vec3 a_texCoord3;\n  in vec3 a_normal;\n  in vec4 a_color1;\n#endif\nvec4 lpvs_main () {\n  vec3 compScale = scale.xyz * a_texCoord1;\n  vec4 pos = vec4(a_position, 1);\n  #if CC_RENDER_MODE == 1\n    vec4 velocity = vec4(a_color1.xyz, 0);\n  #endif\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_RENDER_MODE == 1\n      velocity = cc_matWorld * velocity;\n    #endif\n  #endif\n  #if ROTATION_OVER_TIME_MODULE_ENABLE\n    vec3 rotTmp = a_texCoord2;\n    float mulFactor = 1.0;\n    if (rotTmp.x > 10.0 * 0.5) {\n        rotTmp.x -= 10.0;\n        mulFactor = -1.0;\n    }\n    vec4 rot = vec4(rotTmp, 0.0);\n    rot.w = mulFactor * sqrt(abs(1.0 - rot.x * rot.x - rot.y * rot.y - rot.z * rot.z));\n  #else\n    #if CC_RENDER_MODE != 4\n      #if CC_RENDER_MODE == 0\n        vec3 rotEuler = a_texCoord2;\n      #elif CC_RENDER_MODE == 1\n        vec3 rotEuler = vec3(0.);\n      #else\n        vec3 rotEuler = vec3(0., 0., a_texCoord2.z);\n      #endif\n      vec4 rot = quaternionFromEuler(rotEuler);\n    #else\n      vec4 rot = quaternionFromEuler(a_texCoord2);\n    #endif\n  #endif\n  #if CC_RENDER_MODE != 4\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n    #if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_matViewInv);\n    #elif CC_RENDER_MODE == 1\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_cameraPos.xyz, velocity, frameTile_velLenScale.z, frameTile_velLenScale.w, a_texCoord.x);\n    #elif 2\n      computeVertPos(pos, cornerOffset, rot, compScale);\n    #endif\n    color = a_color;\n  #else\n    mat3 rotMat = quatToMat3(rot);\n    mat3 nodeMat = quatToMat3(nodeRotation);\n    rotMat = nodeMat * rotMat;\n    rot = mat3ToQuat(rotMat);\n    mat4 xformNoScale = matrixFromRT(rot, pos.xyz);\n    mat4 xform = matFromRTS(rot, pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n  #endif\n  uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  pos = cc_matViewProj * pos;\n  return pos;\n}\nvoid main() { gl_Position = lpvs_main(); }","frag":"\nprecision mediump float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nin vec2 uv;\nin vec4 color;\nuniform sampler2D mainTexture;\nvec4 addSmooth () {\n  vec4 col = color * texture(mainTexture, uv);\n  col.rgb *= col.a;\n  return CCFragOutput(col);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = addSmooth(); }"},"glsl1":{"vert":"\nprecision highp float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\n  mat3 m = mat3(xAxis,yAxis,zAxis);\n  float trace = m[0][0] + m[1][1] + m[2][2];\n  vec4 quat;\n  if (trace > 0.) {\n    float s = 0.5 / sqrt(trace + 1.0);\n    quat.w = 0.25 / s;\n    quat.x = (m[2][1] - m[1][2]) * s;\n    quat.y = (m[0][2] - m[2][0]) * s;\n    quat.z = (m[1][0] - m[0][1]) * s;\n  } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n    float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n    quat.w = (m[2][1] - m[1][2]) / s;\n    quat.x = 0.25 * s;\n    quat.y = (m[0][1] + m[1][0]) / s;\n    quat.z = (m[0][2] + m[2][0]) / s;\n  } else if (m[1][1] > m[2][2]) {\n    float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n    quat.w = (m[0][2] - m[2][0]) / s;\n    quat.x = (m[0][1] + m[1][0]) / s;\n    quat.y = 0.25 * s;\n    quat.z = (m[1][2] + m[2][1]) / s;\n  } else {\n    float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n    quat.w = (m[1][0] - m[0][1]) / s;\n    quat.x = (m[0][2] + m[2][0]) / s;\n    quat.y = (m[1][2] + m[2][1]) / s;\n    quat.z = 0.25 * s;\n  }\n  float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n  if (len > 0.) {\n    len = 1. / sqrt(len);\n    quat.x = quat.x * len;\n    quat.y = quat.y * len;\n    quat.z = quat.z * len;\n    quat.w = quat.w * len;\n  }\n  return quat;\n}\nvec4 quaternionFromEuler (vec3 angle){\n  float x = angle.x / 2.;\n  float y = angle.y / 2.;\n  float z = angle.z / 2.;\n  float sx = sin(x);\n  float cx = cos(x);\n  float sy = sin(y);\n  float cy = cos(y);\n  float sz = sin(z);\n  float cz = cos(z);\n  vec4 quat = vec4(0);\n  quat.x = sx * cy * cz + cx * sy * sz;\n  quat.y = cx * sy * cz + sx * cy * sz;\n  quat.z = cx * cy * sz - sx * sy * cz;\n  quat.w = cx * cy * cz - sx * sy * sz;\n  return quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\n  float x2 = q.x + q.x;\n  float y2 = q.y + q.y;\n  float z2 = q.z + q.z;\n  float xx = q.x * x2;\n  float xy = q.x * y2;\n  float xz = q.x * z2;\n  float yy = q.y * y2;\n  float yz = q.y * z2;\n  float zz = q.z * z2;\n  float wx = q.w * x2;\n  float wy = q.w * y2;\n  float wz = q.w * z2;\n  return mat4(\n    1. - (yy + zz), xy + wz, xz - wy, 0,\n    xy - wz, 1. - (xx + zz), yz + wx, 0,\n    xz + wy, yz - wx, 1. - (xx + yy), 0,\n    p.x, p.y, p.z, 1\n  );\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  float x2 = x + x;\n  float y2 = y + y;\n  float z2 = z + z;\n  float xx = x * x2;\n  float xy = x * y2;\n  float xz = x * z2;\n  float yy = y * y2;\n  float yz = y * z2;\n  float zz = z * z2;\n  float wx = w * x2;\n  float wy = w * y2;\n  float wz = w * z2;\n  float sx = s.x;\n  float sy = s.y;\n  float sz = s.z;\n  return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n    (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n    (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n    t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\n  vec4 quat;\n  quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n  quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n  quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n  quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n  return quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\n  float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n  float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n  float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n  float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n  v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n  v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n  v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n  vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n  vec4 rotQuat = quatMultiply(viewQuat, q);\n  rotateVecFromQuat(pos, rotQuat);\n  return pos;\n}\nmat3 quatToMat3(vec4 q) {\n  vec3 m0 = vec3(\n    1.0 - 2.0 * q.y * q.y - 2.0 * q.z * q.z,\n    2.0 * q.x * q.y + 2.0 * q.w * q.z,\n    2.0 * q.x * q.z - 2.0 * q.w * q.y);\n\tvec3 m1 = vec3(\n    2.0 * q.x * q.y - 2.0 * q.w * q.z,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.z * q.z,\n    2.0 * q.y * q.z + 2.0 * q.w * q.x);\n\tvec3 m2 = vec3(\n    2.0 * q.x * q.z + 2.0 * q.w * q.y,\n    2.0 * q.y * q.z - 2.0 * q.w * q.x,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.y * q.y);\n  return mat3(m0, m1, m2);\n}\nvec4 mat3ToQuat(mat3 mat) {\n  float tr = mat[0][0] + mat[1][1] + mat[2][2];\n\tfloat qw, qx, qy, qz;\n  if (tr > 0.0) {\n    float S = sqrt(tr + 1.0) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = 0.25 * S;\n\t  qx = (mat[1][2] - mat[2][1]) * invS;\n\t  qy = (mat[2][0] - mat[0][2]) * invS;\n\t  qz = (mat[0][1] - mat[1][0]) * invS;\n  } else if ((mat[0][0] > mat[1][1])&&(mat[0][0] > mat[2][2])) {\n    float S = sqrt(1.0 + mat[0][0] - mat[1][1] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[1][2] - mat[2][1]) * invS;\n\t  qx = 0.25 * S;\n\t  qy = (mat[1][0] + mat[0][1]) * invS;\n\t  qz = (mat[2][0] + mat[0][2]) * invS;\n  } else if (mat[1][1] > mat[2][2]) {\n\t  float S = sqrt(1.0 + mat[1][1] - mat[0][0] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[2][0] - mat[0][2]) * invS;\n\t  qx = (mat[1][0] + mat[0][1]) * invS;\n\t  qy = 0.25 * S;\n\t  qz = (mat[2][1] + mat[1][2]) * invS;\n  } else {\n\t  float S = sqrt(1.0 + mat[2][2] - mat[0][0] - mat[1][1]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[0][1] - mat[1][0]) * invS;\n\t  qx = (mat[2][0] + mat[0][2]) * invS;\n\t  qy = (mat[2][1] + mat[1][2]) * invS;\n\t  qz = 0.25 * S;\n  }\n  return vec4(qx, qy, qz, qw);\n}\n   uniform vec4 mainTiling_Offset;\n   uniform vec4 frameTile_velLenScale;\n   uniform vec4 scale;\n   uniform vec4 nodeRotation;\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matViewInv;\n  uniform highp mat4 cc_matViewProj;\n  uniform highp vec4 cc_cameraPos;\nuniform highp mat4 cc_matWorld;\nvarying mediump vec2 uv;\nvarying mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n  , mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n  vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n  vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = vec3(1, 0, 0);\n  vec3 camY = vec3(0, 0, -1);\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  rotateVecFromQuat(viewSpaceVert, q);\n  vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n  vec3 camY = vec3(0, 1, 0);\n  vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n  pos.xyz += offset;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\n  vertIndex.y = 1. - vertIndex.y;\n#endif\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nattribute vec3 a_position;\nattribute vec3 a_texCoord;\nattribute vec3 a_texCoord1;\nattribute vec3 a_texCoord2;\nattribute vec4 a_color;\n#if CC_RENDER_MODE == 1\n  attribute vec3 a_color1;\n#endif\n#if CC_RENDER_MODE == 4\n  attribute vec3 a_texCoord3;\n  attribute vec3 a_normal;\n  attribute vec4 a_color1;\n#endif\nvec4 lpvs_main () {\n  vec3 compScale = scale.xyz * a_texCoord1;\n  vec4 pos = vec4(a_position, 1);\n  #if CC_RENDER_MODE == 1\n    vec4 velocity = vec4(a_color1.xyz, 0);\n  #endif\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_RENDER_MODE == 1\n      velocity = cc_matWorld * velocity;\n    #endif\n  #endif\n  #if ROTATION_OVER_TIME_MODULE_ENABLE\n    vec3 rotTmp = a_texCoord2;\n    float mulFactor = 1.0;\n    if (rotTmp.x > 10.0 * 0.5) {\n        rotTmp.x -= 10.0;\n        mulFactor = -1.0;\n    }\n    vec4 rot = vec4(rotTmp, 0.0);\n    rot.w = mulFactor * sqrt(abs(1.0 - rot.x * rot.x - rot.y * rot.y - rot.z * rot.z));\n  #else\n    #if CC_RENDER_MODE != 4\n      #if CC_RENDER_MODE == 0\n        vec3 rotEuler = a_texCoord2;\n      #elif CC_RENDER_MODE == 1\n        vec3 rotEuler = vec3(0.);\n      #else\n        vec3 rotEuler = vec3(0., 0., a_texCoord2.z);\n      #endif\n      vec4 rot = quaternionFromEuler(rotEuler);\n    #else\n      vec4 rot = quaternionFromEuler(a_texCoord2);\n    #endif\n  #endif\n  #if CC_RENDER_MODE != 4\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n    #if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_matViewInv);\n    #elif CC_RENDER_MODE == 1\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_cameraPos.xyz, velocity, frameTile_velLenScale.z, frameTile_velLenScale.w, a_texCoord.x);\n    #elif 2\n      computeVertPos(pos, cornerOffset, rot, compScale);\n    #endif\n    color = a_color;\n  #else\n    mat3 rotMat = quatToMat3(rot);\n    mat3 nodeMat = quatToMat3(nodeRotation);\n    rotMat = nodeMat * rotMat;\n    rot = mat3ToQuat(rotMat);\n    mat4 xformNoScale = matrixFromRT(rot, pos.xyz);\n    mat4 xform = matFromRTS(rot, pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n  #endif\n  uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  pos = cc_matViewProj * pos;\n  return pos;\n}\nvoid main() { gl_Position = lpvs_main(); }","frag":"\nprecision mediump float;\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nvarying vec2 uv;\nvarying vec4 color;\nuniform sampler2D mainTexture;\nvec4 addSmooth () {\n  vec4 col = color * texture2D(mainTexture, uv);\n  col.rgb *= col.a;\n  return CCFragOutput(col);\n}\nvoid main() { gl_FragColor = addSmooth(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":52,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":39}},"defines":[{"name":"CC_RENDER_MODE","type":"number","defines":[],"range":[0,4]},{"name":"CC_USE_WORLD_SPACE","type":"boolean","defines":[]},{"name":"ROTATION_OVER_TIME_MODULE_ENABLE","type":"boolean","defines":[]}]},{"hash":3775475229,"name":"builtin-particle|particle-vs-legacy:lpvs_main|no-tint-fs:premultiplied","blocks":[{"name":"Constants","stageFlags":1,"binding":0,"members":[{"name":"mainTiling_Offset","type":16,"count":1},{"name":"frameTile_velLenScale","type":16,"count":1},{"name":"scale","type":16,"count":1},{"name":"nodeRotation","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"mainTexture","type":28,"count":1,"stageFlags":16,"binding":1,"defines":[]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_texCoord","format":32,"location":1,"defines":[]},{"name":"a_texCoord1","format":32,"location":2,"defines":[]},{"name":"a_texCoord2","format":32,"location":3,"defines":[]},{"name":"a_color","format":44,"location":4,"defines":[]},{"name":"a_color1","format":32,"location":8,"defines":["CC_RENDER_MODE"]},{"name":"a_texCoord3","format":32,"location":6,"defines":["CC_RENDER_MODE"]},{"name":"a_normal","format":32,"location":7,"defines":["CC_RENDER_MODE"]}],"varyings":[{"name":"uv","type":14,"count":1,"stageFlags":17,"location":0,"defines":[]},{"name":"color","type":16,"count":1,"stageFlags":17,"location":1,"defines":[]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"glsl4":{"vert":"\nprecision highp float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\n  mat3 m = mat3(xAxis,yAxis,zAxis);\n  float trace = m[0][0] + m[1][1] + m[2][2];\n  vec4 quat;\n  if (trace > 0.) {\n    float s = 0.5 / sqrt(trace + 1.0);\n    quat.w = 0.25 / s;\n    quat.x = (m[2][1] - m[1][2]) * s;\n    quat.y = (m[0][2] - m[2][0]) * s;\n    quat.z = (m[1][0] - m[0][1]) * s;\n  } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n    float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n    quat.w = (m[2][1] - m[1][2]) / s;\n    quat.x = 0.25 * s;\n    quat.y = (m[0][1] + m[1][0]) / s;\n    quat.z = (m[0][2] + m[2][0]) / s;\n  } else if (m[1][1] > m[2][2]) {\n    float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n    quat.w = (m[0][2] - m[2][0]) / s;\n    quat.x = (m[0][1] + m[1][0]) / s;\n    quat.y = 0.25 * s;\n    quat.z = (m[1][2] + m[2][1]) / s;\n  } else {\n    float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n    quat.w = (m[1][0] - m[0][1]) / s;\n    quat.x = (m[0][2] + m[2][0]) / s;\n    quat.y = (m[1][2] + m[2][1]) / s;\n    quat.z = 0.25 * s;\n  }\n  float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n  if (len > 0.) {\n    len = 1. / sqrt(len);\n    quat.x = quat.x * len;\n    quat.y = quat.y * len;\n    quat.z = quat.z * len;\n    quat.w = quat.w * len;\n  }\n  return quat;\n}\nvec4 quaternionFromEuler (vec3 angle){\n  float x = angle.x / 2.;\n  float y = angle.y / 2.;\n  float z = angle.z / 2.;\n  float sx = sin(x);\n  float cx = cos(x);\n  float sy = sin(y);\n  float cy = cos(y);\n  float sz = sin(z);\n  float cz = cos(z);\n  vec4 quat = vec4(0);\n  quat.x = sx * cy * cz + cx * sy * sz;\n  quat.y = cx * sy * cz + sx * cy * sz;\n  quat.z = cx * cy * sz - sx * sy * cz;\n  quat.w = cx * cy * cz - sx * sy * sz;\n  return quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\n  float x2 = q.x + q.x;\n  float y2 = q.y + q.y;\n  float z2 = q.z + q.z;\n  float xx = q.x * x2;\n  float xy = q.x * y2;\n  float xz = q.x * z2;\n  float yy = q.y * y2;\n  float yz = q.y * z2;\n  float zz = q.z * z2;\n  float wx = q.w * x2;\n  float wy = q.w * y2;\n  float wz = q.w * z2;\n  return mat4(\n    1. - (yy + zz), xy + wz, xz - wy, 0,\n    xy - wz, 1. - (xx + zz), yz + wx, 0,\n    xz + wy, yz - wx, 1. - (xx + yy), 0,\n    p.x, p.y, p.z, 1\n  );\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  float x2 = x + x;\n  float y2 = y + y;\n  float z2 = z + z;\n  float xx = x * x2;\n  float xy = x * y2;\n  float xz = x * z2;\n  float yy = y * y2;\n  float yz = y * z2;\n  float zz = z * z2;\n  float wx = w * x2;\n  float wy = w * y2;\n  float wz = w * z2;\n  float sx = s.x;\n  float sy = s.y;\n  float sz = s.z;\n  return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n    (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n    (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n    t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\n  vec4 quat;\n  quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n  quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n  quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n  quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n  return quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\n  float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n  float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n  float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n  float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n  v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n  v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n  v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n  vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n  vec4 rotQuat = quatMultiply(viewQuat, q);\n  rotateVecFromQuat(pos, rotQuat);\n  return pos;\n}\nmat3 quatToMat3(vec4 q) {\n  vec3 m0 = vec3(\n    1.0 - 2.0 * q.y * q.y - 2.0 * q.z * q.z,\n    2.0 * q.x * q.y + 2.0 * q.w * q.z,\n    2.0 * q.x * q.z - 2.0 * q.w * q.y);\n\tvec3 m1 = vec3(\n    2.0 * q.x * q.y - 2.0 * q.w * q.z,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.z * q.z,\n    2.0 * q.y * q.z + 2.0 * q.w * q.x);\n\tvec3 m2 = vec3(\n    2.0 * q.x * q.z + 2.0 * q.w * q.y,\n    2.0 * q.y * q.z - 2.0 * q.w * q.x,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.y * q.y);\n  return mat3(m0, m1, m2);\n}\nvec4 mat3ToQuat(mat3 mat) {\n  float tr = mat[0][0] + mat[1][1] + mat[2][2];\n\tfloat qw, qx, qy, qz;\n  if (tr > 0.0) {\n    float S = sqrt(tr + 1.0) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = 0.25 * S;\n\t  qx = (mat[1][2] - mat[2][1]) * invS;\n\t  qy = (mat[2][0] - mat[0][2]) * invS;\n\t  qz = (mat[0][1] - mat[1][0]) * invS;\n  } else if ((mat[0][0] > mat[1][1])&&(mat[0][0] > mat[2][2])) {\n    float S = sqrt(1.0 + mat[0][0] - mat[1][1] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[1][2] - mat[2][1]) * invS;\n\t  qx = 0.25 * S;\n\t  qy = (mat[1][0] + mat[0][1]) * invS;\n\t  qz = (mat[2][0] + mat[0][2]) * invS;\n  } else if (mat[1][1] > mat[2][2]) {\n\t  float S = sqrt(1.0 + mat[1][1] - mat[0][0] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[2][0] - mat[0][2]) * invS;\n\t  qx = (mat[1][0] + mat[0][1]) * invS;\n\t  qy = 0.25 * S;\n\t  qz = (mat[2][1] + mat[1][2]) * invS;\n  } else {\n\t  float S = sqrt(1.0 + mat[2][2] - mat[0][0] - mat[1][1]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[0][1] - mat[1][0]) * invS;\n\t  qx = (mat[2][0] + mat[0][2]) * invS;\n\t  qy = (mat[2][1] + mat[1][2]) * invS;\n\t  qz = 0.25 * S;\n  }\n  return vec4(qx, qy, qz, qw);\n}\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 mainTiling_Offset;\n  vec4 frameTile_velLenScale;\n  vec4 scale;\n  vec4 nodeRotation;\n};\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(set = 2, binding = 0) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n};\nlayout(location = 0) out mediump vec2 uv;\nlayout(location = 1) out mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n  , mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n  vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n  vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = vec3(1, 0, 0);\n  vec3 camY = vec3(0, 0, -1);\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  rotateVecFromQuat(viewSpaceVert, q);\n  vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n  vec3 camY = vec3(0, 1, 0);\n  vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n  pos.xyz += offset;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\n  vertIndex.y = 1. - vertIndex.y;\n#endif\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec3 a_texCoord;\nlayout(location = 2) in vec3 a_texCoord1;\nlayout(location = 3) in vec3 a_texCoord2;\nlayout(location = 4) in vec4 a_color;\n#if CC_RENDER_MODE == 1\n  layout(location = 8) in vec3 a_color1;\n#endif\n#if CC_RENDER_MODE == 4\n  layout(location = 6) in vec3 a_texCoord3;\n  layout(location = 7) in vec3 a_normal;\n  layout(location = 8) in vec4 a_color1;\n#endif\nvec4 lpvs_main () {\n  vec3 compScale = scale.xyz * a_texCoord1;\n  vec4 pos = vec4(a_position, 1);\n  #if CC_RENDER_MODE == 1\n    vec4 velocity = vec4(a_color1.xyz, 0);\n  #endif\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_RENDER_MODE == 1\n      velocity = cc_matWorld * velocity;\n    #endif\n  #endif\n  #if ROTATION_OVER_TIME_MODULE_ENABLE\n    vec3 rotTmp = a_texCoord2;\n    float mulFactor = 1.0;\n    if (rotTmp.x > 10.0 * 0.5) {\n        rotTmp.x -= 10.0;\n        mulFactor = -1.0;\n    }\n    vec4 rot = vec4(rotTmp, 0.0);\n    rot.w = mulFactor * sqrt(abs(1.0 - rot.x * rot.x - rot.y * rot.y - rot.z * rot.z));\n  #else\n    #if CC_RENDER_MODE != 4\n      #if CC_RENDER_MODE == 0\n        vec3 rotEuler = a_texCoord2;\n      #elif CC_RENDER_MODE == 1\n        vec3 rotEuler = vec3(0.);\n      #else\n        vec3 rotEuler = vec3(0., 0., a_texCoord2.z);\n      #endif\n      vec4 rot = quaternionFromEuler(rotEuler);\n    #else\n      vec4 rot = quaternionFromEuler(a_texCoord2);\n    #endif\n  #endif\n  #if CC_RENDER_MODE != 4\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n    #if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_matViewInv);\n    #elif CC_RENDER_MODE == 1\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_cameraPos.xyz, velocity, frameTile_velLenScale.z, frameTile_velLenScale.w, a_texCoord.x);\n    #elif 2\n      computeVertPos(pos, cornerOffset, rot, compScale);\n    #endif\n    color = a_color;\n  #else\n    mat3 rotMat = quatToMat3(rot);\n    mat3 nodeMat = quatToMat3(nodeRotation);\n    rotMat = nodeMat * rotMat;\n    rot = mat3ToQuat(rotMat);\n    mat4 xformNoScale = matrixFromRT(rot, pos.xyz);\n    mat4 xform = matFromRTS(rot, pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n  #endif\n  uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  pos = cc_matViewProj * pos;\n  return pos;\n}\nvoid main() { gl_Position = lpvs_main(); }","frag":"\nprecision mediump float;\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nlayout(location = 0) in vec2 uv;\nlayout(location = 1) in vec4 color;\nlayout(set = 1, binding = 1) uniform sampler2D mainTexture;\nvec4 premultiplied () {\n  vec4 col = color * texture(mainTexture, uv) * color.a;\n  return CCFragOutput(col);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = premultiplied(); }"},"glsl3":{"vert":"\nprecision highp float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\n  mat3 m = mat3(xAxis,yAxis,zAxis);\n  float trace = m[0][0] + m[1][1] + m[2][2];\n  vec4 quat;\n  if (trace > 0.) {\n    float s = 0.5 / sqrt(trace + 1.0);\n    quat.w = 0.25 / s;\n    quat.x = (m[2][1] - m[1][2]) * s;\n    quat.y = (m[0][2] - m[2][0]) * s;\n    quat.z = (m[1][0] - m[0][1]) * s;\n  } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n    float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n    quat.w = (m[2][1] - m[1][2]) / s;\n    quat.x = 0.25 * s;\n    quat.y = (m[0][1] + m[1][0]) / s;\n    quat.z = (m[0][2] + m[2][0]) / s;\n  } else if (m[1][1] > m[2][2]) {\n    float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n    quat.w = (m[0][2] - m[2][0]) / s;\n    quat.x = (m[0][1] + m[1][0]) / s;\n    quat.y = 0.25 * s;\n    quat.z = (m[1][2] + m[2][1]) / s;\n  } else {\n    float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n    quat.w = (m[1][0] - m[0][1]) / s;\n    quat.x = (m[0][2] + m[2][0]) / s;\n    quat.y = (m[1][2] + m[2][1]) / s;\n    quat.z = 0.25 * s;\n  }\n  float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n  if (len > 0.) {\n    len = 1. / sqrt(len);\n    quat.x = quat.x * len;\n    quat.y = quat.y * len;\n    quat.z = quat.z * len;\n    quat.w = quat.w * len;\n  }\n  return quat;\n}\nvec4 quaternionFromEuler (vec3 angle){\n  float x = angle.x / 2.;\n  float y = angle.y / 2.;\n  float z = angle.z / 2.;\n  float sx = sin(x);\n  float cx = cos(x);\n  float sy = sin(y);\n  float cy = cos(y);\n  float sz = sin(z);\n  float cz = cos(z);\n  vec4 quat = vec4(0);\n  quat.x = sx * cy * cz + cx * sy * sz;\n  quat.y = cx * sy * cz + sx * cy * sz;\n  quat.z = cx * cy * sz - sx * sy * cz;\n  quat.w = cx * cy * cz - sx * sy * sz;\n  return quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\n  float x2 = q.x + q.x;\n  float y2 = q.y + q.y;\n  float z2 = q.z + q.z;\n  float xx = q.x * x2;\n  float xy = q.x * y2;\n  float xz = q.x * z2;\n  float yy = q.y * y2;\n  float yz = q.y * z2;\n  float zz = q.z * z2;\n  float wx = q.w * x2;\n  float wy = q.w * y2;\n  float wz = q.w * z2;\n  return mat4(\n    1. - (yy + zz), xy + wz, xz - wy, 0,\n    xy - wz, 1. - (xx + zz), yz + wx, 0,\n    xz + wy, yz - wx, 1. - (xx + yy), 0,\n    p.x, p.y, p.z, 1\n  );\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  float x2 = x + x;\n  float y2 = y + y;\n  float z2 = z + z;\n  float xx = x * x2;\n  float xy = x * y2;\n  float xz = x * z2;\n  float yy = y * y2;\n  float yz = y * z2;\n  float zz = z * z2;\n  float wx = w * x2;\n  float wy = w * y2;\n  float wz = w * z2;\n  float sx = s.x;\n  float sy = s.y;\n  float sz = s.z;\n  return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n    (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n    (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n    t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\n  vec4 quat;\n  quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n  quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n  quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n  quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n  return quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\n  float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n  float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n  float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n  float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n  v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n  v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n  v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n  vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n  vec4 rotQuat = quatMultiply(viewQuat, q);\n  rotateVecFromQuat(pos, rotQuat);\n  return pos;\n}\nmat3 quatToMat3(vec4 q) {\n  vec3 m0 = vec3(\n    1.0 - 2.0 * q.y * q.y - 2.0 * q.z * q.z,\n    2.0 * q.x * q.y + 2.0 * q.w * q.z,\n    2.0 * q.x * q.z - 2.0 * q.w * q.y);\n\tvec3 m1 = vec3(\n    2.0 * q.x * q.y - 2.0 * q.w * q.z,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.z * q.z,\n    2.0 * q.y * q.z + 2.0 * q.w * q.x);\n\tvec3 m2 = vec3(\n    2.0 * q.x * q.z + 2.0 * q.w * q.y,\n    2.0 * q.y * q.z - 2.0 * q.w * q.x,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.y * q.y);\n  return mat3(m0, m1, m2);\n}\nvec4 mat3ToQuat(mat3 mat) {\n  float tr = mat[0][0] + mat[1][1] + mat[2][2];\n\tfloat qw, qx, qy, qz;\n  if (tr > 0.0) {\n    float S = sqrt(tr + 1.0) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = 0.25 * S;\n\t  qx = (mat[1][2] - mat[2][1]) * invS;\n\t  qy = (mat[2][0] - mat[0][2]) * invS;\n\t  qz = (mat[0][1] - mat[1][0]) * invS;\n  } else if ((mat[0][0] > mat[1][1])&&(mat[0][0] > mat[2][2])) {\n    float S = sqrt(1.0 + mat[0][0] - mat[1][1] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[1][2] - mat[2][1]) * invS;\n\t  qx = 0.25 * S;\n\t  qy = (mat[1][0] + mat[0][1]) * invS;\n\t  qz = (mat[2][0] + mat[0][2]) * invS;\n  } else if (mat[1][1] > mat[2][2]) {\n\t  float S = sqrt(1.0 + mat[1][1] - mat[0][0] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[2][0] - mat[0][2]) * invS;\n\t  qx = (mat[1][0] + mat[0][1]) * invS;\n\t  qy = 0.25 * S;\n\t  qz = (mat[2][1] + mat[1][2]) * invS;\n  } else {\n\t  float S = sqrt(1.0 + mat[2][2] - mat[0][0] - mat[1][1]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[0][1] - mat[1][0]) * invS;\n\t  qx = (mat[2][0] + mat[0][2]) * invS;\n\t  qy = (mat[2][1] + mat[1][2]) * invS;\n\t  qz = 0.25 * S;\n  }\n  return vec4(qx, qy, qz, qw);\n}\nlayout(std140) uniform Constants {\n  vec4 mainTiling_Offset;\n  vec4 frameTile_velLenScale;\n  vec4 scale;\n  vec4 nodeRotation;\n};\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(std140) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n};\nout mediump vec2 uv;\nout mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n  , mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n  vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n  vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = vec3(1, 0, 0);\n  vec3 camY = vec3(0, 0, -1);\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  rotateVecFromQuat(viewSpaceVert, q);\n  vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n  vec3 camY = vec3(0, 1, 0);\n  vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n  pos.xyz += offset;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\n  vertIndex.y = 1. - vertIndex.y;\n#endif\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nin vec3 a_position;\nin vec3 a_texCoord;\nin vec3 a_texCoord1;\nin vec3 a_texCoord2;\nin vec4 a_color;\n#if CC_RENDER_MODE == 1\n  in vec3 a_color1;\n#endif\n#if CC_RENDER_MODE == 4\n  in vec3 a_texCoord3;\n  in vec3 a_normal;\n  in vec4 a_color1;\n#endif\nvec4 lpvs_main () {\n  vec3 compScale = scale.xyz * a_texCoord1;\n  vec4 pos = vec4(a_position, 1);\n  #if CC_RENDER_MODE == 1\n    vec4 velocity = vec4(a_color1.xyz, 0);\n  #endif\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_RENDER_MODE == 1\n      velocity = cc_matWorld * velocity;\n    #endif\n  #endif\n  #if ROTATION_OVER_TIME_MODULE_ENABLE\n    vec3 rotTmp = a_texCoord2;\n    float mulFactor = 1.0;\n    if (rotTmp.x > 10.0 * 0.5) {\n        rotTmp.x -= 10.0;\n        mulFactor = -1.0;\n    }\n    vec4 rot = vec4(rotTmp, 0.0);\n    rot.w = mulFactor * sqrt(abs(1.0 - rot.x * rot.x - rot.y * rot.y - rot.z * rot.z));\n  #else\n    #if CC_RENDER_MODE != 4\n      #if CC_RENDER_MODE == 0\n        vec3 rotEuler = a_texCoord2;\n      #elif CC_RENDER_MODE == 1\n        vec3 rotEuler = vec3(0.);\n      #else\n        vec3 rotEuler = vec3(0., 0., a_texCoord2.z);\n      #endif\n      vec4 rot = quaternionFromEuler(rotEuler);\n    #else\n      vec4 rot = quaternionFromEuler(a_texCoord2);\n    #endif\n  #endif\n  #if CC_RENDER_MODE != 4\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n    #if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_matViewInv);\n    #elif CC_RENDER_MODE == 1\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_cameraPos.xyz, velocity, frameTile_velLenScale.z, frameTile_velLenScale.w, a_texCoord.x);\n    #elif 2\n      computeVertPos(pos, cornerOffset, rot, compScale);\n    #endif\n    color = a_color;\n  #else\n    mat3 rotMat = quatToMat3(rot);\n    mat3 nodeMat = quatToMat3(nodeRotation);\n    rotMat = nodeMat * rotMat;\n    rot = mat3ToQuat(rotMat);\n    mat4 xformNoScale = matrixFromRT(rot, pos.xyz);\n    mat4 xform = matFromRTS(rot, pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n  #endif\n  uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  pos = cc_matViewProj * pos;\n  return pos;\n}\nvoid main() { gl_Position = lpvs_main(); }","frag":"\nprecision mediump float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nin vec2 uv;\nin vec4 color;\nuniform sampler2D mainTexture;\nvec4 premultiplied () {\n  vec4 col = color * texture(mainTexture, uv) * color.a;\n  return CCFragOutput(col);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = premultiplied(); }"},"glsl1":{"vert":"\nprecision highp float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\n  mat3 m = mat3(xAxis,yAxis,zAxis);\n  float trace = m[0][0] + m[1][1] + m[2][2];\n  vec4 quat;\n  if (trace > 0.) {\n    float s = 0.5 / sqrt(trace + 1.0);\n    quat.w = 0.25 / s;\n    quat.x = (m[2][1] - m[1][2]) * s;\n    quat.y = (m[0][2] - m[2][0]) * s;\n    quat.z = (m[1][0] - m[0][1]) * s;\n  } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n    float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n    quat.w = (m[2][1] - m[1][2]) / s;\n    quat.x = 0.25 * s;\n    quat.y = (m[0][1] + m[1][0]) / s;\n    quat.z = (m[0][2] + m[2][0]) / s;\n  } else if (m[1][1] > m[2][2]) {\n    float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n    quat.w = (m[0][2] - m[2][0]) / s;\n    quat.x = (m[0][1] + m[1][0]) / s;\n    quat.y = 0.25 * s;\n    quat.z = (m[1][2] + m[2][1]) / s;\n  } else {\n    float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n    quat.w = (m[1][0] - m[0][1]) / s;\n    quat.x = (m[0][2] + m[2][0]) / s;\n    quat.y = (m[1][2] + m[2][1]) / s;\n    quat.z = 0.25 * s;\n  }\n  float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n  if (len > 0.) {\n    len = 1. / sqrt(len);\n    quat.x = quat.x * len;\n    quat.y = quat.y * len;\n    quat.z = quat.z * len;\n    quat.w = quat.w * len;\n  }\n  return quat;\n}\nvec4 quaternionFromEuler (vec3 angle){\n  float x = angle.x / 2.;\n  float y = angle.y / 2.;\n  float z = angle.z / 2.;\n  float sx = sin(x);\n  float cx = cos(x);\n  float sy = sin(y);\n  float cy = cos(y);\n  float sz = sin(z);\n  float cz = cos(z);\n  vec4 quat = vec4(0);\n  quat.x = sx * cy * cz + cx * sy * sz;\n  quat.y = cx * sy * cz + sx * cy * sz;\n  quat.z = cx * cy * sz - sx * sy * cz;\n  quat.w = cx * cy * cz - sx * sy * sz;\n  return quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\n  float x2 = q.x + q.x;\n  float y2 = q.y + q.y;\n  float z2 = q.z + q.z;\n  float xx = q.x * x2;\n  float xy = q.x * y2;\n  float xz = q.x * z2;\n  float yy = q.y * y2;\n  float yz = q.y * z2;\n  float zz = q.z * z2;\n  float wx = q.w * x2;\n  float wy = q.w * y2;\n  float wz = q.w * z2;\n  return mat4(\n    1. - (yy + zz), xy + wz, xz - wy, 0,\n    xy - wz, 1. - (xx + zz), yz + wx, 0,\n    xz + wy, yz - wx, 1. - (xx + yy), 0,\n    p.x, p.y, p.z, 1\n  );\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  float x2 = x + x;\n  float y2 = y + y;\n  float z2 = z + z;\n  float xx = x * x2;\n  float xy = x * y2;\n  float xz = x * z2;\n  float yy = y * y2;\n  float yz = y * z2;\n  float zz = z * z2;\n  float wx = w * x2;\n  float wy = w * y2;\n  float wz = w * z2;\n  float sx = s.x;\n  float sy = s.y;\n  float sz = s.z;\n  return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n    (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n    (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n    t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\n  vec4 quat;\n  quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n  quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n  quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n  quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n  return quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\n  float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n  float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n  float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n  float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n  v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n  v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n  v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n  vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n  vec4 rotQuat = quatMultiply(viewQuat, q);\n  rotateVecFromQuat(pos, rotQuat);\n  return pos;\n}\nmat3 quatToMat3(vec4 q) {\n  vec3 m0 = vec3(\n    1.0 - 2.0 * q.y * q.y - 2.0 * q.z * q.z,\n    2.0 * q.x * q.y + 2.0 * q.w * q.z,\n    2.0 * q.x * q.z - 2.0 * q.w * q.y);\n\tvec3 m1 = vec3(\n    2.0 * q.x * q.y - 2.0 * q.w * q.z,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.z * q.z,\n    2.0 * q.y * q.z + 2.0 * q.w * q.x);\n\tvec3 m2 = vec3(\n    2.0 * q.x * q.z + 2.0 * q.w * q.y,\n    2.0 * q.y * q.z - 2.0 * q.w * q.x,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.y * q.y);\n  return mat3(m0, m1, m2);\n}\nvec4 mat3ToQuat(mat3 mat) {\n  float tr = mat[0][0] + mat[1][1] + mat[2][2];\n\tfloat qw, qx, qy, qz;\n  if (tr > 0.0) {\n    float S = sqrt(tr + 1.0) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = 0.25 * S;\n\t  qx = (mat[1][2] - mat[2][1]) * invS;\n\t  qy = (mat[2][0] - mat[0][2]) * invS;\n\t  qz = (mat[0][1] - mat[1][0]) * invS;\n  } else if ((mat[0][0] > mat[1][1])&&(mat[0][0] > mat[2][2])) {\n    float S = sqrt(1.0 + mat[0][0] - mat[1][1] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[1][2] - mat[2][1]) * invS;\n\t  qx = 0.25 * S;\n\t  qy = (mat[1][0] + mat[0][1]) * invS;\n\t  qz = (mat[2][0] + mat[0][2]) * invS;\n  } else if (mat[1][1] > mat[2][2]) {\n\t  float S = sqrt(1.0 + mat[1][1] - mat[0][0] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[2][0] - mat[0][2]) * invS;\n\t  qx = (mat[1][0] + mat[0][1]) * invS;\n\t  qy = 0.25 * S;\n\t  qz = (mat[2][1] + mat[1][2]) * invS;\n  } else {\n\t  float S = sqrt(1.0 + mat[2][2] - mat[0][0] - mat[1][1]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[0][1] - mat[1][0]) * invS;\n\t  qx = (mat[2][0] + mat[0][2]) * invS;\n\t  qy = (mat[2][1] + mat[1][2]) * invS;\n\t  qz = 0.25 * S;\n  }\n  return vec4(qx, qy, qz, qw);\n}\n   uniform vec4 mainTiling_Offset;\n   uniform vec4 frameTile_velLenScale;\n   uniform vec4 scale;\n   uniform vec4 nodeRotation;\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matViewInv;\n  uniform highp mat4 cc_matViewProj;\n  uniform highp vec4 cc_cameraPos;\nuniform highp mat4 cc_matWorld;\nvarying mediump vec2 uv;\nvarying mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n  , mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n  vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n  vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = vec3(1, 0, 0);\n  vec3 camY = vec3(0, 0, -1);\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  rotateVecFromQuat(viewSpaceVert, q);\n  vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n  vec3 camY = vec3(0, 1, 0);\n  vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n  pos.xyz += offset;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\n  vertIndex.y = 1. - vertIndex.y;\n#endif\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nattribute vec3 a_position;\nattribute vec3 a_texCoord;\nattribute vec3 a_texCoord1;\nattribute vec3 a_texCoord2;\nattribute vec4 a_color;\n#if CC_RENDER_MODE == 1\n  attribute vec3 a_color1;\n#endif\n#if CC_RENDER_MODE == 4\n  attribute vec3 a_texCoord3;\n  attribute vec3 a_normal;\n  attribute vec4 a_color1;\n#endif\nvec4 lpvs_main () {\n  vec3 compScale = scale.xyz * a_texCoord1;\n  vec4 pos = vec4(a_position, 1);\n  #if CC_RENDER_MODE == 1\n    vec4 velocity = vec4(a_color1.xyz, 0);\n  #endif\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_RENDER_MODE == 1\n      velocity = cc_matWorld * velocity;\n    #endif\n  #endif\n  #if ROTATION_OVER_TIME_MODULE_ENABLE\n    vec3 rotTmp = a_texCoord2;\n    float mulFactor = 1.0;\n    if (rotTmp.x > 10.0 * 0.5) {\n        rotTmp.x -= 10.0;\n        mulFactor = -1.0;\n    }\n    vec4 rot = vec4(rotTmp, 0.0);\n    rot.w = mulFactor * sqrt(abs(1.0 - rot.x * rot.x - rot.y * rot.y - rot.z * rot.z));\n  #else\n    #if CC_RENDER_MODE != 4\n      #if CC_RENDER_MODE == 0\n        vec3 rotEuler = a_texCoord2;\n      #elif CC_RENDER_MODE == 1\n        vec3 rotEuler = vec3(0.);\n      #else\n        vec3 rotEuler = vec3(0., 0., a_texCoord2.z);\n      #endif\n      vec4 rot = quaternionFromEuler(rotEuler);\n    #else\n      vec4 rot = quaternionFromEuler(a_texCoord2);\n    #endif\n  #endif\n  #if CC_RENDER_MODE != 4\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n    #if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_matViewInv);\n    #elif CC_RENDER_MODE == 1\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_cameraPos.xyz, velocity, frameTile_velLenScale.z, frameTile_velLenScale.w, a_texCoord.x);\n    #elif 2\n      computeVertPos(pos, cornerOffset, rot, compScale);\n    #endif\n    color = a_color;\n  #else\n    mat3 rotMat = quatToMat3(rot);\n    mat3 nodeMat = quatToMat3(nodeRotation);\n    rotMat = nodeMat * rotMat;\n    rot = mat3ToQuat(rotMat);\n    mat4 xformNoScale = matrixFromRT(rot, pos.xyz);\n    mat4 xform = matFromRTS(rot, pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n  #endif\n  uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  pos = cc_matViewProj * pos;\n  return pos;\n}\nvoid main() { gl_Position = lpvs_main(); }","frag":"\nprecision mediump float;\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nvarying vec2 uv;\nvarying vec4 color;\nuniform sampler2D mainTexture;\nvec4 premultiplied () {\n  vec4 col = color * texture2D(mainTexture, uv) * color.a;\n  return CCFragOutput(col);\n}\nvoid main() { gl_FragColor = premultiplied(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":52,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":39}},"defines":[{"name":"CC_RENDER_MODE","type":"number","defines":[],"range":[0,4]},{"name":"CC_USE_WORLD_SPACE","type":"boolean","defines":[]},{"name":"ROTATION_OVER_TIME_MODULE_ENABLE","type":"boolean","defines":[]}]}],[{"name":"add","passes":[{"program":"builtin-particle|particle-vs-legacy:lpvs_main|tinted-fs:add","rasterizerState":{"cullMode":0},"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":1,"blendSrcAlpha":2,"blendDstAlpha":1}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"mainTexture":{"value":"grey","type":28},"mainTiling_Offset":{"type":16,"value":[1,1,0,0]},"tintColor":{"type":16,"value":[0.5,0.5,0.5,0.5],"editor":{"type":"color"}}}}]},{"name":"alpha-blend","passes":[{"program":"builtin-particle|particle-vs-legacy:lpvs_main|tinted-fs:add","rasterizerState":{"cullMode":0},"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendSrcAlpha":0,"blendDstAlpha":1}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"mainTexture":{"value":"grey","type":28},"mainTiling_Offset":{"type":16,"value":[1,1,0,0]},"tintColor":{"type":16,"value":[0.5,0.5,0.5,0.5],"editor":{"type":"color"}}}}]},{"name":"add-multiply","passes":[{"program":"builtin-particle|particle-vs-legacy:lpvs_main|tinted-fs:multiply","rasterizerState":{"cullMode":0},"blendState":{"targets":[{"blend":true,"blendSrc":7,"blendDst":1,"blendSrcAlpha":0,"blendDstAlpha":3}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"mainTexture":{"value":"grey","type":28},"mainTiling_Offset":{"type":16,"value":[1,1,0,0]},"tintColor":{"type":16,"value":[0.5,0.5,0.5,0.5],"editor":{"type":"color"}}}}]},{"name":"add-smooth","passes":[{"program":"builtin-particle|particle-vs-legacy:lpvs_main|no-tint-fs:addSmooth","rasterizerState":{"cullMode":0},"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":1,"blendSrcAlpha":2,"blendDstAlpha":1}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"mainTexture":{"value":"grey","type":28},"mainTiling_Offset":{"type":16,"value":[1,1,0,0]}}}]},{"name":"premultiply-blend","passes":[{"program":"builtin-particle|particle-vs-legacy:lpvs_main|no-tint-fs:premultiplied","rasterizerState":{"cullMode":0},"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendSrcAlpha":0,"blendDstAlpha":1}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"mainTexture":{"value":"grey","type":28},"mainTiling_Offset":{"type":16,"value":[1,1,0,0]}}}]}]]],0,0,[],[],[]],[[[31,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[4,3],[3,9]],[[[31,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[4,3],[3,9]],[[[10,".bin",1704124653,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":62280,"length":19272,"count":4818,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":62280,"count":865,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,15,16,17,18,19,20,21,22,23,24,25,26,27,29,30,32,33]]},"minPosition",8,[1,-0.052311841398477554,0.05391331762075424,-0.009010858833789825],"maxPosition",8,[1,-0.03465646877884865,0.05848979949951172,0.010912010446190834]]],-1],0,0,[],[],[]],[[[94,"frydde1",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true}],[[[{"metallic":0.4000000059604645,"roughness":0.7071067690849304},"mainTexture",6,0]],11]]],0,0,[0,0],[4,3],[117,2]],[[[10,".bin",701749343,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":62280,"length":19272,"count":4818,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":62280,"count":865,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,1,2,3,4,5,6,7,8,9,10,11,46,47,48,49,50,57]]},"minPosition",8,[1,0.03465646877884865,0.05391331762075424,-0.009010858833789825],"maxPosition",8,[1,0.052311841398477554,0.05848979949951172,0.010912010446190834]]],-1],0,0,[],[],[]],[[[67,"Skin-4",459418556,["Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L/Wrist_L/ThumbFinger1_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L/Wrist_L/IndexFinger1_L/IndexFinger2_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L/Wrist_L/IndexFinger1_L/IndexFinger2_L/IndexFinger3_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L/Wrist_L/IndexFinger1_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L/Wrist_L/RingFinger1_L/RingFinger2_L/RingFinger3_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L/Wrist_L/RingFinger1_L/RingFinger2_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L/Wrist_L/RingFinger1_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L/Wrist_L/PinkyFinger1_L/PinkyFinger2_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L/Wrist_L/PinkyFinger1_L/PinkyFinger2_L/PinkyFinger3_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L/Wrist_L/PinkyFinger1_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L/Wrist_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L","Root_M/Spine1_M/Spine2_M/Chest_M/Neck_M/Head_M","Root_M/Spine1_M/Spine2_M/Chest_M/Neck_M","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R/MiddleFinger1_R/MiddleFinger2_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R/MiddleFinger1_R/MiddleFinger2_R/MiddleFinger3_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R/MiddleFinger1_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R/IndexFinger1_R/IndexFinger2_R/IndexFinger3_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R/ThumbFinger1_R/ThumbFinger2_R/ThumbFinger3_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R/ThumbFinger1_R/ThumbFinger2_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R/ThumbFinger1_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R/IndexFinger1_R/IndexFinger2_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R/IndexFinger1_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R/RingFinger1_R/RingFinger2_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R/RingFinger1_R/RingFinger2_R/RingFinger3_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R/PinkyFinger1_R/PinkyFinger2_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R/RingFinger1_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R/PinkyFinger1_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R/PinkyFinger1_R/PinkyFinger2_R/PinkyFinger3_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R","Root_M/Spine1_M","Root_M/Spine1_M/Spine2_M","Root_M/Spine1_M/Spine2_M/Chest_M","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R","Root_M/Hip_R/HipPart1_R/Knee_R/KneePart1_R","Root_M/Hip_R/HipPart1_R","Root_M","Root_M/Hip_R/HipPart1_R/Knee_R/KneePart1_R/Ankle_R/Toes_R","Root_M/Hip_R/HipPart1_R/Knee_R/KneePart1_R/Ankle_R","Root_M/Hip_R/HipPart1_R/Knee_R","Root_M/Hip_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L/Wrist_L/MiddleFinger1_L/MiddleFinger2_L/MiddleFinger3_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L/Wrist_L/MiddleFinger1_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L/Wrist_L/MiddleFinger1_L/MiddleFinger2_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L/Wrist_L/ThumbFinger1_L/ThumbFinger2_L/ThumbFinger3_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L/Wrist_L/ThumbFinger1_L/ThumbFinger2_L","Root_M/Hip_L/HipPart1_L/Knee_L/KneePart1_L/Ankle_L","Root_M/Hip_L/HipPart1_L/Knee_L/KneePart1_L/Ankle_L/Toes_L","Root_M/Hip_L/HipPart1_L/Knee_L","Root_M/Hip_L","Root_M/Hip_L/HipPart1_L/Knee_L/KneePart1_L","Root_M/Hip_L/HipPart1_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L"],[[[7,-0.7557510137557983,-0.5703139901161194,-0.3218422532081604,0,0.22390900552272797,0.23680199682712555,-0.9454048871994019,0,0.6153900027275085,-0.7865539789199829,-0.0512649305164814,0,-0.00905591994524002,-0.01108407974243164,0.06002102419734001,1],[7,-0.3476259410381317,0.6398352384567261,0.6853957176208496,0,0.037808969616889954,0.7399557828903198,-0.6715921759605408,0,-0.9368710517883301,-0.20754867792129517,-0.28141921758651733,0,0.011073191650211811,-0.06431224197149277,0.013265267945826054,1],[7,-0.9617258906364441,0.2737799882888794,0.0113291060552001,0,0.003308737650513649,0.052944887429475784,-0.9985920190811157,0,-0.2739943861961365,-0.9603340029716492,-0.05182432010769844,0,0.0458025224506855,-0.013424228876829147,0.056004058569669724,1],[7,-0.961135983467102,0.2729640007019043,0.04133099317550659,0,-0.019721446558833122,0.08144168555736542,-0.9964830279350281,0,-0.2753699719905853,-0.9585710167884827,-0.07289327681064606,0,0.049957357347011566,-0.014998828992247581,0.054459650069475174,1],[7,-0.9615449905395508,0.2729310095310211,0.030667807906866074,0,-0.016838759183883667,0.052868086844682693,-0.9984599947929382,0,-0.2741319537162781,-0.9605799913406372,-0.046239227056503296,0,0.04271070659160614,-0.013379319570958614,0.055071618407964706,1],[7,-0.9914509057998657,-0.1304830014705658,0.0000434811481682118,0,-0.004555003251880407,0.0342773012816906,-0.9994019865989685,0,0.13040350377559662,-0.9908580183982849,-0.0345785915851593,0,0.050082188099622726,0.0004408420354593545,0.056115780025720596,1],[7,-0.9913020730018616,-0.1303589940071106,-0.018088296055793762,0,0.012422231957316399,0.04414789006114006,-0.9989479780197144,0,0.13102048635482788,-0.9904829859733582,-0.042144566774368286,0,0.04619400575757027,-0.0001193954813061282,0.0569600984454155,1],[7,-0.9895299673080444,-0.13035699725151062,-0.0619514025747776,0,0.057289570569992065,0.03921690955758095,-0.9975870251655579,0,0.13247206807136536,-0.9906910061836243,-0.03133820742368698,0,0.04053565487265587,0.0001574644265929237,0.05897727981209755,1],[7,-0.9669378995895386,-0.25398901104927063,0.022802405059337616,0,-0.03869044408202171,0.057734813541173935,-0.9975820183753967,0,0.25205835700035095,-0.9654819965362549,-0.06565298140048981,0,0.048522986471652985,0.002070489339530468,0.05487658083438873,1],[7,-0.966211199760437,-0.25305700302124023,0.04897679388523102,0,-0.055962689220905304,0.02047760598361492,-0.9982230067253113,0,0.2516043484210968,-0.9672350287437439,-0.0339474231004715,0,0.05257672443985939,0.0041212597861886024,0.05386001989245415,1],[7,-0.9662399291992188,-0.2500990033149719,-0.061890795826911926,0,0.04767651483416557,0.06250450760126114,-0.9969050288200378,0,0.25319331884384155,-0.9662010073661804,-0.04847048223018646,0,0.040135327726602554,0.0016165297711268067,0.05886450037360191,1],[7,-0.9672641158103943,0.25293099880218506,-0.02063029818236828,0,0.03598476201295853,0.0562308095395565,-0.9977689981460571,0,-0.25120657682418823,-0.965848982334137,-0.06349170953035355,0,0.03177937865257263,-0.014936220832169056,0.05725216120481491,1],[7,-0.9901149868965149,0.03249209746718407,-0.13644400238990784,0,0.13776427507400513,0.04261089116334915,-0.9895480275154114,0,-0.026338502764701843,-0.9985629916191101,-0.04666593670845032,0,0.011242453008890152,-0.006384949665516615,0.060966599732637405,1],[7,6.112818404652572e-17,-5.766256197772455e-17,1,0,0.9982990026473999,0.05829869955778122,-5.766257521261435e-17,0,-0.05829869955778122,0.9982990026473999,6.112819728141552e-17,0,-0.06528256833553314,-0.004379279911518097,3.738085849999092e-18,1],[7,5.810373379434603e-17,-8.055475896034999e-17,1,0,0.9489060044288635,-0.3155589997768402,-8.055475234290509e-17,0,0.3155589997768402,0.9489060044288635,5.810373379434603e-17,0,-0.05794582888484001,0.020108990371227264,4.98674352237902e-18,1],[7,-0.9975029826164246,0.06243849918246269,0.03299730271100998,0,0.03000847063958645,-0.04821539670228958,0.998386025428772,0,0.06392873078584671,0.996882975101471,0.04622134938836098,0,-0.04876750707626343,0.006257849745452404,-0.05473095923662186,1],[7,-0.996940016746521,0.062477000057697296,0.04698919504880905,0,0.04407155513763428,-0.04728539660573006,0.9979090094566345,0,0.06456824392080307,0.9969260096549988,0.044387225061655045,0,-0.05246942862868309,0.006207259837538004,-0.05400291085243225,1],[7,-0.9975969791412354,0.0624816007912159,-0.0299358032643795,0,-0.03301549330353737,-0.048853401094675064,0.9982600212097168,0,0.060910407453775406,0.9968500137329102,0.050798848271369934,0,-0.04129204899072647,0.006295850034803152,-0.05769351124763489,1],[7,-0.961135983467102,0.2729640007019043,0.04133099317550659,0,0.019721446558833122,-0.08144168555736542,0.9964830279350281,0,0.2753699719905853,0.9585710167884827,0.07289327681064606,0,-0.049957357347011566,0.014998828992247581,-0.054459650069475174,1],[7,-0.5124889016151428,0.5173630118370056,0.6853399276733398,0,-0.020727958530187607,-0.8053399920463562,0.5924510955810547,0,0.8584430813789368,0.2894189953804016,0.4234519600868225,0,-0.02553672343492508,0.06292001903057098,-0.009630789048969746,1],[7,-0.46189382672309875,0.6606249213218689,0.5918009281158447,0,-0.022141097113490105,-0.6756231188774109,0.7369140982627869,0,0.8866590857505798,0.3272729516029358,0.32669293880462646,0,-0.019758624956011772,0.06097354367375374,-0.02059684880077839,1],[7,-0.3476259410381317,0.6398352384567261,0.6853957176208496,0,-0.037808969616889954,-0.7399557828903198,0.6715921759605408,0,0.9368710517883301,0.20754867792129517,0.28141921758651733,0,-0.011073191650211811,0.06431224197149277,-0.013265278190374374,1],[7,-0.9617258906364441,0.2737799882888794,0.0113291060552001,0,-0.003308737650513649,-0.052944887429475784,0.9985920190811157,0,0.2739943861961365,0.9603340029716492,0.05182432010769844,0,-0.0458025224506855,0.013424228876829147,-0.056004058569669724,1],[7,-0.9615449905395508,0.2729310095310211,0.030667807906866074,0,0.016838759183883667,-0.052868086844682693,0.9984599947929382,0,0.2741319537162781,0.9605799913406372,0.046239227056503296,0,-0.04271070659160614,0.013379319570958614,-0.055071618407964706,1],[7,-0.9913020730018616,-0.1303589940071106,-0.018088296055793762,0,-0.012422231957316399,-0.04414789006114006,0.9989479780197144,0,-0.13102048635482788,0.9904829859733582,0.042144566774368286,0,-0.04619400575757027,0.0001193954813061282,-0.0569600984454155,1],[7,-0.9914509057998657,-0.1304830014705658,0.00004347742287791334,0,0.0045549990609288216,-0.0342772975564003,0.9994019865989685,0,-0.13040350377559662,0.9908580183982849,0.0345785915851593,0,-0.050082188099622726,-0.000440842064563185,-0.056115780025720596,1],[7,-0.9669378995895386,-0.25398901104927063,0.022802405059337616,0,0.03869044408202171,-0.057734813541173935,0.9975820183753967,0,-0.25205835700035095,0.9654819965362549,0.06565298140048981,0,-0.048522986471652985,-0.002070489339530468,-0.05487658083438873,1],[7,-0.9895299673080444,-0.13035699725151062,-0.0619514025747776,0,-0.057289570569992065,-0.03921690955758095,0.9975870251655579,0,-0.13247206807136536,0.9906910061836243,0.03133820742368698,0,-0.04053565487265587,-0.00015746543067507446,-0.05897727981209755,1],[7,-0.9895550012588501,-0.0465225987136364,-0.13644400238990784,0,-0.13392998278141022,-0.05345509946346283,0.9895480275154114,0,-0.05332998186349869,0.9974859952926636,0.0466659739613533,0,-0.006511901505291462,0.005468619987368584,-0.060966599732637405,1],[7,-0.9662399291992188,-0.2500990033149719,-0.061890795826911926,0,-0.04767651483416557,-0.06250450760126114,0.9969050288200378,0,-0.25319331884384155,0.9662010073661804,0.04847048223018646,0,-0.040135327726602554,-0.0016165297711268067,-0.05886450037360191,1],[7,-0.9901149868965149,0.03249209746718407,-0.13644400238990784,0,-0.13776427507400513,-0.04261089116334915,0.9895480275154114,0,0.026338502764701843,0.9985629916191101,0.04666593670845032,0,-0.019342873245477676,0.006384949665516615,-0.060966599732637405,1],[7,-0.9901149868965149,0.03249209746718407,-0.13644400238990784,0,-0.13776427507400513,-0.04261089116334915,0.9895480275154114,0,0.026338502764701843,0.9985629916191101,0.04666593670845032,0,-0.011242453008890152,0.006384949665516615,-0.060966599732637405,1],[7,-0.966211199760437,-0.25305700302124023,0.04897679388523102,0,0.055962689220905304,-0.02047760598361492,0.9982230067253113,0,-0.2516043484210968,0.9672350287437439,0.0339474231004715,0,-0.05257672443985939,-0.0041212597861886024,-0.05386001989245415,1],[7,-0.9672641158103943,0.25293099880218506,-0.02063029818236828,0,-0.03598476201295853,-0.0562308095395565,0.9977689981460571,0,0.25120657682418823,0.965848982334137,0.06349170953035355,0,-0.03177937865257263,0.014936220832169056,-0.05725216120481491,1],[7,-0.9895550012588501,-0.0465225987136364,-0.13644400238990784,0,-0.13392998278141022,-0.05345509946346283,0.9895480275154114,0,-0.05332998186349869,0.9974859952926636,0.0466659739613533,0,-0.0013082213699817657,0.005468619987368584,-0.060966599732637405,1],[7,6.11638851617635e-17,-5.833826927650686e-17,1,0,0.998881995677948,0.04726329818367958,-5.833829574628647e-17,0,-0.04726329818367958,0.998881995677948,6.11639116315431e-17,0,-0.04269319027662277,-0.0008234300184994936,2.563246189073702e-18,1],[7,6.122529505043944e-17,-6.030347174092055e-17,1,0,0.9998850226402283,0.015169600024819374,-6.030347174092055e-17,0,-0.015169600024819374,0.9998850226402283,6.122529505043944e-17,0,-0.04954791069030762,0.0007677110261283815,3.0798808657977842e-18,1],[7,5.985136790532356e-17,-7.416329980327525e-17,1,0,0.977446973323822,-0.2111790031194687,-7.416332627305485e-17,0,0.2111790031194687,0.977446973323822,5.985138775765826e-17,0,-0.05578818917274475,0.013730029575526714,4.357267348032292e-18,1],[7,-0.7557510137557983,-0.5703139901161194,-0.3218422532081604,0,-0.22390900552272797,-0.23680199682712555,0.9454048871994019,0,-0.6153900027275085,0.7865539789199829,0.0512649305164814,0,0.00905591994524002,0.01108407974243164,-0.06002102419734001,1],[7,-0.07063166052103043,-0.021846704185009003,-0.9972630143165588,0,-0.9946739673614502,-0.07369910180568695,0.07206269353628159,0,-0.075071781873703,0.9970409870147705,-0.016524851322174072,0,0.014356869272887707,0.00028989295242354274,-0.010739260353147984,1],[7,-0.07384947687387466,-0.0035155045334249735,-0.9972630143165588,0,-0.9815620183944702,0.17703799903392792,0.07206270843744278,0,0.176300048828125,0.9841979742050171,-0.016524845734238625,0,0.029010290279984474,-0.0055952901020646095,-0.010739260353147984,1],[7,6.096432287590141e-17,-5.550928180307346e-17,1,0,0.995622992515564,0.09346509724855423,-5.5509255333293855e-17,0,-0.09346509724855423,0.995622992515564,6.096429640612181e-17,0,-0.03696995973587036,-0.002799419919028878,2.0984529892898495e-18,1],[7,0.00043790347990579903,0.042079851031303406,-0.9991139769554138,0,0.10044362396001816,0.9940599799156189,0.04191097244620323,0,0.9949430227279663,-0.10037299990653992,-0.0037913471460342407,0,-0.008446750231087208,0.0010378394508734345,-0.010595089755952358,1],[7,-1.2247805436516046e-8,-0.03372279927134514,-0.9994310140609741,0,-1,3.364509950642969e-7,9.022438907102526e-10,0,3.362292773090303e-7,0.9994310140609741,-0.03372279927134514,0,0.0059522101655602455,-0.00027136699645780027,-0.010334069840610027,1],[7,-0.07063166052103043,-0.021846704185009003,-0.9972630143165588,0,-0.9946739673614502,-0.07369910180568695,0.07206269353628159,0,-0.075071781873703,0.9970409870147705,-0.016524851322174072,0,0.0235291700810194,0.0002898959501180798,-0.010739260353147984,1],[7,-0.07384947687387466,-0.0035155045334249735,-0.9972630143165588,0,-0.9815620183944702,0.17703799903392792,0.07206270843744278,0,0.176300048828125,0.9841979742050171,-0.016524845734238625,0,0.03516453132033348,-0.0055952901020646095,-0.010739260353147984,1],[7,-0.996940016746521,0.062477000057697296,0.04698919504880905,0,-0.04407155513763428,0.04728539660573006,-0.9979090094566345,0,-0.06456824392080307,-0.9969260096549988,-0.044387225061655045,0,0.05246942862868309,-0.006207259837538004,0.05400291085243225,1],[7,-0.9975969791412354,0.0624816007912159,-0.0299358032643795,0,0.03301549330353737,0.048853401094675064,-0.9982600212097168,0,-0.060910407453775406,-0.9968500137329102,-0.050798848271369934,0,0.04129204899072647,-0.006295850034803152,0.05769351124763489,1],[7,-0.9975029826164246,0.06243849918246269,0.03299730271100998,0,-0.03000847063958645,0.04821539670228958,-0.998386025428772,0,-0.06392873078584671,-0.996882975101471,-0.04622134938836098,0,0.04876750707626343,-0.006257849745452404,0.05473095923662186,1],[7,-0.5124889016151428,0.5173630118370056,0.6853399276733398,0,0.020727958530187607,0.8053399920463562,-0.5924510955810547,0,-0.8584430813789368,-0.2894189953804016,-0.4234519600868225,0,0.02553672343492508,-0.06292001903057098,0.009630789048969746,1],[7,-0.46189382672309875,0.6606249213218689,0.5918009281158447,0,0.022141097113490105,0.6756231188774109,-0.7369140982627869,0,-0.8866590857505798,-0.3272729516029358,-0.32669293880462646,0,0.019758624956011772,-0.06097354367375374,0.02059684880077839,1],[7,-1.2987516839757518e-8,-0.03372279927134514,-0.9994310140609741,0,1,-3.3647398822722607e-7,-1.6416000780949958e-9,0,-3.3622734463278903e-7,-0.9994310140609741,0.03372279927134514,0,-0.0059522101655602455,0.00027136699645780027,0.010334069840610027,1],[7,0.00043792338692583144,0.04207983240485191,-0.9991139769554138,0,-0.10044362396001816,-0.9940599799156189,-0.04191095381975174,0,-0.9949430227279663,0.10037299990653992,0.0037913252599537373,0,0.008446750231087208,-0.0010378392180427909,0.010595089755952358,1],[7,-0.07063166052103043,-0.021846704185009003,-0.9972630143165588,0,0.9946739673614502,0.07369910180568695,-0.07206269353628159,0,0.075071781873703,-0.9970409870147705,0.016524851322174072,0,-0.0235291700810194,-0.0002898959501180798,0.010739260353147984,1],[7,-0.07384947687387466,-0.0035155045334249735,-0.9972630143165588,0,0.9815620183944702,-0.17703799903392792,-0.07206270843744278,0,-0.176300048828125,-0.9841979742050171,0.016524845734238625,0,-0.03516453132033348,0.0055952901020646095,0.010739260353147984,1],[7,-0.07063166052103043,-0.021846704185009003,-0.9972630143165588,0,0.9946739673614502,0.07369910180568695,-0.07206269353628159,0,0.075071781873703,-0.9970409870147705,0.016524851322174072,0,-0.014356869272887707,-0.00028989295242354274,0.010739260353147984,1],[7,-0.07384947687387466,-0.0035155045334249735,-0.9972630143165588,0,0.9815620183944702,-0.17703799903392792,-0.07206270843744278,0,-0.176300048828125,-0.9841979742050171,0.016524845734238625,0,-0.029010290279984474,0.0055952901020646095,0.010739260353147984,1],[7,-0.9901149868965149,0.03249209746718407,-0.13644400238990784,0,0.13776427507400513,0.04261089116334915,-0.9895480275154114,0,-0.026338502764701843,-0.9985629916191101,-0.04666593670845032,0,0.019342873245477676,-0.006384949665516615,0.060966599732637405,1],[7,-0.9895550012588501,-0.0465225987136364,-0.13644400238990784,0,0.13392998278141022,0.05345509946346283,-0.9895480275154114,0,0.053329985588788986,-0.9974859952926636,-0.0466659739613533,0,0.0013082210207358003,-0.005468619987368584,0.060966599732637405,1],[7,-0.9895550012588501,-0.0465225987136364,-0.13644400238990784,0,0.13392998278141022,0.05345509946346283,-0.9895480275154114,0,0.053329985588788986,-0.9974859952926636,-0.0466659739613533,0,0.006511901039630175,-0.005468619987368584,0.060966599732637405,1]],8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]]],0,0,[],[],[]],[[[67,"Skin-0",459418556,["Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L/Wrist_L/ThumbFinger1_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L/Wrist_L/IndexFinger1_L/IndexFinger2_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L/Wrist_L/IndexFinger1_L/IndexFinger2_L/IndexFinger3_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L/Wrist_L/IndexFinger1_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L/Wrist_L/RingFinger1_L/RingFinger2_L/RingFinger3_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L/Wrist_L/RingFinger1_L/RingFinger2_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L/Wrist_L/RingFinger1_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L/Wrist_L/PinkyFinger1_L/PinkyFinger2_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L/Wrist_L/PinkyFinger1_L/PinkyFinger2_L/PinkyFinger3_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L/Wrist_L/PinkyFinger1_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L/Wrist_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L","Root_M/Spine1_M/Spine2_M/Chest_M/Neck_M/Head_M","Root_M/Spine1_M/Spine2_M/Chest_M/Neck_M","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R/MiddleFinger1_R/MiddleFinger2_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R/MiddleFinger1_R/MiddleFinger2_R/MiddleFinger3_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R/MiddleFinger1_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R/IndexFinger1_R/IndexFinger2_R/IndexFinger3_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R/ThumbFinger1_R/ThumbFinger2_R/ThumbFinger3_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R/ThumbFinger1_R/ThumbFinger2_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R/ThumbFinger1_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R/IndexFinger1_R/IndexFinger2_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R/IndexFinger1_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R/RingFinger1_R/RingFinger2_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R/RingFinger1_R/RingFinger2_R/RingFinger3_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R/PinkyFinger1_R/PinkyFinger2_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R/RingFinger1_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R/PinkyFinger1_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R/PinkyFinger1_R/PinkyFinger2_R/PinkyFinger3_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R","Root_M/Spine1_M","Root_M/Spine1_M/Spine2_M","Root_M/Spine1_M/Spine2_M/Chest_M","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R","Root_M/Hip_R/HipPart1_R/Knee_R/KneePart1_R","Root_M/Hip_R/HipPart1_R","Root_M","Root_M/Hip_R/HipPart1_R/Knee_R/KneePart1_R/Ankle_R/Toes_R","Root_M/Hip_R/HipPart1_R/Knee_R/KneePart1_R/Ankle_R","Root_M/Hip_R/HipPart1_R/Knee_R","Root_M/Hip_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L/Wrist_L/MiddleFinger1_L/MiddleFinger2_L/MiddleFinger3_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L/Wrist_L/MiddleFinger1_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L/Wrist_L/MiddleFinger1_L/MiddleFinger2_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L/Wrist_L/ThumbFinger1_L/ThumbFinger2_L/ThumbFinger3_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L/Wrist_L/ThumbFinger1_L/ThumbFinger2_L","Root_M/Hip_L/HipPart1_L/Knee_L/KneePart1_L/Ankle_L","Root_M/Hip_L/HipPart1_L/Knee_L/KneePart1_L/Ankle_L/Toes_L","Root_M/Hip_L/HipPart1_L/Knee_L","Root_M/Hip_L","Root_M/Hip_L/HipPart1_L/Knee_L/KneePart1_L","Root_M/Hip_L/HipPart1_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L"],[[[7,-0.7557510137557983,-0.5703139901161194,-0.3218422532081604,0,0.22390900552272797,0.23680199682712555,-0.9454048871994019,0,0.6153900027275085,-0.7865539789199829,-0.0512649305164814,0,-0.00905591994524002,-0.01108407974243164,0.06002102419734001,1],[7,-0.3476259410381317,0.6398352384567261,0.6853957176208496,0,0.037808969616889954,0.7399557828903198,-0.6715921759605408,0,-0.9368710517883301,-0.20754867792129517,-0.28141921758651733,0,0.011073191650211811,-0.06431224197149277,0.013265267945826054,1],[7,-0.9617258906364441,0.2737799882888794,0.0113291060552001,0,0.003308737650513649,0.052944887429475784,-0.9985920190811157,0,-0.2739943861961365,-0.9603340029716492,-0.05182432010769844,0,0.0458025224506855,-0.013424228876829147,0.056004058569669724,1],[7,-0.961135983467102,0.2729640007019043,0.04133099317550659,0,-0.019721446558833122,0.08144168555736542,-0.9964830279350281,0,-0.2753699719905853,-0.9585710167884827,-0.07289327681064606,0,0.049957357347011566,-0.014998828992247581,0.054459650069475174,1],[7,-0.9615449905395508,0.2729310095310211,0.030667807906866074,0,-0.016838759183883667,0.052868086844682693,-0.9984599947929382,0,-0.2741319537162781,-0.9605799913406372,-0.046239227056503296,0,0.04271070659160614,-0.013379319570958614,0.055071618407964706,1],[7,-0.9914509057998657,-0.1304830014705658,0.0000434811481682118,0,-0.004555003251880407,0.0342773012816906,-0.9994019865989685,0,0.13040350377559662,-0.9908580183982849,-0.0345785915851593,0,0.050082188099622726,0.0004408420354593545,0.056115780025720596,1],[7,-0.9913020730018616,-0.1303589940071106,-0.018088296055793762,0,0.012422231957316399,0.04414789006114006,-0.9989479780197144,0,0.13102048635482788,-0.9904829859733582,-0.042144566774368286,0,0.04619400575757027,-0.0001193954813061282,0.0569600984454155,1],[7,-0.9895299673080444,-0.13035699725151062,-0.0619514025747776,0,0.057289570569992065,0.03921690955758095,-0.9975870251655579,0,0.13247206807136536,-0.9906910061836243,-0.03133820742368698,0,0.04053565487265587,0.0001574644265929237,0.05897727981209755,1],[7,-0.9669378995895386,-0.25398901104927063,0.022802405059337616,0,-0.03869044408202171,0.057734813541173935,-0.9975820183753967,0,0.25205835700035095,-0.9654819965362549,-0.06565298140048981,0,0.048522986471652985,0.002070489339530468,0.05487658083438873,1],[7,-0.966211199760437,-0.25305700302124023,0.04897679388523102,0,-0.055962689220905304,0.02047760598361492,-0.9982230067253113,0,0.2516043484210968,-0.9672350287437439,-0.0339474231004715,0,0.05257672443985939,0.0041212597861886024,0.05386001989245415,1],[7,-0.9662399291992188,-0.2500990033149719,-0.061890795826911926,0,0.04767651483416557,0.06250450760126114,-0.9969050288200378,0,0.25319331884384155,-0.9662010073661804,-0.04847048223018646,0,0.040135327726602554,0.0016165297711268067,0.05886450037360191,1],[7,-0.9672641158103943,0.25293099880218506,-0.02063029818236828,0,0.03598476201295853,0.0562308095395565,-0.9977689981460571,0,-0.25120657682418823,-0.965848982334137,-0.06349170953035355,0,0.03177937865257263,-0.014936220832169056,0.05725216120481491,1],[7,-0.9901149868965149,0.03249209746718407,-0.13644400238990784,0,0.13776427507400513,0.04261089116334915,-0.9895480275154114,0,-0.026338502764701843,-0.9985629916191101,-0.04666593670845032,0,0.011242453008890152,-0.006384949665516615,0.060966599732637405,1],[7,6.112818404652572e-17,-5.766256197772455e-17,1,0,0.9982990026473999,0.05829869955778122,-5.766257521261435e-17,0,-0.05829869955778122,0.9982990026473999,6.112819728141552e-17,0,-0.06528256833553314,-0.004379279911518097,3.738085849999092e-18,1],[7,5.810373379434603e-17,-8.055475896034999e-17,1,0,0.9489060044288635,-0.3155589997768402,-8.055475234290509e-17,0,0.3155589997768402,0.9489060044288635,5.810373379434603e-17,0,-0.05794582888484001,0.020108990371227264,4.98674352237902e-18,1],[7,-0.9975029826164246,0.06243849918246269,0.03299730271100998,0,0.03000847063958645,-0.04821539670228958,0.998386025428772,0,0.06392873078584671,0.996882975101471,0.04622134938836098,0,-0.04876750707626343,0.006257849745452404,-0.05473095923662186,1],[7,-0.996940016746521,0.062477000057697296,0.04698919504880905,0,0.04407155513763428,-0.04728539660573006,0.9979090094566345,0,0.06456824392080307,0.9969260096549988,0.044387225061655045,0,-0.05246942862868309,0.006207259837538004,-0.05400291085243225,1],[7,-0.9975969791412354,0.0624816007912159,-0.0299358032643795,0,-0.03301549330353737,-0.048853401094675064,0.9982600212097168,0,0.060910407453775406,0.9968500137329102,0.050798848271369934,0,-0.04129204899072647,0.006295850034803152,-0.05769351124763489,1],[7,-0.961135983467102,0.2729640007019043,0.04133099317550659,0,0.019721446558833122,-0.08144168555736542,0.9964830279350281,0,0.2753699719905853,0.9585710167884827,0.07289327681064606,0,-0.049957357347011566,0.014998828992247581,-0.054459650069475174,1],[7,-0.5124889016151428,0.5173630118370056,0.6853399276733398,0,-0.020727958530187607,-0.8053399920463562,0.5924510955810547,0,0.8584430813789368,0.2894189953804016,0.4234519600868225,0,-0.02553672343492508,0.06292001903057098,-0.009630789048969746,1],[7,-0.46189382672309875,0.6606249213218689,0.5918009281158447,0,-0.022141097113490105,-0.6756231188774109,0.7369140982627869,0,0.8866590857505798,0.3272729516029358,0.32669293880462646,0,-0.019758624956011772,0.06097354367375374,-0.02059684880077839,1],[7,-0.3476259410381317,0.6398352384567261,0.6853957176208496,0,-0.037808969616889954,-0.7399557828903198,0.6715921759605408,0,0.9368710517883301,0.20754867792129517,0.28141921758651733,0,-0.011073191650211811,0.06431224197149277,-0.013265278190374374,1],[7,-0.9617258906364441,0.2737799882888794,0.0113291060552001,0,-0.003308737650513649,-0.052944887429475784,0.9985920190811157,0,0.2739943861961365,0.9603340029716492,0.05182432010769844,0,-0.0458025224506855,0.013424228876829147,-0.056004058569669724,1],[7,-0.9615449905395508,0.2729310095310211,0.030667807906866074,0,0.016838759183883667,-0.052868086844682693,0.9984599947929382,0,0.2741319537162781,0.9605799913406372,0.046239227056503296,0,-0.04271070659160614,0.013379319570958614,-0.055071618407964706,1],[7,-0.9913020730018616,-0.1303589940071106,-0.018088296055793762,0,-0.012422231957316399,-0.04414789006114006,0.9989479780197144,0,-0.13102048635482788,0.9904829859733582,0.042144566774368286,0,-0.04619400575757027,0.0001193954813061282,-0.0569600984454155,1],[7,-0.9914509057998657,-0.1304830014705658,0.00004347742287791334,0,0.0045549990609288216,-0.0342772975564003,0.9994019865989685,0,-0.13040350377559662,0.9908580183982849,0.0345785915851593,0,-0.050082188099622726,-0.000440842064563185,-0.056115780025720596,1],[7,-0.9669378995895386,-0.25398901104927063,0.022802405059337616,0,0.03869044408202171,-0.057734813541173935,0.9975820183753967,0,-0.25205835700035095,0.9654819965362549,0.06565298140048981,0,-0.048522986471652985,-0.002070489339530468,-0.05487658083438873,1],[7,-0.9895299673080444,-0.13035699725151062,-0.0619514025747776,0,-0.057289570569992065,-0.03921690955758095,0.9975870251655579,0,-0.13247206807136536,0.9906910061836243,0.03133820742368698,0,-0.04053565487265587,-0.00015746543067507446,-0.05897727981209755,1],[7,-0.9895550012588501,-0.0465225987136364,-0.13644400238990784,0,-0.13392998278141022,-0.05345509946346283,0.9895480275154114,0,-0.05332998186349869,0.9974859952926636,0.0466659739613533,0,-0.006511901505291462,0.005468619987368584,-0.060966599732637405,1],[7,-0.9662399291992188,-0.2500990033149719,-0.061890795826911926,0,-0.04767651483416557,-0.06250450760126114,0.9969050288200378,0,-0.25319331884384155,0.9662010073661804,0.04847048223018646,0,-0.040135327726602554,-0.0016165297711268067,-0.05886450037360191,1],[7,-0.9901149868965149,0.03249209746718407,-0.13644400238990784,0,-0.13776427507400513,-0.04261089116334915,0.9895480275154114,0,0.026338502764701843,0.9985629916191101,0.04666593670845032,0,-0.019342873245477676,0.006384949665516615,-0.060966599732637405,1],[7,-0.9901149868965149,0.03249209746718407,-0.13644400238990784,0,-0.13776427507400513,-0.04261089116334915,0.9895480275154114,0,0.026338502764701843,0.9985629916191101,0.04666593670845032,0,-0.011242453008890152,0.006384949665516615,-0.060966599732637405,1],[7,-0.966211199760437,-0.25305700302124023,0.04897679388523102,0,0.055962689220905304,-0.02047760598361492,0.9982230067253113,0,-0.2516043484210968,0.9672350287437439,0.0339474231004715,0,-0.05257672443985939,-0.0041212597861886024,-0.05386001989245415,1],[7,-0.9672641158103943,0.25293099880218506,-0.02063029818236828,0,-0.03598476201295853,-0.0562308095395565,0.9977689981460571,0,0.25120657682418823,0.965848982334137,0.06349170953035355,0,-0.03177937865257263,0.014936220832169056,-0.05725216120481491,1],[7,-0.9895550012588501,-0.0465225987136364,-0.13644400238990784,0,-0.13392998278141022,-0.05345509946346283,0.9895480275154114,0,-0.05332998186349869,0.9974859952926636,0.0466659739613533,0,-0.0013082213699817657,0.005468619987368584,-0.060966599732637405,1],[7,6.11638851617635e-17,-5.833826927650686e-17,1,0,0.998881995677948,0.04726329818367958,-5.833829574628647e-17,0,-0.04726329818367958,0.998881995677948,6.11639116315431e-17,0,-0.04269319027662277,-0.0008234300184994936,2.563246189073702e-18,1],[7,6.122529505043944e-17,-6.030347174092055e-17,1,0,0.9998850226402283,0.015169600024819374,-6.030347174092055e-17,0,-0.015169600024819374,0.9998850226402283,6.122529505043944e-17,0,-0.04954791069030762,0.0007677110261283815,3.0798808657977842e-18,1],[7,5.985136790532356e-17,-7.416329980327525e-17,1,0,0.977446973323822,-0.2111790031194687,-7.416332627305485e-17,0,0.2111790031194687,0.977446973323822,5.985138775765826e-17,0,-0.05578818917274475,0.013730029575526714,4.357267348032292e-18,1],[7,-0.7557510137557983,-0.5703139901161194,-0.3218422532081604,0,-0.22390900552272797,-0.23680199682712555,0.9454048871994019,0,-0.6153900027275085,0.7865539789199829,0.0512649305164814,0,0.00905591994524002,0.01108407974243164,-0.06002102419734001,1],[7,-0.07063166052103043,-0.021846704185009003,-0.9972630143165588,0,-0.9946739673614502,-0.07369910180568695,0.07206269353628159,0,-0.075071781873703,0.9970409870147705,-0.016524851322174072,0,0.014356869272887707,0.00028989295242354274,-0.010739260353147984,1],[7,-0.07384947687387466,-0.0035155045334249735,-0.9972630143165588,0,-0.9815620183944702,0.17703799903392792,0.07206270843744278,0,0.176300048828125,0.9841979742050171,-0.016524845734238625,0,0.029010290279984474,-0.0055952901020646095,-0.010739260353147984,1],[7,6.096432287590141e-17,-5.550928180307346e-17,1,0,0.995622992515564,0.09346509724855423,-5.5509255333293855e-17,0,-0.09346509724855423,0.995622992515564,6.096429640612181e-17,0,-0.03696995973587036,-0.002799419919028878,2.0984529892898495e-18,1],[7,0.00043790347990579903,0.042079851031303406,-0.9991139769554138,0,0.10044362396001816,0.9940599799156189,0.04191097244620323,0,0.9949430227279663,-0.10037299990653992,-0.0037913471460342407,0,-0.008446750231087208,0.0010378394508734345,-0.010595089755952358,1],[7,-1.2247805436516046e-8,-0.03372279927134514,-0.9994310140609741,0,-1,3.364509950642969e-7,9.022438907102526e-10,0,3.362292773090303e-7,0.9994310140609741,-0.03372279927134514,0,0.0059522101655602455,-0.00027136699645780027,-0.010334069840610027,1],[7,-0.07063166052103043,-0.021846704185009003,-0.9972630143165588,0,-0.9946739673614502,-0.07369910180568695,0.07206269353628159,0,-0.075071781873703,0.9970409870147705,-0.016524851322174072,0,0.0235291700810194,0.0002898959501180798,-0.010739260353147984,1],[7,-0.07384947687387466,-0.0035155045334249735,-0.9972630143165588,0,-0.9815620183944702,0.17703799903392792,0.07206270843744278,0,0.176300048828125,0.9841979742050171,-0.016524845734238625,0,0.03516453132033348,-0.0055952901020646095,-0.010739260353147984,1],[7,-0.996940016746521,0.062477000057697296,0.04698919504880905,0,-0.04407155513763428,0.04728539660573006,-0.9979090094566345,0,-0.06456824392080307,-0.9969260096549988,-0.044387225061655045,0,0.05246942862868309,-0.006207259837538004,0.05400291085243225,1],[7,-0.9975969791412354,0.0624816007912159,-0.0299358032643795,0,0.03301549330353737,0.048853401094675064,-0.9982600212097168,0,-0.060910407453775406,-0.9968500137329102,-0.050798848271369934,0,0.04129204899072647,-0.006295850034803152,0.05769351124763489,1],[7,-0.9975029826164246,0.06243849918246269,0.03299730271100998,0,-0.03000847063958645,0.04821539670228958,-0.998386025428772,0,-0.06392873078584671,-0.996882975101471,-0.04622134938836098,0,0.04876750707626343,-0.006257849745452404,0.05473095923662186,1],[7,-0.5124889016151428,0.5173630118370056,0.6853399276733398,0,0.020727958530187607,0.8053399920463562,-0.5924510955810547,0,-0.8584430813789368,-0.2894189953804016,-0.4234519600868225,0,0.02553672343492508,-0.06292001903057098,0.009630789048969746,1],[7,-0.46189382672309875,0.6606249213218689,0.5918009281158447,0,0.022141097113490105,0.6756231188774109,-0.7369140982627869,0,-0.8866590857505798,-0.3272729516029358,-0.32669293880462646,0,0.019758624956011772,-0.06097354367375374,0.02059684880077839,1],[7,-1.2987516839757518e-8,-0.03372279927134514,-0.9994310140609741,0,1,-3.3647398822722607e-7,-1.6416000780949958e-9,0,-3.3622734463278903e-7,-0.9994310140609741,0.03372279927134514,0,-0.0059522101655602455,0.00027136699645780027,0.010334069840610027,1],[7,0.00043792338692583144,0.04207983240485191,-0.9991139769554138,0,-0.10044362396001816,-0.9940599799156189,-0.04191095381975174,0,-0.9949430227279663,0.10037299990653992,0.0037913252599537373,0,0.008446750231087208,-0.0010378392180427909,0.010595089755952358,1],[7,-0.07063166052103043,-0.021846704185009003,-0.9972630143165588,0,0.9946739673614502,0.07369910180568695,-0.07206269353628159,0,0.075071781873703,-0.9970409870147705,0.016524851322174072,0,-0.0235291700810194,-0.0002898959501180798,0.010739260353147984,1],[7,-0.07384947687387466,-0.0035155045334249735,-0.9972630143165588,0,0.9815620183944702,-0.17703799903392792,-0.07206270843744278,0,-0.176300048828125,-0.9841979742050171,0.016524845734238625,0,-0.03516453132033348,0.0055952901020646095,0.010739260353147984,1],[7,-0.07063166052103043,-0.021846704185009003,-0.9972630143165588,0,0.9946739673614502,0.07369910180568695,-0.07206269353628159,0,0.075071781873703,-0.9970409870147705,0.016524851322174072,0,-0.014356869272887707,-0.00028989295242354274,0.010739260353147984,1],[7,-0.07384947687387466,-0.0035155045334249735,-0.9972630143165588,0,0.9815620183944702,-0.17703799903392792,-0.07206270843744278,0,-0.176300048828125,-0.9841979742050171,0.016524845734238625,0,-0.029010290279984474,0.0055952901020646095,0.010739260353147984,1],[7,-0.9901149868965149,0.03249209746718407,-0.13644400238990784,0,0.13776427507400513,0.04261089116334915,-0.9895480275154114,0,-0.026338502764701843,-0.9985629916191101,-0.04666593670845032,0,0.019342873245477676,-0.006384949665516615,0.060966599732637405,1],[7,-0.9895550012588501,-0.0465225987136364,-0.13644400238990784,0,0.13392998278141022,0.05345509946346283,-0.9895480275154114,0,0.053329985588788986,-0.9974859952926636,-0.0466659739613533,0,0.0013082210207358003,-0.005468619987368584,0.060966599732637405,1],[7,-0.9895550012588501,-0.0465225987136364,-0.13644400238990784,0,0.13392998278141022,0.05345509946346283,-0.9895480275154114,0,0.053329985588788986,-0.9974859952926636,-0.0466659739613533,0,0.006511901039630175,-0.005468619987368584,0.060966599732637405,1]],8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]]],0,0,[],[],[]],[[{"base":"2,2,0,0,0,0","mipmaps":["37nwow2rhLcq9AnlIYBQ/1"]}],[2],0,[],[],[]],[[[10,".bin",1909899844,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":43704,"length":5244,"count":2622,"stride":2}},{"primitiveMode":7,"jointMapIndex":1,"vertexBundelIndices":[1],"indexView":{"offset":105324,"length":7356,"count":3678,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":43704,"count":607,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]},{"view":{"offset":48948,"length":56376,"count":783,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,1,10,11,12,14,35,36,37,38,40,41,42,43,45,50,51,52,53,54,55,56,57,58,59],[0,14,20,21,28,29,30,31,33,34,35,36,37,38,39,40,41,42,43,44,45,54,56]]},"minPosition",8,[1,-0.03730551898479462,-0.00004055327735841274,-0.01208978146314621],"maxPosition",8,[1,0.03730551898479462,0.06608457863330841,0.015263852663338184]]],-1],0,0,[],[],[]],[[[67,"Skin-2",459418556,["Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L/Wrist_L/ThumbFinger1_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L/Wrist_L/IndexFinger1_L/IndexFinger2_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L/Wrist_L/IndexFinger1_L/IndexFinger2_L/IndexFinger3_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L/Wrist_L/IndexFinger1_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L/Wrist_L/RingFinger1_L/RingFinger2_L/RingFinger3_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L/Wrist_L/RingFinger1_L/RingFinger2_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L/Wrist_L/RingFinger1_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L/Wrist_L/PinkyFinger1_L/PinkyFinger2_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L/Wrist_L/PinkyFinger1_L/PinkyFinger2_L/PinkyFinger3_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L/Wrist_L/PinkyFinger1_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L/Wrist_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L","Root_M/Spine1_M/Spine2_M/Chest_M/Neck_M/Head_M","Root_M/Spine1_M/Spine2_M/Chest_M/Neck_M","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R/MiddleFinger1_R/MiddleFinger2_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R/MiddleFinger1_R/MiddleFinger2_R/MiddleFinger3_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R/MiddleFinger1_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R/IndexFinger1_R/IndexFinger2_R/IndexFinger3_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R/ThumbFinger1_R/ThumbFinger2_R/ThumbFinger3_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R/ThumbFinger1_R/ThumbFinger2_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R/ThumbFinger1_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R/IndexFinger1_R/IndexFinger2_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R/IndexFinger1_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R/RingFinger1_R/RingFinger2_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R/RingFinger1_R/RingFinger2_R/RingFinger3_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R/PinkyFinger1_R/PinkyFinger2_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R/RingFinger1_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R/PinkyFinger1_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R/PinkyFinger1_R/PinkyFinger2_R/PinkyFinger3_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R","Root_M/Spine1_M","Root_M/Spine1_M/Spine2_M","Root_M/Spine1_M/Spine2_M/Chest_M","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R","Root_M/Hip_R/HipPart1_R/Knee_R/KneePart1_R","Root_M/Hip_R/HipPart1_R","Root_M","Root_M/Hip_R/HipPart1_R/Knee_R/KneePart1_R/Ankle_R/Toes_R","Root_M/Hip_R/HipPart1_R/Knee_R/KneePart1_R/Ankle_R","Root_M/Hip_R/HipPart1_R/Knee_R","Root_M/Hip_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L/Wrist_L/MiddleFinger1_L/MiddleFinger2_L/MiddleFinger3_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L/Wrist_L/MiddleFinger1_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L/Wrist_L/MiddleFinger1_L/MiddleFinger2_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L/Wrist_L/ThumbFinger1_L/ThumbFinger2_L/ThumbFinger3_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L/Wrist_L/ThumbFinger1_L/ThumbFinger2_L","Root_M/Hip_L/HipPart1_L/Knee_L/KneePart1_L/Ankle_L","Root_M/Hip_L/HipPart1_L/Knee_L/KneePart1_L/Ankle_L/Toes_L","Root_M/Hip_L/HipPart1_L/Knee_L","Root_M/Hip_L","Root_M/Hip_L/HipPart1_L/Knee_L/KneePart1_L","Root_M/Hip_L/HipPart1_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L"],[[[7,-0.7557510137557983,-0.5703139901161194,-0.3218422532081604,0,0.22390900552272797,0.23680199682712555,-0.9454048871994019,0,0.6153900027275085,-0.7865539789199829,-0.0512649305164814,0,-0.00905591994524002,-0.01108407974243164,0.06002102419734001,1],[7,-0.3476259410381317,0.6398352384567261,0.6853957176208496,0,0.037808969616889954,0.7399557828903198,-0.6715921759605408,0,-0.9368710517883301,-0.20754867792129517,-0.28141921758651733,0,0.011073191650211811,-0.06431224197149277,0.013265267945826054,1],[7,-0.9617258906364441,0.2737799882888794,0.0113291060552001,0,0.003308737650513649,0.052944887429475784,-0.9985920190811157,0,-0.2739943861961365,-0.9603340029716492,-0.05182432010769844,0,0.0458025224506855,-0.013424228876829147,0.056004058569669724,1],[7,-0.961135983467102,0.2729640007019043,0.04133099317550659,0,-0.019721446558833122,0.08144168555736542,-0.9964830279350281,0,-0.2753699719905853,-0.9585710167884827,-0.07289327681064606,0,0.049957357347011566,-0.014998828992247581,0.054459650069475174,1],[7,-0.9615449905395508,0.2729310095310211,0.030667807906866074,0,-0.016838759183883667,0.052868086844682693,-0.9984599947929382,0,-0.2741319537162781,-0.9605799913406372,-0.046239227056503296,0,0.04271070659160614,-0.013379319570958614,0.055071618407964706,1],[7,-0.9914509057998657,-0.1304830014705658,0.0000434811481682118,0,-0.004555003251880407,0.0342773012816906,-0.9994019865989685,0,0.13040350377559662,-0.9908580183982849,-0.0345785915851593,0,0.050082188099622726,0.0004408420354593545,0.056115780025720596,1],[7,-0.9913020730018616,-0.1303589940071106,-0.018088296055793762,0,0.012422231957316399,0.04414789006114006,-0.9989479780197144,0,0.13102048635482788,-0.9904829859733582,-0.042144566774368286,0,0.04619400575757027,-0.0001193954813061282,0.0569600984454155,1],[7,-0.9895299673080444,-0.13035699725151062,-0.0619514025747776,0,0.057289570569992065,0.03921690955758095,-0.9975870251655579,0,0.13247206807136536,-0.9906910061836243,-0.03133820742368698,0,0.04053565487265587,0.0001574644265929237,0.05897727981209755,1],[7,-0.9669378995895386,-0.25398901104927063,0.022802405059337616,0,-0.03869044408202171,0.057734813541173935,-0.9975820183753967,0,0.25205835700035095,-0.9654819965362549,-0.06565298140048981,0,0.048522986471652985,0.002070489339530468,0.05487658083438873,1],[7,-0.966211199760437,-0.25305700302124023,0.04897679388523102,0,-0.055962689220905304,0.02047760598361492,-0.9982230067253113,0,0.2516043484210968,-0.9672350287437439,-0.0339474231004715,0,0.05257672443985939,0.0041212597861886024,0.05386001989245415,1],[7,-0.9662399291992188,-0.2500990033149719,-0.061890795826911926,0,0.04767651483416557,0.06250450760126114,-0.9969050288200378,0,0.25319331884384155,-0.9662010073661804,-0.04847048223018646,0,0.040135327726602554,0.0016165297711268067,0.05886450037360191,1],[7,-0.9672641158103943,0.25293099880218506,-0.02063029818236828,0,0.03598476201295853,0.0562308095395565,-0.9977689981460571,0,-0.25120657682418823,-0.965848982334137,-0.06349170953035355,0,0.03177937865257263,-0.014936220832169056,0.05725216120481491,1],[7,-0.9901149868965149,0.03249209746718407,-0.13644400238990784,0,0.13776427507400513,0.04261089116334915,-0.9895480275154114,0,-0.026338502764701843,-0.9985629916191101,-0.04666593670845032,0,0.011242453008890152,-0.006384949665516615,0.060966599732637405,1],[7,6.112818404652572e-17,-5.766256197772455e-17,1,0,0.9982990026473999,0.05829869955778122,-5.766257521261435e-17,0,-0.05829869955778122,0.9982990026473999,6.112819728141552e-17,0,-0.06528256833553314,-0.004379279911518097,3.738085849999092e-18,1],[7,5.810373379434603e-17,-8.055475896034999e-17,1,0,0.9489060044288635,-0.3155589997768402,-8.055475234290509e-17,0,0.3155589997768402,0.9489060044288635,5.810373379434603e-17,0,-0.05794582888484001,0.020108990371227264,4.98674352237902e-18,1],[7,-0.9975029826164246,0.06243849918246269,0.03299730271100998,0,0.03000847063958645,-0.04821539670228958,0.998386025428772,0,0.06392873078584671,0.996882975101471,0.04622134938836098,0,-0.04876750707626343,0.006257849745452404,-0.05473095923662186,1],[7,-0.996940016746521,0.062477000057697296,0.04698919504880905,0,0.04407155513763428,-0.04728539660573006,0.9979090094566345,0,0.06456824392080307,0.9969260096549988,0.044387225061655045,0,-0.05246942862868309,0.006207259837538004,-0.05400291085243225,1],[7,-0.9975969791412354,0.0624816007912159,-0.0299358032643795,0,-0.03301549330353737,-0.048853401094675064,0.9982600212097168,0,0.060910407453775406,0.9968500137329102,0.050798848271369934,0,-0.04129204899072647,0.006295850034803152,-0.05769351124763489,1],[7,-0.961135983467102,0.2729640007019043,0.04133099317550659,0,0.019721446558833122,-0.08144168555736542,0.9964830279350281,0,0.2753699719905853,0.9585710167884827,0.07289327681064606,0,-0.049957357347011566,0.014998828992247581,-0.054459650069475174,1],[7,-0.5124889016151428,0.5173630118370056,0.6853399276733398,0,-0.020727958530187607,-0.8053399920463562,0.5924510955810547,0,0.8584430813789368,0.2894189953804016,0.4234519600868225,0,-0.02553672343492508,0.06292001903057098,-0.009630789048969746,1],[7,-0.46189382672309875,0.6606249213218689,0.5918009281158447,0,-0.022141097113490105,-0.6756231188774109,0.7369140982627869,0,0.8866590857505798,0.3272729516029358,0.32669293880462646,0,-0.019758624956011772,0.06097354367375374,-0.02059684880077839,1],[7,-0.3476259410381317,0.6398352384567261,0.6853957176208496,0,-0.037808969616889954,-0.7399557828903198,0.6715921759605408,0,0.9368710517883301,0.20754867792129517,0.28141921758651733,0,-0.011073191650211811,0.06431224197149277,-0.013265278190374374,1],[7,-0.9617258906364441,0.2737799882888794,0.0113291060552001,0,-0.003308737650513649,-0.052944887429475784,0.9985920190811157,0,0.2739943861961365,0.9603340029716492,0.05182432010769844,0,-0.0458025224506855,0.013424228876829147,-0.056004058569669724,1],[7,-0.9615449905395508,0.2729310095310211,0.030667807906866074,0,0.016838759183883667,-0.052868086844682693,0.9984599947929382,0,0.2741319537162781,0.9605799913406372,0.046239227056503296,0,-0.04271070659160614,0.013379319570958614,-0.055071618407964706,1],[7,-0.9913020730018616,-0.1303589940071106,-0.018088296055793762,0,-0.012422231957316399,-0.04414789006114006,0.9989479780197144,0,-0.13102048635482788,0.9904829859733582,0.042144566774368286,0,-0.04619400575757027,0.0001193954813061282,-0.0569600984454155,1],[7,-0.9914509057998657,-0.1304830014705658,0.00004347742287791334,0,0.0045549990609288216,-0.0342772975564003,0.9994019865989685,0,-0.13040350377559662,0.9908580183982849,0.0345785915851593,0,-0.050082188099622726,-0.000440842064563185,-0.056115780025720596,1],[7,-0.9669378995895386,-0.25398901104927063,0.022802405059337616,0,0.03869044408202171,-0.057734813541173935,0.9975820183753967,0,-0.25205835700035095,0.9654819965362549,0.06565298140048981,0,-0.048522986471652985,-0.002070489339530468,-0.05487658083438873,1],[7,-0.9895299673080444,-0.13035699725151062,-0.0619514025747776,0,-0.057289570569992065,-0.03921690955758095,0.9975870251655579,0,-0.13247206807136536,0.9906910061836243,0.03133820742368698,0,-0.04053565487265587,-0.00015746543067507446,-0.05897727981209755,1],[7,-0.9895550012588501,-0.0465225987136364,-0.13644400238990784,0,-0.13392998278141022,-0.05345509946346283,0.9895480275154114,0,-0.05332998186349869,0.9974859952926636,0.0466659739613533,0,-0.006511901505291462,0.005468619987368584,-0.060966599732637405,1],[7,-0.9662399291992188,-0.2500990033149719,-0.061890795826911926,0,-0.04767651483416557,-0.06250450760126114,0.9969050288200378,0,-0.25319331884384155,0.9662010073661804,0.04847048223018646,0,-0.040135327726602554,-0.0016165297711268067,-0.05886450037360191,1],[7,-0.9901149868965149,0.03249209746718407,-0.13644400238990784,0,-0.13776427507400513,-0.04261089116334915,0.9895480275154114,0,0.026338502764701843,0.9985629916191101,0.04666593670845032,0,-0.019342873245477676,0.006384949665516615,-0.060966599732637405,1],[7,-0.9901149868965149,0.03249209746718407,-0.13644400238990784,0,-0.13776427507400513,-0.04261089116334915,0.9895480275154114,0,0.026338502764701843,0.9985629916191101,0.04666593670845032,0,-0.011242453008890152,0.006384949665516615,-0.060966599732637405,1],[7,-0.966211199760437,-0.25305700302124023,0.04897679388523102,0,0.055962689220905304,-0.02047760598361492,0.9982230067253113,0,-0.2516043484210968,0.9672350287437439,0.0339474231004715,0,-0.05257672443985939,-0.0041212597861886024,-0.05386001989245415,1],[7,-0.9672641158103943,0.25293099880218506,-0.02063029818236828,0,-0.03598476201295853,-0.0562308095395565,0.9977689981460571,0,0.25120657682418823,0.965848982334137,0.06349170953035355,0,-0.03177937865257263,0.014936220832169056,-0.05725216120481491,1],[7,-0.9895550012588501,-0.0465225987136364,-0.13644400238990784,0,-0.13392998278141022,-0.05345509946346283,0.9895480275154114,0,-0.05332998186349869,0.9974859952926636,0.0466659739613533,0,-0.0013082213699817657,0.005468619987368584,-0.060966599732637405,1],[7,6.11638851617635e-17,-5.833826927650686e-17,1,0,0.998881995677948,0.04726329818367958,-5.833829574628647e-17,0,-0.04726329818367958,0.998881995677948,6.11639116315431e-17,0,-0.04269319027662277,-0.0008234300184994936,2.563246189073702e-18,1],[7,6.122529505043944e-17,-6.030347174092055e-17,1,0,0.9998850226402283,0.015169600024819374,-6.030347174092055e-17,0,-0.015169600024819374,0.9998850226402283,6.122529505043944e-17,0,-0.04954791069030762,0.0007677110261283815,3.0798808657977842e-18,1],[7,5.985136790532356e-17,-7.416329980327525e-17,1,0,0.977446973323822,-0.2111790031194687,-7.416332627305485e-17,0,0.2111790031194687,0.977446973323822,5.985138775765826e-17,0,-0.05578818917274475,0.013730029575526714,4.357267348032292e-18,1],[7,-0.7557510137557983,-0.5703139901161194,-0.3218422532081604,0,-0.22390900552272797,-0.23680199682712555,0.9454048871994019,0,-0.6153900027275085,0.7865539789199829,0.0512649305164814,0,0.00905591994524002,0.01108407974243164,-0.06002102419734001,1],[7,-0.07063166052103043,-0.021846704185009003,-0.9972630143165588,0,-0.9946739673614502,-0.07369910180568695,0.07206269353628159,0,-0.075071781873703,0.9970409870147705,-0.016524851322174072,0,0.014356869272887707,0.00028989295242354274,-0.010739260353147984,1],[7,-0.07384947687387466,-0.0035155045334249735,-0.9972630143165588,0,-0.9815620183944702,0.17703799903392792,0.07206270843744278,0,0.176300048828125,0.9841979742050171,-0.016524845734238625,0,0.029010290279984474,-0.0055952901020646095,-0.010739260353147984,1],[7,6.096432287590141e-17,-5.550928180307346e-17,1,0,0.995622992515564,0.09346509724855423,-5.5509255333293855e-17,0,-0.09346509724855423,0.995622992515564,6.096429640612181e-17,0,-0.03696995973587036,-0.002799419919028878,2.0984529892898495e-18,1],[7,0.00043790347990579903,0.042079851031303406,-0.9991139769554138,0,0.10044362396001816,0.9940599799156189,0.04191097244620323,0,0.9949430227279663,-0.10037299990653992,-0.0037913471460342407,0,-0.008446750231087208,0.0010378394508734345,-0.010595089755952358,1],[7,-1.2247805436516046e-8,-0.03372279927134514,-0.9994310140609741,0,-1,3.364509950642969e-7,9.022438907102526e-10,0,3.362292773090303e-7,0.9994310140609741,-0.03372279927134514,0,0.0059522101655602455,-0.00027136699645780027,-0.010334069840610027,1],[7,-0.07063166052103043,-0.021846704185009003,-0.9972630143165588,0,-0.9946739673614502,-0.07369910180568695,0.07206269353628159,0,-0.075071781873703,0.9970409870147705,-0.016524851322174072,0,0.0235291700810194,0.0002898959501180798,-0.010739260353147984,1],[7,-0.07384947687387466,-0.0035155045334249735,-0.9972630143165588,0,-0.9815620183944702,0.17703799903392792,0.07206270843744278,0,0.176300048828125,0.9841979742050171,-0.016524845734238625,0,0.03516453132033348,-0.0055952901020646095,-0.010739260353147984,1],[7,-0.996940016746521,0.062477000057697296,0.04698919504880905,0,-0.04407155513763428,0.04728539660573006,-0.9979090094566345,0,-0.06456824392080307,-0.9969260096549988,-0.044387225061655045,0,0.05246942862868309,-0.006207259837538004,0.05400291085243225,1],[7,-0.9975969791412354,0.0624816007912159,-0.0299358032643795,0,0.03301549330353737,0.048853401094675064,-0.9982600212097168,0,-0.060910407453775406,-0.9968500137329102,-0.050798848271369934,0,0.04129204899072647,-0.006295850034803152,0.05769351124763489,1],[7,-0.9975029826164246,0.06243849918246269,0.03299730271100998,0,-0.03000847063958645,0.04821539670228958,-0.998386025428772,0,-0.06392873078584671,-0.996882975101471,-0.04622134938836098,0,0.04876750707626343,-0.006257849745452404,0.05473095923662186,1],[7,-0.5124889016151428,0.5173630118370056,0.6853399276733398,0,0.020727958530187607,0.8053399920463562,-0.5924510955810547,0,-0.8584430813789368,-0.2894189953804016,-0.4234519600868225,0,0.02553672343492508,-0.06292001903057098,0.009630789048969746,1],[7,-0.46189382672309875,0.6606249213218689,0.5918009281158447,0,0.022141097113490105,0.6756231188774109,-0.7369140982627869,0,-0.8866590857505798,-0.3272729516029358,-0.32669293880462646,0,0.019758624956011772,-0.06097354367375374,0.02059684880077839,1],[7,-1.2987516839757518e-8,-0.03372279927134514,-0.9994310140609741,0,1,-3.3647398822722607e-7,-1.6416000780949958e-9,0,-3.3622734463278903e-7,-0.9994310140609741,0.03372279927134514,0,-0.0059522101655602455,0.00027136699645780027,0.010334069840610027,1],[7,0.00043792338692583144,0.04207983240485191,-0.9991139769554138,0,-0.10044362396001816,-0.9940599799156189,-0.04191095381975174,0,-0.9949430227279663,0.10037299990653992,0.0037913252599537373,0,0.008446750231087208,-0.0010378392180427909,0.010595089755952358,1],[7,-0.07063166052103043,-0.021846704185009003,-0.9972630143165588,0,0.9946739673614502,0.07369910180568695,-0.07206269353628159,0,0.075071781873703,-0.9970409870147705,0.016524851322174072,0,-0.0235291700810194,-0.0002898959501180798,0.010739260353147984,1],[7,-0.07384947687387466,-0.0035155045334249735,-0.9972630143165588,0,0.9815620183944702,-0.17703799903392792,-0.07206270843744278,0,-0.176300048828125,-0.9841979742050171,0.016524845734238625,0,-0.03516453132033348,0.0055952901020646095,0.010739260353147984,1],[7,-0.07063166052103043,-0.021846704185009003,-0.9972630143165588,0,0.9946739673614502,0.07369910180568695,-0.07206269353628159,0,0.075071781873703,-0.9970409870147705,0.016524851322174072,0,-0.014356869272887707,-0.00028989295242354274,0.010739260353147984,1],[7,-0.07384947687387466,-0.0035155045334249735,-0.9972630143165588,0,0.9815620183944702,-0.17703799903392792,-0.07206270843744278,0,-0.176300048828125,-0.9841979742050171,0.016524845734238625,0,-0.029010290279984474,0.0055952901020646095,0.010739260353147984,1],[7,-0.9901149868965149,0.03249209746718407,-0.13644400238990784,0,0.13776427507400513,0.04261089116334915,-0.9895480275154114,0,-0.026338502764701843,-0.9985629916191101,-0.04666593670845032,0,0.019342873245477676,-0.006384949665516615,0.060966599732637405,1],[7,-0.9895550012588501,-0.0465225987136364,-0.13644400238990784,0,0.13392998278141022,0.05345509946346283,-0.9895480275154114,0,0.053329985588788986,-0.9974859952926636,-0.0466659739613533,0,0.0013082210207358003,-0.005468619987368584,0.060966599732637405,1],[7,-0.9895550012588501,-0.0465225987136364,-0.13644400238990784,0,0.13392998278141022,0.05345509946346283,-0.9895480275154114,0,0.053329985588788986,-0.9974859952926636,-0.0466659739613533,0,0.006511901039630175,-0.005468619987368584,0.060966599732637405,1]],8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]]],0,0,[],[],[]],[[[10,".bin",3579645361,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":37008,"length":7008,"count":1752,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":37008,"count":514,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,13]]},"minPosition",8,[1,-0.006430407054722309,0.08791641145944595,-0.0043572853319346905],"maxPosition",8,[1,0.005392216611653566,0.10029413551092148,0.007440903224050999]]],-1],0,0,[],[],[]],[[[67,"Skin-3",459418556,["Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L/Wrist_L/ThumbFinger1_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L/Wrist_L/IndexFinger1_L/IndexFinger2_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L/Wrist_L/IndexFinger1_L/IndexFinger2_L/IndexFinger3_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L/Wrist_L/IndexFinger1_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L/Wrist_L/RingFinger1_L/RingFinger2_L/RingFinger3_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L/Wrist_L/RingFinger1_L/RingFinger2_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L/Wrist_L/RingFinger1_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L/Wrist_L/PinkyFinger1_L/PinkyFinger2_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L/Wrist_L/PinkyFinger1_L/PinkyFinger2_L/PinkyFinger3_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L/Wrist_L/PinkyFinger1_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L/Wrist_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L","Root_M/Spine1_M/Spine2_M/Chest_M/Neck_M/Head_M","Root_M/Spine1_M/Spine2_M/Chest_M/Neck_M","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R/MiddleFinger1_R/MiddleFinger2_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R/MiddleFinger1_R/MiddleFinger2_R/MiddleFinger3_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R/MiddleFinger1_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R/IndexFinger1_R/IndexFinger2_R/IndexFinger3_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R/ThumbFinger1_R/ThumbFinger2_R/ThumbFinger3_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R/ThumbFinger1_R/ThumbFinger2_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R/ThumbFinger1_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R/IndexFinger1_R/IndexFinger2_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R/IndexFinger1_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R/RingFinger1_R/RingFinger2_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R/RingFinger1_R/RingFinger2_R/RingFinger3_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R/PinkyFinger1_R/PinkyFinger2_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R/RingFinger1_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R/PinkyFinger1_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R/PinkyFinger1_R/PinkyFinger2_R/PinkyFinger3_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R","Root_M/Spine1_M","Root_M/Spine1_M/Spine2_M","Root_M/Spine1_M/Spine2_M/Chest_M","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R","Root_M/Hip_R/HipPart1_R/Knee_R/KneePart1_R","Root_M/Hip_R/HipPart1_R","Root_M","Root_M/Hip_R/HipPart1_R/Knee_R/KneePart1_R/Ankle_R/Toes_R","Root_M/Hip_R/HipPart1_R/Knee_R/KneePart1_R/Ankle_R","Root_M/Hip_R/HipPart1_R/Knee_R","Root_M/Hip_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L/Wrist_L/MiddleFinger1_L/MiddleFinger2_L/MiddleFinger3_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L/Wrist_L/MiddleFinger1_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L/Wrist_L/MiddleFinger1_L/MiddleFinger2_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L/Wrist_L/ThumbFinger1_L/ThumbFinger2_L/ThumbFinger3_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L/Wrist_L/ThumbFinger1_L/ThumbFinger2_L","Root_M/Hip_L/HipPart1_L/Knee_L/KneePart1_L/Ankle_L","Root_M/Hip_L/HipPart1_L/Knee_L/KneePart1_L/Ankle_L/Toes_L","Root_M/Hip_L/HipPart1_L/Knee_L","Root_M/Hip_L","Root_M/Hip_L/HipPart1_L/Knee_L/KneePart1_L","Root_M/Hip_L/HipPart1_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L"],[[[7,-0.7557510137557983,-0.5703139901161194,-0.3218422532081604,0,0.22390900552272797,0.23680199682712555,-0.9454048871994019,0,0.6153900027275085,-0.7865539789199829,-0.0512649305164814,0,-0.00905591994524002,-0.01108407974243164,0.06002102419734001,1],[7,-0.3476259410381317,0.6398352384567261,0.6853957176208496,0,0.037808969616889954,0.7399557828903198,-0.6715921759605408,0,-0.9368710517883301,-0.20754867792129517,-0.28141921758651733,0,0.011073191650211811,-0.06431224197149277,0.013265267945826054,1],[7,-0.9617258906364441,0.2737799882888794,0.0113291060552001,0,0.003308737650513649,0.052944887429475784,-0.9985920190811157,0,-0.2739943861961365,-0.9603340029716492,-0.05182432010769844,0,0.0458025224506855,-0.013424228876829147,0.056004058569669724,1],[7,-0.961135983467102,0.2729640007019043,0.04133099317550659,0,-0.019721446558833122,0.08144168555736542,-0.9964830279350281,0,-0.2753699719905853,-0.9585710167884827,-0.07289327681064606,0,0.049957357347011566,-0.014998828992247581,0.054459650069475174,1],[7,-0.9615449905395508,0.2729310095310211,0.030667807906866074,0,-0.016838759183883667,0.052868086844682693,-0.9984599947929382,0,-0.2741319537162781,-0.9605799913406372,-0.046239227056503296,0,0.04271070659160614,-0.013379319570958614,0.055071618407964706,1],[7,-0.9914509057998657,-0.1304830014705658,0.0000434811481682118,0,-0.004555003251880407,0.0342773012816906,-0.9994019865989685,0,0.13040350377559662,-0.9908580183982849,-0.0345785915851593,0,0.050082188099622726,0.0004408420354593545,0.056115780025720596,1],[7,-0.9913020730018616,-0.1303589940071106,-0.018088296055793762,0,0.012422231957316399,0.04414789006114006,-0.9989479780197144,0,0.13102048635482788,-0.9904829859733582,-0.042144566774368286,0,0.04619400575757027,-0.0001193954813061282,0.0569600984454155,1],[7,-0.9895299673080444,-0.13035699725151062,-0.0619514025747776,0,0.057289570569992065,0.03921690955758095,-0.9975870251655579,0,0.13247206807136536,-0.9906910061836243,-0.03133820742368698,0,0.04053565487265587,0.0001574644265929237,0.05897727981209755,1],[7,-0.9669378995895386,-0.25398901104927063,0.022802405059337616,0,-0.03869044408202171,0.057734813541173935,-0.9975820183753967,0,0.25205835700035095,-0.9654819965362549,-0.06565298140048981,0,0.048522986471652985,0.002070489339530468,0.05487658083438873,1],[7,-0.966211199760437,-0.25305700302124023,0.04897679388523102,0,-0.055962689220905304,0.02047760598361492,-0.9982230067253113,0,0.2516043484210968,-0.9672350287437439,-0.0339474231004715,0,0.05257672443985939,0.0041212597861886024,0.05386001989245415,1],[7,-0.9662399291992188,-0.2500990033149719,-0.061890795826911926,0,0.04767651483416557,0.06250450760126114,-0.9969050288200378,0,0.25319331884384155,-0.9662010073661804,-0.04847048223018646,0,0.040135327726602554,0.0016165297711268067,0.05886450037360191,1],[7,-0.9672641158103943,0.25293099880218506,-0.02063029818236828,0,0.03598476201295853,0.0562308095395565,-0.9977689981460571,0,-0.25120657682418823,-0.965848982334137,-0.06349170953035355,0,0.03177937865257263,-0.014936220832169056,0.05725216120481491,1],[7,-0.9901149868965149,0.03249209746718407,-0.13644400238990784,0,0.13776427507400513,0.04261089116334915,-0.9895480275154114,0,-0.026338502764701843,-0.9985629916191101,-0.04666593670845032,0,0.011242453008890152,-0.006384949665516615,0.060966599732637405,1],[7,6.112818404652572e-17,-5.766256197772455e-17,1,0,0.9982990026473999,0.05829869955778122,-5.766257521261435e-17,0,-0.05829869955778122,0.9982990026473999,6.112819728141552e-17,0,-0.06528256833553314,-0.004379279911518097,3.738085849999092e-18,1],[7,5.810373379434603e-17,-8.055475896034999e-17,1,0,0.9489060044288635,-0.3155589997768402,-8.055475234290509e-17,0,0.3155589997768402,0.9489060044288635,5.810373379434603e-17,0,-0.05794582888484001,0.020108990371227264,4.98674352237902e-18,1],[7,-0.9975029826164246,0.06243849918246269,0.03299730271100998,0,0.03000847063958645,-0.04821539670228958,0.998386025428772,0,0.06392873078584671,0.996882975101471,0.04622134938836098,0,-0.04876750707626343,0.006257849745452404,-0.05473095923662186,1],[7,-0.996940016746521,0.062477000057697296,0.04698919504880905,0,0.04407155513763428,-0.04728539660573006,0.9979090094566345,0,0.06456824392080307,0.9969260096549988,0.044387225061655045,0,-0.05246942862868309,0.006207259837538004,-0.05400291085243225,1],[7,-0.9975969791412354,0.0624816007912159,-0.0299358032643795,0,-0.03301549330353737,-0.048853401094675064,0.9982600212097168,0,0.060910407453775406,0.9968500137329102,0.050798848271369934,0,-0.04129204899072647,0.006295850034803152,-0.05769351124763489,1],[7,-0.961135983467102,0.2729640007019043,0.04133099317550659,0,0.019721446558833122,-0.08144168555736542,0.9964830279350281,0,0.2753699719905853,0.9585710167884827,0.07289327681064606,0,-0.049957357347011566,0.014998828992247581,-0.054459650069475174,1],[7,-0.5124889016151428,0.5173630118370056,0.6853399276733398,0,-0.020727958530187607,-0.8053399920463562,0.5924510955810547,0,0.8584430813789368,0.2894189953804016,0.4234519600868225,0,-0.02553672343492508,0.06292001903057098,-0.009630789048969746,1],[7,-0.46189382672309875,0.6606249213218689,0.5918009281158447,0,-0.022141097113490105,-0.6756231188774109,0.7369140982627869,0,0.8866590857505798,0.3272729516029358,0.32669293880462646,0,-0.019758624956011772,0.06097354367375374,-0.02059684880077839,1],[7,-0.3476259410381317,0.6398352384567261,0.6853957176208496,0,-0.037808969616889954,-0.7399557828903198,0.6715921759605408,0,0.9368710517883301,0.20754867792129517,0.28141921758651733,0,-0.011073191650211811,0.06431224197149277,-0.013265278190374374,1],[7,-0.9617258906364441,0.2737799882888794,0.0113291060552001,0,-0.003308737650513649,-0.052944887429475784,0.9985920190811157,0,0.2739943861961365,0.9603340029716492,0.05182432010769844,0,-0.0458025224506855,0.013424228876829147,-0.056004058569669724,1],[7,-0.9615449905395508,0.2729310095310211,0.030667807906866074,0,0.016838759183883667,-0.052868086844682693,0.9984599947929382,0,0.2741319537162781,0.9605799913406372,0.046239227056503296,0,-0.04271070659160614,0.013379319570958614,-0.055071618407964706,1],[7,-0.9913020730018616,-0.1303589940071106,-0.018088296055793762,0,-0.012422231957316399,-0.04414789006114006,0.9989479780197144,0,-0.13102048635482788,0.9904829859733582,0.042144566774368286,0,-0.04619400575757027,0.0001193954813061282,-0.0569600984454155,1],[7,-0.9914509057998657,-0.1304830014705658,0.00004347742287791334,0,0.0045549990609288216,-0.0342772975564003,0.9994019865989685,0,-0.13040350377559662,0.9908580183982849,0.0345785915851593,0,-0.050082188099622726,-0.000440842064563185,-0.056115780025720596,1],[7,-0.9669378995895386,-0.25398901104927063,0.022802405059337616,0,0.03869044408202171,-0.057734813541173935,0.9975820183753967,0,-0.25205835700035095,0.9654819965362549,0.06565298140048981,0,-0.048522986471652985,-0.002070489339530468,-0.05487658083438873,1],[7,-0.9895299673080444,-0.13035699725151062,-0.0619514025747776,0,-0.057289570569992065,-0.03921690955758095,0.9975870251655579,0,-0.13247206807136536,0.9906910061836243,0.03133820742368698,0,-0.04053565487265587,-0.00015746543067507446,-0.05897727981209755,1],[7,-0.9895550012588501,-0.0465225987136364,-0.13644400238990784,0,-0.13392998278141022,-0.05345509946346283,0.9895480275154114,0,-0.05332998186349869,0.9974859952926636,0.0466659739613533,0,-0.006511901505291462,0.005468619987368584,-0.060966599732637405,1],[7,-0.9662399291992188,-0.2500990033149719,-0.061890795826911926,0,-0.04767651483416557,-0.06250450760126114,0.9969050288200378,0,-0.25319331884384155,0.9662010073661804,0.04847048223018646,0,-0.040135327726602554,-0.0016165297711268067,-0.05886450037360191,1],[7,-0.9901149868965149,0.03249209746718407,-0.13644400238990784,0,-0.13776427507400513,-0.04261089116334915,0.9895480275154114,0,0.026338502764701843,0.9985629916191101,0.04666593670845032,0,-0.019342873245477676,0.006384949665516615,-0.060966599732637405,1],[7,-0.9901149868965149,0.03249209746718407,-0.13644400238990784,0,-0.13776427507400513,-0.04261089116334915,0.9895480275154114,0,0.026338502764701843,0.9985629916191101,0.04666593670845032,0,-0.011242453008890152,0.006384949665516615,-0.060966599732637405,1],[7,-0.966211199760437,-0.25305700302124023,0.04897679388523102,0,0.055962689220905304,-0.02047760598361492,0.9982230067253113,0,-0.2516043484210968,0.9672350287437439,0.0339474231004715,0,-0.05257672443985939,-0.0041212597861886024,-0.05386001989245415,1],[7,-0.9672641158103943,0.25293099880218506,-0.02063029818236828,0,-0.03598476201295853,-0.0562308095395565,0.9977689981460571,0,0.25120657682418823,0.965848982334137,0.06349170953035355,0,-0.03177937865257263,0.014936220832169056,-0.05725216120481491,1],[7,-0.9895550012588501,-0.0465225987136364,-0.13644400238990784,0,-0.13392998278141022,-0.05345509946346283,0.9895480275154114,0,-0.05332998186349869,0.9974859952926636,0.0466659739613533,0,-0.0013082213699817657,0.005468619987368584,-0.060966599732637405,1],[7,6.11638851617635e-17,-5.833826927650686e-17,1,0,0.998881995677948,0.04726329818367958,-5.833829574628647e-17,0,-0.04726329818367958,0.998881995677948,6.11639116315431e-17,0,-0.04269319027662277,-0.0008234300184994936,2.563246189073702e-18,1],[7,6.122529505043944e-17,-6.030347174092055e-17,1,0,0.9998850226402283,0.015169600024819374,-6.030347174092055e-17,0,-0.015169600024819374,0.9998850226402283,6.122529505043944e-17,0,-0.04954791069030762,0.0007677110261283815,3.0798808657977842e-18,1],[7,5.985136790532356e-17,-7.416329980327525e-17,1,0,0.977446973323822,-0.2111790031194687,-7.416332627305485e-17,0,0.2111790031194687,0.977446973323822,5.985138775765826e-17,0,-0.05578818917274475,0.013730029575526714,4.357267348032292e-18,1],[7,-0.7557510137557983,-0.5703139901161194,-0.3218422532081604,0,-0.22390900552272797,-0.23680199682712555,0.9454048871994019,0,-0.6153900027275085,0.7865539789199829,0.0512649305164814,0,0.00905591994524002,0.01108407974243164,-0.06002102419734001,1],[7,-0.07063166052103043,-0.021846704185009003,-0.9972630143165588,0,-0.9946739673614502,-0.07369910180568695,0.07206269353628159,0,-0.075071781873703,0.9970409870147705,-0.016524851322174072,0,0.014356869272887707,0.00028989295242354274,-0.010739260353147984,1],[7,-0.07384947687387466,-0.0035155045334249735,-0.9972630143165588,0,-0.9815620183944702,0.17703799903392792,0.07206270843744278,0,0.176300048828125,0.9841979742050171,-0.016524845734238625,0,0.029010290279984474,-0.0055952901020646095,-0.010739260353147984,1],[7,6.096432287590141e-17,-5.550928180307346e-17,1,0,0.995622992515564,0.09346509724855423,-5.5509255333293855e-17,0,-0.09346509724855423,0.995622992515564,6.096429640612181e-17,0,-0.03696995973587036,-0.002799419919028878,2.0984529892898495e-18,1],[7,0.00043790347990579903,0.042079851031303406,-0.9991139769554138,0,0.10044362396001816,0.9940599799156189,0.04191097244620323,0,0.9949430227279663,-0.10037299990653992,-0.0037913471460342407,0,-0.008446750231087208,0.0010378394508734345,-0.010595089755952358,1],[7,-1.2247805436516046e-8,-0.03372279927134514,-0.9994310140609741,0,-1,3.364509950642969e-7,9.022438907102526e-10,0,3.362292773090303e-7,0.9994310140609741,-0.03372279927134514,0,0.0059522101655602455,-0.00027136699645780027,-0.010334069840610027,1],[7,-0.07063166052103043,-0.021846704185009003,-0.9972630143165588,0,-0.9946739673614502,-0.07369910180568695,0.07206269353628159,0,-0.075071781873703,0.9970409870147705,-0.016524851322174072,0,0.0235291700810194,0.0002898959501180798,-0.010739260353147984,1],[7,-0.07384947687387466,-0.0035155045334249735,-0.9972630143165588,0,-0.9815620183944702,0.17703799903392792,0.07206270843744278,0,0.176300048828125,0.9841979742050171,-0.016524845734238625,0,0.03516453132033348,-0.0055952901020646095,-0.010739260353147984,1],[7,-0.996940016746521,0.062477000057697296,0.04698919504880905,0,-0.04407155513763428,0.04728539660573006,-0.9979090094566345,0,-0.06456824392080307,-0.9969260096549988,-0.044387225061655045,0,0.05246942862868309,-0.006207259837538004,0.05400291085243225,1],[7,-0.9975969791412354,0.0624816007912159,-0.0299358032643795,0,0.03301549330353737,0.048853401094675064,-0.9982600212097168,0,-0.060910407453775406,-0.9968500137329102,-0.050798848271369934,0,0.04129204899072647,-0.006295850034803152,0.05769351124763489,1],[7,-0.9975029826164246,0.06243849918246269,0.03299730271100998,0,-0.03000847063958645,0.04821539670228958,-0.998386025428772,0,-0.06392873078584671,-0.996882975101471,-0.04622134938836098,0,0.04876750707626343,-0.006257849745452404,0.05473095923662186,1],[7,-0.5124889016151428,0.5173630118370056,0.6853399276733398,0,0.020727958530187607,0.8053399920463562,-0.5924510955810547,0,-0.8584430813789368,-0.2894189953804016,-0.4234519600868225,0,0.02553672343492508,-0.06292001903057098,0.009630789048969746,1],[7,-0.46189382672309875,0.6606249213218689,0.5918009281158447,0,0.022141097113490105,0.6756231188774109,-0.7369140982627869,0,-0.8866590857505798,-0.3272729516029358,-0.32669293880462646,0,0.019758624956011772,-0.06097354367375374,0.02059684880077839,1],[7,-1.2987516839757518e-8,-0.03372279927134514,-0.9994310140609741,0,1,-3.3647398822722607e-7,-1.6416000780949958e-9,0,-3.3622734463278903e-7,-0.9994310140609741,0.03372279927134514,0,-0.0059522101655602455,0.00027136699645780027,0.010334069840610027,1],[7,0.00043792338692583144,0.04207983240485191,-0.9991139769554138,0,-0.10044362396001816,-0.9940599799156189,-0.04191095381975174,0,-0.9949430227279663,0.10037299990653992,0.0037913252599537373,0,0.008446750231087208,-0.0010378392180427909,0.010595089755952358,1],[7,-0.07063166052103043,-0.021846704185009003,-0.9972630143165588,0,0.9946739673614502,0.07369910180568695,-0.07206269353628159,0,0.075071781873703,-0.9970409870147705,0.016524851322174072,0,-0.0235291700810194,-0.0002898959501180798,0.010739260353147984,1],[7,-0.07384947687387466,-0.0035155045334249735,-0.9972630143165588,0,0.9815620183944702,-0.17703799903392792,-0.07206270843744278,0,-0.176300048828125,-0.9841979742050171,0.016524845734238625,0,-0.03516453132033348,0.0055952901020646095,0.010739260353147984,1],[7,-0.07063166052103043,-0.021846704185009003,-0.9972630143165588,0,0.9946739673614502,0.07369910180568695,-0.07206269353628159,0,0.075071781873703,-0.9970409870147705,0.016524851322174072,0,-0.014356869272887707,-0.00028989295242354274,0.010739260353147984,1],[7,-0.07384947687387466,-0.0035155045334249735,-0.9972630143165588,0,0.9815620183944702,-0.17703799903392792,-0.07206270843744278,0,-0.176300048828125,-0.9841979742050171,0.016524845734238625,0,-0.029010290279984474,0.0055952901020646095,0.010739260353147984,1],[7,-0.9901149868965149,0.03249209746718407,-0.13644400238990784,0,0.13776427507400513,0.04261089116334915,-0.9895480275154114,0,-0.026338502764701843,-0.9985629916191101,-0.04666593670845032,0,0.019342873245477676,-0.006384949665516615,0.060966599732637405,1],[7,-0.9895550012588501,-0.0465225987136364,-0.13644400238990784,0,0.13392998278141022,0.05345509946346283,-0.9895480275154114,0,0.053329985588788986,-0.9974859952926636,-0.0466659739613533,0,0.0013082210207358003,-0.005468619987368584,0.060966599732637405,1],[7,-0.9895550012588501,-0.0465225987136364,-0.13644400238990784,0,0.13392998278141022,0.05345509946346283,-0.9895480275154114,0,0.053329985588788986,-0.9974859952926636,-0.0466659739613533,0,0.006511901039630175,-0.005468619987368584,0.060966599732637405,1]],8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]]],0,0,[],[],[]],[[[10,".bin",790582317,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":155952,"length":40560,"count":10140,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":155952,"count":2166,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,13]]},"minPosition",8,[1,-0.013646269217133522,0.06327325105667114,-0.010372340679168701],"maxPosition",8,[1,0.013646269217133522,0.09070964902639389,0.01391100324690342]]],-1],0,0,[],[],[]],[[[67,"Skin-1",459418556,["Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L/Wrist_L/ThumbFinger1_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L/Wrist_L/IndexFinger1_L/IndexFinger2_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L/Wrist_L/IndexFinger1_L/IndexFinger2_L/IndexFinger3_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L/Wrist_L/IndexFinger1_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L/Wrist_L/RingFinger1_L/RingFinger2_L/RingFinger3_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L/Wrist_L/RingFinger1_L/RingFinger2_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L/Wrist_L/RingFinger1_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L/Wrist_L/PinkyFinger1_L/PinkyFinger2_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L/Wrist_L/PinkyFinger1_L/PinkyFinger2_L/PinkyFinger3_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L/Wrist_L/PinkyFinger1_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L/Wrist_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L","Root_M/Spine1_M/Spine2_M/Chest_M/Neck_M/Head_M","Root_M/Spine1_M/Spine2_M/Chest_M/Neck_M","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R/MiddleFinger1_R/MiddleFinger2_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R/MiddleFinger1_R/MiddleFinger2_R/MiddleFinger3_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R/MiddleFinger1_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R/IndexFinger1_R/IndexFinger2_R/IndexFinger3_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R/ThumbFinger1_R/ThumbFinger2_R/ThumbFinger3_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R/ThumbFinger1_R/ThumbFinger2_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R/ThumbFinger1_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R/IndexFinger1_R/IndexFinger2_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R/IndexFinger1_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R/RingFinger1_R/RingFinger2_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R/RingFinger1_R/RingFinger2_R/RingFinger3_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R/PinkyFinger1_R/PinkyFinger2_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R/RingFinger1_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R/PinkyFinger1_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R/PinkyFinger1_R/PinkyFinger2_R/PinkyFinger3_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R","Root_M/Spine1_M","Root_M/Spine1_M/Spine2_M","Root_M/Spine1_M/Spine2_M/Chest_M","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R","Root_M/Hip_R/HipPart1_R/Knee_R/KneePart1_R","Root_M/Hip_R/HipPart1_R","Root_M","Root_M/Hip_R/HipPart1_R/Knee_R/KneePart1_R/Ankle_R/Toes_R","Root_M/Hip_R/HipPart1_R/Knee_R/KneePart1_R/Ankle_R","Root_M/Hip_R/HipPart1_R/Knee_R","Root_M/Hip_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L/Wrist_L/MiddleFinger1_L/MiddleFinger2_L/MiddleFinger3_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L/Wrist_L/MiddleFinger1_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L/Wrist_L/MiddleFinger1_L/MiddleFinger2_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L/Wrist_L/ThumbFinger1_L/ThumbFinger2_L/ThumbFinger3_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L/Wrist_L/ThumbFinger1_L/ThumbFinger2_L","Root_M/Hip_L/HipPart1_L/Knee_L/KneePart1_L/Ankle_L","Root_M/Hip_L/HipPart1_L/Knee_L/KneePart1_L/Ankle_L/Toes_L","Root_M/Hip_L/HipPart1_L/Knee_L","Root_M/Hip_L","Root_M/Hip_L/HipPart1_L/Knee_L/KneePart1_L","Root_M/Hip_L/HipPart1_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L"],[[[7,-0.7557510137557983,-0.5703139901161194,-0.3218422532081604,0,0.22390900552272797,0.23680199682712555,-0.9454048871994019,0,0.6153900027275085,-0.7865539789199829,-0.0512649305164814,0,-0.00905591994524002,-0.01108407974243164,0.06002102419734001,1],[7,-0.3476259410381317,0.6398352384567261,0.6853957176208496,0,0.037808969616889954,0.7399557828903198,-0.6715921759605408,0,-0.9368710517883301,-0.20754867792129517,-0.28141921758651733,0,0.011073191650211811,-0.06431224197149277,0.013265267945826054,1],[7,-0.9617258906364441,0.2737799882888794,0.0113291060552001,0,0.003308737650513649,0.052944887429475784,-0.9985920190811157,0,-0.2739943861961365,-0.9603340029716492,-0.05182432010769844,0,0.0458025224506855,-0.013424228876829147,0.056004058569669724,1],[7,-0.961135983467102,0.2729640007019043,0.04133099317550659,0,-0.019721446558833122,0.08144168555736542,-0.9964830279350281,0,-0.2753699719905853,-0.9585710167884827,-0.07289327681064606,0,0.049957357347011566,-0.014998828992247581,0.054459650069475174,1],[7,-0.9615449905395508,0.2729310095310211,0.030667807906866074,0,-0.016838759183883667,0.052868086844682693,-0.9984599947929382,0,-0.2741319537162781,-0.9605799913406372,-0.046239227056503296,0,0.04271070659160614,-0.013379319570958614,0.055071618407964706,1],[7,-0.9914509057998657,-0.1304830014705658,0.0000434811481682118,0,-0.004555003251880407,0.0342773012816906,-0.9994019865989685,0,0.13040350377559662,-0.9908580183982849,-0.0345785915851593,0,0.050082188099622726,0.0004408420354593545,0.056115780025720596,1],[7,-0.9913020730018616,-0.1303589940071106,-0.018088296055793762,0,0.012422231957316399,0.04414789006114006,-0.9989479780197144,0,0.13102048635482788,-0.9904829859733582,-0.042144566774368286,0,0.04619400575757027,-0.0001193954813061282,0.0569600984454155,1],[7,-0.9895299673080444,-0.13035699725151062,-0.0619514025747776,0,0.057289570569992065,0.03921690955758095,-0.9975870251655579,0,0.13247206807136536,-0.9906910061836243,-0.03133820742368698,0,0.04053565487265587,0.0001574644265929237,0.05897727981209755,1],[7,-0.9669378995895386,-0.25398901104927063,0.022802405059337616,0,-0.03869044408202171,0.057734813541173935,-0.9975820183753967,0,0.25205835700035095,-0.9654819965362549,-0.06565298140048981,0,0.048522986471652985,0.002070489339530468,0.05487658083438873,1],[7,-0.966211199760437,-0.25305700302124023,0.04897679388523102,0,-0.055962689220905304,0.02047760598361492,-0.9982230067253113,0,0.2516043484210968,-0.9672350287437439,-0.0339474231004715,0,0.05257672443985939,0.0041212597861886024,0.05386001989245415,1],[7,-0.9662399291992188,-0.2500990033149719,-0.061890795826911926,0,0.04767651483416557,0.06250450760126114,-0.9969050288200378,0,0.25319331884384155,-0.9662010073661804,-0.04847048223018646,0,0.040135327726602554,0.0016165297711268067,0.05886450037360191,1],[7,-0.9672641158103943,0.25293099880218506,-0.02063029818236828,0,0.03598476201295853,0.0562308095395565,-0.9977689981460571,0,-0.25120657682418823,-0.965848982334137,-0.06349170953035355,0,0.03177937865257263,-0.014936220832169056,0.05725216120481491,1],[7,-0.9901149868965149,0.03249209746718407,-0.13644400238990784,0,0.13776427507400513,0.04261089116334915,-0.9895480275154114,0,-0.026338502764701843,-0.9985629916191101,-0.04666593670845032,0,0.011242453008890152,-0.006384949665516615,0.060966599732637405,1],[7,6.112818404652572e-17,-5.766256197772455e-17,1,0,0.9982990026473999,0.05829869955778122,-5.766257521261435e-17,0,-0.05829869955778122,0.9982990026473999,6.112819728141552e-17,0,-0.06528256833553314,-0.004379279911518097,3.738085849999092e-18,1],[7,5.810373379434603e-17,-8.055475896034999e-17,1,0,0.9489060044288635,-0.3155589997768402,-8.055475234290509e-17,0,0.3155589997768402,0.9489060044288635,5.810373379434603e-17,0,-0.05794582888484001,0.020108990371227264,4.98674352237902e-18,1],[7,-0.9975029826164246,0.06243849918246269,0.03299730271100998,0,0.03000847063958645,-0.04821539670228958,0.998386025428772,0,0.06392873078584671,0.996882975101471,0.04622134938836098,0,-0.04876750707626343,0.006257849745452404,-0.05473095923662186,1],[7,-0.996940016746521,0.062477000057697296,0.04698919504880905,0,0.04407155513763428,-0.04728539660573006,0.9979090094566345,0,0.06456824392080307,0.9969260096549988,0.044387225061655045,0,-0.05246942862868309,0.006207259837538004,-0.05400291085243225,1],[7,-0.9975969791412354,0.0624816007912159,-0.0299358032643795,0,-0.03301549330353737,-0.048853401094675064,0.9982600212097168,0,0.060910407453775406,0.9968500137329102,0.050798848271369934,0,-0.04129204899072647,0.006295850034803152,-0.05769351124763489,1],[7,-0.961135983467102,0.2729640007019043,0.04133099317550659,0,0.019721446558833122,-0.08144168555736542,0.9964830279350281,0,0.2753699719905853,0.9585710167884827,0.07289327681064606,0,-0.049957357347011566,0.014998828992247581,-0.054459650069475174,1],[7,-0.5124889016151428,0.5173630118370056,0.6853399276733398,0,-0.020727958530187607,-0.8053399920463562,0.5924510955810547,0,0.8584430813789368,0.2894189953804016,0.4234519600868225,0,-0.02553672343492508,0.06292001903057098,-0.009630789048969746,1],[7,-0.46189382672309875,0.6606249213218689,0.5918009281158447,0,-0.022141097113490105,-0.6756231188774109,0.7369140982627869,0,0.8866590857505798,0.3272729516029358,0.32669293880462646,0,-0.019758624956011772,0.06097354367375374,-0.02059684880077839,1],[7,-0.3476259410381317,0.6398352384567261,0.6853957176208496,0,-0.037808969616889954,-0.7399557828903198,0.6715921759605408,0,0.9368710517883301,0.20754867792129517,0.28141921758651733,0,-0.011073191650211811,0.06431224197149277,-0.013265278190374374,1],[7,-0.9617258906364441,0.2737799882888794,0.0113291060552001,0,-0.003308737650513649,-0.052944887429475784,0.9985920190811157,0,0.2739943861961365,0.9603340029716492,0.05182432010769844,0,-0.0458025224506855,0.013424228876829147,-0.056004058569669724,1],[7,-0.9615449905395508,0.2729310095310211,0.030667807906866074,0,0.016838759183883667,-0.052868086844682693,0.9984599947929382,0,0.2741319537162781,0.9605799913406372,0.046239227056503296,0,-0.04271070659160614,0.013379319570958614,-0.055071618407964706,1],[7,-0.9913020730018616,-0.1303589940071106,-0.018088296055793762,0,-0.012422231957316399,-0.04414789006114006,0.9989479780197144,0,-0.13102048635482788,0.9904829859733582,0.042144566774368286,0,-0.04619400575757027,0.0001193954813061282,-0.0569600984454155,1],[7,-0.9914509057998657,-0.1304830014705658,0.00004347742287791334,0,0.0045549990609288216,-0.0342772975564003,0.9994019865989685,0,-0.13040350377559662,0.9908580183982849,0.0345785915851593,0,-0.050082188099622726,-0.000440842064563185,-0.056115780025720596,1],[7,-0.9669378995895386,-0.25398901104927063,0.022802405059337616,0,0.03869044408202171,-0.057734813541173935,0.9975820183753967,0,-0.25205835700035095,0.9654819965362549,0.06565298140048981,0,-0.048522986471652985,-0.002070489339530468,-0.05487658083438873,1],[7,-0.9895299673080444,-0.13035699725151062,-0.0619514025747776,0,-0.057289570569992065,-0.03921690955758095,0.9975870251655579,0,-0.13247206807136536,0.9906910061836243,0.03133820742368698,0,-0.04053565487265587,-0.00015746543067507446,-0.05897727981209755,1],[7,-0.9895550012588501,-0.0465225987136364,-0.13644400238990784,0,-0.13392998278141022,-0.05345509946346283,0.9895480275154114,0,-0.05332998186349869,0.9974859952926636,0.0466659739613533,0,-0.006511901505291462,0.005468619987368584,-0.060966599732637405,1],[7,-0.9662399291992188,-0.2500990033149719,-0.061890795826911926,0,-0.04767651483416557,-0.06250450760126114,0.9969050288200378,0,-0.25319331884384155,0.9662010073661804,0.04847048223018646,0,-0.040135327726602554,-0.0016165297711268067,-0.05886450037360191,1],[7,-0.9901149868965149,0.03249209746718407,-0.13644400238990784,0,-0.13776427507400513,-0.04261089116334915,0.9895480275154114,0,0.026338502764701843,0.9985629916191101,0.04666593670845032,0,-0.019342873245477676,0.006384949665516615,-0.060966599732637405,1],[7,-0.9901149868965149,0.03249209746718407,-0.13644400238990784,0,-0.13776427507400513,-0.04261089116334915,0.9895480275154114,0,0.026338502764701843,0.9985629916191101,0.04666593670845032,0,-0.011242453008890152,0.006384949665516615,-0.060966599732637405,1],[7,-0.966211199760437,-0.25305700302124023,0.04897679388523102,0,0.055962689220905304,-0.02047760598361492,0.9982230067253113,0,-0.2516043484210968,0.9672350287437439,0.0339474231004715,0,-0.05257672443985939,-0.0041212597861886024,-0.05386001989245415,1],[7,-0.9672641158103943,0.25293099880218506,-0.02063029818236828,0,-0.03598476201295853,-0.0562308095395565,0.9977689981460571,0,0.25120657682418823,0.965848982334137,0.06349170953035355,0,-0.03177937865257263,0.014936220832169056,-0.05725216120481491,1],[7,-0.9895550012588501,-0.0465225987136364,-0.13644400238990784,0,-0.13392998278141022,-0.05345509946346283,0.9895480275154114,0,-0.05332998186349869,0.9974859952926636,0.0466659739613533,0,-0.0013082213699817657,0.005468619987368584,-0.060966599732637405,1],[7,6.11638851617635e-17,-5.833826927650686e-17,1,0,0.998881995677948,0.04726329818367958,-5.833829574628647e-17,0,-0.04726329818367958,0.998881995677948,6.11639116315431e-17,0,-0.04269319027662277,-0.0008234300184994936,2.563246189073702e-18,1],[7,6.122529505043944e-17,-6.030347174092055e-17,1,0,0.9998850226402283,0.015169600024819374,-6.030347174092055e-17,0,-0.015169600024819374,0.9998850226402283,6.122529505043944e-17,0,-0.04954791069030762,0.0007677110261283815,3.0798808657977842e-18,1],[7,5.985136790532356e-17,-7.416329980327525e-17,1,0,0.977446973323822,-0.2111790031194687,-7.416332627305485e-17,0,0.2111790031194687,0.977446973323822,5.985138775765826e-17,0,-0.05578818917274475,0.013730029575526714,4.357267348032292e-18,1],[7,-0.7557510137557983,-0.5703139901161194,-0.3218422532081604,0,-0.22390900552272797,-0.23680199682712555,0.9454048871994019,0,-0.6153900027275085,0.7865539789199829,0.0512649305164814,0,0.00905591994524002,0.01108407974243164,-0.06002102419734001,1],[7,-0.07063166052103043,-0.021846704185009003,-0.9972630143165588,0,-0.9946739673614502,-0.07369910180568695,0.07206269353628159,0,-0.075071781873703,0.9970409870147705,-0.016524851322174072,0,0.014356869272887707,0.00028989295242354274,-0.010739260353147984,1],[7,-0.07384947687387466,-0.0035155045334249735,-0.9972630143165588,0,-0.9815620183944702,0.17703799903392792,0.07206270843744278,0,0.176300048828125,0.9841979742050171,-0.016524845734238625,0,0.029010290279984474,-0.0055952901020646095,-0.010739260353147984,1],[7,6.096432287590141e-17,-5.550928180307346e-17,1,0,0.995622992515564,0.09346509724855423,-5.5509255333293855e-17,0,-0.09346509724855423,0.995622992515564,6.096429640612181e-17,0,-0.03696995973587036,-0.002799419919028878,2.0984529892898495e-18,1],[7,0.00043790347990579903,0.042079851031303406,-0.9991139769554138,0,0.10044362396001816,0.9940599799156189,0.04191097244620323,0,0.9949430227279663,-0.10037299990653992,-0.0037913471460342407,0,-0.008446750231087208,0.0010378394508734345,-0.010595089755952358,1],[7,-1.2247805436516046e-8,-0.03372279927134514,-0.9994310140609741,0,-1,3.364509950642969e-7,9.022438907102526e-10,0,3.362292773090303e-7,0.9994310140609741,-0.03372279927134514,0,0.0059522101655602455,-0.00027136699645780027,-0.010334069840610027,1],[7,-0.07063166052103043,-0.021846704185009003,-0.9972630143165588,0,-0.9946739673614502,-0.07369910180568695,0.07206269353628159,0,-0.075071781873703,0.9970409870147705,-0.016524851322174072,0,0.0235291700810194,0.0002898959501180798,-0.010739260353147984,1],[7,-0.07384947687387466,-0.0035155045334249735,-0.9972630143165588,0,-0.9815620183944702,0.17703799903392792,0.07206270843744278,0,0.176300048828125,0.9841979742050171,-0.016524845734238625,0,0.03516453132033348,-0.0055952901020646095,-0.010739260353147984,1],[7,-0.996940016746521,0.062477000057697296,0.04698919504880905,0,-0.04407155513763428,0.04728539660573006,-0.9979090094566345,0,-0.06456824392080307,-0.9969260096549988,-0.044387225061655045,0,0.05246942862868309,-0.006207259837538004,0.05400291085243225,1],[7,-0.9975969791412354,0.0624816007912159,-0.0299358032643795,0,0.03301549330353737,0.048853401094675064,-0.9982600212097168,0,-0.060910407453775406,-0.9968500137329102,-0.050798848271369934,0,0.04129204899072647,-0.006295850034803152,0.05769351124763489,1],[7,-0.9975029826164246,0.06243849918246269,0.03299730271100998,0,-0.03000847063958645,0.04821539670228958,-0.998386025428772,0,-0.06392873078584671,-0.996882975101471,-0.04622134938836098,0,0.04876750707626343,-0.006257849745452404,0.05473095923662186,1],[7,-0.5124889016151428,0.5173630118370056,0.6853399276733398,0,0.020727958530187607,0.8053399920463562,-0.5924510955810547,0,-0.8584430813789368,-0.2894189953804016,-0.4234519600868225,0,0.02553672343492508,-0.06292001903057098,0.009630789048969746,1],[7,-0.46189382672309875,0.6606249213218689,0.5918009281158447,0,0.022141097113490105,0.6756231188774109,-0.7369140982627869,0,-0.8866590857505798,-0.3272729516029358,-0.32669293880462646,0,0.019758624956011772,-0.06097354367375374,0.02059684880077839,1],[7,-1.2987516839757518e-8,-0.03372279927134514,-0.9994310140609741,0,1,-3.3647398822722607e-7,-1.6416000780949958e-9,0,-3.3622734463278903e-7,-0.9994310140609741,0.03372279927134514,0,-0.0059522101655602455,0.00027136699645780027,0.010334069840610027,1],[7,0.00043792338692583144,0.04207983240485191,-0.9991139769554138,0,-0.10044362396001816,-0.9940599799156189,-0.04191095381975174,0,-0.9949430227279663,0.10037299990653992,0.0037913252599537373,0,0.008446750231087208,-0.0010378392180427909,0.010595089755952358,1],[7,-0.07063166052103043,-0.021846704185009003,-0.9972630143165588,0,0.9946739673614502,0.07369910180568695,-0.07206269353628159,0,0.075071781873703,-0.9970409870147705,0.016524851322174072,0,-0.0235291700810194,-0.0002898959501180798,0.010739260353147984,1],[7,-0.07384947687387466,-0.0035155045334249735,-0.9972630143165588,0,0.9815620183944702,-0.17703799903392792,-0.07206270843744278,0,-0.176300048828125,-0.9841979742050171,0.016524845734238625,0,-0.03516453132033348,0.0055952901020646095,0.010739260353147984,1],[7,-0.07063166052103043,-0.021846704185009003,-0.9972630143165588,0,0.9946739673614502,0.07369910180568695,-0.07206269353628159,0,0.075071781873703,-0.9970409870147705,0.016524851322174072,0,-0.014356869272887707,-0.00028989295242354274,0.010739260353147984,1],[7,-0.07384947687387466,-0.0035155045334249735,-0.9972630143165588,0,0.9815620183944702,-0.17703799903392792,-0.07206270843744278,0,-0.176300048828125,-0.9841979742050171,0.016524845734238625,0,-0.029010290279984474,0.0055952901020646095,0.010739260353147984,1],[7,-0.9901149868965149,0.03249209746718407,-0.13644400238990784,0,0.13776427507400513,0.04261089116334915,-0.9895480275154114,0,-0.026338502764701843,-0.9985629916191101,-0.04666593670845032,0,0.019342873245477676,-0.006384949665516615,0.060966599732637405,1],[7,-0.9895550012588501,-0.0465225987136364,-0.13644400238990784,0,0.13392998278141022,0.05345509946346283,-0.9895480275154114,0,0.053329985588788986,-0.9974859952926636,-0.0466659739613533,0,0.0013082210207358003,-0.005468619987368584,0.060966599732637405,1],[7,-0.9895550012588501,-0.0465225987136364,-0.13644400238990784,0,0.13392998278141022,0.05345509946346283,-0.9895480275154114,0,0.053329985588788986,-0.9974859952926636,-0.0466659739613533,0,0.006511901039630175,-0.005468619987368584,0.060966599732637405,1]],8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]]],0,0,[],[],[]],[[[57,"1",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{}],[{"USE_LIGHTMAP":true,"USE_ALBEDO_MAP":true},{},{}],[[[{},"mainTexture",6,0],{},{}],11,0,0]]],0,0,[0,0],[4,3],[118,2]],[[{"fmt":"0","w":0,"h":0},-1],[1],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["dcCTiT2PVBO4UvIzXQfNk9"]}],[2],0,[],[],[]],[[{"name":"tryBtn","rect":{"x":0,"y":0,"width":373,"height":167},"offset":{"x":0,"y":0},"originalSize":{"width":373,"height":167},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[3],0,[0],[9],[119]],[[[31,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{}],[{"USE_LIGHTMAP":true,"HAS_SECOND_UV":true},{},{}],[[[{"roughness":0.30151134729385376,"metallic":0},"mainColor",8,[4,4293778943]],{},{}],11,0,0]]],0,0,[0],[3],[2]],[[{"fmt":"1","w":0,"h":0},-1],[1],0,[],[],[]],[[{"base":"2,2,0,0,0,0","mipmaps":["dfCgmZJRlMnaDrul8xDoQa"]}],[2],0,[],[],[]],[[[10,".bin",1324059261,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":77232,"length":22176,"count":5544,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":77232,"count":1609,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.020160561427474022,-0.0016125263646245003,-0.01934860460460186],"maxPosition",8,[1,0.025917362421751022,0.019485151395201683,0.017504869028925896]]],-1],0,0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[1],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["e71uS35VpPpbPKtBCx7x94"]}],[2],0,[],[],[]],[[{"name":"img_navigate","rect":{"x":2,"y":1,"width":416,"height":201},"offset":{"x":0,"y":0.5},"originalSize":{"width":420,"height":204},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[3],0,[0],[9],[120]],[[{"fmt":"0","w":0,"h":0},-1],[1],0,[],[],[]],[[{"base":"2,2,0,0,0,0","mipmaps":["edGoT/hLNPK7dChjeBJYcx"]}],[2],0,[],[],[]],[[[31,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{}],[{"USE_ALBEDO_MAP":true},{},{}],[[[{"roughness":0.49053239822387695,"metallic":0.4000000059604645},"albedoScale",8,[1,0.800000011920929,0.800000011920929,0.800000011920929],"mainTexture",6,0],{},{}],11,0,0]]],0,0,[0,0],[4,3],[13,2]],[[{"fmt":"1","w":0,"h":0},-1],[1],0,[],[],[]],[[{"base":"2,2,0,0,0,0","mipmaps":["f2oym0FMFB+bmlBrvKnZnC"]}],[2],0,[],[],[]],[[[165,"CatEscape"],[43,"break_wall_",[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24]],[5,["d8s2smx0BGKZuCh9SYwYNL"]],[43,"break_wall_",[-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48]],[43,"Room",[-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64]],[134,"Canvas2D",33554432,[-69,-70,-71,-72,-73,-74,-75,-76,-77,-78],[[30,-65,[5,320,480]],[167,-67,-66],[168,45,-2.842170943040401e-14,-2.842170943040401e-14,-68]],[1,160,239.99999999999997,0]],[135,"Wall",[-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91],[1,1,1.5,0.9999999999999998]],[136,"Boss",[-100,-101,-102],[[113,true,-92,[190,191,192],193],[32,-93,[1,0,0.05,0],[1,0.05,0.1,0.05]],[58,16,100,-94,[1,1,0,1],[1,1,0,1]],[124,-99,-98,-97,-96,-95]],[1,-3.5,0,2.109],[3,0,0.7071067811865475,0,0.7071067811865476],[1,25,25,25],[1,0,90,0]],[137,"Boss_2",[-111,-112,-113],[[113,true,-103,[247,248,249],250],[32,-104,[1,0,0.05,0],[1,0.05,0.1,0.05]],[58,16,100,-105,[1,1,0,1],[1,1,0,1]],[124,-110,-109,-108,-107,-106]],[1,5.768,0,-3.135],[1,25,25,25]],[102,"CTA",33554432,5,[-116,-117,-118,-119,-120,-121],[[122,-114],[125,-115,[218,219],220]]],[103,0,{},[64,"f6h5JTA61Krp7fpJXxRpdl",-124,[126,"0aRJjUW8ZPNJ2S45jl1QOw",null,[[12,"Walk Break",["_name"],[5,["f6h5JTA61Krp7fpJXxRpdl"]]],[52,["_lpos"],[5,["f6h5JTA61Krp7fpJXxRpdl"]],[1,0,0.017,0]],[52,["_lrot"],[5,["f6h5JTA61Krp7fpJXxRpdl"]],[3,0.7071067811865475,0,0,0.7071067811865476]],[52,["_euler"],[5,["f6h5JTA61Krp7fpJXxRpdl"]],[1,90,0,0]],[12,1,["_simulationSpace"],[5,["b2Z3tunMxD543DLFEf8MY1"]]],[52,["_lscale"],[5,["f6h5JTA61Krp7fpJXxRpdl"]],[1,1,1,1]],[12,true,["loop"],[5,["d6dNQQc1JJ872kZBLdCYV/"]]],[12,true,["loop"],[5,["b2Z3tunMxD543DLFEf8MY1"]]],[12,true,["loop"],[5,["d8s2smx0BGKZuCh9SYwYNL"]]],[12,0,["scaleSpace"],[5,["b2Z3tunMxD543DLFEf8MY1"]]],[12,0,["scaleSpace"],[5,["d6dNQQc1JJ872kZBLdCYV/"]]],[12,0,["scaleSpace"],[5,["d8s2smx0BGKZuCh9SYwYNL"]]],[52,["_lscale"],[5,["ec12r82KpHmrFyR4IuXAYD"]],[1,0.007,0.007,0.007]],[52,["_lpos"],[5,["ec12r82KpHmrFyR4IuXAYD"]],[1,0,0,0.013]],[12,true,["playOnAwake"],[5,["d6dNQQc1JJ872kZBLdCYV/"]]],[12,2,["_materials","length"],[5,["d6dNQQc1JJ872kZBLdCYV/"]]],[12,null,["_materials","1"],[5,["d6dNQQc1JJ872kZBLdCYV/"]]],[12,0.25,["duration"],[5,["d6dNQQc1JJ872kZBLdCYV/"]]],[12,0.3,["startSizeX","constantMin"],[5,["d6dNQQc1JJ872kZBLdCYV/"]]],[12,2,["startSizeX","constantMax"],[5,["d6dNQQc1JJ872kZBLdCYV/"]]],[12,0.35,["simulationSpeed"],[5,["d6dNQQc1JJ872kZBLdCYV/"]]],[12,6.283185307179586,["startRotationZ","constantMin"],[5,["d6dNQQc1JJ872kZBLdCYV/"]]],[12,0,["gravityModifier","constant"],[5,["d6dNQQc1JJ872kZBLdCYV/"]]],[12,false,["startSize3D"],[5,["d6dNQQc1JJ872kZBLdCYV/"]]],[12,2,["startSpeed","constant"],[5,["d6dNQQc1JJ872kZBLdCYV/"]]],[12,0.6,["startLifetime","constantMax"],[5,["d6dNQQc1JJ872kZBLdCYV/"]]],[12,6.283185307179586,["startRotationZ","constantMax"],[5,["d6dNQQc1JJ872kZBLdCYV/"]]],[12,true,["_textureAnimationModule","_enable"],[5,["d6dNQQc1JJ872kZBLdCYV/"]]],[98,["renderer","_mainTexture"],[5,["d6dNQQc1JJ872kZBLdCYV/"]],86],[12,true,["_limitVelocityOvertimeModule","_enable"],[5,["d6dNQQc1JJ872kZBLdCYV/"]]],[12,false,["_trailModule","_enable"],[5,["d6dNQQc1JJ872kZBLdCYV/"]]],[12,0,["_simulationSpace"],[5,["d8s2smx0BGKZuCh9SYwYNL"]]],[12,true,["playOnAwake"],[5,["d8s2smx0BGKZuCh9SYwYNL"]]],[18,["_lpos"],-122,[1,0,0,0.017]],[98,["_materials","0"],[5,["d8s2smx0BGKZuCh9SYwYNL"]],87],[59,["renderer","_mainTexture"],2,88],[98,["_materials","0"],[5,["d6dNQQc1JJ872kZBLdCYV/"]],89],[12,0,["_simulationSpace"],[5,["d6dNQQc1JJ872kZBLdCYV/"]]],[16,0.10039999999999999,["_colorOverLifetimeModule","color","gradient","colorKeys","1","time"],2],[16,0.9352678571428571,["_colorOverLifetimeModule","color","gradient","alphaKeys","1","time"],2],[16,4,["_colorOverLifetimeModule","color","gradient","colorKeys","length"],2],[99,["_colorOverLifetimeModule","color","gradient","colorKeys","2"],2,[95,0.2701]],[99,["_colorOverLifetimeModule","color","gradient","colorKeys","3"],2,[20,1,[4,4278190335]]],[18,["_colorOverLifetimeModule","color","gradient","colorKeys","1","color"],2,[4,4284012543]],[16,0.2,["duration"],2],[16,0.1,["simulationSpeed"],2],[18,["startColor","color"],2,[4,2533359615]],[16,false,["startRotation3D"],2],[16,6.283185307179586,["startRotationZ","constant"],2],[18,["_lscale"],-123,[1,0.016,0.016,0.016]],[16,3,["startRotationZ","mode"],2],[16,6.283185307179586,["startRotationZ","constantMin"],2],[16,6.283185307179586,["startRotationZ","constantMax"],2],[16,3,["startLifetime","mode"],2],[16,0.2,["startLifetime","constantMin"],2],[16,0.6,["startLifetime","constantMax"],2],[16,0.8883928571428572,["_colorOverLifetimeModule","color","gradient","alphaKeys","0","time"],2],[16,255,["_colorOverLifetimeModule","color","gradient","alphaKeys","0","alpha"],2],[16,255,["_colorOverLifetimeModule","color","gradient","alphaKeys","1","alpha"],2],[16,3,["_colorOverLifetimeModule","color","gradient","alphaKeys","length"],2],[99,["_colorOverLifetimeModule","color","gradient","alphaKeys","2"],2,[96,255,0.9910714285714286]],[16,0.2,["startSpeed","constant"],2]]],85]],[110,"AudioManager","91MUdo8mRCu5o6mQ9zrX1M",[-126,-127,-128,-129,-130,-131,-132],[-125]],[103,0,null,[64,"c9MvU9yHNU6LSwn2Uz07lA",-151,[170,"6eaAH/Zd1DjLLvDwyDY7k7",[[172,[5,["c9MvU9yHNU6LSwn2Uz07lA"]],[[[32,-148,[1,0,0.02,0.004],[1,0.033,0.04,0.043]],[169,-149,[1,1,0,1]],-150],4,4,1]]],[[16,"Dog01_base",["_name"],-133],[18,["_lpos"],-134,[1,-7.64,0,2.195]],[18,["_lrot"],-135,[3,0,0.7071067811865475,0,0.7071067811865476]],[18,["_euler"],-136,[1,0,90,0]],[18,["_lscale"],-137,[1,30,30,30]],[16,3,["_clips","length"],-138],[59,["_clips","0"],-139,223],[59,["_defaultClip"],-140,224],[59,["_clips","1"],-141,225],[59,["_clips","2"],-142,226],[16,1,["_shadowCastingMode"],-143],[171,["_skinningRoot"],-145,-144],[59,["_materials","1"],-146,227],[59,["_materials","0"],-147,228]]],222]],[110,"GameNode","2dHAV5VQFGj4wTXC++MSEv",[-153,-154,-155,-156,5],[-152]],[173,11],[174,"CatEscape",[13,-172,-173,-174,11,-175],[151,"f82590ab-7475-4b63-9a96-e8c0a6a65b85",[[60,["_trailModule","_particleSystem"],10,[5,["b2Z3tunMxD543DLFEf8MY1"]],10,[5,["b2Z3tunMxD543DLFEf8MY1"]]],[60,["_trailModule","_particleSystem"],10,[5,["d6dNQQc1JJ872kZBLdCYV/"]],10,[5,["d6dNQQc1JJ872kZBLdCYV/"]]],[60,["_trailModule","_particleSystem"],10,[5,["d8s2smx0BGKZuCh9SYwYNL"]],10,[5,["d8s2smx0BGKZuCh9SYwYNL"]]],[60,["_trailModule","_particleSystem"],-163,[5,["5cc7kqZIFB1br2814jbBtQ"]],-162,[5,["5cc7kqZIFB1br2814jbBtQ"]]],[60,["_trailModule","_particleSystem"],-165,[5,["5cc7kqZIFB1br2814jbBtQ"]],-164,[5,["5cc7kqZIFB1br2814jbBtQ"]]],[60,["_trailModule","_particleSystem"],-167,[5,["5cc7kqZIFB1br2814jbBtQ"]],-166,[5,["5cc7kqZIFB1br2814jbBtQ"]]],[60,["_trailModule","_particleSystem"],-169,[5,["5cc7kqZIFB1br2814jbBtQ"]],-168,[5,["5cc7kqZIFB1br2814jbBtQ"]]],[60,["_trailModule","_particleSystem"],-171,[5,["5cc7kqZIFB1br2814jbBtQ"]],-170,[5,["5cc7kqZIFB1br2814jbBtQ"]]]],[10,-157,-158,-159,-160,-161,12]],[175,[176,0.5208,[2,0.23529411764705882,0.3607843137254902,0.796078431372549,0.520833125],[2,0.23529411764705882,0.3607843137254902,0.796078431372549,1],[2,0.519964,0.630786,0.905039,0.5208],[2,0.519544,0.630484,0.905069,0]],[177,1,true,2,0.05,0.4,0.2,30,2000,10,0.36,[4,4283190348],[0,2048,2048]],[178,true,311,312],[179],[180]]],[54,"Environment",13,[-176,6,-177,4,-178,-179]],[7,"break_wall.013",1,[[3,1,-180,[54],[1],55],[8,-181,[1,0.005,0.005,0.005]],[11,4,-182]],[1,0.007499203085899353,0.007452864665538073,-0.000001718401563266525]],[149,"carpet1",[[-183,-184,-185,-186,[72,"transform1",-187]],1,1,1,1,4]],[104,"Food",4,[-191,10],[[3,1,-188,[90],[112,true],91],[32,-189,[1,0,0.002,0],[1,0.00944,0.0035,0.006958]],[97,true,-190,[92],93]],[1,0.503,0.365,-3.092],[1,150,150,150]],[54,"Effects",16,[-192,-193,-194,-195,-196]],[75,"Electric_1",20,[-198,-199],[-197],[1,2.87,1.145,4.176],[3,0.7071067811865475,0,0,0.7071067811865476],[1,0.26,0.26000000000000006,0.26000000000000006],[1,89.99999999999999,0,0]],[75,"Electric_2",20,[-201,-202],[-200],[1,2.87,1.142,0.299],[3,0.7071067811865475,0,0,0.7071067811865476],[1,0.26,0.26000000000000006,0.26000000000000006],[1,89.99999999999999,0,0]],[75,"Electric_3",20,[-204,-205],[-203],[1,2.87,1.303,2.125],[3,0.7071067811865475,0,0,0.7071067811865476],[1,0.26,0.26000000000000006,0.26000000000000006],[1,89.99999999999999,0,0]],[75,"Electric_4",20,[-207,-208],[-206],[1,2.87,0.108,1.03],[3,0.7071067811865475,0,0,0.7071067811865476],[1,0.26,0.26000000000000006,0.26000000000000006],[1,89.99999999999999,0,0]],[75,"Electric_5",20,[-210,-211],[-209],[1,2.87,0.076,3.149],[3,0.7071067811865475,0,0,0.7071067811865476],[1,0.26,0.26000000000000006,0.26000000000000006],[1,89.99999999999999,0,0]],[54,"frydde_police",7,[-212,-213,-214,-215,-216]],[66,"Wrist_R",[-217,-218,-219,-220,-221],[1,0.008100420236587524,-4.440891999238953e-18,1.092459473171813e-15],[3,-0.0164531281851259,-0.05630427184355682,0.11041551000827825,0.9921529814976633],[1,-1.1876299830967663,-6.363205757160882,12.764891095942634]],[66,"Wrist_L",[-222,-223,-224,-225,-226],[1,-0.008100420236587524,9.992007618673103e-18,-1.0746959217184694e-15],[3,-0.0164531281851259,-0.05630427184355682,0.11041551000827825,0.9921529814976633],[1,-1.1876299830967663,-6.363205757160882,12.764891095942634]],[150,"JoyStick",33554432,5,[[[30,-227,[5,80,80]],[127,0,-228,221],-229,[128,0,-230]],4,4,1,4],[1,0,-130,0]],[138,"notie",33554432,9,[-233,-234,-235],[[30,-231,[5,346,467]],[70,-232,[4,16777215],217]],[1,0.88,0.88,1]],[54,"frydde_police",8,[-236,-237,-238,-239,-240]],[66,"Wrist_R",[-241,-242,-243,-244,-245],[1,0.008100420236587524,-4.440891999238953e-18,1.092459473171813e-15],[3,-0.0164531281851259,-0.05630427184355682,0.11041551000827825,0.9921529814976633],[1,-1.1876299830967663,-6.363205757160882,12.764891095942634]],[66,"Wrist_L",[-246,-247,-248,-249,-250],[1,-0.008100420236587524,9.992007618673103e-18,-1.0746959217184694e-15],[3,-0.0164531281851259,-0.05630427184355682,0.11041551000827825,0.9921529814976633],[1,-1.1876299830967663,-6.363205757160882,12.764891095942634]],[7,"break_wall.009",3,[[3,1,-251,[279],[1],280],[11,4,-252],[8,-253,[1,0.005,0.005,0.005]]],[1,-0.012499326840043068,0.007452864665538073,-0.000001718401563266525]],[7,"break_wall",1,[[3,1,-254,[28],[1],29],[8,-255,[1,0.005,0.005,0.005]],[11,4,-256]],[1,-0.017498958855867386,0.012452497147023678,-0.0000017197428405779647]],[7,"break_wall.001",1,[[3,1,-257,[30],[1],31],[8,-258,[1,0.005,0.005,0.005]],[11,4,-259]],[1,-0.012499326840043068,0.012452497147023678,-0.000001718401563266525]],[7,"break_wall.002",1,[[3,1,-260,[32],[1],33],[8,-261,[1,0.005,0.005,0.005]],[11,4,-262]],[1,-0.007499693427234888,0.012452497147023678,-0.000001718401563266525]],[7,"break_wall.004",1,[[3,1,-263,[36],[1],37],[8,-264,[1,0.005,0.005,0.005]],[11,4,-265]],[1,0.0024995713029056787,0.012452497147023678,-0.000001718401563266525]],[7,"break_wall.005",1,[[3,1,-266,[38],[1],39],[8,-267,[1,0.005,0.005,0.005]],[11,4,-268]],[1,0.007499203085899353,0.012452497147023678,-0.000001718401563266525]],[7,"break_wall.006",1,[[3,1,-269,[40],[1],41],[8,-270,[1,0.005,0.005,0.005]],[11,4,-271]],[1,0.012498835101723671,0.012452497147023678,-0.000001718401563266525]],[7,"break_wall.007",1,[[3,1,-272,[42],[1],43],[8,-273,[1,0.005,0.005,0.005]],[11,4,-274]],[1,0.017498468980193138,0.012452497147023678,-0.000001718401563266525]],[7,"break_wall.008",1,[[3,1,-275,[44],[1],45],[8,-276,[1,0.005,0.005,0.005]],[11,4,-277]],[1,-0.017498958855867386,0.007452864665538073,-0.000001718401563266525]],[7,"break_wall.009",1,[[3,1,-278,[46],[1],47],[8,-279,[1,0.005,0.005,0.005]],[11,4,-280]],[1,-0.012499326840043068,0.007452864665538073,-0.000001718401563266525]],[7,"break_wall.010",1,[[3,1,-281,[48],[1],49],[8,-282,[1,0.005,0.005,0.005]],[11,4,-283]],[1,-0.007499693427234888,0.007452864665538073,-0.000001718401563266525]],[7,"break_wall.011",1,[[3,1,-284,[50],[1],51],[8,-285,[1,0.005,0.005,0.005]],[11,4,-286]],[1,-0.0025000611785799265,0.007452864665538073,-0.000001718401563266525]],[7,"break_wall.012",1,[[3,1,-287,[52],[1],53],[8,-288,[1,0.005,0.005,0.005]],[11,4,-289]],[1,0.0024995713029056787,0.007452864665538073,-0.000001718401563266525]],[7,"break_wall.014",1,[[3,1,-290,[56],[1],57],[8,-291,[1,0.005,0.005,0.005]],[11,4,-292]],[1,0.012498835101723671,0.007452864665538073,-0.000001718401563266525]],[7,"break_wall.015",1,[[3,1,-293,[58],[1],59],[8,-294,[1,0.005,0.005,0.005]],[11,4,-295]],[1,0.017498468980193138,0.007452864665538073,-0.000001718401563266525]],[7,"break_wall.016",1,[[3,1,-296,[60],[1],61],[8,-297,[1,0.005,0.005,0.005]],[11,4,-298]],[1,-0.017498958855867386,0.0024532328825443983,-0.000001718401563266525]],[7,"break_wall.017",1,[[3,1,-299,[62],[1],63],[8,-300,[1,0.005,0.005,0.005]],[11,4,-301]],[1,-0.012499326840043068,0.0024532328825443983,-0.000001718401563266525]],[7,"break_wall.018",1,[[3,1,-302,[64],[1],65],[8,-303,[1,0.005,0.005,0.005]],[11,4,-304]],[1,-0.007499693427234888,0.0024532328825443983,-0.000001718401563266525]],[7,"break_wall.019",1,[[3,1,-305,[66],[1],67],[8,-306,[1,0.005,0.005,0.005]],[11,4,-307]],[1,-0.0025000611785799265,0.0024532328825443983,-0.000001718401563266525]],[7,"break_wall.020",1,[[3,1,-308,[68],[1],69],[8,-309,[1,0.005,0.005,0.005]],[11,4,-310]],[1,0.0024995713029056787,0.0024532328825443983,-0.000001718401563266525]],[7,"break_wall.021",1,[[3,1,-311,[70],[1],71],[8,-312,[1,0.005,0.005,0.005]],[11,4,-313]],[1,0.007499203085899353,0.0024532328825443983,-0.000001718401563266525]],[7,"break_wall.022",1,[[3,1,-314,[72],[1],73],[8,-315,[1,0.005,0.005,0.005]],[11,4,-316]],[1,0.012498835101723671,0.0024532328825443983,-0.000001718401563266525]],[7,"break_wall.023",1,[[3,1,-317,[74],[1],75],[8,-318,[1,0.005,0.005,0.005]],[11,4,-319]],[1,0.017498468980193138,0.0024532328825443983,-0.000001718401563266525]],[43,"Laser_Button",[-320,-321,-322,-323]],[43,"Laser_Button",[-324,-325,-326,-327]],[5,["88VDQVisBbw5m9OxjU+gSN"]],[5,["979k7HCjtdTLyKwDgx/GX2"]],[5,["979k7HCjtdTLyKwDgx/GX2"]],[5,["d73kkFTbpYrKPfopvD8lvZ"]],[44,"Vision",7,[[85,"Quad<ModelComponent>",-328,[188],[1],189],[46,-329],[123,false,32,10000,-330,[1,0,1,0]]],[1,0,0.003,0.049],[3,-0.7071067811865475,0,0,0.7071067811865476],[1,0.1,0.1,0.833333],[1,-90,0,0]],[181,13,14,12,5,29,9],[102,"Navigate",33554432,5,[-332,-333],[[122,-331]]],[91,"Point",33554432,5,[[30,-334,[5,40,40]],[88,0,-335,[4,4279177021],202],[128,0,-336]],[1,0,-130,0]],[105,"fakeBG",33554432,5,[[30,-337,[5,5000,5000]],[88,0,-338,[4,39423],203],[125,-339,[204],205]]],[40,"tryBtn",33554432,9,[[30,-340,[5,373,167]],[70,-341,[4,16777215],208],[182,3,1.1,-342,209]],[1,0,-162.034,0],[1,0.4,0.4,1]],[5,["c9MvU9yHNU6LSwn2Uz07lA"]],[5,["6fx9MD3wxcP7BQqAxTdce8"]],[44,"Vision",8,[[85,"Quad<ModelComponent>",-343,[245],[1],246],[46,-344],[123,false,32,10000,-345,[1,0,1,0]]],[1,0,0.003,0.049],[3,-0.7071067811865475,0,0,0.7071067811865476],[1,0.1,0.1,0.833333],[1,-90,0,0]],[7,"break_wall",3,[[3,1,-346,[309],[1],310],[11,4,-347],[8,-348,[1,0.005,0.005,0.005]]],[1,-0.017498958855867386,0.012452497147023678,-0.0000017197428405779647]],[7,"break_wall.001",3,[[3,1,-349,[263],[1],264],[11,4,-350],[8,-351,[1,0.005,0.005,0.005]]],[1,-0.012499326840043068,0.012452497147023678,-0.000001718401563266525]],[7,"break_wall.002",3,[[3,1,-352,[265],[1],266],[11,4,-353],[8,-354,[1,0.005,0.005,0.005]]],[1,-0.007499693427234888,0.012452497147023678,-0.000001718401563266525]],[7,"break_wall.003",3,[[3,1,-355,[267],[1],268],[11,4,-356],[8,-357,[1,0.005,0.005,0.005]]],[1,-0.0025000611785799265,0.012452497147023678,-0.000001718401563266525]],[7,"break_wall.004",3,[[3,1,-358,[269],[1],270],[11,4,-359],[8,-360,[1,0.005,0.005,0.005]]],[1,0.0024995713029056787,0.012452497147023678,-0.000001718401563266525]],[7,"break_wall.005",3,[[3,1,-361,[271],[1],272],[11,4,-362],[8,-363,[1,0.005,0.005,0.005]]],[1,0.007499203085899353,0.012452497147023678,-0.000001718401563266525]],[7,"break_wall.006",3,[[3,1,-364,[273],[1],274],[11,4,-365],[8,-366,[1,0.005,0.005,0.005]]],[1,0.012498835101723671,0.012452497147023678,-0.000001718401563266525]],[7,"break_wall.007",3,[[3,1,-367,[275],[1],276],[11,4,-368],[8,-369,[1,0.005,0.005,0.005]]],[1,0.017498468980193138,0.012452497147023678,-0.000001718401563266525]],[7,"break_wall.008",3,[[3,1,-370,[277],[1],278],[11,4,-371],[8,-372,[1,0.005,0.005,0.005]]],[1,-0.017498958855867386,0.007452864665538073,-0.000001718401563266525]],[7,"break_wall.010",3,[[3,1,-373,[281],[1],282],[11,4,-374],[8,-375,[1,0.005,0.005,0.005]]],[1,-0.007499693427234888,0.007452864665538073,-0.000001718401563266525]],[7,"break_wall.011",3,[[3,1,-376,[283],[1],284],[11,4,-377],[8,-378,[1,0.005,0.005,0.005]]],[1,-0.0025000611785799265,0.007452864665538073,-0.000001718401563266525]],[7,"break_wall.012",3,[[3,1,-379,[285],[1],286],[11,4,-380],[8,-381,[1,0.005,0.005,0.005]]],[1,0.0024995713029056787,0.007452864665538073,-0.000001718401563266525]],[7,"break_wall.013",3,[[3,1,-382,[287],[1],288],[11,4,-383],[8,-384,[1,0.005,0.005,0.005]]],[1,0.007499203085899353,0.007452864665538073,-0.000001718401563266525]],[7,"break_wall.014",3,[[3,1,-385,[289],[1],290],[11,4,-386],[8,-387,[1,0.005,0.005,0.005]]],[1,0.012498835101723671,0.007452864665538073,-0.000001718401563266525]],[7,"break_wall.015",3,[[3,1,-388,[291],[1],292],[11,4,-389],[8,-390,[1,0.005,0.005,0.005]]],[1,0.017498468980193138,0.007452864665538073,-0.000001718401563266525]],[7,"break_wall.016",3,[[3,1,-391,[293],[1],294],[11,4,-392],[8,-393,[1,0.005,0.005,0.005]]],[1,-0.017498958855867386,0.0024532328825443983,-0.000001718401563266525]],[7,"break_wall.017",3,[[3,1,-394,[295],[1],296],[11,4,-395],[8,-396,[1,0.005,0.005,0.005]]],[1,-0.012499326840043068,0.0024532328825443983,-0.000001718401563266525]],[7,"break_wall.018",3,[[3,1,-397,[297],[1],298],[11,4,-398],[8,-399,[1,0.005,0.005,0.005]]],[1,-0.007499693427234888,0.0024532328825443983,-0.000001718401563266525]],[7,"break_wall.019",3,[[3,1,-400,[299],[1],300],[11,4,-401],[8,-402,[1,0.005,0.005,0.005]]],[1,-0.0025000611785799265,0.0024532328825443983,-0.000001718401563266525]],[7,"break_wall.020",3,[[3,1,-403,[301],[1],302],[11,4,-404],[8,-405,[1,0.005,0.005,0.005]]],[1,0.0024995713029056787,0.0024532328825443983,-0.000001718401563266525]],[7,"break_wall.021",3,[[3,1,-406,[303],[1],304],[11,4,-407],[8,-408,[1,0.005,0.005,0.005]]],[1,0.007499203085899353,0.0024532328825443983,-0.000001718401563266525]],[7,"break_wall.022",3,[[3,1,-409,[305],[1],306],[11,4,-410],[8,-411,[1,0.005,0.005,0.005]]],[1,0.012498835101723671,0.0024532328825443983,-0.000001718401563266525]],[7,"break_wall.023",3,[[3,1,-412,[307],[1],308],[11,4,-413],[8,-414,[1,0.005,0.005,0.005]]],[1,0.017498468980193138,0.0024532328825443983,-0.000001718401563266525]],[40,"Cube1",8388608,6,[[38,"Cube<ModelComponent>",1,-415,[2],[1],3],[46,-416],[39,2,2,-417]],[1,0,0.5,-5],[1,20,2,0.25]],[40,"Cube2",8388608,6,[[38,"Cube<ModelComponent>",1,-418,[4],[1],5],[8,-419,[1,1,1.1,2]],[39,2,2,-420]],[1,-2,0.5,4.873],[1,16,2,0.25]],[106,"Cube3",8388608,6,[[85,"Cube<ModelComponent>",-421,[6],[1],7],[46,-422],[39,2,2,-423]],[1,9.873,0.5,2.466],[3,0,0.7071067811865475,0,0.7071067811865477],[1,5,2,0.25],[1,0,89.99999999999999,0]],[106,"Cube4",8388608,6,[[38,"Cube<ModelComponent>",1,-424,[8],[1],9],[8,-425,[1,1,1,2]],[39,2,2,-426]],[1,-9.876,0.5,-0.032],[3,0,0.7071067811865475,0,0.7071067811865476],[1,10,2,0.25],[1,0,89.99999999999999,0]],[139,"Cube5",false,6,[[38,"Cube<ModelComponent>",1,-427,[10],[1],11],[8,-428,[1,1,1,1.5]],[39,2,2,-429]],[1,-7.329,0.5,-0.801],[1,5,2,0.35]],[44,"Cube8",6,[[38,"Cube<ModelComponent>",1,-430,[12],[1],13],[8,-431,[1,1,1,1.5]],[39,2,2,-432]],[1,-5,0.5,-1.988],[3,0,0.7071067811865475,0,0.7071067811865477],[1,6,2,0.35],[1,0,89.99999999999999,0]],[44,"Cube9",6,[[38,"Cube<ModelComponent>",1,-433,[14],[1],15],[46,-434],[39,2,2,-435]],[1,-5,0.5,4.06],[3,0,0.7071067811865475,0,0.7071067811865477],[1,1.8,2,0.35],[1,0,89.99999999999999,0]],[107,"Cube10",6,[[38,"Cube<ModelComponent>",1,-436,[16],[1],17],[46,-437],[39,2,2,-438]],[1,2.428,0.5,-0.846],[1,4.8,2,0.35]],[44,"Cube11",6,[[38,"Cube<ModelComponent>",1,-439,[18],[1],19],[46,-440],[39,2,2,-441]],[1,8.367,0.5,-0.846],[3,0,1,0,6.123233995736766e-17],[1,2.8,2,0.35],[1,0,180,0]],[44,"Cube19",6,[[38,"Cube<ModelComponent>",1,-442,[20],[1],21],[46,-443],[39,2,2,-444]],[1,9.873,0.5,-2.469],[3,0,0.7071067811865475,0,0.7071067811865477],[1,5,2,0.25],[1,0,89.99999999999999,0]],[44,"Cube20",6,[[38,"Cube<ModelComponent>",1,-445,[22],[1],23],[46,-446],[39,2,2,-447]],[1,1.246,0.5,4.095],[3,-6.5420519111824014e-18,0.7071067811865475,1.4719616800160387e-17,0.7071067811865476],[1,1.8,2,0.35],[1,-1.7228004524594049e-15,89.99999999999999,6.626155586382319e-16]],[44,"Cube21",6,[[38,"Cube<ModelComponent>",1,-448,[24],[1],25],[46,-449],[39,2,2,-450]],[1,1.246,0.5,0.066],[3,-6.5420519111824014e-18,0.7071067811865475,1.4719616800160387e-17,0.7071067811865476],[1,1.8,2,0.35],[1,-1.7228004524594049e-15,89.99999999999999,6.626155586382319e-16]],[44,"Cube12",6,[[38,"Cube<ModelComponent>",1,-451,[26],[1],27],[46,-452],[39,2,2,-453]],[1,9.7,0.5,4.873],[3,-1.5034270125132327e-17,1,-4.440904908137276e-33,6.123233995736767e-17],[1,0.6,2,0.25],[1,4.033991139266958e-31,180,-1.7228004524594049e-15]],[7,"break_wall.003",1,[[3,1,-454,[34],[1],35],[8,-455,[1,0.005,0.005,0.005]],[11,4,-456]],[1,-0.0025000611785799265,0.012452497147023678,-0.000001718401563266525]],[140,"MocQuanAo",4,[-459],[[86,-457,[78],[1],79],[32,-458,[1,0,0.009,0],[1,0.006667,0.020667,0.006667]]],[1,0.337,0,4.045],[3,0,-0.6205731361358193,0,0.7841485718322477],[1,150,150,150],[1,0,-76.716,0]],[104,"Tham",4,[18,-461],[[152,-460,[82],[1]]],[1,-7.62,0,2.195],[1,80.00000000000001,80,80.00000000000001]],[55,"Door1_1",[[3,1,-462,[98],[1],99],[58,8,0.0001,-463,[1,0,0,0],[1,0,1,0]],[32,-464,[1,-0.004,0,0],[1,0.006,0.015,0.002]]],[1,0.007821347564458847,0.00755288265645504,1.175609470882577e-10]],[55,"Door1_2",[[3,1,-465,[100],[1],101],[58,8,0.0001,-466,[1,0,0,0],[1,0,1,0]],[32,-467,[1,0.004,0,0],[1,0.006,0.015,0.002]]],[1,-0.007821347564458847,0.00755288265645504,1.175609470882577e-10]],[55,"Door1",[[3,1,-468,[102],[1],103],[58,8,0.0001,-469,[1,0,0,0],[1,0,1,0]],[32,-470,[1,-0.004,0,0],[1,0.006,0.015,0.003]]],[1,0.007821347564458847,0.00755288265645504,1.175609470882577e-10]],[55,"Door2",[[3,1,-471,[104],[1],105],[58,8,0.0001,-472,[1,0,0,0],[1,0,1,0]],[32,-473,[1,0.004,0,0],[1,0.006,0.015,0.003]]],[1,-0.007821347564458847,0.00755288265645504,1.175609470882577e-10]],[55,"Door1",[[3,1,-474,[106],[1],107],[58,8,0.1,-475,[1,0,0,0],[1,0,1,0]],[32,-476,[1,-0.004,0,0],[1,0.007,0.014,0.002]]],[1,0.007821347564458847,0.00755288265645504,1.175609470882577e-10]],[55,"Door2",[[3,1,-477,[108],[1],109],[32,-478,[1,0.004,0,0],[1,0.007,0.014,0.002]],[58,8,0.1,-479,[1,0,0,0],[1,0,1,0]]],[1,-0.007821347564458847,0.00755288265645504,1.175609470882577e-10]],[22,"WallLaserBtn",58,[[3,1,-480,[124],[1],125],[32,-481,[1,-1.1874362826347351e-8,0.0005,4.889443516731262e-9],[1,0.002,0.1,0.002]],[39,2,2,-482]]],[43,"Electro",[-483,-484,-485]],[107,"Electro_vfx_mesh",118,[[3,1,-486,[138],[1],139],[8,-487,[1,0.0019843416521325707,0.010201558005064726,0.03618932329118252]]],[1,2.410281751963339e-7,0.007962931878864765,1.182999476156965e-9],[1,1.2,1.2,1]],[54,"Characters",13,[7,8,12]],[4,"Root_M",7,[-488,-489,-490],[1,7.4337413670797e-19,0.03706977143883705,-0.0006682323873974383],[3,0.4760606469852976,0.5228443940523222,0.4760606469852976,0.5228443940523222],[1,0,90.00000000000011,84.63701992921632]],[66,"Chest_M",[-491,-492,-493],[1,0.007899854332208633,2.0122792983075452e-17,-7.522235733950037e-18],[3,2.1903536033038732e-17,3.722731014321986e-17,0.11372903097276456,0.9935118054225605],[1,2.061851705699605e-15,4.057770717126712e-15,13.060645873186564]],[40,"Gradient",33554432,5,[[30,-494,[5,16,478]],[71,-495,194]],[1,0,240,0],[1,50,0.2,1]],[40,"text",33554432,5,[[30,-496,[5,438,56]],[71,-497,195]],[1,0,-224.365,0],[1,0.3,0.3,0.3]],[40,"title",33554432,5,[[30,-498,[5,557,220]],[127,0,-499,196]],[1,-40,206.99999999999997,0],[1,0.2,0.2,0.4]],[40,"icon",33554432,5,[[30,-500,[5,192,192]],[71,-501,197]],[1,56,206.99999999999997,0],[1,0.25,0.25,0.6]],[40,"hand",33554432,65,[[30,-502,[5,108,134]],[71,-503,199],[97,true,-504,[200],201]],[1,-53.722999999999985,-197.265,0],[1,0.24999999999999997,0.24999999999999997,0.24999999999999997]],[105,"LoadMap",33554432,9,[[30,-505,[5,2000,2000]],[88,0,-506,[4,0],206]]],[91,"Update",33554432,30,[[30,-507,[5,84,35]],[71,-508,212]],[1,85,-125,0]],[40,"hand",33554432,30,[[166,-509,[5,205,168],[0,0.5,0]],[70,-510,[4,16777215],213],[97,true,-511,[214],215]],[1,103.335,-207.956,0],[1,0.4375,0.4375,1]],[91,"btn_2",33554432,30,[[30,-512,[5,84,35]],[70,-513,[4,16777215],216]],[1,-28.527,-125,0]],[5,["e7E27pwmdbf4OoEqZsfVAY"]],[4,"Root_M",8,[-514,-515,-516],[1,7.4337413670797e-19,0.03706977143883705,-0.0006682323873974383],[3,0.4760606469852976,0.5228443940523222,0.4760606469852976,0.5228443940523222],[1,0,90.00000000000011,84.63701992921632]],[66,"Chest_M",[-517,-518,-519],[1,0.007899854332208633,2.0122792983075452e-17,-7.522235733950037e-18],[3,2.1903536033038732e-17,3.722731014321986e-17,0.11372903097276456,0.9935118054225605],[1,2.061851705699605e-15,4.057770717126712e-15,13.060645873186564]],[55,"laser_vfx_mesh",[[3,1,-520,[255],[1],256],[8,-521,[1,0.0016475273296236992,0.012324807699769735,0.02926943451166153]]],[1,-2.109229413349567e-8,0.007881137542426586,2.020315292838859e-7]],[55,"laser_vfx_mesh",[[3,1,-522,[261],[1],262],[8,-523,[1,0.0016475273296236992,0.012324807699769735,0.02926943451166153]]],[1,-2.109229413349567e-8,0.007881137542426586,2.020315292838859e-7]],[108,"Camera",13,[[183,"Camera<CameraComponent>",2,1822425087,-524,[4,4278239999]]],[1,-13,24,0],[3,-0.3588838181618332,-0.6092638222162746,-0.358883818161833,0.6092638222162747],[1,-61,-90,6.3611093629270335e-15]],[141,"Ground",16,[[85,"Plane<ModelComponent>",-525,[0],[153,true],1],[185,-526]],[1,2,1,1]],[83,"Doors_1",4,[-527],[1,-4.943,0,2.084],[3,0,0.7071067811865475,0,0.7071067811865476],[1,140,140,140],[1,0,89.99999999999999,0]],[54,"Doors",139,[111,112]],[43,"Doors",[113,114]],[43,"Doors",[115,116]],[43,"exit_door",[-528,-529]],[7,"ExitDoor",143,[[3,1,-530,[110],[1],111],[32,-531,[1,0.008676467288751155,-0.00008720159530639648,-0.0007142104441300035],[1,0.02070255985017866,0.014756504446268082,0.004769404651597142]]],[1,-0.019050396978855133,0.0074655115604400635,-0.00011989556514890864]],[7,"ExitDoor",143,[[3,1,-532,[112],[1],113],[32,-533,[1,-0.008676467288751155,-0.00008720159530639648,-0.0007142079994082451],[1,0.02070255985017866,0.014756504446268082,0.0047693997621536255]]],[1,0.019050396978855133,0.0074655115604400635,-0.00011989721679128706]],[22,"LaserButtonGreen",57,[[3,1,-534,[114],[1],115]]],[22,"LaserBtn",57,[[3,1,-535,[116],[1],117],[32,-536,[1,-1.1874362826347351e-8,0.005,4.889443516731262e-9],[1,0.002,0.05,0.002]]]],[109,"LaserButtonRed",false,57,[[3,1,-537,[118],[1],119]]],[109,"WallLaserButtonGreen",false,58,[[3,1,-538,[122],[1],123]]],[22,"WallLaserButtonRed",58,[[3,1,-539,[126],[1],127]]],[73,0,null,4,[64,"88VDQVisBbw5m9OxjU+gSN",-540,[87,"8br6E2KoZHKbXD39EgH1fb",[[16,"lamp",["_name"],59],[18,["_lpos"],59,[1,9.397,0,-1.739]],[18,["_lrot"],59,[3,0,0,0,1]],[18,["_euler"],59,[1,0,0,0]],[18,["_lscale"],59,[1,100,100,100]],[12,1,["_shadowCastingMode"],[5,["6aTg9z5L9YKLFfuC6s5ZQe"]]]]],130]],[73,0,null,4,[64,"979k7HCjtdTLyKwDgx/GX2",-541,[87,"5b+hx1kTBK4qts6tX9urFj",[[16,"Plant_03",["_name"],60],[18,["_lpos"],60,[1,-4.2,0,-4.162]],[18,["_lrot"],60,[3,0,0,0,1]],[18,["_euler"],60,[1,0,0,0]],[18,["_lscale"],60,[1,100,100,100]],[12,1,["_shadowCastingMode"],[5,["9628QWGXldzot0isW7KTrl"]]]]],131]],[73,0,null,4,[64,"979k7HCjtdTLyKwDgx/GX2",-542,[87,"ecxDV2jkRKoqJYFLpRwnZv",[[16,"Plant_04",["_name"],61],[18,["_lpos"],61,[1,0.24,0,0.054]],[18,["_lrot"],61,[3,0,0,0,1]],[18,["_euler"],61,[1,0,0,0]],[18,["_lscale"],61,[1,100,100,100]],[12,1,["_shadowCastingMode"],[5,["9628QWGXldzot0isW7KTrl"]]]]],132]],[73,0,null,4,[64,"979k7HCjtdTLyKwDgx/GX2",-543,[126,"da4UIwm9RDG5DYBhH3tOO+",null,[[12,"Plant_05",["_name"],[5,["979k7HCjtdTLyKwDgx/GX2"]]],[52,["_lpos"],[5,["979k7HCjtdTLyKwDgx/GX2"]],[1,9.306,0,0.025]],[52,["_lrot"],[5,["979k7HCjtdTLyKwDgx/GX2"]],[3,0,0,0,1]],[52,["_euler"],[5,["979k7HCjtdTLyKwDgx/GX2"]],[1,0,0,0]],[52,["_lscale"],[5,["979k7HCjtdTLyKwDgx/GX2"]],[1,100,100,100]],[12,1,["_shadowCastingMode"],[5,["9628QWGXldzot0isW7KTrl"]]]]],133]],[73,0,null,4,[64,"d73kkFTbpYrKPfopvD8lvZ",-546,[87,"07KdGk/1RCer/0vdKv38aj",[[16,"livingroom_tv",["_name"],62],[18,["_lpos"],62,[1,9.22,0,-3.688]],[18,["_lrot"],62,[3,0,-0.7071067811865475,0,0.7071067811865476]],[18,["_euler"],62,[1,0,-90,0]],[18,["_lscale"],62,[1,150,150,150]],[59,["_materials","0"],-544,135],[16,1,["_shadowCastingMode"],-545]]],134]],[76,0.3,false,21,[146],[9],[17,3,0.6,0.9],[0],[0],[17,3,2,4],[0],[0],[17,3,6.283185307179586,6.283185307179586],[0],[17,3,0.15,0.3],[0],[2,20],[0],[[24,[2,9]]],[25,true,[23,1,[34,[[68,[4,33554431]],[20,0.3727678571428572,[4,33539082]]]]]],[78,true,3,0.01,0.5,[2,1]],[35,[0],[0],[0],[0]],[26,[0],[0],[0],[2,1]],[27,[0],[0],[0]],[69,true,0.5,[0],[0],[0],[2,0.2]],[28,[0],[0],[0]],[51,true,3,3,1,[19,1,[21,[0,1],[[36,1,1,1,1],[37,1,1,1,1,1]]]],[0]],[29,[2,1],[0],[9],[9],-547],[80,1,147]],[76,0.3,false,22,[152],[9],[17,3,0.6,0.9],[0],[0],[17,3,2,4],[0],[0],[77,3,6.283185307179586],[0],[17,3,0.15,0.3],[0],[2,20],[0],[[24,[2,9]]],[25,true,[23,1,[34,[[68,[4,33554431]],[20,0.3727678571428572,[4,33539082]]]]]],[78,true,3,0.01,0.5,[2,1]],[35,[0],[0],[0],[0]],[26,[0],[0],[0],[2,1]],[27,[0],[0],[0]],[69,true,0.5,[0],[0],[0],[2,0.2]],[28,[0],[0],[0]],[51,true,3,3,1,[19,1,[21,[0,1],[[36,1,1,1,1],[37,1,1,1,1,1]]]],[0]],[29,[2,1],[0],[9],[9],-548],[80,1,153]],[76,0.6,false,23,[158],[9],[17,3,0.6,0.9],[0],[0],[17,3,2,4],[0],[0],[77,3,6.283185307179586],[0],[17,3,0.15,0.3],[0],[2,20],[0],[[24,[2,9]]],[25,true,[23,1,[34,[[68,[4,33554431]],[20,0.3727678571428572,[4,33539082]]]]]],[78,true,3,0.01,0.5,[2,1]],[35,[0],[0],[0],[0]],[26,[0],[0],[0],[2,1]],[27,[0],[0],[0]],[69,true,0.5,[0],[0],[0],[2,0.2]],[28,[0],[0],[0]],[51,true,3,3,1,[19,1,[21,[0,1],[[36,1,1,1,1],[37,1,1,1,1,1]]]],[0]],[29,[2,1],[0],[9],[9],-549],[80,1,159]],[76,0.8,false,24,[164],[9],[17,3,0.6,0.9],[0],[0],[17,3,2,4],[0],[0],[77,3,6.283185307179586],[0],[17,3,0.15,0.3],[0],[2,20],[0],[[24,[2,9]]],[25,true,[23,1,[34,[[68,[4,33554431]],[20,0.3727678571428572,[4,33539082]]]]]],[78,true,3,0.01,0.5,[2,1]],[35,[0],[0],[0],[0]],[26,[0],[0],[0],[2,1]],[27,[0],[0],[0]],[69,true,0.5,[0],[0],[0],[2,0.2]],[28,[0],[0],[0]],[51,true,3,3,1,[19,1,[21,[0,1],[[36,1,1,1,1],[37,1,1,1,1,1]]]],[0]],[29,[2,1],[0],[9],[9],-550],[80,1,165]],[76,0.8,false,25,[170],[9],[17,3,0.6,0.9],[0],[0],[17,3,2,4],[0],[0],[77,3,6.283185307179586],[0],[17,3,0.15,0.3],[0],[2,20],[0],[[24,[2,9]]],[25,true,[23,1,[34,[[68,[4,33554431]],[20,0.3727678571428572,[4,33539082]]]]]],[78,true,3,0.01,0.5,[2,1]],[35,[0],[0],[0],[0]],[26,[0],[0],[0],[2,1]],[27,[0],[0],[0]],[69,true,0.5,[0],[0],[0],[2,0.2]],[28,[0],[0],[0]],[51,true,3,3,1,[19,1,[21,[0,1],[[36,1,1,1,1],[37,1,1,1,1,1]]]],[0]],[29,[2,1],[0],[9],[9],-551],[80,1,171]],[111,"Head_M",[[[14,"HeadEnd_M",-552,[1,0.023971429094672203,1.776356799695581e-17,1.5605730057129554e-17]],-553],4,1],[1,0.00431668059900403,-8.881783998477905e-18,2.0696300876405924e-18],[3,-4.3624929617727275e-17,-2.558158108403107e-17,-0.18855312392880014,0.9820629915930498],[1,-5.8802222386966104e-15,-4.113959660287645e-15,-21.73671639678434]],[186,29,14,13,12,66,67],[40,"8",33554432,65,[[30,-554,[5,416,201]],[71,-555,198]],[1,0,-180.053,0],[1,0.3,0.3,1]],[40,"Download",33554432,9,[[30,-556,[5,373,167]],[70,-557,[4,16777215],207]],[1,0,-163,0],[1,0.4,0.4,1]],[142,"icon",33554432,9,[[30,-558,[5,192,192]],[70,-559,[4,16777215],210]],[1,0.6,0.6,1]],[40,"title_game",33554432,9,[[30,-560,[5,557,220]],[88,0,-561,[4,16777215],211]],[1,0,157.99999999999997,0],[1,0.5,0.5,1]],[111,"Head_M",[[[14,"HeadEnd_M",-562,[1,0.023971429094672203,1.776356799695581e-17,1.5605730057129554e-17]],-563],4,1],[1,0.00431668059900403,-8.881783998477905e-18,2.0696300876405924e-18],[3,-4.3624929617727275e-17,-2.558158108403107e-17,-0.18855312392880014,0.9820629915930498],[1,-5.8802222386966104e-15,-4.113959660287645e-15,-21.73671639678434]],[43,"laser",[135,-564,-565]],[43,"laser",[136,-566,-567]],[7,"laser_base2",169,[[3,1,-568,[257],[1],258],[32,-569,[1,-0.0022566841216757894,0.007889981320338947,-0.0005208068469073623],[1,0.009780378779396415,0.015779962885702645,0.002453161228913814]]],[1,-2.078171768005177e-8,0.0000016899934962566476,0.014305144548416138]],[7,"laser_base1",169,[[3,1,-570,[259],[1],260],[32,-571,[1,-0.0022566841216757894,0.007889981320338947,0.0005208076327107847],[1,0.009780378779396415,0.015779962885702645,0.0024531626841053367]]],[1,-2.2032313751196853e-8,0.0000016899934962566476,-0.014305144548416138]],[108,"Directional Light",13,[[187,true,90000,2.34375,-572,[188]]],[1,-12.927,23.868,0.609],[3,-0.45745279915368997,-0.4579816238651266,-0.3897797836131668,0.6550278536327965],[1,-73.812,-73.87,-5.257]],[54,"BreakWalls",16,[-573]],[74,"breakwall_1",173,[1],[1,-2.437,0.04,-0.891],[1,120,120,120]],[22,"coat",109,[[3,1,-574,[76],[1],77]]],[84,"polySurface5",18,[[72,"transform2",-575]]],[84,"polySurface6",18,[[72,"transform5",-576]]],[84,"polySurface7",18,[[72,"transform3",-577]]],[84,"polySurface9",18,[[72,"transform4",-578]]],[22,"polySurface6",110,[[86,-579,[80],[1],81]]],[22,"cat_food",19,[[3,1,-580,[83],[112,true],84]]],[5,["f2sDa1qWtF56f7v5izDlLP"]],[83,"tree_A_1",4,[-581],[1,4.066,0,7.047],[3,0,0.7336231290607853,0,0.6795565498963736],[1,75,75,75],[1,0,94.38200000000002,0]],[22,"Tree_A",183,[[86,-582,[94],[1],95]]],[83,"tree_A_2",4,[-583],[1,0.984,0,-6.896],[3,0,0.8902803762621423,0,0.45541283649293224],[1,50.00000000000001,50,50.00000000000001],[1,0,125.81700000000001,0]],[22,"Tree_A",185,[[86,-584,[96],[1],97]]],[83,"Doors_2",4,[141],[1,1.192,0.142,2.084],[3,-3.407318703740833e-18,0.7071067811865475,3.40731870374083e-18,0.7071067811865476],[1,140.00000000000003,140,140.00000000000003],[1,-5.521796321985272e-16,89.99999999999999,-2.2069531490250793e-31]],[74,"Doors_3",4,[142],[1,5.898,0.003,-0.858],[1,140,140,140]],[74,"Doors_4",4,[143],[1,7.74,0.542,4.881],[1,80,90,90]],[74,"laser_button_1",4,[57],[1,-7.568,0,-3],[1,100,100,100]],[44,"icon",57,[[38,"Quad<ModelComponent>",1,-585,[120],[1],121]],[1,-0.001,0.005,0],[3,-0.5,-0.5,-0.4999999999999999,0.5000000000000001],[1,0.007,0.007,0.007],[1,-90,-90,0]],[143,"laser_button_2",false,4,[58],[1,-7.7,0,-3],[1,100,100,100]],[44,"icon",58,[[38,"Quad<ModelComponent>",1,-586,[128],[1],129]],[1,0,0.003,0],[3,-0.5,-0.5,-0.4999999999999999,0.5000000000000001],[1,0.006,0.006,0.006],[1,-90,-90,0]],[5,["7bmiDjvI1TFaz/LbY1vImK"]],[54,"Lasers",16,[-587]],[74,"Electro",195,[118],[1,2.61,0,2.007],[1,130,130,130]],[7,"Electro_wall1",118,[[3,1,-588,[136],[1],137]],[1,2.452812566389184e-7,0.00001882825199572835,0.021018020808696747]],[7,"Electro_wall2",118,[[3,1,-589,[140],[1],141]],[1,2.452812566389184e-7,0.00001882825199572835,-0.021018020808696747]],[47,"Nova",21,[-590],[3,0.7071067811865475,0,0,0.7071067811865476],[1,90,0,0]],[49,1,false,199,[142],[9],[17,3,1,2.5],[0],[0],[0],[0],[0],[0],[0],[2,0.25],[0],[0],[0],[[24,[2,1]]],[25,true,[23,1,[34,[[45],[20,0.5,[4,4294943551]]]]]],[50,3,[2,1]],[35,[0],[0],[0],[0]],[26,[0],[0],[0],[2,1]],[27,[0],[0],[0]],[41,[0],[0],[0],[0]],[28,[0],[0],[0]],[51,true,3,3,1,[19,1,[21,[0,1],[[36,1,1,1,1],[37,1,1,1,1,1]]]],[0]],[29,[2,1],[0],[9],[9],-591],[42,143]],[47,"Glow",21,[-592],[3,0.7071067811865475,0,0,0.7071067811865476],[1,90,0,0]],[49,1,false,201,[144],[9],[2,5],[0],[0],[0],[0],[0],[0],[0],[2,0.5],[0],[0],[0],[[24,[2,1]]],[25,true,[23,1,[34,[[45],[20,0.5,[4,4294943551]]]]]],[50,3,[2,1]],[35,[0],[0],[0],[0]],[26,[0],[0],[0],[2,1]],[27,[0],[0],[0]],[41,[0],[0],[0],[0]],[28,[0],[0],[0]],[79,3,3,1,[19,1,[21,[0,1],[[36,1,1,1,1],[37,1,1,1,1,1]]]],[0]],[29,[2,1],[0],[9],[9],-593],[42,145]],[47,"Nova",22,[-594],[3,0.7071067811865475,0,0,0.7071067811865476],[1,90,0,0]],[49,1,false,203,[148],[9],[17,3,1,2.5],[0],[0],[0],[0],[0],[0],[0],[2,0.25],[0],[0],[0],[[24,[2,1]]],[25,true,[23,1,[34,[[45],[20,0.5,[4,4294943551]]]]]],[50,3,[2,1]],[35,[0],[0],[0],[0]],[26,[0],[0],[0],[2,1]],[27,[0],[0],[0]],[41,[0],[0],[0],[0]],[28,[0],[0],[0]],[51,true,3,3,1,[19,1,[21,[0,1],[[36,1,1,1,1],[37,1,1,1,1,1]]]],[0]],[29,[2,1],[0],[9],[9],-595],[42,149]],[47,"Glow",22,[-596],[3,0.7071067811865475,0,0,0.7071067811865476],[1,90,0,0]],[49,1,false,205,[150],[9],[2,5],[0],[0],[0],[0],[0],[0],[0],[2,0.5],[0],[0],[0],[[24,[2,1]]],[25,true,[23,1,[34,[[45],[20,0.5,[4,4294943551]]]]]],[50,3,[2,1]],[35,[0],[0],[0],[0]],[26,[0],[0],[0],[2,1]],[27,[0],[0],[0]],[41,[0],[0],[0],[0]],[28,[0],[0],[0]],[79,3,3,1,[19,1,[21,[0,1],[[36,1,1,1,1],[37,1,1,1,1,1]]]],[0]],[29,[2,1],[0],[9],[9],-597],[42,151]],[47,"Nova",23,[-598],[3,0.7071067811865475,0,0,0.7071067811865476],[1,90,0,0]],[49,1,false,207,[154],[9],[17,3,1,2.5],[0],[0],[0],[0],[0],[0],[0],[2,0.25],[0],[0],[0],[[24,[2,1]]],[25,true,[23,1,[34,[[45],[20,0.5,[4,4294943551]]]]]],[50,3,[2,1]],[35,[0],[0],[0],[0]],[26,[0],[0],[0],[2,1]],[27,[0],[0],[0]],[41,[0],[0],[0],[0]],[28,[0],[0],[0]],[51,true,3,3,1,[19,1,[21,[0,1],[[36,1,1,1,1],[37,1,1,1,1,1]]]],[0]],[29,[2,1],[0],[9],[9],-599],[42,155]],[47,"Glow",23,[-600],[3,0.7071067811865475,0,0,0.7071067811865476],[1,90,0,0]],[49,1,false,209,[156],[9],[2,5],[0],[0],[0],[0],[0],[0],[0],[2,0.5],[0],[0],[0],[[24,[2,1]]],[25,true,[23,1,[34,[[45],[20,0.5,[4,4294943551]]]]]],[50,3,[2,1]],[35,[0],[0],[0],[0]],[26,[0],[0],[0],[2,1]],[27,[0],[0],[0]],[41,[0],[0],[0],[0]],[28,[0],[0],[0]],[79,3,3,1,[19,1,[21,[0,1],[[36,1,1,1,1],[37,1,1,1,1,1]]]],[0]],[29,[2,1],[0],[9],[9],-601],[42,157]],[47,"Nova",24,[-602],[3,0.7071067811865475,0,0,0.7071067811865476],[1,90,0,0]],[49,1,false,211,[160],[9],[17,3,1,2.5],[0],[0],[0],[0],[0],[0],[0],[2,0.25],[0],[0],[0],[[24,[2,1]]],[25,true,[23,1,[34,[[45],[20,0.5,[4,4294943551]]]]]],[50,3,[2,1]],[35,[0],[0],[0],[0]],[26,[0],[0],[0],[2,1]],[27,[0],[0],[0]],[41,[0],[0],[0],[0]],[28,[0],[0],[0]],[51,true,3,3,1,[19,1,[21,[0,1],[[36,1,1,1,1],[37,1,1,1,1,1]]]],[0]],[29,[2,1],[0],[9],[9],-603],[42,161]],[47,"Glow",24,[-604],[3,0.7071067811865475,0,0,0.7071067811865476],[1,90,0,0]],[49,1,false,213,[162],[9],[2,5],[0],[0],[0],[0],[0],[0],[0],[2,0.5],[0],[0],[0],[[24,[2,1]]],[25,true,[23,1,[34,[[45],[20,0.5,[4,4294943551]]]]]],[50,3,[2,1]],[35,[0],[0],[0],[0]],[26,[0],[0],[0],[2,1]],[27,[0],[0],[0]],[41,[0],[0],[0],[0]],[28,[0],[0],[0]],[79,3,3,1,[19,1,[21,[0,1],[[36,1,1,1,1],[37,1,1,1,1,1]]]],[0]],[29,[2,1],[0],[9],[9],-605],[42,163]],[47,"Nova",25,[-606],[3,0.7071067811865475,0,0,0.7071067811865476],[1,90,0,0]],[49,1,false,215,[166],[9],[17,3,1,2.5],[0],[0],[0],[0],[0],[0],[0],[2,0.25],[0],[0],[0],[[24,[2,1]]],[25,true,[23,1,[34,[[45],[20,0.5,[4,4294943551]]]]]],[50,3,[2,1]],[35,[0],[0],[0],[0]],[26,[0],[0],[0],[2,1]],[27,[0],[0],[0]],[41,[0],[0],[0],[0]],[28,[0],[0],[0]],[51,true,3,3,1,[19,1,[21,[0,1],[[36,1,1,1,1],[37,1,1,1,1,1]]]],[0]],[29,[2,1],[0],[9],[9],-607],[42,167]],[47,"Glow",25,[-608],[3,0.7071067811865475,0,0,0.7071067811865476],[1,90,0,0]],[49,1,false,217,[168],[9],[2,5],[0],[0],[0],[0],[0],[0],[0],[2,0.5],[0],[0],[0],[[24,[2,1]]],[25,true,[23,1,[34,[[45],[20,0.5,[4,4294943551]]]]]],[50,3,[2,1]],[35,[0],[0],[0],[0]],[26,[0],[0],[0],[2,1]],[27,[0],[0],[0]],[41,[0],[0],[0],[0]],[28,[0],[0],[0]],[79,3,3,1,[19,1,[21,[0,1],[[36,1,1,1,1],[37,1,1,1,1,1]]]],[0]],[29,[2,1],[0],[9],[9],-609],[42,169]],[22,"head",26,[[48,1,-610,[172],[1],7,173,174]]],[22,"body",26,[[48,1,-611,[175,176],[1],7,177,178]]],[22,"hand_L",26,[[48,1,-612,[179],[1],7,180,181]]],[22,"hand_R",26,[[48,1,-613,[182],[1],7,183,184]]],[22,"hat",26,[[48,1,-614,[185],[1],7,186,187]]],[4,"Spine1_M",121,[-615],[1,0.005639315117150545,3.3306689994292145e-18,-8.286366985853048e-18],[3,-3.4512289808441556e-31,-3.7413301934353245e-17,0.02315832235693003,0.9997318100898922],[1,9.939209456289161e-17,-4.290701073875078e-15,2.6539855249331548]],[4,"Spine2_M",224,[122],[1,0.006853824481368065,2.1788127586187636e-17,-5.701829994992843e-18],[3,4.42033827575771e-31,-2.5937030120537297e-17,0.016054667223617876,0.9998711155245654],[1,4.7741726565098456e-17,-2.9733144096216298e-15,1.8398083883928154]],[4,"Neck_M",122,[161],[1,0.003991219215095043,-1.776356799695581e-17,1.3913450872744068e-17],[3,-2.8198400097966973e-31,-8.741033196618276e-17,0.0541057992432571,0.9985352084369625],[1,5.451417289647669e-16,-1.0060718399375467e-14,6.203096931527011]],[15,"Jaw_M",161,[[14,"JawEnd_M",-616,[1,0.00450707646086812,-8.881783998477905e-18,-2.1502018220014732e-18]]],[1,-0.0006536733126267791,0.0015348434681072831,-1.861709348483804e-18],[3,2.616552386279944e-17,3.5698355065238236e-17,0.7923118317174793,0.6101163506418203],[1,-180,180,75.19583269816131]],[4,"Scapula_R",122,[-617],[1,0.004209313541650772,0.0006975476280786097,-0.006151859648525715],[3,-0.19634315558045543,0.7889044955815414,-0.22811866023299496,0.53576201709476],[1,10.349845889553423,114.77568271938692,-33.65746302501819]],[4,"Shoulder_R",228,[-618],[1,0.004243205301463604,-2.2204459996194763e-18,-1.0658140798173486e-16],[3,0.035594735691642745,-0.08842259744098191,0.2947023543807219,0.950823317643868],[1,8.274846572232011,-13.132234112340027,33.6504668890069]],[33,"ShoulderPart1_R",229,[-619],[1,0.005203681066632271,1.4632739803372742e-15,2.6645351995433716e-17]],[4,"Elbow_R",230,[-620],[1,0.005203681066632271,1.4588330924739383e-15,3.552713599391162e-17],[3,-1.1615729733903677e-16,1.264397217381575e-16,0.03988129010999903,0.999204424879695],[1,-1.3922180127231085e-14,1.5056137629933935e-14,4.571271537289243]],[33,"ElbowPart1_R",231,[27],[1,0.008100420236587524,-6.661337998858429e-18,1.1102230246251565e-15]],[4,"MiddleFinger1_R",27,[-621],[1,0.007873017340898514,2.2204460823375376e-17,3.552713599391162e-17],[3,0.007007519653267104,0.003588904129628201,-0.09629395519943204,0.9953218015433537],[1,0.8547202146340173,0.4958547443740788,-11.048312490899411]],[4,"MiddleFinger2_R",233,[-622],[1,0.003926635254174471,-2.7755575615628914e-17,4.440892164675075e-17],[3,0.0003194263847654106,-0.03154812383079018,-0.000022099426149491457,0.9995021827695811],[1,0.03650545537164101,-3.6157476573941154,-0.003685920900163046]],[15,"MiddleFinger3_R",234,[[14,"MiddleFinger4_R",-623,[1,0.002180140232667327,-2.2204459996194763e-18,3.55271373174006e-16]]],[1,0.002935933880507946,6.661337998858429e-18,7.993606094938482e-17],[3,0.000465839516239179,-0.007044460114543734,5.983397348858191e-7,0.9999750789769122],[1,0.053380436830119685,-0.8072422879619406,-0.00030747929827275593]],[4,"ThumbFinger1_R",27,[-624],[1,0.0011246022768318653,0.0034343628212809563,-0.0005099081317894161],[3,-0.3518624222737297,-0.19819537827819309,0.41742174832987994,0.814045767658093],[1,-45.247052065154584,-2.890573744204981,54.992387202091194]],[4,"ThumbFinger2_R",236,[-625],[1,0.003771808696910739,3.552713599391162e-17,-3.108624482185328e-17],[3,0.04764065651510809,0.0387226353927483,-0.04956320438582329,0.9968823471834872],[1,5.697301845202023,4.720752990688679,-5.458676878384224]],[15,"ThumbFinger3_R",237,[[14,"ThumbFinger4_R",-626,[1,0.0034306433517485857,3.552713599391162e-17,1.9984015237346206e-17]]],[1,0.00394374830648303,-1.776356799695581e-17,-3.108624482185328e-17],[3,-0.09644115236882876,0.021083277299757373,-0.019874457817503154,0.9949168837016156],[1,-11.02549648725941,2.186656470616668,-2.499659971211338]],[4,"IndexFinger1_R",27,[-627],[1,0.008165353909134865,0.0022352130617946386,0.00001212059760291595],[3,0.0015845099610326445,-0.027016574369298677,0.010356547254369707,0.9995800798167697],[1,0.21360366403141084,-3.0986204617884208,1.1814528298162572]],[4,"IndexFinger2_R",239,[-628],[1,0.0042216582223773,8.092637481362311e-14,3.842082088676563e-13],[3,-0.000035475516625760186,0.010064678016711877,0.0004418039060847889,0.9999492516159089],[1,-0.004574534680615227,1.153348750094565,0.05058352083842478]],[15,"IndexFinger3_R",240,[[14,"IndexFinger4_R",-629,[1,0.0017226875061169267,-2.4424906409404546e-17,2.309263806517031e-16]]],[1,0.002878997242078185,1.9984015237346206e-17,-6.217248964370656e-17],[3,-0.014281436646220337,-0.011539350138747942,-0.00003294991584650082,0.9998314272316101],[1,-1.636522353703718,-1.3222605525000302,0.015109371247251318]],[4,"RingFinger1_R",27,[-630],[1,0.007693943567574024,-0.0025665543507784605,-0.00018207388347946107],[3,0.01731565995320478,0.019634055292552025,-0.19145293844695727,0.9811526100221003],[1,2.5656104715939723,2.7921727546669364,-22.024878194388794]],[4,"RingFinger2_R",242,[-631],[1,0.003053422085940838,-7.216449395365721e-18,8.881783998477905e-18],[3,-0.0024656520308306198,-0.02246260794426725,-0.0001010273320179814,0.9997446381941157],[1,-0.2827319550765643,-2.57426251216237,-0.005227272574691105]],[15,"RingFinger3_R",243,[[14,"RingFinger4_R",-632,[1,0.002034686505794525,-1.9984015237346206e-17,-8.881783998477905e-18]]],[1,0.0029276127461344004,-2.2204460823375376e-17,8.881783998477905e-18],[3,0.0049392008315100626,-0.008494554103421318,-0.000017196614894960706,0.9999517221096259],[1,0.5659558669075501,-0.9733943012010738,-0.006778330614694919]],[4,"PinkyFinger1_R",27,[-633],[1,0.006163628306239843,-0.00463339127600193,-0.00019213129417039454],[3,0.007501861695600869,0.02063793916380992,-0.2514226486690067,0.9676282598572822],[1,1.632624545388658,2.867376374193812,-29.094904697692797]],[4,"PinkyFinger2_R",245,[-634],[1,0.0034830505028367043,1.1102230411687688e-17,-9.769962563761818e-17],[3,0.0023980153940785947,-0.04314403479785906,-0.0019620512027080646,0.9990640580756617],[1,0.2648380639940538,-4.944954488936332,-0.2364803951056321]],[15,"PinkyFinger3_R",246,[[14,"PinkyFinger4_R",-635,[1,0.0019452801207080483,-5.551115205843844e-18,2.8421708795129297e-16]]],[1,0.003114901715889573,4.440891999238953e-18,0],[3,0.018653831065635486,-0.008644164795798326,-0.0002108693941994716,0.999788611925369],[1,2.137407160219522,-0.9899377076069621,-0.04263626964854662]],[4,"Scapula_L",122,[-636],[1,0.004209313541650772,0.0006975476280786097,0.006151859648525715],[3,0.7889044955815414,0.19634315558045543,-0.53576201709476,-0.22811866023299496],[1,-169.65015411044658,65.22431728061306,33.65746302501819]],[4,"Shoulder_L",248,[-637],[1,-0.004243205301463604,-6.661337998858429e-18,9.769962563761818e-17],[3,0.035594735691642745,-0.08842259744098191,0.2947023543807219,0.950823317643868],[1,8.274846572232011,-13.132234112340027,33.6504668890069]],[33,"ShoulderPart1_L",249,[-638],[1,-0.005203681066632271,-1.4632739803372742e-15,-3.552713599391162e-17]],[4,"Elbow_L",250,[-639],[1,-0.005203681066632271,-1.461053483466047e-15,-1.776356799695581e-17],[3,-2.95030980472847e-17,1.3022386800461728e-16,0.03988129010999903,0.999204424879695],[1,-3.985926473525519e-15,1.5093527982454838e-14,4.571271537289243]],[33,"ElbowPart1_L",251,[28],[1,-0.008100420236587524,8.881783998477905e-18,-1.0658141459917976e-15]],[4,"MiddleFinger1_L",28,[-640],[1,-0.007873017340898514,-3.108624482185328e-17,-5.329070399086743e-17],[3,0.007007519653267104,0.003588904129628201,-0.09629395519943204,0.9953218015433537],[1,0.8547202146340173,0.4958547443740788,-11.048312490899411]],[4,"MiddleFinger2_L",253,[-641],[1,-0.003926635254174471,3.441691402807765e-17,-5.329070399086743e-17],[3,0.0003194263847654106,-0.03154812383079018,-0.000022099426149491457,0.9995021827695811],[1,0.03650545537164101,-3.6157476573941154,-0.003685920900163046]],[15,"MiddleFinger3_L",254,[[14,"MiddleFinger4_L",-642,[1,-0.002180140232667327,1.1102229998097382e-18,-3.197442437975393e-16]]],[1,-0.002935933880507946,-3.3306689994292145e-18,-1.2434497928741312e-16],[3,0.000465839516239179,-0.007044460114543734,5.983397348858191e-7,0.9999750789769122],[1,0.053380436830119685,-0.8072422879619406,-0.00030747929827275593]],[4,"ThumbFinger1_L",28,[-643],[1,-0.0011246022768318653,-0.0034343628212809563,0.0005099081317894161],[3,-0.3518624222737297,-0.19819537827819309,0.41742174832987994,0.814045767658093],[1,-45.247052065154584,-2.890573744204981,54.992387202091194]],[4,"ThumbFinger2_L",256,[-644],[1,-0.003771808696910739,-6.217248964370656e-17,4.884981281880909e-17],[3,0.04764065651510809,0.0387226353927483,-0.04956320438582329,0.9968823471834872],[1,5.697301845202023,4.720752990688679,-5.458676878384224]],[15,"ThumbFinger3_L",257,[[14,"ThumbFinger4_L",-645,[1,-0.0034306433517485857,-1.776356799695581e-17,-8.881783998477905e-18]]],[1,-0.00394374830648303,8.881783998477905e-18,0],[3,-0.09644115236882876,0.021083277299757373,-0.019874457817503154,0.9949168837016156],[1,-11.02549648725941,2.186656470616668,-2.499659971211338]],[4,"IndexFinger1_L",28,[-646],[1,-0.008165353909134865,-0.0022352130617946386,-0.00001212059760291595],[3,0.0015845099610326445,-0.027016574369298677,0.010356547254369707,0.9995800798167697],[1,0.21360366403141084,-3.0986204617884208,1.1814528298162572]],[4,"IndexFinger2_L",259,[-647],[1,-0.0042216582223773,-8.091749790833588e-14,-3.8419045505708183e-13],[3,-0.000035475516625760186,0.010064678016711877,0.0004418039060847889,0.9999492516159089],[1,-0.004574534680615227,1.153348750094565,0.05058352083842478]],[15,"IndexFinger3_L",260,[[14,"IndexFinger4_L",-648,[1,-0.0017226875061169267,2.2204460823375376e-17,-2.1316281596346973e-16]]],[1,-0.002878997242078185,2.2204459996194763e-18,3.552713599391162e-17],[3,-0.014281436646220337,-0.011539350138747942,-0.00003294991584650082,0.9998314272316101],[1,-1.636522353703718,-1.3222605525000302,0.015109371247251318]],[4,"RingFinger1_L",28,[-649],[1,-0.007693943567574024,0.0025665543507784605,0.00018207388347946107],[3,0.01731565995320478,0.019634055292552025,-0.19145293844695727,0.9811526100221003],[1,2.5656104715939723,2.7921727546669364,-22.024878194388794]],[4,"RingFinger2_L",262,[-650],[1,-0.003053422085940838,1.554312241092664e-17,-4.440892164675075e-17],[3,-0.0024656520308306198,-0.02246260794426725,-0.0001010273320179814,0.9997446381941157],[1,-0.2827319550765643,-2.57426251216237,-0.005227272574691105]],[15,"RingFinger3_L",263,[[14,"RingFinger4_L",-651,[1,-0.002034686505794525,1.8873791617151008e-17,8.881783998477905e-18]]],[1,-0.0029276127461344004,1.8318680634234022e-17,-1.776356799695581e-17],[3,0.0049392008315100626,-0.008494554103421318,-0.000017196614894960706,0.9999517221096259],[1,0.5659558669075501,-0.9733943012010738,-0.006778330614694919]],[4,"PinkyFinger1_L",28,[-652],[1,-0.006163628306239843,0.00463339127600193,0.00019213129417039454],[3,0.007501861695600869,0.02063793916380992,-0.2514226486690067,0.9676282598572822],[1,1.632624545388658,2.867376374193812,-29.094904697692797]],[4,"PinkyFinger2_L",265,[-653],[1,-0.0034830505028367043,3.3306689994292145e-18,9.769962563761818e-17],[3,0.0023980153940785947,-0.04314403479785906,-0.0019620512027080646,0.9990640580756617],[1,0.2648380639940538,-4.944954488936332,-0.2364803951056321]],[15,"PinkyFinger3_L",266,[[14,"PinkyFinger4_L",-654,[1,-0.0019452801207080483,4.440891999238953e-18,-2.664535364979494e-16]]],[1,-0.003114901715889573,-1.1102229998097382e-18,-4.440892164675075e-17],[3,0.018653831065635486,-0.008644164795798326,-0.0002108693941994716,0.999788611925369],[1,2.137407160219522,-0.9899377076069621,-0.04263626964854662]],[4,"Hip_R",121,[-655],[1,-0.0007667930331081152,-0.0002747571561485529,-0.008132658898830414],[3,0.042081602622941076,0.9984291363184753,-0.0033133766237828936,0.036843181273845796],[1,0.5587270937234328,175.7499092949188,4.806267382178571]],[33,"HipPart1_R",268,[-656],[1,0.006154242902994156,5.335587440619127e-12,-1.8804958133201988e-14]],[4,"Knee_R",269,[-657],[1,0.006154242902994156,5.335587440619127e-12,-1.8804958133201988e-14],[3,5.39477320542198e-17,1.1734511229826501e-17,-0.1258671695825145,0.9920471035295081],[1,6.508255482859497e-15,2.181198478464081e-15,-14.461672953406007]],[33,"KneePart1_R",270,[-658],[1,0.009172307327389717,3.095249834217384e-9,-2.712718897711526e-14]],[4,"Ankle_R",271,[-659],[1,0.009172307327389717,3.095249834217384e-9,-2.7122748830405753e-14],[3,0.0072357795758463146,0.03634582162168158,0.03663649112848902,0.9986412730617371],[1,0.6773021005287134,4.143758388342532,4.226496871584907]],[15,"Toes_R",272,[[14,"ToesEnd_R",-660,[1,0.006472224369645119,-5.551114999048691e-19,3.552713599391162e-17]]],[1,0.0056914170272648335,0.008550174534320831,-4.199306874452802e-11],[3,-0.025581247861379726,-0.0029549016336325672,0.7417634059007207,0.6701670821375464],[1,-163.61990767217517,161.3042435800494,83.91299232106721]],[4,"Hip_L",121,[-661],[1,-0.0007667930331081152,-0.0002747571561485529,0.008132658898830414],[3,0.9984291361627256,-0.04208160634166693,-0.036843181268098456,-0.003313376390435377],[1,-179.44127291705027,4.250090706715679,-4.80626780938224]],[33,"HipPart1_L",274,[-662],[1,-0.006154242902994156,-5.335584404853044e-12,1.8804958133201988e-14]],[4,"Knee_L",275,[-663],[1,-0.006154242902994156,-5.335584404853044e-12,1.8791634304941678e-14],[3,2.823520062096199e-17,-3.932000285668994e-17,-0.1258671695825145,0.9920471035295081],[1,2.7291319303772525e-15,-4.1955994851041816e-15,-14.461672953406007]],[33,"KneePart1_L",276,[-664],[1,-0.009172307327389717,-3.095249834217384e-9,1.7417400258613186e-13]],[4,"Ankle_L",277,[-665],[1,-0.009172307327389717,-3.095249834217384e-9,1.7418067042949265e-13],[3,0.007235768866197234,0.03634582162449826,0.036636491131328226,0.9986412731391284],[1,0.6773008715350484,4.143758433954681,4.226496827512324]],[15,"Toes_L",278,[[14,"ToesEnd_L",-666,[1,-0.006472224369645119,-3.9779559854458135e-12,-1.3423721856309356e-10]]],[1,-0.0056914170272648335,-0.008550174534320831,-1.555068435132867e-10],[3,-0.025581247861379726,-0.0029549016336325672,0.7417634059007207,0.6701670821375464],[1,-163.61990767217517,161.3042435800494,83.91299232106721]],[63,"BgSound",11,[-667]],[129,true,false,280],[63,"catAngrySoound",11,[-668]],[81,false,282],[63,"electricSound",11,[-669]],[129,true,false,284],[63,"electric2Sund",11,[-670]],[81,false,286],[63,"winSound",11,[-671]],[81,false,288],[63,"loseSoound",11,[-672]],[81,false,290],[63,"eatSound",11,[-673]],[81,false,292],[146,"Camera",5,[-674],[1,0,0,1000]],[184,0,3,240,2000,6,41943040,294,[4,4278190080]],[189,12,14,64,139,162],[190,14],[147,"GameController","9fgkvo20FBAKynqRhhqW/W",15,[297]],[22,"head",31,[[48,1,-675,[229],[1],8,230,231]]],[22,"body",31,[[48,1,-676,[232,233],[1],8,234,235]]],[22,"hand_L",31,[[48,1,-677,[236],[1],8,237,238]]],[22,"hand_R",31,[[48,1,-678,[239],[1],8,240,241]]],[22,"hat",31,[[48,1,-679,[242],[1],8,243,244]]],[4,"Spine1_M",133,[-680],[1,0.005639315117150545,3.3306689994292145e-18,-8.286366985853048e-18],[3,-3.4512289808441556e-31,-3.7413301934353245e-17,0.02315832235693003,0.9997318100898922],[1,9.939209456289161e-17,-4.290701073875078e-15,2.6539855249331548]],[4,"Spine2_M",304,[134],[1,0.006853824481368065,2.1788127586187636e-17,-5.701829994992843e-18],[3,4.42033827575771e-31,-2.5937030120537297e-17,0.016054667223617876,0.9998711155245654],[1,4.7741726565098456e-17,-2.9733144096216298e-15,1.8398083883928154]],[4,"Neck_M",134,[167],[1,0.003991219215095043,-1.776356799695581e-17,1.3913450872744068e-17],[3,-2.8198400097966973e-31,-8.741033196618276e-17,0.0541057992432571,0.9985352084369625],[1,5.451417289647669e-16,-1.0060718399375467e-14,6.203096931527011]],[15,"Jaw_M",167,[[14,"JawEnd_M",-681,[1,0.00450707646086812,-8.881783998477905e-18,-2.1502018220014732e-18]]],[1,-0.0006536733126267791,0.0015348434681072831,-1.861709348483804e-18],[3,2.616552386279944e-17,3.5698355065238236e-17,0.7923118317174793,0.6101163506418203],[1,-180,180,75.19583269816131]],[4,"Scapula_R",134,[-682],[1,0.004209313541650772,0.0006975476280786097,-0.006151859648525715],[3,-0.19634315558045543,0.7889044955815414,-0.22811866023299496,0.53576201709476],[1,10.349845889553423,114.77568271938692,-33.65746302501819]],[4,"Shoulder_R",308,[-683],[1,0.004243205301463604,-2.2204459996194763e-18,-1.0658140798173486e-16],[3,0.035594735691642745,-0.08842259744098191,0.2947023543807219,0.950823317643868],[1,8.274846572232011,-13.132234112340027,33.6504668890069]],[33,"ShoulderPart1_R",309,[-684],[1,0.005203681066632271,1.4632739803372742e-15,2.6645351995433716e-17]],[4,"Elbow_R",310,[-685],[1,0.005203681066632271,1.4588330924739383e-15,3.552713599391162e-17],[3,-1.1615729733903677e-16,1.264397217381575e-16,0.03988129010999903,0.999204424879695],[1,-1.3922180127231085e-14,1.5056137629933935e-14,4.571271537289243]],[33,"ElbowPart1_R",311,[32],[1,0.008100420236587524,-6.661337998858429e-18,1.1102230246251565e-15]],[4,"MiddleFinger1_R",32,[-686],[1,0.007873017340898514,2.2204460823375376e-17,3.552713599391162e-17],[3,0.007007519653267104,0.003588904129628201,-0.09629395519943204,0.9953218015433537],[1,0.8547202146340173,0.4958547443740788,-11.048312490899411]],[4,"MiddleFinger2_R",313,[-687],[1,0.003926635254174471,-2.7755575615628914e-17,4.440892164675075e-17],[3,0.0003194263847654106,-0.03154812383079018,-0.000022099426149491457,0.9995021827695811],[1,0.03650545537164101,-3.6157476573941154,-0.003685920900163046]],[15,"MiddleFinger3_R",314,[[14,"MiddleFinger4_R",-688,[1,0.002180140232667327,-2.2204459996194763e-18,3.55271373174006e-16]]],[1,0.002935933880507946,6.661337998858429e-18,7.993606094938482e-17],[3,0.000465839516239179,-0.007044460114543734,5.983397348858191e-7,0.9999750789769122],[1,0.053380436830119685,-0.8072422879619406,-0.00030747929827275593]],[4,"ThumbFinger1_R",32,[-689],[1,0.0011246022768318653,0.0034343628212809563,-0.0005099081317894161],[3,-0.3518624222737297,-0.19819537827819309,0.41742174832987994,0.814045767658093],[1,-45.247052065154584,-2.890573744204981,54.992387202091194]],[4,"ThumbFinger2_R",316,[-690],[1,0.003771808696910739,3.552713599391162e-17,-3.108624482185328e-17],[3,0.04764065651510809,0.0387226353927483,-0.04956320438582329,0.9968823471834872],[1,5.697301845202023,4.720752990688679,-5.458676878384224]],[15,"ThumbFinger3_R",317,[[14,"ThumbFinger4_R",-691,[1,0.0034306433517485857,3.552713599391162e-17,1.9984015237346206e-17]]],[1,0.00394374830648303,-1.776356799695581e-17,-3.108624482185328e-17],[3,-0.09644115236882876,0.021083277299757373,-0.019874457817503154,0.9949168837016156],[1,-11.02549648725941,2.186656470616668,-2.499659971211338]],[4,"IndexFinger1_R",32,[-692],[1,0.008165353909134865,0.0022352130617946386,0.00001212059760291595],[3,0.0015845099610326445,-0.027016574369298677,0.010356547254369707,0.9995800798167697],[1,0.21360366403141084,-3.0986204617884208,1.1814528298162572]],[4,"IndexFinger2_R",319,[-693],[1,0.0042216582223773,8.092637481362311e-14,3.842082088676563e-13],[3,-0.000035475516625760186,0.010064678016711877,0.0004418039060847889,0.9999492516159089],[1,-0.004574534680615227,1.153348750094565,0.05058352083842478]],[15,"IndexFinger3_R",320,[[14,"IndexFinger4_R",-694,[1,0.0017226875061169267,-2.4424906409404546e-17,2.309263806517031e-16]]],[1,0.002878997242078185,1.9984015237346206e-17,-6.217248964370656e-17],[3,-0.014281436646220337,-0.011539350138747942,-0.00003294991584650082,0.9998314272316101],[1,-1.636522353703718,-1.3222605525000302,0.015109371247251318]],[4,"RingFinger1_R",32,[-695],[1,0.007693943567574024,-0.0025665543507784605,-0.00018207388347946107],[3,0.01731565995320478,0.019634055292552025,-0.19145293844695727,0.9811526100221003],[1,2.5656104715939723,2.7921727546669364,-22.024878194388794]],[4,"RingFinger2_R",322,[-696],[1,0.003053422085940838,-7.216449395365721e-18,8.881783998477905e-18],[3,-0.0024656520308306198,-0.02246260794426725,-0.0001010273320179814,0.9997446381941157],[1,-0.2827319550765643,-2.57426251216237,-0.005227272574691105]],[15,"RingFinger3_R",323,[[14,"RingFinger4_R",-697,[1,0.002034686505794525,-1.9984015237346206e-17,-8.881783998477905e-18]]],[1,0.0029276127461344004,-2.2204460823375376e-17,8.881783998477905e-18],[3,0.0049392008315100626,-0.008494554103421318,-0.000017196614894960706,0.9999517221096259],[1,0.5659558669075501,-0.9733943012010738,-0.006778330614694919]],[4,"PinkyFinger1_R",32,[-698],[1,0.006163628306239843,-0.00463339127600193,-0.00019213129417039454],[3,0.007501861695600869,0.02063793916380992,-0.2514226486690067,0.9676282598572822],[1,1.632624545388658,2.867376374193812,-29.094904697692797]],[4,"PinkyFinger2_R",325,[-699],[1,0.0034830505028367043,1.1102230411687688e-17,-9.769962563761818e-17],[3,0.0023980153940785947,-0.04314403479785906,-0.0019620512027080646,0.9990640580756617],[1,0.2648380639940538,-4.944954488936332,-0.2364803951056321]],[15,"PinkyFinger3_R",326,[[14,"PinkyFinger4_R",-700,[1,0.0019452801207080483,-5.551115205843844e-18,2.8421708795129297e-16]]],[1,0.003114901715889573,4.440891999238953e-18,0],[3,0.018653831065635486,-0.008644164795798326,-0.0002108693941994716,0.999788611925369],[1,2.137407160219522,-0.9899377076069621,-0.04263626964854662]],[4,"Scapula_L",134,[-701],[1,0.004209313541650772,0.0006975476280786097,0.006151859648525715],[3,0.7889044955815414,0.19634315558045543,-0.53576201709476,-0.22811866023299496],[1,-169.65015411044658,65.22431728061306,33.65746302501819]],[4,"Shoulder_L",328,[-702],[1,-0.004243205301463604,-6.661337998858429e-18,9.769962563761818e-17],[3,0.035594735691642745,-0.08842259744098191,0.2947023543807219,0.950823317643868],[1,8.274846572232011,-13.132234112340027,33.6504668890069]],[33,"ShoulderPart1_L",329,[-703],[1,-0.005203681066632271,-1.4632739803372742e-15,-3.552713599391162e-17]],[4,"Elbow_L",330,[-704],[1,-0.005203681066632271,-1.461053483466047e-15,-1.776356799695581e-17],[3,-2.95030980472847e-17,1.3022386800461728e-16,0.03988129010999903,0.999204424879695],[1,-3.985926473525519e-15,1.5093527982454838e-14,4.571271537289243]],[33,"ElbowPart1_L",331,[33],[1,-0.008100420236587524,8.881783998477905e-18,-1.0658141459917976e-15]],[4,"MiddleFinger1_L",33,[-705],[1,-0.007873017340898514,-3.108624482185328e-17,-5.329070399086743e-17],[3,0.007007519653267104,0.003588904129628201,-0.09629395519943204,0.9953218015433537],[1,0.8547202146340173,0.4958547443740788,-11.048312490899411]],[4,"MiddleFinger2_L",333,[-706],[1,-0.003926635254174471,3.441691402807765e-17,-5.329070399086743e-17],[3,0.0003194263847654106,-0.03154812383079018,-0.000022099426149491457,0.9995021827695811],[1,0.03650545537164101,-3.6157476573941154,-0.003685920900163046]],[15,"MiddleFinger3_L",334,[[14,"MiddleFinger4_L",-707,[1,-0.002180140232667327,1.1102229998097382e-18,-3.197442437975393e-16]]],[1,-0.002935933880507946,-3.3306689994292145e-18,-1.2434497928741312e-16],[3,0.000465839516239179,-0.007044460114543734,5.983397348858191e-7,0.9999750789769122],[1,0.053380436830119685,-0.8072422879619406,-0.00030747929827275593]],[4,"ThumbFinger1_L",33,[-708],[1,-0.0011246022768318653,-0.0034343628212809563,0.0005099081317894161],[3,-0.3518624222737297,-0.19819537827819309,0.41742174832987994,0.814045767658093],[1,-45.247052065154584,-2.890573744204981,54.992387202091194]],[4,"ThumbFinger2_L",336,[-709],[1,-0.003771808696910739,-6.217248964370656e-17,4.884981281880909e-17],[3,0.04764065651510809,0.0387226353927483,-0.04956320438582329,0.9968823471834872],[1,5.697301845202023,4.720752990688679,-5.458676878384224]],[15,"ThumbFinger3_L",337,[[14,"ThumbFinger4_L",-710,[1,-0.0034306433517485857,-1.776356799695581e-17,-8.881783998477905e-18]]],[1,-0.00394374830648303,8.881783998477905e-18,0],[3,-0.09644115236882876,0.021083277299757373,-0.019874457817503154,0.9949168837016156],[1,-11.02549648725941,2.186656470616668,-2.499659971211338]],[4,"IndexFinger1_L",33,[-711],[1,-0.008165353909134865,-0.0022352130617946386,-0.00001212059760291595],[3,0.0015845099610326445,-0.027016574369298677,0.010356547254369707,0.9995800798167697],[1,0.21360366403141084,-3.0986204617884208,1.1814528298162572]],[4,"IndexFinger2_L",339,[-712],[1,-0.0042216582223773,-8.091749790833588e-14,-3.8419045505708183e-13],[3,-0.000035475516625760186,0.010064678016711877,0.0004418039060847889,0.9999492516159089],[1,-0.004574534680615227,1.153348750094565,0.05058352083842478]],[15,"IndexFinger3_L",340,[[14,"IndexFinger4_L",-713,[1,-0.0017226875061169267,2.2204460823375376e-17,-2.1316281596346973e-16]]],[1,-0.002878997242078185,2.2204459996194763e-18,3.552713599391162e-17],[3,-0.014281436646220337,-0.011539350138747942,-0.00003294991584650082,0.9998314272316101],[1,-1.636522353703718,-1.3222605525000302,0.015109371247251318]],[4,"RingFinger1_L",33,[-714],[1,-0.007693943567574024,0.0025665543507784605,0.00018207388347946107],[3,0.01731565995320478,0.019634055292552025,-0.19145293844695727,0.9811526100221003],[1,2.5656104715939723,2.7921727546669364,-22.024878194388794]],[4,"RingFinger2_L",342,[-715],[1,-0.003053422085940838,1.554312241092664e-17,-4.440892164675075e-17],[3,-0.0024656520308306198,-0.02246260794426725,-0.0001010273320179814,0.9997446381941157],[1,-0.2827319550765643,-2.57426251216237,-0.005227272574691105]],[15,"RingFinger3_L",343,[[14,"RingFinger4_L",-716,[1,-0.002034686505794525,1.8873791617151008e-17,8.881783998477905e-18]]],[1,-0.0029276127461344004,1.8318680634234022e-17,-1.776356799695581e-17],[3,0.0049392008315100626,-0.008494554103421318,-0.000017196614894960706,0.9999517221096259],[1,0.5659558669075501,-0.9733943012010738,-0.006778330614694919]],[4,"PinkyFinger1_L",33,[-717],[1,-0.006163628306239843,0.00463339127600193,0.00019213129417039454],[3,0.007501861695600869,0.02063793916380992,-0.2514226486690067,0.9676282598572822],[1,1.632624545388658,2.867376374193812,-29.094904697692797]],[4,"PinkyFinger2_L",345,[-718],[1,-0.0034830505028367043,3.3306689994292145e-18,9.769962563761818e-17],[3,0.0023980153940785947,-0.04314403479785906,-0.0019620512027080646,0.9990640580756617],[1,0.2648380639940538,-4.944954488936332,-0.2364803951056321]],[15,"PinkyFinger3_L",346,[[14,"PinkyFinger4_L",-719,[1,-0.0019452801207080483,4.440891999238953e-18,-2.664535364979494e-16]]],[1,-0.003114901715889573,-1.1102229998097382e-18,-4.440892164675075e-17],[3,0.018653831065635486,-0.008644164795798326,-0.0002108693941994716,0.999788611925369],[1,2.137407160219522,-0.9899377076069621,-0.04263626964854662]],[4,"Hip_R",133,[-720],[1,-0.0007667930331081152,-0.0002747571561485529,-0.008132658898830414],[3,0.042081602622941076,0.9984291363184753,-0.0033133766237828936,0.036843181273845796],[1,0.5587270937234328,175.7499092949188,4.806267382178571]],[33,"HipPart1_R",348,[-721],[1,0.006154242902994156,5.335587440619127e-12,-1.8804958133201988e-14]],[4,"Knee_R",349,[-722],[1,0.006154242902994156,5.335587440619127e-12,-1.8804958133201988e-14],[3,5.39477320542198e-17,1.1734511229826501e-17,-0.1258671695825145,0.9920471035295081],[1,6.508255482859497e-15,2.181198478464081e-15,-14.461672953406007]],[33,"KneePart1_R",350,[-723],[1,0.009172307327389717,3.095249834217384e-9,-2.712718897711526e-14]],[4,"Ankle_R",351,[-724],[1,0.009172307327389717,3.095249834217384e-9,-2.7122748830405753e-14],[3,0.0072357795758463146,0.03634582162168158,0.03663649112848902,0.9986412730617371],[1,0.6773021005287134,4.143758388342532,4.226496871584907]],[15,"Toes_R",352,[[14,"ToesEnd_R",-725,[1,0.006472224369645119,-5.551114999048691e-19,3.552713599391162e-17]]],[1,0.0056914170272648335,0.008550174534320831,-4.199306874452802e-11],[3,-0.025581247861379726,-0.0029549016336325672,0.7417634059007207,0.6701670821375464],[1,-163.61990767217517,161.3042435800494,83.91299232106721]],[4,"Hip_L",133,[-726],[1,-0.0007667930331081152,-0.0002747571561485529,0.008132658898830414],[3,0.9984291361627256,-0.04208160634166693,-0.036843181268098456,-0.003313376390435377],[1,-179.44127291705027,4.250090706715679,-4.80626780938224]],[33,"HipPart1_L",354,[-727],[1,-0.006154242902994156,-5.335584404853044e-12,1.8804958133201988e-14]],[4,"Knee_L",355,[-728],[1,-0.006154242902994156,-5.335584404853044e-12,1.8791634304941678e-14],[3,2.823520062096199e-17,-3.932000285668994e-17,-0.1258671695825145,0.9920471035295081],[1,2.7291319303772525e-15,-4.1955994851041816e-15,-14.461672953406007]],[33,"KneePart1_L",356,[-729],[1,-0.009172307327389717,-3.095249834217384e-9,1.7417400258613186e-13]],[4,"Ankle_L",357,[-730],[1,-0.009172307327389717,-3.095249834217384e-9,1.7418067042949265e-13],[3,0.007235768866197234,0.03634582162449826,0.036636491131328226,0.9986412731391284],[1,0.6773008715350484,4.143758433954681,4.226496827512324]],[15,"Toes_L",358,[[14,"ToesEnd_L",-731,[1,-0.006472224369645119,-3.9779559854458135e-12,-1.3423721856309356e-10]]],[1,-0.0056914170272648335,-0.008550174534320831,-1.555068435132867e-10],[3,-0.025581247861379726,-0.0029549016336325672,0.7417634059007207,0.6701670821375464],[1,-163.61990767217517,161.3042435800494,83.91299232106721]],[92,"LaserController","252+iqgvVFK61BOQRNHXeq",15,[[191,-732,14,296,135,136,119,148,146,150,149,[156,157,158,159,160]]]],[7,"laser_base2",168,[[3,1,-733,[251],[1],252]],[1,-2.078171768005177e-8,0.0000016899934962566476,0.014305144548416138]],[7,"laser_base1",168,[[3,1,-734,[253],[1],254]],[1,-2.2032313751196853e-8,0.0000016899934962566476,-0.014305144548416138]],[92,"CubeController","b3nb8h/T5GgIPN/YxYu1K3",15,[[192,-735,[35,36,37,38,39,40,41,42,43,44,45,46,17,47,48,49,50,51,52,53,54,55,56,72,73,74,75,76,77,78,79,80,34,34,81,82,83,84,85,86,87,88,89,90,91,92,93,94]]]],[92,"Responsive","93m7EM2HBCV798YB+7/26R",15,[[193,-736,123,64]]]],0,[0,-1,35,0,-2,36,0,-3,37,0,-4,108,0,-5,38,0,-6,39,0,-7,40,0,-8,41,0,-9,42,0,-10,43,0,-11,44,0,-12,45,0,-13,46,0,-14,17,0,-15,47,0,-16,48,0,-17,49,0,-18,50,0,-19,51,0,-20,52,0,-21,53,0,-22,54,0,-23,55,0,-24,56,0,-1,72,0,-2,73,0,-3,74,0,-4,75,0,-5,76,0,-6,77,0,-7,78,0,-8,79,0,-9,80,0,-10,34,0,-11,81,0,-12,82,0,-13,83,0,-14,84,0,-15,85,0,-16,86,0,-17,87,0,-18,88,0,-19,89,0,-20,90,0,-21,91,0,-22,92,0,-23,93,0,-24,94,0,-1,109,0,-2,110,0,-3,19,0,-4,183,0,-5,185,0,-6,139,0,-7,187,0,-8,188,0,-9,189,0,-10,190,0,-11,192,0,-12,151,0,-13,152,0,-14,153,0,-15,154,0,-16,155,0,0,5,0,25,295,0,0,5,0,0,5,0,-1,294,0,-2,123,0,-3,124,0,-4,125,0,-5,126,0,-6,65,0,-7,29,0,-8,66,0,-9,67,0,-10,9,0,-1,95,0,-2,96,0,-3,97,0,-4,98,0,-5,99,0,-6,100,0,-7,101,0,-8,102,0,-9,103,0,-10,104,0,-11,105,0,-12,106,0,-13,107,0,0,7,0,0,7,0,0,7,0,19,63,0,20,17,0,21,64,0,22,14,0,0,7,0,-1,26,0,-2,121,0,-3,63,0,0,8,0,0,8,0,0,8,0,19,71,0,20,17,0,21,64,0,22,14,0,0,8,0,-1,31,0,-2,133,0,-3,71,0,0,9,0,0,9,0,-1,128,0,-2,164,0,-3,68,0,-4,165,0,-5,166,0,-6,30,0,7,182,0,7,182,0,10,10,0,-1,14,0,-1,280,0,-2,282,0,-3,284,0,-4,286,0,-5,288,0,-6,290,0,-7,292,0,7,69,0,7,69,0,7,69,0,7,69,0,7,69,0,7,70,0,7,70,0,7,70,0,7,70,0,7,70,0,7,132,0,11,12,0,7,132,0,7,132,0,7,132,0,0,12,0,0,12,0,-3,296,0,10,12,0,-1,64,0,-1,137,0,-2,172,0,-3,16,0,-4,120,0,-2,151,0,-3,152,0,-4,153,0,-5,154,0,-6,155,0,17,21,0,18,21,0,17,22,0,18,22,0,17,23,0,18,23,0,17,25,0,18,25,0,17,24,0,18,24,0,-2,298,0,-3,360,0,-4,363,0,-6,364,0,-1,138,0,-3,173,0,-5,195,0,-6,20,0,0,17,0,0,17,0,0,17,0,-1,176,0,-2,177,0,-3,178,0,-4,179,0,2,18,0,0,19,0,0,19,0,0,19,0,-1,181,0,-1,21,0,-2,22,0,-3,23,0,-4,24,0,-5,25,0,-1,156,0,-1,199,0,-2,201,0,-1,157,0,-1,203,0,-2,205,0,-1,158,0,-1,207,0,-2,209,0,-1,159,0,-1,211,0,-2,213,0,-1,160,0,-1,215,0,-2,217,0,-1,219,0,-2,220,0,-3,221,0,-4,222,0,-5,223,0,-1,233,0,-2,236,0,-3,239,0,-4,242,0,-5,245,0,-1,253,0,-2,256,0,-3,259,0,-4,262,0,-5,265,0,0,29,0,0,29,0,-3,162,0,0,29,0,0,30,0,0,30,0,-1,129,0,-2,130,0,-3,131,0,-1,299,0,-2,300,0,-3,301,0,-4,302,0,-5,303,0,-1,313,0,-2,316,0,-3,319,0,-4,322,0,-5,325,0,-1,333,0,-2,336,0,-3,339,0,-4,342,0,-5,345,0,0,34,0,0,34,0,0,34,0,0,35,0,0,35,0,0,35,0,0,36,0,0,36,0,0,36,0,0,37,0,0,37,0,0,37,0,0,38,0,0,38,0,0,38,0,0,39,0,0,39,0,0,39,0,0,40,0,0,40,0,0,40,0,0,41,0,0,41,0,0,41,0,0,42,0,0,42,0,0,42,0,0,43,0,0,43,0,0,43,0,0,44,0,0,44,0,0,44,0,0,45,0,0,45,0,0,45,0,0,46,0,0,46,0,0,46,0,0,47,0,0,47,0,0,47,0,0,48,0,0,48,0,0,48,0,0,49,0,0,49,0,0,49,0,0,50,0,0,50,0,0,50,0,0,51,0,0,51,0,0,51,0,0,52,0,0,52,0,0,52,0,0,53,0,0,53,0,0,53,0,0,54,0,0,54,0,0,54,0,0,55,0,0,55,0,0,55,0,0,56,0,0,56,0,0,56,0,-1,146,0,-2,147,0,-3,148,0,-4,191,0,-1,149,0,-2,117,0,-3,150,0,-4,193,0,0,63,0,0,63,0,0,63,0,0,65,0,-1,163,0,-2,127,0,0,66,0,0,66,0,0,66,0,0,67,0,0,67,0,0,67,0,0,68,0,0,68,0,0,68,0,0,71,0,0,71,0,0,71,0,0,72,0,0,72,0,0,72,0,0,73,0,0,73,0,0,73,0,0,74,0,0,74,0,0,74,0,0,75,0,0,75,0,0,75,0,0,76,0,0,76,0,0,76,0,0,77,0,0,77,0,0,77,0,0,78,0,0,78,0,0,78,0,0,79,0,0,79,0,0,79,0,0,80,0,0,80,0,0,80,0,0,81,0,0,81,0,0,81,0,0,82,0,0,82,0,0,82,0,0,83,0,0,83,0,0,83,0,0,84,0,0,84,0,0,84,0,0,85,0,0,85,0,0,85,0,0,86,0,0,86,0,0,86,0,0,87,0,0,87,0,0,87,0,0,88,0,0,88,0,0,88,0,0,89,0,0,89,0,0,89,0,0,90,0,0,90,0,0,90,0,0,91,0,0,91,0,0,91,0,0,92,0,0,92,0,0,92,0,0,93,0,0,93,0,0,93,0,0,94,0,0,94,0,0,94,0,0,95,0,0,95,0,0,95,0,0,96,0,0,96,0,0,96,0,0,97,0,0,97,0,0,97,0,0,98,0,0,98,0,0,98,0,0,99,0,0,99,0,0,99,0,0,100,0,0,100,0,0,100,0,0,101,0,0,101,0,0,101,0,0,102,0,0,102,0,0,102,0,0,103,0,0,103,0,0,103,0,0,104,0,0,104,0,0,104,0,0,105,0,0,105,0,0,105,0,0,106,0,0,106,0,0,106,0,0,107,0,0,107,0,0,107,0,0,108,0,0,108,0,0,108,0,0,109,0,0,109,0,-1,175,0,0,110,0,-2,180,0,0,111,0,0,111,0,0,111,0,0,112,0,0,112,0,0,112,0,0,113,0,0,113,0,0,113,0,0,114,0,0,114,0,0,114,0,0,115,0,0,115,0,0,115,0,0,116,0,0,116,0,0,116,0,0,117,0,0,117,0,0,117,0,-1,197,0,-2,119,0,-3,198,0,0,119,0,0,119,0,-1,224,0,-2,268,0,-3,274,0,-1,226,0,-2,228,0,-3,248,0,0,123,0,0,123,0,0,124,0,0,124,0,0,125,0,0,125,0,0,126,0,0,126,0,0,127,0,0,127,0,0,127,0,0,128,0,0,128,0,0,129,0,0,129,0,0,130,0,0,130,0,0,130,0,0,131,0,0,131,0,-1,304,0,-2,348,0,-3,354,0,-1,306,0,-2,308,0,-3,328,0,0,135,0,0,135,0,0,136,0,0,136,0,0,137,0,0,138,0,0,138,0,-1,140,0,-1,144,0,-2,145,0,0,144,0,0,144,0,0,145,0,0,145,0,0,146,0,0,147,0,0,147,0,0,148,0,0,149,0,0,150,0,10,151,0,10,152,0,10,153,0,10,154,0,7,194,0,7,194,0,10,155,0,5,156,0,5,157,0,5,158,0,5,159,0,5,160,0,2,161,0,-2,227,0,0,163,0,0,163,0,0,164,0,0,164,0,0,165,0,0,165,0,0,166,0,0,166,0,2,167,0,-2,307,0,-2,361,0,-3,362,0,-2,170,0,-3,171,0,0,170,0,0,170,0,0,171,0,0,171,0,0,172,0,-1,174,0,0,175,0,2,176,0,2,177,0,2,178,0,2,179,0,0,180,0,0,181,0,-1,184,0,0,184,0,-1,186,0,0,186,0,0,191,0,0,193,0,-1,196,0,0,197,0,0,198,0,-1,200,0,5,200,0,-1,202,0,5,202,0,-1,204,0,5,204,0,-1,206,0,5,206,0,-1,208,0,5,208,0,-1,210,0,5,210,0,-1,212,0,5,212,0,-1,214,0,5,214,0,-1,216,0,5,216,0,-1,218,0,5,218,0,0,219,0,0,220,0,0,221,0,0,222,0,0,223,0,-1,225,0,2,227,0,-1,229,0,-1,230,0,-1,231,0,-1,232,0,-1,234,0,-1,235,0,2,235,0,-1,237,0,-1,238,0,2,238,0,-1,240,0,-1,241,0,2,241,0,-1,243,0,-1,244,0,2,244,0,-1,246,0,-1,247,0,2,247,0,-1,249,0,-1,250,0,-1,251,0,-1,252,0,-1,254,0,-1,255,0,2,255,0,-1,257,0,-1,258,0,2,258,0,-1,260,0,-1,261,0,2,261,0,-1,263,0,-1,264,0,2,264,0,-1,266,0,-1,267,0,2,267,0,-1,269,0,-1,270,0,-1,271,0,-1,272,0,-1,273,0,2,273,0,-1,275,0,-1,276,0,-1,277,0,-1,278,0,-1,279,0,2,279,0,-1,281,0,-1,283,0,-1,285,0,-1,287,0,-1,289,0,-1,291,0,-1,293,0,-1,295,0,0,299,0,0,300,0,0,301,0,0,302,0,0,303,0,-1,305,0,2,307,0,-1,309,0,-1,310,0,-1,311,0,-1,312,0,-1,314,0,-1,315,0,2,315,0,-1,317,0,-1,318,0,2,318,0,-1,320,0,-1,321,0,2,321,0,-1,323,0,-1,324,0,2,324,0,-1,326,0,-1,327,0,2,327,0,-1,329,0,-1,330,0,-1,331,0,-1,332,0,-1,334,0,-1,335,0,2,335,0,-1,337,0,-1,338,0,2,338,0,-1,340,0,-1,341,0,2,341,0,-1,343,0,-1,344,0,2,344,0,-1,346,0,-1,347,0,2,347,0,-1,349,0,-1,350,0,-1,351,0,-1,352,0,-1,353,0,2,353,0,-1,355,0,-1,356,0,-1,357,0,-1,358,0,-1,359,0,2,359,0,0,360,0,0,361,0,0,362,0,0,363,0,0,364,0,26,15,1,2,174,4,2,16,5,2,13,6,2,16,7,2,120,8,2,120,10,2,19,11,2,15,12,2,120,13,2,15,14,27,293,14,28,291,14,29,289,14,30,287,14,31,285,14,32,283,14,33,281,18,2,110,27,2,232,28,2,252,32,2,312,33,2,332,57,2,190,58,2,192,64,34,131,64,35,129,64,36,68,64,37,128,64,38,137,64,39,125,64,40,124,64,41,65,64,42,126,64,43,297,64,44,162,111,2,140,112,2,140,113,2,141,114,2,141,115,2,142,116,2,142,118,2,196,122,2,225,134,2,305,135,2,168,136,2,169,141,2,187,142,2,188,143,2,189,161,2,226,167,2,306,297,0,298,736],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,281,283,285,287,289,291,293],[-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,-1,1,13,11,11,11,11,-1,1,-1,14,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,13,13,13,13,13,11,-1,1,-1,1,-1,1,-1,6,-1,6,-1,6,-1,6,-1,6,-1,6,-1,6,-1,6,-1,6,-1,6,-1,6,-1,6,-1,6,-1,6,-1,6,-1,1,12,-1,-2,1,12,-1,1,12,-1,1,12,-1,1,12,-1,1,-1,-2,-3,14,8,8,8,8,8,8,-1,14,8,8,-1,14,8,8,8,45,8,8,8,8,-1,14,8,8,-1,-2,14,8,13,11,11,11,11,11,11,-1,1,12,-1,-2,1,12,-1,1,12,-1,1,12,-1,1,12,-1,1,-1,-2,-3,14,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,46,47,15,15,15,15,15,15,15],[121,122,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,0,27,1,28,0,29,1,30,0,31,1,32,0,33,1,34,1,35,0,36,1,37,0,38,1,39,0,40,1,41,0,42,0,43,1,44,0,45,1,46,0,47,1,48,0,49,1,50,51,52,51,52,53,123,53,6,54,124,18,26,19,24,6,54,55,55,6,56,6,56,8,20,8,21,8,20,8,21,8,20,8,21,8,125,8,126,0,14,6,57,58,14,127,15,128,14,6,57,58,14,129,15,130,22,22,22,131,132,6,133,134,135,6,136,10,3,11,3,12,3,10,3,11,3,12,3,10,3,11,3,12,3,10,3,11,3,12,3,10,3,11,3,12,3,7,59,60,7,7,61,62,7,63,64,7,65,66,7,67,68,69,15,16,70,71,16,137,138,72,73,139,140,74,74,75,76,77,77,76,141,78,78,73,72,79,142,80,80,79,143,81,144,81,75,145,82,82,146,147,83,83,7,59,60,7,7,61,62,7,63,64,7,65,66,7,67,68,69,15,16,70,71,16,6,84,6,85,86,87,6,84,6,85,86,87,1,28,0,29,1,30,0,31,1,32,0,33,1,34,1,35,0,36,1,37,0,38,1,39,0,40,1,41,0,42,0,43,1,44,0,45,1,46,0,47,1,48,0,49,1,50,0,27,148,149,150,151,152,153,154,155,156]],[[[194,[[195,"ShadowFlow",[[196,"ShadowStage"]]],[197,"ForwardFlow",1,[[198,"ForwardStage",[[199,["default"]],[200,true,1,["default"]]]]]]]]],0,0,[],[],[]]]]
