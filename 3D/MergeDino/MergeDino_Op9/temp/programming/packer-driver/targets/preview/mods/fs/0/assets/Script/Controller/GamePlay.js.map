{"version":3,"sources":["file:///D:/PA_2024/3D/MergeDino/MergeDino_Op9/assets/Script/Controller/GamePlay.ts"],"names":["_decorator","Animation","Component","Vec3","tween","CharacterControl","GameController","AudioManager","Constants","NodesController","Utils","ccclass","property","GamePlay","onLoad","start","handleMergeStep1","isCanTouch","isMergeStep1Flag","Camera","getComponent","play","dinoLevels","forEach","level","active","scheduleOnce","FX_Merge","unitsStep1","unit","mergeDinoStep1","MainCharacter_1","to","scale","playSound","SoundTrack","Dino_MergeSound","Dino_ScreamSound","isFightStep1","Dino_FightSound","handleMergeStep2","isMergeStep2Flag","FX_Merge_2","unitstep2","mergeDinoStep2","MainCharacter_2","isStartStep2","isFightStep2","setupStep2","isFailStep1Flag","Fail","Dino_LoseSound","dinoLines","line","replay","hint_2","setupStep3","isFailStep2Flag","hint_3","update","dt","isDoneMergeStep1","isDoneMergeStep2","isFailStep1","isFailStep2"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;AAAYC,MAAAA,S,OAAAA,S;AAA4CC,MAAAA,S,OAAAA,S;AAA+GC,MAAAA,I,OAAAA,I;AAAgDC,MAAAA,K,OAAAA,K;;AACvNC,MAAAA,gB,iBAAAA,gB;;AAEAC,MAAAA,c,iBAAAA,c;;AAEAC,MAAAA,Y,iBAAAA,Y;;AACAC,MAAAA,S,iBAAAA,S;;AACAC,MAAAA,e,iBAAAA,e;;AACAC,MAAAA,K,iBAAAA,K;;;;;;;OACH;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBZ,U;;0BAEjBa,Q,WADZF,OAAO,CAAC,UAAD,C,UAIHC,QAAQ;AAAA;AAAA,6C,UAERA,QAAQ;AAAA;AAAA,2C,UAERA,QAAQ;AAAA;AAAA,uC,oCARb,MACaC,QADb,SAC8BX,SAD9B,CACwC;AAAA;AAAA;;AAAA;;AAAA;;AAAA;;AAAA,oDAYR,KAZQ;;AAAA,oDAaR,KAbQ;;AAAA,mDAcT,KAdS;;AAAA,mDAeT,KAfS;AAAA;;AAkB1BY,QAAAA,MAAM,GAAS,CAExB;;AAGSC,QAAAA,KAAK,GAAS,CACpB;AACH;;AAGOC,QAAAA,gBAAgB,GAAS;AAC7B;AAAA;AAAA,sCAAUC,UAAV,GAAuB,KAAvB;AACA,eAAKC,gBAAL,GAAwB,IAAxB;AAEA,eAAKT,eAAL,CAAqBU,MAArB,CAA4BC,YAA5B,CAAyCnB,SAAzC,EAAoDoB,IAApD;AACA,eAAKZ,eAAL,CAAqBa,UAArB,CAAgCC,OAAhC,CAAwCC,KAAK,IAAIA,KAAK,CAACC,MAAN,GAAe,KAAhE;AACA,eAAKC,YAAL,CAAkB,MAAM;AACpB,iBAAKjB,eAAL,CAAqBkB,QAArB,CAA8BN,IAA9B;AACH,WAFD,EAEG,CAFH;AAIA,eAAKK,YAAL,CAAkB,MAAM;AACpB,iBAAKjB,eAAL,CAAqBmB,UAArB,CAAgCL,OAAhC,CAAwCM,IAAI,IAAI;AAAA;AAAA,gCAAMhB,QAAN,CAAeiB,cAAf,CAA8BD,IAA9B,CAAhD;AACA,iBAAKpB,eAAL,CAAqBsB,eAArB,CAAqCN,MAArC,GAA8C,IAA9C;AACArB,YAAAA,KAAK,CAAC,KAAKK,eAAL,CAAqBsB,eAAtB,CAAL,CACCC,EADD,CACI,GADJ,EACS;AAACC,cAAAA,KAAK,EAAE,IAAI9B,IAAJ,CAAS,KAAT,EAAgB,KAAhB,EAAuB,KAAvB;AAAR,aADT,EAECY,KAFD;AAGA,iBAAKR,YAAL,CAAkB2B,SAAlB,CAA4B;AAAA;AAAA,wCAAUC,UAAV,CAAqBC,eAAjD;AACH,WAPD,EAOG,CAPH;AASA,eAAKV,YAAL,CAAkB,MAAM;AACpB,iBAAKjB,eAAL,CAAqBsB,eAArB,CAAqCX,YAArC;AAAA;AAAA,sDAAoEI,KAApE,CAA0EC,MAA1E,GAAmF,IAAnF;AACA,iBAAKlB,YAAL,CAAkB2B,SAAlB,CAA4B;AAAA;AAAA,wCAAUC,UAAV,CAAqBE,gBAAjD;AACH,WAHD,EAGG,GAHH;AAKA,eAAKX,YAAL,CAAkB,MAAM;AACpB,iBAAKjB,eAAL,CAAqBa,UAArB,CAAgCC,OAAhC,CAAwCC,KAAK,IAAIA,KAAK,CAACC,MAAN,GAAe,IAAhE;AACA;AAAA;AAAA,wCAAUR,UAAV,GAAuB,IAAvB;AACH,WAHD,EAGG,CAHH;AAKA,eAAKS,YAAL,CAAkB,MAAM;AACpB;AAAA;AAAA,wCAAUY,YAAV,GAAyB,IAAzB;AACA,iBAAK/B,YAAL,CAAkB2B,SAAlB,CAA4B;AAAA;AAAA,wCAAUC,UAAV,CAAqBI,eAAjD;AACH,WAHD,EAGG,CAHH;AAIH;;AAEOC,QAAAA,gBAAgB,GAAS;AAC7B;AAAA;AAAA,sCAAUvB,UAAV,GAAuB,KAAvB;AACA,eAAKwB,gBAAL,GAAwB,IAAxB;AAEA,eAAKhC,eAAL,CAAqBU,MAArB,CAA4BC,YAA5B,CAAyCnB,SAAzC,EAAoDoB,IAApD;AACA,eAAKZ,eAAL,CAAqBa,UAArB,CAAgCC,OAAhC,CAAwCC,KAAK,IAAIA,KAAK,CAACC,MAAN,GAAe,KAAhE;AACA,eAAKC,YAAL,CAAkB,MAAM;AACpB,iBAAKjB,eAAL,CAAqBiC,UAArB,CAAgCrB,IAAhC;AACH,WAFD,EAEG,CAFH;AAIA,eAAKK,YAAL,CAAkB,MAAM;AACpB,iBAAKjB,eAAL,CAAqBkC,SAArB,CAA+BpB,OAA/B,CAAuCM,IAAI,IAAI;AAAA;AAAA,gCAAMhB,QAAN,CAAe+B,cAAf,CAA8Bf,IAA9B,CAA/C;AACA,iBAAKpB,eAAL,CAAqBoC,eAArB,CAAqCpB,MAArC,GAA8C,IAA9C;AACArB,YAAAA,KAAK,CAAC,KAAKK,eAAL,CAAqBoC,eAAtB,CAAL,CACCb,EADD,CACI,GADJ,EACS;AAACC,cAAAA,KAAK,EAAE,IAAI9B,IAAJ,CAAS,KAAT,EAAgB,KAAhB,EAAuB,KAAvB;AAAR,aADT,EAECY,KAFD;AAGA,iBAAKR,YAAL,CAAkB2B,SAAlB,CAA4B;AAAA;AAAA,wCAAUC,UAAV,CAAqBC,eAAjD;AACH,WAPD,EAOG,CAPH;AASA,eAAKV,YAAL,CAAkB,MAAM;AACpB,iBAAKjB,eAAL,CAAqBoC,eAArB,CAAqCzB,YAArC;AAAA;AAAA,sDAAoEI,KAApE,CAA0EC,MAA1E,GAAmF,IAAnF;AACA,iBAAKhB,eAAL,CAAqBsB,eAArB,CAAqCX,YAArC;AAAA;AAAA,sDAAoEI,KAApE,CAA0EC,MAA1E,GAAmF,IAAnF;AACA,iBAAKlB,YAAL,CAAkB2B,SAAlB,CAA4B;AAAA;AAAA,wCAAUC,UAAV,CAAqBE,gBAAjD;AACH,WAJD,EAIG,GAJH;AAMA,eAAKX,YAAL,CAAkB,MAAM;AACpB,iBAAKjB,eAAL,CAAqBa,UAArB,CAAgCC,OAAhC,CAAwCC,KAAK,IAAIA,KAAK,CAACC,MAAN,GAAe,IAAhE;AACA;AAAA;AAAA,wCAAUqB,YAAV,GAAyB,IAAzB;AACA;AAAA;AAAA,wCAAU7B,UAAV,GAAuB,IAAvB;AACH,WAJD,EAIG,CAJH;AAMA,eAAKS,YAAL,CAAkB,MAAM;AACpB;AAAA;AAAA,wCAAUqB,YAAV,GAAyB,IAAzB;AACA,iBAAKxC,YAAL,CAAkB2B,SAAlB,CAA4B;AAAA;AAAA,wCAAUC,UAAV,CAAqBI,eAAjD;AACH,WAHD,EAGG,CAHH;AAIH;;AAGOS,QAAAA,UAAU,GAAS;AACvB,eAAKC,eAAL,GAAuB,IAAvB;AACA,eAAKxC,eAAL,CAAqByC,IAArB,CAA0BzB,MAA1B,GAAmC,IAAnC;AACA,eAAKlB,YAAL,CAAkB2B,SAAlB,CAA4B;AAAA;AAAA,sCAAUC,UAAV,CAAqBgB,cAAjD;AACA,eAAK1C,eAAL,CAAqB2C,SAArB,CAA+B7B,OAA/B,CAAuC8B,IAAI,IAAIA,IAAI,CAAC5B,MAAL,GAAc,KAA7D;AAEA,eAAKC,YAAL,CAAkB,MAAM;AACpB,iBAAKjB,eAAL,CAAqB6C,MAArB;AACH,WAFD,EAEG,CAFH;AAIA,eAAK5B,YAAL,CAAkB,MAAM;AACpB,iBAAKjB,eAAL,CAAqB8C,MAArB,CAA4B9B,MAA5B,GAAqC,IAArC;AACH,WAFD,EAEG,GAFH;AAGH;;AAGO+B,QAAAA,UAAU,GAAS;AACvB,eAAKC,eAAL,GAAuB,IAAvB;AACA,eAAKhD,eAAL,CAAqByC,IAArB,CAA0BzB,MAA1B,GAAmC,IAAnC;AACA,eAAKlB,YAAL,CAAkB2B,SAAlB,CAA4B;AAAA;AAAA,sCAAUC,UAAV,CAAqBgB,cAAjD;AACA,eAAK1C,eAAL,CAAqB2C,SAArB,CAA+B7B,OAA/B,CAAuC8B,IAAI,IAAIA,IAAI,CAAC5B,MAAL,GAAc,KAA7D;AAEA,eAAKC,YAAL,CAAkB,MAAM;AACpB;AACA,iBAAKjB,eAAL,CAAqBoC,eAArB,CAAqCpB,MAArC,GAA8C,KAA9C;AACA,iBAAKhB,eAAL,CAAqB6C,MAArB;AACH,WAJD,EAIG,CAJH;AAMA,eAAK5B,YAAL,CAAkB,MAAM;AACpB,iBAAKjB,eAAL,CAAqBiD,MAArB,CAA4BjC,MAA5B,GAAqC,IAArC;AACH,WAFD,EAEG,GAFH;AAGH;;AAGSkC,QAAAA,MAAM,CAACC,EAAD,EAAmB;AAC/B;AAAA;AAAA,sCAAUC,gBAAV,IAA8B,CAAC,KAAK3C,gBAApC,IAAwD,KAAKF,gBAAL,EAAxD;AACA;AAAA;AAAA,sCAAU8C,gBAAV,IAA8B,CAAC,KAAKrB,gBAApC,IAAwD,KAAKD,gBAAL,EAAxD;AACA;AAAA;AAAA,sCAAUuB,WAAV,IAAyB,CAAC,KAAKd,eAA/B,IAAkD,KAAKD,UAAL,EAAlD;AACA;AAAA;AAAA,sCAAUgB,WAAV,IAAyB,CAAC,KAAKP,eAA/B,IAAkD,KAAKD,UAAL,EAAlD;AACH;;AA5ImC,O;;;;;iBAID,I;;;;;;;iBAEF,I;;;;;;;iBAEJ,I","sourcesContent":["import { _decorator, Animation, AudioSource, Camera, view, Vec2, Component, EventTouch, Graphics, log, math, Node, PhysicsSystem, quat, RigidBody, SkeletalAnimation, Skeleton, Vec3, UITransform, ParticleSystem, PrivateNode, tween } from 'cc';\r\nimport { CharacterControl } from './CharacterControl';\r\nimport { RangerControl } from './RangerControl';\r\nimport { GameController } from './GameController';\r\nimport { TouchAreaController } from './TouchAreaController';\r\nimport { AudioManager } from '../Plugin/AudioManager';\r\nimport { Constants } from '../Data/Constant';\r\nimport { NodesController } from './NodesController';\r\nimport { Utils } from '../Plugin/Utils';\r\nconst { ccclass, property } = _decorator;\r\n@ccclass('GamePlay')\r\nexport class GamePlay extends Component {\r\n\r\n    // Script\r\n    @property(NodesController)\r\n    NodesController: NodesController = null;\r\n    @property(GameController)\r\n    GameController: GameController = null;\r\n    @property(AudioManager)\r\n    AudioManager: AudioManager = null;\r\n\r\n\r\n    // state\r\n    isMergeStep1Flag: boolean = false;\r\n    isMergeStep2Flag: boolean = false;\r\n    isFailStep1Flag: boolean = false;\r\n    isFailStep2Flag: boolean = false;\r\n\r\n\r\n    protected onLoad(): void {\r\n       \r\n    }\r\n\r\n\r\n    protected start(): void {\r\n        // this.AudioManager.playSound(Constants.SoundTrack.bgSound);\r\n    }\r\n\r\n\r\n    private handleMergeStep1(): void {\r\n        Constants.isCanTouch = false;\r\n        this.isMergeStep1Flag = true;\r\n\r\n        this.NodesController.Camera.getComponent(Animation).play();\r\n        this.NodesController.dinoLevels.forEach(level => level.active = false);\r\n        this.scheduleOnce(() => {\r\n            this.NodesController.FX_Merge.play();\r\n        }, 1);\r\n\r\n        this.scheduleOnce(() => {\r\n            this.NodesController.unitsStep1.forEach(unit => Utils.GamePlay.mergeDinoStep1(unit));\r\n            this.NodesController.MainCharacter_1.active = true;\r\n            tween(this.NodesController.MainCharacter_1)\r\n            .to(0.5, {scale: new Vec3(0.004, 0.004, 0.004)})\r\n            .start();\r\n            this.AudioManager.playSound(Constants.SoundTrack.Dino_MergeSound);\r\n        }, 2);\r\n        \r\n        this.scheduleOnce(() => {\r\n            this.NodesController.MainCharacter_1.getComponent(CharacterControl).level.active = true;\r\n            this.AudioManager.playSound(Constants.SoundTrack.Dino_ScreamSound);\r\n        }, 2.5);\r\n        \r\n        this.scheduleOnce(() => {\r\n            this.NodesController.dinoLevels.forEach(level => level.active = true);\r\n            Constants.isCanTouch = true;\r\n        }, 4);\r\n        \r\n        this.scheduleOnce(() => {\r\n            Constants.isFightStep1 = true;\r\n            this.AudioManager.playSound(Constants.SoundTrack.Dino_FightSound);\r\n        }, 5);\r\n    }\r\n\r\n    private handleMergeStep2(): void {\r\n        Constants.isCanTouch = false;\r\n        this.isMergeStep2Flag = true;\r\n\r\n        this.NodesController.Camera.getComponent(Animation).play();\r\n        this.NodesController.dinoLevels.forEach(level => level.active = false);\r\n        this.scheduleOnce(() => {\r\n            this.NodesController.FX_Merge_2.play();\r\n        }, 1);\r\n\r\n        this.scheduleOnce(() => {\r\n            this.NodesController.unitstep2.forEach(unit => Utils.GamePlay.mergeDinoStep2(unit));\r\n            this.NodesController.MainCharacter_2.active = true;\r\n            tween(this.NodesController.MainCharacter_2)\r\n            .to(0.5, {scale: new Vec3(0.004, 0.004, 0.004)})\r\n            .start();\r\n            this.AudioManager.playSound(Constants.SoundTrack.Dino_MergeSound);\r\n        }, 2);\r\n        \r\n        this.scheduleOnce(() => {\r\n            this.NodesController.MainCharacter_2.getComponent(CharacterControl).level.active = true;\r\n            this.NodesController.MainCharacter_1.getComponent(CharacterControl).level.active = true;\r\n            this.AudioManager.playSound(Constants.SoundTrack.Dino_ScreamSound);\r\n        }, 2.5);\r\n\r\n        this.scheduleOnce(() => {\r\n            this.NodesController.dinoLevels.forEach(level => level.active = true);\r\n            Constants.isStartStep2 = true;\r\n            Constants.isCanTouch = true;\r\n        }, 4);\r\n\r\n        this.scheduleOnce(() => {\r\n            Constants.isFightStep2 = true;\r\n            this.AudioManager.playSound(Constants.SoundTrack.Dino_FightSound);\r\n        }, 5);\r\n    }\r\n\r\n\r\n    private setupStep2(): void {\r\n        this.isFailStep1Flag = true;\r\n        this.NodesController.Fail.active = true;\r\n        this.AudioManager.playSound(Constants.SoundTrack.Dino_LoseSound);\r\n        this.NodesController.dinoLines.forEach(line => line.active = false);\r\n\r\n        this.scheduleOnce(() => {\r\n            this.NodesController.replay()\r\n        }, 2)\r\n\r\n        this.scheduleOnce(() => {\r\n            this.NodesController.hint_2.active = true;\r\n        }, 2.5)\r\n    }\r\n\r\n\r\n    private setupStep3(): void {\r\n        this.isFailStep2Flag = true;\r\n        this.NodesController.Fail.active = true;\r\n        this.AudioManager.playSound(Constants.SoundTrack.Dino_LoseSound);\r\n        this.NodesController.dinoLines.forEach(line => line.active = false);\r\n\r\n        this.scheduleOnce(() => {\r\n            // this.NodesController.unitstep2.forEach(unit => Utils.GamePlay.mergeDinoStep2(unit));\r\n            this.NodesController.MainCharacter_2.active = false;\r\n            this.NodesController.replay();\r\n        }, 2)\r\n\r\n        this.scheduleOnce(() => {\r\n            this.NodesController.hint_3.active = true;\r\n        }, 2.5)\r\n    }\r\n\r\n\r\n    protected update(dt: number): void {\r\n        Constants.isDoneMergeStep1 && !this.isMergeStep1Flag && this.handleMergeStep1();\r\n        Constants.isDoneMergeStep2 && !this.isMergeStep2Flag && this.handleMergeStep2();\r\n        Constants.isFailStep1 && !this.isFailStep1Flag && this.setupStep2();\r\n        Constants.isFailStep2 && !this.isFailStep2Flag && this.setupStep3();\r\n    }\r\n}\r\n"]}