{"version":3,"sources":["file:///D:/PA_2024/3D/MergeDino/MergeDino_Op9/assets/Script/Controller/NodesController.ts"],"names":["_decorator","Camera","Component","Node","ParticleSystem","Constants","ccclass","property","NodesController","start","init","Text_Tap","active","Fail","hint_2","setupForUtils","saveUnitsInitPos","isMergeStep1States","map","pointsCopy","points_1","point","dinoLines","forEach","line","copyDinoLines","dino_lines","isMergeStep2States","pointsCopy2","points_2","copyDinoLines_2","splice","dino_lines_2","isSaveOnceFlag","dinosStep1Pos","dinosStep2Pos","unitsStep1Pos","unitsStep2Pos","i","unitsStep1","length","unitPos","getPosition","dino","getChildByName","pos","push","unitstep2","dinosStep1InitPos","dinosStep2InitPos","unitsStep1InitPos","unitsStep2InitPos"],"mappings":"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","sourcesContent":["import { _decorator, Camera, Component, Node, ParticleSystem, Vec3 } from 'cc';\r\nimport { Constants } from '../Data/Constant';\r\nconst { ccclass, property } = _decorator;\r\n\r\n \r\n@ccclass('NodesController')\r\nexport class NodesController extends Component {\r\n\r\n    // Camera\r\n    @property(Camera)\r\n    Camera: Camera = null;\r\n    \r\n\r\n    // hints\r\n    @property(Node)\r\n    hint_1: Node = null;\r\n    @property(Node)\r\n    hint_2: Node = null;\r\n\r\n    // touch area\r\n    @property(Node)\r\n    point: Node = null;\r\n    @property(Node)\r\n    hideMask: Node = null;\r\n\r\n\r\n    // FX\r\n    @property(ParticleSystem)\r\n    FX_Merge: ParticleSystem = null;\r\n    @property(ParticleSystem)\r\n    FX_Merge_2: ParticleSystem = null;\r\n\r\n    // array\r\n    @property([Node])\r\n    dinoLines: Node[] = [];\r\n    @property([Node])\r\n    points_1: Node[] = [];\r\n    @property([Node])\r\n    points_2: Node[] = [];\r\n    @property([Node])\r\n    unitsStep1: Node[] = [];\r\n    @property([Node])\r\n    unitstep2: Node[] = [];\r\n    @property([Node])\r\n    dinoLevels: Node[] = [];\r\n    @property([Node])\r\n    dinosStep1: Node[] = [];\r\n    @property([Node])\r\n    dinosStep2: Node[] = [];\r\n\r\n\r\n    // Characters\r\n    @property(Node)\r\n    Boss: Node = null;\r\n    @property(Node)\r\n    MainCharacter_1: Node = null;\r\n    @property(Node)\r\n    targetNode: Node = null;\r\n    @property(Node)\r\n    MainCharacter_2: Node = null;\r\n\r\n\r\n    // Text\r\n    @property(Node)\r\n    Text_Tap: Node = null;\r\n    @property(Node)\r\n    Fail: Node = null;\r\n\r\n    isSaveOnceFlag: boolean = false;\r\n\r\n    protected start(): void {\r\n        this.init();\r\n    }\r\n\r\n\r\n    public init(): void {\r\n        this.Text_Tap.active = false;\r\n        this.Fail.active = false;\r\n        this.hint_2.active = false;\r\n        this.setupForUtils();\r\n        this.saveUnitsInitPos();\r\n      }\r\n\r\n\r\n      private setupForUtils(): void {\r\n        // step 1\r\n        Constants.isMergeStep1States = Constants.isMergeStep1States.map(() => false);\r\n        let pointsCopy = [...this.points_1];\r\n        Constants.points_1 = pointsCopy;\r\n        Constants.point = this.point;\r\n    \r\n        this.dinoLines.forEach(line => line.active = false);\r\n        let copyDinoLines = [...this.dinoLines];\r\n        Constants.dino_lines = copyDinoLines;\r\n        // --------------------------------\r\n\r\n\r\n        // step 2\r\n        Constants.isMergeStep2States = Constants.isMergeStep2States.map(() => false);\r\n        let pointsCopy2 = [...this.points_2];\r\n        Constants.points_2 = pointsCopy2;\r\n\r\n        this.dinoLines.forEach(line => line.active = false);\r\n        let copyDinoLines_2 = this.dinoLines.splice(8, 6);\r\n        Constants.dino_lines_2 = copyDinoLines_2;\r\n      }\r\n\r\n\r\n      private saveUnitsInitPos(): void {\r\n        if(this.isSaveOnceFlag) {\r\n            return;\r\n        }\r\n\r\n        // Other Units\r\n        this.isSaveOnceFlag = true;\r\n        let dinosStep1Pos: Vec3[] = [];\r\n        let dinosStep2Pos: Vec3[] = [];\r\n        let unitsStep1Pos: Vec3[] = [];\r\n        let unitsStep2Pos: Vec3[] = [];\r\n        for (let i = 0; i < this.unitsStep1.length; i++) {\r\n            let unitPos = this.unitsStep1[i].getPosition();\r\n            let dino = this.unitsStep1[i].getChildByName(\"Comp\");\r\n            let pos = dino.getPosition();\r\n            dinosStep1Pos.push(pos);\r\n            unitsStep1Pos.push(unitPos);\r\n        };\r\n        for (let i = 0; i < this.unitstep2.length; i++) {\r\n            let unitPos = this.unitstep2[i].getPosition();\r\n            let dino = this.unitstep2[i].getChildByName(\"Comp\");\r\n            let pos = dino.getPosition();\r\n            dinosStep2Pos.push(pos);\r\n            unitsStep2Pos.push(unitPos);\r\n        };\r\n        Constants.dinosStep1InitPos = dinosStep1Pos;\r\n        Constants.dinosStep2InitPos = dinosStep2Pos;\r\n        Constants.unitsStep1InitPos = unitsStep1Pos;\r\n        Constants.unitsStep2InitPos = unitsStep2Pos;\r\n        // --------------------------------------------\r\n\r\n\r\n      }\r\n}\r\n\r\n"]}