{"version":3,"sources":["file:///D:/PlayableAds/PA_2024/3D/MergeDino/MergeDino_Op9/assets/Script/Plugin/Utils.ts"],"names":["Utils","UITransform","Vec3","tween","Constants","checkMergeFirstStep","i","points_1","length","currentNode","nodeBdx","getComponent","getBoundingBox","pointBdx","point","intersects","isMergeStep1States","dino_lines","active","every","state","isDoneMergeStep1","mergeDinoStep1","dino","to","position","scale","call","start","TouchArea","GamePlay"],"mappings":";;;mEAiDaA,K;;;;;;;;;;;;;;;AAjDJC,MAAAA,W,OAAAA,W;AAAaC,MAAAA,I,OAAAA,I;AAAMC,MAAAA,K,OAAAA,K;;AACnBC,MAAAA,S,iBAAAA,S;;;;;;;AAGHC,MAAAA,mB,GAAsB,MAAY;AAEpC,aAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG;AAAA;AAAA,oCAAUC,QAAV,CAAmBC,MAAvC,EAA+CF,CAAC,EAAhD,EAAoD;AAChD,cAAIG,WAAW,GAAG;AAAA;AAAA,sCAAUF,QAAV,CAAmBD,CAAnB,CAAlB;AACA,cAAII,OAAO,GAAGD,WAAW,CAACE,YAAZ,CAAyBV,WAAzB,EAAsCW,cAAtC,EAAd;AACA,cAAIC,QAAQ,GAAG;AAAA;AAAA,sCAAUC,KAAV,CAAgBH,YAAhB,CAA6BV,WAA7B,EAA0CW,cAA1C,EAAf;;AACA,cAAIF,OAAO,CAACK,UAAR,CAAmBF,QAAnB,CAAJ,EAAkC;AAE9B,gBAAI;AAAA;AAAA,wCAAUG,kBAAV,CAA6BV,CAA7B,CAAJ,EAAqC;AACjC;AACH;;AAED;AAAA;AAAA,wCAAUU,kBAAV,CAA6BV,CAA7B,IAAkC,IAAlC;AACA;AAAA;AAAA,wCAAUW,UAAV,CAAqBX,CAArB,EAAwBY,MAAxB,GAAiC,IAAjC;;AAEA,gBAAI;AAAA;AAAA,wCAAUF,kBAAV,CAA6BG,KAA7B,CAAmCC,KAAK,IAAIA,KAAK,KAAK,IAAtD,CAAJ,EAAiE;AAC7D;AAAA;AAAA,0CAAUC,gBAAV,GAA6B,IAA7B;AACH;;AACD;AACH;AACJ;AACJ,O;;AAGKC,MAAAA,c,GAAkBC,IAAD,IAAgB;AACnCpB,QAAAA,KAAK,CAACoB,IAAD,CAAL,CACKC,EADL,CACQ,IADR,EACc;AACNC,UAAAA,QAAQ,EAAE,IAAIvB,IAAJ,CAAS,CAAC,GAAV,EAAe,CAAC,MAAhB,EAAwB,KAAxB,CADJ;AAENwB,UAAAA,KAAK,EAAE,IAAIxB,IAAJ,CAAS,CAAT,EAAY,CAAZ,EAAe,CAAf;AAFD,SADd,EAKKyB,IALL,CAKU,MAAM;AACRJ,UAAAA,IAAI,CAACL,MAAL,GAAc,KAAd;AACH,SAPL,EAQKU,KARL;AASH,O;;AAGKC,MAAAA,S,GAAY;AACdxB,QAAAA,mBAAmB,EAAEA;AADP,O;AAGZyB,MAAAA,Q,GAAW;AACbR,QAAAA,cAAc,EAAEA;AADH,O;;uBAKJtB,K,GAAN,MAAMA,KAAN,CAAY,E;;sBAANA,K,eAEU6B,S;;sBAFV7B,K,cAGS8B,Q","sourcesContent":["import { UITransform, Vec3, tween } from \"cc\";\r\nimport { Constants } from \"../Data/Constant\";\r\n\r\n\r\nconst checkMergeFirstStep = (): void => {\r\n\r\n    for (let i = 0; i < Constants.points_1.length; i++) {\r\n        let currentNode = Constants.points_1[i];\r\n        let nodeBdx = currentNode.getComponent(UITransform).getBoundingBox();\r\n        let pointBdx = Constants.point.getComponent(UITransform).getBoundingBox();\r\n        if (nodeBdx.intersects(pointBdx)) {\r\n\r\n            if (Constants.isMergeStep1States[i]) {\r\n                break;\r\n            }\r\n\r\n            Constants.isMergeStep1States[i] = true;\r\n            Constants.dino_lines[i].active = true;\r\n\r\n            if (Constants.isMergeStep1States.every(state => state === true)) {\r\n                Constants.isDoneMergeStep1 = true;\r\n            }\r\n            break;\r\n        }\r\n    }\r\n}\r\n\r\n\r\nconst mergeDinoStep1 = (dino): void => {\r\n    tween(dino)\r\n        .to(0.35, {\r\n            position: new Vec3(-1.1, -15.535, 9.208),\r\n            scale: new Vec3(0, 0, 0)\r\n        })\r\n        .call(() => {\r\n            dino.active = false;\r\n        })\r\n        .start();\r\n}\r\n\r\n\r\nconst TouchArea = {\r\n    checkMergeFirstStep: checkMergeFirstStep,\r\n}\r\nconst GamePlay = {\r\n    mergeDinoStep1: mergeDinoStep1,\r\n}\r\n\r\n\r\nexport class Utils {\r\n\r\n    static TouchArea = TouchArea;\r\n    static GamePlay = GamePlay;\r\n}\r\n\r\n"]}