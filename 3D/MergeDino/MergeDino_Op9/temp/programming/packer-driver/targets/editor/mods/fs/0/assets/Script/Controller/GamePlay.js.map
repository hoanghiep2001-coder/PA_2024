{"version":3,"sources":["file:///D:/PA_2024/3D/MergeDino/MergeDino_Op9/assets/Script/Controller/GamePlay.ts"],"names":["_decorator","Animation","Component","SkeletalAnimation","Vec3","tween","CharacterControl","GameController","AudioManager","Constants","NodesController","Utils","ccclass","property","GamePlay","onLoad","initGame","start","handleMergeStep1","isCanTouch","isMergeStep1Flag","Camera","getComponent","play","dinoLevels","forEach","level","active","scheduleOnce","FX_Merge","unitsStep1","unit","mergeDinoStep1","MainCharacter_1","to","scale","Text_Tap","handleMergeStep2","isMergeStep2Flag","FX_Merge_2","unitstep2","mergeDinoStep2","MainCharacter_2","isStartStep2","setupStep2","isFailStep1Flag","Fail","dinoLines","line","index","setPosition","unitsStep1InitPos","setScale","dinosStep1","dino","dinosStep1InitPos","unitsStep2InitPos","dinosStep2","dinosStep2InitPos","hint_2","update","dt","isDoneMergeStep1","isDoneMergeStep2","isFailStep1"],"mappings":"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","sourcesContent":["import { _decorator, Animation, AudioSource, Camera, view, Vec2, Component, EventTouch, Graphics, log, math, Node, PhysicsSystem, quat, RigidBody, SkeletalAnimation, Skeleton, Vec3, UITransform, ParticleSystem, PrivateNode, tween } from 'cc';\r\nimport { CharacterControl } from './CharacterControl';\r\nimport { RangerControl } from './RangerControl';\r\nimport { GameController } from './GameController';\r\nimport { TouchAreaController } from './TouchAreaController';\r\nimport { AudioManager } from '../Plugin/AudioManager';\r\nimport { Constants } from '../Data/Constant';\r\nimport { NodesController } from './NodesController';\r\nimport { Utils } from '../Plugin/Utils';\r\nconst { ccclass, property } = _decorator;\r\n@ccclass('GamePlay')\r\nexport class GamePlay extends Component {\r\n\r\n    // Script\r\n    @property(NodesController)\r\n    NodesController: NodesController = null;\r\n    @property(GameController)\r\n    GameController: GameController = null;\r\n    @property(AudioManager)\r\n    AudioManager: AudioManager = null;\r\n\r\n\r\n    // state\r\n    isMergeStep1Flag: boolean = false;\r\n    isMergeStep2Flag: boolean = false;\r\n    isFailStep1Flag: boolean = false;\r\n\r\n\r\n    protected onLoad(): void {\r\n       \r\n    }\r\n\r\n\r\n    public initGame(): void {\r\n    \r\n    }\r\n\r\n\r\n    protected start(): void {\r\n\r\n    }\r\n\r\n\r\n    private handleMergeStep1(): void {\r\n        Constants.isCanTouch = false;\r\n        this.isMergeStep1Flag = true;\r\n\r\n        this.NodesController.Camera.getComponent(Animation).play();\r\n        this.NodesController.dinoLevels.forEach(level => level.active = false);\r\n        this.scheduleOnce(() => {\r\n            this.NodesController.FX_Merge.play();\r\n        }, 1);\r\n\r\n        this.scheduleOnce(() => {\r\n            this.NodesController.unitsStep1.forEach(unit => Utils.GamePlay.mergeDinoStep1(unit));\r\n            this.NodesController.MainCharacter_1.active = true;\r\n            tween(this.NodesController.MainCharacter_1)\r\n            .to(0.5, {scale: new Vec3(0.004, 0.004, 0.004)})\r\n            .start();\r\n        }, 2);\r\n        \r\n        this.scheduleOnce(() => {\r\n            this.NodesController.MainCharacter_1.getComponent(CharacterControl).level.active = true;\r\n        }, 2.5);\r\n\r\n        this.scheduleOnce(() => {\r\n            this.NodesController.dinoLevels.forEach(level => level.active = true);\r\n            this.NodesController.Text_Tap.active = true;\r\n            Constants.isCanTouch = true;\r\n        }, 4)\r\n    }\r\n\r\n    private handleMergeStep2(): void {\r\n        Constants.isCanTouch = false;\r\n        this.isMergeStep2Flag = true;\r\n\r\n        this.NodesController.Camera.getComponent(Animation).play();\r\n        this.NodesController.dinoLevels.forEach(level => level.active = false);\r\n        this.scheduleOnce(() => {\r\n            this.NodesController.FX_Merge_2.play();\r\n        }, 1);\r\n\r\n        this.scheduleOnce(() => {\r\n            this.NodesController.unitstep2.forEach(unit => Utils.GamePlay.mergeDinoStep2(unit));\r\n            this.NodesController.MainCharacter_2.active = true;\r\n            tween(this.NodesController.MainCharacter_2)\r\n            .to(0.5, {scale: new Vec3(0.004, 0.004, 0.004)})\r\n            .start();\r\n        }, 2);\r\n        \r\n        this.scheduleOnce(() => {\r\n            this.NodesController.MainCharacter_2.getComponent(CharacterControl).level.active = true;\r\n            this.NodesController.MainCharacter_1.getComponent(CharacterControl).level.active = true;\r\n        }, 2.5);\r\n\r\n        this.scheduleOnce(() => {\r\n            this.NodesController.dinoLevels.forEach(level => level.active = true);\r\n            this.NodesController.Text_Tap.active = true;\r\n            Constants.isStartStep2 = true;\r\n            Constants.isCanTouch = true;\r\n        }, 4)\r\n    }\r\n\r\n\r\n    private setupStep2(): void {\r\n        this.isFailStep1Flag = true;\r\n        this.NodesController.Fail.active = true;\r\n        \r\n        this.NodesController.dinoLines.forEach(line => line.active = false);\r\n\r\n        this.scheduleOnce(() => {\r\n            this.NodesController.unitsStep1.forEach((unit, index) => {\r\n                unit.setPosition(Constants.unitsStep1InitPos[index]);\r\n                unit.setScale(new Vec3(8,8,8));\r\n                unit.active = true;\r\n            });\r\n            this.NodesController.dinosStep1.forEach((dino, index) => {\r\n                dino.getComponent(SkeletalAnimation).play(\"Idle_1\");\r\n                dino.setPosition(Constants.dinosStep1InitPos[index]);\r\n                dino.setScale(new Vec3(0.08, 0.08, 0.08));\r\n                dino.active = true;\r\n            });\r\n\r\n\r\n            this.NodesController.unitstep2.forEach((unit, index) => {\r\n                unit.setPosition(Constants.unitsStep2InitPos[index]);\r\n                unit.setScale(new Vec3(8,8,8));\r\n                unit.active = true;\r\n            });\r\n            this.NodesController.dinosStep2.forEach((dino, index) => {\r\n                dino.getComponent(SkeletalAnimation).play(\"Idle_1\");\r\n                dino.setPosition(Constants.dinosStep2InitPos[index]);\r\n                dino.setScale(new Vec3(0.08, 0.08, 0.08));\r\n                dino.active = true;\r\n            });\r\n\r\n            this.NodesController.MainCharacter_1.active = false;\r\n            this.NodesController.MainCharacter_1.getComponent(CharacterControl).level.active = false;\r\n        }, 2)\r\n\r\n        this.scheduleOnce(() => {\r\n            this.NodesController.hint_2.active = true;\r\n        }, 2.5)\r\n        // this.NodesController.dinosStep1.forEach((dino, index) => {\r\n        //     dino.setPosition(Constants.dinosStep1InitPos[index]);\r\n        //     dino.active = true;\r\n        //     dino.setScale(new Vec3(0.08, 0.08, 0.08));\r\n        // });\r\n        // this.NodesController.dinosStep2.forEach((dino, index) => dino.setPosition(Constants.dinosStep2InitPos[index]));\r\n\r\n    }\r\n\r\n\r\n    protected update(dt: number): void {\r\n        Constants.isDoneMergeStep1 && !this.isMergeStep1Flag && this.handleMergeStep1();\r\n        Constants.isDoneMergeStep2 && !this.isMergeStep2Flag && this.handleMergeStep2();\r\n        Constants.isFailStep1 && !this.isFailStep1Flag && this.setupStep2();\r\n    }\r\n}\r\n"]}