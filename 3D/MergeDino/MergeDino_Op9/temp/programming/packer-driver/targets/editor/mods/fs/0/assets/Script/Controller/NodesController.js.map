{"version":3,"sources":["file:///D:/PA_2024/3D/MergeDino/MergeDino_Op9/assets/Script/Controller/NodesController.ts"],"names":["_decorator","Camera","Component","Node","ParticleSystem","SkeletalAnimation","Vec3","Constants","CharacterControl","ccclass","property","NodesController","start","init","Text_Tap","active","Fail","hint_2","hint_3","setupForUtils","saveUnitsInitPos","isMergeStep1States","map","pointsCopy","points_1","point","dinoLines","forEach","line","copyDinoLines","slice","dino_lines","isMergeStep2States","pointsCopy2","points_2","copyDinoLines_2","dino_lines_2","isSaveOnceFlag","dinosStep1Pos","dinosStep2Pos","unitsStep1Pos","unitsStep2Pos","i","unitsStep1","length","unitPos","getPosition","dino","getChildByName","pos","push","unitstep2","dinosStep1InitPos","dinosStep2InitPos","unitsStep1InitPos","unitsStep2InitPos","replay","unit","index","setPosition","setScale","dinosStep1","getComponent","play","dinosStep2","MainCharacter_1","level"],"mappings":"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","sourcesContent":["import { _decorator, Camera, Component, Node, ParticleSystem, SkeletalAnimation, Vec3 } from 'cc';\r\nimport { Constants } from '../Data/Constant';\r\nimport { CharacterControl } from './CharacterControl';\r\nconst { ccclass, property } = _decorator;\r\n\r\n\r\n@ccclass('NodesController')\r\nexport class NodesController extends Component {\r\n\r\n  // Camera\r\n  @property(Camera)\r\n  Camera: Camera = null;\r\n\r\n\r\n  // hints\r\n  @property(Node)\r\n  hint_1: Node = null;\r\n  @property(Node)\r\n  hint_2: Node = null;\r\n  @property(Node)\r\n  hint_3: Node = null;\r\n\r\n  // touch area\r\n  @property(Node)\r\n  point: Node = null;\r\n  @property(Node)\r\n  hideMask: Node = null;\r\n\r\n\r\n  // FX\r\n  @property(ParticleSystem)\r\n  FX_Merge: ParticleSystem = null;\r\n  @property(ParticleSystem)\r\n  FX_Merge_2: ParticleSystem = null;\r\n\r\n  // array\r\n  @property([Node])\r\n  dinoLines: Node[] = [];\r\n  @property([Node])\r\n  points_1: Node[] = [];\r\n  @property([Node])\r\n  points_2: Node[] = [];\r\n  @property([Node])\r\n  unitsStep1: Node[] = [];\r\n  @property([Node])\r\n  unitstep2: Node[] = [];\r\n  @property([Node])\r\n  dinoLevels: Node[] = [];\r\n  @property([Node])\r\n  dinosStep1: Node[] = [];\r\n  @property([Node])\r\n  dinosStep2: Node[] = [];\r\n\r\n\r\n  // Characters\r\n  @property(Node)\r\n  Boss: Node = null;\r\n  @property(Node)\r\n  MainCharacter_1: Node = null;\r\n  @property(Node)\r\n  targetNode: Node = null;\r\n  @property(Node)\r\n  MainCharacter_2: Node = null;\r\n\r\n\r\n  // Text\r\n  @property(Node)\r\n  Text_Tap: Node = null;\r\n  @property(Node)\r\n  Fail: Node = null;\r\n\r\n  isSaveOnceFlag: boolean = false;\r\n\r\n  protected start(): void {\r\n    this.init();\r\n  }\r\n\r\n\r\n  public init(): void {\r\n    this.Text_Tap.active = false;\r\n    this.Fail.active = false;\r\n    this.hint_2.active = false;\r\n    this.hint_3.active = false;\r\n    this.setupForUtils();\r\n    this.saveUnitsInitPos();\r\n  }\r\n\r\n\r\n  private setupForUtils(): void {\r\n    \r\n    // step 1\r\n    Constants.isMergeStep1States = Constants.isMergeStep1States.map(() => false);\r\n    let pointsCopy = [...this.points_1];\r\n    Constants.points_1 = pointsCopy;\r\n    Constants.point = this.point;\r\n\r\n    this.dinoLines.forEach(line => line.active = false);\r\n    let copyDinoLines = this.dinoLines.slice(0, 8)\r\n    Constants.dino_lines = copyDinoLines;\r\n    // --------------------------------\r\n\r\n\r\n    // step 2\r\n    Constants.isMergeStep2States = Constants.isMergeStep2States.map(() => false);\r\n    let pointsCopy2 = [...this.points_2];\r\n    Constants.points_2 = pointsCopy2;\r\n\r\n\r\n    let copyDinoLines_2 = this.dinoLines.slice(8, 14);\r\n    Constants.dino_lines_2 = copyDinoLines_2;\r\n    Constants.dino_lines_2.forEach(line => line.active = false);\r\n\r\n  }\r\n\r\n\r\n  private saveUnitsInitPos(): void {\r\n    if (this.isSaveOnceFlag) {\r\n      return;\r\n    }\r\n\r\n    // Other Units\r\n    this.isSaveOnceFlag = true;\r\n    let dinosStep1Pos: Vec3[] = [];\r\n    let dinosStep2Pos: Vec3[] = [];\r\n    let unitsStep1Pos: Vec3[] = [];\r\n    let unitsStep2Pos: Vec3[] = [];\r\n    for (let i = 0; i < this.unitsStep1.length; i++) {\r\n      let unitPos = this.unitsStep1[i].getPosition();\r\n      let dino = this.unitsStep1[i].getChildByName(\"Comp\");\r\n      let pos = dino.getPosition();\r\n      dinosStep1Pos.push(pos);\r\n      unitsStep1Pos.push(unitPos);\r\n    };\r\n    for (let i = 0; i < this.unitstep2.length; i++) {\r\n      let unitPos = this.unitstep2[i].getPosition();\r\n      let dino = this.unitstep2[i].getChildByName(\"Comp\");\r\n      let pos = dino.getPosition();\r\n      dinosStep2Pos.push(pos);\r\n      unitsStep2Pos.push(unitPos);\r\n    };\r\n    Constants.dinosStep1InitPos = dinosStep1Pos;\r\n    Constants.dinosStep2InitPos = dinosStep2Pos;\r\n    Constants.unitsStep1InitPos = unitsStep1Pos;\r\n    Constants.unitsStep2InitPos = unitsStep2Pos;\r\n    // --------------------------------------------\r\n\r\n\r\n  }\r\n\r\n\r\n  public replay(): void {\r\n    this.unitsStep1.forEach((unit, index) => {\r\n      unit.setPosition(Constants.unitsStep1InitPos[index]);\r\n      unit.setScale(new Vec3(8, 8, 8));\r\n      unit.active = true;\r\n    });\r\n    this.dinosStep1.forEach((dino, index) => {\r\n      dino.getComponent(SkeletalAnimation).play(\"Idle_1\");\r\n      dino.setPosition(Constants.dinosStep1InitPos[index]);\r\n      dino.setScale(new Vec3(0.08, 0.08, 0.08));\r\n      dino.active = true;\r\n    });\r\n\r\n\r\n    this.unitstep2.forEach((unit, index) => {\r\n      unit.setPosition(Constants.unitsStep2InitPos[index]);\r\n      unit.setScale(new Vec3(8, 8, 8));\r\n      unit.active = true;\r\n    });\r\n    this.dinosStep2.forEach((dino, index) => {\r\n      dino.getComponent(SkeletalAnimation).play(\"Idle_1\");\r\n      dino.setPosition(Constants.dinosStep2InitPos[index]);\r\n      dino.setScale(new Vec3(0.08, 0.08, 0.08));\r\n      dino.active = true;\r\n    });\r\n\r\n    this.MainCharacter_1.active = false;\r\n    this.MainCharacter_1.getComponent(CharacterControl).level.active = false;\r\n  }\r\n}\r\n\r\n"]}