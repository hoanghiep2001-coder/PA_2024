{"version":3,"sources":["file:///D:/PA_2024/3D/MergeCraft/MergeCraft_Op7/assets/3D/Craft/MergeDino_Op12/assets/Script/Controller/GamePlay.ts"],"names":["_decorator","Component","UITransform","ParticleSystem","tween","GameController","AudioManager","Constants","NodesController","ccclass","property","GamePlay","onLoad","start","playSound","SoundTrack","bgSound","unActiveUI","unActiveDinos","hint_2","active","hint_3","Rex","Rex2","index","Dinos","length","dino","handleBuyDino","countClick","Money","DinoPrice","Label_Money","string","Label_Price","isDoneAddDino","hint_1","showDino","Dino_ScreamSound","showMergeStep","Btn_AddDino","node","parent","checkMergeDino","isDoneMerge1","handleStep2","handleStep1","dinoPoints","bdx","getComponent","getBoundingBox","pointBdx","point","dinoLine1","DinoLines","dinoLine2","intersects","dinoChoosen","Dino_ChooseSound","setDoneMerge","dinoPoints2","DinoLines2","isMerged","unActiveDinoLines","mergeDino","Dino_FightSound","isMergeFlag","firstDino","secondDino","setMergeAnim","dino2Pos","getPosition","to","position","call","Dino_MergeSound","activeRex","setPosition","getChildByName","play","isDonePA","FX_Merge","update","dt","isMergeStep"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;AAAYC,MAAAA,S,OAAAA,S;AAAiBC,MAAAA,W,OAAAA,W;AAAaC,MAAAA,c,OAAAA,c;AAAgBC,MAAAA,K,OAAAA,K;;AAC1DC,MAAAA,c,iBAAAA,c;;AACAC,MAAAA,Y,iBAAAA,Y;;AACAC,MAAAA,S,iBAAAA,S;;AACAC,MAAAA,e,iBAAAA,e;;;;;;;OACH;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBV,U;;0BAEjBW,Q,WADZF,OAAO,CAAC,UAAD,C,UAIHC,QAAQ;AAAA;AAAA,6C,UAERA,QAAQ;AAAA;AAAA,2C,UAERA,QAAQ;AAAA;AAAA,uC,oCARb,MACaC,QADb,SAC8BV,SAD9B,CACwC;AAAA;AAAA;;AAAA;;AAAA;;AAAA;;AAAA,+CAYb,KAZa;;AAAA,+CAab,KAba;;AAAA,yCActB,IAdsB;;AAAA,yCAetB,IAfsB;AAAA;;AAiB1BW,QAAAA,MAAM,GAAS,CAExB;;AAGSC,QAAAA,KAAK,GAAS;AACpB,eAAKP,YAAL,CAAkBQ,SAAlB,CAA4B;AAAA;AAAA,sCAAUC,UAAV,CAAqBC,OAAjD;AACA,eAAKC,UAAL;AACA,eAAKC,aAAL;AACH;;AAGOD,QAAAA,UAAU,GAAS;AACvB,eAAKT,eAAL,CAAqBW,MAArB,CAA4BC,MAA5B,GAAqC,KAArC;AACA,eAAKZ,eAAL,CAAqBa,MAArB,CAA4BD,MAA5B,GAAqC,KAArC;AACH;;AAGOF,QAAAA,aAAa,GAAS;AAC1B,eAAKV,eAAL,CAAqBc,GAArB,CAAyBF,MAAzB,GAAkC,KAAlC;AACA,eAAKZ,eAAL,CAAqBe,IAArB,CAA0BH,MAA1B,GAAmC,KAAnC;;AACA,eAAK,IAAII,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAG,KAAKhB,eAAL,CAAqBiB,KAArB,CAA2BC,MAAvD,EAA+DF,KAAK,EAApE,EAAwE;AACpE,kBAAMG,IAAI,GAAG,KAAKnB,eAAL,CAAqBiB,KAArB,CAA2BD,KAA3B,CAAb;AACAG,YAAAA,IAAI,CAACP,MAAL,GAAc,KAAd;AACH;AACJ;;AAGMQ,QAAAA,aAAa,GAAS;AACzB;AAAA;AAAA,sCAAUC,UAAV,IAAwB,CAAxB;AACA;AAAA;AAAA,sCAAUC,KAAV,GAAkB;AAAA;AAAA,sCAAUA,KAAV,GAAkB;AAAA;AAAA,sCAAUC,SAA9C;AACA,eAAKvB,eAAL,CAAqBwB,WAArB,CAAiCC,MAAjC,GAA2C,GAAE;AAAA;AAAA,sCAAUH,KAAM,EAA7D;AACA;AAAA;AAAA,sCAAUC,SAAV,IAAuB,GAAvB;AACA,eAAKvB,eAAL,CAAqB0B,WAArB,CAAiCD,MAAjC,GAA2C,GAAE;AAAA;AAAA,sCAAUF,SAAU,EAAjE;;AACA,cAAI;AAAA;AAAA,sCAAUF,UAAV,IAAwB,CAA5B,EAA+B;AAC3B;AAAA;AAAA,wCAAUM,aAAV,GAA0B,IAA1B;AACA,iBAAK3B,eAAL,CAAqB4B,MAArB,CAA4BhB,MAA5B,GAAqC,KAArC;AACA,iBAAKZ,eAAL,CAAqBW,MAArB,CAA4BC,MAA5B,GAAqC,IAArC;AACH;AACJ;;AAGMiB,QAAAA,QAAQ,GAAS;AACpB,eAAK/B,YAAL,CAAkBQ,SAAlB,CAA4B;AAAA;AAAA,sCAAUC,UAAV,CAAqBuB,gBAAjD;AACA,eAAK9B,eAAL,CAAqBiB,KAArB,CAA2B;AAAA;AAAA,sCAAUI,UAArC,EAAiDT,MAAjD,GAA0D,IAA1D;AACH;;AAGOmB,QAAAA,aAAa,GAAS;AAC1B,eAAK/B,eAAL,CAAqBgC,WAArB,CAAiCpB,MAAjC,GAA0C,KAA1C;AACA,eAAKZ,eAAL,CAAqBwB,WAArB,CAAiCS,IAAjC,CAAsCC,MAAtC,CAA6CtB,MAA7C,GAAsD,KAAtD;AACH;;AAGMuB,QAAAA,cAAc,GAAS;AAC1B;AAAA;AAAA,sCAAUC,YAAV,GAAyB,KAAKC,WAAL,EAAzB,GAA8C,KAAKC,WAAL,EAA9C;AACH;;AAGOA,QAAAA,WAAW,GAAS;AACxB,eAAK,IAAItB,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAG,KAAKhB,eAAL,CAAqBuC,UAArB,CAAgCrB,MAA5D,EAAoEF,KAAK,EAAzE,EAA6E;AACzE,kBAAMiB,IAAI,GAAG,KAAKjC,eAAL,CAAqBuC,UAArB,CAAgCvB,KAAhC,CAAb;AACA,kBAAMwB,GAAG,GAAGP,IAAI,CAACQ,YAAL,CAAkB/C,WAAlB,EAA+BgD,cAA/B,EAAZ;AACA,kBAAMC,QAAQ,GAAG,KAAK3C,eAAL,CAAqB4C,KAArB,CAA2BH,YAA3B,CAAwC/C,WAAxC,EAAqDgD,cAArD,EAAjB;AACA,kBAAMG,SAAS,GAAG,KAAK7C,eAAL,CAAqB8C,SAArB,CAA+B,CAA/B,CAAlB;AACA,kBAAMC,SAAS,GAAG,KAAK/C,eAAL,CAAqB8C,SAArB,CAA+B,CAA/B,CAAlB;;AACA,gBAAIH,QAAQ,CAACK,UAAT,CAAoBR,GAApB,KAA4B,CAAC,KAAKxC,eAAL,CAAqB8C,SAArB,CAA+B9B,KAA/B,EAAsCJ,MAAvE,EAA+E;AAC3E,kBAAI,CAAC;AAAA;AAAA,0CAAUqC,WAAf,EAA4B;AAAA;AAAA,0CAAUA,WAAV,GAAwBjC,KAAK,GAAG,CAAhC;AAC5B,mBAAKlB,YAAL,CAAkBQ,SAAlB,CAA4B;AAAA;AAAA,0CAAUC,UAAV,CAAqB2C,gBAAjD;AACA,mBAAKlD,eAAL,CAAqB8C,SAArB,CAA+B9B,KAA/B,EAAsCJ,MAAtC,GAA+C,IAA/C;AACAiC,cAAAA,SAAS,CAACjC,MAAV,IAAoBmC,SAAS,CAACnC,MAA9B,IAAwC,KAAKuC,YAAL,EAAxC;AACH;AACJ;AACJ;;AAGOd,QAAAA,WAAW,GAAS;AACxB,eAAK,IAAIrB,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAG,KAAKhB,eAAL,CAAqBoD,WAArB,CAAiClC,MAA7D,EAAqEF,KAAK,EAA1E,EAA8E;AAC1E,kBAAMiB,IAAI,GAAG,KAAKjC,eAAL,CAAqBoD,WAArB,CAAiCpC,KAAjC,CAAb;AACA,kBAAMwB,GAAG,GAAGP,IAAI,CAACQ,YAAL,CAAkB/C,WAAlB,EAA+BgD,cAA/B,EAAZ;AACA,kBAAMC,QAAQ,GAAG,KAAK3C,eAAL,CAAqB4C,KAArB,CAA2BH,YAA3B,CAAwC/C,WAAxC,EAAqDgD,cAArD,EAAjB;AACA,kBAAMG,SAAS,GAAG,KAAK7C,eAAL,CAAqBqD,UAArB,CAAgC,CAAhC,CAAlB;AACA,kBAAMN,SAAS,GAAG,KAAK/C,eAAL,CAAqBqD,UAArB,CAAgC,CAAhC,CAAlB;;AACA,gBAAIV,QAAQ,CAACK,UAAT,CAAoBR,GAApB,KAA4B,CAAC,KAAKxC,eAAL,CAAqBqD,UAArB,CAAgCrC,KAAhC,EAAuCJ,MAAxE,EAAgF;AAC5E,kBAAI,CAAC;AAAA;AAAA,0CAAUqC,WAAf,EAA4B;AAAA;AAAA,0CAAUA,WAAV,GAAwBjC,KAAK,GAAG,CAAhC;AAC5B,mBAAKlB,YAAL,CAAkBQ,SAAlB,CAA4B;AAAA;AAAA,0CAAUC,UAAV,CAAqB2C,gBAAjD;AACA,mBAAKlD,eAAL,CAAqBqD,UAArB,CAAgCrC,KAAhC,EAAuCJ,MAAvC,GAAgD,IAAhD;AACAiC,cAAAA,SAAS,CAACjC,MAAV,IAAoBmC,SAAS,CAACnC,MAA9B,IAAwC,KAAKuC,YAAL,EAAxC;AACH;AACJ;AACJ;;AAGOA,QAAAA,YAAY,GAAS;AACzB;AAAA;AAAA,sCAAUG,QAAV,GAAqB,IAArB;AACA,eAAKtD,eAAL,CAAqBW,MAArB,CAA4BC,MAA5B,GAAqC,KAArC;AACH;;AAGM2C,QAAAA,iBAAiB,GAAS;AAC7B,eAAK,IAAIvC,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAG,KAAKhB,eAAL,CAAqB8C,SAArB,CAA+B5B,MAA3D,EAAmEF,KAAK,EAAxE,EAA4E;AACxE,kBAAMiB,IAAI,GAAG,KAAKjC,eAAL,CAAqB8C,SAArB,CAA+B9B,KAA/B,CAAb;AACAiB,YAAAA,IAAI,CAACrB,MAAL,GAAc,KAAd;AACH;AACJ;;AAGO4C,QAAAA,SAAS,GAAS;AACtB,eAAK1D,YAAL,CAAkBQ,SAAlB,CAA4B;AAAA;AAAA,sCAAUC,UAAV,CAAqBkD,eAAjD;AACA,eAAKC,WAAL,GAAmB,IAAnB;AACA,cAAIC,SAAJ;AACA,cAAIC,UAAJ;;AACA,cAAI;AAAA;AAAA,sCAAUxB,YAAd,EAA4B;AACxBuB,YAAAA,SAAS,GAAG,KAAK3D,eAAL,CAAqBiB,KAArB,CAA2B,CAA3B,CAAZ;AACA2C,YAAAA,UAAU,GAAG,KAAK5D,eAAL,CAAqBiB,KAArB,CAA2B,CAA3B,CAAb;AACH,WAHD,MAGO;AACH0C,YAAAA,SAAS,GAAG,KAAK3D,eAAL,CAAqBiB,KAArB,CAA2B,CAA3B,CAAZ;AACA2C,YAAAA,UAAU,GAAG,KAAK5D,eAAL,CAAqBiB,KAArB,CAA2B,CAA3B,CAAb;AACH;;AAGD,kBAAQ;AAAA;AAAA,sCAAUgC,WAAlB;AACI,iBAAK,CAAL;AACI,mBAAKY,YAAL,CAAkBF,SAAlB,EAA6BC,UAA7B;AACA;;AACJ,iBAAK,CAAL;AACI,mBAAKC,YAAL,CAAkBD,UAAlB,EAA8BD,SAA9B;AACA;;AACJ;AACI;AARR;AAUH;;AAGOE,QAAAA,YAAY,CAACF,SAAD,EAAkBC,UAAlB,EAA0C;AAC1D,cAAIE,QAAQ,GAAGF,UAAU,CAACG,WAAX,EAAf;AACAnE,UAAAA,KAAK,CAAC+D,SAAD,CAAL,CACKK,EADL,CACQ,GADR,EACa;AAAEC,YAAAA,QAAQ,EAAEH;AAAZ,WADb,EAEKI,IAFL,CAEU,MAAM;AACR,iBAAKpE,YAAL,CAAkBQ,SAAlB,CAA4B;AAAA;AAAA,wCAAUC,UAAV,CAAqB4D,eAAjD;AACAR,YAAAA,SAAS,CAAC/C,MAAV,GAAmB,KAAnB;AACAgD,YAAAA,UAAU,CAAChD,MAAX,GAAoB,KAApB;AACA,iBAAKwD,SAAL,CAAeN,QAAf;AACA;AAAA;AAAA,wCAAUR,QAAV,GAAqB,KAArB;AACA,iBAAKI,WAAL,GAAmB,KAAnB;AACA;AAAA;AAAA,wCAAUT,WAAV,GAAwB,IAAxB;AACH,WAVL,EAWK5C,KAXL;AAYH;;AAGO+D,QAAAA,SAAS,CAACN,QAAD,EAAiB;AAC9B,cAAG;AAAA;AAAA,sCAAU1B,YAAb,EAA2B;AACvB,iBAAKpC,eAAL,CAAqBe,IAArB,CAA0BsD,WAA1B,CAAsCP,QAAtC;AACA,iBAAK9D,eAAL,CAAqBe,IAArB,CAA0BH,MAA1B,GAAmC,IAAnC;AACA,iBAAKZ,eAAL,CAAqBe,IAArB,CAA0BuD,cAA1B,CAAyC,UAAzC,EAAqDA,cAArD,CAAoE,MAApE,EAA4E7B,YAA5E,CAAyF9C,cAAzF,EAAyG4E,IAAzG,GAHuB,CAIvB;;AACA;AAAA;AAAA,wCAAUC,QAAV,GAAqB,IAArB;AACH,WAND,MAMO;AACH,iBAAKxE,eAAL,CAAqBc,GAArB,CAAyBuD,WAAzB,CAAqCP,QAArC;AACA,iBAAK9D,eAAL,CAAqBc,GAArB,CAAyBF,MAAzB,GAAkC,IAAlC;AACA,iBAAKZ,eAAL,CAAqByE,QAArB,CAA8BxC,IAA9B,CAAmCqC,cAAnC,CAAkD,MAAlD,EAA0D7B,YAA1D,CAAuE9C,cAAvE,EAAuF4E,IAAvF;AACA,iBAAKvE,eAAL,CAAqBa,MAArB,CAA4BD,MAA5B,GAAqC,IAArC;AACA;AAAA;AAAA,wCAAUwB,YAAV,GAAyB,IAAzB;AACH;AAEJ;;AAGSsC,QAAAA,MAAM,CAACC,EAAD,EAAmB;AAC/B;AAAA;AAAA,sCAAUhD,aAAV,IAA2B,CAAC,KAAKiD,WAAjC,IAAgD,KAAK7C,aAAL,EAAhD;AACA;AAAA;AAAA,sCAAUuB,QAAV,IAAsB,CAAC,KAAKI,WAA5B,IAA2C,KAAKF,SAAL,EAA3C;AACH;;AA7LmC,O;;;;;iBAID,I;;;;;;;iBAEF,I;;;;;;;iBAEJ,I","sourcesContent":["import { _decorator, Component, Node, UITransform, ParticleSystem, tween } from 'cc';\r\nimport { GameController } from './GameController';\r\nimport { AudioManager } from '../Plugin/AudioManager';\r\nimport { Constants } from '../Data/Constant';\r\nimport { NodesController } from './NodesController';\r\nconst { ccclass, property } = _decorator;\r\n@ccclass('GamePlay')\r\nexport class GamePlay extends Component {\r\n\r\n    // Script\r\n    @property(NodesController)\r\n    NodesController: NodesController = null;\r\n    @property(GameController)\r\n    GameController: GameController = null;\r\n    @property(AudioManager)\r\n    AudioManager: AudioManager = null;\r\n\r\n\r\n    // state\r\n    isMergeStep: boolean = false;\r\n    isMergeFlag: boolean = false;\r\n    dino1: Node = null;\r\n    dino2: Node = null;\r\n\r\n    protected onLoad(): void {\r\n\r\n    }\r\n\r\n\r\n    protected start(): void {\r\n        this.AudioManager.playSound(Constants.SoundTrack.bgSound);\r\n        this.unActiveUI();\r\n        this.unActiveDinos();\r\n    }\r\n\r\n\r\n    private unActiveUI(): void {\r\n        this.NodesController.hint_2.active = false;\r\n        this.NodesController.hint_3.active = false;\r\n    }\r\n\r\n\r\n    private unActiveDinos(): void {\r\n        this.NodesController.Rex.active = false;\r\n        this.NodesController.Rex2.active = false;\r\n        for (let index = 1; index < this.NodesController.Dinos.length; index++) {\r\n            const dino = this.NodesController.Dinos[index];\r\n            dino.active = false;\r\n        }\r\n    }\r\n\r\n\r\n    public handleBuyDino(): void {\r\n        Constants.countClick += 1;\r\n        Constants.Money = Constants.Money - Constants.DinoPrice;\r\n        this.NodesController.Label_Money.string = `${Constants.Money}`;\r\n        Constants.DinoPrice += 200;\r\n        this.NodesController.Label_Price.string = `${Constants.DinoPrice}`;\r\n        if (Constants.countClick >= 3) {\r\n            Constants.isDoneAddDino = true;\r\n            this.NodesController.hint_1.active = false;\r\n            this.NodesController.hint_2.active = true;\r\n        }\r\n    }\r\n\r\n\r\n    public showDino(): void {\r\n        this.AudioManager.playSound(Constants.SoundTrack.Dino_ScreamSound);\r\n        this.NodesController.Dinos[Constants.countClick].active = true;\r\n    }\r\n\r\n\r\n    private showMergeStep(): void {\r\n        this.NodesController.Btn_AddDino.active = false;\r\n        this.NodesController.Label_Money.node.parent.active = false;\r\n    }\r\n\r\n\r\n    public checkMergeDino(): void {\r\n        Constants.isDoneMerge1 ? this.handleStep2() : this.handleStep1();\r\n    }\r\n\r\n\r\n    private handleStep1(): void {\r\n        for (let index = 0; index < this.NodesController.dinoPoints.length; index++) {\r\n            const node = this.NodesController.dinoPoints[index];\r\n            const bdx = node.getComponent(UITransform).getBoundingBox();\r\n            const pointBdx = this.NodesController.point.getComponent(UITransform).getBoundingBox();\r\n            const dinoLine1 = this.NodesController.DinoLines[0];\r\n            const dinoLine2 = this.NodesController.DinoLines[1];\r\n            if (pointBdx.intersects(bdx) && !this.NodesController.DinoLines[index].active) {\r\n                if (!Constants.dinoChoosen) Constants.dinoChoosen = index + 1;\r\n                this.AudioManager.playSound(Constants.SoundTrack.Dino_ChooseSound);\r\n                this.NodesController.DinoLines[index].active = true;\r\n                dinoLine1.active && dinoLine2.active && this.setDoneMerge();\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    private handleStep2(): void {\r\n        for (let index = 0; index < this.NodesController.dinoPoints2.length; index++) {\r\n            const node = this.NodesController.dinoPoints2[index];\r\n            const bdx = node.getComponent(UITransform).getBoundingBox();\r\n            const pointBdx = this.NodesController.point.getComponent(UITransform).getBoundingBox();\r\n            const dinoLine1 = this.NodesController.DinoLines2[0];\r\n            const dinoLine2 = this.NodesController.DinoLines2[1];\r\n            if (pointBdx.intersects(bdx) && !this.NodesController.DinoLines2[index].active) {\r\n                if (!Constants.dinoChoosen) Constants.dinoChoosen = index + 1;\r\n                this.AudioManager.playSound(Constants.SoundTrack.Dino_ChooseSound);\r\n                this.NodesController.DinoLines2[index].active = true;\r\n                dinoLine1.active && dinoLine2.active && this.setDoneMerge();\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    private setDoneMerge(): void {\r\n        Constants.isMerged = true;\r\n        this.NodesController.hint_2.active = false;\r\n    }\r\n\r\n\r\n    public unActiveDinoLines(): void {\r\n        for (let index = 0; index < this.NodesController.DinoLines.length; index++) {\r\n            const node = this.NodesController.DinoLines[index];\r\n            node.active = false;\r\n        }\r\n    }\r\n\r\n\r\n    private mergeDino(): void {\r\n        this.AudioManager.playSound(Constants.SoundTrack.Dino_FightSound);\r\n        this.isMergeFlag = true;\r\n        let firstDino;\r\n        let secondDino;\r\n        if (Constants.isDoneMerge1) {\r\n            firstDino = this.NodesController.Dinos[2];\r\n            secondDino = this.NodesController.Dinos[3];\r\n        } else {\r\n            firstDino = this.NodesController.Dinos[0];\r\n            secondDino = this.NodesController.Dinos[1];\r\n        }\r\n\r\n\r\n        switch (Constants.dinoChoosen) {\r\n            case 1:\r\n                this.setMergeAnim(firstDino, secondDino);\r\n                break;\r\n            case 2:\r\n                this.setMergeAnim(secondDino, firstDino);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n\r\n    private setMergeAnim(firstDino: Node, secondDino: Node): void {\r\n        let dino2Pos = secondDino.getPosition();\r\n        tween(firstDino)\r\n            .to(0.3, { position: dino2Pos })\r\n            .call(() => {\r\n                this.AudioManager.playSound(Constants.SoundTrack.Dino_MergeSound);\r\n                firstDino.active = false;\r\n                secondDino.active = false;\r\n                this.activeRex(dino2Pos);\r\n                Constants.isMerged = false;\r\n                this.isMergeFlag = false;\r\n                Constants.dinoChoosen = null;\r\n            })\r\n            .start();\r\n    }\r\n\r\n\r\n    private activeRex(dino2Pos): void {\r\n        if(Constants.isDoneMerge1) {\r\n            this.NodesController.Rex2.setPosition(dino2Pos);\r\n            this.NodesController.Rex2.active = true;\r\n            this.NodesController.Rex2.getChildByName(\"Merge FX\").getChildByName(\"Cube\").getComponent(ParticleSystem).play();\r\n            // this.NodesController.hint_2.active = true;\r\n            Constants.isDonePA = true;\r\n        } else {\r\n            this.NodesController.Rex.setPosition(dino2Pos);\r\n            this.NodesController.Rex.active = true;\r\n            this.NodesController.FX_Merge.node.getChildByName(\"Cube\").getComponent(ParticleSystem).play();\r\n            this.NodesController.hint_3.active = true;\r\n            Constants.isDoneMerge1 = true;\r\n        }\r\n       \r\n    }\r\n\r\n\r\n    protected update(dt: number): void {\r\n        Constants.isDoneAddDino && !this.isMergeStep && this.showMergeStep();\r\n        Constants.isMerged && !this.isMergeFlag && this.mergeDino();\r\n    }\r\n}\r\n"]}