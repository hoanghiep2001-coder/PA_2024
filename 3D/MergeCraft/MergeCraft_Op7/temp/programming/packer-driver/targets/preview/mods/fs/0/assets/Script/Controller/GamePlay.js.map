{"version":3,"sources":["file:///D:/PA_2024/3D/MergeCraft/MergeCraft_Op7/assets/Script/Controller/GamePlay.ts"],"names":["_decorator","Component","UITransform","tween","Vec3","log","SkeletalAnimation","GameController","AudioManager","Constants","NodesController","ccclass","property","GamePlay","onLoad","start","switchVolume","SoundTrack","bgSound","unActiveNuggets","index","Nuggets","length","nugget","active","checkMergeDino","isDoneMerge1","handleStep2","handleStep1","checkMerge","i","Points","currentNode","nodeBdx","getComponent","getBoundingBox","pointBdx","point","intersects","mergeStatus","j","playSound","Dino_ChooseSound","NuggetLines","stateArr","filter","state","arrayOf4","slice","every","console","isMerged","merge","forEach","line","nugget5Pos","getPosition","name","includes","to","position","easing","call","inPosMergeState","showSkibidiNugget","isMergeFlag","SkibidiNugget","Dino_MergeSound","NuggetSound","FX_Lightning","node","scheduleOnce","showPopup","Popup","resetNuggetMerge","nuggetShoot","play","FX_Fires","BoomSound","Boss","Boss_Die","CTA","CTA_btn","repeatForever","scale","showCTA","update","dt"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, UITransform, ParticleSystem, tween, Vec3, log, SkeletalAnimation, Event } from 'cc';\r\nimport { GameController } from './GameController';\r\nimport { AudioManager } from '../Plugin/AudioManager';\r\nimport { Constants } from '../Data/Constant';\r\nimport { NodesController } from './NodesController';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('GamePlay')\r\nexport class GamePlay extends Component {\r\n\r\n    // Script \r\n    @property(NodesController)\r\n    NodesController: NodesController = null;\r\n    @property(GameController)\r\n    GameController: GameController = null;\r\n    @property(AudioManager)\r\n    AudioManager: AudioManager = null;\r\n    \r\n\r\n    // state\r\n    isMergeStep: boolean = false;\r\n    isMergeFlag: boolean = false;\r\n    dino1: Node = null;\r\n    dino2: Node = null;\r\n    inPosMergeState: number = 0;\r\n\r\n\r\n    protected onLoad(): void {\r\n\r\n    }\r\n\r\n\r\n    protected start(): void {\r\n        // this.AudioManager.playSound(Constants.SoundTrack.bgSound);\r\n        this.AudioManager.switchVolume(Constants.SoundTrack.bgSound, 0.65);\r\n        // this.unActiveUI();\r\n        // this.unActiveDinos();\r\n    }\r\n\r\n\r\n    private unActiveNuggets(): void {\r\n        for (let index = 1; index < this.NodesController.Nuggets.length; index++) {\r\n            const nugget = this.NodesController.Nuggets[index];\r\n            nugget.active = false;\r\n        }\r\n    }\r\n\r\n\r\n    public checkMergeDino(): void {\r\n        Constants.isDoneMerge1 ? this.handleStep2() : this.handleStep1();\r\n    }\r\n\r\n\r\n    public checkMerge(): void {\r\n        for (let i = 0; i < this.NodesController.Points.length; i++) {\r\n            let currentNode = this.NodesController.Points[i];\r\n            let nodeBdx = currentNode.getComponent(UITransform).getBoundingBox();\r\n            let pointBdx = this.NodesController.point.getComponent(UITransform).getBoundingBox();\r\n            if (nodeBdx.intersects(pointBdx)) {\r\n                if (Constants.mergeStatus[i]) {\r\n                    break;\r\n                }\r\n\r\n                for (let j = 0; j < Constants.mergeStatus.length; j++) {\r\n                    if (!Constants.mergeStatus[j]) {\r\n                        this.AudioManager.playSound(Constants.SoundTrack.Dino_ChooseSound);\r\n                        Constants.mergeStatus[i] = true;\r\n                        this.NodesController.NuggetLines[i].active = true;\r\n\r\n                        let stateArr = Constants.mergeStatus.filter((state => state === true));\r\n                        const arrayOf4 = stateArr.slice(0, 5);\r\n\r\n                        if (arrayOf4.every(state => state === true) && arrayOf4[4]) {\r\n                            console.log(\"done drag to Merge!!\");\r\n                            Constants.isMerged = true;\r\n                            this.merge();\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    private merge(): void {\r\n        this.NodesController.NuggetLines.forEach(line => line.active = false);\r\n        for (let index = 0; index < this.NodesController.Nuggets.length; index++) {\r\n            const nugget5Pos = this.NodesController.Nuggets[4].getPosition();\r\n            const nugget = this.NodesController.Nuggets[index];\r\n            if(!nugget.name.includes(\"5\")) {\r\n                tween(nugget)\r\n                .to(1, {position: new Vec3(nugget5Pos)}, {easing: 'elasticInOut'})\r\n                .call(() => {\r\n                    nugget.active = false;\r\n                    this.inPosMergeState += 1;\r\n                })\r\n                .start();\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    private showSkibidiNugget(): void {\r\n        console.log(\"Merged\");\r\n        this.isMergeFlag = true;\r\n        let SkibidiNugget = this.NodesController.SkibidiNugget;\r\n        \r\n        SkibidiNugget.active = true;\r\n        this.NodesController.Nuggets[4].active = false;\r\n        \r\n            this.AudioManager.playSound(Constants.SoundTrack.Dino_MergeSound);\r\n            this.AudioManager.playSound(Constants.SoundTrack.NuggetSound)\r\n            this.NodesController.FX_Lightning.node.active = true;\r\n\r\n            this.scheduleOnce(() => {\r\n                this.showPopup();\r\n            }, 1);\r\n    }\r\n\r\n\r\n    private showPopup(): void {\r\n        log(\"show popup\");\r\n        this.NodesController.Popup.active = true;\r\n        // this.NodesController.btnFight.active = true;\r\n        // tween(this.NodesController.btnFight)\r\n        // .repeatForever(\r\n        //     tween(this.NodesController.btnFight)\r\n        //     .to(0.5, {scale: new Vec3(0.35, 0.35, 0.35)})\r\n        //     .to(0.5, {scale: new Vec3(0.4, 0.4, 0.4)}, {easing: 'elasticOut'})\r\n        // )\r\n        // .start();\r\n    }\r\n\r\n\r\n    public resetNuggetMerge(active: boolean): void {\r\n        for (let index = 0; index < this.NodesController.NuggetLines.length; index++) {\r\n            const node = this.NodesController.NuggetLines[index];\r\n            node.active = active;\r\n        }\r\n\r\n        Constants.mergeStatus[0] = false;\r\n        Constants.mergeStatus[1] = false;\r\n        Constants.mergeStatus[2] = false;\r\n        Constants.mergeStatus[3] = false;\r\n        Constants.mergeStatus[4] = false;\r\n    }\r\n\r\n\r\n    public nuggetShoot(): void {\r\n        this.NodesController.Popup.active = false;\r\n        this.NodesController.SkibidiNugget\r\n        .getComponent(SkeletalAnimation).play(\"skibidi_nugget_atk\");\r\n\r\n        this.NodesController.FX_Fires[0].play();\r\n        this.AudioManager.playSound(Constants.SoundTrack.BoomSound);\r\n        this.scheduleOnce(() => {\r\n            this.NodesController.FX_Fires[1].play();\r\n            this.AudioManager.playSound(Constants.SoundTrack.BoomSound);\r\n        }, 0.5)\r\n\r\n        this.scheduleOnce(() => {\r\n            this.NodesController.FX_Fires[2].play();\r\n            this.AudioManager.playSound(Constants.SoundTrack.BoomSound);;\r\n            this.NodesController.Boss.active = false;\r\n            this.NodesController.Boss_Die.active = true;\r\n        }, 1);\r\n\r\n        this.scheduleOnce(() => {\r\n            this.NodesController.CTA.active = true;\r\n\r\n            this.scheduleOnce(() => {\r\n                tween(this.NodesController.CTA_btn)\r\n                .repeatForever(\r\n                    tween(this.NodesController.CTA_btn)\r\n                    .to(0.5, {scale: new Vec3(0.5, 0.5, 0.5)})\r\n                    .to(0.5, {scale: new Vec3(0.45, 0.45, 0.45)}, {easing: 'elasticOut'})\r\n                )\r\n                .start();\r\n            }, 1.5)\r\n        }, 3)\r\n    }\r\n\r\n\r\n    private showCTA(): void {\r\n        this.NodesController.CTA.active = true;\r\n\r\n        this.scheduleOnce(() => {\r\n            tween(this.NodesController.CTA_btn)\r\n            .repeatForever(\r\n                tween(this.NodesController.CTA_btn)\r\n                .to(0.5, {scale: new Vec3(0.5, 0.5, 0.5)})\r\n                .to(0.5, {scale: new Vec3(0.45, 0.45, 0.45)}, {easing: 'elasticOut'})\r\n            )\r\n            .start();\r\n        }, 1.5)\r\n    }\r\n\r\n\r\n    protected update(dt: number): void {\r\n        !this.isMergeFlag && this.inPosMergeState === 4 && this.showSkibidiNugget();\r\n    }\r\n\r\n}\r\n"]}