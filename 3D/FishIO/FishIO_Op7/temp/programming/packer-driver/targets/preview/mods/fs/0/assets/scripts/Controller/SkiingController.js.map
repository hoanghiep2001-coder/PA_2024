{"version":3,"sources":["file:///D:/PA_2024/3D/FishIO/FishIO_Op7/assets/scripts/Controller/SkiingController.ts"],"names":["_decorator","Animation","Component","Node","ParticleSystem2D","UITransform","Vec3","Constants","AudioManager","ccclass","property","SkiingController","start","forceReplay","node","active","isIntersectsFlagPoint","characterBdx","Character","getComponent","getBoundingBox","flagPointBdx","FlagPoint","intersects","setIsCompleteVideo","flagMove","flag","SharkHunt","Character_default","Character_Lose","play","playSound","SoundTrack","Skiing_ScreamSound","scheduleOnce","PS_FunSui","resetSystem","Skiing_EatSound","isCompleteVideo","stopSound","Skiing_BgSound","characterMove","dt","characterOldPos","getPosition","targetPos","x","y","z","newPos","lerp","setPosition","isIntersectsReadyJumpPoint","readyJumpPoint","isCanClickBtnLeft","isClickBtnLeft","isIntersectsFlagJumpPoint","FlagJumpPoint","isOnGround","isJumping","flagCanJump","isCanClick","characterFall","characterJump","update","flagJump","isClickBtnJump"],"mappings":"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","sourcesContent":["\nimport { _decorator, Animation, Component, log, Node, ParticleSystem2D, UITransform, Vec3, VideoPlayer } from 'cc';\nimport { Constants } from '../Data/Constant';\nimport { AudioManager } from './AudioManager';\nconst { ccclass, property } = _decorator;\n\n@ccclass('SkiingController')\nexport class SkiingController extends Component {\n\n    @property(AudioManager)\n    AudioManager: AudioManager = null;\n\n\n    // control\n    @property(Node)\n    Button_Left: Node = null;\n    @property(Node)\n    Button_Up: Node = null;\n\n    // character\n    @property(Node)\n    Character: Node = null;\n    @property(Node)\n    Character_skateBoard: Node = null;\n    @property(Node)\n    Character_default: Node = null;\n    @property(Node)\n    Character_Lose: Node = null;\n    @property(Node)\n    Shark: Node = null;\n\n    // UI\n    @property(Node)\n    SkateBoard: Node = null;\n    @property(Node)\n    SharkHunt: Node = null;\n    @property(Node)\n    FlagPoint: Node = null;\n    @property(Node)\n    FlagJumpPoint: Node = null;\n    @property(Node)\n    readyJumpPoint: Node = null;\n\n    // effect\n    @property(ParticleSystem2D)\n    PS_FunSui: ParticleSystem2D = null;\n\n\n    // state\n    flag: boolean = false;\n    flagMove: boolean = false;\n    flagJump: boolean = false;\n    flagCanJump: boolean = false;\n    jumpTime: number = 0; // Thời gian nhảy\n    jumpHeight: number = 200;\n\n\n    protected start(): void {\n\n        if (Constants.forceReplay) {\n            this.node.active = false;\n            return;\n        } \n        // ironsource\n        // else {\n        //     this.AudioManager.playSound(Constants.SoundTrack.Skiing_BgSound);\n        // };\n    }\n\n\n    private isIntersectsFlagPoint(): boolean {\n        let characterBdx = this.Character.getComponent(UITransform).getBoundingBox();\n        let flagPointBdx = this.FlagPoint.getComponent(UITransform).getBoundingBox();\n        if (characterBdx.intersects(flagPointBdx)) return true;\n        return false;\n    }\n\n\n    private setIsCompleteVideo(): void {\n        this.flagMove = true;\n        this.flag = true;\n        this.SharkHunt.active = false;\n        this.Character_default.active = false;\n        this.Character_Lose.active = true;\n        this.Character.getComponent(Animation).play(\"Skiing_CharAnim\");\n        this.AudioManager.playSound(Constants.SoundTrack.Skiing_ScreamSound);\n        this.scheduleOnce(() => {\n            this.PS_FunSui.resetSystem();\n            this.AudioManager.playSound(Constants.SoundTrack.Skiing_EatSound);\n            // this.SkateBoard.active = false;\n            // this.Character_Lose.active = false;\n        }, 0.3);\n        this.scheduleOnce(() => {\n            Constants.isCompleteVideo = true;\n            this.node.active = false;\n            this.AudioManager.stopSound(Constants.SoundTrack.Skiing_BgSound);\n        }, 1);\n    }\n\n\n    private characterMove(dt: number): void {\n        let characterOldPos = new Vec3();\n        this.Character.getPosition(characterOldPos);\n        let targetPos = new Vec3(characterOldPos.x + (dt * 4000), characterOldPos.y, characterOldPos.z);\n        let newPos = new Vec3();\n        Vec3.lerp(newPos, characterOldPos, targetPos, dt * 5); // Sử dụng lerp để tạo chuyển động mượt mà\n        this.Character.setPosition(newPos);\n    }\n\n\n    private isIntersectsReadyJumpPoint(dt: number): boolean {\n        if(!this.readyJumpPoint.active) return false;\n        let characterBdx = this.Character.getComponent(UITransform).getBoundingBox();\n        let flagPointBdx = this.readyJumpPoint.getComponent(UITransform).getBoundingBox();\n        if (characterBdx.intersects(flagPointBdx)) {\n            this.getComponent(Animation).play(\"Skiing_HintJump\");\n            this.readyJumpPoint.active = false;\n            Constants.isCanClickBtnLeft = false;\n            Constants.isClickBtnLeft = false;\n            return true;\n        }\n    }\n\n\n    private isIntersectsFlagJumpPoint(dt): boolean {\n        let characterBdx = this.Character.getComponent(UITransform).getBoundingBox();\n        let flagPointBdx = this.FlagJumpPoint.getComponent(UITransform).getBoundingBox();\n        if (characterBdx.intersects(flagPointBdx)) {\n            Constants.isOnGround = true; // Nên cập nhật ở đây\n            Constants.isJumping = false;\n            this.flagCanJump = false;\n            return true;\n        } else {\n            Constants.isOnGround = false;\n            Constants.isCanClick = true;\n            Constants.isJumping = true;\n            this.flagCanJump = true;\n            this.characterFall(dt);\n            return false;\n        }\n    }\n\n\n\n    private characterJump(dt: number): void {\n        Constants.isJumping = true;\n        let characterOldPos =  this.Character.getPosition();\n        this.Character.setPosition(characterOldPos.x, characterOldPos.y + (dt * 1400), characterOldPos.z);\n    }\n\n    private characterFall(dt: number): void {\n        let characterOldPos = new Vec3();\n        this.Character.getPosition(characterOldPos);\n        let targetPos = new Vec3(characterOldPos.x, characterOldPos.y - (dt * 8000), characterOldPos.z);\n        let newPos = new Vec3();\n        Vec3.lerp(newPos, characterOldPos, targetPos, dt * 5); // Sử dụng lerp để tạo chuyển động mượt mà\n        this.Character.setPosition(newPos);\n    }\n\n\n    protected update(dt: number): void {\n        !this.flagMove && Constants.isClickBtnLeft && this.characterMove(dt);\n        !this.flagJump && Constants.isClickBtnJump && this.characterJump(dt);\n        !this.flag && this.isIntersectsFlagPoint() && this.setIsCompleteVideo();\n        Constants.isClickBtnLeft && this.isIntersectsFlagJumpPoint(dt);\n        Constants.isClickBtnLeft && this.isIntersectsReadyJumpPoint(dt);\n    }\n}\n\n"]}