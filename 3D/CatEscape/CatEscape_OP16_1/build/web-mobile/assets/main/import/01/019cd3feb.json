[1,["28x68I08tKwqUgRgqSZY3u","306efPA0VAepWohoSyWEXL","adFj3JcEZNabOAtAOTI+9s@6c48a","dekWuT619A/q1w1/RRuOyC","12Y9dMgWdJKJGmTiZyQR9H@a804a","3dQRl9999Ln48uZMmJUNbH","1brw/JvvpFnIvdrxpFCgMZ","327Eau3p1KoI1OILp375fz","d6mOIqaoFHxJ2MWdGyABjA","18jY5QeThPTa7dCH0bZGAc","daTD5QLjlE2IHqyf/C+AaJ","4bZDSSVblK26WEVRzRq3tn@0c841","58JCT6TCdMAZnc4TCE6hoW","15odNLxHZNOL3O0SEMXCEB@de13d","d1NGQ2rJZCcbhjH0/erZWw","d0OnhULchAkK7lB0yviDV5@188ca","5ctFLl/cJMRIhD5/iGUcCB@80c75","5ctFLl/cJMRIhD5/iGUcCB@ff8ed","12Y9dMgWdJKJGmTiZyQR9H@fc873","86GjebjoVLmYXNs9a9pg/O@b3a4e","86GjebjoVLmYXNs9a9pg/O@a936f","86GjebjoVLmYXNs9a9pg/O@abcf7","86GjebjoVLmYXNs9a9pg/O@0eef8","86GjebjoVLmYXNs9a9pg/O@3b708","86GjebjoVLmYXNs9a9pg/O@bb92a","86GjebjoVLmYXNs9a9pg/O@dde5c","86GjebjoVLmYXNs9a9pg/O@13853","86GjebjoVLmYXNs9a9pg/O@94a35","86GjebjoVLmYXNs9a9pg/O@f78f3","86GjebjoVLmYXNs9a9pg/O@ac63e","86GjebjoVLmYXNs9a9pg/O@b13bd","86GjebjoVLmYXNs9a9pg/O@ff196","86GjebjoVLmYXNs9a9pg/O@8921a","86GjebjoVLmYXNs9a9pg/O@39332","86GjebjoVLmYXNs9a9pg/O@c3c84","86GjebjoVLmYXNs9a9pg/O@b0e2d","86GjebjoVLmYXNs9a9pg/O@5e7fd","86GjebjoVLmYXNs9a9pg/O@8b436","86GjebjoVLmYXNs9a9pg/O@7076d","86GjebjoVLmYXNs9a9pg/O@0f747","86GjebjoVLmYXNs9a9pg/O@1142d","86GjebjoVLmYXNs9a9pg/O@c228e","86GjebjoVLmYXNs9a9pg/O@de95e","15odNLxHZNOL3O0SEMXCEB@27a23","214ncfEupO/ZqevD3MdL4v@6c48a","52vf0vl2VCIIG7oj5WyUi9@6c48a","6caxowAWhAT4A/zNPB/TVA","386D/5q0hHBrKpe8g95ETV@ffa6a","a1mEBg+QlDZrAolqiT5z8D","6cSzmCVxZAK6tMfJs2Oyd4@29327","377R8c85FK4Kq8wHfX+ut/","e5z0AfRGFPrpIsh8yybzCP@c2762","4bZDSSVblK26WEVRzRq3tn@6da96","4e0J8yuxRGY7Q9IsdtqBVE","30MEMp/qFOKaiMB7fkbBaw","4fpjdKWEtMxJ/UDDkkfnP7@5369c","4fpjdKWEtMxJ/UDDkkfnP7@e9151","4fpjdKWEtMxJ/UDDkkfnP7@ac9ae","204urOeBBFb6okeRgZ/Mqp@52d44","78XW5GxOhAd6p2lnTVeP4d@f9941","2eEaZj+GpA3445jGNIbTJG@f9941","5eqcFo77ZHoqnCyByekAus","2aXH9TKYJA2rjYSsF90buD@f9941","7dj5uJT9FMn6OrOOx83tfK@f9941","dcCTiT2PVBO4UvIzXQfNk9@f9941","4ddd7ZHC5HvIu9o+AIJWFx","78QsGkwjtJmbbd8ilB3p7E","e5GneNjXJEN5iEcHbX1+sp@9d1b8","0dBqCemspBv7WFvZ71kUyc@527d6","15odNLxHZNOL3O0SEMXCEB@d0e86","15odNLxHZNOL3O0SEMXCEB@30732","b2MxkzZKxHeq7NsiMjm/Lr@6c48a","3fqRnCheBLuYh8+9JsK5Ci","41AtY+9wlBh5iT+l3zm8Ft","15odNLxHZNOL3O0SEMXCEB@02de4","15odNLxHZNOL3O0SEMXCEB@f1394","15odNLxHZNOL3O0SEMXCEB@f3fa9","15odNLxHZNOL3O0SEMXCEB@75ee4","15odNLxHZNOL3O0SEMXCEB@afa82","15odNLxHZNOL3O0SEMXCEB@a72ab","c6q4qImG9J8qs7j3XMkTZj@6c48a","6d2oscZpdLZbAdfTnJcCOn","12Y9dMgWdJKJGmTiZyQR9H@2e76e","a4f1KGfAZNxJ7dF4dvQejD@9177b","36MImJPctK5pVk4bS1fEWB","2cnB0UpNBL4LoEkPi7fmB4@18cc7","2cnB0UpNBL4LoEkPi7fmB4@96715","a851jW/G9IdKpbyUeIH3i8","cdzWAOlmZAyIeWQtE22GQN","dbhkAO1P1C9aUAmP7m6RoS","06byByTIZOqY5vs86dF7G1@08bc7","42N/vGm0NP3KS6FHmo0EzW","06byByTIZOqY5vs86dF7G1@0f51f","06byByTIZOqY5vs86dF7G1@c1428","c4i/KZ0wFOaYQ6r7JW0KxI@61b85","5dbVvn+olAg4I5LaULAS+p@f9941","5aYelt7SZIzat2vnJTRi7a@f9941","e71uS35VpPpbPKtBCx7x94@f9941","41czDe+hJIArQqaw4XZ+L6@f9941","bdlD1yPolAV6FO+5ND3N7x@f9941","50LQlrSVNMD70mm+01Hc0E@f9941","d0OnhULchAkK7lB0yviDV5@35ec7","983/v+dBZMAJUGpWhi6J2q","4fh9GMHe5O+LZxoX2AN5Yp@6a562","d0MqyYBeFAkIi762QNy1/B@b47c0","6fAc9/gb9Kfr1dCvwZaWSA@b47c0","08CNDfqHdHH5fS72QJAIIb","f0uSF7Rv9MiZ12Eh2FR58Z","1f6yUxR0BADJeOdFSL/fW6","b74CgMjsZAXZw09YGFU9Xt","a8Qca+HRJD9oTrrFFJbLq7","6dSU56YQFEk76qms+2+GrU","11J76iKIJI4rl2cdSiENoe","00pj48/lFKA4Kmttu3DnSi","f81y4yLaFHCocibYs7JUiD","15odNLxHZNOL3O0SEMXCEB@d20e9","15odNLxHZNOL3O0SEMXCEB@e873a","2aXH9TKYJA2rjYSsF90buD@6c48a","2eEaZj+GpA3445jGNIbTJG@6c48a","4cvCa1mgxPlLhFCZMoZz6x@6c48a","82YlGVG2lAU43r3KX6/SUr","41czDe+hJIArQqaw4XZ+L6@6c48a","96ISdYN/pKSK1CQW/sEPvF@6c48a","50LQlrSVNMD70mm+01Hc0E@6c48a","acRkRdhndJooQl+r58DQxS@6c48a","5aYelt7SZIzat2vnJTRi7a@6c48a","5dbVvn+olAg4I5LaULAS+p@6c48a","65K0Btu8BBKa488G4VTYhg@6c48a","78XW5GxOhAd6p2lnTVeP4d@6c48a","7dj5uJT9FMn6OrOOx83tfK@6c48a","8fzCJGh7xEKrfC7z4lTGoe@6c48a","b7wS4ssk9NqbyI19bmAGNP@6c48a","edGoT/hLNPK7dChjeBJYcx@6c48a","bdlD1yPolAV6FO+5ND3N7x@6c48a","d0OnhULchAkK7lB0yviDV5@36c77","d0OnhULchAkK7lB0yviDV5@e97a2","d0OnhULchAkK7lB0yviDV5@30732","d0OnhULchAkK7lB0yviDV5@5e001","d0OnhULchAkK7lB0yviDV5@f1394","d0OnhULchAkK7lB0yviDV5@189a7","d0OnhULchAkK7lB0yviDV5@75ee4","d0OnhULchAkK7lB0yviDV5@06592","d0OnhULchAkK7lB0yviDV5@a72ab","d0OnhULchAkK7lB0yviDV5@7f7e1","d0OnhULchAkK7lB0yviDV5@2224c","62BflQnDlPi4iyJvQocT+3@6c48a","dcCTiT2PVBO4UvIzXQfNk9@6c48a","deaoOX0RFK54zvVtz/nhBo@6c48a","15odNLxHZNOL3O0SEMXCEB@efaa6","65K0Btu8BBKa488G4VTYhg@f9941","deaoOX0RFK54zvVtz/nhBo@f9941","e71uS35VpPpbPKtBCx7x94@6c48a","1er33eqKZM9oktPYT3PYXm@3a5c0"],["node","_mesh","_parent","targetInfo","_particleSystem","_mainTexture","_spriteFrame","value","_effectAsset","mainTexture","_clip","_skeleton","_textureSource","_defaultClip","target","source","root","asset","data","_cameraComponent","vision","scene","clockSound","eatSound","loseSound","winSound","electric2Sound","electricSound","catAngrySound","bgSound","GameController","JoyStickComponent","_normalSprite","_envmapHDR","_envmapLDR","AudioManager","joyStick","Door1","GamePlay","fakeCat","Game","CTA_Download","CTA_tryBtn","HideMask","camera","title","text","navigate","icon"],["cc.ImageAsset",["cc.Node",["_name","_layer","_active","_objFlags","__editorExtras__","_id","_parent","_lpos","_components","_children","_lscale","_lrot","_euler","_prefab"],-3,1,5,9,2,5,5,5,4],"cc.Texture2D","cc.SpriteFrame",["cc.Node",["_name","_id","_parent","_components","_lrot","_euler","_children","_prefab","_lpos"],1,1,2,5,5,12,4,5],["cc.CurveRange",["mode","constantMin","constantMax","constant","multiplier","spline"],-2,4],["cc.RealKeyframeValue",["interpolationMode","rightTangent","leftTangent","rightTangentWeight","leftTangentWeight","value","tangentWeightMode"],-4],["cc.RigidBody",["_group","_mass","_enabled","_type","node","_angularFactor","_linearFactor"],-1,1,5,5],["cc.MeshRenderer",["_shadowCastingMode","_name","node","_materials","lightmapSettings","_mesh"],1,1,3,4,6],["cc.Node",["_name","_layer","_parent","_children","_lpos","_lrot","_euler","_prefab","_components"],1,1,9,5,5,5,4,12],["cc.ParticleSystem",["duration","loop","playOnAwake","_simulationSpace","node","_materials","startColor","startSizeX","startSizeY","startSizeZ","startSpeed","startRotationX","startRotationY","startRotationZ","startDelay","startLifetime","gravityModifier","rateOverTime","rateOverDistance","bursts","_colorOverLifetimeModule","_shapeModule","_sizeOvertimeModule","_velocityOvertimeModule","_forceOvertimeModule","_limitVelocityOvertimeModule","_rotationOvertimeModule","_textureAnimationModule","_trailModule","renderer","__prefab"],-1,1,3,4,4,4,4,4,4,4,4,4,4,4,4,4,9,4,4,4,4,4,4,4,4,4,4,4],["cc.ColorKey",["time","color"],2,5],["cc.ShapeModule",["_shapeType","_enable","radius","emitFrom","radiusThickness","arcSpeed"],-2,4],["cc.TextureAnimationModule",["_numTilesX","_numTilesY","_enable","cycleCount","frameOverTime","startFrame"],-1,4,4],["cc.PrefabInstance",["fileId","prefabRootNode","propertyOverrides","mountedChildren","mountedComponents"],1,9,9,9],["cc.BoxCollider",["node","_center","_size"],3,1,5,5],["cc.Sprite",["_sizeMode","node","_spriteFrame","_color"],2,1,6,5],["cc.Material",["_states","_defines","_name","_techIdx","_props"],-1,12],["cc.Node",["_name","_id","_children","_components","_lrot","_euler","_prefab","_parent","_lpos","_lscale"],1,2,2,5,5,4,1,5,5],["cc.SkeletalAnimation",["node","_clips","_defaultClip","__prefab","_sockets"],3,1,3,6,4,9],["cc.ModelLightmapSettings",["_castShadow","_receiveShadow"],1],["cc.GradientRange",["_mode","color","gradient"],2,5,4],["cc.ParticleSystemRenderer",["_renderMode","_velocityScale","_mainTexture"],1,6],["cc.UITransform",["node","_contentSize","_anchorPoint"],3,1,5,5],"cc.TextureCube",["cc.Prefab",["_name"],2],["cc.PrefabInfo",["fileId","root","asset","targetOverrides","nestedPrefabInstanceRoots"],2,1,1,9,2],["cc.SkinnedMeshRenderer",["_shadowCastingMode","node","_materials","lightmapSettings","_skinningRoot","_mesh","_skeleton","__prefab"],2,1,3,4,1,6,6,4],["cc.Gradient",["colorKeys","alphaKeys"],3,9,9],["cc.SizeOvertimeModule",["_enable","size","x","y","z"],2,4,4,4,4],["cc.LimitVelocityOvertimeModule",["_enable","dampen","limitX","limitY","limitZ","limit"],1,4,4,4,4],["cc.AlphaKey",["alpha","time"],1],["d3eadinT6dHdY+UphBQAWhj",["node","vision","AudioManager","Game","fakeCat"],3,1,1,1,1,1],["cc.Animation",["playOnLoad","node","_clips","_defaultClip"],2,1,3,6],["cc.Camera",["_priority","_visibility","_name","_projection","_orthoHeight","_far","_clearFlags","node","_color"],-4,1,5],["ab7fdcqdMJBlbVEI/I8YoiE",["node","AudioManager","Cat","canvas2D","joyStick","CTA","icon","navigate","text","title","camera","HideMask","CTA_tryBtn","CTA_Download"],3,1,1,1,1,1,1,1,1,1,1,1,1,1,1],["50226TeMLNKEqzuYMFQBSOm",["AudioManager","GamePlay","Door1","joyStick","node"],3,1,1,1,1,1],["cc.AudioSource",["_playOnAwake","_loop","node"],1,1],["RenderQueueDesc",["stages","isTransparent","sortMode"],0],["cc.AudioClip",["_name","_native","_duration"],0],["cc.Mesh",["_native","_hash","_struct"],1,11],["cc.Skeleton",["_name","_hash","_joints","_bindposes"],0,12],["cc.Node",["_name","_children","_components","_lpos","_lrot","_lscale","_euler"],2,2,12,5,5,5,5],["cc.CompPrefabInfo",["fileId"],2],["cc.PrefabInfo",["fileId","root","instance","asset"],2,1,4,6],["cc.EffectAsset",["_name","shaders","techniques"],0],["cc.Burst",["count"],3,4],["cc.ColorOvertimeModule",["_enable","color"],2,4],["cc.RealCurve",["_times","_values"],2,9],["cc.VelocityOvertimeModule",["x","y","z","speedModifier"],3,4,4,4,4],["cc.ForceOvertimeModule",["x","y","z"],3,4,4,4],["cc.RotationOvertimeModule",["x","y","z"],3,4,4,4],["cc.TrailModule",["lifeTime","widthRatio","colorOverTrail","colorOvertime","_particleSystem"],3,4,4,4,4,1],["cc.SceneAsset",["_name"],2],["cc.TargetInfo",["localID"],2],["cc.Canvas",["node","_cameraComponent"],3,1,1],["cc.Widget",["_alignFlags","_top","_bottom","node"],0,1],["cc.MountedChildrenInfo",["targetInfo","nodes"],3,4,2],["cc.MountedComponentsInfo",["targetInfo","components"],3,4,9],["CCPropertyOverrideInfo",["value","propertyPath","targetInfo"],1,4],["CCPropertyOverrideInfo",["propertyPath","targetInfo","value"],2,4,8],["CCPropertyOverrideInfo",["propertyPath","targetInfo","value"],2,1,8],["CCPropertyOverrideInfo",["value","propertyPath","targetInfo"],1,1],["CCPropertyOverrideInfo",["propertyPath","targetInfo","value"],2,1,6],["CCPropertyOverrideInfo",["propertyPath","targetInfo","value"],2,1,4],["CCPropertyOverrideInfo",["propertyPath","targetInfo","value"],2,1,1],["CCPropertyOverrideInfo",["propertyPath","targetInfo","value"],2,4,6],["cc.SkeletalAnimation.Socket",["path"],2],["cc.Scene",["_name","_children","_prefab","_globals"],2,2,4,4],["cc.TargetOverrideInfo",["propertyPath","source","sourceInfo","target","targetInfo"],2,1,4,1,4],["cc.SceneGlobals",["ambient","shadows","_skybox","fog","octree"],3,4,4,4,4,4],["cc.AmbientInfo",["_skyIllumLDR","_skyColorHDR","_groundAlbedoHDR","_skyColorLDR","_groundAlbedoLDR"],2,5,5,5,5],["cc.ShadowsInfo",["_type","_enabled","_pcf","_bias","_normalBias","_near","_shadowDistance","_invisibleOcclusionRange","_orthoSize","_saturation","_shadowColor","_size"],-7,5,5],["cc.SkyboxInfo",["_enabled","_envmapHDR","_envmapLDR"],2,6,6],["cc.FogInfo",[],3],["cc.OctreeInfo",[],3],["d948b2gMqdAD6CRzTBJFAiN",["node"],3,1],["cc.UIOpacity",["_opacity","node"],2,1],["cc.Button",["_transition","_zoomScale","node","_normalSprite"],1,1,6],["cc.PlaneCollider",["node"],3,1],["c3658qOQadEYZt80EqPpq5n",["node","AudioManager","Game","controlCubeBox","stick","fakeBg"],3,1,1,1,1,1,1],["cc.DirectionalLight",["_illuminanceHDR","_illuminanceLDR","node","_staticSettings"],1,1,4],["cc.StaticLightSettings",[],3],["cf8e1aetmhO9Ixn3ulRoUSJ",["AudioManager"],3,1],["a31f86fp3JJCbWTGM9ai5co",["node","AudioManager","CatController","wallLaser_1","wallLaser_2","Laser","LaserBtn_Red","LaserBtn_Blue","wallLaserBtn_Red","wallLaserBtn_Blue","Fx_Lightning"],3,1,1,1,1,1,1,1,1,1,1,2],["a31f86fp3JJCbWTGM9ai5co",["node","AudioManager","CatController","wallLaser_1","wallLaser_2","Laser","LaserBtn_Red","LaserBtn_Blue","wallLaserBtn_Red","wallLaserBtn_Blue","Fx_Lightning"],3,1,1,4,1,1,1,1,1,1,1,2],["9d69fA7YXNFdJ3sO7cec90s",["node","Cubes"],3,1,2],["2fa136ZOf9Fl5lXghH8qCrM",["node","Gradient","Game"],3,1,1,1],["ForwardPipeline",["_flows"],3,9],["ShadowFlow",["_name","_stages"],2,9],["ShadowStage",["_name"],2],["ForwardFlow",["_name","_priority","_stages"],1,9],["ForwardStage",["_name","renderQueues"],2,9]],[[5,1],[20,1],[5,3,2],[8,0,2,3,4,5,2],[1,0,6,8,7,2],[54,0,2],[15,0,2,1],[26,0,1,2,2],[7,0,4,2],[21,1],[1,0,6,9,13,7,11,12,2],[59,0,1,2,3],[62,0,1,2,3],[40,0,1,2,3],[5,0,1,2,4],[1,0,6,9,7,11,12,2],[11,0,1,2],[5,0,5,2],[48,0,1,2],[21,0,2,2],[46,0,1],[47,0,1,2],[49,0,1,2,3,1],[50,0,1,2,1],[51,0,1,2,1],[52,0,1,2,3,4,1],[15,0,1,2,1],[28,0,1],[29,1,2,3,4,1],[6,1,3,2,4,5],[6,5,1,3,2,4,6],[23,0,1,1],[7,0,3,4,3],[8,1,0,2,3,4,5,3],[1,0,1,6,8,7,10,3],[1,0,9,2],[1,0,6,8,2],[30,2,3,4,5,1],[22,2,1],[1,0,6,13,7,2],[11,1],[1,0,6,8,7,11,10,12,2],[4,0,2,3,4,5,2],[10,0,1,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,3],[12,0,5,2],[13,2,0,1,3,4,5,5],[9,0,2,3,7,4,5,6,2],[15,0,1],[60,0,1,2,2],[4,0,2,3,2],[69,0,1,2,3,4,2],[1,0,6,9,7,11,10,12,2],[17,0,1,4,3],[1,0,6,9,2],[1,0,6,7,2],[43,0,2],[7,0,1,4,6,5,3],[61,0,1,2,2],[16,1,2,1],[1,0,8,7,2],[9,0,2,3,4,5,6,2],[63,0,1,2,2],[37,0,2,2],[1,0,6,9,13,7,2],[11,1,1],[30,0,1,2,3,4,5,3],[1,0,6,2],[1,0,6,9,7,10,2],[18,0,7,2,3,8,4,9,5,2],[10,0,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,3],[12,1,0,2,4,5,5],[13,0,1,3,4,5,4],[22,0,2,2],[65,0,1,2,2],[41,0,1,2,3,4],[1,0,6,8,13,2],[27,1,7,2,3,4,5,6,1],[5,0,2,3],[6,0,5,3],[16,1,3,2,1],[39,0,1,2,4],[17,3,0,1,4,4],[9,0,2,3,2],[64,0,1,2,2],[8,2,3,4,5,1],[16,0,1,3,2,2],[1,0,6,8,7,10,2],[1,0,6,9,7,2],[1,0,5,6,8,3],[66,0,1,2,2],[33,0,1,2,3,2],[8,1,2,3,4,5,2],[1,0,1,6,8,3],[44,0,1,2,3,2],[27,0,1,2,3,4,5,6,2],[20,0,2],[23,0,1],[1,0,9,13,7,11,12,2],[1,3,4,13,3],[1,0,1,6,9,8,3],[1,0,6,9,8,7,10,2],[1,0,6,8,7,11,12,2],[1,0,2,6,8,3],[18,0,1,2,3,3],[11,0,2],[31,0,1,3],[67,0,2],[77,0,1,2],[37,1,0,2,3],[17,2,0,1,4,4],[1,0,1,6,8,7,3],[1,0,1,6,8,7,11,10,12,3],[23,0,1,2,1],[33,1,2,3,1],[16,0,1,2,2],[25,1],[1,0,9,8,13,2],[1,0,6,9,13,2],[1,0,1,9,8,7,3],[1,0,9,10,2],[1,0,6,9,8,7,11,10,12,2],[1,0,9,7,11,12,2],[1,0,6,8,10,2],[1,0,1,6,8,10,3],[1,0,2,6,9,7,11,10,12,3],[4,0,6,7,8,4,5,2],[4,0,6,2],[4,0,6,8,4,5,2],[4,0,2,3,8,2],[4,0,1,2,3,3],[9,0,1,2,8,4,3],[19,0,3,1],[26,0,3,4,2],[20,1,2],[45,0,1,2,4],[10,0,1,2,4,30,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,4],[28,0,1,1],[12,3,5,2],[29,0,1,2,3,4,2],[6,0,1,2,4],[13,4,5,1],[31,0,2],[53,0,2],[55,0,1,1],[56,0,1,2,3,4],[14,0,1,2,3],[57,0,1,1],[58,0,1,1],[15,0,1,1],[7,1,4,5,2],[7,2,0,1,4,5,4],[68,0,1,2,3,2],[70,0,1,2,3,4,1],[71,0,1,2,3,4,2],[72,0,1,2,3,4,5,6,7,8,9,10,11,11],[73,0,1,2,2],[74,1],[75,1],[8,2,3,4,1],[76,0,1],[78,0,1,2,3,3],[34,2,0,1,7,8,4],[34,3,0,4,5,6,1,7,8,7],[79,0,1],[80,0,1,2,3,4,5,1],[81,0,1,2,3,3],[82,1],[36,4,0,1,2,3,1],[83,0,1],[86,0,1,1],[87,0,1,2,1],[25,0,2],[1,0,2,1,6,9,8,7,10,4],[1,3,4,6,13,3],[1,0,9,8,7,11,10,12,2],[4,0,2,3,7,2],[4,0,2,3,7,4,5,2],[18,0,2,3,6,4,5,2],[42,0,1,2,3,4,5,6,2],[19,0,1,4,2,1],[19,0,1,2,1],[10,0,1,2,3,4,30,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,5],[21,1,1],[5,0,1,3],[5,0,1,2,4,5],[12,1,0,2,5,4],[6,0,6,1,3,2,4,7],[6,0,6,5,3,4,6],[13,2,0,1,4,5,4],[22,0,1,2,3],[14,0,3,4,2,2],[14,0,2,2],[14,0,1,3,4,2,3],[32,0,1,1],[32,0,2,3,4,1,1],[35,0,1,2,3,6,7,8,9,4,10,11,5,12,13,1],[35,0,1,2,3,4,5,1],[36,0,1,2,3,1],[84,0,1,2,3,4,5,6,7,8,9,10,1],[85,0,1,2,3,4,5,6,7,8,9,10,1],[88,0,1],[89,0,1,2],[90,0,2],[91,0,1,2,3],[92,0,1,2],[38,0,2],[38,1,2,0,4]],[[[[80,"clock",".mp3",6.347755],-1],0,0,[],[],[]],[[[13,".bin",2583196069,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":36960,"length":5040,"count":1260,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":36960,"count":770,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.0018714733887463808,-2.382876118645072e-10,-0.0029920602682977915],"maxPosition",8,[1,0.001871500862762332,0.013806384056806564,0.0010497719049453735]]],-1],0,0,[],[],[]],[[[13,".bin",4186905938,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":2016,"length":432,"count":108,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":2016,"count":42,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.0009921710006892681,-0.005100779701024294,-0.018094662576913834],"maxPosition",8,[1,0.0009921706514433026,0.005100778304040432,0.018094660714268684]]],-1],0,0,[],[],[]],[[[13,".bin",2086787151,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":36960,"length":5040,"count":1260,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":36960,"count":770,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.0018714733887463808,-2.382876118645072e-10,-0.0010497719049453735],"maxPosition",8,[1,0.001871500862762332,0.013806384056806564,0.0029920602682977915]]],-1],0,0,[],[],[]],[[[80,"bg",".mp3",16.039184],-1],0,0,[],[],[]],[[[80,"eating_sfx",".mp3",1.469333],-1],0,0,[],[],[]],[[[13,".bin",3219909449,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":6776,"length":2400,"count":600,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":6776,"count":121,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-5,0,-5],"maxPosition",8,[1,5,0,5]]],-1],0,0,[],[],[]],[[[13,".bin",3434579268,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1344,"length":144,"count":36,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1344,"count":24,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.5,-0.5,-0.5],"maxPosition",8,[1,0.5,0.5,0.5]]],-1],0,0,[],[],[]],[[[13,".bin",3383603168,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":224,"length":24,"count":6,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":224,"count":4,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.5,-0.5,0],"maxPosition",8,[1,0.5,0.5,0]]],-1],0,0,[],[],[]],[[[13,".bin",1645748148,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":1728,"length":384,"count":96,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1728,"count":24,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,4]]},"minPosition",8,[1,-0.004349979571998119,0.028474612161517143,-0.018069302663207054],"maxPosition",8,[1,0.004750552587211132,0.0360444001853466,-0.012338144704699516]]],-1],0,0,[],[],[]],[[[109,"cat_material",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true}],[[[{"metallic":0.4000000059604645,"roughness":0.49053239822387695},"albedoScale",8,[1,0.800000011920929,0.800000011920929,0.800000011920929],"mainTexture",6,0]],11]]],0,0,[0,0],[9,8],[115,6]],[[[74,"Skin-0",1221932206,["Root_M/RootPart1_M/RootPart2_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R","Root_M/RootPart1_M/RootPart2_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/Elbow_R/Wrist_R/Fingers1_R","Root_M/Tail0_M/Tail1_M/Tail2_M/Tail3_M/Tail4_M/Tail5_M","Root_M/Tail0_M/Tail1_M/Tail2_M/Tail3_M/Tail4_M","Root_M/Tail0_M/Tail1_M/Tail2_M/Tail3_M","Root_M/RootPart1_M/RootPart2_M/Spine2_M/Chest_M/Neck_M/NeckPart1_M/Head_M","Root_M/RootPart1_M/RootPart2_M/Spine2_M/Chest_M/Neck_M/NeckPart1_M","Root_M/RootPart1_M/RootPart2_M/Spine2_M/Chest_M/Neck_M","Root_M/Tail0_M/Tail1_M","Root_M/Tail0_M/Tail1_M/Tail2_M","Root_M/Tail0_M","Root_M/Hip_R/Knee_R/Ankle_R/Toes1_R","Root_M/Hip_R","Root_M/Hip_R/Knee_R/Ankle_R","Root_M/Hip_R/Knee_R","Root_M/RootPart1_M/RootPart2_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L","Root_M/RootPart1_M/RootPart2_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/Elbow_L/Wrist_L","Root_M/RootPart1_M/RootPart2_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/Elbow_L","Root_M/RootPart1_M/RootPart2_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/Elbow_L/Wrist_L/Fingers1_L","Root_M/RootPart1_M/RootPart2_M/Spine2_M/Chest_M/Scapula_L","Root_M/RootPart1_M","Root_M","Root_M/RootPart1_M/RootPart2_M/Spine2_M/Chest_M/Scapula_R","Root_M/RootPart1_M/RootPart2_M/Spine2_M/Chest_M","Root_M/RootPart1_M/RootPart2_M/Spine2_M","Root_M/RootPart1_M/RootPart2_M","Root_M/Hip_L/Knee_L","Root_M/Hip_L/Knee_L/Ankle_L/Toes1_L","Root_M/Hip_L/Knee_L/Ankle_L","Root_M/Hip_L","Root_M/RootPart1_M/RootPart2_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/Elbow_R/Wrist_R","Root_M/RootPart1_M/RootPart2_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/Elbow_R"],[[[7,7.74850406060068e-9,-1.1039094971465602e-8,-1,0,-0.9290609955787659,-0.36992698907852173,-3.1151723423050726e-9,0,-0.36992698907852173,0.9290609955787659,-1.3122368969220588e-8,0,0.013529320247471333,-0.0027400499675422907,-0.005117619875818491,1],[7,5.830429827824446e-8,4.102600037469983e-9,-1,0,-9.860761315262648e-32,1,4.102600037469983e-9,0,1,-2.3919921909863783e-16,5.830429827824446e-8,0,-0.007224829867482185,-0.001113350037485361,-0.005117619875818491,1],[7,5.260566737774752e-8,8.692819619682268e-8,-1,0,0.9997029900550842,0.024378500878810883,5.470920072525587e-8,0,0.024378500878810883,-0.9997029900550842,-8.561990227917704e-8,0,-0.028023039922118187,-0.01648310013115406,-2.668369969427431e-9,1],[7,6.893350246173213e-8,7.464610263241411e-8,-1,0,0.9843689799308777,-0.17612099647521973,5.4709207830683226e-8,0,-0.17612099647521973,-0.9843689799308777,-8.561986675204025e-8,0,-0.028065010905265808,-0.010543400421738625,-2.4951696264707834e-9,1],[7,7.801131829410224e-8,6.5100692836495e-8,-1,0,0.953311026096344,-0.30199098587036133,5.470920427796955e-8,0,-0.30199098587036133,-0.953311026096344,-8.561988806832233e-8,0,-0.02638522908091545,-0.006823949981480837,-2.294319845219661e-9,1],[7,4.3289900553133975e-9,-1.3967099476985823e-8,1,0,0.9991779923439026,-0.04053809866309166,-4.891631100178984e-9,0,0.04053809866309166,0.9991779923439026,1.378012903785475e-8,0,-0.027377750724554062,-0.009848039597272873,4.0910708848374e-11,1],[7,2.6738802283432506e-9,-1.4375999946025786e-8,1,0,0.987667977809906,-0.1565610021352768,-4.891629767911354e-9,0,0.1565610021352768,0.987667977809906,1.378009795161006e-8,0,-0.02249862067401409,-0.006594500038772821,1.1426301571582087e-10,1],[7,2.6738802283432506e-9,-1.4375999946025786e-8,1,0,0.987667977809906,-0.1565610021352768,-4.891629767911354e-9,0,0.1565610021352768,0.987667977809906,1.378009795161006e-8,0,-0.016659319400787354,-0.006594500038772821,1.432440138726676e-10,1],[7,1.0071133260680654e-7,1.345690225917906e-8,-1,0,0.6453080177307129,-0.7639229893684387,5.470975139587608e-8,0,-0.7639229893684387,-0.6453080177307129,-8.56194901643903e-8,0,-0.019863199442625046,0.007571079768240452,-1.7649225414473335e-9,1],[7,9.499377284782895e-8,3.6056221119906695e-8,-1,0,0.8024290204048157,-0.5967479944229126,5.470925401596105e-8,0,-0.5967479944229126,-0.8024290204048157,-8.56198596466129e-8,0,-0.023963989689946175,0.0021665298845618963,-2.0250299215263112e-9,1],[7,1.0153414109481673e-7,3.832492989630509e-9,-1,0,0.5698469877243042,-0.8217509984970093,5.470955599662375e-8,0,-0.8217509984970093,-0.5698469877243042,-8.561968911635631e-8,0,-0.015836570411920547,0.009423140436410904,-1.4836117889771572e-9,1],[7,2.1572599706587425e-8,2.2469599514352012e-8,-1,0,1.9721522630525295e-31,1,2.2469599514352012e-8,0,1,-4.847276801373966e-16,2.1572599706587425e-8,0,0.006784679833799601,-0.0018823499558493495,-0.005224830005317926,1],[7,-0.2315392792224884,-0.021494265645742416,-0.9725880026817322,0,-0.8208611607551575,0.5408589839935303,0.1834651529788971,0,0.5220896601676941,0.8408390283584595,-0.14287376403808594,0,0.013664758764207363,-0.003299108939245343,-0.007227241061627865,1],[7,-5.533141056446311e-9,-2.040660262991878e-8,-1,0,-0.9556249976158142,0.29458698630332947,-7.239116528445777e-10,0,0.29458698630332947,0.9556249976158142,-2.113103825251983e-8,0,0.00761938001960516,0.005929090082645416,-0.005224830005317926,1],[7,0.03108430653810501,-0.23044800758361816,-0.9725879430770874,0,-0.5063292980194092,-0.842598021030426,0.18346519768238068,0,-0.8617798089981079,0.48674699664115906,-0.1428741067647934,0,0.0029983532149344683,0.007309860084205866,-0.007227241527289152,1],[7,8.308242982479896e-9,4.764870098483698e-8,-1,0,0.9290609955787659,0.36992698907852173,2.534539689236226e-8,0,0.36992698907852173,-0.9290609955787659,-4.119509355859918e-8,0,-0.013529320247471333,0.0027400499675422907,0.005117619875818491,1],[7,4.716016377415144e-8,6.104523464500744e-8,-1,0,0.7000529766082764,-0.7140910029411316,-1.0577238640507858e-8,0,-0.7140910029411316,-0.7000529766082764,-7.641153842996573e-8,0,0.003039909992367029,0.005852799862623215,0.005117619875818491,1],[7,3.492889533163179e-8,3.345740040572309e-8,-1,0,0.9675740003585815,-0.2525869905948639,2.534539689236226e-8,0,-0.2525869905948639,-0.9675740003585815,-4.119511132216758e-8,0,-0.004324129782617092,0.006582930218428373,0.005117619875818491,1],[7,8.368900239474897e-8,-2.883679961485086e-8,-1,0,7.888609052210118e-31,-1,2.883679961485086e-8,0,-1,-2.4133228628784057e-15,-8.368900239474897e-8,0,0.007224829867482185,0.001113350037485361,0.005117619875818491,1],[7,-0.5131128430366516,-3.635094003584527e-8,-0.8583210110664368,0,0.8443281054496765,-0.17983601987361908,-0.5047469735145569,0,-0.15435706079006195,-0.9836969971656799,0.09227609634399414,0,-0.008941820822656155,0.009505600668489933,0.009528660215437412,1],[7,-1.462253162998195e-8,1.9366344465587826e-13,1,0,-0.334526002407074,-0.9423869848251343,-4.8914299277669215e-9,0,0.9423869848251343,-0.334526002407074,1.3780135255103687e-8,0,0.007730870041996241,0.012238300405442715,1.432416962821037e-10,1],[7,-1.462253162998195e-8,1.9366344465587826e-13,1,0,-0.334526002407074,-0.9423869848251343,-4.8914299277669215e-9,0,0.9423869848251343,-0.334526002407074,1.3780135255103687e-8,0,0.009796090424060822,0.012238300405442715,1.432416962821037e-10,1],[7,-0.5131128430366516,-5.3502439811836666e-8,-0.8583210110664368,0,-0.8443281054496765,0.17983601987361908,0.5047469735145569,0,0.15435704588890076,0.9836969971656799,-0.09227611124515533,0,0.00894182175397873,-0.009505600668489933,-0.009528660215437412,1],[7,-1.3905864904018017e-8,-4.5197023901266675e-9,1,0,-0.02671949937939644,-0.9996430277824402,-4.889646021410954e-9,0,0.9996430277824402,-0.02671949937939644,1.3780135255103687e-8,0,-0.005804460030049086,0.012557229958474636,1.4321936692152093e-10,1],[7,-1.4058552544327085e-8,-4.0216971974871285e-9,1,0,-0.06241219863295555,-0.9980499744415283,-4.8912847105953006e-9,0,0.9980499744415283,-0.06241219863295555,1.3780147689601563e-8,0,0.00009530899842502549,0.012756559997797012,1.4323967012508376e-10,1],[7,-1.462253162998195e-8,1.9366344465587826e-13,1,0,-0.334526002407074,-0.9423869848251343,-4.8914299277669215e-9,0,0.9423869848251343,-0.334526002407074,1.3780135255103687e-8,0,0.005665639881044626,0.012238300405442715,1.432416962821037e-10,1],[7,0.03108430653810501,-0.23044800758361816,-0.9725879430770874,0,0.5063292980194092,0.842598021030426,-0.18346519768238068,0,0.8617798089981079,-0.48674699664115906,0.1428741067647934,0,-0.0029983532149344683,-0.007309860084205866,0.007227241527289152,1],[7,1.860029996691992e-8,-6.453130030337206e-9,-1,0,9.266095767849739e-33,-1,6.453130030337206e-9,0,-1,-1.2003015374943032e-16,-1.860029996691992e-8,0,-0.006784679833799601,0.0018823499558493495,0.005224830005317926,1],[7,1.132568794304234e-8,1.483430356330473e-8,-1,0,0.9556249976158142,-0.29458698630332947,6.453113599036442e-9,0,-0.29458698630332947,-0.9556249976158142,-1.751241995862074e-8,0,-0.00761938001960516,-0.005929090082645416,0.005224830005317926,1],[7,-0.2315392792224884,-0.021494265645742416,-0.9725880026817322,0,0.8208611607551575,-0.5408589839935303,-0.1834651529788971,0,-0.5220896601676941,-0.8408390283584595,0.14287376403808594,0,-0.013664758764207363,0.003299108939245343,0.007227241061627865,1],[7,-7.189803419294094e-9,-3.759199529440593e-8,-1,0,-0.7000529766082764,0.7140910029411316,-2.1810858896742502e-8,0,0.7140910029411316,0.7000529766082764,-3.145055771369698e-8,0,-0.003039909992367029,-0.005852799862623215,-0.005117619875818491,1],[7,-3.004192727917854e-10,-1.3483697713922993e-8,-1,0,-0.9675740003585815,0.2525869905948639,-3.115129931785532e-9,0,0.2525869905948639,0.9675740003585815,-1.312236186379323e-8,0,0.004324129782617092,-0.006582930218428373,-0.005117619875818491,1]],8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]]],0,0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[[74,"Skin-2",4127795290,["Root_M","Root_M/Hip_R","Root_M/Hip_R/Knee_R","Root_M/RootPart1_M","Root_M/RootPart1_M/RootPart2_M","Root_M/RootPart1_M/RootPart2_M/Spine2_M","Root_M/RootPart1_M/RootPart2_M/Spine2_M/Chest_M","Root_M/RootPart1_M/RootPart2_M/Spine2_M/Chest_M/Neck_M","Root_M/RootPart1_M/RootPart2_M/Spine2_M/Chest_M/Neck_M/NeckPart1_M","Root_M/RootPart1_M/RootPart2_M/Spine2_M/Chest_M/Neck_M/NeckPart1_M/Head_M","Root_M/RootPart1_M/RootPart2_M/Spine2_M/Chest_M/Scapula_R","Root_M/RootPart1_M/RootPart2_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R","Root_M/RootPart1_M/RootPart2_M/Spine2_M/Chest_M/Scapula_L","Root_M/RootPart1_M/RootPart2_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L","Root_M/Hip_L","Root_M/Hip_L/Knee_L"],[[[7,-1.4622584032508712e-8,8.187521053322554e-16,1,0,-0.3345257341861725,-0.9423866271972656,-4.891630212000564e-9,0,0.9423866271972656,-0.3345257341861725,1.378012814967633e-8,0,0.009796089492738247,0.01223829947412014,1.4324413877275788e-10,1],[7,-0.2270183116197586,0.002247854368761182,-0.9738879203796387,0,-0.7128888368606567,0.6809181571006775,0.16774971783161163,0,0.663515031337738,0.732356071472168,-0.15297842025756836,0,0.012898298911750317,-0.005797330755740404,-0.00706168869510293,1],[7,0.02680450677871704,-0.22544153034687042,-0.9738879203796387,0,-0.5841534733772278,-0.7941188216209412,0.16774971783161163,0,-0.8112004995346069,0.5644035935401917,-0.15297842025756836,0,0.004929590970277786,0.007101454772055149,-0.00706168869510293,1],[7,-1.4622584032508712e-8,8.187521053322554e-16,1,0,-0.3345257341861725,-0.9423866271972656,-4.891630212000564e-9,0,0.9423866271972656,-0.3345257341861725,1.378012814967633e-8,0,0.0077308653853833675,0.01223829947412014,1.4324413877275788e-10,1],[7,-1.4622584032508712e-8,8.187521053322554e-16,1,0,-0.3345257341861725,-0.9423866271972656,-4.891630212000564e-9,0,0.9423866271972656,-0.3345257341861725,1.378012814967633e-8,0,0.005665640812367201,0.01223829947412014,1.4324413877275788e-10,1],[7,-1.4058560537932863e-8,-4.0220435870708116e-9,1,0,-0.06241222470998764,-0.9980504512786865,-4.891628879732934e-9,0,0.9980504512786865,-0.06241222470998764,1.378012814967633e-8,0,0.00009530926763545722,0.012756561860442162,1.4324412489497007e-10,1],[7,-1.3905910201117422e-8,-4.521682139824179e-9,1,0,-0.02671949565410614,-0.9996429681777954,-4.891626659286885e-9,0,0.9996429681777954,-0.02671949565410614,1.378012814967633e-8,0,-0.005804456304758787,0.012557227164506912,1.4324409713939446e-10,1],[7,2.673881782655485e-9,-1.4376032808627315e-8,1,0,0.9876683354377747,-0.15656070411205292,-4.891630212000564e-9,0,0.15656070411205292,0.9876683354377747,1.378012814967633e-8,0,-0.016659321263432503,-0.006594500504434109,1.4324415265054569e-10,1],[7,2.673881782655485e-9,-1.4376032808627315e-8,1,0,0.9876683354377747,-0.15656070411205292,-4.891630212000564e-9,0,0.15656070411205292,0.9876683354377747,1.378012814967633e-8,0,-0.022498616948723793,-0.006594500504434109,1.1426250917656589e-10,1],[7,4.328988278956558e-9,-1.3967098588807403e-8,1,0,0.9991779923439026,-0.040538135915994644,-4.891630212000564e-9,0,0.040538135915994644,0.9991779923439026,1.378012814967633e-8,0,-0.027377745136618614,-0.009848035871982574,4.091108354864481e-11,1],[7,-0.5131125450134277,-5.8000400038338285e-9,-0.8583213686943054,0,-0.8443278670310974,0.1798357367515564,0.5047470927238464,0,0.15435683727264404,0.9836966395378113,-0.09227596968412399,0,0.008941823616623878,-0.009505602531135082,-0.00952865555882454,1],[7,7.749620500874244e-9,-1.1038286729103675e-8,-1,0,-0.9290225505828857,-0.37002313137054443,-3.115150359889185e-9,0,-0.37002313137054443,0.9290225505828857,-1.3122355646544293e-8,0,0.013529598712921143,-0.0027386487927287817,-0.005117618944495916,1],[7,-0.513112485408783,1.267577598440539e-8,-0.8583213686943054,0,0.8443278670310974,-0.1798357218503952,-0.5047470331192017,0,-0.15435685217380524,-0.9836966395378113,0.0922759473323822,0,-0.008941823616623878,0.009505602531135082,0.00952865555882454,1],[7,5.493438148818086e-9,4.893672667094506e-8,-1,0,0.9061654210090637,0.42292341589927673,2.56744510096496e-8,0,0.42292341589927673,-0.9061654210090637,-4.2021468971142895e-8,0,-0.01366488914936781,0.001954752951860428,0.005117618944495916,1],[7,-0.23315705358982086,-0.024370700120925903,-0.9721336364746094,0,0.8380052447319031,-0.5121989846229553,-0.1881471574306488,0,-0.4933406114578247,-0.8585209846496582,0.1398455798625946,0,-0.013748983852565289,0.0028044572100043297,0.007276198826730251,1],[7,0.0325925350189209,-0.23215052485466003,-0.9721336364746094,0,0.4822739362716675,0.855577290058136,-0.1881471574306488,0,0.8754139542579651,-0.46270254254341125,0.1398455798625946,0,-0.00254610413685441,-0.007357908878475428,0.007276198826730251,1]],8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]]],0,0,[],[],[]],[[[74,"Skin-3",4072926815,["Root_M/RootPart1_M","Root_M/RootPart1_M/RootPart2_M","Root_M/RootPart1_M/RootPart2_M/Spine2_M","Root_M/RootPart1_M/RootPart2_M/Spine2_M/Chest_M","Root_M/RootPart1_M/RootPart2_M/Spine2_M/Chest_M/Neck_M","Root_M/RootPart1_M/RootPart2_M/Spine2_M/Chest_M/Neck_M/NeckPart1_M","Root_M/RootPart1_M/RootPart2_M/Spine2_M/Chest_M/Neck_M/NeckPart1_M/Head_M","Root_M/RootPart1_M/RootPart2_M/Spine2_M/Chest_M/Neck_M/NeckPart1_M/Head_M/HeadEnd_M","Root_M/RootPart1_M/RootPart2_M/Spine2_M/Chest_M/Neck_M/NeckPart1_M/Head_M/Jaw_M","Root_M/RootPart1_M/RootPart2_M/Spine2_M/Chest_M/Scapula_R","Root_M/RootPart1_M/RootPart2_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R","Root_M/RootPart1_M/RootPart2_M/Spine2_M/Chest_M/Scapula_L","Root_M/RootPart1_M/RootPart2_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L"],[[[7,-1.4622584032508712e-8,8.187521053322554e-16,1,0,-0.3345257341861725,-0.9423866271972656,-4.891630212000564e-9,0,0.9423866271972656,-0.3345257341861725,1.378012814967633e-8,0,0.0077308653853833675,0.01223829947412014,1.4324413877275788e-10,1],[7,-1.4622584032508712e-8,8.187521053322554e-16,1,0,-0.3345257341861725,-0.9423866271972656,-4.891630212000564e-9,0,0.9423866271972656,-0.3345257341861725,1.378012814967633e-8,0,0.005665640812367201,0.01223829947412014,1.4324413877275788e-10,1],[7,-1.4058560537932863e-8,-4.0220435870708116e-9,1,0,-0.06241222470998764,-0.9980504512786865,-4.891628879732934e-9,0,0.9980504512786865,-0.06241222470998764,1.378012814967633e-8,0,0.00009530926763545722,0.012756561860442162,1.4324412489497007e-10,1],[7,-1.3905910201117422e-8,-4.521682139824179e-9,1,0,-0.02671949565410614,-0.9996429681777954,-4.891626659286885e-9,0,0.9996429681777954,-0.02671949565410614,1.378012814967633e-8,0,-0.005804456304758787,0.012557227164506912,1.4324409713939446e-10,1],[7,2.673881782655485e-9,-1.4376032808627315e-8,1,0,0.9876683354377747,-0.15656070411205292,-4.891630212000564e-9,0,0.15656070411205292,0.9876683354377747,1.378012814967633e-8,0,-0.016659321263432503,-0.006594500504434109,1.4324415265054569e-10,1],[7,2.673881782655485e-9,-1.4376032808627315e-8,1,0,0.9876683354377747,-0.15656070411205292,-4.891630212000564e-9,0,0.15656070411205292,0.9876683354377747,1.378012814967633e-8,0,-0.022498616948723793,-0.006594500504434109,1.1426250917656589e-10,1],[7,4.328988278956558e-9,-1.3967098588807403e-8,1,0,0.9991779923439026,-0.040538135915994644,-4.891630212000564e-9,0,0.040538135915994644,0.9991779923439026,1.378012814967633e-8,0,-0.027377745136618614,-0.009848035871982574,4.091108354864481e-11,1],[7,4.328988278956558e-9,-1.3967098588807403e-8,1,0,0.9991779923439026,-0.040538135915994644,-4.891630212000564e-9,0,0.040538135915994644,0.9991779923439026,1.378012814967633e-8,0,-0.042473021894693375,-0.009848035871982574,4.091106620141005e-11,1],[7,-1.4613624088610777e-8,-5.118122592406849e-10,1,0,-0.30133578181266785,-0.9535180926322937,-4.891630212000564e-9,0,0.9535180926322937,-0.30133578181266785,1.378012814967633e-8,0,-0.005687798839062452,0.022578947246074677,4.0911090487538715e-11,1],[7,-0.5131125450134277,-5.8000400038338285e-9,-0.8583213686943054,0,-0.8443278670310974,0.1798357367515564,0.5047470927238464,0,0.15435683727264404,0.9836966395378113,-0.09227596968412399,0,0.008941823616623878,-0.009505602531135082,-0.00952865555882454,1],[7,7.749620500874244e-9,-1.1038286729103675e-8,-1,0,-0.9290225505828857,-0.37002313137054443,-3.115150359889185e-9,0,-0.37002313137054443,0.9290225505828857,-1.3122355646544293e-8,0,0.013529598712921143,-0.0027386487927287817,-0.005117618944495916,1],[7,-0.513112485408783,1.267577598440539e-8,-0.8583213686943054,0,0.8443278670310974,-0.1798357218503952,-0.5047470331192017,0,-0.15435685217380524,-0.9836966395378113,0.0922759473323822,0,-0.008941823616623878,0.009505602531135082,0.00952865555882454,1],[7,5.493438148818086e-9,4.893672667094506e-8,-1,0,0.9061654210090637,0.42292341589927673,2.56744510096496e-8,0,0.42292341589927673,-0.9061654210090637,-4.2021468971142895e-8,0,-0.01366488914936781,0.001954752951860428,0.005117618944495916,1]],8,8,8,8,8,8,8,8,8,8,8,8,8]]],0,0,[],[],[]],[[[13,".bin",3353110097,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":89352,"length":26160,"count":6540,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":89352,"count":1241,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,6]]},"minPosition",8,[1,-0.0153599688783288,0.012378940358757973,0.0028919153846800327],"maxPosition",8,[1,0.01256532222032547,0.05298808589577675,0.019919035956263542]]],-1],0,0,[],[],[]],[[[13,".bin",105658638,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":86040,"length":10176,"count":5088,"stride":2}},{"primitiveMode":7,"jointMapIndex":1,"vertexBundelIndices":[1],"indexView":{"offset":143376,"length":3936,"count":1968,"stride":2}},{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[2],"indexView":{"offset":162000,"length":1032,"count":516,"stride":2}},{"primitiveMode":7,"jointMapIndex":1,"vertexBundelIndices":[3],"indexView":{"offset":199824,"length":2532,"count":1266,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":86040,"count":1195,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]},{"view":{"offset":96216,"length":47160,"count":655,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]},{"view":{"offset":147312,"length":14688,"count":204,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]},{"view":{"offset":163032,"length":36792,"count":511,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,2,3,4,5,7,8,9,10,12,13,14,15,19,20,21,22,23,24,25,26,27,28,29],[0,1,5,7,8,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31]]},"minPosition",8,[1,-0.01575685665011406,-0.00002662196675373707,-0.017050670459866524],"maxPosition",8,[1,0.015756862238049507,0.04117150232195854,0.024970829486846924]]],-1],0,0,[],[],[]],[[{"base":"2,2,0,0,0,0","mipmaps":["15odNLxHZNOL3O0SEMXCEB@43c71"]}],[2],0,[],[],[]],[[[109,"Skin_Cat",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true}],[[[{},"albedoScale",8,[1,0.800000011920929,0.800000011920929,0.800000011920929],"mainTexture",6,0]],11]]],0,0,[0,0],[9,8],[116,6]],[[{"base":"2,2,0,0,0,0","mipmaps":["f1J0QSL/JC4r7+CvcoIyqE"]}],[2],0,[],[],[]],[[[115],[116,"Deer_Cat",[-3,-4,-5],[[131,-2,[55,"d1yO6pXnFZd4BLQ9ASi20c"]]],[7,"8c/+pGOoBR/rovZ1GQtGDO",-1,0]],[10,"Root_M",1,[-6,-7,-8,-9],[7,"0cdUqY/a1aEbZzMQcuwmTc",1,0],[1,1.0018953194960331e-25,0.01481025293469429,-0.0051376777701079845],[3,0.6968476547856595,-0.12001394093906889,0.6968476547856595,-0.12001394093906889],[1,180,-90,-19.543700609739705]],[97,"Chest_M",[-10,-11,-12],[7,"084mAcVhdSQb8uEUMxJqmS",1,0],[1,0.005447485018521547,-1.554312241092664e-17,-5.346294532827751e-18],[3,-9.193751724705897e-17,7.319178504059276e-18,-0.017864119002931025,0.9998404238938577],[1,-1.0525317154700937e-14,6.507944086134008e-16,-2.0471861423310167]],[117,"Deer_Cat",1,[-13,-14,-15],[7,"7dA3FjSA1VDKO+mhcD8x/R",1,0]],[125,"Head_M",[[[39,"HeadEnd_M",-16,[7,"b7xgS0a3JU86PIn10ksCHP",1,0],[1,0.015095275826752186,-2.2204459996194763e-18,1.1147259642693237e-17]],-17],4,1],[7,"d8Hu2l0+lQc71J1BNPRysu",1,0],[1,0.005839296150952578,-2.2204459996194763e-18,7.335141521958022e-11],[3,-3.2970677530887142e-24,2.9610711926934064e-25,-0.05829603108103105,0.9982993402583213],[1,-3.7776313382545368e-22,1.1929573189923404e-23,-6.684022599098756]],[10,"Tail0_M",2,[-18],[7,"a6krqW1iVV5LKbbAWaCAE9",1,0],[1,-0.003016774309799075,-0.0010064324596896768,4.4113056957284513e-11],[3,-0.13222044449472428,0.9912203357768733,1.899605991128237e-9,-2.5339324590359113e-10],[1,-2.1960685843697459e-7,-179.9999999999998,-15.19584442452546]],[10,"Tail1_M",6,[-19],[7,"990fAxxMJSNakLVK00zdP1",1,0],[1,0.0032178927212953568,-1.1102229998097382e-18,-1.5827465746491744e-16],[3,7.854134306970377e-17,6.62973558865667e-17,-0.04753538670956306,0.9988695545517303],[1,9.393584386234256e-15,8.05274822932461e-15,-5.449207570713341]],[10,"Tail2_M",7,[-20],[7,"45zmC+cupYJoj8Mz4ev829",1,0],[1,0.002976355142891407,-5.551115205843844e-18,1.0832962131501755e-12],[3,-1.3949894977543174e-17,-3.883391342022682e-17,-0.11471089869868772,0.993398917716211],[1,-2.155174162256571e-15,-4.728473690825402e-15,-13.173900830243293]],[10,"Tail3_M",8,[-21],[7,"f46Y5SUFlVqoQFjjBjcmq6",1,0],[1,0.003203141037374735,4.440891999238953e-18,3.920579572797012e-12],[3,-9.969521051823741e-17,-9.806948956650378e-17,-0.1655651210611257,0.9861988596059187],[1,-1.3888595449279292e-14,-1.3726848857505547e-14,-19.060130128725042]],[10,"Tail4_M",9,[-22],[7,"d8SXX11MJTPoidKzvy9nPg",1,0],[1,0.0028079531621187925,0,6.5790389629227786e-12],[3,-8.251598561738025e-17,-1.135794569833411e-16,-0.06482256304208014,0.9978968059477171],[1,-1.0366549825034899e-14,-1.3716080958521048e-14,-7.433330535637716]],[46,"Tail5_M",10,[[39,"Tail6_M",-23,[7,"beRDcdI2dfa6V1rBMTRP2R",1,0],[1,0.0030258502811193466,8.881783998477905e-18,9.688655260020607e-12]]],[7,"b2vheVhQ5bfpdFi4tfenpu",1,0],[1,0.002689178567379713,4.440891999238953e-18,7.303118179646795e-12],[3,9.537444787153138e-17,-2.118270460406824e-16,-0.10054238934768282,0.9949327755905215],[1,8.60721837145069e-15,-2.3527419865239222e-14,-11.54080902638327]],[10,"Hip_R",2,[-24],[7,"3ePBojOLpXdLejq+mFramg",1,0],[1,-0.00007880734483478591,0.0005406050477176905,-0.003936111461371183],[3,0.9649268585378106,0.23634742681996387,-0.11070779936605146,0.02828134840243218],[1,173.12485222053104,14.725639548400835,26.73431895575666]],[10,"Knee_R",12,[-25],[7,"b4Qu4QqM1XBrS2Gn2dGMnN",1,0],[1,0.006485617719590664,9.992007618673103e-18,9.992007618673103e-18],[3,1.0421712215713451e-17,9.1641098275595e-18,-0.7509635080199943,0.6603437056732683],[1,180,180,-82.65218201681442]],[10,"Ankle_R",13,[-26],[7,"75zHuDDKtV1J8NtCXIlKLS",1,0],[1,0.006850753910839558,-9.992007618673103e-18,-1.4432898790731443e-17],[3,-0.107779091379776,0.03794360473263759,0.4382270207142593,0.8915722228945604],[1,-20.825588126741046,14.81324250428513,50.646009467453176]],[46,"Toes1_R",14,[[39,"Toes2_R",-27,[7,"3aGeY6w5lTUr/nyuqfwOtT",1,0],[1,0.0028587731067091227,-0.0018769684247672558,-2.8829633125226906e-11]]],[7,"faC7No+HpYpo1CtxfIbDtc",1,0],[1,0.003821877297013998,9.992007618673103e-18,1.4055525840439564e-11],[3,7.078807208851528e-26,7.338928554393833e-26,0.7197470906365884,0.6942363614217905],[1,-180,180,87.93279256115314]],[63,"RootPart1_M",2,[-28],[7,"f2N7R7HJNdWaIGBjhLyj/l",1,0],[1,0.0020652245730161667,2.2204459996194763e-18,-6.089342295085281e-19]],[63,"RootPart2_M",16,[-29],[7,"cfhtPfFxpTZ7tMceNEirWD",1,0],[1,0.0020652245730161667,2.2204459996194763e-18,-6.089341778097398e-19]],[10,"Spine2_M",17,[3],[7,"14MDpdU3tQCrBQLhtH22sd",1,0],[1,0.0020652245730161667,4.440891999238953e-18,2.7589170037440396e-18],[3,2.833542290373483e-16,-5.276558712844762e-17,-0.13887424912163487,0.9903100236445666],[1,3.257203985875381e-14,-1.5379762679065733e-15,-15.965418280697603]],[10,"Neck_M",3,[-30],[7,"895fmQ+vpS173gNoVwL7BO",1,0],[1,0.002901608357205987,-0.0031024303752928972,-9.727658892874631e-18],[3,-2.4871766108048305e-24,2.1821083289339757e-24,-0.6595017750111039,0.7517030056858913],[1,-3.791516639546766e-22,0,-82.52377277072583]],[63,"NeckPart1_M",19,[5],[7,"73CmDo5ltcDbuRcY8Z/AfD",1,0],[1,0.005839296150952578,5.551115205843844e-18,2.898164867815023e-11]],[46,"Jaw_M",5,[[39,"JawEnd_M",-31,[7,"a4rXaxR0ZZub+VTy0Xleia",1,0],[1,0.01144465059041977,-4.440891999238953e-18,2.616274463397792e-18]]],[7,"fdwItMVbhXNLrc3U4FFCKG",1,0],[1,-0.0070828660391271114,0.001565893879160285,-4.563028938995164e-18],[3,-4.0602511795263196e-25,8.309202330691217e-25,0.7944917325602083,0.6072749681103925],[1,-180,180,74.7854503251938]],[10,"Scapula_R",3,[-32],[7,"edDbQgiq9RiICXDD3l+QQu",1,0],[1,0.0009082318283617496,-0.0016960602952167392,-0.0035904867108911276],[3,0.7485383193052008,0.6073311003787559,-0.20668350270817637,0.16769391388107713],[1,112.31256356364936,70.98174103154757,57.129780034201545]],[10,"Shoulder_R",22,[-33],[7,"4alt8+tylepaK/oMypLOuB",1,0],[1,0.002976213349029422,0,-8.881783998477905e-18],[3,-0.07353511641712662,0.25579661788485253,-0.2663195499695608,0.9264095067712771],[1,0.0000012480393304219223,30.871376804796846,-32.07723760154569]],[10,"Elbow_R",23,[-34],[7,"b1SE1i17NRbZ7wOXNu754D",1,0],[1,0.006145196035504341,-5.551115205843844e-18,1.0769163656501374e-16],[3,8.504070203628985e-25,6.16430870102796e-26,0.3120392175523727,0.9500692220618996],[1,1.1223607321790314e-22,-2.942762314065395e-23,36.36433252877887]],[10,"Wrist_R",24,[-35],[7,"79C2C4OrRc1oify7s4mC8S",1,0],[1,0.003922537434846163,-7.77156120546332e-18,2.0003202219620597e-11],[3,1.26163860488356e-8,3.485806502145198e-9,0.26631405719129686,0.9638863122496919],[1,0.0000014998981938610756,2.921850661819311e-14,30.890097833571968]],[46,"Fingers1_R",25,[[39,"Fingers2_R",-36,[7,"92/LnVnJxaIozSRUM+5qMF",1,0],[1,0.0024803609121590853,-0.0011090633925050497,4.9960034784643064e-17]]],[7,"1bBFsw609d9ocKwJw3sfOp",1,0],[1,0.0013398798182606697,1.1102229998097382e-18,2.8932013035332105e-12],[3,-1.0268690676414758e-8,-4.1971217162257e-9,0.37834661793140156,0.9256639977334487],[1,-0.0000012712012910317389,-1.2653603427533027e-14,44.46261181934115]],[10,"Scapula_L",3,[-37],[7,"46FE4q0N5cL7tvG5Bg6k+9",1,0],[1,0.0009082318283617496,-0.0016960602952167392,0.0035904867108911276],[3,-0.6073310985082828,0.7485383169998342,0.16769391336460931,0.20668351697278872],[1,-67.68743656021654,109.01825758625266,-57.12977896045119]],[10,"Shoulder_L",27,[-38],[7,"ddsSOUbWVbaaJNhwRCHShL",1,0],[1,-0.002976213349029422,-2.2204459996194763e-18,-6.661337998858429e-18],[3,-0.08087501841085962,0.2535716049327198,-0.29290211802618116,0.9183512518773331],[1,-0.0000020023668605326484,30.871375957102188,-35.37948463187456]],[10,"Elbow_L",28,[-39],[7,"66SJXNqV5TxKtl5Ud/nQus",1,0],[1,-0.006145196035504341,2.1649348186097164e-17,2.5022001831631613e-11],[3,3.698432393575249e-24,7.844895137691728e-26,0.4660808189363135,0.8847421490014223],[1,6.556099890129191e-22,-3.352136588885891e-22,55.56038648837976]],[10,"Wrist_L",29,[-40],[7,"88Sd5kpN5ZArlql9w+8Mqa",1,0],[1,-0.003922537434846163,1.1102230411687688e-17,-2.0801102160183937e-11],[3,-2.2213494740521317e-8,2.682952490230911e-9,-0.11990886018104767,0.9927849038185872],[1,-0.000002563978345591965,-1.238952164628575e-14,-13.773685345369223]],[46,"Fingers1_L",30,[[39,"Fingers2_L",-41,[7,"117EpfUb1Wjq3ujm9MFAAG",1,0],[1,-0.0024803609121590853,0.0011090633925050497,-1.7181324071802173e-11]]],[7,"c8Nmpmh2NQ9LDJM+Vm5Ce/",1,0],[1,-0.0013398798182606697,3.3306689994292145e-18,-3.0510691195750894e-11],[3,1.202641542986473e-8,-1.7758621256120527e-8,0.5607324843663741,0.8279970295697404],[1,0.000006148774687692887,-0.0000066217698935251255,68.21293812945635]],[10,"Hip_L",2,[-42],[7,"f3g07IxHlegJEvkOouz25v",1,0],[1,-0.00007880722841946408,0.0005406050477176905,0.003936111461371183],[3,-0.33800700071914674,0.9337119991241997,0.028422765236197228,0.11456577400194808],[1,-9.622341407618702,162.62735726022657,-38.65942560522658]],[10,"Knee_L",32,[-43],[7,"a1EO7fBCFRQpJ4eEdZm3N4",1,0],[1,-0.006485617719590664,-5.551114999048691e-19,1.1102229998097382e-18],[3,-1.7336686139568426e-19,-9.811546734126506e-18,-0.719488810323054,0.6945040329759912],[1,-179.99999999999997,-179.99999999999997,-87.97541642889963]],[10,"Ankle_L",33,[-44],[7,"b5N00UUzBYV4X5sPxdbNwR",1,0],[1,-0.006850753910839558,9.992007618673103e-18,7.77156120546332e-18],[3,-0.10166416476507739,0.05983485747743264,0.6161200500698334,0.7787684324208453],[1,-46.51448788453161,43.07919569002581,71.34531796373011]],[46,"Toes1_L",34,[[39,"Toes2_L",-45,[7,"adeCf02htR85EV1Lnc8XEY",1,0],[1,-0.0028587731067091227,0.0018769684247672558,2.8829636594673858e-11]]],[7,"40CZSvm3hea6E/2g2PDUcO",1,0],[1,-0.003821877297013998,0,2.3568615808988724e-11],[3,-0.00020272489692942466,0.00016227147528271118,0.6862465063574965,0.727369002008413],[1,-0.5101740052366177,0.5068947396755507,86.66730611092152]],[75,"Cat_model",1,[[76,-46,[55,"6ebjnJ70NYJacbOodK8Orj"],[0,1,2,3],[1],1,4,5]],[7,"d1Nmk6CxVdXIRaAYBSZaMv",1,0]],[75,"Tail_06",4,[[76,-47,[55,"84CY549QZQWaKn9etsN8WM"],[6],[1],1,7,8]],[7,"14sEjLLS1eKa2pMBdYgDtp",1,0]],[75,"Backpack_07",4,[[76,-48,[55,"09VpZw6h9aSLh0lmI0vomq"],[9],[1],1,10,11]],[7,"6ebDnGRntd5JTWzyaFOjOM",1,0]],[75,"Hat_10",4,[[76,-49,[55,"34v/3oVq9Y9Jm+aBvqbbTL"],[12],[1],1,13,14]],[7,"58tANkGgpWO7V1l8F/tTEw",1,0]]],0,[0,16,1,0,0,1,0,-1,2,0,-2,36,0,-3,4,0,-1,6,0,-2,12,0,-3,16,0,-4,32,0,-1,19,0,-2,22,0,-3,27,0,-1,37,0,-2,38,0,-3,39,0,2,5,0,-2,21,0,-1,7,0,-1,8,0,-1,9,0,-1,10,0,-1,11,0,2,11,0,-1,13,0,-1,14,0,-1,15,0,2,15,0,-1,17,0,-1,18,0,-1,20,0,2,21,0,-1,23,0,-1,24,0,-1,25,0,-1,26,0,2,26,0,-1,28,0,-1,29,0,-1,30,0,-1,31,0,2,31,0,-1,33,0,-1,34,0,-1,35,0,2,35,0,0,36,0,0,37,0,0,38,0,0,39,0,18,1,3,2,18,5,2,20,49],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[-1,-2,-3,-4,1,11,-1,1,11,-1,1,11,-1,1,11],[43,43,43,43,69,70,13,74,75,13,76,77,13,78,79]],[[[74,"Skin-1",3437976317,["Root_M/Tail0_M/Tail1_M/Tail2_M","Root_M/Tail0_M/Tail1_M/Tail2_M/Tail3_M","Root_M/Tail0_M/Tail1_M/Tail2_M/Tail3_M/Tail4_M","Root_M/Tail0_M/Tail1_M/Tail2_M/Tail3_M/Tail4_M/Tail5_M","Root_M/Tail0_M/Tail1_M/Tail2_M/Tail3_M/Tail4_M/Tail5_M/Tail6_M"],[[[7,1.214845202213155e-8,8.138500540155746e-9,-1,0,0.802428662776947,-0.5967480540275574,4.891632432446613e-9,0,-0.5967480540275574,-0.802428662776947,-1.3780130814211589e-8,0,-0.023963987827301025,0.002166526624932885,-1.0021428131778976e-10,1],[7,8.824719621713939e-9,1.1659519572049248e-8,-1,0,0.9533108472824097,-0.3019908368587494,4.891632432446613e-9,0,-0.3019908368587494,-0.9533108472824097,-1.3780130814211589e-8,0,-0.0263852309435606,-0.00682395463809371,-1.041348604569059e-10,1],[7,7.242136224050455e-9,1.2703210039433088e-8,-1,0,0.9843685626983643,-0.17612075805664062,4.891631988357403e-9,0,-0.17612075805664062,-0.9843685626983643,-1.3780130814211589e-8,0,-0.028065014630556107,-0.010543400421738625,-1.1071389638406259e-10,1],[7,4.554239652065917e-9,1.3895285810860969e-8,-1,0,0.9997028112411499,0.024378489702939987,4.891632432446613e-9,0,0.024378489702939987,-0.9997028112411499,-1.3780130814211589e-8,0,-0.028023043647408485,-0.01648310199379921,-1.180170128289859e-10,1],[7,4.554239652065917e-9,1.3895285810860969e-8,-1,0,0.9997028112411499,0.024378489702939987,4.891632432446613e-9,0,0.024378489702939987,-0.9997028112411499,-1.3780130814211589e-8,0,-0.031048893928527832,-0.01648310199379921,-1.277056793647091e-10,1]],8,8,8,8,8]]],0,0,[],[],[]],[[[13,".bin",772316373,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":32976,"length":10896,"count":2724,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":32976,"count":458,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,6]]},"minPosition",8,[1,-0.010987963527441025,0.013615782372653484,-0.0012477744603529572],"maxPosition",8,[1,0.010987963527441025,0.02443666011095047,0.003076234832406044]]],-1],0,0,[],[],[]],[[[52,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[9,8],[2,14]],[[[134,"builtin-standard",[{"hash":4038009253,"name":"builtin-standard|standard-vs|standard-fs","blocks":[{"name":"Constants","stageFlags":17,"binding":0,"members":[{"name":"tilingOffset","type":16,"count":1},{"name":"albedo","type":16,"count":1},{"name":"albedoScaleAndCutoff","type":16,"count":1},{"name":"pbrParams","type":16,"count":1},{"name":"emissive","type":16,"count":1},{"name":"emissiveScaleParam","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"albedoMap","type":28,"count":1,"stageFlags":16,"binding":1,"defines":["USE_ALBEDO_MAP"]},{"name":"normalMap","type":28,"count":1,"stageFlags":16,"binding":2,"defines":["USE_NORMAL_MAP"]},{"name":"pbrMap","type":28,"count":1,"stageFlags":16,"binding":3,"defines":["USE_PBR_MAP"]},{"name":"metallicRoughnessMap","type":28,"count":1,"stageFlags":16,"binding":4,"defines":["USE_METALLIC_ROUGHNESS_MAP"]},{"name":"occlusionMap","type":28,"count":1,"stageFlags":16,"binding":5,"defines":["USE_OCCLUSION_MAP"]},{"name":"emissiveMap","type":28,"count":1,"stageFlags":16,"binding":6,"defines":["USE_EMISSIVE_MAP"]}],"samplers":[],"textures":[],"buffers":[{"name":"b_ccLightsBuffer","memoryAccess":1,"stageFlags":16,"binding":7,"defines":["CC_FORWARD_ADD","CC_ENABLE_CLUSTERED_LIGHT_CULLING"]},{"name":"b_clusterLightIndicesBuffer","memoryAccess":1,"stageFlags":16,"binding":8,"defines":["CC_FORWARD_ADD","CC_ENABLE_CLUSTERED_LIGHT_CULLING"]},{"name":"b_clusterLightGridBuffer","memoryAccess":1,"stageFlags":16,"binding":9,"defines":["CC_FORWARD_ADD","CC_ENABLE_CLUSTERED_LIGHT_CULLING"]}],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_normal","format":32,"location":1,"defines":[]},{"name":"a_texCoord","format":21,"location":2,"defines":[]},{"name":"a_tangent","format":44,"location":3,"defines":[]},{"name":"a_vertexId","format":11,"location":6,"defines":["CC_USE_MORPH"]},{"name":"a_joints","location":4,"defines":["CC_USE_SKINNING"]},{"name":"a_weights","format":44,"location":5,"defines":["CC_USE_SKINNING"]},{"name":"a_jointAnimInfo","format":44,"isInstanced":true,"location":7,"defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION","USE_INSTANCING"]},{"name":"a_matWorld0","format":44,"isInstanced":true,"location":8,"defines":["USE_INSTANCING"]},{"name":"a_matWorld1","format":44,"isInstanced":true,"location":9,"defines":["USE_INSTANCING"]},{"name":"a_matWorld2","format":44,"isInstanced":true,"location":10,"defines":["USE_INSTANCING"]},{"name":"a_lightingMapUVParam","format":44,"isInstanced":true,"location":11,"defines":["USE_INSTANCING","USE_LIGHTMAP"]},{"name":"a_dyn_batch_id","format":11,"location":12,"defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"a_color","format":44,"location":13,"defines":["USE_VERTEX_COLOR"]},{"name":"a_texCoord1","format":21,"location":14,"defines":[]}],"varyings":[{"name":"v_fog_factor","type":13,"count":1,"stageFlags":17,"location":0,"defines":["!CC_USE_ACCURATE_FOG"]},{"name":"v_shadowPos","type":16,"count":1,"stageFlags":17,"location":1,"defines":[]},{"name":"v_color","type":16,"count":1,"stageFlags":17,"location":2,"defines":["USE_VERTEX_COLOR"]},{"name":"v_position","type":15,"count":1,"stageFlags":17,"location":3,"defines":[]},{"name":"v_normal","type":15,"count":1,"stageFlags":17,"location":4,"defines":[]},{"name":"v_uv","type":14,"count":1,"stageFlags":17,"location":5,"defines":[]},{"name":"v_uv1","type":14,"count":1,"stageFlags":17,"location":6,"defines":[]},{"name":"v_tangent","type":15,"count":1,"stageFlags":17,"location":7,"defines":["USE_NORMAL_MAP"]},{"name":"v_bitangent","type":15,"count":1,"stageFlags":17,"location":8,"defines":["USE_NORMAL_MAP"]},{"name":"v_luv","type":15,"count":1,"stageFlags":17,"location":9,"defines":["USE_LIGHTMAP","!USE_BATCHING","!CC_FORWARD_ADD"]}],"fragColors":[{"name":"fragColorX","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":["CC_FORWARD_ADD"]},{"name":"fragColor0","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":1,"defines":["!CC_FORWARD_ADD","CC_PIPELINE_TYPE"]},{"name":"fragColor1","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":2,"defines":["!CC_FORWARD_ADD","CC_PIPELINE_TYPE"]},{"name":"fragColor2","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":3,"defines":["!CC_FORWARD_ADD","CC_PIPELINE_TYPE"]}],"glsl4":{"vert":"#extension GL_EXT_shader_explicit_arithmetic_types_int32: require\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec3 a_normal;\nlayout(location = 2) in vec2 a_texCoord;\nlayout(location = 3) in vec4 a_tangent;\n#if CC_USE_MORPH\n    int getVertexId() {\n      return gl_VertexIndex;\n    }\n  layout(set = 2, binding = 4) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    layout(set = 2, binding = 7) uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    layout(set = 2, binding = 8) uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    layout(set = 2, binding = 9) uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n    layout(location = 4) in u32vec4 a_joints;\n  layout(location = 5) in vec4 a_weights;\n  #if CC_USE_BAKED_ANIMATION\n    #if USE_INSTANCING\n      layout(location = 7) in highp vec4 a_jointAnimInfo;\n    #endif\n    layout(set = 2, binding = 3) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(set = 2, binding = 2) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    layout(set = 2, binding = 6) uniform highp sampler2D cc_jointTexture;\n      #else\n    layout(set = 2, binding = 3) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout StandardVertInput attr) {\n    mat4 m = skinMatrix();\n    attr.position = m * attr.position;\n    attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n    attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n  }\n#endif\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if USE_INSTANCING\n  layout(location = 8) in vec4 a_matWorld0;\n  layout(location = 9) in vec4 a_matWorld1;\n  layout(location = 10) in vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    layout(location = 11) in vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  layout(location = 12) in float a_dyn_batch_id;\n  layout(set = 2, binding = 0) uniform CCLocalBatched {\n    highp mat4 cc_matWorlds[10];\n  };\n#else\n  layout(set = 2, binding = 0) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n  };\n#endif\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n  #if CC_USE_FOG == 0\n\tfactor = LinearFog(pos);\n  #elif CC_USE_FOG == 1\n    factor = ExpFog(pos);\n  #elif CC_USE_FOG == 2\n    factor = ExpSquaredFog(pos);\n  #elif CC_USE_FOG == 3\n    factor = LayeredFog(pos);\n  #else\n    factor = 1.0;\n  #endif\n}\n#if !CC_USE_ACCURATE_FOG\nlayout(location = 0) out float v_fog_factor;\n#endif\nvoid CC_TRANSFER_FOG(vec4 pos) {\n#if !CC_USE_ACCURATE_FOG\n    CC_TRANSFER_FOG_BASE(pos, v_fog_factor);\n#endif\n}\nlayout(location = 1) out highp vec4 v_shadowPos;\nlayout(set = 0, binding = 2) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\n#if CC_RECEIVE_SHADOW\n  layout(set = 0, binding = 3) uniform highp sampler2D cc_shadowMap;\n  layout(set = 0, binding = 5) uniform highp sampler2D cc_spotLightingMap;\n#endif\n#if USE_VERTEX_COLOR\n  layout(location = 13) in vec4 a_color;\n  layout(location = 2) out vec4 v_color;\n#endif\nlayout(location = 3) out vec3 v_position;\nlayout(location = 4) out vec3 v_normal;\nlayout(location = 5) out vec2 v_uv;\nlayout(location = 6) out vec2 v_uv1;\n#if USE_NORMAL_MAP\n  layout(location = 7) out vec3 v_tangent;\n  layout(location = 8) out vec3 v_bitangent;\n#endif\n#if HAS_SECOND_UV || USE_LIGHTMAP\n  layout(location = 14) in vec2 a_texCoord1;\n#endif\n#if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n  layout(location = 9) out vec3 v_luv;\n  void CCLightingMapCaclUV()\n  {\n  #if !USE_INSTANCING\n    v_luv.xy = cc_lightingMapUVParam.xy + a_texCoord1 * cc_lightingMapUVParam.zw;\n    v_luv.z = cc_lightingMapUVParam.z;\n  #else\n    v_luv.xy = a_lightingMapUVParam.xy + a_texCoord1 * a_lightingMapUVParam.zw;\n    v_luv.z = a_lightingMapUVParam.z;\n  #endif\n  }\n#endif\nvoid main () {\n  StandardVertInput In;\n      In.position = vec4(a_position, 1.0);\n      In.normal = a_normal;\n      In.tangent = a_tangent;\n    #if CC_USE_MORPH\n      applyMorph(In);\n    #endif\n    #if CC_USE_SKINNING\n      CCSkin(In);\n    #endif\n  mat4 matWorld, matWorldIT;\n    #if USE_INSTANCING\n      matWorld = mat4(\n        vec4(a_matWorld0.xyz, 0.0),\n        vec4(a_matWorld1.xyz, 0.0),\n        vec4(a_matWorld2.xyz, 0.0),\n        vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n      );\n      matWorldIT = matWorld;\n    #elif USE_BATCHING\n      matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n      matWorldIT = matWorld;\n    #else\n      matWorld = cc_matWorld;\n      matWorldIT = cc_matWorldIT;\n    #endif\n  vec4 pos = matWorld * In.position;\n  v_position = pos.xyz;\n  v_normal = normalize((matWorldIT * vec4(In.normal, 0.0)).xyz);\n  #if USE_TWOSIDE\n    vec3 viewDirect = normalize(cc_cameraPos.xyz - v_position);\n    v_normal *= dot(v_normal, viewDirect) < 0.0 ? -1.0 : 1.0;\n  #endif\n  #if USE_NORMAL_MAP\n    v_tangent = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n    v_bitangent = cross(v_normal, v_tangent) * In.tangent.w;\n  #endif\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if SAMPLE_FROM_RT\n    v_uv = cc_cameraPos.w > 1.0 ? vec2(v_uv.x, 1.0 - v_uv.y) : v_uv;\n  #endif\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n    #if SAMPLE_FROM_RT\n      v_uv1 = cc_cameraPos.w > 1.0 ? vec2(v_uv1.x, 1.0 - v_uv1.y) : v_uv1;\n    #endif\n  #endif\n  #if USE_VERTEX_COLOR\n    v_color = a_color;\n  #endif\n  CC_TRANSFER_FOG(pos);\n  v_shadowPos = cc_matLightViewProj * pos;\n  #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    CCLightingMapCaclUV();\n  #endif\n  gl_Position = cc_matProj * (cc_matView * matWorld) * In.position;\n}","frag":"\nprecision highp float;\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n  #if CC_USE_FOG == 0\n\tfactor = LinearFog(pos);\n  #elif CC_USE_FOG == 1\n    factor = ExpFog(pos);\n  #elif CC_USE_FOG == 2\n    factor = ExpSquaredFog(pos);\n  #elif CC_USE_FOG == 3\n    factor = LayeredFog(pos);\n  #else\n    factor = 1.0;\n  #endif\n}\nvoid CC_APPLY_FOG_BASE(inout vec4 color, float factor) {\n  color = vec4(mix(cc_fogColor.rgb, color.rgb, factor), color.a);\n}\n#if !CC_USE_ACCURATE_FOG\nlayout(location = 0) in float v_fog_factor;\n#endif\nvoid CC_APPLY_FOG(inout vec4 color) {\n#if !CC_USE_ACCURATE_FOG\n    CC_APPLY_FOG_BASE(color, v_fog_factor);\n#endif\n}\nvoid CC_APPLY_FOG(inout vec4 color, vec3 worldPos) {\n#if CC_USE_ACCURATE_FOG\n    float factor;\n    CC_TRANSFER_FOG_BASE(vec4(worldPos, 1.0), factor);\n#else\n    float factor = v_fog_factor;\n#endif\n    CC_APPLY_FOG_BASE(color, factor);\n}\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nlayout(set = 0, binding = 2) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\nhighp float unpackHighpData (float mainPart, float modPart) {\n  highp float data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out float mainPart, out float modPart, highp float data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp float unpackHighpData (float mainPart, float modPart, const float modValue) {\n  highp float data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out float mainPart, out float modPart, highp float data, const float modValue) {\n  highp float divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec2 unpackHighpData (vec2 mainPart, vec2 modPart) {\n  highp vec2 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec2 unpackHighpData (vec2 mainPart, vec2 modPart, const float modValue) {\n  highp vec2 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data, const float modValue) {\n  highp vec2 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec3 unpackHighpData (vec3 mainPart, vec3 modPart) {\n  highp vec3 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec3 unpackHighpData (vec3 mainPart, vec3 modPart, const float modValue) {\n  highp vec3 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data, const float modValue) {\n  highp vec3 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec4 unpackHighpData (vec4 mainPart, vec4 modPart) {\n  highp vec4 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec4 unpackHighpData (vec4 mainPart, vec4 modPart, const float modValue) {\n  highp vec4 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data, const float modValue) {\n  highp vec4 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nfloat CCGetLinearDepthFromViewSpace(vec3 viewPos) {\n  float dist = length(viewPos);\n  return (dist - cc_shadowNFLSInfo.x) / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n  vec4 viewStartPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  return CCGetLinearDepthFromViewSpace(viewStartPos.xyz);\n}\n#if CC_RECEIVE_SHADOW\n  layout(set = 0, binding = 3) uniform highp sampler2D cc_shadowMap;\n  layout(set = 0, binding = 5) uniform highp sampler2D cc_spotLightingMap;\n  vec4 ApplyShadowDepthBias_FaceNormal(vec4 shadowPos, vec3 worldNormal)\n  {\n    vec4 newShadowPos = shadowPos;\n    if(cc_shadowLPNNInfo.z > 0.0001)\n    {\n      vec4 viewNormal = cc_matLightView * vec4(worldNormal, 0.0);\n      if(viewNormal.z < 0.1)\n        newShadowPos.xy += viewNormal.xy * cc_shadowProjInfo.xy * cc_shadowLPNNInfo.z * clamp(viewNormal.z, 0.001, 0.1);\n    }\n    return newShadowPos;\n  }\n  vec4 ApplyShadowDepthBias_Perspective(vec4 shadowPos, float viewspaceDepthBias)\n  {\n    vec3 viewSpacePos;\n    viewSpacePos.xy = shadowPos.xy * cc_shadowProjInfo.zw;\n    viewSpacePos.z = shadowPos.z * cc_shadowInvProjDepthInfo.x + shadowPos.w * cc_shadowInvProjDepthInfo.y;\n    viewSpacePos.xyz += cc_shadowProjDepthInfo.z * normalize(viewSpacePos.xyz) * viewspaceDepthBias;\n    vec4 clipSpacePos;\n    clipSpacePos.xy = viewSpacePos.xy * cc_shadowProjInfo.xy;\n    clipSpacePos.zw = viewSpacePos.z * cc_shadowProjDepthInfo.xz + vec2(cc_shadowProjDepthInfo.y, 0.0);\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      clipSpacePos.z = CCGetLinearDepthFromViewSpace(viewSpacePos.xyz);\n      clipSpacePos.z = (clipSpacePos.z * 2.0 - 1.0) * clipSpacePos.w;\n    }\n    return clipSpacePos;\n  }\n  vec4 ApplyShadowDepthBias_Orthographic(vec4 shadowPos, float viewspaceDepthBias)\n  {\n    float coeffA = cc_shadowProjDepthInfo.x;\n    float coeffB = cc_shadowProjDepthInfo.y;\n    float viewSpacePos_z = (shadowPos.z - coeffB) / coeffA;\n    viewSpacePos_z += viewspaceDepthBias;\n    vec4 result = shadowPos;\n    result.z = viewSpacePos_z * coeffA + coeffB;\n    return result;\n  }\n  float CCGetShadowFactorHard (vec4 shadowPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float shadow = 0.0;\n    float closestDepth = 0.0;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      closestDepth = dot(texture(cc_shadowMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0));\n    } else {\n      closestDepth = texture(cc_shadowMap, clipPos.xy).x;\n    }\n    shadow = step(clipPos.z, closestDepth);\n    return shadow;\n  }\n  float CCGetShadowFactorSoft (vec4 shadowPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float offsetDepth = clipPos.z;\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    vec2 clipPos_offset = clipPos.xy + oneTap;\n    float block0, block1, block2, block3;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      block0 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n      block1 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)).x);\n      block2 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)).x);\n      block3 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)).x);\n    }\n    float coefX   = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block2, block3, coefX);\n    float coefY   = mod(clipPos.y, oneTap.y) * mapSize.y;\n    return mix(resultX, resultY, coefY);\n  }\n  float CCGetShadowFactorSoft2X (vec4 shadowPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float offsetDepth = clipPos.z;\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    float clipPos_offset_L = clipPos.x - oneTap.x;\n    float clipPos_offset_R = clipPos.x + oneTap.x;\n    float clipPos_offset_U = clipPos.y - oneTap.y;\n    float clipPos_offset_D = clipPos.y + oneTap.y;\n    float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      block0 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)).x);\n      block1 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)).x);\n      block2 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)).x);\n      block3 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)).x);\n      block4 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n      block5 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)).x);\n      block6 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)).x);\n      block7 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)).x);\n      block8 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)).x);\n    }\n    float coefX = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float coefY = mod(clipPos.y, oneTap.y) * mapSize.y;\n    float shadow = 0.0;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block3, block4, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block1, block2, coefX);\n    resultY = mix(block4, block5, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block3, block4, coefX);\n    resultY = mix(block6, block7, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    resultX = mix(block4, block5, coefX);\n    resultY = mix(block7, block8, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    return shadow * 0.25;\n  }\n  float CCGetSpotLightShadowFactorHard (vec4 shadowPos, vec3 worldPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float shadow = 0.0;\n    float closestDepth = 0.0;\n    float depth = clipPos.z;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      closestDepth = dot(texture(cc_spotLightingMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0));\n    } else {\n      closestDepth = texture(cc_spotLightingMap, clipPos.xy).x;\n    }\n    shadow = step(depth, closestDepth);\n    return shadow;\n  }\n  float CCGetSpotLightShadowFactorSoft (vec4 shadowPos, vec3 worldPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float depth = 0.0;\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      depth = CCGetLinearDepth(worldPos);\n    } else {\n      depth = clipPos.z;\n    }\n    float bias = cc_shadowWHPBInfo.w;\n    vec2 oneTap = 1.0 / cc_shadowWHPBInfo.xy;\n    vec2 clipPos_offset = clipPos.xy + oneTap;\n    float block0, block1, block2, block3;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      block0 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)).x);\n      block1 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos.y)).x);\n      block2 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset.y)).x);\n      block3 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos_offset.y)).x);\n    }\n    float coefX   = mod(clipPos.x, oneTap.x) * cc_shadowWHPBInfo.x;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block2, block3, coefX);\n    float coefY   = mod(clipPos.y, oneTap.y) * cc_shadowWHPBInfo.y;\n    return mix(resultX, resultY, coefY);\n  }\n  float CCGetSpotLightShadowFactorSoft2X (vec4 shadowPos, vec3 worldPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float depth = 0.0;\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      depth = CCGetLinearDepth(worldPos);\n    } else {\n      depth = clipPos.z;\n    }\n    float bias = cc_shadowWHPBInfo.w;\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    float clipPos_offset_L = clipPos.x - oneTap.x;\n    float clipPos_offset_R = clipPos.x + oneTap.x;\n    float clipPos_offset_U = clipPos.y - oneTap.y;\n    float clipPos_offset_D = clipPos.y + oneTap.y;\n    float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      block0 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_U)).x);\n      block1 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_U)).x);\n      block2 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_U)).x);\n      block3 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos.y)).x);\n      block4 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)).x);\n      block5 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos.y)).x);\n      block6 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_D)).x);\n      block7 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_D)).x);\n      block8 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_D)).x);\n    }\n    float coefX = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float coefY = mod(clipPos.y, oneTap.y) * mapSize.y;\n    float shadow = 0.0;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block3, block4, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block1, block2, coefX);\n    resultY = mix(block4, block5, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block3, block4, coefX);\n    resultY = mix(block6, block7, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    resultX = mix(block4, block5, coefX);\n    resultY = mix(block7, block8, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    return shadow * 0.25;\n  }\n#endif\n#if CC_USE_IBL\n  layout(set = 0, binding = 4) uniform samplerCube cc_environment;\n  vec4 fragTextureLod (sampler2D tex, vec2 coord, float lod) {\n      return textureLod(tex, coord, lod);\n  }\n  vec4 fragTextureLod (samplerCube tex, vec3 coord, float lod) {\n      return textureLod(tex, coord, lod);\n  }\n  vec3 unpackRGBE (vec4 rgbe) {\n    return rgbe.rgb * pow(1.1, rgbe.a * 255.0 - 128.0);\n  }\n  #if CC_USE_DIFFUSEMAP\n    layout(set = 0, binding = 6) uniform samplerCube cc_diffuseMap;\n  #endif\n#endif\nfloat GGXMobile (float roughness, float NoH, vec3 H, vec3 N) {\n  vec3 NxH = cross(N, H);\n  float OneMinusNoHSqr = dot(NxH, NxH);\n  float a = roughness * roughness;\n  float n = NoH * a;\n  float p = a / (OneMinusNoHSqr + n * n);\n  return p * p;\n}\nfloat CalcSpecular (float roughness, float NoH, vec3 H, vec3 N) {\n  return (roughness * 0.25 + 0.25) * GGXMobile(roughness, NoH, H, N);\n}\nvec3 BRDFApprox (vec3 specular, float roughness, float NoV) {\n  const vec4 c0 = vec4(-1.0, -0.0275, -0.572, 0.022);\n  const vec4 c1 = vec4(1.0, 0.0425, 1.04, -0.04);\n  vec4 r = roughness * c0 + c1;\n  float a004 = min(r.x * r.x, exp2(-9.28 * NoV)) * r.x + r.y;\n  vec2 AB = vec2(-1.04, 1.04) * a004 + r.zw;\n  AB.y *= clamp(50.0 * specular.g, 0.0, 1.0);\n  return specular * AB.x + AB.y;\n}\n#if USE_REFLECTION_DENOISE\n  vec3 GetEnvReflectionWithMipFiltering(vec3 R, float roughness, float mipCount, float denoiseIntensity) {\n    #if CC_USE_IBL\n    \tfloat mip = roughness * mipCount;\n    \tfloat delta = (dot(dFdx(R), dFdy(R))) * 1000.0;\n    \tfloat mipBias = mix(0.0, 5.0, clamp(delta, 0.0, 1.0));\n    \tvec4 biased = fragTextureLod(cc_environment, R, mip + mipBias);\n     \tvec4 filtered = texture(cc_environment, R);\n      #if CC_USE_IBL == 2\n      \tbiased.rgb = unpackRGBE(biased);\n      \tfiltered.rgb = unpackRGBE(filtered);\n      #else\n      \tbiased.rgb = SRGBToLinear(biased.rgb);\n      \tfiltered.rgb = SRGBToLinear(filtered.rgb);\n      #endif\n      return mix(biased.rgb, filtered.rgb, denoiseIntensity);\n    #else\n      return vec3(0.0, 0.0, 0.0);\n    #endif\n  }\n#endif\nstruct StandardSurface {\n  vec4 albedo;\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  vec3 position, position_fract_part;\n  #else\n  vec3 position;\n  #endif\n  vec3 normal;\n  vec3 emissive;\n  vec3 lightmap;\n  float lightmap_test;\n  float roughness;\n  float metallic;\n  float occlusion;\n};\nvec4 CCStandardShadingBase (StandardSurface s, vec4 shadowPos) {\n  vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n  vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n  vec3 position;\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  position = unpackHighpData(s.position, s.position_fract_part);\n  #else\n  position = s.position;\n  #endif\n  vec3 N = normalize(s.normal);\n  vec3 V = normalize(cc_cameraPos.xyz - position);\n  float NV = max(abs(dot(N, V)), 0.0);\n  specular = BRDFApprox(specular, s.roughness, NV);\n  vec3 L = normalize(-cc_mainLitDir.xyz);\n  vec3 H = normalize(L + V);\n  float NH = max(dot(N, H), 0.0);\n  float NL = max(dot(N, L), 0.0);\n  vec3 finalColor = NL * cc_mainLitColor.rgb * cc_mainLitColor.w;\n  vec3 diffuseContrib = diffuse;\n  #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    if (s.lightmap_test > 0.0001) {\n      finalColor = s.lightmap.rgb;\n    }\n  #else\n    diffuseContrib /= 3.14159265359;\n  #endif\n  vec3 specularContrib = specular * CalcSpecular(s.roughness, NH, H, N);\n  vec3 dirlightContrib = (diffuseContrib + specularContrib);\n  float shadow = 1.0;\n  #if CC_RECEIVE_SHADOW\n    if (NL > 0.0 && cc_mainLitDir.w > 0.0) {\n      {\n        vec4 pos = ApplyShadowDepthBias_FaceNormal(shadowPos, N);\n        float pcf = cc_shadowWHPBInfo.z;\n        if (pcf > 1.9) shadow = CCGetShadowFactorSoft2X(pos);\n        else if (pcf > 0.9) shadow = CCGetShadowFactorSoft(pos);\n        else shadow = CCGetShadowFactorHard(pos);\n        shadow = mix(shadow, 1.0, cc_shadowNFLSInfo.w);\n      }\n    }\n  #endif\n  dirlightContrib *= shadow;\n  finalColor *= dirlightContrib;\n  float fAmb = 0.5 - N.y * 0.5;\n  vec3 ambDiff = mix(cc_ambientSky.rgb, cc_ambientGround.rgb, fAmb);\n  #if CC_USE_IBL\n    #if CC_USE_DIFFUSEMAP\n      vec4 diffuseMap = texture(cc_diffuseMap, N);\n      #if CC_USE_DIFFUSEMAP == 2\n        ambDiff = unpackRGBE(diffuseMap);\n      #else\n        ambDiff = SRGBToLinear(diffuseMap.rgb);\n      #endif\n    #endif\n    vec3 R = normalize(reflect(-V, N));\n    #if USE_REFLECTION_DENOISE\n      vec3 env = GetEnvReflectionWithMipFiltering(R, s.roughness, cc_ambientGround.w, 0.6);\n    #else\n      vec4 envmap = fragTextureLod(cc_environment, R, s.roughness * cc_ambientGround.w);\n      #if CC_USE_IBL == 2\n        vec3 env = unpackRGBE(envmap);\n      #else\n        vec3 env = SRGBToLinear(envmap.rgb);\n      #endif\n    #endif\n    finalColor += env * cc_ambientSky.w * specular * s.occlusion;\n  #endif\n  finalColor += ambDiff.rgb * cc_ambientSky.w * diffuse * s.occlusion;\n  finalColor += s.emissive;\n  return vec4(finalColor, s.albedo.a);\n}\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = ACESToneMap(color.rgb);\n  #endif\n  color.rgb = sqrt(color.rgb);\n  return color;\n}\nlayout(location = 1) in highp vec4 v_shadowPos;\n#if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n  layout(location = 9) in vec3 v_luv;\n  layout(set = 2, binding = 10) uniform sampler2D cc_lightingMap;\n  vec3 UnpackLightingmap(vec4 color) {\n    vec3 c;\n    float e = 1.0 + color.a * (8.0 - 1.0);\n    c.r = color.r * e;\n    c.g = color.g * e;\n    c.b = color.b * e;\n    return c;\n  }\n#endif\nlayout(location = 3) in vec3 v_position;\nlayout(location = 5) in vec2 v_uv;\nlayout(location = 6) in vec2 v_uv1;\nlayout(location = 4) in vec3 v_normal;\n#if USE_VERTEX_COLOR\n  layout(location = 2) in vec4 v_color;\n#endif\n#if USE_ALBEDO_MAP\n  layout(set = 1, binding = 1) uniform sampler2D albedoMap;\n#endif\n#if USE_NORMAL_MAP\n  layout(location = 7) in vec3 v_tangent;\n  layout(location = 8) in vec3 v_bitangent;\n  layout(set = 1, binding = 2) uniform sampler2D normalMap;\n#endif\n#if USE_PBR_MAP\n  layout(set = 1, binding = 3) uniform sampler2D pbrMap;\n#endif\n#if USE_METALLIC_ROUGHNESS_MAP\n  layout(set = 1, binding = 4) uniform sampler2D metallicRoughnessMap;\n#endif\n#if USE_OCCLUSION_MAP\n  layout(set = 1, binding = 5) uniform sampler2D occlusionMap;\n#endif\n#if USE_EMISSIVE_MAP\n  layout(set = 1, binding = 6) uniform sampler2D emissiveMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvoid surf (out StandardSurface s) {\n  vec4 baseColor = albedo;\n  #if USE_VERTEX_COLOR\n    baseColor.rgb *= SRGBToLinear(v_color.rgb);\n    baseColor.a *= v_color.a;\n  #endif\n  #if USE_ALBEDO_MAP\n    vec4 texColor = texture(albedoMap, ALBEDO_UV);\n    texColor.rgb = SRGBToLinear(texColor.rgb);\n    baseColor *= texColor;\n  #endif\n  s.albedo = baseColor;\n  s.albedo.rgb *= albedoScaleAndCutoff.xyz;\n  #if USE_ALPHA_TEST\n    if (s.albedo.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n  #endif\n  #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    vec4 lightColor = texture(cc_lightingMap, v_luv.xy);\n    s.lightmap = UnpackLightingmap(lightColor);\n    s.lightmap_test = v_luv.z;\n  #endif\n  s.normal = v_normal;\n  #if USE_NORMAL_MAP\n    vec3 nmmp = texture(normalMap, NORMAL_UV).xyz - vec3(0.5);\n    s.normal =\n      (nmmp.x * emissiveScaleParam.w) * normalize(v_tangent) +\n      (nmmp.y * emissiveScaleParam.w) * normalize(v_bitangent) +\n      nmmp.z * normalize(s.normal);\n  #endif\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  packHighpData(s.position, s.position_fract_part, v_position);\n  #else\n  s.position = v_position;\n  #endif\n  vec4 pbr = pbrParams;\n  #if USE_PBR_MAP\n    vec4 res = texture(pbrMap, PBR_UV);\n    pbr.x *= res.r;\n    pbr.y *= res.g;\n    pbr.z *= res.b;\n    pbr.w *= res.a;\n  #endif\n  #if USE_METALLIC_ROUGHNESS_MAP\n    vec4 metallicRoughness = texture(metallicRoughnessMap, PBR_UV);\n    pbr.z *= metallicRoughness.b;\n    pbr.y *= metallicRoughness.g;\n  #endif\n  #if USE_OCCLUSION_MAP\n    pbr.x *= texture(occlusionMap, PBR_UV).r;\n  #endif\n  s.occlusion = pbr.x;\n  s.roughness = pbr.y;\n  s.metallic = pbr.z;\n  s.emissive = emissive.rgb * emissiveScaleParam.xyz;\n  #if USE_EMISSIVE_MAP\n    s.emissive *= SRGBToLinear(texture(emissiveMap, EMISSIVE_UV).rgb);\n  #endif\n}\n#if CC_FORWARD_ADD\n  #if CC_PIPELINE_TYPE == 0\n  # define LIGHTS_PER_PASS 1\n  #else\n  # define LIGHTS_PER_PASS 10\n  #endif\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n  layout(set = 2, binding = 1) uniform CCForwardLight {\n    highp vec4 cc_lightPos[LIGHTS_PER_PASS];\n    vec4 cc_lightColor[LIGHTS_PER_PASS];\n    vec4 cc_lightSizeRangeAngle[LIGHTS_PER_PASS];\n    vec4 cc_lightDir[LIGHTS_PER_PASS];\n  };\n  #endif\n  float SmoothDistAtt (float distSqr, float invSqrAttRadius) {\n    float factor = distSqr * invSqrAttRadius;\n    float smoothFactor = clamp(1.0 - factor * factor, 0.0, 1.0);\n    return smoothFactor * smoothFactor;\n  }\n  float GetDistAtt (float distSqr, float invSqrAttRadius) {\n    float attenuation = 1.0 / max(distSqr, 0.01*0.01);\n    attenuation *= SmoothDistAtt(distSqr , invSqrAttRadius);\n    return attenuation;\n  }\n  float GetAngleAtt (vec3 L, vec3 litDir, float litAngleScale, float litAngleOffset) {\n    float cd = dot(litDir, L);\n    float attenuation = clamp(cd * litAngleScale + litAngleOffset, 0.0, 1.0);\n    return (attenuation * attenuation);\n  }\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n  vec4 CCStandardShadingAdditive (StandardSurface s, vec4 shadowPos) {\n    vec3 position;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    position = unpackHighpData(s.position, s.position_fract_part);\n    #else\n    position = s.position;\n    #endif\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n    vec3 diffuseContrib = diffuse / 3.14159265359;\n    vec3 N = normalize(s.normal);\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    float NV = max(abs(dot(N, V)), 0.0);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 finalColor = vec3(0.0);\n    int numLights = CC_PIPELINE_TYPE == 0 ? LIGHTS_PER_PASS : int(cc_lightDir[0].w);\n    for (int i = 0; i < LIGHTS_PER_PASS; i++) {\n      if (i >= numLights) break;\n      vec3 SLU = cc_lightPos[i].xyz - position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = max(dot(N, SL), 0.0);\n      float SNH = max(dot(N, SH), 0.0);\n      float distSqr = dot(SLU, SLU);\n      float litRadius = cc_lightSizeRangeAngle[i].x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = 3.14159265359 * (litRadiusSqr / max(litRadiusSqr , distSqr));\n      float attRadiusSqrInv = 1.0 / max(cc_lightSizeRangeAngle[i].y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\n      if (cc_lightPos[i].w > 0.0) {\n        float cosInner = max(dot(-cc_lightDir[i].xyz, SL), 0.01);\n        float cosOuter = cc_lightSizeRangeAngle[i].z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -cc_lightDir[i].xyz, litAngleScale, litAngleOffset);\n      }\n      vec3 lightColor = cc_lightColor[i].rgb;\n      float shadow = 1.0;\n      #if CC_RECEIVE_SHADOW\n        if (cc_lightPos[i].w > 0.0 && cc_lightSizeRangeAngle[i].w > 0.0) {\n          {\n            float pcf = cc_shadowWHPBInfo.z;\n            if (pcf > 1.9) shadow = CCGetSpotLightShadowFactorSoft2X(shadowPos, position);\n            else if (pcf > 0.9) shadow = CCGetSpotLightShadowFactorSoft(shadowPos, position);\n            else shadow = CCGetSpotLightShadowFactorHard(shadowPos, position);\n          }\n        }\n      #endif\n      lightColor *= shadow;\n      finalColor += SNL * lightColor * cc_lightColor[i].w * illum * att * (diffuseContrib + lspec);\n    }\n    return vec4(finalColor, 0.0);\n  }\n  #endif\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 1\n  layout(set = 1, binding = 7) readonly buffer b_ccLightsBuffer { vec4 b_ccLights[]; };\n  layout(set = 1, binding = 8) readonly buffer b_clusterLightIndicesBuffer { uint b_clusterLightIndices[]; };\n  layout(set = 1, binding = 9) readonly buffer b_clusterLightGridBuffer { uvec4 b_clusterLightGrid[]; };\n  struct CCLight\n  {\n    vec4 cc_lightPos;\n    vec4 cc_lightColor;\n    vec4 cc_lightSizeRangeAngle;\n    vec4 cc_lightDir;\n  };\n  struct Cluster\n  {\n    vec3 minBounds;\n    vec3 maxBounds;\n  };\n  struct LightGrid\n  {\n    uint offset;\n    uint ccLights;\n  };\n  CCLight getCCLight(uint i)\n  {\n    CCLight light;\n    light.cc_lightPos = b_ccLights[4u * i + 0u];\n    light.cc_lightColor = b_ccLights[4u * i + 1u];\n    light.cc_lightSizeRangeAngle = b_ccLights[4u * i + 2u];\n    light.cc_lightDir = b_ccLights[4u * i + 3u];\n    return light;\n  }\n  LightGrid getLightGrid(uint cluster)\n  {\n    uvec4 gridvec = b_clusterLightGrid[cluster];\n    LightGrid grid;\n    grid.offset = gridvec.x;\n    grid.ccLights = gridvec.y;\n    return grid;\n  }\n  uint getGridLightIndex(uint start, uint offset)\n  {\n    return b_clusterLightIndices[start + offset];\n  }\n  uint getClusterZIndex(vec4 worldPos)\n  {\n    float scale = float(24) / log(cc_nearFar.y / cc_nearFar.x);\n    float bias = -(float(24) * log(cc_nearFar.x) / log(cc_nearFar.y / cc_nearFar.x));\n    float eyeDepth = -(cc_matView * worldPos).z;\n    uint zIndex = uint(max(log(eyeDepth) * scale + bias, 0.0));\n    return zIndex;\n  }\n  uint getClusterIndex(vec4 fragCoord, vec4 worldPos)\n  {\n    uint zIndex = getClusterZIndex(worldPos);\n    float clusterSizeX = ceil(cc_viewPort.z / float(16));\n    float clusterSizeY = ceil(cc_viewPort.w / float(8));\n    uvec3 indices = uvec3(uvec2(fragCoord.xy / vec2(clusterSizeX, clusterSizeY)), zIndex);\n    uint cluster = (16u * 8u) * indices.z + 16u * indices.y + indices.x;\n    return cluster;\n  }\n  vec4 CCClusterShadingAdditive (StandardSurface s, vec4 shadowPos) {\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n    vec3 diffuseContrib = diffuse / 3.14159265359;\n    vec3 position;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    position = unpackHighpData(s.position, s.position_fract_part);\n    #else\n    position = s.position;\n    #endif\n    vec3 N = normalize(s.normal);\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    float NV = max(abs(dot(N, V)), 0.001);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 finalColor = vec3(0.0);\n    uint cluster = getClusterIndex(gl_FragCoord, vec4(position, 1.0));\n    LightGrid grid = getLightGrid(cluster);\n    uint numLights = grid.ccLights;\n    for (uint i = 0u; i < 100u; i++) {\n      if (i >= numLights) break;\n      uint lightIndex = getGridLightIndex(grid.offset, i);\n      CCLight light = getCCLight(lightIndex);\n      vec3 SLU = light.cc_lightPos.xyz - position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = max(dot(N, SL), 0.001);\n      float SNH = max(dot(N, SH), 0.0);\n      float distSqr = dot(SLU, SLU);\n      float litRadius = light.cc_lightSizeRangeAngle.x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = 3.14159265359 * (litRadiusSqr / max(litRadiusSqr , distSqr));\n      float attRadiusSqrInv = 1.0 / max(light.cc_lightSizeRangeAngle.y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\n      if (light.cc_lightPos.w > 0.0) {\n        float cosInner = max(dot(-light.cc_lightDir.xyz, SL), 0.01);\n        float cosOuter = light.cc_lightSizeRangeAngle.z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -light.cc_lightDir.xyz, litAngleScale, litAngleOffset);\n      }\n      vec3 lightColor = light.cc_lightColor.rgb;\n      float shadow = 1.0;\n      #if CC_RECEIVE_SHADOW\n        if (light.cc_lightPos.w > 0.0) {\n          {\n            float pcf = cc_shadowWHPBInfo.z;\n            if (pcf > 1.9) shadow = CCGetSpotLightShadowFactorSoft2X(shadowPos, position);\n            else if (pcf > 0.9) shadow = CCGetSpotLightShadowFactorSoft(shadowPos, position);\n            else shadow = CCGetSpotLightShadowFactorHard(shadowPos, position);\n          }\n        }\n      #endif\n      lightColor *= shadow;\n      finalColor += SNL * lightColor * light.cc_lightColor.w * illum * att * (diffuseContrib + lspec);\n    }\n    return vec4(finalColor, 0.0);\n  }\n  #endif\n  layout(location = 0) out vec4 fragColorX;\n  void main () {\n    StandardSurface s; surf(s);\n    #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 1\n    vec4 color = CCClusterShadingAdditive(s, v_shadowPos);\n    #else\n    vec4 color = CCStandardShadingAdditive(s, v_shadowPos);\n    #endif\n    CC_APPLY_FOG(color, s.position.xyz);\n    fragColorX = CCFragOutput(color);\n  }\n#elif (CC_PIPELINE_TYPE == 0 || CC_FORCE_FORWARD_SHADING)\n  layout(location = 0) out vec4 fragColorX;\n  void main () {\n    StandardSurface s; surf(s);\n    vec4 color = CCStandardShadingBase(s, v_shadowPos);\n    CC_APPLY_FOG(color, s.position.xyz);\n    fragColorX = CCFragOutput(color);\n  }\n#elif CC_PIPELINE_TYPE == 1\n  vec2 signNotZero(vec2 v) {\n    return vec2((v.x >= 0.0) ? +1.0 : -1.0, (v.y >= 0.0) ? +1.0 : -1.0);\n  }\n  vec2 float32x3_to_oct(in vec3 v) {\n    vec2 p = v.xy * (1.0 / (abs(v.x) + abs(v.y) + abs(v.z)));\n    return (v.z <= 0.0) ? ((1.0 - abs(p.yx)) * signNotZero(p)) : p;\n  }\n  layout(location = 0) out vec4 fragColor0;\n  layout(location = 1) out vec4 fragColor1;\n  layout(location = 2) out vec4 fragColor2;\n  void main () {\n    StandardSurface s; surf(s);\n    fragColor0 = s.albedo;\n    fragColor1 = vec4(float32x3_to_oct(s.normal), s.roughness, s.metallic);\n    fragColor2 = vec4(s.emissive, s.occlusion);\n  }\n#endif"},"glsl3":{"vert":"\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nin vec3 a_position;\nin vec3 a_normal;\nin vec2 a_texCoord;\nin vec4 a_tangent;\n#if CC_USE_MORPH\n    in float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n  layout(std140) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n    in vec4 a_joints;\n  in vec4 a_weights;\n  #if CC_USE_BAKED_ANIMATION\n    #if USE_INSTANCING\n      in highp vec4 a_jointAnimInfo;\n    #endif\n    layout(std140) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(std140) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    uniform highp sampler2D cc_jointTexture;\n      #else\n    layout(std140) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout StandardVertInput attr) {\n    mat4 m = skinMatrix();\n    attr.position = m * attr.position;\n    attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n    attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n  }\n#endif\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if USE_INSTANCING\n  in vec4 a_matWorld0;\n  in vec4 a_matWorld1;\n  in vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    in vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  in float a_dyn_batch_id;\n  layout(std140) uniform CCLocalBatched {\n    highp mat4 cc_matWorlds[10];\n  };\n#else\n  layout(std140) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n  };\n#endif\nlayout(std140) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n  #if CC_USE_FOG == 0\n\tfactor = LinearFog(pos);\n  #elif CC_USE_FOG == 1\n    factor = ExpFog(pos);\n  #elif CC_USE_FOG == 2\n    factor = ExpSquaredFog(pos);\n  #elif CC_USE_FOG == 3\n    factor = LayeredFog(pos);\n  #else\n    factor = 1.0;\n  #endif\n}\n#if !CC_USE_ACCURATE_FOG\nout float v_fog_factor;\n#endif\nvoid CC_TRANSFER_FOG(vec4 pos) {\n#if !CC_USE_ACCURATE_FOG\n    CC_TRANSFER_FOG_BASE(pos, v_fog_factor);\n#endif\n}\nout highp vec4 v_shadowPos;\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotLightingMap;\n#endif\n#if USE_VERTEX_COLOR\n  in vec4 a_color;\n  out vec4 v_color;\n#endif\nout vec3 v_position;\nout vec3 v_normal;\nout vec2 v_uv;\nout vec2 v_uv1;\n#if USE_NORMAL_MAP\n  out vec3 v_tangent;\n  out vec3 v_bitangent;\n#endif\n#if HAS_SECOND_UV || USE_LIGHTMAP\n  in vec2 a_texCoord1;\n#endif\n#if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n  out vec3 v_luv;\n  void CCLightingMapCaclUV()\n  {\n  #if !USE_INSTANCING\n    v_luv.xy = cc_lightingMapUVParam.xy + a_texCoord1 * cc_lightingMapUVParam.zw;\n    v_luv.z = cc_lightingMapUVParam.z;\n  #else\n    v_luv.xy = a_lightingMapUVParam.xy + a_texCoord1 * a_lightingMapUVParam.zw;\n    v_luv.z = a_lightingMapUVParam.z;\n  #endif\n  }\n#endif\nvoid main () {\n  StandardVertInput In;\n      In.position = vec4(a_position, 1.0);\n      In.normal = a_normal;\n      In.tangent = a_tangent;\n    #if CC_USE_MORPH\n      applyMorph(In);\n    #endif\n    #if CC_USE_SKINNING\n      CCSkin(In);\n    #endif\n  mat4 matWorld, matWorldIT;\n    #if USE_INSTANCING\n      matWorld = mat4(\n        vec4(a_matWorld0.xyz, 0.0),\n        vec4(a_matWorld1.xyz, 0.0),\n        vec4(a_matWorld2.xyz, 0.0),\n        vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n      );\n      matWorldIT = matWorld;\n    #elif USE_BATCHING\n      matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n      matWorldIT = matWorld;\n    #else\n      matWorld = cc_matWorld;\n      matWorldIT = cc_matWorldIT;\n    #endif\n  vec4 pos = matWorld * In.position;\n  v_position = pos.xyz;\n  v_normal = normalize((matWorldIT * vec4(In.normal, 0.0)).xyz);\n  #if USE_TWOSIDE\n    vec3 viewDirect = normalize(cc_cameraPos.xyz - v_position);\n    v_normal *= dot(v_normal, viewDirect) < 0.0 ? -1.0 : 1.0;\n  #endif\n  #if USE_NORMAL_MAP\n    v_tangent = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n    v_bitangent = cross(v_normal, v_tangent) * In.tangent.w;\n  #endif\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if SAMPLE_FROM_RT\n    v_uv = cc_cameraPos.w > 1.0 ? vec2(v_uv.x, 1.0 - v_uv.y) : v_uv;\n  #endif\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n    #if SAMPLE_FROM_RT\n      v_uv1 = cc_cameraPos.w > 1.0 ? vec2(v_uv1.x, 1.0 - v_uv1.y) : v_uv1;\n    #endif\n  #endif\n  #if USE_VERTEX_COLOR\n    v_color = a_color;\n  #endif\n  CC_TRANSFER_FOG(pos);\n  v_shadowPos = cc_matLightViewProj * pos;\n  #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    CCLightingMapCaclUV();\n  #endif\n  gl_Position = cc_matProj * (cc_matView * matWorld) * In.position;\n}","frag":"\nprecision highp float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(std140) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n  #if CC_USE_FOG == 0\n\tfactor = LinearFog(pos);\n  #elif CC_USE_FOG == 1\n    factor = ExpFog(pos);\n  #elif CC_USE_FOG == 2\n    factor = ExpSquaredFog(pos);\n  #elif CC_USE_FOG == 3\n    factor = LayeredFog(pos);\n  #else\n    factor = 1.0;\n  #endif\n}\nvoid CC_APPLY_FOG_BASE(inout vec4 color, float factor) {\n  color = vec4(mix(cc_fogColor.rgb, color.rgb, factor), color.a);\n}\n#if !CC_USE_ACCURATE_FOG\nin float v_fog_factor;\n#endif\nvoid CC_APPLY_FOG(inout vec4 color) {\n#if !CC_USE_ACCURATE_FOG\n    CC_APPLY_FOG_BASE(color, v_fog_factor);\n#endif\n}\nvoid CC_APPLY_FOG(inout vec4 color, vec3 worldPos) {\n#if CC_USE_ACCURATE_FOG\n    float factor;\n    CC_TRANSFER_FOG_BASE(vec4(worldPos, 1.0), factor);\n#else\n    float factor = v_fog_factor;\n#endif\n    CC_APPLY_FOG_BASE(color, factor);\n}\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\nhighp float unpackHighpData (float mainPart, float modPart) {\n  highp float data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out float mainPart, out float modPart, highp float data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp float unpackHighpData (float mainPart, float modPart, const float modValue) {\n  highp float data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out float mainPart, out float modPart, highp float data, const float modValue) {\n  highp float divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec2 unpackHighpData (vec2 mainPart, vec2 modPart) {\n  highp vec2 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec2 unpackHighpData (vec2 mainPart, vec2 modPart, const float modValue) {\n  highp vec2 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data, const float modValue) {\n  highp vec2 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec3 unpackHighpData (vec3 mainPart, vec3 modPart) {\n  highp vec3 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec3 unpackHighpData (vec3 mainPart, vec3 modPart, const float modValue) {\n  highp vec3 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data, const float modValue) {\n  highp vec3 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec4 unpackHighpData (vec4 mainPart, vec4 modPart) {\n  highp vec4 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec4 unpackHighpData (vec4 mainPart, vec4 modPart, const float modValue) {\n  highp vec4 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data, const float modValue) {\n  highp vec4 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nfloat CCGetLinearDepthFromViewSpace(vec3 viewPos) {\n  float dist = length(viewPos);\n  return (dist - cc_shadowNFLSInfo.x) / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n  vec4 viewStartPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  return CCGetLinearDepthFromViewSpace(viewStartPos.xyz);\n}\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotLightingMap;\n  vec4 ApplyShadowDepthBias_FaceNormal(vec4 shadowPos, vec3 worldNormal)\n  {\n    vec4 newShadowPos = shadowPos;\n    if(cc_shadowLPNNInfo.z > 0.0001)\n    {\n      vec4 viewNormal = cc_matLightView * vec4(worldNormal, 0.0);\n      if(viewNormal.z < 0.1)\n        newShadowPos.xy += viewNormal.xy * cc_shadowProjInfo.xy * cc_shadowLPNNInfo.z * clamp(viewNormal.z, 0.001, 0.1);\n    }\n    return newShadowPos;\n  }\n  vec4 ApplyShadowDepthBias_Perspective(vec4 shadowPos, float viewspaceDepthBias)\n  {\n    vec3 viewSpacePos;\n    viewSpacePos.xy = shadowPos.xy * cc_shadowProjInfo.zw;\n    viewSpacePos.z = shadowPos.z * cc_shadowInvProjDepthInfo.x + shadowPos.w * cc_shadowInvProjDepthInfo.y;\n    viewSpacePos.xyz += cc_shadowProjDepthInfo.z * normalize(viewSpacePos.xyz) * viewspaceDepthBias;\n    vec4 clipSpacePos;\n    clipSpacePos.xy = viewSpacePos.xy * cc_shadowProjInfo.xy;\n    clipSpacePos.zw = viewSpacePos.z * cc_shadowProjDepthInfo.xz + vec2(cc_shadowProjDepthInfo.y, 0.0);\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      clipSpacePos.z = CCGetLinearDepthFromViewSpace(viewSpacePos.xyz);\n      clipSpacePos.z = (clipSpacePos.z * 2.0 - 1.0) * clipSpacePos.w;\n    }\n    return clipSpacePos;\n  }\n  vec4 ApplyShadowDepthBias_Orthographic(vec4 shadowPos, float viewspaceDepthBias)\n  {\n    float coeffA = cc_shadowProjDepthInfo.x;\n    float coeffB = cc_shadowProjDepthInfo.y;\n    float viewSpacePos_z = (shadowPos.z - coeffB) / coeffA;\n    viewSpacePos_z += viewspaceDepthBias;\n    vec4 result = shadowPos;\n    result.z = viewSpacePos_z * coeffA + coeffB;\n    return result;\n  }\n  float CCGetShadowFactorHard (vec4 shadowPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float shadow = 0.0;\n    float closestDepth = 0.0;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      closestDepth = dot(texture(cc_shadowMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0));\n    } else {\n      closestDepth = texture(cc_shadowMap, clipPos.xy).x;\n    }\n    shadow = step(clipPos.z, closestDepth);\n    return shadow;\n  }\n  float CCGetShadowFactorSoft (vec4 shadowPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float offsetDepth = clipPos.z;\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    vec2 clipPos_offset = clipPos.xy + oneTap;\n    float block0, block1, block2, block3;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      block0 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n      block1 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)).x);\n      block2 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)).x);\n      block3 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)).x);\n    }\n    float coefX   = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block2, block3, coefX);\n    float coefY   = mod(clipPos.y, oneTap.y) * mapSize.y;\n    return mix(resultX, resultY, coefY);\n  }\n  float CCGetShadowFactorSoft2X (vec4 shadowPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float offsetDepth = clipPos.z;\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    float clipPos_offset_L = clipPos.x - oneTap.x;\n    float clipPos_offset_R = clipPos.x + oneTap.x;\n    float clipPos_offset_U = clipPos.y - oneTap.y;\n    float clipPos_offset_D = clipPos.y + oneTap.y;\n    float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      block0 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)).x);\n      block1 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)).x);\n      block2 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)).x);\n      block3 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)).x);\n      block4 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n      block5 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)).x);\n      block6 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)).x);\n      block7 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)).x);\n      block8 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)).x);\n    }\n    float coefX = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float coefY = mod(clipPos.y, oneTap.y) * mapSize.y;\n    float shadow = 0.0;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block3, block4, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block1, block2, coefX);\n    resultY = mix(block4, block5, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block3, block4, coefX);\n    resultY = mix(block6, block7, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    resultX = mix(block4, block5, coefX);\n    resultY = mix(block7, block8, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    return shadow * 0.25;\n  }\n  float CCGetSpotLightShadowFactorHard (vec4 shadowPos, vec3 worldPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float shadow = 0.0;\n    float closestDepth = 0.0;\n    float depth = clipPos.z;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      closestDepth = dot(texture(cc_spotLightingMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0));\n    } else {\n      closestDepth = texture(cc_spotLightingMap, clipPos.xy).x;\n    }\n    shadow = step(depth, closestDepth);\n    return shadow;\n  }\n  float CCGetSpotLightShadowFactorSoft (vec4 shadowPos, vec3 worldPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float depth = 0.0;\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      depth = CCGetLinearDepth(worldPos);\n    } else {\n      depth = clipPos.z;\n    }\n    float bias = cc_shadowWHPBInfo.w;\n    vec2 oneTap = 1.0 / cc_shadowWHPBInfo.xy;\n    vec2 clipPos_offset = clipPos.xy + oneTap;\n    float block0, block1, block2, block3;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      block0 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)).x);\n      block1 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos.y)).x);\n      block2 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset.y)).x);\n      block3 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos_offset.y)).x);\n    }\n    float coefX   = mod(clipPos.x, oneTap.x) * cc_shadowWHPBInfo.x;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block2, block3, coefX);\n    float coefY   = mod(clipPos.y, oneTap.y) * cc_shadowWHPBInfo.y;\n    return mix(resultX, resultY, coefY);\n  }\n  float CCGetSpotLightShadowFactorSoft2X (vec4 shadowPos, vec3 worldPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float depth = 0.0;\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      depth = CCGetLinearDepth(worldPos);\n    } else {\n      depth = clipPos.z;\n    }\n    float bias = cc_shadowWHPBInfo.w;\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    float clipPos_offset_L = clipPos.x - oneTap.x;\n    float clipPos_offset_R = clipPos.x + oneTap.x;\n    float clipPos_offset_U = clipPos.y - oneTap.y;\n    float clipPos_offset_D = clipPos.y + oneTap.y;\n    float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      block0 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_U)).x);\n      block1 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_U)).x);\n      block2 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_U)).x);\n      block3 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos.y)).x);\n      block4 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)).x);\n      block5 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos.y)).x);\n      block6 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_D)).x);\n      block7 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_D)).x);\n      block8 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_D)).x);\n    }\n    float coefX = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float coefY = mod(clipPos.y, oneTap.y) * mapSize.y;\n    float shadow = 0.0;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block3, block4, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block1, block2, coefX);\n    resultY = mix(block4, block5, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block3, block4, coefX);\n    resultY = mix(block6, block7, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    resultX = mix(block4, block5, coefX);\n    resultY = mix(block7, block8, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    return shadow * 0.25;\n  }\n#endif\n#if CC_USE_IBL\n  uniform samplerCube cc_environment;\n  vec4 fragTextureLod (sampler2D tex, vec2 coord, float lod) {\n      return textureLod(tex, coord, lod);\n  }\n  vec4 fragTextureLod (samplerCube tex, vec3 coord, float lod) {\n      return textureLod(tex, coord, lod);\n  }\n  vec3 unpackRGBE (vec4 rgbe) {\n    return rgbe.rgb * pow(1.1, rgbe.a * 255.0 - 128.0);\n  }\n  #if CC_USE_DIFFUSEMAP\n    uniform samplerCube cc_diffuseMap;\n  #endif\n#endif\nfloat GGXMobile (float roughness, float NoH, vec3 H, vec3 N) {\n  vec3 NxH = cross(N, H);\n  float OneMinusNoHSqr = dot(NxH, NxH);\n  float a = roughness * roughness;\n  float n = NoH * a;\n  float p = a / (OneMinusNoHSqr + n * n);\n  return p * p;\n}\nfloat CalcSpecular (float roughness, float NoH, vec3 H, vec3 N) {\n  return (roughness * 0.25 + 0.25) * GGXMobile(roughness, NoH, H, N);\n}\nvec3 BRDFApprox (vec3 specular, float roughness, float NoV) {\n  const vec4 c0 = vec4(-1.0, -0.0275, -0.572, 0.022);\n  const vec4 c1 = vec4(1.0, 0.0425, 1.04, -0.04);\n  vec4 r = roughness * c0 + c1;\n  float a004 = min(r.x * r.x, exp2(-9.28 * NoV)) * r.x + r.y;\n  vec2 AB = vec2(-1.04, 1.04) * a004 + r.zw;\n  AB.y *= clamp(50.0 * specular.g, 0.0, 1.0);\n  return specular * AB.x + AB.y;\n}\n#if USE_REFLECTION_DENOISE\n  vec3 GetEnvReflectionWithMipFiltering(vec3 R, float roughness, float mipCount, float denoiseIntensity) {\n    #if CC_USE_IBL\n    \tfloat mip = roughness * mipCount;\n    \tfloat delta = (dot(dFdx(R), dFdy(R))) * 1000.0;\n    \tfloat mipBias = mix(0.0, 5.0, clamp(delta, 0.0, 1.0));\n    \tvec4 biased = fragTextureLod(cc_environment, R, mip + mipBias);\n     \tvec4 filtered = texture(cc_environment, R);\n      #if CC_USE_IBL == 2\n      \tbiased.rgb = unpackRGBE(biased);\n      \tfiltered.rgb = unpackRGBE(filtered);\n      #else\n      \tbiased.rgb = SRGBToLinear(biased.rgb);\n      \tfiltered.rgb = SRGBToLinear(filtered.rgb);\n      #endif\n      return mix(biased.rgb, filtered.rgb, denoiseIntensity);\n    #else\n      return vec3(0.0, 0.0, 0.0);\n    #endif\n  }\n#endif\nstruct StandardSurface {\n  vec4 albedo;\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  vec3 position, position_fract_part;\n  #else\n  vec3 position;\n  #endif\n  vec3 normal;\n  vec3 emissive;\n  vec3 lightmap;\n  float lightmap_test;\n  float roughness;\n  float metallic;\n  float occlusion;\n};\nvec4 CCStandardShadingBase (StandardSurface s, vec4 shadowPos) {\n  vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n  vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n  vec3 position;\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  position = unpackHighpData(s.position, s.position_fract_part);\n  #else\n  position = s.position;\n  #endif\n  vec3 N = normalize(s.normal);\n  vec3 V = normalize(cc_cameraPos.xyz - position);\n  float NV = max(abs(dot(N, V)), 0.0);\n  specular = BRDFApprox(specular, s.roughness, NV);\n  vec3 L = normalize(-cc_mainLitDir.xyz);\n  vec3 H = normalize(L + V);\n  float NH = max(dot(N, H), 0.0);\n  float NL = max(dot(N, L), 0.0);\n  vec3 finalColor = NL * cc_mainLitColor.rgb * cc_mainLitColor.w;\n  vec3 diffuseContrib = diffuse;\n  #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    if (s.lightmap_test > 0.0001) {\n      finalColor = s.lightmap.rgb;\n    }\n  #else\n    diffuseContrib /= 3.14159265359;\n  #endif\n  vec3 specularContrib = specular * CalcSpecular(s.roughness, NH, H, N);\n  vec3 dirlightContrib = (diffuseContrib + specularContrib);\n  float shadow = 1.0;\n  #if CC_RECEIVE_SHADOW\n    if (NL > 0.0 && cc_mainLitDir.w > 0.0) {\n      {\n        vec4 pos = ApplyShadowDepthBias_FaceNormal(shadowPos, N);\n        float pcf = cc_shadowWHPBInfo.z;\n        if (pcf > 1.9) shadow = CCGetShadowFactorSoft2X(pos);\n        else if (pcf > 0.9) shadow = CCGetShadowFactorSoft(pos);\n        else shadow = CCGetShadowFactorHard(pos);\n        shadow = mix(shadow, 1.0, cc_shadowNFLSInfo.w);\n      }\n    }\n  #endif\n  dirlightContrib *= shadow;\n  finalColor *= dirlightContrib;\n  float fAmb = 0.5 - N.y * 0.5;\n  vec3 ambDiff = mix(cc_ambientSky.rgb, cc_ambientGround.rgb, fAmb);\n  #if CC_USE_IBL\n    #if CC_USE_DIFFUSEMAP\n      vec4 diffuseMap = texture(cc_diffuseMap, N);\n      #if CC_USE_DIFFUSEMAP == 2\n        ambDiff = unpackRGBE(diffuseMap);\n      #else\n        ambDiff = SRGBToLinear(diffuseMap.rgb);\n      #endif\n    #endif\n    vec3 R = normalize(reflect(-V, N));\n    #if USE_REFLECTION_DENOISE\n      vec3 env = GetEnvReflectionWithMipFiltering(R, s.roughness, cc_ambientGround.w, 0.6);\n    #else\n      vec4 envmap = fragTextureLod(cc_environment, R, s.roughness * cc_ambientGround.w);\n      #if CC_USE_IBL == 2\n        vec3 env = unpackRGBE(envmap);\n      #else\n        vec3 env = SRGBToLinear(envmap.rgb);\n      #endif\n    #endif\n    finalColor += env * cc_ambientSky.w * specular * s.occlusion;\n  #endif\n  finalColor += ambDiff.rgb * cc_ambientSky.w * diffuse * s.occlusion;\n  finalColor += s.emissive;\n  return vec4(finalColor, s.albedo.a);\n}\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = ACESToneMap(color.rgb);\n  #endif\n  color.rgb = sqrt(color.rgb);\n  return color;\n}\nin highp vec4 v_shadowPos;\n#if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n  in vec3 v_luv;\n  uniform sampler2D cc_lightingMap;\n  vec3 UnpackLightingmap(vec4 color) {\n    vec3 c;\n    float e = 1.0 + color.a * (8.0 - 1.0);\n    c.r = color.r * e;\n    c.g = color.g * e;\n    c.b = color.b * e;\n    return c;\n  }\n#endif\nin vec3 v_position;\nin vec2 v_uv;\nin vec2 v_uv1;\nin vec3 v_normal;\n#if USE_VERTEX_COLOR\n  in vec4 v_color;\n#endif\n#if USE_ALBEDO_MAP\n  uniform sampler2D albedoMap;\n#endif\n#if USE_NORMAL_MAP\n  in vec3 v_tangent;\n  in vec3 v_bitangent;\n  uniform sampler2D normalMap;\n#endif\n#if USE_PBR_MAP\n  uniform sampler2D pbrMap;\n#endif\n#if USE_METALLIC_ROUGHNESS_MAP\n  uniform sampler2D metallicRoughnessMap;\n#endif\n#if USE_OCCLUSION_MAP\n  uniform sampler2D occlusionMap;\n#endif\n#if USE_EMISSIVE_MAP\n  uniform sampler2D emissiveMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvoid surf (out StandardSurface s) {\n  vec4 baseColor = albedo;\n  #if USE_VERTEX_COLOR\n    baseColor.rgb *= SRGBToLinear(v_color.rgb);\n    baseColor.a *= v_color.a;\n  #endif\n  #if USE_ALBEDO_MAP\n    vec4 texColor = texture(albedoMap, ALBEDO_UV);\n    texColor.rgb = SRGBToLinear(texColor.rgb);\n    baseColor *= texColor;\n  #endif\n  s.albedo = baseColor;\n  s.albedo.rgb *= albedoScaleAndCutoff.xyz;\n  #if USE_ALPHA_TEST\n    if (s.albedo.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n  #endif\n  #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    vec4 lightColor = texture(cc_lightingMap, v_luv.xy);\n    s.lightmap = UnpackLightingmap(lightColor);\n    s.lightmap_test = v_luv.z;\n  #endif\n  s.normal = v_normal;\n  #if USE_NORMAL_MAP\n    vec3 nmmp = texture(normalMap, NORMAL_UV).xyz - vec3(0.5);\n    s.normal =\n      (nmmp.x * emissiveScaleParam.w) * normalize(v_tangent) +\n      (nmmp.y * emissiveScaleParam.w) * normalize(v_bitangent) +\n      nmmp.z * normalize(s.normal);\n  #endif\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  packHighpData(s.position, s.position_fract_part, v_position);\n  #else\n  s.position = v_position;\n  #endif\n  vec4 pbr = pbrParams;\n  #if USE_PBR_MAP\n    vec4 res = texture(pbrMap, PBR_UV);\n    pbr.x *= res.r;\n    pbr.y *= res.g;\n    pbr.z *= res.b;\n    pbr.w *= res.a;\n  #endif\n  #if USE_METALLIC_ROUGHNESS_MAP\n    vec4 metallicRoughness = texture(metallicRoughnessMap, PBR_UV);\n    pbr.z *= metallicRoughness.b;\n    pbr.y *= metallicRoughness.g;\n  #endif\n  #if USE_OCCLUSION_MAP\n    pbr.x *= texture(occlusionMap, PBR_UV).r;\n  #endif\n  s.occlusion = pbr.x;\n  s.roughness = pbr.y;\n  s.metallic = pbr.z;\n  s.emissive = emissive.rgb * emissiveScaleParam.xyz;\n  #if USE_EMISSIVE_MAP\n    s.emissive *= SRGBToLinear(texture(emissiveMap, EMISSIVE_UV).rgb);\n  #endif\n}\n#if CC_FORWARD_ADD\n  #if CC_PIPELINE_TYPE == 0\n  # define LIGHTS_PER_PASS 1\n  #else\n  # define LIGHTS_PER_PASS 10\n  #endif\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n  layout(std140) uniform CCForwardLight {\n    highp vec4 cc_lightPos[LIGHTS_PER_PASS];\n    vec4 cc_lightColor[LIGHTS_PER_PASS];\n    vec4 cc_lightSizeRangeAngle[LIGHTS_PER_PASS];\n    vec4 cc_lightDir[LIGHTS_PER_PASS];\n  };\n  #endif\n  float SmoothDistAtt (float distSqr, float invSqrAttRadius) {\n    float factor = distSqr * invSqrAttRadius;\n    float smoothFactor = clamp(1.0 - factor * factor, 0.0, 1.0);\n    return smoothFactor * smoothFactor;\n  }\n  float GetDistAtt (float distSqr, float invSqrAttRadius) {\n    float attenuation = 1.0 / max(distSqr, 0.01*0.01);\n    attenuation *= SmoothDistAtt(distSqr , invSqrAttRadius);\n    return attenuation;\n  }\n  float GetAngleAtt (vec3 L, vec3 litDir, float litAngleScale, float litAngleOffset) {\n    float cd = dot(litDir, L);\n    float attenuation = clamp(cd * litAngleScale + litAngleOffset, 0.0, 1.0);\n    return (attenuation * attenuation);\n  }\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n  vec4 CCStandardShadingAdditive (StandardSurface s, vec4 shadowPos) {\n    vec3 position;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    position = unpackHighpData(s.position, s.position_fract_part);\n    #else\n    position = s.position;\n    #endif\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n    vec3 diffuseContrib = diffuse / 3.14159265359;\n    vec3 N = normalize(s.normal);\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    float NV = max(abs(dot(N, V)), 0.0);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 finalColor = vec3(0.0);\n    int numLights = CC_PIPELINE_TYPE == 0 ? LIGHTS_PER_PASS : int(cc_lightDir[0].w);\n    for (int i = 0; i < LIGHTS_PER_PASS; i++) {\n      if (i >= numLights) break;\n      vec3 SLU = cc_lightPos[i].xyz - position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = max(dot(N, SL), 0.0);\n      float SNH = max(dot(N, SH), 0.0);\n      float distSqr = dot(SLU, SLU);\n      float litRadius = cc_lightSizeRangeAngle[i].x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = 3.14159265359 * (litRadiusSqr / max(litRadiusSqr , distSqr));\n      float attRadiusSqrInv = 1.0 / max(cc_lightSizeRangeAngle[i].y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\n      if (cc_lightPos[i].w > 0.0) {\n        float cosInner = max(dot(-cc_lightDir[i].xyz, SL), 0.01);\n        float cosOuter = cc_lightSizeRangeAngle[i].z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -cc_lightDir[i].xyz, litAngleScale, litAngleOffset);\n      }\n      vec3 lightColor = cc_lightColor[i].rgb;\n      float shadow = 1.0;\n      #if CC_RECEIVE_SHADOW\n        if (cc_lightPos[i].w > 0.0 && cc_lightSizeRangeAngle[i].w > 0.0) {\n          {\n            float pcf = cc_shadowWHPBInfo.z;\n            if (pcf > 1.9) shadow = CCGetSpotLightShadowFactorSoft2X(shadowPos, position);\n            else if (pcf > 0.9) shadow = CCGetSpotLightShadowFactorSoft(shadowPos, position);\n            else shadow = CCGetSpotLightShadowFactorHard(shadowPos, position);\n          }\n        }\n      #endif\n      lightColor *= shadow;\n      finalColor += SNL * lightColor * cc_lightColor[i].w * illum * att * (diffuseContrib + lspec);\n    }\n    return vec4(finalColor, 0.0);\n  }\n  #endif\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 1\n  layout(std430, binding = 4) readonly buffer b_ccLightsBuffer { vec4 b_ccLights[]; };\n  layout(std430, binding = 5) readonly buffer b_clusterLightIndicesBuffer { uint b_clusterLightIndices[]; };\n  layout(std430, binding = 6) readonly buffer b_clusterLightGridBuffer { uvec4 b_clusterLightGrid[]; };\n  struct CCLight\n  {\n    vec4 cc_lightPos;\n    vec4 cc_lightColor;\n    vec4 cc_lightSizeRangeAngle;\n    vec4 cc_lightDir;\n  };\n  struct Cluster\n  {\n    vec3 minBounds;\n    vec3 maxBounds;\n  };\n  struct LightGrid\n  {\n    uint offset;\n    uint ccLights;\n  };\n  CCLight getCCLight(uint i)\n  {\n    CCLight light;\n    light.cc_lightPos = b_ccLights[4u * i + 0u];\n    light.cc_lightColor = b_ccLights[4u * i + 1u];\n    light.cc_lightSizeRangeAngle = b_ccLights[4u * i + 2u];\n    light.cc_lightDir = b_ccLights[4u * i + 3u];\n    return light;\n  }\n  LightGrid getLightGrid(uint cluster)\n  {\n    uvec4 gridvec = b_clusterLightGrid[cluster];\n    LightGrid grid;\n    grid.offset = gridvec.x;\n    grid.ccLights = gridvec.y;\n    return grid;\n  }\n  uint getGridLightIndex(uint start, uint offset)\n  {\n    return b_clusterLightIndices[start + offset];\n  }\n  uint getClusterZIndex(vec4 worldPos)\n  {\n    float scale = float(24) / log(cc_nearFar.y / cc_nearFar.x);\n    float bias = -(float(24) * log(cc_nearFar.x) / log(cc_nearFar.y / cc_nearFar.x));\n    float eyeDepth = -(cc_matView * worldPos).z;\n    uint zIndex = uint(max(log(eyeDepth) * scale + bias, 0.0));\n    return zIndex;\n  }\n  uint getClusterIndex(vec4 fragCoord, vec4 worldPos)\n  {\n    uint zIndex = getClusterZIndex(worldPos);\n    float clusterSizeX = ceil(cc_viewPort.z / float(16));\n    float clusterSizeY = ceil(cc_viewPort.w / float(8));\n    uvec3 indices = uvec3(uvec2(fragCoord.xy / vec2(clusterSizeX, clusterSizeY)), zIndex);\n    uint cluster = (16u * 8u) * indices.z + 16u * indices.y + indices.x;\n    return cluster;\n  }\n  vec4 CCClusterShadingAdditive (StandardSurface s, vec4 shadowPos) {\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n    vec3 diffuseContrib = diffuse / 3.14159265359;\n    vec3 position;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    position = unpackHighpData(s.position, s.position_fract_part);\n    #else\n    position = s.position;\n    #endif\n    vec3 N = normalize(s.normal);\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    float NV = max(abs(dot(N, V)), 0.001);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 finalColor = vec3(0.0);\n    uint cluster = getClusterIndex(gl_FragCoord, vec4(position, 1.0));\n    LightGrid grid = getLightGrid(cluster);\n    uint numLights = grid.ccLights;\n    for (uint i = 0u; i < 100u; i++) {\n      if (i >= numLights) break;\n      uint lightIndex = getGridLightIndex(grid.offset, i);\n      CCLight light = getCCLight(lightIndex);\n      vec3 SLU = light.cc_lightPos.xyz - position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = max(dot(N, SL), 0.001);\n      float SNH = max(dot(N, SH), 0.0);\n      float distSqr = dot(SLU, SLU);\n      float litRadius = light.cc_lightSizeRangeAngle.x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = 3.14159265359 * (litRadiusSqr / max(litRadiusSqr , distSqr));\n      float attRadiusSqrInv = 1.0 / max(light.cc_lightSizeRangeAngle.y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\n      if (light.cc_lightPos.w > 0.0) {\n        float cosInner = max(dot(-light.cc_lightDir.xyz, SL), 0.01);\n        float cosOuter = light.cc_lightSizeRangeAngle.z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -light.cc_lightDir.xyz, litAngleScale, litAngleOffset);\n      }\n      vec3 lightColor = light.cc_lightColor.rgb;\n      float shadow = 1.0;\n      #if CC_RECEIVE_SHADOW\n        if (light.cc_lightPos.w > 0.0) {\n          {\n            float pcf = cc_shadowWHPBInfo.z;\n            if (pcf > 1.9) shadow = CCGetSpotLightShadowFactorSoft2X(shadowPos, position);\n            else if (pcf > 0.9) shadow = CCGetSpotLightShadowFactorSoft(shadowPos, position);\n            else shadow = CCGetSpotLightShadowFactorHard(shadowPos, position);\n          }\n        }\n      #endif\n      lightColor *= shadow;\n      finalColor += SNL * lightColor * light.cc_lightColor.w * illum * att * (diffuseContrib + lspec);\n    }\n    return vec4(finalColor, 0.0);\n  }\n  #endif\n  layout(location = 0) out vec4 fragColorX;\n  void main () {\n    StandardSurface s; surf(s);\n    #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 1\n    vec4 color = CCClusterShadingAdditive(s, v_shadowPos);\n    #else\n    vec4 color = CCStandardShadingAdditive(s, v_shadowPos);\n    #endif\n    CC_APPLY_FOG(color, s.position.xyz);\n    fragColorX = CCFragOutput(color);\n  }\n#elif (CC_PIPELINE_TYPE == 0 || CC_FORCE_FORWARD_SHADING)\n  layout(location = 0) out vec4 fragColorX;\n  void main () {\n    StandardSurface s; surf(s);\n    vec4 color = CCStandardShadingBase(s, v_shadowPos);\n    CC_APPLY_FOG(color, s.position.xyz);\n    fragColorX = CCFragOutput(color);\n  }\n#elif CC_PIPELINE_TYPE == 1\n  vec2 signNotZero(vec2 v) {\n    return vec2((v.x >= 0.0) ? +1.0 : -1.0, (v.y >= 0.0) ? +1.0 : -1.0);\n  }\n  vec2 float32x3_to_oct(in vec3 v) {\n    vec2 p = v.xy * (1.0 / (abs(v.x) + abs(v.y) + abs(v.z)));\n    return (v.z <= 0.0) ? ((1.0 - abs(p.yx)) * signNotZero(p)) : p;\n  }\n  layout(location = 0) out vec4 fragColor0;\n  layout(location = 1) out vec4 fragColor1;\n  layout(location = 2) out vec4 fragColor2;\n  void main () {\n    StandardSurface s; surf(s);\n    fragColor0 = s.albedo;\n    fragColor1 = vec4(float32x3_to_oct(s.normal), s.roughness, s.metallic);\n    fragColor2 = vec4(s.emissive, s.occlusion);\n  }\n#endif"},"glsl1":{"vert":"\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec2 a_texCoord;\nattribute vec4 a_tangent;\n#if CC_USE_MORPH\n    attribute float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n  uniform vec4 cc_displacementWeights[15];\n  uniform vec4 cc_displacementTextureInfo;\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n        int pixelIndex = elementIndex;\n        vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n        vec2 uv = getPixelCoordFromLocation(location, cc_displacementTextureInfo.xy);\n        return texture2D(tex, uv);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture2D(tex, x)),\n        decode32(texture2D(tex, y)),\n        decode32(texture2D(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n    attribute vec4 a_joints;\n  attribute vec4 a_weights;\n  #if CC_USE_BAKED_ANIMATION\n    #if USE_INSTANCING\n      attribute highp vec4 a_jointAnimInfo;\n    #endif\n    uniform highp vec4 cc_jointTextureInfo;\n    uniform highp vec4 cc_jointAnimInfo;\n    uniform highp sampler2D cc_jointTexture;\n      #else\n    uniform highp vec4 cc_joints[90];\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout StandardVertInput attr) {\n    mat4 m = skinMatrix();\n    attr.position = m * attr.position;\n    attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n    attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n  }\n#endif\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matProj;\n  uniform highp vec4 cc_cameraPos;\n  uniform mediump vec4 cc_fogBase;\n  uniform mediump vec4 cc_fogAdd;\n#if USE_INSTANCING\n  attribute vec4 a_matWorld0;\n  attribute vec4 a_matWorld1;\n  attribute vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    attribute vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  attribute float a_dyn_batch_id;\n  uniform highp mat4 cc_matWorlds[10];\n#else\n  uniform highp mat4 cc_matWorld;\n  uniform highp mat4 cc_matWorldIT;\n  uniform highp vec4 cc_lightingMapUVParam;\n#endif\n      uniform vec4 tilingOffset;\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n  #if CC_USE_FOG == 0\n\tfactor = LinearFog(pos);\n  #elif CC_USE_FOG == 1\n    factor = ExpFog(pos);\n  #elif CC_USE_FOG == 2\n    factor = ExpSquaredFog(pos);\n  #elif CC_USE_FOG == 3\n    factor = LayeredFog(pos);\n  #else\n    factor = 1.0;\n  #endif\n}\n#if !CC_USE_ACCURATE_FOG\nvarying float v_fog_factor;\n#endif\nvoid CC_TRANSFER_FOG(vec4 pos) {\n#if !CC_USE_ACCURATE_FOG\n    CC_TRANSFER_FOG_BASE(pos, v_fog_factor);\n#endif\n}\nvarying highp vec4 v_shadowPos;\nuniform highp mat4 cc_matLightViewProj;\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotLightingMap;\n#endif\n#if USE_VERTEX_COLOR\n  attribute vec4 a_color;\n  varying vec4 v_color;\n#endif\nvarying vec3 v_position;\nvarying vec3 v_normal;\nvarying vec2 v_uv;\nvarying vec2 v_uv1;\n#if USE_NORMAL_MAP\n  varying vec3 v_tangent;\n  varying vec3 v_bitangent;\n#endif\n#if HAS_SECOND_UV || USE_LIGHTMAP\n  attribute vec2 a_texCoord1;\n#endif\n#if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n  varying vec3 v_luv;\n  void CCLightingMapCaclUV()\n  {\n  #if !USE_INSTANCING\n    v_luv.xy = cc_lightingMapUVParam.xy + a_texCoord1 * cc_lightingMapUVParam.zw;\n    v_luv.z = cc_lightingMapUVParam.z;\n  #else\n    v_luv.xy = a_lightingMapUVParam.xy + a_texCoord1 * a_lightingMapUVParam.zw;\n    v_luv.z = a_lightingMapUVParam.z;\n  #endif\n  }\n#endif\nvoid main () {\n  StandardVertInput In;\n      In.position = vec4(a_position, 1.0);\n      In.normal = a_normal;\n      In.tangent = a_tangent;\n    #if CC_USE_MORPH\n      applyMorph(In);\n    #endif\n    #if CC_USE_SKINNING\n      CCSkin(In);\n    #endif\n  mat4 matWorld, matWorldIT;\n    #if USE_INSTANCING\n      matWorld = mat4(\n        vec4(a_matWorld0.xyz, 0.0),\n        vec4(a_matWorld1.xyz, 0.0),\n        vec4(a_matWorld2.xyz, 0.0),\n        vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n      );\n      matWorldIT = matWorld;\n    #elif USE_BATCHING\n      matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n      matWorldIT = matWorld;\n    #else\n      matWorld = cc_matWorld;\n      matWorldIT = cc_matWorldIT;\n    #endif\n  vec4 pos = matWorld * In.position;\n  v_position = pos.xyz;\n  v_normal = normalize((matWorldIT * vec4(In.normal, 0.0)).xyz);\n  #if USE_TWOSIDE\n    vec3 viewDirect = normalize(cc_cameraPos.xyz - v_position);\n    v_normal *= dot(v_normal, viewDirect) < 0.0 ? -1.0 : 1.0;\n  #endif\n  #if USE_NORMAL_MAP\n    v_tangent = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n    v_bitangent = cross(v_normal, v_tangent) * In.tangent.w;\n  #endif\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if SAMPLE_FROM_RT\n    v_uv = cc_cameraPos.w > 1.0 ? vec2(v_uv.x, 1.0 - v_uv.y) : v_uv;\n  #endif\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n    #if SAMPLE_FROM_RT\n      v_uv1 = cc_cameraPos.w > 1.0 ? vec2(v_uv1.x, 1.0 - v_uv1.y) : v_uv1;\n    #endif\n  #endif\n  #if USE_VERTEX_COLOR\n    v_color = a_color;\n  #endif\n  CC_TRANSFER_FOG(pos);\n  v_shadowPos = cc_matLightViewProj * pos;\n  #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    CCLightingMapCaclUV();\n  #endif\n  gl_Position = cc_matProj * (cc_matView * matWorld) * In.position;\n}","frag":"\n#ifdef GL_EXT_draw_buffers\n#extension GL_EXT_draw_buffers: enable\n#endif\n#ifdef GL_OES_standard_derivatives\n#extension GL_OES_standard_derivatives: enable\n#endif\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod: enable\n#endif\nprecision highp float;\nuniform highp mat4 cc_matView;\n  uniform highp vec4 cc_cameraPos;\n  uniform mediump vec4 cc_mainLitDir;\n  uniform mediump vec4 cc_mainLitColor;\n  uniform mediump vec4 cc_ambientSky;\n  uniform mediump vec4 cc_ambientGround;\n  uniform mediump vec4 cc_fogColor;\n  uniform mediump vec4 cc_fogBase;\n  uniform mediump vec4 cc_fogAdd;\n  uniform mediump vec4 cc_nearFar;\n  uniform mediump vec4 cc_viewPort;\n     uniform vec4 albedo;\n     uniform vec4 albedoScaleAndCutoff;\n     uniform vec4 pbrParams;\n     uniform vec4 emissive;\n     uniform vec4 emissiveScaleParam;\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n  #if CC_USE_FOG == 0\n\tfactor = LinearFog(pos);\n  #elif CC_USE_FOG == 1\n    factor = ExpFog(pos);\n  #elif CC_USE_FOG == 2\n    factor = ExpSquaredFog(pos);\n  #elif CC_USE_FOG == 3\n    factor = LayeredFog(pos);\n  #else\n    factor = 1.0;\n  #endif\n}\nvoid CC_APPLY_FOG_BASE(inout vec4 color, float factor) {\n  color = vec4(mix(cc_fogColor.rgb, color.rgb, factor), color.a);\n}\n#if !CC_USE_ACCURATE_FOG\nvarying float v_fog_factor;\n#endif\nvoid CC_APPLY_FOG(inout vec4 color) {\n#if !CC_USE_ACCURATE_FOG\n    CC_APPLY_FOG_BASE(color, v_fog_factor);\n#endif\n}\nvoid CC_APPLY_FOG(inout vec4 color, vec3 worldPos) {\n#if CC_USE_ACCURATE_FOG\n    float factor;\n    CC_TRANSFER_FOG_BASE(vec4(worldPos, 1.0), factor);\n#else\n    float factor = v_fog_factor;\n#endif\n    CC_APPLY_FOG_BASE(color, factor);\n}\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nuniform highp mat4 cc_matLightView;\n  uniform highp vec4 cc_shadowInvProjDepthInfo;\n  uniform highp vec4 cc_shadowProjDepthInfo;\n  uniform highp vec4 cc_shadowProjInfo;\n  uniform mediump vec4 cc_shadowNFLSInfo;\n  uniform mediump vec4 cc_shadowWHPBInfo;\n  uniform mediump vec4 cc_shadowLPNNInfo;\nhighp float unpackHighpData (float mainPart, float modPart) {\n  highp float data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out float mainPart, out float modPart, highp float data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp float unpackHighpData (float mainPart, float modPart, const float modValue) {\n  highp float data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out float mainPart, out float modPart, highp float data, const float modValue) {\n  highp float divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec2 unpackHighpData (vec2 mainPart, vec2 modPart) {\n  highp vec2 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec2 unpackHighpData (vec2 mainPart, vec2 modPart, const float modValue) {\n  highp vec2 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data, const float modValue) {\n  highp vec2 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec3 unpackHighpData (vec3 mainPart, vec3 modPart) {\n  highp vec3 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec3 unpackHighpData (vec3 mainPart, vec3 modPart, const float modValue) {\n  highp vec3 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data, const float modValue) {\n  highp vec3 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec4 unpackHighpData (vec4 mainPart, vec4 modPart) {\n  highp vec4 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec4 unpackHighpData (vec4 mainPart, vec4 modPart, const float modValue) {\n  highp vec4 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data, const float modValue) {\n  highp vec4 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nfloat CCGetLinearDepthFromViewSpace(vec3 viewPos) {\n  float dist = length(viewPos);\n  return (dist - cc_shadowNFLSInfo.x) / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n  vec4 viewStartPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  return CCGetLinearDepthFromViewSpace(viewStartPos.xyz);\n}\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotLightingMap;\n  vec4 ApplyShadowDepthBias_FaceNormal(vec4 shadowPos, vec3 worldNormal)\n  {\n    vec4 newShadowPos = shadowPos;\n    if(cc_shadowLPNNInfo.z > 0.0001)\n    {\n      vec4 viewNormal = cc_matLightView * vec4(worldNormal, 0.0);\n      if(viewNormal.z < 0.1)\n        newShadowPos.xy += viewNormal.xy * cc_shadowProjInfo.xy * cc_shadowLPNNInfo.z * clamp(viewNormal.z, 0.001, 0.1);\n    }\n    return newShadowPos;\n  }\n  vec4 ApplyShadowDepthBias_Perspective(vec4 shadowPos, float viewspaceDepthBias)\n  {\n    vec3 viewSpacePos;\n    viewSpacePos.xy = shadowPos.xy * cc_shadowProjInfo.zw;\n    viewSpacePos.z = shadowPos.z * cc_shadowInvProjDepthInfo.x + shadowPos.w * cc_shadowInvProjDepthInfo.y;\n    viewSpacePos.xyz += cc_shadowProjDepthInfo.z * normalize(viewSpacePos.xyz) * viewspaceDepthBias;\n    vec4 clipSpacePos;\n    clipSpacePos.xy = viewSpacePos.xy * cc_shadowProjInfo.xy;\n    clipSpacePos.zw = viewSpacePos.z * cc_shadowProjDepthInfo.xz + vec2(cc_shadowProjDepthInfo.y, 0.0);\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      clipSpacePos.z = CCGetLinearDepthFromViewSpace(viewSpacePos.xyz);\n      clipSpacePos.z = (clipSpacePos.z * 2.0 - 1.0) * clipSpacePos.w;\n    }\n    return clipSpacePos;\n  }\n  vec4 ApplyShadowDepthBias_Orthographic(vec4 shadowPos, float viewspaceDepthBias)\n  {\n    float coeffA = cc_shadowProjDepthInfo.x;\n    float coeffB = cc_shadowProjDepthInfo.y;\n    float viewSpacePos_z = (shadowPos.z - coeffB) / coeffA;\n    viewSpacePos_z += viewspaceDepthBias;\n    vec4 result = shadowPos;\n    result.z = viewSpacePos_z * coeffA + coeffB;\n    return result;\n  }\n  float CCGetShadowFactorHard (vec4 shadowPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float shadow = 0.0;\n    float closestDepth = 0.0;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      closestDepth = dot(texture2D(cc_shadowMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0));\n    } else {\n      closestDepth = texture2D(cc_shadowMap, clipPos.xy).x;\n    }\n    shadow = step(clipPos.z, closestDepth);\n    return shadow;\n  }\n  float CCGetShadowFactorSoft (vec4 shadowPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float offsetDepth = clipPos.z;\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    vec2 clipPos_offset = clipPos.xy + oneTap;\n    float block0, block1, block2, block3;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      block0 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n      block1 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)).x);\n      block2 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)).x);\n      block3 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)).x);\n    }\n    float coefX   = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block2, block3, coefX);\n    float coefY   = mod(clipPos.y, oneTap.y) * mapSize.y;\n    return mix(resultX, resultY, coefY);\n  }\n  float CCGetShadowFactorSoft2X (vec4 shadowPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float offsetDepth = clipPos.z;\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    float clipPos_offset_L = clipPos.x - oneTap.x;\n    float clipPos_offset_R = clipPos.x + oneTap.x;\n    float clipPos_offset_U = clipPos.y - oneTap.y;\n    float clipPos_offset_D = clipPos.y + oneTap.y;\n    float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      block0 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)).x);\n      block1 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)).x);\n      block2 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)).x);\n      block3 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)).x);\n      block4 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n      block5 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)).x);\n      block6 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)).x);\n      block7 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)).x);\n      block8 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)).x);\n    }\n    float coefX = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float coefY = mod(clipPos.y, oneTap.y) * mapSize.y;\n    float shadow = 0.0;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block3, block4, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block1, block2, coefX);\n    resultY = mix(block4, block5, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block3, block4, coefX);\n    resultY = mix(block6, block7, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    resultX = mix(block4, block5, coefX);\n    resultY = mix(block7, block8, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    return shadow * 0.25;\n  }\n  float CCGetSpotLightShadowFactorHard (vec4 shadowPos, vec3 worldPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float shadow = 0.0;\n    float closestDepth = 0.0;\n    float depth = clipPos.z;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      closestDepth = dot(texture2D(cc_spotLightingMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0));\n    } else {\n      closestDepth = texture2D(cc_spotLightingMap, clipPos.xy).x;\n    }\n    shadow = step(depth, closestDepth);\n    return shadow;\n  }\n  float CCGetSpotLightShadowFactorSoft (vec4 shadowPos, vec3 worldPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float depth = 0.0;\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      depth = CCGetLinearDepth(worldPos);\n    } else {\n      depth = clipPos.z;\n    }\n    float bias = cc_shadowWHPBInfo.w;\n    vec2 oneTap = 1.0 / cc_shadowWHPBInfo.xy;\n    vec2 clipPos_offset = clipPos.xy + oneTap;\n    float block0, block1, block2, block3;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      block0 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)).x);\n      block1 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos.y)).x);\n      block2 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset.y)).x);\n      block3 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos_offset.y)).x);\n    }\n    float coefX   = mod(clipPos.x, oneTap.x) * cc_shadowWHPBInfo.x;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block2, block3, coefX);\n    float coefY   = mod(clipPos.y, oneTap.y) * cc_shadowWHPBInfo.y;\n    return mix(resultX, resultY, coefY);\n  }\n  float CCGetSpotLightShadowFactorSoft2X (vec4 shadowPos, vec3 worldPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float depth = 0.0;\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      depth = CCGetLinearDepth(worldPos);\n    } else {\n      depth = clipPos.z;\n    }\n    float bias = cc_shadowWHPBInfo.w;\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    float clipPos_offset_L = clipPos.x - oneTap.x;\n    float clipPos_offset_R = clipPos.x + oneTap.x;\n    float clipPos_offset_U = clipPos.y - oneTap.y;\n    float clipPos_offset_D = clipPos.y + oneTap.y;\n    float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      block0 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_U)).x);\n      block1 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_U)).x);\n      block2 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_U)).x);\n      block3 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos.y)).x);\n      block4 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)).x);\n      block5 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos.y)).x);\n      block6 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_D)).x);\n      block7 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_D)).x);\n      block8 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_D)).x);\n    }\n    float coefX = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float coefY = mod(clipPos.y, oneTap.y) * mapSize.y;\n    float shadow = 0.0;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block3, block4, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block1, block2, coefX);\n    resultY = mix(block4, block5, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block3, block4, coefX);\n    resultY = mix(block6, block7, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    resultX = mix(block4, block5, coefX);\n    resultY = mix(block7, block8, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    return shadow * 0.25;\n  }\n#endif\n#if CC_USE_IBL\n  uniform samplerCube cc_environment;\n  vec4 fragTextureLod (sampler2D tex, vec2 coord, float lod) {\n      #ifdef GL_EXT_shader_texture_lod\n        return texture2DLodEXT(tex, coord, lod);\n      #else\n        return texture2D(tex, coord, lod);\n      #endif\n  }\n  vec4 fragTextureLod (samplerCube tex, vec3 coord, float lod) {\n      #ifdef GL_EXT_shader_texture_lod\n        return textureCubeLodEXT(tex, coord, lod);\n      #else\n        return textureCube(tex, coord, lod);\n      #endif\n  }\n  vec3 unpackRGBE (vec4 rgbe) {\n    return rgbe.rgb * pow(1.1, rgbe.a * 255.0 - 128.0);\n  }\n  #if CC_USE_DIFFUSEMAP\n    uniform samplerCube cc_diffuseMap;\n  #endif\n#endif\nfloat GGXMobile (float roughness, float NoH, vec3 H, vec3 N) {\n  vec3 NxH = cross(N, H);\n  float OneMinusNoHSqr = dot(NxH, NxH);\n  float a = roughness * roughness;\n  float n = NoH * a;\n  float p = a / (OneMinusNoHSqr + n * n);\n  return p * p;\n}\nfloat CalcSpecular (float roughness, float NoH, vec3 H, vec3 N) {\n  return (roughness * 0.25 + 0.25) * GGXMobile(roughness, NoH, H, N);\n}\nvec3 BRDFApprox (vec3 specular, float roughness, float NoV) {\n  const vec4 c0 = vec4(-1.0, -0.0275, -0.572, 0.022);\n  const vec4 c1 = vec4(1.0, 0.0425, 1.04, -0.04);\n  vec4 r = roughness * c0 + c1;\n  float a004 = min(r.x * r.x, exp2(-9.28 * NoV)) * r.x + r.y;\n  vec2 AB = vec2(-1.04, 1.04) * a004 + r.zw;\n  AB.y *= clamp(50.0 * specular.g, 0.0, 1.0);\n  return specular * AB.x + AB.y;\n}\n#if USE_REFLECTION_DENOISE\n  vec3 GetEnvReflectionWithMipFiltering(vec3 R, float roughness, float mipCount, float denoiseIntensity) {\n    #if CC_USE_IBL\n    \tfloat mip = roughness * mipCount;\n    \tfloat delta = (dot(dFdx(R), dFdy(R))) * 1000.0;\n    \tfloat mipBias = mix(0.0, 5.0, clamp(delta, 0.0, 1.0));\n    \tvec4 biased = fragTextureLod(cc_environment, R, mip + mipBias);\n     \tvec4 filtered = textureCube(cc_environment, R);\n      #if CC_USE_IBL == 2\n      \tbiased.rgb = unpackRGBE(biased);\n      \tfiltered.rgb = unpackRGBE(filtered);\n      #else\n      \tbiased.rgb = SRGBToLinear(biased.rgb);\n      \tfiltered.rgb = SRGBToLinear(filtered.rgb);\n      #endif\n      return mix(biased.rgb, filtered.rgb, denoiseIntensity);\n    #else\n      return vec3(0.0, 0.0, 0.0);\n    #endif\n  }\n#endif\nstruct StandardSurface {\n  vec4 albedo;\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  vec3 position, position_fract_part;\n  #else\n  vec3 position;\n  #endif\n  vec3 normal;\n  vec3 emissive;\n  vec3 lightmap;\n  float lightmap_test;\n  float roughness;\n  float metallic;\n  float occlusion;\n};\nvec4 CCStandardShadingBase (StandardSurface s, vec4 shadowPos) {\n  vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n  vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n  vec3 position;\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  position = unpackHighpData(s.position, s.position_fract_part);\n  #else\n  position = s.position;\n  #endif\n  vec3 N = normalize(s.normal);\n  vec3 V = normalize(cc_cameraPos.xyz - position);\n  float NV = max(abs(dot(N, V)), 0.0);\n  specular = BRDFApprox(specular, s.roughness, NV);\n  vec3 L = normalize(-cc_mainLitDir.xyz);\n  vec3 H = normalize(L + V);\n  float NH = max(dot(N, H), 0.0);\n  float NL = max(dot(N, L), 0.0);\n  vec3 finalColor = NL * cc_mainLitColor.rgb * cc_mainLitColor.w;\n  vec3 diffuseContrib = diffuse;\n  #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    if (s.lightmap_test > 0.0001) {\n      finalColor = s.lightmap.rgb;\n    }\n  #else\n    diffuseContrib /= 3.14159265359;\n  #endif\n  vec3 specularContrib = specular * CalcSpecular(s.roughness, NH, H, N);\n  vec3 dirlightContrib = (diffuseContrib + specularContrib);\n  float shadow = 1.0;\n  #if CC_RECEIVE_SHADOW\n    if (NL > 0.0 && cc_mainLitDir.w > 0.0) {\n      {\n        vec4 pos = ApplyShadowDepthBias_FaceNormal(shadowPos, N);\n        float pcf = cc_shadowWHPBInfo.z;\n        if (pcf > 1.9) shadow = CCGetShadowFactorSoft2X(pos);\n        else if (pcf > 0.9) shadow = CCGetShadowFactorSoft(pos);\n        else shadow = CCGetShadowFactorHard(pos);\n        shadow = mix(shadow, 1.0, cc_shadowNFLSInfo.w);\n      }\n    }\n  #endif\n  dirlightContrib *= shadow;\n  finalColor *= dirlightContrib;\n  float fAmb = 0.5 - N.y * 0.5;\n  vec3 ambDiff = mix(cc_ambientSky.rgb, cc_ambientGround.rgb, fAmb);\n  #if CC_USE_IBL\n    #if CC_USE_DIFFUSEMAP\n      vec4 diffuseMap = textureCube(cc_diffuseMap, N);\n      #if CC_USE_DIFFUSEMAP == 2\n        ambDiff = unpackRGBE(diffuseMap);\n      #else\n        ambDiff = SRGBToLinear(diffuseMap.rgb);\n      #endif\n    #endif\n    vec3 R = normalize(reflect(-V, N));\n    #if USE_REFLECTION_DENOISE\n      vec3 env = GetEnvReflectionWithMipFiltering(R, s.roughness, cc_ambientGround.w, 0.6);\n    #else\n      vec4 envmap = fragTextureLod(cc_environment, R, s.roughness * cc_ambientGround.w);\n      #if CC_USE_IBL == 2\n        vec3 env = unpackRGBE(envmap);\n      #else\n        vec3 env = SRGBToLinear(envmap.rgb);\n      #endif\n    #endif\n    finalColor += env * cc_ambientSky.w * specular * s.occlusion;\n  #endif\n  finalColor += ambDiff.rgb * cc_ambientSky.w * diffuse * s.occlusion;\n  finalColor += s.emissive;\n  return vec4(finalColor, s.albedo.a);\n}\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = ACESToneMap(color.rgb);\n  #endif\n  color.rgb = sqrt(color.rgb);\n  return color;\n}\nvarying highp vec4 v_shadowPos;\n#if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n  varying vec3 v_luv;\n  uniform sampler2D cc_lightingMap;\n  vec3 UnpackLightingmap(vec4 color) {\n    vec3 c;\n    float e = 1.0 + color.a * (8.0 - 1.0);\n    c.r = color.r * e;\n    c.g = color.g * e;\n    c.b = color.b * e;\n    return c;\n  }\n#endif\nvarying vec3 v_position;\nvarying vec2 v_uv;\nvarying vec2 v_uv1;\nvarying vec3 v_normal;\n#if USE_VERTEX_COLOR\n  varying vec4 v_color;\n#endif\n#if USE_ALBEDO_MAP\n  uniform sampler2D albedoMap;\n#endif\n#if USE_NORMAL_MAP\n  varying vec3 v_tangent;\n  varying vec3 v_bitangent;\n  uniform sampler2D normalMap;\n#endif\n#if USE_PBR_MAP\n  uniform sampler2D pbrMap;\n#endif\n#if USE_METALLIC_ROUGHNESS_MAP\n  uniform sampler2D metallicRoughnessMap;\n#endif\n#if USE_OCCLUSION_MAP\n  uniform sampler2D occlusionMap;\n#endif\n#if USE_EMISSIVE_MAP\n  uniform sampler2D emissiveMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvoid surf (out StandardSurface s) {\n  vec4 baseColor = albedo;\n  #if USE_VERTEX_COLOR\n    baseColor.rgb *= SRGBToLinear(v_color.rgb);\n    baseColor.a *= v_color.a;\n  #endif\n  #if USE_ALBEDO_MAP\n    vec4 texColor = texture2D(albedoMap, ALBEDO_UV);\n    texColor.rgb = SRGBToLinear(texColor.rgb);\n    baseColor *= texColor;\n  #endif\n  s.albedo = baseColor;\n  s.albedo.rgb *= albedoScaleAndCutoff.xyz;\n  #if USE_ALPHA_TEST\n    if (s.albedo.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n  #endif\n  #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    vec4 lightColor = texture2D(cc_lightingMap, v_luv.xy);\n    s.lightmap = UnpackLightingmap(lightColor);\n    s.lightmap_test = v_luv.z;\n  #endif\n  s.normal = v_normal;\n  #if USE_NORMAL_MAP\n    vec3 nmmp = texture2D(normalMap, NORMAL_UV).xyz - vec3(0.5);\n    s.normal =\n      (nmmp.x * emissiveScaleParam.w) * normalize(v_tangent) +\n      (nmmp.y * emissiveScaleParam.w) * normalize(v_bitangent) +\n      nmmp.z * normalize(s.normal);\n  #endif\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  packHighpData(s.position, s.position_fract_part, v_position);\n  #else\n  s.position = v_position;\n  #endif\n  vec4 pbr = pbrParams;\n  #if USE_PBR_MAP\n    vec4 res = texture2D(pbrMap, PBR_UV);\n    pbr.x *= res.r;\n    pbr.y *= res.g;\n    pbr.z *= res.b;\n    pbr.w *= res.a;\n  #endif\n  #if USE_METALLIC_ROUGHNESS_MAP\n    vec4 metallicRoughness = texture2D(metallicRoughnessMap, PBR_UV);\n    pbr.z *= metallicRoughness.b;\n    pbr.y *= metallicRoughness.g;\n  #endif\n  #if USE_OCCLUSION_MAP\n    pbr.x *= texture2D(occlusionMap, PBR_UV).r;\n  #endif\n  s.occlusion = pbr.x;\n  s.roughness = pbr.y;\n  s.metallic = pbr.z;\n  s.emissive = emissive.rgb * emissiveScaleParam.xyz;\n  #if USE_EMISSIVE_MAP\n    s.emissive *= SRGBToLinear(texture2D(emissiveMap, EMISSIVE_UV).rgb);\n  #endif\n}\n#if CC_FORWARD_ADD\n  #if CC_PIPELINE_TYPE == 0\n  # define LIGHTS_PER_PASS 1\n  #else\n  # define LIGHTS_PER_PASS 10\n  #endif\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n  uniform highp vec4 cc_lightPos[LIGHTS_PER_PASS];\n  uniform vec4 cc_lightColor[LIGHTS_PER_PASS];\n  uniform vec4 cc_lightSizeRangeAngle[LIGHTS_PER_PASS];\n  uniform vec4 cc_lightDir[LIGHTS_PER_PASS];\n  #endif\n  float SmoothDistAtt (float distSqr, float invSqrAttRadius) {\n    float factor = distSqr * invSqrAttRadius;\n    float smoothFactor = clamp(1.0 - factor * factor, 0.0, 1.0);\n    return smoothFactor * smoothFactor;\n  }\n  float GetDistAtt (float distSqr, float invSqrAttRadius) {\n    float attenuation = 1.0 / max(distSqr, 0.01*0.01);\n    attenuation *= SmoothDistAtt(distSqr , invSqrAttRadius);\n    return attenuation;\n  }\n  float GetAngleAtt (vec3 L, vec3 litDir, float litAngleScale, float litAngleOffset) {\n    float cd = dot(litDir, L);\n    float attenuation = clamp(cd * litAngleScale + litAngleOffset, 0.0, 1.0);\n    return (attenuation * attenuation);\n  }\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n  vec4 CCStandardShadingAdditive (StandardSurface s, vec4 shadowPos) {\n    vec3 position;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    position = unpackHighpData(s.position, s.position_fract_part);\n    #else\n    position = s.position;\n    #endif\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n    vec3 diffuseContrib = diffuse / 3.14159265359;\n    vec3 N = normalize(s.normal);\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    float NV = max(abs(dot(N, V)), 0.0);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 finalColor = vec3(0.0);\n    int numLights = CC_PIPELINE_TYPE == 0 ? LIGHTS_PER_PASS : int(cc_lightDir[0].w);\n    for (int i = 0; i < LIGHTS_PER_PASS; i++) {\n      if (i >= numLights) break;\n      vec3 SLU = cc_lightPos[i].xyz - position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = max(dot(N, SL), 0.0);\n      float SNH = max(dot(N, SH), 0.0);\n      float distSqr = dot(SLU, SLU);\n      float litRadius = cc_lightSizeRangeAngle[i].x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = 3.14159265359 * (litRadiusSqr / max(litRadiusSqr , distSqr));\n      float attRadiusSqrInv = 1.0 / max(cc_lightSizeRangeAngle[i].y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\n      if (cc_lightPos[i].w > 0.0) {\n        float cosInner = max(dot(-cc_lightDir[i].xyz, SL), 0.01);\n        float cosOuter = cc_lightSizeRangeAngle[i].z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -cc_lightDir[i].xyz, litAngleScale, litAngleOffset);\n      }\n      vec3 lightColor = cc_lightColor[i].rgb;\n      float shadow = 1.0;\n      #if CC_RECEIVE_SHADOW\n        if (cc_lightPos[i].w > 0.0 && cc_lightSizeRangeAngle[i].w > 0.0) {\n          {\n            float pcf = cc_shadowWHPBInfo.z;\n            if (pcf > 1.9) shadow = CCGetSpotLightShadowFactorSoft2X(shadowPos, position);\n            else if (pcf > 0.9) shadow = CCGetSpotLightShadowFactorSoft(shadowPos, position);\n            else shadow = CCGetSpotLightShadowFactorHard(shadowPos, position);\n          }\n        }\n      #endif\n      lightColor *= shadow;\n      finalColor += SNL * lightColor * cc_lightColor[i].w * illum * att * (diffuseContrib + lspec);\n    }\n    return vec4(finalColor, 0.0);\n  }\n  #endif\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 1\n  readonly buffer b_ccLightsBuffer { vec4 b_ccLights[]; };\n  readonly buffer b_clusterLightIndicesBuffer { uint b_clusterLightIndices[]; };\n  readonly buffer b_clusterLightGridBuffer { uvec4 b_clusterLightGrid[]; };\n  struct CCLight\n  {\n    vec4 cc_lightPos;\n    vec4 cc_lightColor;\n    vec4 cc_lightSizeRangeAngle;\n    vec4 cc_lightDir;\n  };\n  struct Cluster\n  {\n    vec3 minBounds;\n    vec3 maxBounds;\n  };\n  struct LightGrid\n  {\n    uint offset;\n    uint ccLights;\n  };\n  CCLight getCCLight(uint i)\n  {\n    CCLight light;\n    light.cc_lightPos = b_ccLights[4u * i + 0u];\n    light.cc_lightColor = b_ccLights[4u * i + 1u];\n    light.cc_lightSizeRangeAngle = b_ccLights[4u * i + 2u];\n    light.cc_lightDir = b_ccLights[4u * i + 3u];\n    return light;\n  }\n  LightGrid getLightGrid(uint cluster)\n  {\n    uvec4 gridvec = b_clusterLightGrid[cluster];\n    LightGrid grid;\n    grid.offset = gridvec.x;\n    grid.ccLights = gridvec.y;\n    return grid;\n  }\n  uint getGridLightIndex(uint start, uint offset)\n  {\n    return b_clusterLightIndices[start + offset];\n  }\n  uint getClusterZIndex(vec4 worldPos)\n  {\n    float scale = float(24) / log(cc_nearFar.y / cc_nearFar.x);\n    float bias = -(float(24) * log(cc_nearFar.x) / log(cc_nearFar.y / cc_nearFar.x));\n    float eyeDepth = -(cc_matView * worldPos).z;\n    uint zIndex = uint(max(log(eyeDepth) * scale + bias, 0.0));\n    return zIndex;\n  }\n  uint getClusterIndex(vec4 fragCoord, vec4 worldPos)\n  {\n    uint zIndex = getClusterZIndex(worldPos);\n    float clusterSizeX = ceil(cc_viewPort.z / float(16));\n    float clusterSizeY = ceil(cc_viewPort.w / float(8));\n    uvec3 indices = uvec3(uvec2(fragCoord.xy / vec2(clusterSizeX, clusterSizeY)), zIndex);\n    uint cluster = (16u * 8u) * indices.z + 16u * indices.y + indices.x;\n    return cluster;\n  }\n  vec4 CCClusterShadingAdditive (StandardSurface s, vec4 shadowPos) {\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n    vec3 diffuseContrib = diffuse / 3.14159265359;\n    vec3 position;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    position = unpackHighpData(s.position, s.position_fract_part);\n    #else\n    position = s.position;\n    #endif\n    vec3 N = normalize(s.normal);\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    float NV = max(abs(dot(N, V)), 0.001);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 finalColor = vec3(0.0);\n    uint cluster = getClusterIndex(gl_FragCoord, vec4(position, 1.0));\n    LightGrid grid = getLightGrid(cluster);\n    uint numLights = grid.ccLights;\n    for (uint i = 0u; i < 100u; i++) {\n      if (i >= numLights) break;\n      uint lightIndex = getGridLightIndex(grid.offset, i);\n      CCLight light = getCCLight(lightIndex);\n      vec3 SLU = light.cc_lightPos.xyz - position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = max(dot(N, SL), 0.001);\n      float SNH = max(dot(N, SH), 0.0);\n      float distSqr = dot(SLU, SLU);\n      float litRadius = light.cc_lightSizeRangeAngle.x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = 3.14159265359 * (litRadiusSqr / max(litRadiusSqr , distSqr));\n      float attRadiusSqrInv = 1.0 / max(light.cc_lightSizeRangeAngle.y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\n      if (light.cc_lightPos.w > 0.0) {\n        float cosInner = max(dot(-light.cc_lightDir.xyz, SL), 0.01);\n        float cosOuter = light.cc_lightSizeRangeAngle.z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -light.cc_lightDir.xyz, litAngleScale, litAngleOffset);\n      }\n      vec3 lightColor = light.cc_lightColor.rgb;\n      float shadow = 1.0;\n      #if CC_RECEIVE_SHADOW\n        if (light.cc_lightPos.w > 0.0) {\n          {\n            float pcf = cc_shadowWHPBInfo.z;\n            if (pcf > 1.9) shadow = CCGetSpotLightShadowFactorSoft2X(shadowPos, position);\n            else if (pcf > 0.9) shadow = CCGetSpotLightShadowFactorSoft(shadowPos, position);\n            else shadow = CCGetSpotLightShadowFactorHard(shadowPos, position);\n          }\n        }\n      #endif\n      lightColor *= shadow;\n      finalColor += SNL * lightColor * light.cc_lightColor.w * illum * att * (diffuseContrib + lspec);\n    }\n    return vec4(finalColor, 0.0);\n  }\n  #endif\n  void main () {\n    StandardSurface s; surf(s);\n    #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 1\n    vec4 color = CCClusterShadingAdditive(s, v_shadowPos);\n    #else\n    vec4 color = CCStandardShadingAdditive(s, v_shadowPos);\n    #endif\n    CC_APPLY_FOG(color, s.position.xyz);\n    gl_FragData[0] = CCFragOutput(color);\n  }\n#elif (CC_PIPELINE_TYPE == 0 || CC_FORCE_FORWARD_SHADING)\n  void main () {\n    StandardSurface s; surf(s);\n    vec4 color = CCStandardShadingBase(s, v_shadowPos);\n    CC_APPLY_FOG(color, s.position.xyz);\n    gl_FragData[0] = CCFragOutput(color);\n  }\n#elif CC_PIPELINE_TYPE == 1\n  vec2 signNotZero(vec2 v) {\n    return vec2((v.x >= 0.0) ? +1.0 : -1.0, (v.y >= 0.0) ? +1.0 : -1.0);\n  }\n  vec2 float32x3_to_oct(in vec3 v) {\n    vec2 p = v.xy * (1.0 / (abs(v.x) + abs(v.y) + abs(v.z)));\n    return (v.z <= 0.0) ? ((1.0 - abs(p.yx)) * signNotZero(p)) : p;\n  }\n  void main () {\n    StandardSurface s; surf(s);\n    gl_FragData[0] = s.albedo;\n    gl_FragData[1] = vec4(float32x3_to_oct(s.normal), s.roughness, s.metallic);\n    gl_FragData[2] = vec4(s.emissive, s.occlusion);\n  }\n#endif"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]},{"name":"CCShadow","defines":[]}],"samplerTextures":[{"name":"cc_shadowMap","defines":["CC_RECEIVE_SHADOW"]},{"name":"cc_spotLightingMap","defines":["CC_RECEIVE_SHADOW"]},{"name":"cc_environment","defines":["CC_USE_IBL"]},{"name":"cc_diffuseMap","defines":["CC_USE_IBL","CC_USE_DIFFUSEMAP"]}],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCMorph","defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION"]},{"name":"CCLocalBatched","defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"CCLocal","defines":["!USE_INSTANCING","!USE_BATCHING"]},{"name":"CCForwardLight","defines":["CC_FORWARD_ADD","CC_ENABLE_CLUSTERED_LIGHT_CULLING"]}],"samplerTextures":[{"name":"cc_PositionDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"cc_lightingMap","defines":["USE_LIGHTMAP","!USE_BATCHING","!CC_FORWARD_ADD"]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":222,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":65}},"defines":[{"name":"CC_USE_MORPH","type":"boolean","defines":[]},{"name":"CC_MORPH_TARGET_COUNT","type":"number","defines":["CC_USE_MORPH"],"range":[2,8]},{"name":"CC_MORPH_PRECOMPUTED","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_POSITION","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_NORMAL","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_TANGENT","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_USE_SKINNING","type":"boolean","defines":[]},{"name":"CC_USE_BAKED_ANIMATION","type":"boolean","defines":["CC_USE_SKINNING"]},{"name":"USE_INSTANCING","type":"boolean","defines":[],"editor":{"elevated":true}},{"name":"USE_BATCHING","type":"boolean","defines":["!USE_INSTANCING"],"editor":{"elevated":true}},{"name":"USE_LIGHTMAP","type":"boolean","defines":[]},{"name":"CC_USE_FOG","type":"number","defines":[],"range":[0,4]},{"name":"CC_USE_ACCURATE_FOG","type":"boolean","defines":[]},{"name":"CC_RECEIVE_SHADOW","type":"boolean","defines":[]},{"name":"USE_VERTEX_COLOR","type":"boolean","defines":[]},{"name":"USE_NORMAL_MAP","type":"boolean","defines":[]},{"name":"HAS_SECOND_UV","type":"boolean","defines":[]},{"name":"CC_FORWARD_ADD","type":"boolean","defines":[]},{"name":"USE_TWOSIDE","type":"boolean","defines":[]},{"name":"SAMPLE_FROM_RT","type":"boolean","defines":[]},{"name":"CC_USE_IBL","type":"number","defines":[],"range":[0,2]},{"name":"CC_USE_DIFFUSEMAP","type":"number","defines":["CC_USE_IBL"],"range":[0,2]},{"name":"USE_REFLECTION_DENOISE","type":"boolean","defines":[]},{"name":"CC_USE_HDR","type":"boolean","defines":[]},{"name":"USE_ALBEDO_MAP","type":"boolean","defines":[]},{"name":"ALBEDO_UV","type":"string","defines":["USE_ALBEDO_MAP"],"options":["v_uv","v_uv1"]},{"name":"NORMAL_UV","type":"string","defines":["USE_NORMAL_MAP"],"options":["v_uv","v_uv1"]},{"name":"PBR_UV","type":"string","defines":[],"options":["v_uv","v_uv1"]},{"name":"USE_PBR_MAP","type":"boolean","defines":[]},{"name":"USE_METALLIC_ROUGHNESS_MAP","type":"boolean","defines":[]},{"name":"USE_OCCLUSION_MAP","type":"boolean","defines":[]},{"name":"USE_EMISSIVE_MAP","type":"boolean","defines":[]},{"name":"EMISSIVE_UV","type":"string","defines":["USE_EMISSIVE_MAP"],"options":["v_uv","v_uv1"]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"ALPHA_TEST_CHANNEL","type":"string","defines":["USE_ALPHA_TEST"],"options":["a","r"]},{"name":"CC_PIPELINE_TYPE","type":"number","defines":["CC_FORWARD_ADD"],"range":[0,1]},{"name":"CC_FORCE_FORWARD_SHADING","type":"boolean","defines":["CC_FORWARD_ADD"]}]},{"hash":210600745,"name":"builtin-standard|shadow-caster-vs:vert|shadow-caster-fs:frag","blocks":[{"name":"Constants","stageFlags":17,"binding":0,"members":[{"name":"tilingOffset","type":16,"count":1},{"name":"albedo","type":16,"count":1},{"name":"albedoScaleAndCutoff","type":16,"count":1},{"name":"pbrParams","type":16,"count":1},{"name":"emissive","type":16,"count":1},{"name":"emissiveScaleParam","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"albedoMap","type":28,"count":1,"stageFlags":16,"binding":1,"defines":["USE_ALBEDO_MAP"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_normal","format":32,"location":1,"defines":[]},{"name":"a_texCoord","format":21,"location":2,"defines":[]},{"name":"a_tangent","format":44,"location":3,"defines":[]},{"name":"a_vertexId","format":11,"location":6,"defines":["CC_USE_MORPH"]},{"name":"a_joints","location":4,"defines":["CC_USE_SKINNING"]},{"name":"a_weights","format":44,"location":5,"defines":["CC_USE_SKINNING"]},{"name":"a_jointAnimInfo","format":44,"isInstanced":true,"location":7,"defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION","USE_INSTANCING"]},{"name":"a_matWorld0","format":44,"isInstanced":true,"location":8,"defines":["USE_INSTANCING"]},{"name":"a_matWorld1","format":44,"isInstanced":true,"location":9,"defines":["USE_INSTANCING"]},{"name":"a_matWorld2","format":44,"isInstanced":true,"location":10,"defines":["USE_INSTANCING"]},{"name":"a_lightingMapUVParam","format":44,"isInstanced":true,"location":11,"defines":["USE_INSTANCING","USE_LIGHTMAP"]},{"name":"a_dyn_batch_id","format":11,"location":12,"defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"a_texCoord1","format":21,"location":13,"defines":[]}],"varyings":[{"name":"v_uv","type":14,"count":1,"stageFlags":17,"location":0,"defines":[]},{"name":"v_uv1","type":14,"count":1,"stageFlags":17,"location":1,"defines":[]},{"name":"v_worldPos","type":16,"count":1,"stageFlags":17,"location":2,"defines":[]},{"name":"v_clip_depth","type":13,"count":1,"stageFlags":17,"location":3,"defines":[]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"glsl4":{"vert":"#extension GL_EXT_shader_explicit_arithmetic_types_int32: require\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec3 a_normal;\nlayout(location = 2) in vec2 a_texCoord;\nlayout(location = 3) in vec4 a_tangent;\n#if CC_USE_MORPH\n    int getVertexId() {\n      return gl_VertexIndex;\n    }\n  layout(set = 2, binding = 4) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    layout(set = 2, binding = 7) uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    layout(set = 2, binding = 8) uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    layout(set = 2, binding = 9) uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n    layout(location = 4) in u32vec4 a_joints;\n  layout(location = 5) in vec4 a_weights;\n  #if CC_USE_BAKED_ANIMATION\n    #if USE_INSTANCING\n      layout(location = 7) in highp vec4 a_jointAnimInfo;\n    #endif\n    layout(set = 2, binding = 3) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(set = 2, binding = 2) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    layout(set = 2, binding = 6) uniform highp sampler2D cc_jointTexture;\n      #else\n    layout(set = 2, binding = 3) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout StandardVertInput attr) {\n    mat4 m = skinMatrix();\n    attr.position = m * attr.position;\n    attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n    attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n  }\n#endif\n#if USE_INSTANCING\n  layout(location = 8) in vec4 a_matWorld0;\n  layout(location = 9) in vec4 a_matWorld1;\n  layout(location = 10) in vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    layout(location = 11) in vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  layout(location = 12) in float a_dyn_batch_id;\n  layout(set = 2, binding = 0) uniform CCLocalBatched {\n    highp mat4 cc_matWorlds[10];\n  };\n#else\n  layout(set = 2, binding = 0) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n  };\n#endif\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\nlayout(set = 0, binding = 2) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\n#if HAS_SECOND_UV || USE_LIGHTMAP\n  layout(location = 13) in vec2 a_texCoord1;\n#endif\nlayout(location = 0) out vec2 v_uv;\nlayout(location = 1) out vec2 v_uv1;\nlayout(location = 2) out vec4 v_worldPos;\nlayout(location = 3) out float v_clip_depth;\nvec4 vert () {\n  StandardVertInput In;\n      In.position = vec4(a_position, 1.0);\n      In.normal = a_normal;\n      In.tangent = a_tangent;\n    #if CC_USE_MORPH\n      applyMorph(In);\n    #endif\n    #if CC_USE_SKINNING\n      CCSkin(In);\n    #endif\n  mat4 matWorld, matWorldIT;\n    #if USE_INSTANCING\n      matWorld = mat4(\n        vec4(a_matWorld0.xyz, 0.0),\n        vec4(a_matWorld1.xyz, 0.0),\n        vec4(a_matWorld2.xyz, 0.0),\n        vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n      );\n      matWorldIT = matWorld;\n    #elif USE_BATCHING\n      matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n      matWorldIT = matWorld;\n    #else\n      matWorld = cc_matWorld;\n      matWorldIT = cc_matWorldIT;\n    #endif\n  v_worldPos = matWorld * In.position;\n  vec4 clipPos = cc_matLightViewProj * v_worldPos;\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n  #endif\n  v_clip_depth = clipPos.z / clipPos.w * 0.5 + 0.5;\n  return clipPos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\nvec4 packDepthToRGBA (float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 16581375.0) * depth;\n  ret = fract(ret);\n  ret -= vec4(ret.yzw, 0.0) / 255.0;\n  return ret;\n}\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(set = 0, binding = 2) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\nfloat CCGetLinearDepthFromViewSpace(vec3 viewPos) {\n  float dist = length(viewPos);\n  return (dist - cc_shadowNFLSInfo.x) / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n  vec4 viewStartPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  return CCGetLinearDepthFromViewSpace(viewStartPos.xyz);\n}\n#if CC_RECEIVE_SHADOW\n  layout(set = 0, binding = 3) uniform highp sampler2D cc_shadowMap;\n  layout(set = 0, binding = 5) uniform highp sampler2D cc_spotLightingMap;\n#endif\nlayout(location = 0) in vec2 v_uv;\nlayout(location = 1) in vec2 v_uv1;\nlayout(location = 2) in vec4 v_worldPos;\nlayout(location = 3) in float v_clip_depth;\n#if USE_ALBEDO_MAP\n  layout(set = 1, binding = 1) uniform sampler2D albedoMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvec4 frag () {\n  vec4 baseColor = albedo;\n  #if USE_ALBEDO_MAP\n    baseColor *= texture(albedoMap, ALBEDO_UV);\n  #endif\n  #if USE_ALPHA_TEST\n    if (baseColor.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n  #endif\n  if(cc_shadowLPNNInfo.x > 0.000001 && cc_shadowLPNNInfo.x < 1.999999) {\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      return vec4(CCGetLinearDepth(v_worldPos.xyz), 1.0, 1.0, 1.0);\n    }\n  }\n  if (cc_shadowLPNNInfo.y > 0.000001) {\n    return packDepthToRGBA(v_clip_depth);\n  }\n  return vec4(v_clip_depth, 1.0, 1.0, 1.0);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl3":{"vert":"\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nin vec3 a_position;\nin vec3 a_normal;\nin vec2 a_texCoord;\nin vec4 a_tangent;\n#if CC_USE_MORPH\n    in float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n  layout(std140) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n    in vec4 a_joints;\n  in vec4 a_weights;\n  #if CC_USE_BAKED_ANIMATION\n    #if USE_INSTANCING\n      in highp vec4 a_jointAnimInfo;\n    #endif\n    layout(std140) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(std140) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    uniform highp sampler2D cc_jointTexture;\n      #else\n    layout(std140) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout StandardVertInput attr) {\n    mat4 m = skinMatrix();\n    attr.position = m * attr.position;\n    attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n    attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n  }\n#endif\n#if USE_INSTANCING\n  in vec4 a_matWorld0;\n  in vec4 a_matWorld1;\n  in vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    in vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  in float a_dyn_batch_id;\n  layout(std140) uniform CCLocalBatched {\n    highp mat4 cc_matWorlds[10];\n  };\n#else\n  layout(std140) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n  };\n#endif\nlayout(std140) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\n#if HAS_SECOND_UV || USE_LIGHTMAP\n  in vec2 a_texCoord1;\n#endif\nout vec2 v_uv;\nout vec2 v_uv1;\nout vec4 v_worldPos;\nout float v_clip_depth;\nvec4 vert () {\n  StandardVertInput In;\n      In.position = vec4(a_position, 1.0);\n      In.normal = a_normal;\n      In.tangent = a_tangent;\n    #if CC_USE_MORPH\n      applyMorph(In);\n    #endif\n    #if CC_USE_SKINNING\n      CCSkin(In);\n    #endif\n  mat4 matWorld, matWorldIT;\n    #if USE_INSTANCING\n      matWorld = mat4(\n        vec4(a_matWorld0.xyz, 0.0),\n        vec4(a_matWorld1.xyz, 0.0),\n        vec4(a_matWorld2.xyz, 0.0),\n        vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n      );\n      matWorldIT = matWorld;\n    #elif USE_BATCHING\n      matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n      matWorldIT = matWorld;\n    #else\n      matWorld = cc_matWorld;\n      matWorldIT = cc_matWorldIT;\n    #endif\n  v_worldPos = matWorld * In.position;\n  vec4 clipPos = cc_matLightViewProj * v_worldPos;\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n  #endif\n  v_clip_depth = clipPos.z / clipPos.w * 0.5 + 0.5;\n  return clipPos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nlayout(std140) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\nvec4 packDepthToRGBA (float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 16581375.0) * depth;\n  ret = fract(ret);\n  ret -= vec4(ret.yzw, 0.0) / 255.0;\n  return ret;\n}\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\nfloat CCGetLinearDepthFromViewSpace(vec3 viewPos) {\n  float dist = length(viewPos);\n  return (dist - cc_shadowNFLSInfo.x) / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n  vec4 viewStartPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  return CCGetLinearDepthFromViewSpace(viewStartPos.xyz);\n}\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotLightingMap;\n#endif\nin vec2 v_uv;\nin vec2 v_uv1;\nin vec4 v_worldPos;\nin float v_clip_depth;\n#if USE_ALBEDO_MAP\n  uniform sampler2D albedoMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvec4 frag () {\n  vec4 baseColor = albedo;\n  #if USE_ALBEDO_MAP\n    baseColor *= texture(albedoMap, ALBEDO_UV);\n  #endif\n  #if USE_ALPHA_TEST\n    if (baseColor.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n  #endif\n  if(cc_shadowLPNNInfo.x > 0.000001 && cc_shadowLPNNInfo.x < 1.999999) {\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      return vec4(CCGetLinearDepth(v_worldPos.xyz), 1.0, 1.0, 1.0);\n    }\n  }\n  if (cc_shadowLPNNInfo.y > 0.000001) {\n    return packDepthToRGBA(v_clip_depth);\n  }\n  return vec4(v_clip_depth, 1.0, 1.0, 1.0);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec2 a_texCoord;\nattribute vec4 a_tangent;\n#if CC_USE_MORPH\n    attribute float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n  uniform vec4 cc_displacementWeights[15];\n  uniform vec4 cc_displacementTextureInfo;\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n        int pixelIndex = elementIndex;\n        vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n        vec2 uv = getPixelCoordFromLocation(location, cc_displacementTextureInfo.xy);\n        return texture2D(tex, uv);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture2D(tex, x)),\n        decode32(texture2D(tex, y)),\n        decode32(texture2D(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n    attribute vec4 a_joints;\n  attribute vec4 a_weights;\n  #if CC_USE_BAKED_ANIMATION\n    #if USE_INSTANCING\n      attribute highp vec4 a_jointAnimInfo;\n    #endif\n    uniform highp vec4 cc_jointTextureInfo;\n    uniform highp vec4 cc_jointAnimInfo;\n    uniform highp sampler2D cc_jointTexture;\n      #else\n    uniform highp vec4 cc_joints[90];\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout StandardVertInput attr) {\n    mat4 m = skinMatrix();\n    attr.position = m * attr.position;\n    attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n    attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n  }\n#endif\n#if USE_INSTANCING\n  attribute vec4 a_matWorld0;\n  attribute vec4 a_matWorld1;\n  attribute vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    attribute vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  attribute float a_dyn_batch_id;\n  uniform highp mat4 cc_matWorlds[10];\n#else\n  uniform highp mat4 cc_matWorld;\n  uniform highp mat4 cc_matWorldIT;\n#endif\n      uniform vec4 tilingOffset;\nuniform highp mat4 cc_matLightViewProj;\n#if HAS_SECOND_UV || USE_LIGHTMAP\n  attribute vec2 a_texCoord1;\n#endif\nvarying vec2 v_uv;\nvarying vec2 v_uv1;\nvarying vec4 v_worldPos;\nvarying float v_clip_depth;\nvec4 vert () {\n  StandardVertInput In;\n      In.position = vec4(a_position, 1.0);\n      In.normal = a_normal;\n      In.tangent = a_tangent;\n    #if CC_USE_MORPH\n      applyMorph(In);\n    #endif\n    #if CC_USE_SKINNING\n      CCSkin(In);\n    #endif\n  mat4 matWorld, matWorldIT;\n    #if USE_INSTANCING\n      matWorld = mat4(\n        vec4(a_matWorld0.xyz, 0.0),\n        vec4(a_matWorld1.xyz, 0.0),\n        vec4(a_matWorld2.xyz, 0.0),\n        vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n      );\n      matWorldIT = matWorld;\n    #elif USE_BATCHING\n      matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n      matWorldIT = matWorld;\n    #else\n      matWorld = cc_matWorld;\n      matWorldIT = cc_matWorldIT;\n    #endif\n  v_worldPos = matWorld * In.position;\n  vec4 clipPos = cc_matLightViewProj * v_worldPos;\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n  #endif\n  v_clip_depth = clipPos.z / clipPos.w * 0.5 + 0.5;\n  return clipPos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\n   uniform vec4 albedo;\n   uniform vec4 albedoScaleAndCutoff;\nvec4 packDepthToRGBA (float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 16581375.0) * depth;\n  ret = fract(ret);\n  ret -= vec4(ret.yzw, 0.0) / 255.0;\n  return ret;\n}\nuniform highp mat4 cc_matLightView;\n  uniform mediump vec4 cc_shadowNFLSInfo;\n  uniform mediump vec4 cc_shadowLPNNInfo;\nfloat CCGetLinearDepthFromViewSpace(vec3 viewPos) {\n  float dist = length(viewPos);\n  return (dist - cc_shadowNFLSInfo.x) / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n  vec4 viewStartPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  return CCGetLinearDepthFromViewSpace(viewStartPos.xyz);\n}\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotLightingMap;\n#endif\nvarying vec2 v_uv;\nvarying vec2 v_uv1;\nvarying vec4 v_worldPos;\nvarying float v_clip_depth;\n#if USE_ALBEDO_MAP\n  uniform sampler2D albedoMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvec4 frag () {\n  vec4 baseColor = albedo;\n  #if USE_ALBEDO_MAP\n    baseColor *= texture2D(albedoMap, ALBEDO_UV);\n  #endif\n  #if USE_ALPHA_TEST\n    if (baseColor.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n  #endif\n  if(cc_shadowLPNNInfo.x > 0.000001 && cc_shadowLPNNInfo.x < 1.999999) {\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      return vec4(CCGetLinearDepth(v_worldPos.xyz), 1.0, 1.0, 1.0);\n    }\n  }\n  if (cc_shadowLPNNInfo.y > 0.000001) {\n    return packDepthToRGBA(v_clip_depth);\n  }\n  return vec4(v_clip_depth, 1.0, 1.0, 1.0);\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCShadow","defines":[]},{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[{"name":"cc_shadowMap","defines":["CC_RECEIVE_SHADOW"]},{"name":"cc_spotLightingMap","defines":["CC_RECEIVE_SHADOW"]}],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCMorph","defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION"]},{"name":"CCLocalBatched","defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"CCLocal","defines":["!USE_INSTANCING","!USE_BATCHING"]}],"samplerTextures":[{"name":"cc_PositionDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":183,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":65}},"defines":[{"name":"CC_USE_MORPH","type":"boolean","defines":[]},{"name":"CC_MORPH_TARGET_COUNT","type":"number","defines":["CC_USE_MORPH"],"range":[2,8]},{"name":"CC_MORPH_PRECOMPUTED","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_POSITION","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_NORMAL","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_TANGENT","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_USE_SKINNING","type":"boolean","defines":[]},{"name":"CC_USE_BAKED_ANIMATION","type":"boolean","defines":["CC_USE_SKINNING"]},{"name":"USE_INSTANCING","type":"boolean","defines":[],"editor":{"elevated":true}},{"name":"USE_BATCHING","type":"boolean","defines":["!USE_INSTANCING"],"editor":{"elevated":true}},{"name":"USE_LIGHTMAP","type":"boolean","defines":["USE_INSTANCING"]},{"name":"HAS_SECOND_UV","type":"boolean","defines":[]},{"name":"CC_RECEIVE_SHADOW","type":"boolean","defines":[]},{"name":"USE_ALBEDO_MAP","type":"boolean","defines":[]},{"name":"ALBEDO_UV","type":"string","defines":["USE_ALBEDO_MAP"],"options":["v_uv","v_uv1"]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"ALPHA_TEST_CHANNEL","type":"string","defines":["USE_ALPHA_TEST"],"options":["a","r"]}]}],[{"name":"opaque","passes":[{"program":"builtin-standard|standard-vs|standard-fs","properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"linear":true,"type":16,"value":[1,1,1,1],"editor":{"displayName":"Albedo","type":"color"},"handleInfo":["albedo",0,16]},"albedoScale":{"type":15,"value":[1,1,1],"handleInfo":["albedoScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST","slide":true,"step":0.001,"range":[0,1]},"handleInfo":["albedoScaleAndCutoff",3,13]},"occlusion":{"type":13,"value":[1],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",0,13]},"roughness":{"type":13,"value":[0.8],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",1,13]},"metallic":{"type":13,"value":[0.6],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",2,13]},"SpecularIntensity":{"type":13,"value":[0.5],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",3,13]},"emissive":{"linear":true,"type":16,"value":[0,0,0,1],"editor":{"type":"color"}},"emissiveScale":{"type":15,"value":[1,1,1],"handleInfo":["emissiveScaleParam",0,15]},"normalStrenth":{"type":13,"value":[1],"editor":{"parent":"USE_NORMAL_MAP","slide":true,"step":0.001,"range":[0,1]},"handleInfo":["emissiveScaleParam",3,13]},"mainTexture":{"value":"grey","type":28,"editor":{"displayName":"AlbedoMap"},"handleInfo":["albedoMap",0,28]},"normalMap":{"value":"normal","type":28},"pbrMap":{"value":"grey","type":28},"metallicRoughnessMap":{"value":"grey","type":28},"occlusionMap":{"value":"white","type":28},"emissiveMap":{"value":"grey","type":28},"albedo":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"albedoScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]},"pbrParams":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,0.8,0.6,0.5]},"emissiveScaleParam":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"albedoMap":{"type":28,"value":"grey","editor":{"visible":false,"deprecated":true}}}},{"phase":"forward-add","propertyIndex":0,"program":"builtin-standard|standard-vs|standard-fs","embeddedMacros":{"CC_FORWARD_ADD":true},"blendState":{"targets":[{"blend":true,"blendSrc":1,"blendDst":1,"blendSrcAlpha":0,"blendDstAlpha":1}]},"depthStencilState":{"depthFunc":2,"depthTest":true,"depthWrite":false}},{"phase":"shadow-caster","propertyIndex":0,"program":"builtin-standard|shadow-caster-vs:vert|shadow-caster-fs:frag","rasterizerState":{"cullMode":1},"properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"type":16,"value":[1,1,1,1],"editor":{"displayName":"Albedo","type":"color"},"handleInfo":["albedo",0,16]},"albedoScale":{"type":15,"value":[1,1,1],"handleInfo":["albedoScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST"},"handleInfo":["albedoScaleAndCutoff",3,13]},"mainTexture":{"value":"grey","type":28,"editor":{"displayName":"AlbedoMap"},"handleInfo":["albedoMap",0,28]},"albedo":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"albedoScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]},"albedoMap":{"type":28,"value":"grey","editor":{"visible":false,"deprecated":true}}}}]},{"name":"transparent","passes":[{"program":"builtin-standard|standard-vs|standard-fs","embeddedMacros":{"CC_FORCE_FORWARD_SHADING":true},"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendDstAlpha":4}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"linear":true,"type":16,"value":[1,1,1,1],"editor":{"displayName":"Albedo","type":"color"},"handleInfo":["albedo",0,16]},"albedoScale":{"type":15,"value":[1,1,1],"handleInfo":["albedoScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST","slide":true,"step":0.001,"range":[0,1]},"handleInfo":["albedoScaleAndCutoff",3,13]},"occlusion":{"type":13,"value":[1],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",0,13]},"roughness":{"type":13,"value":[0.8],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",1,13]},"metallic":{"type":13,"value":[0.6],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",2,13]},"SpecularIntensity":{"type":13,"value":[0.5],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",3,13]},"emissive":{"linear":true,"type":16,"value":[0,0,0,1],"editor":{"type":"color"}},"emissiveScale":{"type":15,"value":[1,1,1],"handleInfo":["emissiveScaleParam",0,15]},"normalStrenth":{"type":13,"value":[1],"editor":{"parent":"USE_NORMAL_MAP","slide":true,"step":0.001,"range":[0,1]},"handleInfo":["emissiveScaleParam",3,13]},"mainTexture":{"value":"grey","type":28,"editor":{"displayName":"AlbedoMap"},"handleInfo":["albedoMap",0,28]},"normalMap":{"value":"normal","type":28},"pbrMap":{"value":"grey","type":28},"metallicRoughnessMap":{"value":"grey","type":28},"occlusionMap":{"value":"white","type":28},"emissiveMap":{"value":"grey","type":28},"albedo":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"albedoScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]},"pbrParams":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,0.8,0.6,0.5]},"emissiveScaleParam":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"albedoMap":{"type":28,"value":"grey","editor":{"visible":false,"deprecated":true}}}},{"phase":"forward-add","propertyIndex":0,"program":"builtin-standard|standard-vs|standard-fs","embeddedMacros":{"CC_FORWARD_ADD":true},"blendState":{"targets":[{"blend":true,"blendSrc":1,"blendDst":1,"blendSrcAlpha":0,"blendDstAlpha":1}]},"depthStencilState":{"depthFunc":2,"depthTest":true,"depthWrite":false}},{"phase":"shadow-caster","propertyIndex":0,"program":"builtin-standard|shadow-caster-vs:vert|shadow-caster-fs:frag","rasterizerState":{"cullMode":1},"properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"type":16,"value":[1,1,1,1],"editor":{"displayName":"Albedo","type":"color"},"handleInfo":["albedo",0,16]},"albedoScale":{"type":15,"value":[1,1,1],"handleInfo":["albedoScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST"},"handleInfo":["albedoScaleAndCutoff",3,13]},"mainTexture":{"value":"grey","type":28,"editor":{"displayName":"AlbedoMap"},"handleInfo":["albedoMap",0,28]},"albedo":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"albedoScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]},"albedoMap":{"type":28,"value":"grey","editor":{"visible":false,"deprecated":true}}}}]}]]],0,0,[],[],[]],[[[80,"electric_sfx",".mp3",4.157333],-1],0,0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[{"base":"2,2,0,0,0,0","mipmaps":["214ncfEupO/ZqevD3MdL4v"]}],[2],0,[],[],[]],[[[52,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{}],[{"USE_LIGHTMAP":true},{},{}],[[[{},"mainColor",8,[4,4294957690]],{},{}],11,0,0]]],0,0,[0],[8],[6]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["2aXH9TKYJA2rjYSsF90buD"]}],[2],0,[],[],[]],[[{"name":"joy","rect":{"x":0,"y":0,"width":143,"height":143},"offset":{"x":0,"y":0},"originalSize":{"width":143,"height":143},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[3],0,[0],[12],[117]],[[[13,".bin",1765631370,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":12480,"length":1920,"count":480,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":12480,"count":260,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.0016748126363381743,-0.007465453818440437,-0.0030989127699285746],"maxPosition",8,[1,0.019027747213840485,0.007291050627827644,0.0016704918816685677]]],-1],0,0,[],[],[]],[[[13,".bin",917030569,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":12480,"length":1920,"count":480,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":12480,"count":260,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.019027747213840485,-0.007465453818440437,-0.003098907880485058],"maxPosition",8,[1,0.0016748126363381743,0.007291050627827644,0.0016704918816685677]]],-1],0,0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["2eEaZj+GpA3445jGNIbTJG"]}],[2],0,[],[],[]],[[{"name":"icon","rect":{"x":0,"y":0,"width":198,"height":198},"offset":{"x":0,"y":0},"originalSize":{"width":198,"height":198},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[3],0,[0],[12],[118]],[[[81,"1",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{}],[{"USE_LIGHTMAP":true,"USE_ALBEDO_MAP":true},{},{}],[[[{},"mainColor",8,[4,3959422975],"mainTexture",6,0],{},{}],11,0,0]]],0,0,[0,0],[9,8],[119,6]],[[[52,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{}],[{"USE_LIGHTMAP":true},{},{}],[[[{},"mainColor",8,[4,4294940928]],{},{}],11,0,0]]],0,0,[0],[8],[6]],[[[81,"0",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{}],[{"USE_LIGHTMAP":true,"USE_ALBEDO_MAP":true},{},{}],[[[{"occlusion":0,"roughness":0,"metallic":0,"SpecularIntensity":0},"mainColor",8,[4,4278234623],"mainTexture",6,0],{},{}],11,0,0]]],0,0,[0,0],[9,8],[71,6]],[[[171,"Walk Break"],[177,"Walk Break",[-3,-4],[-2],[7,"f6h5JTA61Krp7fpJXxRpdl",-1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,90,0,0]],[175,"Sparkle",1,[-5],[7,"ec12r82KpHmrFyR4IuXAYD",1,0]],[181,1,false,false,0,2,[55,"d6dNQQc1JJ872kZBLdCYV/"],[0],[182,[4,2181038079]],[14,3,0.5,2],[0],[0],[2,5],[0],[0],[183,3,4.71238898038469],[0],[14,3,0.2,0.8],[2,0.2],[0],[0],[[20,[2,10]]],[21,true,[19,1,[27,[[40],[16,0.10044642857142858,[4,4284012543]],[16,0.2700892857142857,[4,4280130815]],[16,1,[4,4278190335]]]]]],[185,true,3,0.01,[2,1]],[28,[17,1,[18,[0,0.2846153846153846,0.49230769230769234,0.6846153846153846,1],[[139,2,6.066666666666666,6.066666666666666],[78,2,0.9925925925925926],[78,2,0.5148148148148148],[78,2,0.9962962962962965],[139,2,-5.149758454106279,-5.149758454106279]]]],[0],[0],[0]],[22,[0],[0],[0],[2,1]],[23,[0],[0],[0]],[65,true,0.01,[0],[0],[0],[2,10]],[24,[0],[0],[184,3,-0.7853981633974483,0.7853981633974483,180]],[188,true,2,2,[17,1,[18,[0,1],[[78,2,1],[78,2,1]]]],[2,3]],[25,[2,1],[0],[9],[9],-6],[189,1,0,1]],[176,"Ring",1,[-7],[7,"f2sDa1qWtF56f7v5izDlLP",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[135,1,false,false,4,[55,"d8s2smx0BGKZuCh9SYwYNL"],[2],[9],[2,1],[0],[0],[2,0.01],[0],[0],[0],[0],[2,0.5],[0],[0],[0],[[20,[2,1]]],[21,true,[19,1,[136,[[64,[4,4278203391]],[104,0.9888392857142857]],[[141,255],[105,0,0.9955357142857143]]]]],[137,0,[2,1]],[138,true,[17,1,[18,[0,1],[[186,2,3,2.6376811594202896,0.49907870413964467,2.6376811594202896,1],[187,2,3,1,1,0.4714045207910316]]]],[0],[0],[0]],[22,[0],[0],[0],[2,1]],[23,[0],[0],[0]],[37,[0],[0],[0],[0]],[24,[0],[0],[0]],[140,[17,1,[18,[0,1],[[78,2,1],[78,2,1]]]],[0]],[25,[2,1],[0],[9],[9],-8],[38,3]],[135,1,false,false,1,[55,"b2Z3tunMxD543DLFEf8MY1"],[4],[9],[14,3,1.5,2.3],[0],[0],[0],[0],[0],[77,3,4.71238898038469],[0],[2,0.12],[0],[0],[0],[[20,[2,1]]],[21,true,[19,1,[136,[[104,0.002232142857142857],[16,0.5200892857142857,[4,4280596991]],[16,0.9977678571428571,[4,4278216447]]],[[141,255],[105,255,0.9977678571428571]]]]],[137,0,[2,1]],[138,true,[17,1,[18,[0,1],[[29,1,1,1,1],[30,1,1,1,1,1]]]],[0],[0],[0]],[22,[0],[0],[0],[2,1]],[23,[0],[0],[0]],[37,[0],[0],[0],[0]],[24,[0],[0],[0]],[140,[17,1,[18,[0,1],[[78,2,1],[78,2,1]]]],[0]],[25,[2,1],[0],[9],[9],-9],[38,5]]],0,[0,16,1,0,-1,6,0,-1,2,0,-2,4,0,-1,3,0,4,3,0,-1,5,0,4,5,0,4,6,0,18,1,9],[0,0,0,0,0,0],[-1,5,-1,5,-1,5],[72,44,120,80,73,45]],[[[13,".bin",3557673830,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":130512,"length":23172,"count":5793,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":130512,"count":2719,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.003197639249265194,-0.00005396946653490886,-0.003193923505023122],"maxPosition",8,[1,0.005336482543498278,0.019998442381620407,0.005217656027525663]]],-1],0,0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[[52,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{}],[{"USE_LIGHTMAP":true,"HAS_SECOND_UV":true,"USE_ALBEDO_MAP":true},{},{}],[[[{"metallic":0.4000000059604645},"mainTexture",6,0],{},{}],11,0,0]]],0,0,[0,0],[9,8],[71,6]],[[[52,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[9,8],[44,14]],[[[52,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[9,8],[45,14]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["41czDe+hJIArQqaw4XZ+L6"]}],[2],0,[],[],[]],[[{"name":"tut_hand","rect":{"x":2,"y":2,"width":108,"height":134},"offset":{"x":0,"y":0},"originalSize":{"width":112,"height":138},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[3],0,[0],[12],[121]],[[[81,"1",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{}],[{"USE_INSTANCING":true,"USE_LIGHTMAP":true},{},{}],[[[{},"mainColor",8,[4,3372208186],"mainTexture",6,0],{},{}],11,0,0]]],0,0,[0,0],[9,8],[122,6]],[[[13,".bin",187543112,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":7008,"length":1680,"count":420,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":7008,"count":146,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.004699284676462412,0.0015650882851332426,-0.004699224140495062],"maxPosition",8,[1,0.004699284676462412,0.004009468946605921,0.004699224140495062]]],-1],0,0,[],[],[]],[[[13,".bin",199009772,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":6768,"length":1680,"count":420,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":6768,"count":141,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.005977137014269829,-9.73795377667841e-10,-0.00597704341635108],"maxPosition",8,[1,0.005977113265544176,0.0024210817646235228,0.005977053195238113]]],-1],0,0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[{"base":"2,2,0,0,0,0","mipmaps":["4cvCa1mgxPlLhFCZMoZz6x"]}],[2],0,[],[],[]],[[[81,"1",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{}],[{"USE_LIGHTMAP":true},{},{}],[[[{},"mainColor",8,[4,4278190335]],{},{}],11,0,0]]],0,0,[0],[8],[6]],[[[13,".bin",2254166265,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":4608,"length":1008,"count":252,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":4608,"count":96,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.0008237636648118496,-0.006162404548376799,-0.014634717255830765],"maxPosition",8,[1,0.0008237636648118496,0.006162403151392937,0.014634717255830765]]],-1],0,0,[],[],[]],[[[13,".bin",2975573567,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":35280,"length":7920,"count":1980,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":35280,"count":735,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.007146873511373997,-1.225123752446322e-10,-0.0007057737093418837],"maxPosition",8,[1,0.002633505268022418,0.01577996276319027,0.001747388974763453]]],-1],0,0,[],[],[]],[[[13,".bin",2912657917,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":35280,"length":7920,"count":1980,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":35280,"count":735,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.007146873511373997,-1.225123752446322e-10,-0.0017473874613642693],"maxPosition",8,[1,0.002633505268022418,0.01577996276319027,0.0007057737675495446]]],-1],0,0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["50LQlrSVNMD70mm+01Hc0E"]}],[2],0,[],[],[]],[[{"name":"hand","rect":{"x":0,"y":0,"width":205,"height":168},"offset":{"x":0,"y":0},"originalSize":{"width":205,"height":168},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[3],0,[0],[12],[123]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[{"base":"2,2,0,0,0,0","mipmaps":["52vf0vl2VCIIG7oj5WyUi9"]}],[2],0,[],[],[]],[[[52,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{}],[{"USE_LIGHTMAP":true,"USE_ALBEDO_MAP":true},{},{}],[[[{},"mainTexture",6,0],{},{}],11,0,0]]],0,0,[0,0],[9,8],[124,6]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["5aYelt7SZIzat2vnJTRi7a"]}],[2],0,[],[],[]],[[{"name":"text_dragtomove","rect":{"x":1,"y":2,"width":438,"height":56},"offset":{"x":0,"y":0},"originalSize":{"width":440,"height":60},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[3],0,[0],[12],[125]],[[[13,".bin",96470146,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":19264,"length":2496,"count":624,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":19264,"count":344,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.007814688608050346,-0.007526932284235954,-0.0010816886788234115],"maxPosition",8,[1,0,0.007286946754902601,0.0011317601893097162]]],-1],0,0,[],[],[]],[[[13,".bin",212083226,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":19264,"length":2496,"count":624,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":19264,"count":344,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,0,-0.007526932284235954,-0.0010816886788234115],"maxPosition",8,[1,0.007814688608050346,0.007286946754902601,0.0011317601893097162]]],-1],0,0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["5dbVvn+olAg4I5LaULAS+p"]}],[2],0,[],[],[]],[[{"name":"text_gradient","rect":{"x":0,"y":0,"width":16,"height":478},"offset":{"x":0,"y":0},"originalSize":{"width":16,"height":478},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[3],0,[0],[12],[126]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[{"base":"2,2,0,0,0,0","mipmaps":["62BflQnDlPi4iyJvQocT+3"]}],[2],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["65K0Btu8BBKa488G4VTYhg"]}],[2],0,[],[],[]],[[{"name":"time_tab1","rect":{"x":0,"y":0,"width":479,"height":92},"offset":{"x":0,"y":0},"originalSize":{"width":479,"height":92},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[3],0,[0],[12],[127]],[[[13,".bin",1983878921,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":249760,"length":25728,"count":6432,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":249760,"count":4460,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.0034827557392418385,-1.7630813475832952e-9,-0.0033954354003071785],"maxPosition",8,[1,0.0034827557392418385,0.0037849312648177147,0.003395435865968466]]],-1],0,0,[],[],[]],[[[52,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{}],[{"USE_ALBEDO_MAP":true},{},{}],[[[{"roughness":0.30151134729385376,"metallic":0.4000000059604645},"mainTexture",6,0],{},{}],11,0,0]]],0,0,[0,0],[9,8],[71,6]],[[[80,"lose_sfx",".mp3",4.153425],-1],0,0,[],[],[]],[[[52,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{}],[{"HAS_SECOND_UV":true},{},{}],[[[{"roughness":0.617,"metallic":0.4000000059604645},"mainColor",8,[4,4294956426]],{},{}],11,0,0]]],0,0,[0],[8],[6]],[[{"base":"2,2,0,0,2,0","rgbe":false,"mipmaps":[{"front":"6f01cf7f-81bf-4a7e-bd5d-0afc19696480@b47c0@e9a6d","back":"6f01cf7f-81bf-4a7e-bd5d-0afc19696480@b47c0@40c10","left":"6f01cf7f-81bf-4a7e-bd5d-0afc19696480@b47c0@8fd34","right":"6f01cf7f-81bf-4a7e-bd5d-0afc19696480@b47c0@74afd","top":"6f01cf7f-81bf-4a7e-bd5d-0afc19696480@b47c0@bb97f","bottom":"6f01cf7f-81bf-4a7e-bd5d-0afc19696480@b47c0@7d38f"}]}],[24],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["78XW5GxOhAd6p2lnTVeP4d"]}],[2],0,[],[],[]],[[{"name":"title_game","rect":{"x":0,"y":0,"width":556,"height":220},"offset":{"x":-0.5,"y":0},"originalSize":{"width":557,"height":220},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[3],0,[0],[12],[128]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["7dj5uJT9FMn6OrOOx83tfK"]}],[2],0,[],[],[]],[[{"name":"default_sprite_splash","rect":{"x":0,"y":0,"width":2,"height":2},"offset":{"x":0,"y":0},"originalSize":{"width":2,"height":2},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[3],0,[0],[12],[129]],[[[52,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[9,8],[80,14]],[[[13,".bin",847924299,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":4608,"length":528,"count":132,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":4608,"count":96,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.0024998162407428026,-0.002499816007912159,-0.002499816007912159],"maxPosition",8,[1,0.0024998162407428026,0.002499816007912159,0.002499816007912159]]],-1],0,0,[],[],[]],[[[13,".bin",3629589560,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":4608,"length":528,"count":132,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":4608,"count":96,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.002499816007912159,-0.0024998162407428026,-0.002499816007912159],"maxPosition",8,[1,0.002499816007912159,0.0024998157750815153,0.002499816007912159]]],-1],0,0,[],[],[]],[[[13,".bin",1623857048,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":4608,"length":528,"count":132,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":4608,"count":96,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.0024998157750815153,-0.0024998162407428026,-0.002499816007912159],"maxPosition",8,[1,0.0024998157750815153,0.0024998157750815153,0.002499816007912159]]],-1],0,0,[],[],[]],[[[13,".bin",2661431015,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":4608,"length":528,"count":132,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":4608,"count":96,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.0024998169392347336,-0.002499816007912159,-0.002499816007912159],"maxPosition",8,[1,0.002499815309420228,0.002499816007912159,0.002499816007912159]]],-1],0,0,[],[],[]],[[[13,".bin",66674010,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":4608,"length":528,"count":132,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":4608,"count":96,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.002499816007912159,-0.0024998157750815153,-0.002499816007912159],"maxPosition",8,[1,0.002499816007912159,0.0024998162407428026,0.002499816007912159]]],-1],0,0,[],[],[]],[[[13,".bin",1264274950,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":4608,"length":528,"count":132,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":4608,"count":96,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.002499816007912159,-0.002499816007912159,-0.002499816007912159],"maxPosition",8,[1,0.002499816007912159,0.002499816007912159,0.002499816007912159]]],-1],0,0,[],[],[]],[[[13,".bin",3031773104,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":4608,"length":528,"count":132,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":4608,"count":96,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.0024998162407428026,-0.0024998162407428026,-0.002499816007912159],"maxPosition",8,[1,0.0024998162407428026,0.0024998157750815153,0.002499816007912159]]],-1],0,0,[],[],[]],[[[13,".bin",3031773104,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":4608,"length":528,"count":132,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":4608,"count":96,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.0024998162407428026,-0.0024998162407428026,-0.002499816007912159],"maxPosition",8,[1,0.0024998162407428026,0.0024998157750815153,0.002499816007912159]]],-1],0,0,[],[],[]],[[[13,".bin",1637630638,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":4608,"length":528,"count":132,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":4608,"count":96,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.0024998157750815153,-0.0024998157750815153,-0.002499816007912159],"maxPosition",8,[1,0.0024998157750815153,0.0024998162407428026,0.002499816007912159]]],-1],0,0,[],[],[]],[[[13,".bin",4119393415,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":4608,"length":528,"count":132,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":4608,"count":96,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.002499816007912159,-0.0024998162407428026,-0.002499816007912159],"maxPosition",8,[1,0.002499816007912159,0.0024998157750815153,0.002499816007912159]]],-1],0,0,[],[],[]],[[[13,".bin",66674010,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":4608,"length":528,"count":132,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":4608,"count":96,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.002499816007912159,-0.0024998157750815153,-0.002499816007912159],"maxPosition",8,[1,0.002499816007912159,0.0024998162407428026,0.002499816007912159]]],-1],0,0,[],[],[]],[[[13,".bin",847924299,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":4608,"length":528,"count":132,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":4608,"count":96,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.0024998162407428026,-0.002499816007912159,-0.002499816007912159],"maxPosition",8,[1,0.0024998162407428026,0.002499816007912159,0.002499816007912159]]],-1],0,0,[],[],[]],[[[13,".bin",3192444665,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":4608,"length":528,"count":132,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":4608,"count":96,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.002499816007912159,-0.002499816007912159,-0.002499816007912159],"maxPosition",8,[1,0.002499816007912159,0.002499816007912159,0.002499816007912159]]],-1],0,0,[],[],[]],[[[13,".bin",66674010,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":4608,"length":528,"count":132,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":4608,"count":96,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.002499816007912159,-0.0024998157750815153,-0.002499816007912159],"maxPosition",8,[1,0.002499816007912159,0.0024998162407428026,0.002499816007912159]]],-1],0,0,[],[],[]],[[[13,".bin",4119393415,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":4608,"length":528,"count":132,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":4608,"count":96,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.002499816007912159,-0.0024998162407428026,-0.002499816007912159],"maxPosition",8,[1,0.002499816007912159,0.0024998157750815153,0.002499816007912159]]],-1],0,0,[],[],[]],[[[13,".bin",3294857006,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":4608,"length":528,"count":132,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":4608,"count":96,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.0024998162407428026,-0.0024998157750815153,-0.002499816007912159],"maxPosition",8,[1,0.0024998162407428026,0.0024998162407428026,0.002499816007912159]]],-1],0,0,[],[],[]],[[[13,".bin",215310685,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":4608,"length":528,"count":132,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":4608,"count":96,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.002499816007912159,-0.002499816007912159,-0.002499816007912159],"maxPosition",8,[1,0.002499816007912159,0.002499816007912159,0.002499816007912159]]],-1],0,0,[],[],[]],[[[13,".bin",2529725536,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":4608,"length":528,"count":132,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":4608,"count":96,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.0024998157750815153,-0.002499816007912159,-0.002499816007912159],"maxPosition",8,[1,0.0024998157750815153,0.002499816007912159,0.002499816007912159]]],-1],0,0,[],[],[]],[[[13,".bin",4119393415,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":4608,"length":528,"count":132,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":4608,"count":96,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.002499816007912159,-0.0024998162407428026,-0.002499816007912159],"maxPosition",8,[1,0.002499816007912159,0.0024998157750815153,0.002499816007912159]]],-1],0,0,[],[],[]],[[[13,".bin",3119301634,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":4608,"length":528,"count":132,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":4608,"count":96,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.0024998169392347336,-0.0024998157750815153,-0.002499816007912159],"maxPosition",8,[1,0.002499815309420228,0.0024998162407428026,0.002499816007912159]]],-1],0,0,[],[],[]],[[[13,".bin",3192444665,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":4608,"length":528,"count":132,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":4608,"count":96,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.002499816007912159,-0.002499816007912159,-0.002499816007912159],"maxPosition",8,[1,0.002499816007912159,0.002499816007912159,0.002499816007912159]]],-1],0,0,[],[],[]],[[[13,".bin",816707279,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":4608,"length":528,"count":132,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":4608,"count":96,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.0024998169392347336,-0.0024998162407428026,-0.002499816007912159],"maxPosition",8,[1,0.002499815309420228,0.0024998157750815153,0.002499816007912159]]],-1],0,0,[],[],[]],[[[13,".bin",3294857006,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":4608,"length":528,"count":132,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":4608,"count":96,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.0024998162407428026,-0.0024998157750815153,-0.002499816007912159],"maxPosition",8,[1,0.0024998162407428026,0.0024998162407428026,0.002499816007912159]]],-1],0,0,[],[],[]],[[[13,".bin",1255485749,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":4608,"length":528,"count":132,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":4608,"count":96,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.002499816007912159,-0.0024998157750815153,-0.002499816007912159],"maxPosition",8,[1,0.002499816007912159,0.0024998162407428026,0.002499816007912159]]],-1],0,0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[{"base":"2,2,0,0,0,0","mipmaps":["8fzCJGh7xEKrfC7z4lTGoe"]}],[2],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[{"base":"2,2,0,0,0,0","mipmaps":["96ISdYN/pKSK1CQW/sEPvF"]}],[2],0,[],[],[]],[[[81,"1",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{}],[{"USE_LIGHTMAP":true,"USE_ALBEDO_MAP":true},{},{}],[[[{},"mainTexture",6,0],{},{}],11,0,0]]],0,0,[0,0],[9,8],[130,6]],[[[52,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{}],[{"USE_ALBEDO_MAP":true},{},{}],[[[{"roughness":0.30151134729385376,"metallic":0.4000000059604645},"mainTexture",6,0],{},{}],11,0,0]]],0,0,[0,0],[9,8],[131,6]],[[[13,".bin",923119503,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":25200,"length":10476,"count":2619,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":25200,"count":525,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.008112297393381596,-0.0000025160081804642687,-0.008118667639791965],"maxPosition",8,[1,0.008211755193769932,0.00033962499583140016,0.008173173293471336]]],-1],0,0,[],[],[]],[[[80,"win",".mp3",1.776327],-1],0,0,[],[],[]],[[[81,"1",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{}],[{"USE_LIGHTMAP":true,"USE_ALBEDO_MAP":true},{},{}],[[[{},"mainColor",8,[4,4278255605],"mainTexture",6,0],{},{}],11,0,0]]],0,0,[0,0],[9,8],[132,6]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[{"base":"2,2,0,0,0,0","mipmaps":["acRkRdhndJooQl+r58DQxS"]}],[2],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[{"base":"2,2,0,0,0,0","mipmaps":["adFj3JcEZNabOAtAOTI+9s"]}],[2],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[{"base":"2,2,0,0,0,0","mipmaps":["b2MxkzZKxHeq7NsiMjm/Lr"]}],[2],0,[],[],[]],[[{"fmt":"1","w":0,"h":0},-1],[0],0,[],[],[]],[[{"base":"2,2,0,0,0,0","mipmaps":["b7wS4ssk9NqbyI19bmAGNP"]}],[2],0,[],[],[]],[[[80,"electric2_sfx",".mp3",0.485333],-1],0,0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["bdlD1yPolAV6FO+5ND3N7x"]}],[2],0,[],[],[]],[[{"name":"Download","rect":{"x":0,"y":0,"width":373,"height":167},"offset":{"x":0,"y":0},"originalSize":{"width":373,"height":167},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[3],0,[0],[12],[133]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[{"base":"2,2,0,0,0,0","mipmaps":["c6q4qImG9J8qs7j3XMkTZj"]}],[2],0,[],[],[]],[[[81,"1",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{}],[{"USE_LIGHTMAP":true},{},{}],[[[{},"mainColor",8,[4,4287233800]],{},{}],11,0,0]]],0,0,[0],[8],[6]],[[{"base":"2,2,0,0,2,0","rgbe":true,"mipmaps":[{"front":"d032ac98-05e1-4090-88bb-eb640dcb5fc1@b47c0@e9a6d","back":"d032ac98-05e1-4090-88bb-eb640dcb5fc1@b47c0@40c10","left":"d032ac98-05e1-4090-88bb-eb640dcb5fc1@b47c0@8fd34","right":"d032ac98-05e1-4090-88bb-eb640dcb5fc1@b47c0@74afd","top":"d032ac98-05e1-4090-88bb-eb640dcb5fc1@b47c0@bb97f","bottom":"d032ac98-05e1-4090-88bb-eb640dcb5fc1@b47c0@7d38f"}]}],[24],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[[13,".bin",1704124653,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":62280,"length":19272,"count":4818,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":62280,"count":865,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,15,16,17,18,19,20,21,22,23,24,25,26,27,29,30,32,33]]},"minPosition",8,[1,-0.052311841398477554,0.05391331762075424,-0.009010858833789825],"maxPosition",8,[1,-0.03465646877884865,0.05848979949951172,0.010912010446190834]]],-1],0,0,[],[],[]],[[[109,"frydde1",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true}],[[[{"metallic":0.4000000059604645,"roughness":0.7071067690849304},"mainTexture",6,0]],11]]],0,0,[0,0],[9,8],[134,6]],[[[13,".bin",701749343,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":62280,"length":19272,"count":4818,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":62280,"count":865,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,1,2,3,4,5,6,7,8,9,10,11,46,47,48,49,50,57]]},"minPosition",8,[1,0.03465646877884865,0.05391331762075424,-0.009010858833789825],"maxPosition",8,[1,0.052311841398477554,0.05848979949951172,0.010912010446190834]]],-1],0,0,[],[],[]],[[[74,"Skin-4",459418556,["Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L/Wrist_L/ThumbFinger1_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L/Wrist_L/IndexFinger1_L/IndexFinger2_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L/Wrist_L/IndexFinger1_L/IndexFinger2_L/IndexFinger3_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L/Wrist_L/IndexFinger1_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L/Wrist_L/RingFinger1_L/RingFinger2_L/RingFinger3_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L/Wrist_L/RingFinger1_L/RingFinger2_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L/Wrist_L/RingFinger1_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L/Wrist_L/PinkyFinger1_L/PinkyFinger2_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L/Wrist_L/PinkyFinger1_L/PinkyFinger2_L/PinkyFinger3_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L/Wrist_L/PinkyFinger1_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L/Wrist_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L","Root_M/Spine1_M/Spine2_M/Chest_M/Neck_M/Head_M","Root_M/Spine1_M/Spine2_M/Chest_M/Neck_M","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R/MiddleFinger1_R/MiddleFinger2_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R/MiddleFinger1_R/MiddleFinger2_R/MiddleFinger3_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R/MiddleFinger1_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R/IndexFinger1_R/IndexFinger2_R/IndexFinger3_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R/ThumbFinger1_R/ThumbFinger2_R/ThumbFinger3_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R/ThumbFinger1_R/ThumbFinger2_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R/ThumbFinger1_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R/IndexFinger1_R/IndexFinger2_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R/IndexFinger1_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R/RingFinger1_R/RingFinger2_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R/RingFinger1_R/RingFinger2_R/RingFinger3_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R/PinkyFinger1_R/PinkyFinger2_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R/RingFinger1_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R/PinkyFinger1_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R/PinkyFinger1_R/PinkyFinger2_R/PinkyFinger3_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R","Root_M/Spine1_M","Root_M/Spine1_M/Spine2_M","Root_M/Spine1_M/Spine2_M/Chest_M","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R","Root_M/Hip_R/HipPart1_R/Knee_R/KneePart1_R","Root_M/Hip_R/HipPart1_R","Root_M","Root_M/Hip_R/HipPart1_R/Knee_R/KneePart1_R/Ankle_R/Toes_R","Root_M/Hip_R/HipPart1_R/Knee_R/KneePart1_R/Ankle_R","Root_M/Hip_R/HipPart1_R/Knee_R","Root_M/Hip_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L/Wrist_L/MiddleFinger1_L/MiddleFinger2_L/MiddleFinger3_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L/Wrist_L/MiddleFinger1_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L/Wrist_L/MiddleFinger1_L/MiddleFinger2_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L/Wrist_L/ThumbFinger1_L/ThumbFinger2_L/ThumbFinger3_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L/Wrist_L/ThumbFinger1_L/ThumbFinger2_L","Root_M/Hip_L/HipPart1_L/Knee_L/KneePart1_L/Ankle_L","Root_M/Hip_L/HipPart1_L/Knee_L/KneePart1_L/Ankle_L/Toes_L","Root_M/Hip_L/HipPart1_L/Knee_L","Root_M/Hip_L","Root_M/Hip_L/HipPart1_L/Knee_L/KneePart1_L","Root_M/Hip_L/HipPart1_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L"],[[[7,-0.7557510137557983,-0.5703139901161194,-0.3218422532081604,0,0.22390900552272797,0.23680199682712555,-0.9454048871994019,0,0.6153900027275085,-0.7865539789199829,-0.0512649305164814,0,-0.00905591994524002,-0.01108407974243164,0.06002102419734001,1],[7,-0.3476259410381317,0.6398352384567261,0.6853957176208496,0,0.037808969616889954,0.7399557828903198,-0.6715921759605408,0,-0.9368710517883301,-0.20754867792129517,-0.28141921758651733,0,0.011073191650211811,-0.06431224197149277,0.013265267945826054,1],[7,-0.9617258906364441,0.2737799882888794,0.0113291060552001,0,0.003308737650513649,0.052944887429475784,-0.9985920190811157,0,-0.2739943861961365,-0.9603340029716492,-0.05182432010769844,0,0.0458025224506855,-0.013424228876829147,0.056004058569669724,1],[7,-0.961135983467102,0.2729640007019043,0.04133099317550659,0,-0.019721446558833122,0.08144168555736542,-0.9964830279350281,0,-0.2753699719905853,-0.9585710167884827,-0.07289327681064606,0,0.049957357347011566,-0.014998828992247581,0.054459650069475174,1],[7,-0.9615449905395508,0.2729310095310211,0.030667807906866074,0,-0.016838759183883667,0.052868086844682693,-0.9984599947929382,0,-0.2741319537162781,-0.9605799913406372,-0.046239227056503296,0,0.04271070659160614,-0.013379319570958614,0.055071618407964706,1],[7,-0.9914509057998657,-0.1304830014705658,0.0000434811481682118,0,-0.004555003251880407,0.0342773012816906,-0.9994019865989685,0,0.13040350377559662,-0.9908580183982849,-0.0345785915851593,0,0.050082188099622726,0.0004408420354593545,0.056115780025720596,1],[7,-0.9913020730018616,-0.1303589940071106,-0.018088296055793762,0,0.012422231957316399,0.04414789006114006,-0.9989479780197144,0,0.13102048635482788,-0.9904829859733582,-0.042144566774368286,0,0.04619400575757027,-0.0001193954813061282,0.0569600984454155,1],[7,-0.9895299673080444,-0.13035699725151062,-0.0619514025747776,0,0.057289570569992065,0.03921690955758095,-0.9975870251655579,0,0.13247206807136536,-0.9906910061836243,-0.03133820742368698,0,0.04053565487265587,0.0001574644265929237,0.05897727981209755,1],[7,-0.9669378995895386,-0.25398901104927063,0.022802405059337616,0,-0.03869044408202171,0.057734813541173935,-0.9975820183753967,0,0.25205835700035095,-0.9654819965362549,-0.06565298140048981,0,0.048522986471652985,0.002070489339530468,0.05487658083438873,1],[7,-0.966211199760437,-0.25305700302124023,0.04897679388523102,0,-0.055962689220905304,0.02047760598361492,-0.9982230067253113,0,0.2516043484210968,-0.9672350287437439,-0.0339474231004715,0,0.05257672443985939,0.0041212597861886024,0.05386001989245415,1],[7,-0.9662399291992188,-0.2500990033149719,-0.061890795826911926,0,0.04767651483416557,0.06250450760126114,-0.9969050288200378,0,0.25319331884384155,-0.9662010073661804,-0.04847048223018646,0,0.040135327726602554,0.0016165297711268067,0.05886450037360191,1],[7,-0.9672641158103943,0.25293099880218506,-0.02063029818236828,0,0.03598476201295853,0.0562308095395565,-0.9977689981460571,0,-0.25120657682418823,-0.965848982334137,-0.06349170953035355,0,0.03177937865257263,-0.014936220832169056,0.05725216120481491,1],[7,-0.9901149868965149,0.03249209746718407,-0.13644400238990784,0,0.13776427507400513,0.04261089116334915,-0.9895480275154114,0,-0.026338502764701843,-0.9985629916191101,-0.04666593670845032,0,0.011242453008890152,-0.006384949665516615,0.060966599732637405,1],[7,6.112818404652572e-17,-5.766256197772455e-17,1,0,0.9982990026473999,0.05829869955778122,-5.766257521261435e-17,0,-0.05829869955778122,0.9982990026473999,6.112819728141552e-17,0,-0.06528256833553314,-0.004379279911518097,3.738085849999092e-18,1],[7,5.810373379434603e-17,-8.055475896034999e-17,1,0,0.9489060044288635,-0.3155589997768402,-8.055475234290509e-17,0,0.3155589997768402,0.9489060044288635,5.810373379434603e-17,0,-0.05794582888484001,0.020108990371227264,4.98674352237902e-18,1],[7,-0.9975029826164246,0.06243849918246269,0.03299730271100998,0,0.03000847063958645,-0.04821539670228958,0.998386025428772,0,0.06392873078584671,0.996882975101471,0.04622134938836098,0,-0.04876750707626343,0.006257849745452404,-0.05473095923662186,1],[7,-0.996940016746521,0.062477000057697296,0.04698919504880905,0,0.04407155513763428,-0.04728539660573006,0.9979090094566345,0,0.06456824392080307,0.9969260096549988,0.044387225061655045,0,-0.05246942862868309,0.006207259837538004,-0.05400291085243225,1],[7,-0.9975969791412354,0.0624816007912159,-0.0299358032643795,0,-0.03301549330353737,-0.048853401094675064,0.9982600212097168,0,0.060910407453775406,0.9968500137329102,0.050798848271369934,0,-0.04129204899072647,0.006295850034803152,-0.05769351124763489,1],[7,-0.961135983467102,0.2729640007019043,0.04133099317550659,0,0.019721446558833122,-0.08144168555736542,0.9964830279350281,0,0.2753699719905853,0.9585710167884827,0.07289327681064606,0,-0.049957357347011566,0.014998828992247581,-0.054459650069475174,1],[7,-0.5124889016151428,0.5173630118370056,0.6853399276733398,0,-0.020727958530187607,-0.8053399920463562,0.5924510955810547,0,0.8584430813789368,0.2894189953804016,0.4234519600868225,0,-0.02553672343492508,0.06292001903057098,-0.009630789048969746,1],[7,-0.46189382672309875,0.6606249213218689,0.5918009281158447,0,-0.022141097113490105,-0.6756231188774109,0.7369140982627869,0,0.8866590857505798,0.3272729516029358,0.32669293880462646,0,-0.019758624956011772,0.06097354367375374,-0.02059684880077839,1],[7,-0.3476259410381317,0.6398352384567261,0.6853957176208496,0,-0.037808969616889954,-0.7399557828903198,0.6715921759605408,0,0.9368710517883301,0.20754867792129517,0.28141921758651733,0,-0.011073191650211811,0.06431224197149277,-0.013265278190374374,1],[7,-0.9617258906364441,0.2737799882888794,0.0113291060552001,0,-0.003308737650513649,-0.052944887429475784,0.9985920190811157,0,0.2739943861961365,0.9603340029716492,0.05182432010769844,0,-0.0458025224506855,0.013424228876829147,-0.056004058569669724,1],[7,-0.9615449905395508,0.2729310095310211,0.030667807906866074,0,0.016838759183883667,-0.052868086844682693,0.9984599947929382,0,0.2741319537162781,0.9605799913406372,0.046239227056503296,0,-0.04271070659160614,0.013379319570958614,-0.055071618407964706,1],[7,-0.9913020730018616,-0.1303589940071106,-0.018088296055793762,0,-0.012422231957316399,-0.04414789006114006,0.9989479780197144,0,-0.13102048635482788,0.9904829859733582,0.042144566774368286,0,-0.04619400575757027,0.0001193954813061282,-0.0569600984454155,1],[7,-0.9914509057998657,-0.1304830014705658,0.00004347742287791334,0,0.0045549990609288216,-0.0342772975564003,0.9994019865989685,0,-0.13040350377559662,0.9908580183982849,0.0345785915851593,0,-0.050082188099622726,-0.000440842064563185,-0.056115780025720596,1],[7,-0.9669378995895386,-0.25398901104927063,0.022802405059337616,0,0.03869044408202171,-0.057734813541173935,0.9975820183753967,0,-0.25205835700035095,0.9654819965362549,0.06565298140048981,0,-0.048522986471652985,-0.002070489339530468,-0.05487658083438873,1],[7,-0.9895299673080444,-0.13035699725151062,-0.0619514025747776,0,-0.057289570569992065,-0.03921690955758095,0.9975870251655579,0,-0.13247206807136536,0.9906910061836243,0.03133820742368698,0,-0.04053565487265587,-0.00015746543067507446,-0.05897727981209755,1],[7,-0.9895550012588501,-0.0465225987136364,-0.13644400238990784,0,-0.13392998278141022,-0.05345509946346283,0.9895480275154114,0,-0.05332998186349869,0.9974859952926636,0.0466659739613533,0,-0.006511901505291462,0.005468619987368584,-0.060966599732637405,1],[7,-0.9662399291992188,-0.2500990033149719,-0.061890795826911926,0,-0.04767651483416557,-0.06250450760126114,0.9969050288200378,0,-0.25319331884384155,0.9662010073661804,0.04847048223018646,0,-0.040135327726602554,-0.0016165297711268067,-0.05886450037360191,1],[7,-0.9901149868965149,0.03249209746718407,-0.13644400238990784,0,-0.13776427507400513,-0.04261089116334915,0.9895480275154114,0,0.026338502764701843,0.9985629916191101,0.04666593670845032,0,-0.019342873245477676,0.006384949665516615,-0.060966599732637405,1],[7,-0.9901149868965149,0.03249209746718407,-0.13644400238990784,0,-0.13776427507400513,-0.04261089116334915,0.9895480275154114,0,0.026338502764701843,0.9985629916191101,0.04666593670845032,0,-0.011242453008890152,0.006384949665516615,-0.060966599732637405,1],[7,-0.966211199760437,-0.25305700302124023,0.04897679388523102,0,0.055962689220905304,-0.02047760598361492,0.9982230067253113,0,-0.2516043484210968,0.9672350287437439,0.0339474231004715,0,-0.05257672443985939,-0.0041212597861886024,-0.05386001989245415,1],[7,-0.9672641158103943,0.25293099880218506,-0.02063029818236828,0,-0.03598476201295853,-0.0562308095395565,0.9977689981460571,0,0.25120657682418823,0.965848982334137,0.06349170953035355,0,-0.03177937865257263,0.014936220832169056,-0.05725216120481491,1],[7,-0.9895550012588501,-0.0465225987136364,-0.13644400238990784,0,-0.13392998278141022,-0.05345509946346283,0.9895480275154114,0,-0.05332998186349869,0.9974859952926636,0.0466659739613533,0,-0.0013082213699817657,0.005468619987368584,-0.060966599732637405,1],[7,6.11638851617635e-17,-5.833826927650686e-17,1,0,0.998881995677948,0.04726329818367958,-5.833829574628647e-17,0,-0.04726329818367958,0.998881995677948,6.11639116315431e-17,0,-0.04269319027662277,-0.0008234300184994936,2.563246189073702e-18,1],[7,6.122529505043944e-17,-6.030347174092055e-17,1,0,0.9998850226402283,0.015169600024819374,-6.030347174092055e-17,0,-0.015169600024819374,0.9998850226402283,6.122529505043944e-17,0,-0.04954791069030762,0.0007677110261283815,3.0798808657977842e-18,1],[7,5.985136790532356e-17,-7.416329980327525e-17,1,0,0.977446973323822,-0.2111790031194687,-7.416332627305485e-17,0,0.2111790031194687,0.977446973323822,5.985138775765826e-17,0,-0.05578818917274475,0.013730029575526714,4.357267348032292e-18,1],[7,-0.7557510137557983,-0.5703139901161194,-0.3218422532081604,0,-0.22390900552272797,-0.23680199682712555,0.9454048871994019,0,-0.6153900027275085,0.7865539789199829,0.0512649305164814,0,0.00905591994524002,0.01108407974243164,-0.06002102419734001,1],[7,-0.07063166052103043,-0.021846704185009003,-0.9972630143165588,0,-0.9946739673614502,-0.07369910180568695,0.07206269353628159,0,-0.075071781873703,0.9970409870147705,-0.016524851322174072,0,0.014356869272887707,0.00028989295242354274,-0.010739260353147984,1],[7,-0.07384947687387466,-0.0035155045334249735,-0.9972630143165588,0,-0.9815620183944702,0.17703799903392792,0.07206270843744278,0,0.176300048828125,0.9841979742050171,-0.016524845734238625,0,0.029010290279984474,-0.0055952901020646095,-0.010739260353147984,1],[7,6.096432287590141e-17,-5.550928180307346e-17,1,0,0.995622992515564,0.09346509724855423,-5.5509255333293855e-17,0,-0.09346509724855423,0.995622992515564,6.096429640612181e-17,0,-0.03696995973587036,-0.002799419919028878,2.0984529892898495e-18,1],[7,0.00043790347990579903,0.042079851031303406,-0.9991139769554138,0,0.10044362396001816,0.9940599799156189,0.04191097244620323,0,0.9949430227279663,-0.10037299990653992,-0.0037913471460342407,0,-0.008446750231087208,0.0010378394508734345,-0.010595089755952358,1],[7,-1.2247805436516046e-8,-0.03372279927134514,-0.9994310140609741,0,-1,3.364509950642969e-7,9.022438907102526e-10,0,3.362292773090303e-7,0.9994310140609741,-0.03372279927134514,0,0.0059522101655602455,-0.00027136699645780027,-0.010334069840610027,1],[7,-0.07063166052103043,-0.021846704185009003,-0.9972630143165588,0,-0.9946739673614502,-0.07369910180568695,0.07206269353628159,0,-0.075071781873703,0.9970409870147705,-0.016524851322174072,0,0.0235291700810194,0.0002898959501180798,-0.010739260353147984,1],[7,-0.07384947687387466,-0.0035155045334249735,-0.9972630143165588,0,-0.9815620183944702,0.17703799903392792,0.07206270843744278,0,0.176300048828125,0.9841979742050171,-0.016524845734238625,0,0.03516453132033348,-0.0055952901020646095,-0.010739260353147984,1],[7,-0.996940016746521,0.062477000057697296,0.04698919504880905,0,-0.04407155513763428,0.04728539660573006,-0.9979090094566345,0,-0.06456824392080307,-0.9969260096549988,-0.044387225061655045,0,0.05246942862868309,-0.006207259837538004,0.05400291085243225,1],[7,-0.9975969791412354,0.0624816007912159,-0.0299358032643795,0,0.03301549330353737,0.048853401094675064,-0.9982600212097168,0,-0.060910407453775406,-0.9968500137329102,-0.050798848271369934,0,0.04129204899072647,-0.006295850034803152,0.05769351124763489,1],[7,-0.9975029826164246,0.06243849918246269,0.03299730271100998,0,-0.03000847063958645,0.04821539670228958,-0.998386025428772,0,-0.06392873078584671,-0.996882975101471,-0.04622134938836098,0,0.04876750707626343,-0.006257849745452404,0.05473095923662186,1],[7,-0.5124889016151428,0.5173630118370056,0.6853399276733398,0,0.020727958530187607,0.8053399920463562,-0.5924510955810547,0,-0.8584430813789368,-0.2894189953804016,-0.4234519600868225,0,0.02553672343492508,-0.06292001903057098,0.009630789048969746,1],[7,-0.46189382672309875,0.6606249213218689,0.5918009281158447,0,0.022141097113490105,0.6756231188774109,-0.7369140982627869,0,-0.8866590857505798,-0.3272729516029358,-0.32669293880462646,0,0.019758624956011772,-0.06097354367375374,0.02059684880077839,1],[7,-1.2987516839757518e-8,-0.03372279927134514,-0.9994310140609741,0,1,-3.3647398822722607e-7,-1.6416000780949958e-9,0,-3.3622734463278903e-7,-0.9994310140609741,0.03372279927134514,0,-0.0059522101655602455,0.00027136699645780027,0.010334069840610027,1],[7,0.00043792338692583144,0.04207983240485191,-0.9991139769554138,0,-0.10044362396001816,-0.9940599799156189,-0.04191095381975174,0,-0.9949430227279663,0.10037299990653992,0.0037913252599537373,0,0.008446750231087208,-0.0010378392180427909,0.010595089755952358,1],[7,-0.07063166052103043,-0.021846704185009003,-0.9972630143165588,0,0.9946739673614502,0.07369910180568695,-0.07206269353628159,0,0.075071781873703,-0.9970409870147705,0.016524851322174072,0,-0.0235291700810194,-0.0002898959501180798,0.010739260353147984,1],[7,-0.07384947687387466,-0.0035155045334249735,-0.9972630143165588,0,0.9815620183944702,-0.17703799903392792,-0.07206270843744278,0,-0.176300048828125,-0.9841979742050171,0.016524845734238625,0,-0.03516453132033348,0.0055952901020646095,0.010739260353147984,1],[7,-0.07063166052103043,-0.021846704185009003,-0.9972630143165588,0,0.9946739673614502,0.07369910180568695,-0.07206269353628159,0,0.075071781873703,-0.9970409870147705,0.016524851322174072,0,-0.014356869272887707,-0.00028989295242354274,0.010739260353147984,1],[7,-0.07384947687387466,-0.0035155045334249735,-0.9972630143165588,0,0.9815620183944702,-0.17703799903392792,-0.07206270843744278,0,-0.176300048828125,-0.9841979742050171,0.016524845734238625,0,-0.029010290279984474,0.0055952901020646095,0.010739260353147984,1],[7,-0.9901149868965149,0.03249209746718407,-0.13644400238990784,0,0.13776427507400513,0.04261089116334915,-0.9895480275154114,0,-0.026338502764701843,-0.9985629916191101,-0.04666593670845032,0,0.019342873245477676,-0.006384949665516615,0.060966599732637405,1],[7,-0.9895550012588501,-0.0465225987136364,-0.13644400238990784,0,0.13392998278141022,0.05345509946346283,-0.9895480275154114,0,0.053329985588788986,-0.9974859952926636,-0.0466659739613533,0,0.0013082210207358003,-0.005468619987368584,0.060966599732637405,1],[7,-0.9895550012588501,-0.0465225987136364,-0.13644400238990784,0,0.13392998278141022,0.05345509946346283,-0.9895480275154114,0,0.053329985588788986,-0.9974859952926636,-0.0466659739613533,0,0.006511901039630175,-0.005468619987368584,0.060966599732637405,1]],8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]]],0,0,[],[],[]],[[[74,"Skin-0",459418556,["Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L/Wrist_L/ThumbFinger1_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L/Wrist_L/IndexFinger1_L/IndexFinger2_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L/Wrist_L/IndexFinger1_L/IndexFinger2_L/IndexFinger3_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L/Wrist_L/IndexFinger1_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L/Wrist_L/RingFinger1_L/RingFinger2_L/RingFinger3_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L/Wrist_L/RingFinger1_L/RingFinger2_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L/Wrist_L/RingFinger1_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L/Wrist_L/PinkyFinger1_L/PinkyFinger2_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L/Wrist_L/PinkyFinger1_L/PinkyFinger2_L/PinkyFinger3_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L/Wrist_L/PinkyFinger1_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L/Wrist_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L","Root_M/Spine1_M/Spine2_M/Chest_M/Neck_M/Head_M","Root_M/Spine1_M/Spine2_M/Chest_M/Neck_M","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R/MiddleFinger1_R/MiddleFinger2_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R/MiddleFinger1_R/MiddleFinger2_R/MiddleFinger3_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R/MiddleFinger1_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R/IndexFinger1_R/IndexFinger2_R/IndexFinger3_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R/ThumbFinger1_R/ThumbFinger2_R/ThumbFinger3_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R/ThumbFinger1_R/ThumbFinger2_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R/ThumbFinger1_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R/IndexFinger1_R/IndexFinger2_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R/IndexFinger1_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R/RingFinger1_R/RingFinger2_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R/RingFinger1_R/RingFinger2_R/RingFinger3_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R/PinkyFinger1_R/PinkyFinger2_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R/RingFinger1_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R/PinkyFinger1_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R/PinkyFinger1_R/PinkyFinger2_R/PinkyFinger3_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R","Root_M/Spine1_M","Root_M/Spine1_M/Spine2_M","Root_M/Spine1_M/Spine2_M/Chest_M","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R","Root_M/Hip_R/HipPart1_R/Knee_R/KneePart1_R","Root_M/Hip_R/HipPart1_R","Root_M","Root_M/Hip_R/HipPart1_R/Knee_R/KneePart1_R/Ankle_R/Toes_R","Root_M/Hip_R/HipPart1_R/Knee_R/KneePart1_R/Ankle_R","Root_M/Hip_R/HipPart1_R/Knee_R","Root_M/Hip_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L/Wrist_L/MiddleFinger1_L/MiddleFinger2_L/MiddleFinger3_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L/Wrist_L/MiddleFinger1_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L/Wrist_L/MiddleFinger1_L/MiddleFinger2_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L/Wrist_L/ThumbFinger1_L/ThumbFinger2_L/ThumbFinger3_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L/Wrist_L/ThumbFinger1_L/ThumbFinger2_L","Root_M/Hip_L/HipPart1_L/Knee_L/KneePart1_L/Ankle_L","Root_M/Hip_L/HipPart1_L/Knee_L/KneePart1_L/Ankle_L/Toes_L","Root_M/Hip_L/HipPart1_L/Knee_L","Root_M/Hip_L","Root_M/Hip_L/HipPart1_L/Knee_L/KneePart1_L","Root_M/Hip_L/HipPart1_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L"],[[[7,-0.7557510137557983,-0.5703139901161194,-0.3218422532081604,0,0.22390900552272797,0.23680199682712555,-0.9454048871994019,0,0.6153900027275085,-0.7865539789199829,-0.0512649305164814,0,-0.00905591994524002,-0.01108407974243164,0.06002102419734001,1],[7,-0.3476259410381317,0.6398352384567261,0.6853957176208496,0,0.037808969616889954,0.7399557828903198,-0.6715921759605408,0,-0.9368710517883301,-0.20754867792129517,-0.28141921758651733,0,0.011073191650211811,-0.06431224197149277,0.013265267945826054,1],[7,-0.9617258906364441,0.2737799882888794,0.0113291060552001,0,0.003308737650513649,0.052944887429475784,-0.9985920190811157,0,-0.2739943861961365,-0.9603340029716492,-0.05182432010769844,0,0.0458025224506855,-0.013424228876829147,0.056004058569669724,1],[7,-0.961135983467102,0.2729640007019043,0.04133099317550659,0,-0.019721446558833122,0.08144168555736542,-0.9964830279350281,0,-0.2753699719905853,-0.9585710167884827,-0.07289327681064606,0,0.049957357347011566,-0.014998828992247581,0.054459650069475174,1],[7,-0.9615449905395508,0.2729310095310211,0.030667807906866074,0,-0.016838759183883667,0.052868086844682693,-0.9984599947929382,0,-0.2741319537162781,-0.9605799913406372,-0.046239227056503296,0,0.04271070659160614,-0.013379319570958614,0.055071618407964706,1],[7,-0.9914509057998657,-0.1304830014705658,0.0000434811481682118,0,-0.004555003251880407,0.0342773012816906,-0.9994019865989685,0,0.13040350377559662,-0.9908580183982849,-0.0345785915851593,0,0.050082188099622726,0.0004408420354593545,0.056115780025720596,1],[7,-0.9913020730018616,-0.1303589940071106,-0.018088296055793762,0,0.012422231957316399,0.04414789006114006,-0.9989479780197144,0,0.13102048635482788,-0.9904829859733582,-0.042144566774368286,0,0.04619400575757027,-0.0001193954813061282,0.0569600984454155,1],[7,-0.9895299673080444,-0.13035699725151062,-0.0619514025747776,0,0.057289570569992065,0.03921690955758095,-0.9975870251655579,0,0.13247206807136536,-0.9906910061836243,-0.03133820742368698,0,0.04053565487265587,0.0001574644265929237,0.05897727981209755,1],[7,-0.9669378995895386,-0.25398901104927063,0.022802405059337616,0,-0.03869044408202171,0.057734813541173935,-0.9975820183753967,0,0.25205835700035095,-0.9654819965362549,-0.06565298140048981,0,0.048522986471652985,0.002070489339530468,0.05487658083438873,1],[7,-0.966211199760437,-0.25305700302124023,0.04897679388523102,0,-0.055962689220905304,0.02047760598361492,-0.9982230067253113,0,0.2516043484210968,-0.9672350287437439,-0.0339474231004715,0,0.05257672443985939,0.0041212597861886024,0.05386001989245415,1],[7,-0.9662399291992188,-0.2500990033149719,-0.061890795826911926,0,0.04767651483416557,0.06250450760126114,-0.9969050288200378,0,0.25319331884384155,-0.9662010073661804,-0.04847048223018646,0,0.040135327726602554,0.0016165297711268067,0.05886450037360191,1],[7,-0.9672641158103943,0.25293099880218506,-0.02063029818236828,0,0.03598476201295853,0.0562308095395565,-0.9977689981460571,0,-0.25120657682418823,-0.965848982334137,-0.06349170953035355,0,0.03177937865257263,-0.014936220832169056,0.05725216120481491,1],[7,-0.9901149868965149,0.03249209746718407,-0.13644400238990784,0,0.13776427507400513,0.04261089116334915,-0.9895480275154114,0,-0.026338502764701843,-0.9985629916191101,-0.04666593670845032,0,0.011242453008890152,-0.006384949665516615,0.060966599732637405,1],[7,6.112818404652572e-17,-5.766256197772455e-17,1,0,0.9982990026473999,0.05829869955778122,-5.766257521261435e-17,0,-0.05829869955778122,0.9982990026473999,6.112819728141552e-17,0,-0.06528256833553314,-0.004379279911518097,3.738085849999092e-18,1],[7,5.810373379434603e-17,-8.055475896034999e-17,1,0,0.9489060044288635,-0.3155589997768402,-8.055475234290509e-17,0,0.3155589997768402,0.9489060044288635,5.810373379434603e-17,0,-0.05794582888484001,0.020108990371227264,4.98674352237902e-18,1],[7,-0.9975029826164246,0.06243849918246269,0.03299730271100998,0,0.03000847063958645,-0.04821539670228958,0.998386025428772,0,0.06392873078584671,0.996882975101471,0.04622134938836098,0,-0.04876750707626343,0.006257849745452404,-0.05473095923662186,1],[7,-0.996940016746521,0.062477000057697296,0.04698919504880905,0,0.04407155513763428,-0.04728539660573006,0.9979090094566345,0,0.06456824392080307,0.9969260096549988,0.044387225061655045,0,-0.05246942862868309,0.006207259837538004,-0.05400291085243225,1],[7,-0.9975969791412354,0.0624816007912159,-0.0299358032643795,0,-0.03301549330353737,-0.048853401094675064,0.9982600212097168,0,0.060910407453775406,0.9968500137329102,0.050798848271369934,0,-0.04129204899072647,0.006295850034803152,-0.05769351124763489,1],[7,-0.961135983467102,0.2729640007019043,0.04133099317550659,0,0.019721446558833122,-0.08144168555736542,0.9964830279350281,0,0.2753699719905853,0.9585710167884827,0.07289327681064606,0,-0.049957357347011566,0.014998828992247581,-0.054459650069475174,1],[7,-0.5124889016151428,0.5173630118370056,0.6853399276733398,0,-0.020727958530187607,-0.8053399920463562,0.5924510955810547,0,0.8584430813789368,0.2894189953804016,0.4234519600868225,0,-0.02553672343492508,0.06292001903057098,-0.009630789048969746,1],[7,-0.46189382672309875,0.6606249213218689,0.5918009281158447,0,-0.022141097113490105,-0.6756231188774109,0.7369140982627869,0,0.8866590857505798,0.3272729516029358,0.32669293880462646,0,-0.019758624956011772,0.06097354367375374,-0.02059684880077839,1],[7,-0.3476259410381317,0.6398352384567261,0.6853957176208496,0,-0.037808969616889954,-0.7399557828903198,0.6715921759605408,0,0.9368710517883301,0.20754867792129517,0.28141921758651733,0,-0.011073191650211811,0.06431224197149277,-0.013265278190374374,1],[7,-0.9617258906364441,0.2737799882888794,0.0113291060552001,0,-0.003308737650513649,-0.052944887429475784,0.9985920190811157,0,0.2739943861961365,0.9603340029716492,0.05182432010769844,0,-0.0458025224506855,0.013424228876829147,-0.056004058569669724,1],[7,-0.9615449905395508,0.2729310095310211,0.030667807906866074,0,0.016838759183883667,-0.052868086844682693,0.9984599947929382,0,0.2741319537162781,0.9605799913406372,0.046239227056503296,0,-0.04271070659160614,0.013379319570958614,-0.055071618407964706,1],[7,-0.9913020730018616,-0.1303589940071106,-0.018088296055793762,0,-0.012422231957316399,-0.04414789006114006,0.9989479780197144,0,-0.13102048635482788,0.9904829859733582,0.042144566774368286,0,-0.04619400575757027,0.0001193954813061282,-0.0569600984454155,1],[7,-0.9914509057998657,-0.1304830014705658,0.00004347742287791334,0,0.0045549990609288216,-0.0342772975564003,0.9994019865989685,0,-0.13040350377559662,0.9908580183982849,0.0345785915851593,0,-0.050082188099622726,-0.000440842064563185,-0.056115780025720596,1],[7,-0.9669378995895386,-0.25398901104927063,0.022802405059337616,0,0.03869044408202171,-0.057734813541173935,0.9975820183753967,0,-0.25205835700035095,0.9654819965362549,0.06565298140048981,0,-0.048522986471652985,-0.002070489339530468,-0.05487658083438873,1],[7,-0.9895299673080444,-0.13035699725151062,-0.0619514025747776,0,-0.057289570569992065,-0.03921690955758095,0.9975870251655579,0,-0.13247206807136536,0.9906910061836243,0.03133820742368698,0,-0.04053565487265587,-0.00015746543067507446,-0.05897727981209755,1],[7,-0.9895550012588501,-0.0465225987136364,-0.13644400238990784,0,-0.13392998278141022,-0.05345509946346283,0.9895480275154114,0,-0.05332998186349869,0.9974859952926636,0.0466659739613533,0,-0.006511901505291462,0.005468619987368584,-0.060966599732637405,1],[7,-0.9662399291992188,-0.2500990033149719,-0.061890795826911926,0,-0.04767651483416557,-0.06250450760126114,0.9969050288200378,0,-0.25319331884384155,0.9662010073661804,0.04847048223018646,0,-0.040135327726602554,-0.0016165297711268067,-0.05886450037360191,1],[7,-0.9901149868965149,0.03249209746718407,-0.13644400238990784,0,-0.13776427507400513,-0.04261089116334915,0.9895480275154114,0,0.026338502764701843,0.9985629916191101,0.04666593670845032,0,-0.019342873245477676,0.006384949665516615,-0.060966599732637405,1],[7,-0.9901149868965149,0.03249209746718407,-0.13644400238990784,0,-0.13776427507400513,-0.04261089116334915,0.9895480275154114,0,0.026338502764701843,0.9985629916191101,0.04666593670845032,0,-0.011242453008890152,0.006384949665516615,-0.060966599732637405,1],[7,-0.966211199760437,-0.25305700302124023,0.04897679388523102,0,0.055962689220905304,-0.02047760598361492,0.9982230067253113,0,-0.2516043484210968,0.9672350287437439,0.0339474231004715,0,-0.05257672443985939,-0.0041212597861886024,-0.05386001989245415,1],[7,-0.9672641158103943,0.25293099880218506,-0.02063029818236828,0,-0.03598476201295853,-0.0562308095395565,0.9977689981460571,0,0.25120657682418823,0.965848982334137,0.06349170953035355,0,-0.03177937865257263,0.014936220832169056,-0.05725216120481491,1],[7,-0.9895550012588501,-0.0465225987136364,-0.13644400238990784,0,-0.13392998278141022,-0.05345509946346283,0.9895480275154114,0,-0.05332998186349869,0.9974859952926636,0.0466659739613533,0,-0.0013082213699817657,0.005468619987368584,-0.060966599732637405,1],[7,6.11638851617635e-17,-5.833826927650686e-17,1,0,0.998881995677948,0.04726329818367958,-5.833829574628647e-17,0,-0.04726329818367958,0.998881995677948,6.11639116315431e-17,0,-0.04269319027662277,-0.0008234300184994936,2.563246189073702e-18,1],[7,6.122529505043944e-17,-6.030347174092055e-17,1,0,0.9998850226402283,0.015169600024819374,-6.030347174092055e-17,0,-0.015169600024819374,0.9998850226402283,6.122529505043944e-17,0,-0.04954791069030762,0.0007677110261283815,3.0798808657977842e-18,1],[7,5.985136790532356e-17,-7.416329980327525e-17,1,0,0.977446973323822,-0.2111790031194687,-7.416332627305485e-17,0,0.2111790031194687,0.977446973323822,5.985138775765826e-17,0,-0.05578818917274475,0.013730029575526714,4.357267348032292e-18,1],[7,-0.7557510137557983,-0.5703139901161194,-0.3218422532081604,0,-0.22390900552272797,-0.23680199682712555,0.9454048871994019,0,-0.6153900027275085,0.7865539789199829,0.0512649305164814,0,0.00905591994524002,0.01108407974243164,-0.06002102419734001,1],[7,-0.07063166052103043,-0.021846704185009003,-0.9972630143165588,0,-0.9946739673614502,-0.07369910180568695,0.07206269353628159,0,-0.075071781873703,0.9970409870147705,-0.016524851322174072,0,0.014356869272887707,0.00028989295242354274,-0.010739260353147984,1],[7,-0.07384947687387466,-0.0035155045334249735,-0.9972630143165588,0,-0.9815620183944702,0.17703799903392792,0.07206270843744278,0,0.176300048828125,0.9841979742050171,-0.016524845734238625,0,0.029010290279984474,-0.0055952901020646095,-0.010739260353147984,1],[7,6.096432287590141e-17,-5.550928180307346e-17,1,0,0.995622992515564,0.09346509724855423,-5.5509255333293855e-17,0,-0.09346509724855423,0.995622992515564,6.096429640612181e-17,0,-0.03696995973587036,-0.002799419919028878,2.0984529892898495e-18,1],[7,0.00043790347990579903,0.042079851031303406,-0.9991139769554138,0,0.10044362396001816,0.9940599799156189,0.04191097244620323,0,0.9949430227279663,-0.10037299990653992,-0.0037913471460342407,0,-0.008446750231087208,0.0010378394508734345,-0.010595089755952358,1],[7,-1.2247805436516046e-8,-0.03372279927134514,-0.9994310140609741,0,-1,3.364509950642969e-7,9.022438907102526e-10,0,3.362292773090303e-7,0.9994310140609741,-0.03372279927134514,0,0.0059522101655602455,-0.00027136699645780027,-0.010334069840610027,1],[7,-0.07063166052103043,-0.021846704185009003,-0.9972630143165588,0,-0.9946739673614502,-0.07369910180568695,0.07206269353628159,0,-0.075071781873703,0.9970409870147705,-0.016524851322174072,0,0.0235291700810194,0.0002898959501180798,-0.010739260353147984,1],[7,-0.07384947687387466,-0.0035155045334249735,-0.9972630143165588,0,-0.9815620183944702,0.17703799903392792,0.07206270843744278,0,0.176300048828125,0.9841979742050171,-0.016524845734238625,0,0.03516453132033348,-0.0055952901020646095,-0.010739260353147984,1],[7,-0.996940016746521,0.062477000057697296,0.04698919504880905,0,-0.04407155513763428,0.04728539660573006,-0.9979090094566345,0,-0.06456824392080307,-0.9969260096549988,-0.044387225061655045,0,0.05246942862868309,-0.006207259837538004,0.05400291085243225,1],[7,-0.9975969791412354,0.0624816007912159,-0.0299358032643795,0,0.03301549330353737,0.048853401094675064,-0.9982600212097168,0,-0.060910407453775406,-0.9968500137329102,-0.050798848271369934,0,0.04129204899072647,-0.006295850034803152,0.05769351124763489,1],[7,-0.9975029826164246,0.06243849918246269,0.03299730271100998,0,-0.03000847063958645,0.04821539670228958,-0.998386025428772,0,-0.06392873078584671,-0.996882975101471,-0.04622134938836098,0,0.04876750707626343,-0.006257849745452404,0.05473095923662186,1],[7,-0.5124889016151428,0.5173630118370056,0.6853399276733398,0,0.020727958530187607,0.8053399920463562,-0.5924510955810547,0,-0.8584430813789368,-0.2894189953804016,-0.4234519600868225,0,0.02553672343492508,-0.06292001903057098,0.009630789048969746,1],[7,-0.46189382672309875,0.6606249213218689,0.5918009281158447,0,0.022141097113490105,0.6756231188774109,-0.7369140982627869,0,-0.8866590857505798,-0.3272729516029358,-0.32669293880462646,0,0.019758624956011772,-0.06097354367375374,0.02059684880077839,1],[7,-1.2987516839757518e-8,-0.03372279927134514,-0.9994310140609741,0,1,-3.3647398822722607e-7,-1.6416000780949958e-9,0,-3.3622734463278903e-7,-0.9994310140609741,0.03372279927134514,0,-0.0059522101655602455,0.00027136699645780027,0.010334069840610027,1],[7,0.00043792338692583144,0.04207983240485191,-0.9991139769554138,0,-0.10044362396001816,-0.9940599799156189,-0.04191095381975174,0,-0.9949430227279663,0.10037299990653992,0.0037913252599537373,0,0.008446750231087208,-0.0010378392180427909,0.010595089755952358,1],[7,-0.07063166052103043,-0.021846704185009003,-0.9972630143165588,0,0.9946739673614502,0.07369910180568695,-0.07206269353628159,0,0.075071781873703,-0.9970409870147705,0.016524851322174072,0,-0.0235291700810194,-0.0002898959501180798,0.010739260353147984,1],[7,-0.07384947687387466,-0.0035155045334249735,-0.9972630143165588,0,0.9815620183944702,-0.17703799903392792,-0.07206270843744278,0,-0.176300048828125,-0.9841979742050171,0.016524845734238625,0,-0.03516453132033348,0.0055952901020646095,0.010739260353147984,1],[7,-0.07063166052103043,-0.021846704185009003,-0.9972630143165588,0,0.9946739673614502,0.07369910180568695,-0.07206269353628159,0,0.075071781873703,-0.9970409870147705,0.016524851322174072,0,-0.014356869272887707,-0.00028989295242354274,0.010739260353147984,1],[7,-0.07384947687387466,-0.0035155045334249735,-0.9972630143165588,0,0.9815620183944702,-0.17703799903392792,-0.07206270843744278,0,-0.176300048828125,-0.9841979742050171,0.016524845734238625,0,-0.029010290279984474,0.0055952901020646095,0.010739260353147984,1],[7,-0.9901149868965149,0.03249209746718407,-0.13644400238990784,0,0.13776427507400513,0.04261089116334915,-0.9895480275154114,0,-0.026338502764701843,-0.9985629916191101,-0.04666593670845032,0,0.019342873245477676,-0.006384949665516615,0.060966599732637405,1],[7,-0.9895550012588501,-0.0465225987136364,-0.13644400238990784,0,0.13392998278141022,0.05345509946346283,-0.9895480275154114,0,0.053329985588788986,-0.9974859952926636,-0.0466659739613533,0,0.0013082210207358003,-0.005468619987368584,0.060966599732637405,1],[7,-0.9895550012588501,-0.0465225987136364,-0.13644400238990784,0,0.13392998278141022,0.05345509946346283,-0.9895480275154114,0,0.053329985588788986,-0.9974859952926636,-0.0466659739613533,0,0.006511901039630175,-0.005468619987368584,0.060966599732637405,1]],8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]]],0,0,[],[],[]],[[[115],[116,"police_Base",[-3,-4],[[131,-2,[55,"ef7win4PBfzYC323/PxlPf"]]],[7,"c45rgHdxpZTpMuNOO3sYfa",-1,0]],[117,"frydde_police",1,[-5,-6,-7,-8,-9],[7,"c2HeSTqZJc+6C3HbOKgLTk",1,0]],[97,"Wrist_R",[-10,-11,-12,-13,-14],[7,"e5Z31khCdfh4JOneFzI/4X",1,0],[1,0.008100420236587524,-4.440891999238953e-18,1.092459473171813e-15],[3,-0.0164531281851259,-0.05630427184355682,0.11041551000827825,0.9921529814976633],[1,-1.1876299830967663,-6.363205757160882,12.764891095942634]],[97,"Wrist_L",[-15,-16,-17,-18,-19],[7,"2fb4seu4hVT7BbEFsRDqVF",1,0],[1,-0.008100420236587524,9.992007618673103e-18,-1.0746959217184694e-15],[3,-0.0164531281851259,-0.05630427184355682,0.11041551000827825,0.9921529814976633],[1,-1.1876299830967663,-6.363205757160882,12.764891095942634]],[10,"Root_M",1,[-20,-21,-22],[7,"06AGlBCdtTXK2/Ia5rFCi7",1,0],[1,7.4337413670797e-19,0.03706977143883705,-0.0006682323873974383],[3,0.4760606469852976,0.5228443940523222,0.4760606469852976,0.5228443940523222],[1,0,90.00000000000011,84.63701992921632]],[97,"Chest_M",[-23,-24,-25],[7,"03TCDgSXBecJLAipuuDH/T",1,0],[1,0.007899854332208633,2.0122792983075452e-17,-7.522235733950037e-18],[3,2.1903536033038732e-17,3.722731014321986e-17,0.11372903097276456,0.9935118054225605],[1,2.061851705699605e-15,4.057770717126712e-15,13.060645873186564]],[125,"Head_M",[[[39,"HeadEnd_M",-26,[7,"839DV2cOhYtoGyyJSlPZkD",1,0],[1,0.023971429094672203,1.776356799695581e-17,1.5605730057129554e-17]],-27],4,1],[7,"13glf10phQlbWeXtTaD53w",1,0],[1,0.00431668059900403,-8.881783998477905e-18,2.0696300876405924e-18],[3,-4.3624929617727275e-17,-2.558158108403107e-17,-0.18855312392880014,0.9820629915930498],[1,-5.8802222386966104e-15,-4.113959660287645e-15,-21.73671639678434]],[75,"head",2,[[76,-28,[55,"79QUWxipRUxbjMc6R6NR7B"],[0],[1],1,1,2]],[7,"9bp3WWS/9UcpcpVPn94uRX",1,0]],[75,"body",2,[[76,-29,[55,"9cxAXifCRcI4K0dEbyj+yp"],[3,4],[1],1,5,6]],[7,"48QT0vtDVSHafrhBYCHXbi",1,0]],[75,"hand_L",2,[[76,-30,[55,"7f8l6VPatSC4F3hE0gXkzY"],[7],[1],1,8,9]],[7,"6cP8JR3mNdPYw2s2e8/MmF",1,0]],[75,"hand_R",2,[[76,-31,[55,"dbDyplvXZQOJ9fGtkLQbTw"],[10],[1],1,11,12]],[7,"57QW6rpDJSQIccYCTzWekv",1,0]],[75,"hat",2,[[76,-32,[55,"603heDJEBTprOSXinozT0e"],[13],[1],1,14,15]],[7,"8dZ1bok+JWraaoDewmy6OH",1,0]],[10,"Spine1_M",5,[-33],[7,"6ftx6ZW/xWOqbJ8HSlgnBQ",1,0],[1,0.005639315117150545,3.3306689994292145e-18,-8.286366985853048e-18],[3,-3.4512289808441556e-31,-3.7413301934353245e-17,0.02315832235693003,0.9997318100898922],[1,9.939209456289161e-17,-4.290701073875078e-15,2.6539855249331548]],[10,"Spine2_M",13,[6],[7,"33rm5/yepSzoG9dHC5P36e",1,0],[1,0.006853824481368065,2.1788127586187636e-17,-5.701829994992843e-18],[3,4.42033827575771e-31,-2.5937030120537297e-17,0.016054667223617876,0.9998711155245654],[1,4.7741726565098456e-17,-2.9733144096216298e-15,1.8398083883928154]],[10,"Neck_M",6,[7],[7,"0a9SAWeSNfy7sair/dv0AZ",1,0],[1,0.003991219215095043,-1.776356799695581e-17,1.3913450872744068e-17],[3,-2.8198400097966973e-31,-8.741033196618276e-17,0.0541057992432571,0.9985352084369625],[1,5.451417289647669e-16,-1.0060718399375467e-14,6.203096931527011]],[46,"Jaw_M",7,[[39,"JawEnd_M",-34,[7,"31H7WG8UJXEYs935/zzmHg",1,0],[1,0.00450707646086812,-8.881783998477905e-18,-2.1502018220014732e-18]]],[7,"d5NffAHq5Wv6yzYLBY4exc",1,0],[1,-0.0006536733126267791,0.0015348434681072831,-1.861709348483804e-18],[3,2.616552386279944e-17,3.5698355065238236e-17,0.7923118317174793,0.6101163506418203],[1,-180,180,75.19583269816131]],[10,"Scapula_R",6,[-35],[7,"28oSzoX79WUaoxloNTK9RB",1,0],[1,0.004209313541650772,0.0006975476280786097,-0.006151859648525715],[3,-0.19634315558045543,0.7889044955815414,-0.22811866023299496,0.53576201709476],[1,10.349845889553423,114.77568271938692,-33.65746302501819]],[10,"Shoulder_R",17,[-36],[7,"3bXi7Cgjhe/JgCw36WFN1C",1,0],[1,0.004243205301463604,-2.2204459996194763e-18,-1.0658140798173486e-16],[3,0.035594735691642745,-0.08842259744098191,0.2947023543807219,0.950823317643868],[1,8.274846572232011,-13.132234112340027,33.6504668890069]],[63,"ShoulderPart1_R",18,[-37],[7,"afpK+4VapbqJ8/rclM9WyG",1,0],[1,0.005203681066632271,1.4632739803372742e-15,2.6645351995433716e-17]],[10,"Elbow_R",19,[-38],[7,"desKdEeEFeuJ63KOirg5NY",1,0],[1,0.005203681066632271,1.4588330924739383e-15,3.552713599391162e-17],[3,-1.1615729733903677e-16,1.264397217381575e-16,0.03988129010999903,0.999204424879695],[1,-1.3922180127231085e-14,1.5056137629933935e-14,4.571271537289243]],[63,"ElbowPart1_R",20,[3],[7,"b3th1O+S5VyK2jcnOVnSSI",1,0],[1,0.008100420236587524,-6.661337998858429e-18,1.1102230246251565e-15]],[10,"MiddleFinger1_R",3,[-39],[7,"c61YQ9gLBaOIjdYAhJSsvF",1,0],[1,0.007873017340898514,2.2204460823375376e-17,3.552713599391162e-17],[3,0.007007519653267104,0.003588904129628201,-0.09629395519943204,0.9953218015433537],[1,0.8547202146340173,0.4958547443740788,-11.048312490899411]],[10,"MiddleFinger2_R",22,[-40],[7,"2fO5S3+CBZPZvvDpw5xFMJ",1,0],[1,0.003926635254174471,-2.7755575615628914e-17,4.440892164675075e-17],[3,0.0003194263847654106,-0.03154812383079018,-0.000022099426149491457,0.9995021827695811],[1,0.03650545537164101,-3.6157476573941154,-0.003685920900163046]],[46,"MiddleFinger3_R",23,[[39,"MiddleFinger4_R",-41,[7,"2b8Gpy2c5ewpa5zFdf6GRL",1,0],[1,0.002180140232667327,-2.2204459996194763e-18,3.55271373174006e-16]]],[7,"6dAlpb42RdTYHTClKGxWeQ",1,0],[1,0.002935933880507946,6.661337998858429e-18,7.993606094938482e-17],[3,0.000465839516239179,-0.007044460114543734,5.983397348858191e-7,0.9999750789769122],[1,0.053380436830119685,-0.8072422879619406,-0.00030747929827275593]],[10,"ThumbFinger1_R",3,[-42],[7,"044V44G/xYZqIocLqyN8VB",1,0],[1,0.0011246022768318653,0.0034343628212809563,-0.0005099081317894161],[3,-0.3518624222737297,-0.19819537827819309,0.41742174832987994,0.814045767658093],[1,-45.247052065154584,-2.890573744204981,54.992387202091194]],[10,"ThumbFinger2_R",25,[-43],[7,"38Y2gRQ6FcS5v38hxGAh+C",1,0],[1,0.003771808696910739,3.552713599391162e-17,-3.108624482185328e-17],[3,0.04764065651510809,0.0387226353927483,-0.04956320438582329,0.9968823471834872],[1,5.697301845202023,4.720752990688679,-5.458676878384224]],[46,"ThumbFinger3_R",26,[[39,"ThumbFinger4_R",-44,[7,"ddnrQRXTVfhakaRSW1VN9u",1,0],[1,0.0034306433517485857,3.552713599391162e-17,1.9984015237346206e-17]]],[7,"e2x9zzz1pVEoDnuwVPx8KC",1,0],[1,0.00394374830648303,-1.776356799695581e-17,-3.108624482185328e-17],[3,-0.09644115236882876,0.021083277299757373,-0.019874457817503154,0.9949168837016156],[1,-11.02549648725941,2.186656470616668,-2.499659971211338]],[10,"IndexFinger1_R",3,[-45],[7,"7f6kumB1xUwYEVpGnJc3vk",1,0],[1,0.008165353909134865,0.0022352130617946386,0.00001212059760291595],[3,0.0015845099610326445,-0.027016574369298677,0.010356547254369707,0.9995800798167697],[1,0.21360366403141084,-3.0986204617884208,1.1814528298162572]],[10,"IndexFinger2_R",28,[-46],[7,"e6OwNkaNZaLaHLdYruqUh0",1,0],[1,0.0042216582223773,8.092637481362311e-14,3.842082088676563e-13],[3,-0.000035475516625760186,0.010064678016711877,0.0004418039060847889,0.9999492516159089],[1,-0.004574534680615227,1.153348750094565,0.05058352083842478]],[46,"IndexFinger3_R",29,[[39,"IndexFinger4_R",-47,[7,"e98qtfDzZQNby9Uybf9rEA",1,0],[1,0.0017226875061169267,-2.4424906409404546e-17,2.309263806517031e-16]]],[7,"64sRmjP9NZsqJSFdBJt48L",1,0],[1,0.002878997242078185,1.9984015237346206e-17,-6.217248964370656e-17],[3,-0.014281436646220337,-0.011539350138747942,-0.00003294991584650082,0.9998314272316101],[1,-1.636522353703718,-1.3222605525000302,0.015109371247251318]],[10,"RingFinger1_R",3,[-48],[7,"796vlrR45USJR6OEKJ2U8H",1,0],[1,0.007693943567574024,-0.0025665543507784605,-0.00018207388347946107],[3,0.01731565995320478,0.019634055292552025,-0.19145293844695727,0.9811526100221003],[1,2.5656104715939723,2.7921727546669364,-22.024878194388794]],[10,"RingFinger2_R",31,[-49],[7,"67EU7tq0taa4dMrxz6iopS",1,0],[1,0.003053422085940838,-7.216449395365721e-18,8.881783998477905e-18],[3,-0.0024656520308306198,-0.02246260794426725,-0.0001010273320179814,0.9997446381941157],[1,-0.2827319550765643,-2.57426251216237,-0.005227272574691105]],[46,"RingFinger3_R",32,[[39,"RingFinger4_R",-50,[7,"ccgZXAIhdfvrQI2AU4Ni3J",1,0],[1,0.002034686505794525,-1.9984015237346206e-17,-8.881783998477905e-18]]],[7,"c8//P3yNVbZYLY5u9Qg+Ue",1,0],[1,0.0029276127461344004,-2.2204460823375376e-17,8.881783998477905e-18],[3,0.0049392008315100626,-0.008494554103421318,-0.000017196614894960706,0.9999517221096259],[1,0.5659558669075501,-0.9733943012010738,-0.006778330614694919]],[10,"PinkyFinger1_R",3,[-51],[7,"16LjZcroZZ/qw/4s4Mj3M1",1,0],[1,0.006163628306239843,-0.00463339127600193,-0.00019213129417039454],[3,0.007501861695600869,0.02063793916380992,-0.2514226486690067,0.9676282598572822],[1,1.632624545388658,2.867376374193812,-29.094904697692797]],[10,"PinkyFinger2_R",34,[-52],[7,"daj1G3pi5XIKhJHKG8UOwK",1,0],[1,0.0034830505028367043,1.1102230411687688e-17,-9.769962563761818e-17],[3,0.0023980153940785947,-0.04314403479785906,-0.0019620512027080646,0.9990640580756617],[1,0.2648380639940538,-4.944954488936332,-0.2364803951056321]],[46,"PinkyFinger3_R",35,[[39,"PinkyFinger4_R",-53,[7,"a0oKcH7jlRQ7DxIsmnQAiZ",1,0],[1,0.0019452801207080483,-5.551115205843844e-18,2.8421708795129297e-16]]],[7,"29pcWfqupRForXWaIIrT0+",1,0],[1,0.003114901715889573,4.440891999238953e-18,0],[3,0.018653831065635486,-0.008644164795798326,-0.0002108693941994716,0.999788611925369],[1,2.137407160219522,-0.9899377076069621,-0.04263626964854662]],[10,"Scapula_L",6,[-54],[7,"a6fkCa3GJb05QpkyZDp6tS",1,0],[1,0.004209313541650772,0.0006975476280786097,0.006151859648525715],[3,0.7889044955815414,0.19634315558045543,-0.53576201709476,-0.22811866023299496],[1,-169.65015411044658,65.22431728061306,33.65746302501819]],[10,"Shoulder_L",37,[-55],[7,"a1th5Tx0BYEZqMG+z88Sc1",1,0],[1,-0.004243205301463604,-6.661337998858429e-18,9.769962563761818e-17],[3,0.035594735691642745,-0.08842259744098191,0.2947023543807219,0.950823317643868],[1,8.274846572232011,-13.132234112340027,33.6504668890069]],[63,"ShoulderPart1_L",38,[-56],[7,"3bcP3YEMpemrWeQvYv04XQ",1,0],[1,-0.005203681066632271,-1.4632739803372742e-15,-3.552713599391162e-17]],[10,"Elbow_L",39,[-57],[7,"3fHY16GvNXpYMrP+FJKvip",1,0],[1,-0.005203681066632271,-1.461053483466047e-15,-1.776356799695581e-17],[3,-2.95030980472847e-17,1.3022386800461728e-16,0.03988129010999903,0.999204424879695],[1,-3.985926473525519e-15,1.5093527982454838e-14,4.571271537289243]],[63,"ElbowPart1_L",40,[4],[7,"e1pBfLoeRZi6LVxt3fcDXc",1,0],[1,-0.008100420236587524,8.881783998477905e-18,-1.0658141459917976e-15]],[10,"MiddleFinger1_L",4,[-58],[7,"b1CgKLzUldl5P/ktl+iUeg",1,0],[1,-0.007873017340898514,-3.108624482185328e-17,-5.329070399086743e-17],[3,0.007007519653267104,0.003588904129628201,-0.09629395519943204,0.9953218015433537],[1,0.8547202146340173,0.4958547443740788,-11.048312490899411]],[10,"MiddleFinger2_L",42,[-59],[7,"2bngANGvRd+7L0KeQJjev7",1,0],[1,-0.003926635254174471,3.441691402807765e-17,-5.329070399086743e-17],[3,0.0003194263847654106,-0.03154812383079018,-0.000022099426149491457,0.9995021827695811],[1,0.03650545537164101,-3.6157476573941154,-0.003685920900163046]],[46,"MiddleFinger3_L",43,[[39,"MiddleFinger4_L",-60,[7,"5fmBMTTn1c96NfocbWb2ib",1,0],[1,-0.002180140232667327,1.1102229998097382e-18,-3.197442437975393e-16]]],[7,"9a7s3SIDtVm7VMuavkwK86",1,0],[1,-0.002935933880507946,-3.3306689994292145e-18,-1.2434497928741312e-16],[3,0.000465839516239179,-0.007044460114543734,5.983397348858191e-7,0.9999750789769122],[1,0.053380436830119685,-0.8072422879619406,-0.00030747929827275593]],[10,"ThumbFinger1_L",4,[-61],[7,"85eP+1rsRZtIc6ukf1mBaF",1,0],[1,-0.0011246022768318653,-0.0034343628212809563,0.0005099081317894161],[3,-0.3518624222737297,-0.19819537827819309,0.41742174832987994,0.814045767658093],[1,-45.247052065154584,-2.890573744204981,54.992387202091194]],[10,"ThumbFinger2_L",45,[-62],[7,"b2Qi01K8xfT5+dUspTFD7q",1,0],[1,-0.003771808696910739,-6.217248964370656e-17,4.884981281880909e-17],[3,0.04764065651510809,0.0387226353927483,-0.04956320438582329,0.9968823471834872],[1,5.697301845202023,4.720752990688679,-5.458676878384224]],[46,"ThumbFinger3_L",46,[[39,"ThumbFinger4_L",-63,[7,"934rBoGCxVAoUnn8LJW+Ww",1,0],[1,-0.0034306433517485857,-1.776356799695581e-17,-8.881783998477905e-18]]],[7,"fbcuLrSKxaYLk3Fa124C3i",1,0],[1,-0.00394374830648303,8.881783998477905e-18,0],[3,-0.09644115236882876,0.021083277299757373,-0.019874457817503154,0.9949168837016156],[1,-11.02549648725941,2.186656470616668,-2.499659971211338]],[10,"IndexFinger1_L",4,[-64],[7,"abVE6cQCRb7o221My3Jb/p",1,0],[1,-0.008165353909134865,-0.0022352130617946386,-0.00001212059760291595],[3,0.0015845099610326445,-0.027016574369298677,0.010356547254369707,0.9995800798167697],[1,0.21360366403141084,-3.0986204617884208,1.1814528298162572]],[10,"IndexFinger2_L",48,[-65],[7,"d2f9W+jMhXMqutxmwUr+WH",1,0],[1,-0.0042216582223773,-8.091749790833588e-14,-3.8419045505708183e-13],[3,-0.000035475516625760186,0.010064678016711877,0.0004418039060847889,0.9999492516159089],[1,-0.004574534680615227,1.153348750094565,0.05058352083842478]],[46,"IndexFinger3_L",49,[[39,"IndexFinger4_L",-66,[7,"1emAy2mTdZTYueYDXyvoUD",1,0],[1,-0.0017226875061169267,2.2204460823375376e-17,-2.1316281596346973e-16]]],[7,"fcZiAwdKhYYo3+g4orNn5D",1,0],[1,-0.002878997242078185,2.2204459996194763e-18,3.552713599391162e-17],[3,-0.014281436646220337,-0.011539350138747942,-0.00003294991584650082,0.9998314272316101],[1,-1.636522353703718,-1.3222605525000302,0.015109371247251318]],[10,"RingFinger1_L",4,[-67],[7,"4fEpOndYFc26M9t5dEQXJq",1,0],[1,-0.007693943567574024,0.0025665543507784605,0.00018207388347946107],[3,0.01731565995320478,0.019634055292552025,-0.19145293844695727,0.9811526100221003],[1,2.5656104715939723,2.7921727546669364,-22.024878194388794]],[10,"RingFinger2_L",51,[-68],[7,"c5U6Mm7b1RTp7BW94twTIG",1,0],[1,-0.003053422085940838,1.554312241092664e-17,-4.440892164675075e-17],[3,-0.0024656520308306198,-0.02246260794426725,-0.0001010273320179814,0.9997446381941157],[1,-0.2827319550765643,-2.57426251216237,-0.005227272574691105]],[46,"RingFinger3_L",52,[[39,"RingFinger4_L",-69,[7,"c3V9yKJ3RTJqx+VuDhIdXR",1,0],[1,-0.002034686505794525,1.8873791617151008e-17,8.881783998477905e-18]]],[7,"7beL13f7NWk6xEWBUjFN4b",1,0],[1,-0.0029276127461344004,1.8318680634234022e-17,-1.776356799695581e-17],[3,0.0049392008315100626,-0.008494554103421318,-0.000017196614894960706,0.9999517221096259],[1,0.5659558669075501,-0.9733943012010738,-0.006778330614694919]],[10,"PinkyFinger1_L",4,[-70],[7,"17cZjmlNhYIJY9m2zo7by5",1,0],[1,-0.006163628306239843,0.00463339127600193,0.00019213129417039454],[3,0.007501861695600869,0.02063793916380992,-0.2514226486690067,0.9676282598572822],[1,1.632624545388658,2.867376374193812,-29.094904697692797]],[10,"PinkyFinger2_L",54,[-71],[7,"0fj2QehqVVXoGg+sI7lhA6",1,0],[1,-0.0034830505028367043,3.3306689994292145e-18,9.769962563761818e-17],[3,0.0023980153940785947,-0.04314403479785906,-0.0019620512027080646,0.9990640580756617],[1,0.2648380639940538,-4.944954488936332,-0.2364803951056321]],[46,"PinkyFinger3_L",55,[[39,"PinkyFinger4_L",-72,[7,"77xU6EzVNT5ah20juevLEC",1,0],[1,-0.0019452801207080483,4.440891999238953e-18,-2.664535364979494e-16]]],[7,"34dIDdBGFYkYQRTboxVCgf",1,0],[1,-0.003114901715889573,-1.1102229998097382e-18,-4.440892164675075e-17],[3,0.018653831065635486,-0.008644164795798326,-0.0002108693941994716,0.999788611925369],[1,2.137407160219522,-0.9899377076069621,-0.04263626964854662]],[10,"Hip_R",5,[-73],[7,"9bjH1Ts59XI6PN3Kk2wW1k",1,0],[1,-0.0007667930331081152,-0.0002747571561485529,-0.008132658898830414],[3,0.042081602622941076,0.9984291363184753,-0.0033133766237828936,0.036843181273845796],[1,0.5587270937234328,175.7499092949188,4.806267382178571]],[63,"HipPart1_R",57,[-74],[7,"168gcixc9ah6EYJjJk6jCo",1,0],[1,0.006154242902994156,5.335587440619127e-12,-1.8804958133201988e-14]],[10,"Knee_R",58,[-75],[7,"06U62MlbJfi5qppeFtxuE5",1,0],[1,0.006154242902994156,5.335587440619127e-12,-1.8804958133201988e-14],[3,5.39477320542198e-17,1.1734511229826501e-17,-0.1258671695825145,0.9920471035295081],[1,6.508255482859497e-15,2.181198478464081e-15,-14.461672953406007]],[63,"KneePart1_R",59,[-76],[7,"5ajRcVZ0Ba8YRfK/kbdIf9",1,0],[1,0.009172307327389717,3.095249834217384e-9,-2.712718897711526e-14]],[10,"Ankle_R",60,[-77],[7,"d3q8JBkFVZSq2KPwziWTD5",1,0],[1,0.009172307327389717,3.095249834217384e-9,-2.7122748830405753e-14],[3,0.0072357795758463146,0.03634582162168158,0.03663649112848902,0.9986412730617371],[1,0.6773021005287134,4.143758388342532,4.226496871584907]],[46,"Toes_R",61,[[39,"ToesEnd_R",-78,[7,"69SMuU94ZX47Ob2fPbQJiO",1,0],[1,0.006472224369645119,-5.551114999048691e-19,3.552713599391162e-17]]],[7,"ec61sPt5ZWYL+1f/rmHi/h",1,0],[1,0.0056914170272648335,0.008550174534320831,-4.199306874452802e-11],[3,-0.025581247861379726,-0.0029549016336325672,0.7417634059007207,0.6701670821375464],[1,-163.61990767217517,161.3042435800494,83.91299232106721]],[10,"Hip_L",5,[-79],[7,"50PaC2keNTwIUykMH8/+31",1,0],[1,-0.0007667930331081152,-0.0002747571561485529,0.008132658898830414],[3,0.9984291361627256,-0.04208160634166693,-0.036843181268098456,-0.003313376390435377],[1,-179.44127291705027,4.250090706715679,-4.80626780938224]],[63,"HipPart1_L",63,[-80],[7,"91cCD8tmhcF79p9h4MZJwC",1,0],[1,-0.006154242902994156,-5.335584404853044e-12,1.8804958133201988e-14]],[10,"Knee_L",64,[-81],[7,"acpOTuPY1dyLaGGmqqndfu",1,0],[1,-0.006154242902994156,-5.335584404853044e-12,1.8791634304941678e-14],[3,2.823520062096199e-17,-3.932000285668994e-17,-0.1258671695825145,0.9920471035295081],[1,2.7291319303772525e-15,-4.1955994851041816e-15,-14.461672953406007]],[63,"KneePart1_L",65,[-82],[7,"8bm1VSIVVa/rjM5CLZVeEm",1,0],[1,-0.009172307327389717,-3.095249834217384e-9,1.7417400258613186e-13]],[10,"Ankle_L",66,[-83],[7,"1bfuwdEp1YCZFJCzN6Qjb5",1,0],[1,-0.009172307327389717,-3.095249834217384e-9,1.7418067042949265e-13],[3,0.007235768866197234,0.03634582162449826,0.036636491131328226,0.9986412731391284],[1,0.6773008715350484,4.143758433954681,4.226496827512324]],[46,"Toes_L",67,[[39,"ToesEnd_L",-84,[7,"8dA2yDnXtXy5YVja/g7TTa",1,0],[1,-0.006472224369645119,-3.9779559854458135e-12,-1.3423721856309356e-10]]],[7,"c9S/1tUuJaLLY86Fn4rCWl",1,0],[1,-0.0056914170272648335,-0.008550174534320831,-1.555068435132867e-10],[3,-0.025581247861379726,-0.0029549016336325672,0.7417634059007207,0.6701670821375464],[1,-163.61990767217517,161.3042435800494,83.91299232106721]]],0,[0,16,1,0,0,1,0,-1,2,0,-2,5,0,-1,8,0,-2,9,0,-3,10,0,-4,11,0,-5,12,0,-1,22,0,-2,25,0,-3,28,0,-4,31,0,-5,34,0,-1,42,0,-2,45,0,-3,48,0,-4,51,0,-5,54,0,-1,13,0,-2,57,0,-3,63,0,-1,15,0,-2,17,0,-3,37,0,2,7,0,-2,16,0,0,8,0,0,9,0,0,10,0,0,11,0,0,12,0,-1,14,0,2,16,0,-1,18,0,-1,19,0,-1,20,0,-1,21,0,-1,23,0,-1,24,0,2,24,0,-1,26,0,-1,27,0,2,27,0,-1,29,0,-1,30,0,2,30,0,-1,32,0,-1,33,0,2,33,0,-1,35,0,-1,36,0,2,36,0,-1,38,0,-1,39,0,-1,40,0,-1,41,0,-1,43,0,-1,44,0,2,44,0,-1,46,0,-1,47,0,2,47,0,-1,49,0,-1,50,0,2,50,0,-1,52,0,-1,53,0,2,53,0,-1,55,0,-1,56,0,2,56,0,-1,58,0,-1,59,0,-1,60,0,-1,61,0,-1,62,0,2,62,0,-1,64,0,-1,65,0,-1,66,0,-1,67,0,-1,68,0,2,68,0,18,1,3,2,21,4,2,41,6,2,14,7,2,15,84],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[-1,1,11,-1,-2,1,11,-1,1,11,-1,1,11,-1,1,11],[15,135,136,15,15,137,138,15,139,140,15,141,142,15,143,144]],[[{"base":"2,2,0,0,0,0","mipmaps":["3bqXmI+5dBkLjSFjtxW8Zu"]}],[2],0,[],[],[]],[[[13,".bin",1909899844,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":43704,"length":5244,"count":2622,"stride":2}},{"primitiveMode":7,"jointMapIndex":1,"vertexBundelIndices":[1],"indexView":{"offset":105324,"length":7356,"count":3678,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":43704,"count":607,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]},{"view":{"offset":48948,"length":56376,"count":783,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,1,10,11,12,14,35,36,37,38,40,41,42,43,45,50,51,52,53,54,55,56,57,58,59],[0,14,20,21,28,29,30,31,33,34,35,36,37,38,39,40,41,42,43,44,45,54,56]]},"minPosition",8,[1,-0.03730551898479462,-0.00004055327735841274,-0.01208978146314621],"maxPosition",8,[1,0.03730551898479462,0.06608457863330841,0.015263852663338184]]],-1],0,0,[],[],[]],[[[74,"Skin-2",459418556,["Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L/Wrist_L/ThumbFinger1_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L/Wrist_L/IndexFinger1_L/IndexFinger2_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L/Wrist_L/IndexFinger1_L/IndexFinger2_L/IndexFinger3_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L/Wrist_L/IndexFinger1_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L/Wrist_L/RingFinger1_L/RingFinger2_L/RingFinger3_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L/Wrist_L/RingFinger1_L/RingFinger2_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L/Wrist_L/RingFinger1_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L/Wrist_L/PinkyFinger1_L/PinkyFinger2_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L/Wrist_L/PinkyFinger1_L/PinkyFinger2_L/PinkyFinger3_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L/Wrist_L/PinkyFinger1_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L/Wrist_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L","Root_M/Spine1_M/Spine2_M/Chest_M/Neck_M/Head_M","Root_M/Spine1_M/Spine2_M/Chest_M/Neck_M","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R/MiddleFinger1_R/MiddleFinger2_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R/MiddleFinger1_R/MiddleFinger2_R/MiddleFinger3_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R/MiddleFinger1_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R/IndexFinger1_R/IndexFinger2_R/IndexFinger3_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R/ThumbFinger1_R/ThumbFinger2_R/ThumbFinger3_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R/ThumbFinger1_R/ThumbFinger2_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R/ThumbFinger1_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R/IndexFinger1_R/IndexFinger2_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R/IndexFinger1_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R/RingFinger1_R/RingFinger2_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R/RingFinger1_R/RingFinger2_R/RingFinger3_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R/PinkyFinger1_R/PinkyFinger2_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R/RingFinger1_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R/PinkyFinger1_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R/PinkyFinger1_R/PinkyFinger2_R/PinkyFinger3_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R","Root_M/Spine1_M","Root_M/Spine1_M/Spine2_M","Root_M/Spine1_M/Spine2_M/Chest_M","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R","Root_M/Hip_R/HipPart1_R/Knee_R/KneePart1_R","Root_M/Hip_R/HipPart1_R","Root_M","Root_M/Hip_R/HipPart1_R/Knee_R/KneePart1_R/Ankle_R/Toes_R","Root_M/Hip_R/HipPart1_R/Knee_R/KneePart1_R/Ankle_R","Root_M/Hip_R/HipPart1_R/Knee_R","Root_M/Hip_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L/Wrist_L/MiddleFinger1_L/MiddleFinger2_L/MiddleFinger3_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L/Wrist_L/MiddleFinger1_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L/Wrist_L/MiddleFinger1_L/MiddleFinger2_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L/Wrist_L/ThumbFinger1_L/ThumbFinger2_L/ThumbFinger3_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L/Wrist_L/ThumbFinger1_L/ThumbFinger2_L","Root_M/Hip_L/HipPart1_L/Knee_L/KneePart1_L/Ankle_L","Root_M/Hip_L/HipPart1_L/Knee_L/KneePart1_L/Ankle_L/Toes_L","Root_M/Hip_L/HipPart1_L/Knee_L","Root_M/Hip_L","Root_M/Hip_L/HipPart1_L/Knee_L/KneePart1_L","Root_M/Hip_L/HipPart1_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L"],[[[7,-0.7557510137557983,-0.5703139901161194,-0.3218422532081604,0,0.22390900552272797,0.23680199682712555,-0.9454048871994019,0,0.6153900027275085,-0.7865539789199829,-0.0512649305164814,0,-0.00905591994524002,-0.01108407974243164,0.06002102419734001,1],[7,-0.3476259410381317,0.6398352384567261,0.6853957176208496,0,0.037808969616889954,0.7399557828903198,-0.6715921759605408,0,-0.9368710517883301,-0.20754867792129517,-0.28141921758651733,0,0.011073191650211811,-0.06431224197149277,0.013265267945826054,1],[7,-0.9617258906364441,0.2737799882888794,0.0113291060552001,0,0.003308737650513649,0.052944887429475784,-0.9985920190811157,0,-0.2739943861961365,-0.9603340029716492,-0.05182432010769844,0,0.0458025224506855,-0.013424228876829147,0.056004058569669724,1],[7,-0.961135983467102,0.2729640007019043,0.04133099317550659,0,-0.019721446558833122,0.08144168555736542,-0.9964830279350281,0,-0.2753699719905853,-0.9585710167884827,-0.07289327681064606,0,0.049957357347011566,-0.014998828992247581,0.054459650069475174,1],[7,-0.9615449905395508,0.2729310095310211,0.030667807906866074,0,-0.016838759183883667,0.052868086844682693,-0.9984599947929382,0,-0.2741319537162781,-0.9605799913406372,-0.046239227056503296,0,0.04271070659160614,-0.013379319570958614,0.055071618407964706,1],[7,-0.9914509057998657,-0.1304830014705658,0.0000434811481682118,0,-0.004555003251880407,0.0342773012816906,-0.9994019865989685,0,0.13040350377559662,-0.9908580183982849,-0.0345785915851593,0,0.050082188099622726,0.0004408420354593545,0.056115780025720596,1],[7,-0.9913020730018616,-0.1303589940071106,-0.018088296055793762,0,0.012422231957316399,0.04414789006114006,-0.9989479780197144,0,0.13102048635482788,-0.9904829859733582,-0.042144566774368286,0,0.04619400575757027,-0.0001193954813061282,0.0569600984454155,1],[7,-0.9895299673080444,-0.13035699725151062,-0.0619514025747776,0,0.057289570569992065,0.03921690955758095,-0.9975870251655579,0,0.13247206807136536,-0.9906910061836243,-0.03133820742368698,0,0.04053565487265587,0.0001574644265929237,0.05897727981209755,1],[7,-0.9669378995895386,-0.25398901104927063,0.022802405059337616,0,-0.03869044408202171,0.057734813541173935,-0.9975820183753967,0,0.25205835700035095,-0.9654819965362549,-0.06565298140048981,0,0.048522986471652985,0.002070489339530468,0.05487658083438873,1],[7,-0.966211199760437,-0.25305700302124023,0.04897679388523102,0,-0.055962689220905304,0.02047760598361492,-0.9982230067253113,0,0.2516043484210968,-0.9672350287437439,-0.0339474231004715,0,0.05257672443985939,0.0041212597861886024,0.05386001989245415,1],[7,-0.9662399291992188,-0.2500990033149719,-0.061890795826911926,0,0.04767651483416557,0.06250450760126114,-0.9969050288200378,0,0.25319331884384155,-0.9662010073661804,-0.04847048223018646,0,0.040135327726602554,0.0016165297711268067,0.05886450037360191,1],[7,-0.9672641158103943,0.25293099880218506,-0.02063029818236828,0,0.03598476201295853,0.0562308095395565,-0.9977689981460571,0,-0.25120657682418823,-0.965848982334137,-0.06349170953035355,0,0.03177937865257263,-0.014936220832169056,0.05725216120481491,1],[7,-0.9901149868965149,0.03249209746718407,-0.13644400238990784,0,0.13776427507400513,0.04261089116334915,-0.9895480275154114,0,-0.026338502764701843,-0.9985629916191101,-0.04666593670845032,0,0.011242453008890152,-0.006384949665516615,0.060966599732637405,1],[7,6.112818404652572e-17,-5.766256197772455e-17,1,0,0.9982990026473999,0.05829869955778122,-5.766257521261435e-17,0,-0.05829869955778122,0.9982990026473999,6.112819728141552e-17,0,-0.06528256833553314,-0.004379279911518097,3.738085849999092e-18,1],[7,5.810373379434603e-17,-8.055475896034999e-17,1,0,0.9489060044288635,-0.3155589997768402,-8.055475234290509e-17,0,0.3155589997768402,0.9489060044288635,5.810373379434603e-17,0,-0.05794582888484001,0.020108990371227264,4.98674352237902e-18,1],[7,-0.9975029826164246,0.06243849918246269,0.03299730271100998,0,0.03000847063958645,-0.04821539670228958,0.998386025428772,0,0.06392873078584671,0.996882975101471,0.04622134938836098,0,-0.04876750707626343,0.006257849745452404,-0.05473095923662186,1],[7,-0.996940016746521,0.062477000057697296,0.04698919504880905,0,0.04407155513763428,-0.04728539660573006,0.9979090094566345,0,0.06456824392080307,0.9969260096549988,0.044387225061655045,0,-0.05246942862868309,0.006207259837538004,-0.05400291085243225,1],[7,-0.9975969791412354,0.0624816007912159,-0.0299358032643795,0,-0.03301549330353737,-0.048853401094675064,0.9982600212097168,0,0.060910407453775406,0.9968500137329102,0.050798848271369934,0,-0.04129204899072647,0.006295850034803152,-0.05769351124763489,1],[7,-0.961135983467102,0.2729640007019043,0.04133099317550659,0,0.019721446558833122,-0.08144168555736542,0.9964830279350281,0,0.2753699719905853,0.9585710167884827,0.07289327681064606,0,-0.049957357347011566,0.014998828992247581,-0.054459650069475174,1],[7,-0.5124889016151428,0.5173630118370056,0.6853399276733398,0,-0.020727958530187607,-0.8053399920463562,0.5924510955810547,0,0.8584430813789368,0.2894189953804016,0.4234519600868225,0,-0.02553672343492508,0.06292001903057098,-0.009630789048969746,1],[7,-0.46189382672309875,0.6606249213218689,0.5918009281158447,0,-0.022141097113490105,-0.6756231188774109,0.7369140982627869,0,0.8866590857505798,0.3272729516029358,0.32669293880462646,0,-0.019758624956011772,0.06097354367375374,-0.02059684880077839,1],[7,-0.3476259410381317,0.6398352384567261,0.6853957176208496,0,-0.037808969616889954,-0.7399557828903198,0.6715921759605408,0,0.9368710517883301,0.20754867792129517,0.28141921758651733,0,-0.011073191650211811,0.06431224197149277,-0.013265278190374374,1],[7,-0.9617258906364441,0.2737799882888794,0.0113291060552001,0,-0.003308737650513649,-0.052944887429475784,0.9985920190811157,0,0.2739943861961365,0.9603340029716492,0.05182432010769844,0,-0.0458025224506855,0.013424228876829147,-0.056004058569669724,1],[7,-0.9615449905395508,0.2729310095310211,0.030667807906866074,0,0.016838759183883667,-0.052868086844682693,0.9984599947929382,0,0.2741319537162781,0.9605799913406372,0.046239227056503296,0,-0.04271070659160614,0.013379319570958614,-0.055071618407964706,1],[7,-0.9913020730018616,-0.1303589940071106,-0.018088296055793762,0,-0.012422231957316399,-0.04414789006114006,0.9989479780197144,0,-0.13102048635482788,0.9904829859733582,0.042144566774368286,0,-0.04619400575757027,0.0001193954813061282,-0.0569600984454155,1],[7,-0.9914509057998657,-0.1304830014705658,0.00004347742287791334,0,0.0045549990609288216,-0.0342772975564003,0.9994019865989685,0,-0.13040350377559662,0.9908580183982849,0.0345785915851593,0,-0.050082188099622726,-0.000440842064563185,-0.056115780025720596,1],[7,-0.9669378995895386,-0.25398901104927063,0.022802405059337616,0,0.03869044408202171,-0.057734813541173935,0.9975820183753967,0,-0.25205835700035095,0.9654819965362549,0.06565298140048981,0,-0.048522986471652985,-0.002070489339530468,-0.05487658083438873,1],[7,-0.9895299673080444,-0.13035699725151062,-0.0619514025747776,0,-0.057289570569992065,-0.03921690955758095,0.9975870251655579,0,-0.13247206807136536,0.9906910061836243,0.03133820742368698,0,-0.04053565487265587,-0.00015746543067507446,-0.05897727981209755,1],[7,-0.9895550012588501,-0.0465225987136364,-0.13644400238990784,0,-0.13392998278141022,-0.05345509946346283,0.9895480275154114,0,-0.05332998186349869,0.9974859952926636,0.0466659739613533,0,-0.006511901505291462,0.005468619987368584,-0.060966599732637405,1],[7,-0.9662399291992188,-0.2500990033149719,-0.061890795826911926,0,-0.04767651483416557,-0.06250450760126114,0.9969050288200378,0,-0.25319331884384155,0.9662010073661804,0.04847048223018646,0,-0.040135327726602554,-0.0016165297711268067,-0.05886450037360191,1],[7,-0.9901149868965149,0.03249209746718407,-0.13644400238990784,0,-0.13776427507400513,-0.04261089116334915,0.9895480275154114,0,0.026338502764701843,0.9985629916191101,0.04666593670845032,0,-0.019342873245477676,0.006384949665516615,-0.060966599732637405,1],[7,-0.9901149868965149,0.03249209746718407,-0.13644400238990784,0,-0.13776427507400513,-0.04261089116334915,0.9895480275154114,0,0.026338502764701843,0.9985629916191101,0.04666593670845032,0,-0.011242453008890152,0.006384949665516615,-0.060966599732637405,1],[7,-0.966211199760437,-0.25305700302124023,0.04897679388523102,0,0.055962689220905304,-0.02047760598361492,0.9982230067253113,0,-0.2516043484210968,0.9672350287437439,0.0339474231004715,0,-0.05257672443985939,-0.0041212597861886024,-0.05386001989245415,1],[7,-0.9672641158103943,0.25293099880218506,-0.02063029818236828,0,-0.03598476201295853,-0.0562308095395565,0.9977689981460571,0,0.25120657682418823,0.965848982334137,0.06349170953035355,0,-0.03177937865257263,0.014936220832169056,-0.05725216120481491,1],[7,-0.9895550012588501,-0.0465225987136364,-0.13644400238990784,0,-0.13392998278141022,-0.05345509946346283,0.9895480275154114,0,-0.05332998186349869,0.9974859952926636,0.0466659739613533,0,-0.0013082213699817657,0.005468619987368584,-0.060966599732637405,1],[7,6.11638851617635e-17,-5.833826927650686e-17,1,0,0.998881995677948,0.04726329818367958,-5.833829574628647e-17,0,-0.04726329818367958,0.998881995677948,6.11639116315431e-17,0,-0.04269319027662277,-0.0008234300184994936,2.563246189073702e-18,1],[7,6.122529505043944e-17,-6.030347174092055e-17,1,0,0.9998850226402283,0.015169600024819374,-6.030347174092055e-17,0,-0.015169600024819374,0.9998850226402283,6.122529505043944e-17,0,-0.04954791069030762,0.0007677110261283815,3.0798808657977842e-18,1],[7,5.985136790532356e-17,-7.416329980327525e-17,1,0,0.977446973323822,-0.2111790031194687,-7.416332627305485e-17,0,0.2111790031194687,0.977446973323822,5.985138775765826e-17,0,-0.05578818917274475,0.013730029575526714,4.357267348032292e-18,1],[7,-0.7557510137557983,-0.5703139901161194,-0.3218422532081604,0,-0.22390900552272797,-0.23680199682712555,0.9454048871994019,0,-0.6153900027275085,0.7865539789199829,0.0512649305164814,0,0.00905591994524002,0.01108407974243164,-0.06002102419734001,1],[7,-0.07063166052103043,-0.021846704185009003,-0.9972630143165588,0,-0.9946739673614502,-0.07369910180568695,0.07206269353628159,0,-0.075071781873703,0.9970409870147705,-0.016524851322174072,0,0.014356869272887707,0.00028989295242354274,-0.010739260353147984,1],[7,-0.07384947687387466,-0.0035155045334249735,-0.9972630143165588,0,-0.9815620183944702,0.17703799903392792,0.07206270843744278,0,0.176300048828125,0.9841979742050171,-0.016524845734238625,0,0.029010290279984474,-0.0055952901020646095,-0.010739260353147984,1],[7,6.096432287590141e-17,-5.550928180307346e-17,1,0,0.995622992515564,0.09346509724855423,-5.5509255333293855e-17,0,-0.09346509724855423,0.995622992515564,6.096429640612181e-17,0,-0.03696995973587036,-0.002799419919028878,2.0984529892898495e-18,1],[7,0.00043790347990579903,0.042079851031303406,-0.9991139769554138,0,0.10044362396001816,0.9940599799156189,0.04191097244620323,0,0.9949430227279663,-0.10037299990653992,-0.0037913471460342407,0,-0.008446750231087208,0.0010378394508734345,-0.010595089755952358,1],[7,-1.2247805436516046e-8,-0.03372279927134514,-0.9994310140609741,0,-1,3.364509950642969e-7,9.022438907102526e-10,0,3.362292773090303e-7,0.9994310140609741,-0.03372279927134514,0,0.0059522101655602455,-0.00027136699645780027,-0.010334069840610027,1],[7,-0.07063166052103043,-0.021846704185009003,-0.9972630143165588,0,-0.9946739673614502,-0.07369910180568695,0.07206269353628159,0,-0.075071781873703,0.9970409870147705,-0.016524851322174072,0,0.0235291700810194,0.0002898959501180798,-0.010739260353147984,1],[7,-0.07384947687387466,-0.0035155045334249735,-0.9972630143165588,0,-0.9815620183944702,0.17703799903392792,0.07206270843744278,0,0.176300048828125,0.9841979742050171,-0.016524845734238625,0,0.03516453132033348,-0.0055952901020646095,-0.010739260353147984,1],[7,-0.996940016746521,0.062477000057697296,0.04698919504880905,0,-0.04407155513763428,0.04728539660573006,-0.9979090094566345,0,-0.06456824392080307,-0.9969260096549988,-0.044387225061655045,0,0.05246942862868309,-0.006207259837538004,0.05400291085243225,1],[7,-0.9975969791412354,0.0624816007912159,-0.0299358032643795,0,0.03301549330353737,0.048853401094675064,-0.9982600212097168,0,-0.060910407453775406,-0.9968500137329102,-0.050798848271369934,0,0.04129204899072647,-0.006295850034803152,0.05769351124763489,1],[7,-0.9975029826164246,0.06243849918246269,0.03299730271100998,0,-0.03000847063958645,0.04821539670228958,-0.998386025428772,0,-0.06392873078584671,-0.996882975101471,-0.04622134938836098,0,0.04876750707626343,-0.006257849745452404,0.05473095923662186,1],[7,-0.5124889016151428,0.5173630118370056,0.6853399276733398,0,0.020727958530187607,0.8053399920463562,-0.5924510955810547,0,-0.8584430813789368,-0.2894189953804016,-0.4234519600868225,0,0.02553672343492508,-0.06292001903057098,0.009630789048969746,1],[7,-0.46189382672309875,0.6606249213218689,0.5918009281158447,0,0.022141097113490105,0.6756231188774109,-0.7369140982627869,0,-0.8866590857505798,-0.3272729516029358,-0.32669293880462646,0,0.019758624956011772,-0.06097354367375374,0.02059684880077839,1],[7,-1.2987516839757518e-8,-0.03372279927134514,-0.9994310140609741,0,1,-3.3647398822722607e-7,-1.6416000780949958e-9,0,-3.3622734463278903e-7,-0.9994310140609741,0.03372279927134514,0,-0.0059522101655602455,0.00027136699645780027,0.010334069840610027,1],[7,0.00043792338692583144,0.04207983240485191,-0.9991139769554138,0,-0.10044362396001816,-0.9940599799156189,-0.04191095381975174,0,-0.9949430227279663,0.10037299990653992,0.0037913252599537373,0,0.008446750231087208,-0.0010378392180427909,0.010595089755952358,1],[7,-0.07063166052103043,-0.021846704185009003,-0.9972630143165588,0,0.9946739673614502,0.07369910180568695,-0.07206269353628159,0,0.075071781873703,-0.9970409870147705,0.016524851322174072,0,-0.0235291700810194,-0.0002898959501180798,0.010739260353147984,1],[7,-0.07384947687387466,-0.0035155045334249735,-0.9972630143165588,0,0.9815620183944702,-0.17703799903392792,-0.07206270843744278,0,-0.176300048828125,-0.9841979742050171,0.016524845734238625,0,-0.03516453132033348,0.0055952901020646095,0.010739260353147984,1],[7,-0.07063166052103043,-0.021846704185009003,-0.9972630143165588,0,0.9946739673614502,0.07369910180568695,-0.07206269353628159,0,0.075071781873703,-0.9970409870147705,0.016524851322174072,0,-0.014356869272887707,-0.00028989295242354274,0.010739260353147984,1],[7,-0.07384947687387466,-0.0035155045334249735,-0.9972630143165588,0,0.9815620183944702,-0.17703799903392792,-0.07206270843744278,0,-0.176300048828125,-0.9841979742050171,0.016524845734238625,0,-0.029010290279984474,0.0055952901020646095,0.010739260353147984,1],[7,-0.9901149868965149,0.03249209746718407,-0.13644400238990784,0,0.13776427507400513,0.04261089116334915,-0.9895480275154114,0,-0.026338502764701843,-0.9985629916191101,-0.04666593670845032,0,0.019342873245477676,-0.006384949665516615,0.060966599732637405,1],[7,-0.9895550012588501,-0.0465225987136364,-0.13644400238990784,0,0.13392998278141022,0.05345509946346283,-0.9895480275154114,0,0.053329985588788986,-0.9974859952926636,-0.0466659739613533,0,0.0013082210207358003,-0.005468619987368584,0.060966599732637405,1],[7,-0.9895550012588501,-0.0465225987136364,-0.13644400238990784,0,0.13392998278141022,0.05345509946346283,-0.9895480275154114,0,0.053329985588788986,-0.9974859952926636,-0.0466659739613533,0,0.006511901039630175,-0.005468619987368584,0.060966599732637405,1]],8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]]],0,0,[],[],[]],[[[13,".bin",3579645361,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":37008,"length":7008,"count":1752,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":37008,"count":514,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,13]]},"minPosition",8,[1,-0.006430407054722309,0.08791641145944595,-0.0043572853319346905],"maxPosition",8,[1,0.005392216611653566,0.10029413551092148,0.007440903224050999]]],-1],0,0,[],[],[]],[[[74,"Skin-3",459418556,["Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L/Wrist_L/ThumbFinger1_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L/Wrist_L/IndexFinger1_L/IndexFinger2_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L/Wrist_L/IndexFinger1_L/IndexFinger2_L/IndexFinger3_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L/Wrist_L/IndexFinger1_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L/Wrist_L/RingFinger1_L/RingFinger2_L/RingFinger3_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L/Wrist_L/RingFinger1_L/RingFinger2_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L/Wrist_L/RingFinger1_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L/Wrist_L/PinkyFinger1_L/PinkyFinger2_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L/Wrist_L/PinkyFinger1_L/PinkyFinger2_L/PinkyFinger3_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L/Wrist_L/PinkyFinger1_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L/Wrist_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L","Root_M/Spine1_M/Spine2_M/Chest_M/Neck_M/Head_M","Root_M/Spine1_M/Spine2_M/Chest_M/Neck_M","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R/MiddleFinger1_R/MiddleFinger2_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R/MiddleFinger1_R/MiddleFinger2_R/MiddleFinger3_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R/MiddleFinger1_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R/IndexFinger1_R/IndexFinger2_R/IndexFinger3_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R/ThumbFinger1_R/ThumbFinger2_R/ThumbFinger3_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R/ThumbFinger1_R/ThumbFinger2_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R/ThumbFinger1_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R/IndexFinger1_R/IndexFinger2_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R/IndexFinger1_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R/RingFinger1_R/RingFinger2_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R/RingFinger1_R/RingFinger2_R/RingFinger3_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R/PinkyFinger1_R/PinkyFinger2_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R/RingFinger1_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R/PinkyFinger1_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R/PinkyFinger1_R/PinkyFinger2_R/PinkyFinger3_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R","Root_M/Spine1_M","Root_M/Spine1_M/Spine2_M","Root_M/Spine1_M/Spine2_M/Chest_M","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R","Root_M/Hip_R/HipPart1_R/Knee_R/KneePart1_R","Root_M/Hip_R/HipPart1_R","Root_M","Root_M/Hip_R/HipPart1_R/Knee_R/KneePart1_R/Ankle_R/Toes_R","Root_M/Hip_R/HipPart1_R/Knee_R/KneePart1_R/Ankle_R","Root_M/Hip_R/HipPart1_R/Knee_R","Root_M/Hip_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L/Wrist_L/MiddleFinger1_L/MiddleFinger2_L/MiddleFinger3_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L/Wrist_L/MiddleFinger1_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L/Wrist_L/MiddleFinger1_L/MiddleFinger2_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L/Wrist_L/ThumbFinger1_L/ThumbFinger2_L/ThumbFinger3_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L/Wrist_L/ThumbFinger1_L/ThumbFinger2_L","Root_M/Hip_L/HipPart1_L/Knee_L/KneePart1_L/Ankle_L","Root_M/Hip_L/HipPart1_L/Knee_L/KneePart1_L/Ankle_L/Toes_L","Root_M/Hip_L/HipPart1_L/Knee_L","Root_M/Hip_L","Root_M/Hip_L/HipPart1_L/Knee_L/KneePart1_L","Root_M/Hip_L/HipPart1_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L"],[[[7,-0.7557510137557983,-0.5703139901161194,-0.3218422532081604,0,0.22390900552272797,0.23680199682712555,-0.9454048871994019,0,0.6153900027275085,-0.7865539789199829,-0.0512649305164814,0,-0.00905591994524002,-0.01108407974243164,0.06002102419734001,1],[7,-0.3476259410381317,0.6398352384567261,0.6853957176208496,0,0.037808969616889954,0.7399557828903198,-0.6715921759605408,0,-0.9368710517883301,-0.20754867792129517,-0.28141921758651733,0,0.011073191650211811,-0.06431224197149277,0.013265267945826054,1],[7,-0.9617258906364441,0.2737799882888794,0.0113291060552001,0,0.003308737650513649,0.052944887429475784,-0.9985920190811157,0,-0.2739943861961365,-0.9603340029716492,-0.05182432010769844,0,0.0458025224506855,-0.013424228876829147,0.056004058569669724,1],[7,-0.961135983467102,0.2729640007019043,0.04133099317550659,0,-0.019721446558833122,0.08144168555736542,-0.9964830279350281,0,-0.2753699719905853,-0.9585710167884827,-0.07289327681064606,0,0.049957357347011566,-0.014998828992247581,0.054459650069475174,1],[7,-0.9615449905395508,0.2729310095310211,0.030667807906866074,0,-0.016838759183883667,0.052868086844682693,-0.9984599947929382,0,-0.2741319537162781,-0.9605799913406372,-0.046239227056503296,0,0.04271070659160614,-0.013379319570958614,0.055071618407964706,1],[7,-0.9914509057998657,-0.1304830014705658,0.0000434811481682118,0,-0.004555003251880407,0.0342773012816906,-0.9994019865989685,0,0.13040350377559662,-0.9908580183982849,-0.0345785915851593,0,0.050082188099622726,0.0004408420354593545,0.056115780025720596,1],[7,-0.9913020730018616,-0.1303589940071106,-0.018088296055793762,0,0.012422231957316399,0.04414789006114006,-0.9989479780197144,0,0.13102048635482788,-0.9904829859733582,-0.042144566774368286,0,0.04619400575757027,-0.0001193954813061282,0.0569600984454155,1],[7,-0.9895299673080444,-0.13035699725151062,-0.0619514025747776,0,0.057289570569992065,0.03921690955758095,-0.9975870251655579,0,0.13247206807136536,-0.9906910061836243,-0.03133820742368698,0,0.04053565487265587,0.0001574644265929237,0.05897727981209755,1],[7,-0.9669378995895386,-0.25398901104927063,0.022802405059337616,0,-0.03869044408202171,0.057734813541173935,-0.9975820183753967,0,0.25205835700035095,-0.9654819965362549,-0.06565298140048981,0,0.048522986471652985,0.002070489339530468,0.05487658083438873,1],[7,-0.966211199760437,-0.25305700302124023,0.04897679388523102,0,-0.055962689220905304,0.02047760598361492,-0.9982230067253113,0,0.2516043484210968,-0.9672350287437439,-0.0339474231004715,0,0.05257672443985939,0.0041212597861886024,0.05386001989245415,1],[7,-0.9662399291992188,-0.2500990033149719,-0.061890795826911926,0,0.04767651483416557,0.06250450760126114,-0.9969050288200378,0,0.25319331884384155,-0.9662010073661804,-0.04847048223018646,0,0.040135327726602554,0.0016165297711268067,0.05886450037360191,1],[7,-0.9672641158103943,0.25293099880218506,-0.02063029818236828,0,0.03598476201295853,0.0562308095395565,-0.9977689981460571,0,-0.25120657682418823,-0.965848982334137,-0.06349170953035355,0,0.03177937865257263,-0.014936220832169056,0.05725216120481491,1],[7,-0.9901149868965149,0.03249209746718407,-0.13644400238990784,0,0.13776427507400513,0.04261089116334915,-0.9895480275154114,0,-0.026338502764701843,-0.9985629916191101,-0.04666593670845032,0,0.011242453008890152,-0.006384949665516615,0.060966599732637405,1],[7,6.112818404652572e-17,-5.766256197772455e-17,1,0,0.9982990026473999,0.05829869955778122,-5.766257521261435e-17,0,-0.05829869955778122,0.9982990026473999,6.112819728141552e-17,0,-0.06528256833553314,-0.004379279911518097,3.738085849999092e-18,1],[7,5.810373379434603e-17,-8.055475896034999e-17,1,0,0.9489060044288635,-0.3155589997768402,-8.055475234290509e-17,0,0.3155589997768402,0.9489060044288635,5.810373379434603e-17,0,-0.05794582888484001,0.020108990371227264,4.98674352237902e-18,1],[7,-0.9975029826164246,0.06243849918246269,0.03299730271100998,0,0.03000847063958645,-0.04821539670228958,0.998386025428772,0,0.06392873078584671,0.996882975101471,0.04622134938836098,0,-0.04876750707626343,0.006257849745452404,-0.05473095923662186,1],[7,-0.996940016746521,0.062477000057697296,0.04698919504880905,0,0.04407155513763428,-0.04728539660573006,0.9979090094566345,0,0.06456824392080307,0.9969260096549988,0.044387225061655045,0,-0.05246942862868309,0.006207259837538004,-0.05400291085243225,1],[7,-0.9975969791412354,0.0624816007912159,-0.0299358032643795,0,-0.03301549330353737,-0.048853401094675064,0.9982600212097168,0,0.060910407453775406,0.9968500137329102,0.050798848271369934,0,-0.04129204899072647,0.006295850034803152,-0.05769351124763489,1],[7,-0.961135983467102,0.2729640007019043,0.04133099317550659,0,0.019721446558833122,-0.08144168555736542,0.9964830279350281,0,0.2753699719905853,0.9585710167884827,0.07289327681064606,0,-0.049957357347011566,0.014998828992247581,-0.054459650069475174,1],[7,-0.5124889016151428,0.5173630118370056,0.6853399276733398,0,-0.020727958530187607,-0.8053399920463562,0.5924510955810547,0,0.8584430813789368,0.2894189953804016,0.4234519600868225,0,-0.02553672343492508,0.06292001903057098,-0.009630789048969746,1],[7,-0.46189382672309875,0.6606249213218689,0.5918009281158447,0,-0.022141097113490105,-0.6756231188774109,0.7369140982627869,0,0.8866590857505798,0.3272729516029358,0.32669293880462646,0,-0.019758624956011772,0.06097354367375374,-0.02059684880077839,1],[7,-0.3476259410381317,0.6398352384567261,0.6853957176208496,0,-0.037808969616889954,-0.7399557828903198,0.6715921759605408,0,0.9368710517883301,0.20754867792129517,0.28141921758651733,0,-0.011073191650211811,0.06431224197149277,-0.013265278190374374,1],[7,-0.9617258906364441,0.2737799882888794,0.0113291060552001,0,-0.003308737650513649,-0.052944887429475784,0.9985920190811157,0,0.2739943861961365,0.9603340029716492,0.05182432010769844,0,-0.0458025224506855,0.013424228876829147,-0.056004058569669724,1],[7,-0.9615449905395508,0.2729310095310211,0.030667807906866074,0,0.016838759183883667,-0.052868086844682693,0.9984599947929382,0,0.2741319537162781,0.9605799913406372,0.046239227056503296,0,-0.04271070659160614,0.013379319570958614,-0.055071618407964706,1],[7,-0.9913020730018616,-0.1303589940071106,-0.018088296055793762,0,-0.012422231957316399,-0.04414789006114006,0.9989479780197144,0,-0.13102048635482788,0.9904829859733582,0.042144566774368286,0,-0.04619400575757027,0.0001193954813061282,-0.0569600984454155,1],[7,-0.9914509057998657,-0.1304830014705658,0.00004347742287791334,0,0.0045549990609288216,-0.0342772975564003,0.9994019865989685,0,-0.13040350377559662,0.9908580183982849,0.0345785915851593,0,-0.050082188099622726,-0.000440842064563185,-0.056115780025720596,1],[7,-0.9669378995895386,-0.25398901104927063,0.022802405059337616,0,0.03869044408202171,-0.057734813541173935,0.9975820183753967,0,-0.25205835700035095,0.9654819965362549,0.06565298140048981,0,-0.048522986471652985,-0.002070489339530468,-0.05487658083438873,1],[7,-0.9895299673080444,-0.13035699725151062,-0.0619514025747776,0,-0.057289570569992065,-0.03921690955758095,0.9975870251655579,0,-0.13247206807136536,0.9906910061836243,0.03133820742368698,0,-0.04053565487265587,-0.00015746543067507446,-0.05897727981209755,1],[7,-0.9895550012588501,-0.0465225987136364,-0.13644400238990784,0,-0.13392998278141022,-0.05345509946346283,0.9895480275154114,0,-0.05332998186349869,0.9974859952926636,0.0466659739613533,0,-0.006511901505291462,0.005468619987368584,-0.060966599732637405,1],[7,-0.9662399291992188,-0.2500990033149719,-0.061890795826911926,0,-0.04767651483416557,-0.06250450760126114,0.9969050288200378,0,-0.25319331884384155,0.9662010073661804,0.04847048223018646,0,-0.040135327726602554,-0.0016165297711268067,-0.05886450037360191,1],[7,-0.9901149868965149,0.03249209746718407,-0.13644400238990784,0,-0.13776427507400513,-0.04261089116334915,0.9895480275154114,0,0.026338502764701843,0.9985629916191101,0.04666593670845032,0,-0.019342873245477676,0.006384949665516615,-0.060966599732637405,1],[7,-0.9901149868965149,0.03249209746718407,-0.13644400238990784,0,-0.13776427507400513,-0.04261089116334915,0.9895480275154114,0,0.026338502764701843,0.9985629916191101,0.04666593670845032,0,-0.011242453008890152,0.006384949665516615,-0.060966599732637405,1],[7,-0.966211199760437,-0.25305700302124023,0.04897679388523102,0,0.055962689220905304,-0.02047760598361492,0.9982230067253113,0,-0.2516043484210968,0.9672350287437439,0.0339474231004715,0,-0.05257672443985939,-0.0041212597861886024,-0.05386001989245415,1],[7,-0.9672641158103943,0.25293099880218506,-0.02063029818236828,0,-0.03598476201295853,-0.0562308095395565,0.9977689981460571,0,0.25120657682418823,0.965848982334137,0.06349170953035355,0,-0.03177937865257263,0.014936220832169056,-0.05725216120481491,1],[7,-0.9895550012588501,-0.0465225987136364,-0.13644400238990784,0,-0.13392998278141022,-0.05345509946346283,0.9895480275154114,0,-0.05332998186349869,0.9974859952926636,0.0466659739613533,0,-0.0013082213699817657,0.005468619987368584,-0.060966599732637405,1],[7,6.11638851617635e-17,-5.833826927650686e-17,1,0,0.998881995677948,0.04726329818367958,-5.833829574628647e-17,0,-0.04726329818367958,0.998881995677948,6.11639116315431e-17,0,-0.04269319027662277,-0.0008234300184994936,2.563246189073702e-18,1],[7,6.122529505043944e-17,-6.030347174092055e-17,1,0,0.9998850226402283,0.015169600024819374,-6.030347174092055e-17,0,-0.015169600024819374,0.9998850226402283,6.122529505043944e-17,0,-0.04954791069030762,0.0007677110261283815,3.0798808657977842e-18,1],[7,5.985136790532356e-17,-7.416329980327525e-17,1,0,0.977446973323822,-0.2111790031194687,-7.416332627305485e-17,0,0.2111790031194687,0.977446973323822,5.985138775765826e-17,0,-0.05578818917274475,0.013730029575526714,4.357267348032292e-18,1],[7,-0.7557510137557983,-0.5703139901161194,-0.3218422532081604,0,-0.22390900552272797,-0.23680199682712555,0.9454048871994019,0,-0.6153900027275085,0.7865539789199829,0.0512649305164814,0,0.00905591994524002,0.01108407974243164,-0.06002102419734001,1],[7,-0.07063166052103043,-0.021846704185009003,-0.9972630143165588,0,-0.9946739673614502,-0.07369910180568695,0.07206269353628159,0,-0.075071781873703,0.9970409870147705,-0.016524851322174072,0,0.014356869272887707,0.00028989295242354274,-0.010739260353147984,1],[7,-0.07384947687387466,-0.0035155045334249735,-0.9972630143165588,0,-0.9815620183944702,0.17703799903392792,0.07206270843744278,0,0.176300048828125,0.9841979742050171,-0.016524845734238625,0,0.029010290279984474,-0.0055952901020646095,-0.010739260353147984,1],[7,6.096432287590141e-17,-5.550928180307346e-17,1,0,0.995622992515564,0.09346509724855423,-5.5509255333293855e-17,0,-0.09346509724855423,0.995622992515564,6.096429640612181e-17,0,-0.03696995973587036,-0.002799419919028878,2.0984529892898495e-18,1],[7,0.00043790347990579903,0.042079851031303406,-0.9991139769554138,0,0.10044362396001816,0.9940599799156189,0.04191097244620323,0,0.9949430227279663,-0.10037299990653992,-0.0037913471460342407,0,-0.008446750231087208,0.0010378394508734345,-0.010595089755952358,1],[7,-1.2247805436516046e-8,-0.03372279927134514,-0.9994310140609741,0,-1,3.364509950642969e-7,9.022438907102526e-10,0,3.362292773090303e-7,0.9994310140609741,-0.03372279927134514,0,0.0059522101655602455,-0.00027136699645780027,-0.010334069840610027,1],[7,-0.07063166052103043,-0.021846704185009003,-0.9972630143165588,0,-0.9946739673614502,-0.07369910180568695,0.07206269353628159,0,-0.075071781873703,0.9970409870147705,-0.016524851322174072,0,0.0235291700810194,0.0002898959501180798,-0.010739260353147984,1],[7,-0.07384947687387466,-0.0035155045334249735,-0.9972630143165588,0,-0.9815620183944702,0.17703799903392792,0.07206270843744278,0,0.176300048828125,0.9841979742050171,-0.016524845734238625,0,0.03516453132033348,-0.0055952901020646095,-0.010739260353147984,1],[7,-0.996940016746521,0.062477000057697296,0.04698919504880905,0,-0.04407155513763428,0.04728539660573006,-0.9979090094566345,0,-0.06456824392080307,-0.9969260096549988,-0.044387225061655045,0,0.05246942862868309,-0.006207259837538004,0.05400291085243225,1],[7,-0.9975969791412354,0.0624816007912159,-0.0299358032643795,0,0.03301549330353737,0.048853401094675064,-0.9982600212097168,0,-0.060910407453775406,-0.9968500137329102,-0.050798848271369934,0,0.04129204899072647,-0.006295850034803152,0.05769351124763489,1],[7,-0.9975029826164246,0.06243849918246269,0.03299730271100998,0,-0.03000847063958645,0.04821539670228958,-0.998386025428772,0,-0.06392873078584671,-0.996882975101471,-0.04622134938836098,0,0.04876750707626343,-0.006257849745452404,0.05473095923662186,1],[7,-0.5124889016151428,0.5173630118370056,0.6853399276733398,0,0.020727958530187607,0.8053399920463562,-0.5924510955810547,0,-0.8584430813789368,-0.2894189953804016,-0.4234519600868225,0,0.02553672343492508,-0.06292001903057098,0.009630789048969746,1],[7,-0.46189382672309875,0.6606249213218689,0.5918009281158447,0,0.022141097113490105,0.6756231188774109,-0.7369140982627869,0,-0.8866590857505798,-0.3272729516029358,-0.32669293880462646,0,0.019758624956011772,-0.06097354367375374,0.02059684880077839,1],[7,-1.2987516839757518e-8,-0.03372279927134514,-0.9994310140609741,0,1,-3.3647398822722607e-7,-1.6416000780949958e-9,0,-3.3622734463278903e-7,-0.9994310140609741,0.03372279927134514,0,-0.0059522101655602455,0.00027136699645780027,0.010334069840610027,1],[7,0.00043792338692583144,0.04207983240485191,-0.9991139769554138,0,-0.10044362396001816,-0.9940599799156189,-0.04191095381975174,0,-0.9949430227279663,0.10037299990653992,0.0037913252599537373,0,0.008446750231087208,-0.0010378392180427909,0.010595089755952358,1],[7,-0.07063166052103043,-0.021846704185009003,-0.9972630143165588,0,0.9946739673614502,0.07369910180568695,-0.07206269353628159,0,0.075071781873703,-0.9970409870147705,0.016524851322174072,0,-0.0235291700810194,-0.0002898959501180798,0.010739260353147984,1],[7,-0.07384947687387466,-0.0035155045334249735,-0.9972630143165588,0,0.9815620183944702,-0.17703799903392792,-0.07206270843744278,0,-0.176300048828125,-0.9841979742050171,0.016524845734238625,0,-0.03516453132033348,0.0055952901020646095,0.010739260353147984,1],[7,-0.07063166052103043,-0.021846704185009003,-0.9972630143165588,0,0.9946739673614502,0.07369910180568695,-0.07206269353628159,0,0.075071781873703,-0.9970409870147705,0.016524851322174072,0,-0.014356869272887707,-0.00028989295242354274,0.010739260353147984,1],[7,-0.07384947687387466,-0.0035155045334249735,-0.9972630143165588,0,0.9815620183944702,-0.17703799903392792,-0.07206270843744278,0,-0.176300048828125,-0.9841979742050171,0.016524845734238625,0,-0.029010290279984474,0.0055952901020646095,0.010739260353147984,1],[7,-0.9901149868965149,0.03249209746718407,-0.13644400238990784,0,0.13776427507400513,0.04261089116334915,-0.9895480275154114,0,-0.026338502764701843,-0.9985629916191101,-0.04666593670845032,0,0.019342873245477676,-0.006384949665516615,0.060966599732637405,1],[7,-0.9895550012588501,-0.0465225987136364,-0.13644400238990784,0,0.13392998278141022,0.05345509946346283,-0.9895480275154114,0,0.053329985588788986,-0.9974859952926636,-0.0466659739613533,0,0.0013082210207358003,-0.005468619987368584,0.060966599732637405,1],[7,-0.9895550012588501,-0.0465225987136364,-0.13644400238990784,0,0.13392998278141022,0.05345509946346283,-0.9895480275154114,0,0.053329985588788986,-0.9974859952926636,-0.0466659739613533,0,0.006511901039630175,-0.005468619987368584,0.060966599732637405,1]],8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]]],0,0,[],[],[]],[[[13,".bin",790582317,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":155952,"length":40560,"count":10140,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":155952,"count":2166,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,13]]},"minPosition",8,[1,-0.013646269217133522,0.06327325105667114,-0.010372340679168701],"maxPosition",8,[1,0.013646269217133522,0.09070964902639389,0.01391100324690342]]],-1],0,0,[],[],[]],[[[74,"Skin-1",459418556,["Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L/Wrist_L/ThumbFinger1_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L/Wrist_L/IndexFinger1_L/IndexFinger2_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L/Wrist_L/IndexFinger1_L/IndexFinger2_L/IndexFinger3_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L/Wrist_L/IndexFinger1_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L/Wrist_L/RingFinger1_L/RingFinger2_L/RingFinger3_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L/Wrist_L/RingFinger1_L/RingFinger2_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L/Wrist_L/RingFinger1_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L/Wrist_L/PinkyFinger1_L/PinkyFinger2_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L/Wrist_L/PinkyFinger1_L/PinkyFinger2_L/PinkyFinger3_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L/Wrist_L/PinkyFinger1_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L/Wrist_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L","Root_M/Spine1_M/Spine2_M/Chest_M/Neck_M/Head_M","Root_M/Spine1_M/Spine2_M/Chest_M/Neck_M","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R/MiddleFinger1_R/MiddleFinger2_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R/MiddleFinger1_R/MiddleFinger2_R/MiddleFinger3_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R/MiddleFinger1_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R/IndexFinger1_R/IndexFinger2_R/IndexFinger3_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R/ThumbFinger1_R/ThumbFinger2_R/ThumbFinger3_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R/ThumbFinger1_R/ThumbFinger2_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R/ThumbFinger1_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R/IndexFinger1_R/IndexFinger2_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R/IndexFinger1_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R/RingFinger1_R/RingFinger2_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R/RingFinger1_R/RingFinger2_R/RingFinger3_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R/PinkyFinger1_R/PinkyFinger2_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R/RingFinger1_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R/PinkyFinger1_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R/PinkyFinger1_R/PinkyFinger2_R/PinkyFinger3_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R","Root_M/Spine1_M","Root_M/Spine1_M/Spine2_M","Root_M/Spine1_M/Spine2_M/Chest_M","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R","Root_M/Hip_R/HipPart1_R/Knee_R/KneePart1_R","Root_M/Hip_R/HipPart1_R","Root_M","Root_M/Hip_R/HipPart1_R/Knee_R/KneePart1_R/Ankle_R/Toes_R","Root_M/Hip_R/HipPart1_R/Knee_R/KneePart1_R/Ankle_R","Root_M/Hip_R/HipPart1_R/Knee_R","Root_M/Hip_R","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L/Wrist_L/MiddleFinger1_L/MiddleFinger2_L/MiddleFinger3_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L/Wrist_L/MiddleFinger1_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L/Wrist_L/MiddleFinger1_L/MiddleFinger2_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L/Wrist_L/ThumbFinger1_L/ThumbFinger2_L/ThumbFinger3_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L/Wrist_L/ThumbFinger1_L/ThumbFinger2_L","Root_M/Hip_L/HipPart1_L/Knee_L/KneePart1_L/Ankle_L","Root_M/Hip_L/HipPart1_L/Knee_L/KneePart1_L/Ankle_L/Toes_L","Root_M/Hip_L/HipPart1_L/Knee_L","Root_M/Hip_L","Root_M/Hip_L/HipPart1_L/Knee_L/KneePart1_L","Root_M/Hip_L/HipPart1_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L/Elbow_L/ElbowPart1_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L","Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_L/Shoulder_L/ShoulderPart1_L"],[[[7,-0.7557510137557983,-0.5703139901161194,-0.3218422532081604,0,0.22390900552272797,0.23680199682712555,-0.9454048871994019,0,0.6153900027275085,-0.7865539789199829,-0.0512649305164814,0,-0.00905591994524002,-0.01108407974243164,0.06002102419734001,1],[7,-0.3476259410381317,0.6398352384567261,0.6853957176208496,0,0.037808969616889954,0.7399557828903198,-0.6715921759605408,0,-0.9368710517883301,-0.20754867792129517,-0.28141921758651733,0,0.011073191650211811,-0.06431224197149277,0.013265267945826054,1],[7,-0.9617258906364441,0.2737799882888794,0.0113291060552001,0,0.003308737650513649,0.052944887429475784,-0.9985920190811157,0,-0.2739943861961365,-0.9603340029716492,-0.05182432010769844,0,0.0458025224506855,-0.013424228876829147,0.056004058569669724,1],[7,-0.961135983467102,0.2729640007019043,0.04133099317550659,0,-0.019721446558833122,0.08144168555736542,-0.9964830279350281,0,-0.2753699719905853,-0.9585710167884827,-0.07289327681064606,0,0.049957357347011566,-0.014998828992247581,0.054459650069475174,1],[7,-0.9615449905395508,0.2729310095310211,0.030667807906866074,0,-0.016838759183883667,0.052868086844682693,-0.9984599947929382,0,-0.2741319537162781,-0.9605799913406372,-0.046239227056503296,0,0.04271070659160614,-0.013379319570958614,0.055071618407964706,1],[7,-0.9914509057998657,-0.1304830014705658,0.0000434811481682118,0,-0.004555003251880407,0.0342773012816906,-0.9994019865989685,0,0.13040350377559662,-0.9908580183982849,-0.0345785915851593,0,0.050082188099622726,0.0004408420354593545,0.056115780025720596,1],[7,-0.9913020730018616,-0.1303589940071106,-0.018088296055793762,0,0.012422231957316399,0.04414789006114006,-0.9989479780197144,0,0.13102048635482788,-0.9904829859733582,-0.042144566774368286,0,0.04619400575757027,-0.0001193954813061282,0.0569600984454155,1],[7,-0.9895299673080444,-0.13035699725151062,-0.0619514025747776,0,0.057289570569992065,0.03921690955758095,-0.9975870251655579,0,0.13247206807136536,-0.9906910061836243,-0.03133820742368698,0,0.04053565487265587,0.0001574644265929237,0.05897727981209755,1],[7,-0.9669378995895386,-0.25398901104927063,0.022802405059337616,0,-0.03869044408202171,0.057734813541173935,-0.9975820183753967,0,0.25205835700035095,-0.9654819965362549,-0.06565298140048981,0,0.048522986471652985,0.002070489339530468,0.05487658083438873,1],[7,-0.966211199760437,-0.25305700302124023,0.04897679388523102,0,-0.055962689220905304,0.02047760598361492,-0.9982230067253113,0,0.2516043484210968,-0.9672350287437439,-0.0339474231004715,0,0.05257672443985939,0.0041212597861886024,0.05386001989245415,1],[7,-0.9662399291992188,-0.2500990033149719,-0.061890795826911926,0,0.04767651483416557,0.06250450760126114,-0.9969050288200378,0,0.25319331884384155,-0.9662010073661804,-0.04847048223018646,0,0.040135327726602554,0.0016165297711268067,0.05886450037360191,1],[7,-0.9672641158103943,0.25293099880218506,-0.02063029818236828,0,0.03598476201295853,0.0562308095395565,-0.9977689981460571,0,-0.25120657682418823,-0.965848982334137,-0.06349170953035355,0,0.03177937865257263,-0.014936220832169056,0.05725216120481491,1],[7,-0.9901149868965149,0.03249209746718407,-0.13644400238990784,0,0.13776427507400513,0.04261089116334915,-0.9895480275154114,0,-0.026338502764701843,-0.9985629916191101,-0.04666593670845032,0,0.011242453008890152,-0.006384949665516615,0.060966599732637405,1],[7,6.112818404652572e-17,-5.766256197772455e-17,1,0,0.9982990026473999,0.05829869955778122,-5.766257521261435e-17,0,-0.05829869955778122,0.9982990026473999,6.112819728141552e-17,0,-0.06528256833553314,-0.004379279911518097,3.738085849999092e-18,1],[7,5.810373379434603e-17,-8.055475896034999e-17,1,0,0.9489060044288635,-0.3155589997768402,-8.055475234290509e-17,0,0.3155589997768402,0.9489060044288635,5.810373379434603e-17,0,-0.05794582888484001,0.020108990371227264,4.98674352237902e-18,1],[7,-0.9975029826164246,0.06243849918246269,0.03299730271100998,0,0.03000847063958645,-0.04821539670228958,0.998386025428772,0,0.06392873078584671,0.996882975101471,0.04622134938836098,0,-0.04876750707626343,0.006257849745452404,-0.05473095923662186,1],[7,-0.996940016746521,0.062477000057697296,0.04698919504880905,0,0.04407155513763428,-0.04728539660573006,0.9979090094566345,0,0.06456824392080307,0.9969260096549988,0.044387225061655045,0,-0.05246942862868309,0.006207259837538004,-0.05400291085243225,1],[7,-0.9975969791412354,0.0624816007912159,-0.0299358032643795,0,-0.03301549330353737,-0.048853401094675064,0.9982600212097168,0,0.060910407453775406,0.9968500137329102,0.050798848271369934,0,-0.04129204899072647,0.006295850034803152,-0.05769351124763489,1],[7,-0.961135983467102,0.2729640007019043,0.04133099317550659,0,0.019721446558833122,-0.08144168555736542,0.9964830279350281,0,0.2753699719905853,0.9585710167884827,0.07289327681064606,0,-0.049957357347011566,0.014998828992247581,-0.054459650069475174,1],[7,-0.5124889016151428,0.5173630118370056,0.6853399276733398,0,-0.020727958530187607,-0.8053399920463562,0.5924510955810547,0,0.8584430813789368,0.2894189953804016,0.4234519600868225,0,-0.02553672343492508,0.06292001903057098,-0.009630789048969746,1],[7,-0.46189382672309875,0.6606249213218689,0.5918009281158447,0,-0.022141097113490105,-0.6756231188774109,0.7369140982627869,0,0.8866590857505798,0.3272729516029358,0.32669293880462646,0,-0.019758624956011772,0.06097354367375374,-0.02059684880077839,1],[7,-0.3476259410381317,0.6398352384567261,0.6853957176208496,0,-0.037808969616889954,-0.7399557828903198,0.6715921759605408,0,0.9368710517883301,0.20754867792129517,0.28141921758651733,0,-0.011073191650211811,0.06431224197149277,-0.013265278190374374,1],[7,-0.9617258906364441,0.2737799882888794,0.0113291060552001,0,-0.003308737650513649,-0.052944887429475784,0.9985920190811157,0,0.2739943861961365,0.9603340029716492,0.05182432010769844,0,-0.0458025224506855,0.013424228876829147,-0.056004058569669724,1],[7,-0.9615449905395508,0.2729310095310211,0.030667807906866074,0,0.016838759183883667,-0.052868086844682693,0.9984599947929382,0,0.2741319537162781,0.9605799913406372,0.046239227056503296,0,-0.04271070659160614,0.013379319570958614,-0.055071618407964706,1],[7,-0.9913020730018616,-0.1303589940071106,-0.018088296055793762,0,-0.012422231957316399,-0.04414789006114006,0.9989479780197144,0,-0.13102048635482788,0.9904829859733582,0.042144566774368286,0,-0.04619400575757027,0.0001193954813061282,-0.0569600984454155,1],[7,-0.9914509057998657,-0.1304830014705658,0.00004347742287791334,0,0.0045549990609288216,-0.0342772975564003,0.9994019865989685,0,-0.13040350377559662,0.9908580183982849,0.0345785915851593,0,-0.050082188099622726,-0.000440842064563185,-0.056115780025720596,1],[7,-0.9669378995895386,-0.25398901104927063,0.022802405059337616,0,0.03869044408202171,-0.057734813541173935,0.9975820183753967,0,-0.25205835700035095,0.9654819965362549,0.06565298140048981,0,-0.048522986471652985,-0.002070489339530468,-0.05487658083438873,1],[7,-0.9895299673080444,-0.13035699725151062,-0.0619514025747776,0,-0.057289570569992065,-0.03921690955758095,0.9975870251655579,0,-0.13247206807136536,0.9906910061836243,0.03133820742368698,0,-0.04053565487265587,-0.00015746543067507446,-0.05897727981209755,1],[7,-0.9895550012588501,-0.0465225987136364,-0.13644400238990784,0,-0.13392998278141022,-0.05345509946346283,0.9895480275154114,0,-0.05332998186349869,0.9974859952926636,0.0466659739613533,0,-0.006511901505291462,0.005468619987368584,-0.060966599732637405,1],[7,-0.9662399291992188,-0.2500990033149719,-0.061890795826911926,0,-0.04767651483416557,-0.06250450760126114,0.9969050288200378,0,-0.25319331884384155,0.9662010073661804,0.04847048223018646,0,-0.040135327726602554,-0.0016165297711268067,-0.05886450037360191,1],[7,-0.9901149868965149,0.03249209746718407,-0.13644400238990784,0,-0.13776427507400513,-0.04261089116334915,0.9895480275154114,0,0.026338502764701843,0.9985629916191101,0.04666593670845032,0,-0.019342873245477676,0.006384949665516615,-0.060966599732637405,1],[7,-0.9901149868965149,0.03249209746718407,-0.13644400238990784,0,-0.13776427507400513,-0.04261089116334915,0.9895480275154114,0,0.026338502764701843,0.9985629916191101,0.04666593670845032,0,-0.011242453008890152,0.006384949665516615,-0.060966599732637405,1],[7,-0.966211199760437,-0.25305700302124023,0.04897679388523102,0,0.055962689220905304,-0.02047760598361492,0.9982230067253113,0,-0.2516043484210968,0.9672350287437439,0.0339474231004715,0,-0.05257672443985939,-0.0041212597861886024,-0.05386001989245415,1],[7,-0.9672641158103943,0.25293099880218506,-0.02063029818236828,0,-0.03598476201295853,-0.0562308095395565,0.9977689981460571,0,0.25120657682418823,0.965848982334137,0.06349170953035355,0,-0.03177937865257263,0.014936220832169056,-0.05725216120481491,1],[7,-0.9895550012588501,-0.0465225987136364,-0.13644400238990784,0,-0.13392998278141022,-0.05345509946346283,0.9895480275154114,0,-0.05332998186349869,0.9974859952926636,0.0466659739613533,0,-0.0013082213699817657,0.005468619987368584,-0.060966599732637405,1],[7,6.11638851617635e-17,-5.833826927650686e-17,1,0,0.998881995677948,0.04726329818367958,-5.833829574628647e-17,0,-0.04726329818367958,0.998881995677948,6.11639116315431e-17,0,-0.04269319027662277,-0.0008234300184994936,2.563246189073702e-18,1],[7,6.122529505043944e-17,-6.030347174092055e-17,1,0,0.9998850226402283,0.015169600024819374,-6.030347174092055e-17,0,-0.015169600024819374,0.9998850226402283,6.122529505043944e-17,0,-0.04954791069030762,0.0007677110261283815,3.0798808657977842e-18,1],[7,5.985136790532356e-17,-7.416329980327525e-17,1,0,0.977446973323822,-0.2111790031194687,-7.416332627305485e-17,0,0.2111790031194687,0.977446973323822,5.985138775765826e-17,0,-0.05578818917274475,0.013730029575526714,4.357267348032292e-18,1],[7,-0.7557510137557983,-0.5703139901161194,-0.3218422532081604,0,-0.22390900552272797,-0.23680199682712555,0.9454048871994019,0,-0.6153900027275085,0.7865539789199829,0.0512649305164814,0,0.00905591994524002,0.01108407974243164,-0.06002102419734001,1],[7,-0.07063166052103043,-0.021846704185009003,-0.9972630143165588,0,-0.9946739673614502,-0.07369910180568695,0.07206269353628159,0,-0.075071781873703,0.9970409870147705,-0.016524851322174072,0,0.014356869272887707,0.00028989295242354274,-0.010739260353147984,1],[7,-0.07384947687387466,-0.0035155045334249735,-0.9972630143165588,0,-0.9815620183944702,0.17703799903392792,0.07206270843744278,0,0.176300048828125,0.9841979742050171,-0.016524845734238625,0,0.029010290279984474,-0.0055952901020646095,-0.010739260353147984,1],[7,6.096432287590141e-17,-5.550928180307346e-17,1,0,0.995622992515564,0.09346509724855423,-5.5509255333293855e-17,0,-0.09346509724855423,0.995622992515564,6.096429640612181e-17,0,-0.03696995973587036,-0.002799419919028878,2.0984529892898495e-18,1],[7,0.00043790347990579903,0.042079851031303406,-0.9991139769554138,0,0.10044362396001816,0.9940599799156189,0.04191097244620323,0,0.9949430227279663,-0.10037299990653992,-0.0037913471460342407,0,-0.008446750231087208,0.0010378394508734345,-0.010595089755952358,1],[7,-1.2247805436516046e-8,-0.03372279927134514,-0.9994310140609741,0,-1,3.364509950642969e-7,9.022438907102526e-10,0,3.362292773090303e-7,0.9994310140609741,-0.03372279927134514,0,0.0059522101655602455,-0.00027136699645780027,-0.010334069840610027,1],[7,-0.07063166052103043,-0.021846704185009003,-0.9972630143165588,0,-0.9946739673614502,-0.07369910180568695,0.07206269353628159,0,-0.075071781873703,0.9970409870147705,-0.016524851322174072,0,0.0235291700810194,0.0002898959501180798,-0.010739260353147984,1],[7,-0.07384947687387466,-0.0035155045334249735,-0.9972630143165588,0,-0.9815620183944702,0.17703799903392792,0.07206270843744278,0,0.176300048828125,0.9841979742050171,-0.016524845734238625,0,0.03516453132033348,-0.0055952901020646095,-0.010739260353147984,1],[7,-0.996940016746521,0.062477000057697296,0.04698919504880905,0,-0.04407155513763428,0.04728539660573006,-0.9979090094566345,0,-0.06456824392080307,-0.9969260096549988,-0.044387225061655045,0,0.05246942862868309,-0.006207259837538004,0.05400291085243225,1],[7,-0.9975969791412354,0.0624816007912159,-0.0299358032643795,0,0.03301549330353737,0.048853401094675064,-0.9982600212097168,0,-0.060910407453775406,-0.9968500137329102,-0.050798848271369934,0,0.04129204899072647,-0.006295850034803152,0.05769351124763489,1],[7,-0.9975029826164246,0.06243849918246269,0.03299730271100998,0,-0.03000847063958645,0.04821539670228958,-0.998386025428772,0,-0.06392873078584671,-0.996882975101471,-0.04622134938836098,0,0.04876750707626343,-0.006257849745452404,0.05473095923662186,1],[7,-0.5124889016151428,0.5173630118370056,0.6853399276733398,0,0.020727958530187607,0.8053399920463562,-0.5924510955810547,0,-0.8584430813789368,-0.2894189953804016,-0.4234519600868225,0,0.02553672343492508,-0.06292001903057098,0.009630789048969746,1],[7,-0.46189382672309875,0.6606249213218689,0.5918009281158447,0,0.022141097113490105,0.6756231188774109,-0.7369140982627869,0,-0.8866590857505798,-0.3272729516029358,-0.32669293880462646,0,0.019758624956011772,-0.06097354367375374,0.02059684880077839,1],[7,-1.2987516839757518e-8,-0.03372279927134514,-0.9994310140609741,0,1,-3.3647398822722607e-7,-1.6416000780949958e-9,0,-3.3622734463278903e-7,-0.9994310140609741,0.03372279927134514,0,-0.0059522101655602455,0.00027136699645780027,0.010334069840610027,1],[7,0.00043792338692583144,0.04207983240485191,-0.9991139769554138,0,-0.10044362396001816,-0.9940599799156189,-0.04191095381975174,0,-0.9949430227279663,0.10037299990653992,0.0037913252599537373,0,0.008446750231087208,-0.0010378392180427909,0.010595089755952358,1],[7,-0.07063166052103043,-0.021846704185009003,-0.9972630143165588,0,0.9946739673614502,0.07369910180568695,-0.07206269353628159,0,0.075071781873703,-0.9970409870147705,0.016524851322174072,0,-0.0235291700810194,-0.0002898959501180798,0.010739260353147984,1],[7,-0.07384947687387466,-0.0035155045334249735,-0.9972630143165588,0,0.9815620183944702,-0.17703799903392792,-0.07206270843744278,0,-0.176300048828125,-0.9841979742050171,0.016524845734238625,0,-0.03516453132033348,0.0055952901020646095,0.010739260353147984,1],[7,-0.07063166052103043,-0.021846704185009003,-0.9972630143165588,0,0.9946739673614502,0.07369910180568695,-0.07206269353628159,0,0.075071781873703,-0.9970409870147705,0.016524851322174072,0,-0.014356869272887707,-0.00028989295242354274,0.010739260353147984,1],[7,-0.07384947687387466,-0.0035155045334249735,-0.9972630143165588,0,0.9815620183944702,-0.17703799903392792,-0.07206270843744278,0,-0.176300048828125,-0.9841979742050171,0.016524845734238625,0,-0.029010290279984474,0.0055952901020646095,0.010739260353147984,1],[7,-0.9901149868965149,0.03249209746718407,-0.13644400238990784,0,0.13776427507400513,0.04261089116334915,-0.9895480275154114,0,-0.026338502764701843,-0.9985629916191101,-0.04666593670845032,0,0.019342873245477676,-0.006384949665516615,0.060966599732637405,1],[7,-0.9895550012588501,-0.0465225987136364,-0.13644400238990784,0,0.13392998278141022,0.05345509946346283,-0.9895480275154114,0,0.053329985588788986,-0.9974859952926636,-0.0466659739613533,0,0.0013082210207358003,-0.005468619987368584,0.060966599732637405,1],[7,-0.9895550012588501,-0.0465225987136364,-0.13644400238990784,0,0.13392998278141022,0.05345509946346283,-0.9895480275154114,0,0.053329985588788986,-0.9974859952926636,-0.0466659739613533,0,0.006511901039630175,-0.005468619987368584,0.060966599732637405,1]],8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]]],0,0,[],[],[]],[[[134,"builtin-particle",[{"hash":2554907268,"name":"builtin-particle|particle-vs-legacy:lpvs_main|tinted-fs:add","blocks":[{"name":"Constants","stageFlags":1,"binding":0,"members":[{"name":"mainTiling_Offset","type":16,"count":1},{"name":"frameTile_velLenScale","type":16,"count":1},{"name":"scale","type":16,"count":1},{"name":"nodeRotation","type":16,"count":1}],"defines":[]},{"name":"FragConstants","stageFlags":16,"binding":1,"members":[{"name":"tintColor","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"mainTexture","type":28,"count":1,"stageFlags":16,"binding":2,"defines":[]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_texCoord","format":32,"location":1,"defines":[]},{"name":"a_texCoord1","format":32,"location":2,"defines":[]},{"name":"a_texCoord2","format":32,"location":3,"defines":[]},{"name":"a_color","format":44,"location":4,"defines":[]},{"name":"a_color1","format":32,"location":8,"defines":["CC_RENDER_MODE"]},{"name":"a_texCoord3","format":32,"location":6,"defines":["CC_RENDER_MODE"]},{"name":"a_normal","format":32,"location":7,"defines":["CC_RENDER_MODE"]}],"varyings":[{"name":"uv","type":14,"count":1,"stageFlags":17,"location":0,"defines":[]},{"name":"color","type":16,"count":1,"stageFlags":17,"location":1,"defines":[]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"glsl4":{"vert":"\nprecision highp float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\n  mat3 m = mat3(xAxis,yAxis,zAxis);\n  float trace = m[0][0] + m[1][1] + m[2][2];\n  vec4 quat;\n  if (trace > 0.) {\n    float s = 0.5 / sqrt(trace + 1.0);\n    quat.w = 0.25 / s;\n    quat.x = (m[2][1] - m[1][2]) * s;\n    quat.y = (m[0][2] - m[2][0]) * s;\n    quat.z = (m[1][0] - m[0][1]) * s;\n  } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n    float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n    quat.w = (m[2][1] - m[1][2]) / s;\n    quat.x = 0.25 * s;\n    quat.y = (m[0][1] + m[1][0]) / s;\n    quat.z = (m[0][2] + m[2][0]) / s;\n  } else if (m[1][1] > m[2][2]) {\n    float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n    quat.w = (m[0][2] - m[2][0]) / s;\n    quat.x = (m[0][1] + m[1][0]) / s;\n    quat.y = 0.25 * s;\n    quat.z = (m[1][2] + m[2][1]) / s;\n  } else {\n    float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n    quat.w = (m[1][0] - m[0][1]) / s;\n    quat.x = (m[0][2] + m[2][0]) / s;\n    quat.y = (m[1][2] + m[2][1]) / s;\n    quat.z = 0.25 * s;\n  }\n  float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n  if (len > 0.) {\n    len = 1. / sqrt(len);\n    quat.x = quat.x * len;\n    quat.y = quat.y * len;\n    quat.z = quat.z * len;\n    quat.w = quat.w * len;\n  }\n  return quat;\n}\nvec4 quaternionFromEuler (vec3 angle){\n  float x = angle.x / 2.;\n  float y = angle.y / 2.;\n  float z = angle.z / 2.;\n  float sx = sin(x);\n  float cx = cos(x);\n  float sy = sin(y);\n  float cy = cos(y);\n  float sz = sin(z);\n  float cz = cos(z);\n  vec4 quat = vec4(0);\n  quat.x = sx * cy * cz + cx * sy * sz;\n  quat.y = cx * sy * cz + sx * cy * sz;\n  quat.z = cx * cy * sz - sx * sy * cz;\n  quat.w = cx * cy * cz - sx * sy * sz;\n  return quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\n  float x2 = q.x + q.x;\n  float y2 = q.y + q.y;\n  float z2 = q.z + q.z;\n  float xx = q.x * x2;\n  float xy = q.x * y2;\n  float xz = q.x * z2;\n  float yy = q.y * y2;\n  float yz = q.y * z2;\n  float zz = q.z * z2;\n  float wx = q.w * x2;\n  float wy = q.w * y2;\n  float wz = q.w * z2;\n  return mat4(\n    1. - (yy + zz), xy + wz, xz - wy, 0,\n    xy - wz, 1. - (xx + zz), yz + wx, 0,\n    xz + wy, yz - wx, 1. - (xx + yy), 0,\n    p.x, p.y, p.z, 1\n  );\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  float x2 = x + x;\n  float y2 = y + y;\n  float z2 = z + z;\n  float xx = x * x2;\n  float xy = x * y2;\n  float xz = x * z2;\n  float yy = y * y2;\n  float yz = y * z2;\n  float zz = z * z2;\n  float wx = w * x2;\n  float wy = w * y2;\n  float wz = w * z2;\n  float sx = s.x;\n  float sy = s.y;\n  float sz = s.z;\n  return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n    (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n    (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n    t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\n  vec4 quat;\n  quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n  quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n  quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n  quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n  return quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\n  float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n  float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n  float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n  float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n  v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n  v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n  v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n  vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n  vec4 rotQuat = quatMultiply(viewQuat, q);\n  rotateVecFromQuat(pos, rotQuat);\n  return pos;\n}\nmat3 quatToMat3(vec4 q) {\n  vec3 m0 = vec3(\n    1.0 - 2.0 * q.y * q.y - 2.0 * q.z * q.z,\n    2.0 * q.x * q.y + 2.0 * q.w * q.z,\n    2.0 * q.x * q.z - 2.0 * q.w * q.y);\n\tvec3 m1 = vec3(\n    2.0 * q.x * q.y - 2.0 * q.w * q.z,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.z * q.z,\n    2.0 * q.y * q.z + 2.0 * q.w * q.x);\n\tvec3 m2 = vec3(\n    2.0 * q.x * q.z + 2.0 * q.w * q.y,\n    2.0 * q.y * q.z - 2.0 * q.w * q.x,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.y * q.y);\n  return mat3(m0, m1, m2);\n}\nvec4 mat3ToQuat(mat3 mat) {\n  float tr = mat[0][0] + mat[1][1] + mat[2][2];\n\tfloat qw, qx, qy, qz;\n  if (tr > 0.0) {\n    float S = sqrt(tr + 1.0) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = 0.25 * S;\n\t  qx = (mat[1][2] - mat[2][1]) * invS;\n\t  qy = (mat[2][0] - mat[0][2]) * invS;\n\t  qz = (mat[0][1] - mat[1][0]) * invS;\n  } else if ((mat[0][0] > mat[1][1])&&(mat[0][0] > mat[2][2])) {\n    float S = sqrt(1.0 + mat[0][0] - mat[1][1] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[1][2] - mat[2][1]) * invS;\n\t  qx = 0.25 * S;\n\t  qy = (mat[1][0] + mat[0][1]) * invS;\n\t  qz = (mat[2][0] + mat[0][2]) * invS;\n  } else if (mat[1][1] > mat[2][2]) {\n\t  float S = sqrt(1.0 + mat[1][1] - mat[0][0] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[2][0] - mat[0][2]) * invS;\n\t  qx = (mat[1][0] + mat[0][1]) * invS;\n\t  qy = 0.25 * S;\n\t  qz = (mat[2][1] + mat[1][2]) * invS;\n  } else {\n\t  float S = sqrt(1.0 + mat[2][2] - mat[0][0] - mat[1][1]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[0][1] - mat[1][0]) * invS;\n\t  qx = (mat[2][0] + mat[0][2]) * invS;\n\t  qy = (mat[2][1] + mat[1][2]) * invS;\n\t  qz = 0.25 * S;\n  }\n  return vec4(qx, qy, qz, qw);\n}\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 mainTiling_Offset;\n  vec4 frameTile_velLenScale;\n  vec4 scale;\n  vec4 nodeRotation;\n};\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(set = 2, binding = 0) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n};\nlayout(location = 0) out mediump vec2 uv;\nlayout(location = 1) out mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n  , mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n  vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n  vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = vec3(1, 0, 0);\n  vec3 camY = vec3(0, 0, -1);\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  rotateVecFromQuat(viewSpaceVert, q);\n  vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n  vec3 camY = vec3(0, 1, 0);\n  vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n  pos.xyz += offset;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\n  vertIndex.y = 1. - vertIndex.y;\n#endif\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec3 a_texCoord;\nlayout(location = 2) in vec3 a_texCoord1;\nlayout(location = 3) in vec3 a_texCoord2;\nlayout(location = 4) in vec4 a_color;\n#if CC_RENDER_MODE == 1\n  layout(location = 8) in vec3 a_color1;\n#endif\n#if CC_RENDER_MODE == 4\n  layout(location = 6) in vec3 a_texCoord3;\n  layout(location = 7) in vec3 a_normal;\n  layout(location = 8) in vec4 a_color1;\n#endif\nvec4 lpvs_main () {\n  vec3 compScale = scale.xyz * a_texCoord1;\n  vec4 pos = vec4(a_position, 1);\n  #if CC_RENDER_MODE == 1\n    vec4 velocity = vec4(a_color1.xyz, 0);\n  #endif\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_RENDER_MODE == 1\n      velocity = cc_matWorld * velocity;\n    #endif\n  #endif\n  #if ROTATION_OVER_TIME_MODULE_ENABLE\n    vec3 rotTmp = a_texCoord2;\n    float mulFactor = 1.0;\n    if (rotTmp.x > 10.0 * 0.5) {\n        rotTmp.x -= 10.0;\n        mulFactor = -1.0;\n    }\n    vec4 rot = vec4(rotTmp, 0.0);\n    rot.w = mulFactor * sqrt(abs(1.0 - rot.x * rot.x - rot.y * rot.y - rot.z * rot.z));\n  #else\n    #if CC_RENDER_MODE != 4\n      #if CC_RENDER_MODE == 0\n        vec3 rotEuler = a_texCoord2;\n      #elif CC_RENDER_MODE == 1\n        vec3 rotEuler = vec3(0.);\n      #else\n        vec3 rotEuler = vec3(0., 0., a_texCoord2.z);\n      #endif\n      vec4 rot = quaternionFromEuler(rotEuler);\n    #else\n      vec4 rot = quaternionFromEuler(a_texCoord2);\n    #endif\n  #endif\n  #if CC_RENDER_MODE != 4\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n    #if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_matViewInv);\n    #elif CC_RENDER_MODE == 1\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_cameraPos.xyz, velocity, frameTile_velLenScale.z, frameTile_velLenScale.w, a_texCoord.x);\n    #elif 2\n      computeVertPos(pos, cornerOffset, rot, compScale);\n    #endif\n    color = a_color;\n  #else\n    mat3 rotMat = quatToMat3(rot);\n    mat3 nodeMat = quatToMat3(nodeRotation);\n    rotMat = nodeMat * rotMat;\n    rot = mat3ToQuat(rotMat);\n    mat4 xformNoScale = matrixFromRT(rot, pos.xyz);\n    mat4 xform = matFromRTS(rot, pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n  #endif\n  uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  pos = cc_matViewProj * pos;\n  return pos;\n}\nvoid main() { gl_Position = lpvs_main(); }","frag":"\nprecision mediump float;\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nlayout(location = 0) in vec2 uv;\nlayout(location = 1) in vec4 color;\nlayout(set = 1, binding = 2) uniform sampler2D mainTexture;\nlayout(set = 1, binding = 1) uniform FragConstants {\n  vec4 tintColor;\n};\nvec4 add () {\n  vec4 col = 2.0 * color * tintColor * texture(mainTexture, uv);\n  return CCFragOutput(col);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = add(); }"},"glsl3":{"vert":"\nprecision highp float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\n  mat3 m = mat3(xAxis,yAxis,zAxis);\n  float trace = m[0][0] + m[1][1] + m[2][2];\n  vec4 quat;\n  if (trace > 0.) {\n    float s = 0.5 / sqrt(trace + 1.0);\n    quat.w = 0.25 / s;\n    quat.x = (m[2][1] - m[1][2]) * s;\n    quat.y = (m[0][2] - m[2][0]) * s;\n    quat.z = (m[1][0] - m[0][1]) * s;\n  } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n    float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n    quat.w = (m[2][1] - m[1][2]) / s;\n    quat.x = 0.25 * s;\n    quat.y = (m[0][1] + m[1][0]) / s;\n    quat.z = (m[0][2] + m[2][0]) / s;\n  } else if (m[1][1] > m[2][2]) {\n    float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n    quat.w = (m[0][2] - m[2][0]) / s;\n    quat.x = (m[0][1] + m[1][0]) / s;\n    quat.y = 0.25 * s;\n    quat.z = (m[1][2] + m[2][1]) / s;\n  } else {\n    float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n    quat.w = (m[1][0] - m[0][1]) / s;\n    quat.x = (m[0][2] + m[2][0]) / s;\n    quat.y = (m[1][2] + m[2][1]) / s;\n    quat.z = 0.25 * s;\n  }\n  float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n  if (len > 0.) {\n    len = 1. / sqrt(len);\n    quat.x = quat.x * len;\n    quat.y = quat.y * len;\n    quat.z = quat.z * len;\n    quat.w = quat.w * len;\n  }\n  return quat;\n}\nvec4 quaternionFromEuler (vec3 angle){\n  float x = angle.x / 2.;\n  float y = angle.y / 2.;\n  float z = angle.z / 2.;\n  float sx = sin(x);\n  float cx = cos(x);\n  float sy = sin(y);\n  float cy = cos(y);\n  float sz = sin(z);\n  float cz = cos(z);\n  vec4 quat = vec4(0);\n  quat.x = sx * cy * cz + cx * sy * sz;\n  quat.y = cx * sy * cz + sx * cy * sz;\n  quat.z = cx * cy * sz - sx * sy * cz;\n  quat.w = cx * cy * cz - sx * sy * sz;\n  return quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\n  float x2 = q.x + q.x;\n  float y2 = q.y + q.y;\n  float z2 = q.z + q.z;\n  float xx = q.x * x2;\n  float xy = q.x * y2;\n  float xz = q.x * z2;\n  float yy = q.y * y2;\n  float yz = q.y * z2;\n  float zz = q.z * z2;\n  float wx = q.w * x2;\n  float wy = q.w * y2;\n  float wz = q.w * z2;\n  return mat4(\n    1. - (yy + zz), xy + wz, xz - wy, 0,\n    xy - wz, 1. - (xx + zz), yz + wx, 0,\n    xz + wy, yz - wx, 1. - (xx + yy), 0,\n    p.x, p.y, p.z, 1\n  );\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  float x2 = x + x;\n  float y2 = y + y;\n  float z2 = z + z;\n  float xx = x * x2;\n  float xy = x * y2;\n  float xz = x * z2;\n  float yy = y * y2;\n  float yz = y * z2;\n  float zz = z * z2;\n  float wx = w * x2;\n  float wy = w * y2;\n  float wz = w * z2;\n  float sx = s.x;\n  float sy = s.y;\n  float sz = s.z;\n  return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n    (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n    (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n    t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\n  vec4 quat;\n  quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n  quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n  quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n  quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n  return quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\n  float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n  float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n  float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n  float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n  v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n  v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n  v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n  vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n  vec4 rotQuat = quatMultiply(viewQuat, q);\n  rotateVecFromQuat(pos, rotQuat);\n  return pos;\n}\nmat3 quatToMat3(vec4 q) {\n  vec3 m0 = vec3(\n    1.0 - 2.0 * q.y * q.y - 2.0 * q.z * q.z,\n    2.0 * q.x * q.y + 2.0 * q.w * q.z,\n    2.0 * q.x * q.z - 2.0 * q.w * q.y);\n\tvec3 m1 = vec3(\n    2.0 * q.x * q.y - 2.0 * q.w * q.z,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.z * q.z,\n    2.0 * q.y * q.z + 2.0 * q.w * q.x);\n\tvec3 m2 = vec3(\n    2.0 * q.x * q.z + 2.0 * q.w * q.y,\n    2.0 * q.y * q.z - 2.0 * q.w * q.x,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.y * q.y);\n  return mat3(m0, m1, m2);\n}\nvec4 mat3ToQuat(mat3 mat) {\n  float tr = mat[0][0] + mat[1][1] + mat[2][2];\n\tfloat qw, qx, qy, qz;\n  if (tr > 0.0) {\n    float S = sqrt(tr + 1.0) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = 0.25 * S;\n\t  qx = (mat[1][2] - mat[2][1]) * invS;\n\t  qy = (mat[2][0] - mat[0][2]) * invS;\n\t  qz = (mat[0][1] - mat[1][0]) * invS;\n  } else if ((mat[0][0] > mat[1][1])&&(mat[0][0] > mat[2][2])) {\n    float S = sqrt(1.0 + mat[0][0] - mat[1][1] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[1][2] - mat[2][1]) * invS;\n\t  qx = 0.25 * S;\n\t  qy = (mat[1][0] + mat[0][1]) * invS;\n\t  qz = (mat[2][0] + mat[0][2]) * invS;\n  } else if (mat[1][1] > mat[2][2]) {\n\t  float S = sqrt(1.0 + mat[1][1] - mat[0][0] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[2][0] - mat[0][2]) * invS;\n\t  qx = (mat[1][0] + mat[0][1]) * invS;\n\t  qy = 0.25 * S;\n\t  qz = (mat[2][1] + mat[1][2]) * invS;\n  } else {\n\t  float S = sqrt(1.0 + mat[2][2] - mat[0][0] - mat[1][1]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[0][1] - mat[1][0]) * invS;\n\t  qx = (mat[2][0] + mat[0][2]) * invS;\n\t  qy = (mat[2][1] + mat[1][2]) * invS;\n\t  qz = 0.25 * S;\n  }\n  return vec4(qx, qy, qz, qw);\n}\nlayout(std140) uniform Constants {\n  vec4 mainTiling_Offset;\n  vec4 frameTile_velLenScale;\n  vec4 scale;\n  vec4 nodeRotation;\n};\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(std140) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n};\nout mediump vec2 uv;\nout mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n  , mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n  vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n  vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = vec3(1, 0, 0);\n  vec3 camY = vec3(0, 0, -1);\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  rotateVecFromQuat(viewSpaceVert, q);\n  vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n  vec3 camY = vec3(0, 1, 0);\n  vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n  pos.xyz += offset;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\n  vertIndex.y = 1. - vertIndex.y;\n#endif\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nin vec3 a_position;\nin vec3 a_texCoord;\nin vec3 a_texCoord1;\nin vec3 a_texCoord2;\nin vec4 a_color;\n#if CC_RENDER_MODE == 1\n  in vec3 a_color1;\n#endif\n#if CC_RENDER_MODE == 4\n  in vec3 a_texCoord3;\n  in vec3 a_normal;\n  in vec4 a_color1;\n#endif\nvec4 lpvs_main () {\n  vec3 compScale = scale.xyz * a_texCoord1;\n  vec4 pos = vec4(a_position, 1);\n  #if CC_RENDER_MODE == 1\n    vec4 velocity = vec4(a_color1.xyz, 0);\n  #endif\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_RENDER_MODE == 1\n      velocity = cc_matWorld * velocity;\n    #endif\n  #endif\n  #if ROTATION_OVER_TIME_MODULE_ENABLE\n    vec3 rotTmp = a_texCoord2;\n    float mulFactor = 1.0;\n    if (rotTmp.x > 10.0 * 0.5) {\n        rotTmp.x -= 10.0;\n        mulFactor = -1.0;\n    }\n    vec4 rot = vec4(rotTmp, 0.0);\n    rot.w = mulFactor * sqrt(abs(1.0 - rot.x * rot.x - rot.y * rot.y - rot.z * rot.z));\n  #else\n    #if CC_RENDER_MODE != 4\n      #if CC_RENDER_MODE == 0\n        vec3 rotEuler = a_texCoord2;\n      #elif CC_RENDER_MODE == 1\n        vec3 rotEuler = vec3(0.);\n      #else\n        vec3 rotEuler = vec3(0., 0., a_texCoord2.z);\n      #endif\n      vec4 rot = quaternionFromEuler(rotEuler);\n    #else\n      vec4 rot = quaternionFromEuler(a_texCoord2);\n    #endif\n  #endif\n  #if CC_RENDER_MODE != 4\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n    #if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_matViewInv);\n    #elif CC_RENDER_MODE == 1\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_cameraPos.xyz, velocity, frameTile_velLenScale.z, frameTile_velLenScale.w, a_texCoord.x);\n    #elif 2\n      computeVertPos(pos, cornerOffset, rot, compScale);\n    #endif\n    color = a_color;\n  #else\n    mat3 rotMat = quatToMat3(rot);\n    mat3 nodeMat = quatToMat3(nodeRotation);\n    rotMat = nodeMat * rotMat;\n    rot = mat3ToQuat(rotMat);\n    mat4 xformNoScale = matrixFromRT(rot, pos.xyz);\n    mat4 xform = matFromRTS(rot, pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n  #endif\n  uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  pos = cc_matViewProj * pos;\n  return pos;\n}\nvoid main() { gl_Position = lpvs_main(); }","frag":"\nprecision mediump float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nin vec2 uv;\nin vec4 color;\nuniform sampler2D mainTexture;\nlayout(std140) uniform FragConstants {\n  vec4 tintColor;\n};\nvec4 add () {\n  vec4 col = 2.0 * color * tintColor * texture(mainTexture, uv);\n  return CCFragOutput(col);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = add(); }"},"glsl1":{"vert":"\nprecision highp float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\n  mat3 m = mat3(xAxis,yAxis,zAxis);\n  float trace = m[0][0] + m[1][1] + m[2][2];\n  vec4 quat;\n  if (trace > 0.) {\n    float s = 0.5 / sqrt(trace + 1.0);\n    quat.w = 0.25 / s;\n    quat.x = (m[2][1] - m[1][2]) * s;\n    quat.y = (m[0][2] - m[2][0]) * s;\n    quat.z = (m[1][0] - m[0][1]) * s;\n  } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n    float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n    quat.w = (m[2][1] - m[1][2]) / s;\n    quat.x = 0.25 * s;\n    quat.y = (m[0][1] + m[1][0]) / s;\n    quat.z = (m[0][2] + m[2][0]) / s;\n  } else if (m[1][1] > m[2][2]) {\n    float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n    quat.w = (m[0][2] - m[2][0]) / s;\n    quat.x = (m[0][1] + m[1][0]) / s;\n    quat.y = 0.25 * s;\n    quat.z = (m[1][2] + m[2][1]) / s;\n  } else {\n    float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n    quat.w = (m[1][0] - m[0][1]) / s;\n    quat.x = (m[0][2] + m[2][0]) / s;\n    quat.y = (m[1][2] + m[2][1]) / s;\n    quat.z = 0.25 * s;\n  }\n  float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n  if (len > 0.) {\n    len = 1. / sqrt(len);\n    quat.x = quat.x * len;\n    quat.y = quat.y * len;\n    quat.z = quat.z * len;\n    quat.w = quat.w * len;\n  }\n  return quat;\n}\nvec4 quaternionFromEuler (vec3 angle){\n  float x = angle.x / 2.;\n  float y = angle.y / 2.;\n  float z = angle.z / 2.;\n  float sx = sin(x);\n  float cx = cos(x);\n  float sy = sin(y);\n  float cy = cos(y);\n  float sz = sin(z);\n  float cz = cos(z);\n  vec4 quat = vec4(0);\n  quat.x = sx * cy * cz + cx * sy * sz;\n  quat.y = cx * sy * cz + sx * cy * sz;\n  quat.z = cx * cy * sz - sx * sy * cz;\n  quat.w = cx * cy * cz - sx * sy * sz;\n  return quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\n  float x2 = q.x + q.x;\n  float y2 = q.y + q.y;\n  float z2 = q.z + q.z;\n  float xx = q.x * x2;\n  float xy = q.x * y2;\n  float xz = q.x * z2;\n  float yy = q.y * y2;\n  float yz = q.y * z2;\n  float zz = q.z * z2;\n  float wx = q.w * x2;\n  float wy = q.w * y2;\n  float wz = q.w * z2;\n  return mat4(\n    1. - (yy + zz), xy + wz, xz - wy, 0,\n    xy - wz, 1. - (xx + zz), yz + wx, 0,\n    xz + wy, yz - wx, 1. - (xx + yy), 0,\n    p.x, p.y, p.z, 1\n  );\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  float x2 = x + x;\n  float y2 = y + y;\n  float z2 = z + z;\n  float xx = x * x2;\n  float xy = x * y2;\n  float xz = x * z2;\n  float yy = y * y2;\n  float yz = y * z2;\n  float zz = z * z2;\n  float wx = w * x2;\n  float wy = w * y2;\n  float wz = w * z2;\n  float sx = s.x;\n  float sy = s.y;\n  float sz = s.z;\n  return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n    (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n    (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n    t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\n  vec4 quat;\n  quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n  quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n  quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n  quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n  return quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\n  float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n  float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n  float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n  float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n  v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n  v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n  v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n  vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n  vec4 rotQuat = quatMultiply(viewQuat, q);\n  rotateVecFromQuat(pos, rotQuat);\n  return pos;\n}\nmat3 quatToMat3(vec4 q) {\n  vec3 m0 = vec3(\n    1.0 - 2.0 * q.y * q.y - 2.0 * q.z * q.z,\n    2.0 * q.x * q.y + 2.0 * q.w * q.z,\n    2.0 * q.x * q.z - 2.0 * q.w * q.y);\n\tvec3 m1 = vec3(\n    2.0 * q.x * q.y - 2.0 * q.w * q.z,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.z * q.z,\n    2.0 * q.y * q.z + 2.0 * q.w * q.x);\n\tvec3 m2 = vec3(\n    2.0 * q.x * q.z + 2.0 * q.w * q.y,\n    2.0 * q.y * q.z - 2.0 * q.w * q.x,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.y * q.y);\n  return mat3(m0, m1, m2);\n}\nvec4 mat3ToQuat(mat3 mat) {\n  float tr = mat[0][0] + mat[1][1] + mat[2][2];\n\tfloat qw, qx, qy, qz;\n  if (tr > 0.0) {\n    float S = sqrt(tr + 1.0) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = 0.25 * S;\n\t  qx = (mat[1][2] - mat[2][1]) * invS;\n\t  qy = (mat[2][0] - mat[0][2]) * invS;\n\t  qz = (mat[0][1] - mat[1][0]) * invS;\n  } else if ((mat[0][0] > mat[1][1])&&(mat[0][0] > mat[2][2])) {\n    float S = sqrt(1.0 + mat[0][0] - mat[1][1] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[1][2] - mat[2][1]) * invS;\n\t  qx = 0.25 * S;\n\t  qy = (mat[1][0] + mat[0][1]) * invS;\n\t  qz = (mat[2][0] + mat[0][2]) * invS;\n  } else if (mat[1][1] > mat[2][2]) {\n\t  float S = sqrt(1.0 + mat[1][1] - mat[0][0] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[2][0] - mat[0][2]) * invS;\n\t  qx = (mat[1][0] + mat[0][1]) * invS;\n\t  qy = 0.25 * S;\n\t  qz = (mat[2][1] + mat[1][2]) * invS;\n  } else {\n\t  float S = sqrt(1.0 + mat[2][2] - mat[0][0] - mat[1][1]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[0][1] - mat[1][0]) * invS;\n\t  qx = (mat[2][0] + mat[0][2]) * invS;\n\t  qy = (mat[2][1] + mat[1][2]) * invS;\n\t  qz = 0.25 * S;\n  }\n  return vec4(qx, qy, qz, qw);\n}\n   uniform vec4 mainTiling_Offset;\n   uniform vec4 frameTile_velLenScale;\n   uniform vec4 scale;\n   uniform vec4 nodeRotation;\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matViewInv;\n  uniform highp mat4 cc_matViewProj;\n  uniform highp vec4 cc_cameraPos;\nuniform highp mat4 cc_matWorld;\nvarying mediump vec2 uv;\nvarying mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n  , mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n  vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n  vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = vec3(1, 0, 0);\n  vec3 camY = vec3(0, 0, -1);\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  rotateVecFromQuat(viewSpaceVert, q);\n  vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n  vec3 camY = vec3(0, 1, 0);\n  vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n  pos.xyz += offset;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\n  vertIndex.y = 1. - vertIndex.y;\n#endif\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nattribute vec3 a_position;\nattribute vec3 a_texCoord;\nattribute vec3 a_texCoord1;\nattribute vec3 a_texCoord2;\nattribute vec4 a_color;\n#if CC_RENDER_MODE == 1\n  attribute vec3 a_color1;\n#endif\n#if CC_RENDER_MODE == 4\n  attribute vec3 a_texCoord3;\n  attribute vec3 a_normal;\n  attribute vec4 a_color1;\n#endif\nvec4 lpvs_main () {\n  vec3 compScale = scale.xyz * a_texCoord1;\n  vec4 pos = vec4(a_position, 1);\n  #if CC_RENDER_MODE == 1\n    vec4 velocity = vec4(a_color1.xyz, 0);\n  #endif\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_RENDER_MODE == 1\n      velocity = cc_matWorld * velocity;\n    #endif\n  #endif\n  #if ROTATION_OVER_TIME_MODULE_ENABLE\n    vec3 rotTmp = a_texCoord2;\n    float mulFactor = 1.0;\n    if (rotTmp.x > 10.0 * 0.5) {\n        rotTmp.x -= 10.0;\n        mulFactor = -1.0;\n    }\n    vec4 rot = vec4(rotTmp, 0.0);\n    rot.w = mulFactor * sqrt(abs(1.0 - rot.x * rot.x - rot.y * rot.y - rot.z * rot.z));\n  #else\n    #if CC_RENDER_MODE != 4\n      #if CC_RENDER_MODE == 0\n        vec3 rotEuler = a_texCoord2;\n      #elif CC_RENDER_MODE == 1\n        vec3 rotEuler = vec3(0.);\n      #else\n        vec3 rotEuler = vec3(0., 0., a_texCoord2.z);\n      #endif\n      vec4 rot = quaternionFromEuler(rotEuler);\n    #else\n      vec4 rot = quaternionFromEuler(a_texCoord2);\n    #endif\n  #endif\n  #if CC_RENDER_MODE != 4\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n    #if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_matViewInv);\n    #elif CC_RENDER_MODE == 1\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_cameraPos.xyz, velocity, frameTile_velLenScale.z, frameTile_velLenScale.w, a_texCoord.x);\n    #elif 2\n      computeVertPos(pos, cornerOffset, rot, compScale);\n    #endif\n    color = a_color;\n  #else\n    mat3 rotMat = quatToMat3(rot);\n    mat3 nodeMat = quatToMat3(nodeRotation);\n    rotMat = nodeMat * rotMat;\n    rot = mat3ToQuat(rotMat);\n    mat4 xformNoScale = matrixFromRT(rot, pos.xyz);\n    mat4 xform = matFromRTS(rot, pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n  #endif\n  uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  pos = cc_matViewProj * pos;\n  return pos;\n}\nvoid main() { gl_Position = lpvs_main(); }","frag":"\nprecision mediump float;\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nvarying vec2 uv;\nvarying vec4 color;\nuniform sampler2D mainTexture;\n  uniform vec4 tintColor;\nvec4 add () {\n  vec4 col = 2.0 * color * tintColor * texture2D(mainTexture, uv);\n  return CCFragOutput(col);\n}\nvoid main() { gl_FragColor = add(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":52,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":40}},"defines":[{"name":"CC_RENDER_MODE","type":"number","defines":[],"range":[0,4]},{"name":"CC_USE_WORLD_SPACE","type":"boolean","defines":[]},{"name":"ROTATION_OVER_TIME_MODULE_ENABLE","type":"boolean","defines":[]}]},{"hash":1720952533,"name":"builtin-particle|particle-vs-legacy:lpvs_main|tinted-fs:multiply","blocks":[{"name":"Constants","stageFlags":1,"binding":0,"members":[{"name":"mainTiling_Offset","type":16,"count":1},{"name":"frameTile_velLenScale","type":16,"count":1},{"name":"scale","type":16,"count":1},{"name":"nodeRotation","type":16,"count":1}],"defines":[]},{"name":"FragConstants","stageFlags":16,"binding":1,"members":[{"name":"tintColor","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"mainTexture","type":28,"count":1,"stageFlags":16,"binding":2,"defines":[]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_texCoord","format":32,"location":1,"defines":[]},{"name":"a_texCoord1","format":32,"location":2,"defines":[]},{"name":"a_texCoord2","format":32,"location":3,"defines":[]},{"name":"a_color","format":44,"location":4,"defines":[]},{"name":"a_color1","format":32,"location":8,"defines":["CC_RENDER_MODE"]},{"name":"a_texCoord3","format":32,"location":6,"defines":["CC_RENDER_MODE"]},{"name":"a_normal","format":32,"location":7,"defines":["CC_RENDER_MODE"]}],"varyings":[{"name":"uv","type":14,"count":1,"stageFlags":17,"location":0,"defines":[]},{"name":"color","type":16,"count":1,"stageFlags":17,"location":1,"defines":[]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"glsl4":{"vert":"\nprecision highp float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\n  mat3 m = mat3(xAxis,yAxis,zAxis);\n  float trace = m[0][0] + m[1][1] + m[2][2];\n  vec4 quat;\n  if (trace > 0.) {\n    float s = 0.5 / sqrt(trace + 1.0);\n    quat.w = 0.25 / s;\n    quat.x = (m[2][1] - m[1][2]) * s;\n    quat.y = (m[0][2] - m[2][0]) * s;\n    quat.z = (m[1][0] - m[0][1]) * s;\n  } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n    float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n    quat.w = (m[2][1] - m[1][2]) / s;\n    quat.x = 0.25 * s;\n    quat.y = (m[0][1] + m[1][0]) / s;\n    quat.z = (m[0][2] + m[2][0]) / s;\n  } else if (m[1][1] > m[2][2]) {\n    float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n    quat.w = (m[0][2] - m[2][0]) / s;\n    quat.x = (m[0][1] + m[1][0]) / s;\n    quat.y = 0.25 * s;\n    quat.z = (m[1][2] + m[2][1]) / s;\n  } else {\n    float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n    quat.w = (m[1][0] - m[0][1]) / s;\n    quat.x = (m[0][2] + m[2][0]) / s;\n    quat.y = (m[1][2] + m[2][1]) / s;\n    quat.z = 0.25 * s;\n  }\n  float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n  if (len > 0.) {\n    len = 1. / sqrt(len);\n    quat.x = quat.x * len;\n    quat.y = quat.y * len;\n    quat.z = quat.z * len;\n    quat.w = quat.w * len;\n  }\n  return quat;\n}\nvec4 quaternionFromEuler (vec3 angle){\n  float x = angle.x / 2.;\n  float y = angle.y / 2.;\n  float z = angle.z / 2.;\n  float sx = sin(x);\n  float cx = cos(x);\n  float sy = sin(y);\n  float cy = cos(y);\n  float sz = sin(z);\n  float cz = cos(z);\n  vec4 quat = vec4(0);\n  quat.x = sx * cy * cz + cx * sy * sz;\n  quat.y = cx * sy * cz + sx * cy * sz;\n  quat.z = cx * cy * sz - sx * sy * cz;\n  quat.w = cx * cy * cz - sx * sy * sz;\n  return quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\n  float x2 = q.x + q.x;\n  float y2 = q.y + q.y;\n  float z2 = q.z + q.z;\n  float xx = q.x * x2;\n  float xy = q.x * y2;\n  float xz = q.x * z2;\n  float yy = q.y * y2;\n  float yz = q.y * z2;\n  float zz = q.z * z2;\n  float wx = q.w * x2;\n  float wy = q.w * y2;\n  float wz = q.w * z2;\n  return mat4(\n    1. - (yy + zz), xy + wz, xz - wy, 0,\n    xy - wz, 1. - (xx + zz), yz + wx, 0,\n    xz + wy, yz - wx, 1. - (xx + yy), 0,\n    p.x, p.y, p.z, 1\n  );\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  float x2 = x + x;\n  float y2 = y + y;\n  float z2 = z + z;\n  float xx = x * x2;\n  float xy = x * y2;\n  float xz = x * z2;\n  float yy = y * y2;\n  float yz = y * z2;\n  float zz = z * z2;\n  float wx = w * x2;\n  float wy = w * y2;\n  float wz = w * z2;\n  float sx = s.x;\n  float sy = s.y;\n  float sz = s.z;\n  return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n    (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n    (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n    t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\n  vec4 quat;\n  quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n  quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n  quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n  quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n  return quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\n  float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n  float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n  float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n  float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n  v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n  v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n  v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n  vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n  vec4 rotQuat = quatMultiply(viewQuat, q);\n  rotateVecFromQuat(pos, rotQuat);\n  return pos;\n}\nmat3 quatToMat3(vec4 q) {\n  vec3 m0 = vec3(\n    1.0 - 2.0 * q.y * q.y - 2.0 * q.z * q.z,\n    2.0 * q.x * q.y + 2.0 * q.w * q.z,\n    2.0 * q.x * q.z - 2.0 * q.w * q.y);\n\tvec3 m1 = vec3(\n    2.0 * q.x * q.y - 2.0 * q.w * q.z,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.z * q.z,\n    2.0 * q.y * q.z + 2.0 * q.w * q.x);\n\tvec3 m2 = vec3(\n    2.0 * q.x * q.z + 2.0 * q.w * q.y,\n    2.0 * q.y * q.z - 2.0 * q.w * q.x,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.y * q.y);\n  return mat3(m0, m1, m2);\n}\nvec4 mat3ToQuat(mat3 mat) {\n  float tr = mat[0][0] + mat[1][1] + mat[2][2];\n\tfloat qw, qx, qy, qz;\n  if (tr > 0.0) {\n    float S = sqrt(tr + 1.0) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = 0.25 * S;\n\t  qx = (mat[1][2] - mat[2][1]) * invS;\n\t  qy = (mat[2][0] - mat[0][2]) * invS;\n\t  qz = (mat[0][1] - mat[1][0]) * invS;\n  } else if ((mat[0][0] > mat[1][1])&&(mat[0][0] > mat[2][2])) {\n    float S = sqrt(1.0 + mat[0][0] - mat[1][1] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[1][2] - mat[2][1]) * invS;\n\t  qx = 0.25 * S;\n\t  qy = (mat[1][0] + mat[0][1]) * invS;\n\t  qz = (mat[2][0] + mat[0][2]) * invS;\n  } else if (mat[1][1] > mat[2][2]) {\n\t  float S = sqrt(1.0 + mat[1][1] - mat[0][0] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[2][0] - mat[0][2]) * invS;\n\t  qx = (mat[1][0] + mat[0][1]) * invS;\n\t  qy = 0.25 * S;\n\t  qz = (mat[2][1] + mat[1][2]) * invS;\n  } else {\n\t  float S = sqrt(1.0 + mat[2][2] - mat[0][0] - mat[1][1]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[0][1] - mat[1][0]) * invS;\n\t  qx = (mat[2][0] + mat[0][2]) * invS;\n\t  qy = (mat[2][1] + mat[1][2]) * invS;\n\t  qz = 0.25 * S;\n  }\n  return vec4(qx, qy, qz, qw);\n}\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 mainTiling_Offset;\n  vec4 frameTile_velLenScale;\n  vec4 scale;\n  vec4 nodeRotation;\n};\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(set = 2, binding = 0) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n};\nlayout(location = 0) out mediump vec2 uv;\nlayout(location = 1) out mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n  , mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n  vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n  vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = vec3(1, 0, 0);\n  vec3 camY = vec3(0, 0, -1);\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  rotateVecFromQuat(viewSpaceVert, q);\n  vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n  vec3 camY = vec3(0, 1, 0);\n  vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n  pos.xyz += offset;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\n  vertIndex.y = 1. - vertIndex.y;\n#endif\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec3 a_texCoord;\nlayout(location = 2) in vec3 a_texCoord1;\nlayout(location = 3) in vec3 a_texCoord2;\nlayout(location = 4) in vec4 a_color;\n#if CC_RENDER_MODE == 1\n  layout(location = 8) in vec3 a_color1;\n#endif\n#if CC_RENDER_MODE == 4\n  layout(location = 6) in vec3 a_texCoord3;\n  layout(location = 7) in vec3 a_normal;\n  layout(location = 8) in vec4 a_color1;\n#endif\nvec4 lpvs_main () {\n  vec3 compScale = scale.xyz * a_texCoord1;\n  vec4 pos = vec4(a_position, 1);\n  #if CC_RENDER_MODE == 1\n    vec4 velocity = vec4(a_color1.xyz, 0);\n  #endif\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_RENDER_MODE == 1\n      velocity = cc_matWorld * velocity;\n    #endif\n  #endif\n  #if ROTATION_OVER_TIME_MODULE_ENABLE\n    vec3 rotTmp = a_texCoord2;\n    float mulFactor = 1.0;\n    if (rotTmp.x > 10.0 * 0.5) {\n        rotTmp.x -= 10.0;\n        mulFactor = -1.0;\n    }\n    vec4 rot = vec4(rotTmp, 0.0);\n    rot.w = mulFactor * sqrt(abs(1.0 - rot.x * rot.x - rot.y * rot.y - rot.z * rot.z));\n  #else\n    #if CC_RENDER_MODE != 4\n      #if CC_RENDER_MODE == 0\n        vec3 rotEuler = a_texCoord2;\n      #elif CC_RENDER_MODE == 1\n        vec3 rotEuler = vec3(0.);\n      #else\n        vec3 rotEuler = vec3(0., 0., a_texCoord2.z);\n      #endif\n      vec4 rot = quaternionFromEuler(rotEuler);\n    #else\n      vec4 rot = quaternionFromEuler(a_texCoord2);\n    #endif\n  #endif\n  #if CC_RENDER_MODE != 4\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n    #if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_matViewInv);\n    #elif CC_RENDER_MODE == 1\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_cameraPos.xyz, velocity, frameTile_velLenScale.z, frameTile_velLenScale.w, a_texCoord.x);\n    #elif 2\n      computeVertPos(pos, cornerOffset, rot, compScale);\n    #endif\n    color = a_color;\n  #else\n    mat3 rotMat = quatToMat3(rot);\n    mat3 nodeMat = quatToMat3(nodeRotation);\n    rotMat = nodeMat * rotMat;\n    rot = mat3ToQuat(rotMat);\n    mat4 xformNoScale = matrixFromRT(rot, pos.xyz);\n    mat4 xform = matFromRTS(rot, pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n  #endif\n  uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  pos = cc_matViewProj * pos;\n  return pos;\n}\nvoid main() { gl_Position = lpvs_main(); }","frag":"\nprecision mediump float;\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nlayout(location = 0) in vec2 uv;\nlayout(location = 1) in vec4 color;\nlayout(set = 1, binding = 2) uniform sampler2D mainTexture;\nlayout(set = 1, binding = 1) uniform FragConstants {\n  vec4 tintColor;\n};\nvec4 multiply () {\n  vec4 col;\n  vec4 texColor = texture(mainTexture, uv);\n  col.rgb = tintColor.rgb * texColor.rgb * color.rgb * vec3(2.0);\n  return CCFragOutput(col);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = multiply(); }"},"glsl3":{"vert":"\nprecision highp float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\n  mat3 m = mat3(xAxis,yAxis,zAxis);\n  float trace = m[0][0] + m[1][1] + m[2][2];\n  vec4 quat;\n  if (trace > 0.) {\n    float s = 0.5 / sqrt(trace + 1.0);\n    quat.w = 0.25 / s;\n    quat.x = (m[2][1] - m[1][2]) * s;\n    quat.y = (m[0][2] - m[2][0]) * s;\n    quat.z = (m[1][0] - m[0][1]) * s;\n  } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n    float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n    quat.w = (m[2][1] - m[1][2]) / s;\n    quat.x = 0.25 * s;\n    quat.y = (m[0][1] + m[1][0]) / s;\n    quat.z = (m[0][2] + m[2][0]) / s;\n  } else if (m[1][1] > m[2][2]) {\n    float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n    quat.w = (m[0][2] - m[2][0]) / s;\n    quat.x = (m[0][1] + m[1][0]) / s;\n    quat.y = 0.25 * s;\n    quat.z = (m[1][2] + m[2][1]) / s;\n  } else {\n    float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n    quat.w = (m[1][0] - m[0][1]) / s;\n    quat.x = (m[0][2] + m[2][0]) / s;\n    quat.y = (m[1][2] + m[2][1]) / s;\n    quat.z = 0.25 * s;\n  }\n  float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n  if (len > 0.) {\n    len = 1. / sqrt(len);\n    quat.x = quat.x * len;\n    quat.y = quat.y * len;\n    quat.z = quat.z * len;\n    quat.w = quat.w * len;\n  }\n  return quat;\n}\nvec4 quaternionFromEuler (vec3 angle){\n  float x = angle.x / 2.;\n  float y = angle.y / 2.;\n  float z = angle.z / 2.;\n  float sx = sin(x);\n  float cx = cos(x);\n  float sy = sin(y);\n  float cy = cos(y);\n  float sz = sin(z);\n  float cz = cos(z);\n  vec4 quat = vec4(0);\n  quat.x = sx * cy * cz + cx * sy * sz;\n  quat.y = cx * sy * cz + sx * cy * sz;\n  quat.z = cx * cy * sz - sx * sy * cz;\n  quat.w = cx * cy * cz - sx * sy * sz;\n  return quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\n  float x2 = q.x + q.x;\n  float y2 = q.y + q.y;\n  float z2 = q.z + q.z;\n  float xx = q.x * x2;\n  float xy = q.x * y2;\n  float xz = q.x * z2;\n  float yy = q.y * y2;\n  float yz = q.y * z2;\n  float zz = q.z * z2;\n  float wx = q.w * x2;\n  float wy = q.w * y2;\n  float wz = q.w * z2;\n  return mat4(\n    1. - (yy + zz), xy + wz, xz - wy, 0,\n    xy - wz, 1. - (xx + zz), yz + wx, 0,\n    xz + wy, yz - wx, 1. - (xx + yy), 0,\n    p.x, p.y, p.z, 1\n  );\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  float x2 = x + x;\n  float y2 = y + y;\n  float z2 = z + z;\n  float xx = x * x2;\n  float xy = x * y2;\n  float xz = x * z2;\n  float yy = y * y2;\n  float yz = y * z2;\n  float zz = z * z2;\n  float wx = w * x2;\n  float wy = w * y2;\n  float wz = w * z2;\n  float sx = s.x;\n  float sy = s.y;\n  float sz = s.z;\n  return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n    (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n    (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n    t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\n  vec4 quat;\n  quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n  quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n  quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n  quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n  return quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\n  float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n  float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n  float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n  float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n  v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n  v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n  v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n  vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n  vec4 rotQuat = quatMultiply(viewQuat, q);\n  rotateVecFromQuat(pos, rotQuat);\n  return pos;\n}\nmat3 quatToMat3(vec4 q) {\n  vec3 m0 = vec3(\n    1.0 - 2.0 * q.y * q.y - 2.0 * q.z * q.z,\n    2.0 * q.x * q.y + 2.0 * q.w * q.z,\n    2.0 * q.x * q.z - 2.0 * q.w * q.y);\n\tvec3 m1 = vec3(\n    2.0 * q.x * q.y - 2.0 * q.w * q.z,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.z * q.z,\n    2.0 * q.y * q.z + 2.0 * q.w * q.x);\n\tvec3 m2 = vec3(\n    2.0 * q.x * q.z + 2.0 * q.w * q.y,\n    2.0 * q.y * q.z - 2.0 * q.w * q.x,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.y * q.y);\n  return mat3(m0, m1, m2);\n}\nvec4 mat3ToQuat(mat3 mat) {\n  float tr = mat[0][0] + mat[1][1] + mat[2][2];\n\tfloat qw, qx, qy, qz;\n  if (tr > 0.0) {\n    float S = sqrt(tr + 1.0) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = 0.25 * S;\n\t  qx = (mat[1][2] - mat[2][1]) * invS;\n\t  qy = (mat[2][0] - mat[0][2]) * invS;\n\t  qz = (mat[0][1] - mat[1][0]) * invS;\n  } else if ((mat[0][0] > mat[1][1])&&(mat[0][0] > mat[2][2])) {\n    float S = sqrt(1.0 + mat[0][0] - mat[1][1] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[1][2] - mat[2][1]) * invS;\n\t  qx = 0.25 * S;\n\t  qy = (mat[1][0] + mat[0][1]) * invS;\n\t  qz = (mat[2][0] + mat[0][2]) * invS;\n  } else if (mat[1][1] > mat[2][2]) {\n\t  float S = sqrt(1.0 + mat[1][1] - mat[0][0] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[2][0] - mat[0][2]) * invS;\n\t  qx = (mat[1][0] + mat[0][1]) * invS;\n\t  qy = 0.25 * S;\n\t  qz = (mat[2][1] + mat[1][2]) * invS;\n  } else {\n\t  float S = sqrt(1.0 + mat[2][2] - mat[0][0] - mat[1][1]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[0][1] - mat[1][0]) * invS;\n\t  qx = (mat[2][0] + mat[0][2]) * invS;\n\t  qy = (mat[2][1] + mat[1][2]) * invS;\n\t  qz = 0.25 * S;\n  }\n  return vec4(qx, qy, qz, qw);\n}\nlayout(std140) uniform Constants {\n  vec4 mainTiling_Offset;\n  vec4 frameTile_velLenScale;\n  vec4 scale;\n  vec4 nodeRotation;\n};\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(std140) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n};\nout mediump vec2 uv;\nout mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n  , mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n  vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n  vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = vec3(1, 0, 0);\n  vec3 camY = vec3(0, 0, -1);\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  rotateVecFromQuat(viewSpaceVert, q);\n  vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n  vec3 camY = vec3(0, 1, 0);\n  vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n  pos.xyz += offset;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\n  vertIndex.y = 1. - vertIndex.y;\n#endif\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nin vec3 a_position;\nin vec3 a_texCoord;\nin vec3 a_texCoord1;\nin vec3 a_texCoord2;\nin vec4 a_color;\n#if CC_RENDER_MODE == 1\n  in vec3 a_color1;\n#endif\n#if CC_RENDER_MODE == 4\n  in vec3 a_texCoord3;\n  in vec3 a_normal;\n  in vec4 a_color1;\n#endif\nvec4 lpvs_main () {\n  vec3 compScale = scale.xyz * a_texCoord1;\n  vec4 pos = vec4(a_position, 1);\n  #if CC_RENDER_MODE == 1\n    vec4 velocity = vec4(a_color1.xyz, 0);\n  #endif\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_RENDER_MODE == 1\n      velocity = cc_matWorld * velocity;\n    #endif\n  #endif\n  #if ROTATION_OVER_TIME_MODULE_ENABLE\n    vec3 rotTmp = a_texCoord2;\n    float mulFactor = 1.0;\n    if (rotTmp.x > 10.0 * 0.5) {\n        rotTmp.x -= 10.0;\n        mulFactor = -1.0;\n    }\n    vec4 rot = vec4(rotTmp, 0.0);\n    rot.w = mulFactor * sqrt(abs(1.0 - rot.x * rot.x - rot.y * rot.y - rot.z * rot.z));\n  #else\n    #if CC_RENDER_MODE != 4\n      #if CC_RENDER_MODE == 0\n        vec3 rotEuler = a_texCoord2;\n      #elif CC_RENDER_MODE == 1\n        vec3 rotEuler = vec3(0.);\n      #else\n        vec3 rotEuler = vec3(0., 0., a_texCoord2.z);\n      #endif\n      vec4 rot = quaternionFromEuler(rotEuler);\n    #else\n      vec4 rot = quaternionFromEuler(a_texCoord2);\n    #endif\n  #endif\n  #if CC_RENDER_MODE != 4\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n    #if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_matViewInv);\n    #elif CC_RENDER_MODE == 1\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_cameraPos.xyz, velocity, frameTile_velLenScale.z, frameTile_velLenScale.w, a_texCoord.x);\n    #elif 2\n      computeVertPos(pos, cornerOffset, rot, compScale);\n    #endif\n    color = a_color;\n  #else\n    mat3 rotMat = quatToMat3(rot);\n    mat3 nodeMat = quatToMat3(nodeRotation);\n    rotMat = nodeMat * rotMat;\n    rot = mat3ToQuat(rotMat);\n    mat4 xformNoScale = matrixFromRT(rot, pos.xyz);\n    mat4 xform = matFromRTS(rot, pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n  #endif\n  uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  pos = cc_matViewProj * pos;\n  return pos;\n}\nvoid main() { gl_Position = lpvs_main(); }","frag":"\nprecision mediump float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nin vec2 uv;\nin vec4 color;\nuniform sampler2D mainTexture;\nlayout(std140) uniform FragConstants {\n  vec4 tintColor;\n};\nvec4 multiply () {\n  vec4 col;\n  vec4 texColor = texture(mainTexture, uv);\n  col.rgb = tintColor.rgb * texColor.rgb * color.rgb * vec3(2.0);\n  return CCFragOutput(col);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = multiply(); }"},"glsl1":{"vert":"\nprecision highp float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\n  mat3 m = mat3(xAxis,yAxis,zAxis);\n  float trace = m[0][0] + m[1][1] + m[2][2];\n  vec4 quat;\n  if (trace > 0.) {\n    float s = 0.5 / sqrt(trace + 1.0);\n    quat.w = 0.25 / s;\n    quat.x = (m[2][1] - m[1][2]) * s;\n    quat.y = (m[0][2] - m[2][0]) * s;\n    quat.z = (m[1][0] - m[0][1]) * s;\n  } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n    float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n    quat.w = (m[2][1] - m[1][2]) / s;\n    quat.x = 0.25 * s;\n    quat.y = (m[0][1] + m[1][0]) / s;\n    quat.z = (m[0][2] + m[2][0]) / s;\n  } else if (m[1][1] > m[2][2]) {\n    float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n    quat.w = (m[0][2] - m[2][0]) / s;\n    quat.x = (m[0][1] + m[1][0]) / s;\n    quat.y = 0.25 * s;\n    quat.z = (m[1][2] + m[2][1]) / s;\n  } else {\n    float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n    quat.w = (m[1][0] - m[0][1]) / s;\n    quat.x = (m[0][2] + m[2][0]) / s;\n    quat.y = (m[1][2] + m[2][1]) / s;\n    quat.z = 0.25 * s;\n  }\n  float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n  if (len > 0.) {\n    len = 1. / sqrt(len);\n    quat.x = quat.x * len;\n    quat.y = quat.y * len;\n    quat.z = quat.z * len;\n    quat.w = quat.w * len;\n  }\n  return quat;\n}\nvec4 quaternionFromEuler (vec3 angle){\n  float x = angle.x / 2.;\n  float y = angle.y / 2.;\n  float z = angle.z / 2.;\n  float sx = sin(x);\n  float cx = cos(x);\n  float sy = sin(y);\n  float cy = cos(y);\n  float sz = sin(z);\n  float cz = cos(z);\n  vec4 quat = vec4(0);\n  quat.x = sx * cy * cz + cx * sy * sz;\n  quat.y = cx * sy * cz + sx * cy * sz;\n  quat.z = cx * cy * sz - sx * sy * cz;\n  quat.w = cx * cy * cz - sx * sy * sz;\n  return quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\n  float x2 = q.x + q.x;\n  float y2 = q.y + q.y;\n  float z2 = q.z + q.z;\n  float xx = q.x * x2;\n  float xy = q.x * y2;\n  float xz = q.x * z2;\n  float yy = q.y * y2;\n  float yz = q.y * z2;\n  float zz = q.z * z2;\n  float wx = q.w * x2;\n  float wy = q.w * y2;\n  float wz = q.w * z2;\n  return mat4(\n    1. - (yy + zz), xy + wz, xz - wy, 0,\n    xy - wz, 1. - (xx + zz), yz + wx, 0,\n    xz + wy, yz - wx, 1. - (xx + yy), 0,\n    p.x, p.y, p.z, 1\n  );\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  float x2 = x + x;\n  float y2 = y + y;\n  float z2 = z + z;\n  float xx = x * x2;\n  float xy = x * y2;\n  float xz = x * z2;\n  float yy = y * y2;\n  float yz = y * z2;\n  float zz = z * z2;\n  float wx = w * x2;\n  float wy = w * y2;\n  float wz = w * z2;\n  float sx = s.x;\n  float sy = s.y;\n  float sz = s.z;\n  return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n    (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n    (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n    t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\n  vec4 quat;\n  quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n  quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n  quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n  quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n  return quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\n  float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n  float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n  float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n  float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n  v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n  v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n  v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n  vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n  vec4 rotQuat = quatMultiply(viewQuat, q);\n  rotateVecFromQuat(pos, rotQuat);\n  return pos;\n}\nmat3 quatToMat3(vec4 q) {\n  vec3 m0 = vec3(\n    1.0 - 2.0 * q.y * q.y - 2.0 * q.z * q.z,\n    2.0 * q.x * q.y + 2.0 * q.w * q.z,\n    2.0 * q.x * q.z - 2.0 * q.w * q.y);\n\tvec3 m1 = vec3(\n    2.0 * q.x * q.y - 2.0 * q.w * q.z,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.z * q.z,\n    2.0 * q.y * q.z + 2.0 * q.w * q.x);\n\tvec3 m2 = vec3(\n    2.0 * q.x * q.z + 2.0 * q.w * q.y,\n    2.0 * q.y * q.z - 2.0 * q.w * q.x,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.y * q.y);\n  return mat3(m0, m1, m2);\n}\nvec4 mat3ToQuat(mat3 mat) {\n  float tr = mat[0][0] + mat[1][1] + mat[2][2];\n\tfloat qw, qx, qy, qz;\n  if (tr > 0.0) {\n    float S = sqrt(tr + 1.0) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = 0.25 * S;\n\t  qx = (mat[1][2] - mat[2][1]) * invS;\n\t  qy = (mat[2][0] - mat[0][2]) * invS;\n\t  qz = (mat[0][1] - mat[1][0]) * invS;\n  } else if ((mat[0][0] > mat[1][1])&&(mat[0][0] > mat[2][2])) {\n    float S = sqrt(1.0 + mat[0][0] - mat[1][1] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[1][2] - mat[2][1]) * invS;\n\t  qx = 0.25 * S;\n\t  qy = (mat[1][0] + mat[0][1]) * invS;\n\t  qz = (mat[2][0] + mat[0][2]) * invS;\n  } else if (mat[1][1] > mat[2][2]) {\n\t  float S = sqrt(1.0 + mat[1][1] - mat[0][0] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[2][0] - mat[0][2]) * invS;\n\t  qx = (mat[1][0] + mat[0][1]) * invS;\n\t  qy = 0.25 * S;\n\t  qz = (mat[2][1] + mat[1][2]) * invS;\n  } else {\n\t  float S = sqrt(1.0 + mat[2][2] - mat[0][0] - mat[1][1]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[0][1] - mat[1][0]) * invS;\n\t  qx = (mat[2][0] + mat[0][2]) * invS;\n\t  qy = (mat[2][1] + mat[1][2]) * invS;\n\t  qz = 0.25 * S;\n  }\n  return vec4(qx, qy, qz, qw);\n}\n   uniform vec4 mainTiling_Offset;\n   uniform vec4 frameTile_velLenScale;\n   uniform vec4 scale;\n   uniform vec4 nodeRotation;\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matViewInv;\n  uniform highp mat4 cc_matViewProj;\n  uniform highp vec4 cc_cameraPos;\nuniform highp mat4 cc_matWorld;\nvarying mediump vec2 uv;\nvarying mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n  , mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n  vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n  vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = vec3(1, 0, 0);\n  vec3 camY = vec3(0, 0, -1);\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  rotateVecFromQuat(viewSpaceVert, q);\n  vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n  vec3 camY = vec3(0, 1, 0);\n  vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n  pos.xyz += offset;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\n  vertIndex.y = 1. - vertIndex.y;\n#endif\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nattribute vec3 a_position;\nattribute vec3 a_texCoord;\nattribute vec3 a_texCoord1;\nattribute vec3 a_texCoord2;\nattribute vec4 a_color;\n#if CC_RENDER_MODE == 1\n  attribute vec3 a_color1;\n#endif\n#if CC_RENDER_MODE == 4\n  attribute vec3 a_texCoord3;\n  attribute vec3 a_normal;\n  attribute vec4 a_color1;\n#endif\nvec4 lpvs_main () {\n  vec3 compScale = scale.xyz * a_texCoord1;\n  vec4 pos = vec4(a_position, 1);\n  #if CC_RENDER_MODE == 1\n    vec4 velocity = vec4(a_color1.xyz, 0);\n  #endif\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_RENDER_MODE == 1\n      velocity = cc_matWorld * velocity;\n    #endif\n  #endif\n  #if ROTATION_OVER_TIME_MODULE_ENABLE\n    vec3 rotTmp = a_texCoord2;\n    float mulFactor = 1.0;\n    if (rotTmp.x > 10.0 * 0.5) {\n        rotTmp.x -= 10.0;\n        mulFactor = -1.0;\n    }\n    vec4 rot = vec4(rotTmp, 0.0);\n    rot.w = mulFactor * sqrt(abs(1.0 - rot.x * rot.x - rot.y * rot.y - rot.z * rot.z));\n  #else\n    #if CC_RENDER_MODE != 4\n      #if CC_RENDER_MODE == 0\n        vec3 rotEuler = a_texCoord2;\n      #elif CC_RENDER_MODE == 1\n        vec3 rotEuler = vec3(0.);\n      #else\n        vec3 rotEuler = vec3(0., 0., a_texCoord2.z);\n      #endif\n      vec4 rot = quaternionFromEuler(rotEuler);\n    #else\n      vec4 rot = quaternionFromEuler(a_texCoord2);\n    #endif\n  #endif\n  #if CC_RENDER_MODE != 4\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n    #if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_matViewInv);\n    #elif CC_RENDER_MODE == 1\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_cameraPos.xyz, velocity, frameTile_velLenScale.z, frameTile_velLenScale.w, a_texCoord.x);\n    #elif 2\n      computeVertPos(pos, cornerOffset, rot, compScale);\n    #endif\n    color = a_color;\n  #else\n    mat3 rotMat = quatToMat3(rot);\n    mat3 nodeMat = quatToMat3(nodeRotation);\n    rotMat = nodeMat * rotMat;\n    rot = mat3ToQuat(rotMat);\n    mat4 xformNoScale = matrixFromRT(rot, pos.xyz);\n    mat4 xform = matFromRTS(rot, pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n  #endif\n  uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  pos = cc_matViewProj * pos;\n  return pos;\n}\nvoid main() { gl_Position = lpvs_main(); }","frag":"\nprecision mediump float;\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nvarying vec2 uv;\nvarying vec4 color;\nuniform sampler2D mainTexture;\n  uniform vec4 tintColor;\nvec4 multiply () {\n  vec4 col;\n  vec4 texColor = texture2D(mainTexture, uv);\n  col.rgb = tintColor.rgb * texColor.rgb * color.rgb * vec3(2.0);\n  return CCFragOutput(col);\n}\nvoid main() { gl_FragColor = multiply(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":52,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":40}},"defines":[{"name":"CC_RENDER_MODE","type":"number","defines":[],"range":[0,4]},{"name":"CC_USE_WORLD_SPACE","type":"boolean","defines":[]},{"name":"ROTATION_OVER_TIME_MODULE_ENABLE","type":"boolean","defines":[]}]},{"hash":1759026248,"name":"builtin-particle|particle-vs-legacy:lpvs_main|no-tint-fs:addSmooth","blocks":[{"name":"Constants","stageFlags":1,"binding":0,"members":[{"name":"mainTiling_Offset","type":16,"count":1},{"name":"frameTile_velLenScale","type":16,"count":1},{"name":"scale","type":16,"count":1},{"name":"nodeRotation","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"mainTexture","type":28,"count":1,"stageFlags":16,"binding":1,"defines":[]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_texCoord","format":32,"location":1,"defines":[]},{"name":"a_texCoord1","format":32,"location":2,"defines":[]},{"name":"a_texCoord2","format":32,"location":3,"defines":[]},{"name":"a_color","format":44,"location":4,"defines":[]},{"name":"a_color1","format":32,"location":8,"defines":["CC_RENDER_MODE"]},{"name":"a_texCoord3","format":32,"location":6,"defines":["CC_RENDER_MODE"]},{"name":"a_normal","format":32,"location":7,"defines":["CC_RENDER_MODE"]}],"varyings":[{"name":"uv","type":14,"count":1,"stageFlags":17,"location":0,"defines":[]},{"name":"color","type":16,"count":1,"stageFlags":17,"location":1,"defines":[]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"glsl4":{"vert":"\nprecision highp float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\n  mat3 m = mat3(xAxis,yAxis,zAxis);\n  float trace = m[0][0] + m[1][1] + m[2][2];\n  vec4 quat;\n  if (trace > 0.) {\n    float s = 0.5 / sqrt(trace + 1.0);\n    quat.w = 0.25 / s;\n    quat.x = (m[2][1] - m[1][2]) * s;\n    quat.y = (m[0][2] - m[2][0]) * s;\n    quat.z = (m[1][0] - m[0][1]) * s;\n  } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n    float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n    quat.w = (m[2][1] - m[1][2]) / s;\n    quat.x = 0.25 * s;\n    quat.y = (m[0][1] + m[1][0]) / s;\n    quat.z = (m[0][2] + m[2][0]) / s;\n  } else if (m[1][1] > m[2][2]) {\n    float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n    quat.w = (m[0][2] - m[2][0]) / s;\n    quat.x = (m[0][1] + m[1][0]) / s;\n    quat.y = 0.25 * s;\n    quat.z = (m[1][2] + m[2][1]) / s;\n  } else {\n    float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n    quat.w = (m[1][0] - m[0][1]) / s;\n    quat.x = (m[0][2] + m[2][0]) / s;\n    quat.y = (m[1][2] + m[2][1]) / s;\n    quat.z = 0.25 * s;\n  }\n  float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n  if (len > 0.) {\n    len = 1. / sqrt(len);\n    quat.x = quat.x * len;\n    quat.y = quat.y * len;\n    quat.z = quat.z * len;\n    quat.w = quat.w * len;\n  }\n  return quat;\n}\nvec4 quaternionFromEuler (vec3 angle){\n  float x = angle.x / 2.;\n  float y = angle.y / 2.;\n  float z = angle.z / 2.;\n  float sx = sin(x);\n  float cx = cos(x);\n  float sy = sin(y);\n  float cy = cos(y);\n  float sz = sin(z);\n  float cz = cos(z);\n  vec4 quat = vec4(0);\n  quat.x = sx * cy * cz + cx * sy * sz;\n  quat.y = cx * sy * cz + sx * cy * sz;\n  quat.z = cx * cy * sz - sx * sy * cz;\n  quat.w = cx * cy * cz - sx * sy * sz;\n  return quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\n  float x2 = q.x + q.x;\n  float y2 = q.y + q.y;\n  float z2 = q.z + q.z;\n  float xx = q.x * x2;\n  float xy = q.x * y2;\n  float xz = q.x * z2;\n  float yy = q.y * y2;\n  float yz = q.y * z2;\n  float zz = q.z * z2;\n  float wx = q.w * x2;\n  float wy = q.w * y2;\n  float wz = q.w * z2;\n  return mat4(\n    1. - (yy + zz), xy + wz, xz - wy, 0,\n    xy - wz, 1. - (xx + zz), yz + wx, 0,\n    xz + wy, yz - wx, 1. - (xx + yy), 0,\n    p.x, p.y, p.z, 1\n  );\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  float x2 = x + x;\n  float y2 = y + y;\n  float z2 = z + z;\n  float xx = x * x2;\n  float xy = x * y2;\n  float xz = x * z2;\n  float yy = y * y2;\n  float yz = y * z2;\n  float zz = z * z2;\n  float wx = w * x2;\n  float wy = w * y2;\n  float wz = w * z2;\n  float sx = s.x;\n  float sy = s.y;\n  float sz = s.z;\n  return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n    (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n    (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n    t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\n  vec4 quat;\n  quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n  quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n  quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n  quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n  return quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\n  float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n  float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n  float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n  float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n  v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n  v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n  v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n  vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n  vec4 rotQuat = quatMultiply(viewQuat, q);\n  rotateVecFromQuat(pos, rotQuat);\n  return pos;\n}\nmat3 quatToMat3(vec4 q) {\n  vec3 m0 = vec3(\n    1.0 - 2.0 * q.y * q.y - 2.0 * q.z * q.z,\n    2.0 * q.x * q.y + 2.0 * q.w * q.z,\n    2.0 * q.x * q.z - 2.0 * q.w * q.y);\n\tvec3 m1 = vec3(\n    2.0 * q.x * q.y - 2.0 * q.w * q.z,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.z * q.z,\n    2.0 * q.y * q.z + 2.0 * q.w * q.x);\n\tvec3 m2 = vec3(\n    2.0 * q.x * q.z + 2.0 * q.w * q.y,\n    2.0 * q.y * q.z - 2.0 * q.w * q.x,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.y * q.y);\n  return mat3(m0, m1, m2);\n}\nvec4 mat3ToQuat(mat3 mat) {\n  float tr = mat[0][0] + mat[1][1] + mat[2][2];\n\tfloat qw, qx, qy, qz;\n  if (tr > 0.0) {\n    float S = sqrt(tr + 1.0) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = 0.25 * S;\n\t  qx = (mat[1][2] - mat[2][1]) * invS;\n\t  qy = (mat[2][0] - mat[0][2]) * invS;\n\t  qz = (mat[0][1] - mat[1][0]) * invS;\n  } else if ((mat[0][0] > mat[1][1])&&(mat[0][0] > mat[2][2])) {\n    float S = sqrt(1.0 + mat[0][0] - mat[1][1] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[1][2] - mat[2][1]) * invS;\n\t  qx = 0.25 * S;\n\t  qy = (mat[1][0] + mat[0][1]) * invS;\n\t  qz = (mat[2][0] + mat[0][2]) * invS;\n  } else if (mat[1][1] > mat[2][2]) {\n\t  float S = sqrt(1.0 + mat[1][1] - mat[0][0] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[2][0] - mat[0][2]) * invS;\n\t  qx = (mat[1][0] + mat[0][1]) * invS;\n\t  qy = 0.25 * S;\n\t  qz = (mat[2][1] + mat[1][2]) * invS;\n  } else {\n\t  float S = sqrt(1.0 + mat[2][2] - mat[0][0] - mat[1][1]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[0][1] - mat[1][0]) * invS;\n\t  qx = (mat[2][0] + mat[0][2]) * invS;\n\t  qy = (mat[2][1] + mat[1][2]) * invS;\n\t  qz = 0.25 * S;\n  }\n  return vec4(qx, qy, qz, qw);\n}\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 mainTiling_Offset;\n  vec4 frameTile_velLenScale;\n  vec4 scale;\n  vec4 nodeRotation;\n};\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(set = 2, binding = 0) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n};\nlayout(location = 0) out mediump vec2 uv;\nlayout(location = 1) out mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n  , mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n  vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n  vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = vec3(1, 0, 0);\n  vec3 camY = vec3(0, 0, -1);\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  rotateVecFromQuat(viewSpaceVert, q);\n  vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n  vec3 camY = vec3(0, 1, 0);\n  vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n  pos.xyz += offset;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\n  vertIndex.y = 1. - vertIndex.y;\n#endif\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec3 a_texCoord;\nlayout(location = 2) in vec3 a_texCoord1;\nlayout(location = 3) in vec3 a_texCoord2;\nlayout(location = 4) in vec4 a_color;\n#if CC_RENDER_MODE == 1\n  layout(location = 8) in vec3 a_color1;\n#endif\n#if CC_RENDER_MODE == 4\n  layout(location = 6) in vec3 a_texCoord3;\n  layout(location = 7) in vec3 a_normal;\n  layout(location = 8) in vec4 a_color1;\n#endif\nvec4 lpvs_main () {\n  vec3 compScale = scale.xyz * a_texCoord1;\n  vec4 pos = vec4(a_position, 1);\n  #if CC_RENDER_MODE == 1\n    vec4 velocity = vec4(a_color1.xyz, 0);\n  #endif\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_RENDER_MODE == 1\n      velocity = cc_matWorld * velocity;\n    #endif\n  #endif\n  #if ROTATION_OVER_TIME_MODULE_ENABLE\n    vec3 rotTmp = a_texCoord2;\n    float mulFactor = 1.0;\n    if (rotTmp.x > 10.0 * 0.5) {\n        rotTmp.x -= 10.0;\n        mulFactor = -1.0;\n    }\n    vec4 rot = vec4(rotTmp, 0.0);\n    rot.w = mulFactor * sqrt(abs(1.0 - rot.x * rot.x - rot.y * rot.y - rot.z * rot.z));\n  #else\n    #if CC_RENDER_MODE != 4\n      #if CC_RENDER_MODE == 0\n        vec3 rotEuler = a_texCoord2;\n      #elif CC_RENDER_MODE == 1\n        vec3 rotEuler = vec3(0.);\n      #else\n        vec3 rotEuler = vec3(0., 0., a_texCoord2.z);\n      #endif\n      vec4 rot = quaternionFromEuler(rotEuler);\n    #else\n      vec4 rot = quaternionFromEuler(a_texCoord2);\n    #endif\n  #endif\n  #if CC_RENDER_MODE != 4\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n    #if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_matViewInv);\n    #elif CC_RENDER_MODE == 1\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_cameraPos.xyz, velocity, frameTile_velLenScale.z, frameTile_velLenScale.w, a_texCoord.x);\n    #elif 2\n      computeVertPos(pos, cornerOffset, rot, compScale);\n    #endif\n    color = a_color;\n  #else\n    mat3 rotMat = quatToMat3(rot);\n    mat3 nodeMat = quatToMat3(nodeRotation);\n    rotMat = nodeMat * rotMat;\n    rot = mat3ToQuat(rotMat);\n    mat4 xformNoScale = matrixFromRT(rot, pos.xyz);\n    mat4 xform = matFromRTS(rot, pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n  #endif\n  uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  pos = cc_matViewProj * pos;\n  return pos;\n}\nvoid main() { gl_Position = lpvs_main(); }","frag":"\nprecision mediump float;\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nlayout(location = 0) in vec2 uv;\nlayout(location = 1) in vec4 color;\nlayout(set = 1, binding = 1) uniform sampler2D mainTexture;\nvec4 addSmooth () {\n  vec4 col = color * texture(mainTexture, uv);\n  col.rgb *= col.a;\n  return CCFragOutput(col);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = addSmooth(); }"},"glsl3":{"vert":"\nprecision highp float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\n  mat3 m = mat3(xAxis,yAxis,zAxis);\n  float trace = m[0][0] + m[1][1] + m[2][2];\n  vec4 quat;\n  if (trace > 0.) {\n    float s = 0.5 / sqrt(trace + 1.0);\n    quat.w = 0.25 / s;\n    quat.x = (m[2][1] - m[1][2]) * s;\n    quat.y = (m[0][2] - m[2][0]) * s;\n    quat.z = (m[1][0] - m[0][1]) * s;\n  } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n    float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n    quat.w = (m[2][1] - m[1][2]) / s;\n    quat.x = 0.25 * s;\n    quat.y = (m[0][1] + m[1][0]) / s;\n    quat.z = (m[0][2] + m[2][0]) / s;\n  } else if (m[1][1] > m[2][2]) {\n    float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n    quat.w = (m[0][2] - m[2][0]) / s;\n    quat.x = (m[0][1] + m[1][0]) / s;\n    quat.y = 0.25 * s;\n    quat.z = (m[1][2] + m[2][1]) / s;\n  } else {\n    float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n    quat.w = (m[1][0] - m[0][1]) / s;\n    quat.x = (m[0][2] + m[2][0]) / s;\n    quat.y = (m[1][2] + m[2][1]) / s;\n    quat.z = 0.25 * s;\n  }\n  float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n  if (len > 0.) {\n    len = 1. / sqrt(len);\n    quat.x = quat.x * len;\n    quat.y = quat.y * len;\n    quat.z = quat.z * len;\n    quat.w = quat.w * len;\n  }\n  return quat;\n}\nvec4 quaternionFromEuler (vec3 angle){\n  float x = angle.x / 2.;\n  float y = angle.y / 2.;\n  float z = angle.z / 2.;\n  float sx = sin(x);\n  float cx = cos(x);\n  float sy = sin(y);\n  float cy = cos(y);\n  float sz = sin(z);\n  float cz = cos(z);\n  vec4 quat = vec4(0);\n  quat.x = sx * cy * cz + cx * sy * sz;\n  quat.y = cx * sy * cz + sx * cy * sz;\n  quat.z = cx * cy * sz - sx * sy * cz;\n  quat.w = cx * cy * cz - sx * sy * sz;\n  return quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\n  float x2 = q.x + q.x;\n  float y2 = q.y + q.y;\n  float z2 = q.z + q.z;\n  float xx = q.x * x2;\n  float xy = q.x * y2;\n  float xz = q.x * z2;\n  float yy = q.y * y2;\n  float yz = q.y * z2;\n  float zz = q.z * z2;\n  float wx = q.w * x2;\n  float wy = q.w * y2;\n  float wz = q.w * z2;\n  return mat4(\n    1. - (yy + zz), xy + wz, xz - wy, 0,\n    xy - wz, 1. - (xx + zz), yz + wx, 0,\n    xz + wy, yz - wx, 1. - (xx + yy), 0,\n    p.x, p.y, p.z, 1\n  );\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  float x2 = x + x;\n  float y2 = y + y;\n  float z2 = z + z;\n  float xx = x * x2;\n  float xy = x * y2;\n  float xz = x * z2;\n  float yy = y * y2;\n  float yz = y * z2;\n  float zz = z * z2;\n  float wx = w * x2;\n  float wy = w * y2;\n  float wz = w * z2;\n  float sx = s.x;\n  float sy = s.y;\n  float sz = s.z;\n  return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n    (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n    (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n    t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\n  vec4 quat;\n  quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n  quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n  quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n  quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n  return quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\n  float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n  float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n  float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n  float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n  v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n  v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n  v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n  vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n  vec4 rotQuat = quatMultiply(viewQuat, q);\n  rotateVecFromQuat(pos, rotQuat);\n  return pos;\n}\nmat3 quatToMat3(vec4 q) {\n  vec3 m0 = vec3(\n    1.0 - 2.0 * q.y * q.y - 2.0 * q.z * q.z,\n    2.0 * q.x * q.y + 2.0 * q.w * q.z,\n    2.0 * q.x * q.z - 2.0 * q.w * q.y);\n\tvec3 m1 = vec3(\n    2.0 * q.x * q.y - 2.0 * q.w * q.z,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.z * q.z,\n    2.0 * q.y * q.z + 2.0 * q.w * q.x);\n\tvec3 m2 = vec3(\n    2.0 * q.x * q.z + 2.0 * q.w * q.y,\n    2.0 * q.y * q.z - 2.0 * q.w * q.x,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.y * q.y);\n  return mat3(m0, m1, m2);\n}\nvec4 mat3ToQuat(mat3 mat) {\n  float tr = mat[0][0] + mat[1][1] + mat[2][2];\n\tfloat qw, qx, qy, qz;\n  if (tr > 0.0) {\n    float S = sqrt(tr + 1.0) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = 0.25 * S;\n\t  qx = (mat[1][2] - mat[2][1]) * invS;\n\t  qy = (mat[2][0] - mat[0][2]) * invS;\n\t  qz = (mat[0][1] - mat[1][0]) * invS;\n  } else if ((mat[0][0] > mat[1][1])&&(mat[0][0] > mat[2][2])) {\n    float S = sqrt(1.0 + mat[0][0] - mat[1][1] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[1][2] - mat[2][1]) * invS;\n\t  qx = 0.25 * S;\n\t  qy = (mat[1][0] + mat[0][1]) * invS;\n\t  qz = (mat[2][0] + mat[0][2]) * invS;\n  } else if (mat[1][1] > mat[2][2]) {\n\t  float S = sqrt(1.0 + mat[1][1] - mat[0][0] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[2][0] - mat[0][2]) * invS;\n\t  qx = (mat[1][0] + mat[0][1]) * invS;\n\t  qy = 0.25 * S;\n\t  qz = (mat[2][1] + mat[1][2]) * invS;\n  } else {\n\t  float S = sqrt(1.0 + mat[2][2] - mat[0][0] - mat[1][1]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[0][1] - mat[1][0]) * invS;\n\t  qx = (mat[2][0] + mat[0][2]) * invS;\n\t  qy = (mat[2][1] + mat[1][2]) * invS;\n\t  qz = 0.25 * S;\n  }\n  return vec4(qx, qy, qz, qw);\n}\nlayout(std140) uniform Constants {\n  vec4 mainTiling_Offset;\n  vec4 frameTile_velLenScale;\n  vec4 scale;\n  vec4 nodeRotation;\n};\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(std140) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n};\nout mediump vec2 uv;\nout mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n  , mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n  vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n  vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = vec3(1, 0, 0);\n  vec3 camY = vec3(0, 0, -1);\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  rotateVecFromQuat(viewSpaceVert, q);\n  vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n  vec3 camY = vec3(0, 1, 0);\n  vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n  pos.xyz += offset;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\n  vertIndex.y = 1. - vertIndex.y;\n#endif\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nin vec3 a_position;\nin vec3 a_texCoord;\nin vec3 a_texCoord1;\nin vec3 a_texCoord2;\nin vec4 a_color;\n#if CC_RENDER_MODE == 1\n  in vec3 a_color1;\n#endif\n#if CC_RENDER_MODE == 4\n  in vec3 a_texCoord3;\n  in vec3 a_normal;\n  in vec4 a_color1;\n#endif\nvec4 lpvs_main () {\n  vec3 compScale = scale.xyz * a_texCoord1;\n  vec4 pos = vec4(a_position, 1);\n  #if CC_RENDER_MODE == 1\n    vec4 velocity = vec4(a_color1.xyz, 0);\n  #endif\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_RENDER_MODE == 1\n      velocity = cc_matWorld * velocity;\n    #endif\n  #endif\n  #if ROTATION_OVER_TIME_MODULE_ENABLE\n    vec3 rotTmp = a_texCoord2;\n    float mulFactor = 1.0;\n    if (rotTmp.x > 10.0 * 0.5) {\n        rotTmp.x -= 10.0;\n        mulFactor = -1.0;\n    }\n    vec4 rot = vec4(rotTmp, 0.0);\n    rot.w = mulFactor * sqrt(abs(1.0 - rot.x * rot.x - rot.y * rot.y - rot.z * rot.z));\n  #else\n    #if CC_RENDER_MODE != 4\n      #if CC_RENDER_MODE == 0\n        vec3 rotEuler = a_texCoord2;\n      #elif CC_RENDER_MODE == 1\n        vec3 rotEuler = vec3(0.);\n      #else\n        vec3 rotEuler = vec3(0., 0., a_texCoord2.z);\n      #endif\n      vec4 rot = quaternionFromEuler(rotEuler);\n    #else\n      vec4 rot = quaternionFromEuler(a_texCoord2);\n    #endif\n  #endif\n  #if CC_RENDER_MODE != 4\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n    #if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_matViewInv);\n    #elif CC_RENDER_MODE == 1\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_cameraPos.xyz, velocity, frameTile_velLenScale.z, frameTile_velLenScale.w, a_texCoord.x);\n    #elif 2\n      computeVertPos(pos, cornerOffset, rot, compScale);\n    #endif\n    color = a_color;\n  #else\n    mat3 rotMat = quatToMat3(rot);\n    mat3 nodeMat = quatToMat3(nodeRotation);\n    rotMat = nodeMat * rotMat;\n    rot = mat3ToQuat(rotMat);\n    mat4 xformNoScale = matrixFromRT(rot, pos.xyz);\n    mat4 xform = matFromRTS(rot, pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n  #endif\n  uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  pos = cc_matViewProj * pos;\n  return pos;\n}\nvoid main() { gl_Position = lpvs_main(); }","frag":"\nprecision mediump float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nin vec2 uv;\nin vec4 color;\nuniform sampler2D mainTexture;\nvec4 addSmooth () {\n  vec4 col = color * texture(mainTexture, uv);\n  col.rgb *= col.a;\n  return CCFragOutput(col);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = addSmooth(); }"},"glsl1":{"vert":"\nprecision highp float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\n  mat3 m = mat3(xAxis,yAxis,zAxis);\n  float trace = m[0][0] + m[1][1] + m[2][2];\n  vec4 quat;\n  if (trace > 0.) {\n    float s = 0.5 / sqrt(trace + 1.0);\n    quat.w = 0.25 / s;\n    quat.x = (m[2][1] - m[1][2]) * s;\n    quat.y = (m[0][2] - m[2][0]) * s;\n    quat.z = (m[1][0] - m[0][1]) * s;\n  } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n    float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n    quat.w = (m[2][1] - m[1][2]) / s;\n    quat.x = 0.25 * s;\n    quat.y = (m[0][1] + m[1][0]) / s;\n    quat.z = (m[0][2] + m[2][0]) / s;\n  } else if (m[1][1] > m[2][2]) {\n    float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n    quat.w = (m[0][2] - m[2][0]) / s;\n    quat.x = (m[0][1] + m[1][0]) / s;\n    quat.y = 0.25 * s;\n    quat.z = (m[1][2] + m[2][1]) / s;\n  } else {\n    float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n    quat.w = (m[1][0] - m[0][1]) / s;\n    quat.x = (m[0][2] + m[2][0]) / s;\n    quat.y = (m[1][2] + m[2][1]) / s;\n    quat.z = 0.25 * s;\n  }\n  float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n  if (len > 0.) {\n    len = 1. / sqrt(len);\n    quat.x = quat.x * len;\n    quat.y = quat.y * len;\n    quat.z = quat.z * len;\n    quat.w = quat.w * len;\n  }\n  return quat;\n}\nvec4 quaternionFromEuler (vec3 angle){\n  float x = angle.x / 2.;\n  float y = angle.y / 2.;\n  float z = angle.z / 2.;\n  float sx = sin(x);\n  float cx = cos(x);\n  float sy = sin(y);\n  float cy = cos(y);\n  float sz = sin(z);\n  float cz = cos(z);\n  vec4 quat = vec4(0);\n  quat.x = sx * cy * cz + cx * sy * sz;\n  quat.y = cx * sy * cz + sx * cy * sz;\n  quat.z = cx * cy * sz - sx * sy * cz;\n  quat.w = cx * cy * cz - sx * sy * sz;\n  return quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\n  float x2 = q.x + q.x;\n  float y2 = q.y + q.y;\n  float z2 = q.z + q.z;\n  float xx = q.x * x2;\n  float xy = q.x * y2;\n  float xz = q.x * z2;\n  float yy = q.y * y2;\n  float yz = q.y * z2;\n  float zz = q.z * z2;\n  float wx = q.w * x2;\n  float wy = q.w * y2;\n  float wz = q.w * z2;\n  return mat4(\n    1. - (yy + zz), xy + wz, xz - wy, 0,\n    xy - wz, 1. - (xx + zz), yz + wx, 0,\n    xz + wy, yz - wx, 1. - (xx + yy), 0,\n    p.x, p.y, p.z, 1\n  );\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  float x2 = x + x;\n  float y2 = y + y;\n  float z2 = z + z;\n  float xx = x * x2;\n  float xy = x * y2;\n  float xz = x * z2;\n  float yy = y * y2;\n  float yz = y * z2;\n  float zz = z * z2;\n  float wx = w * x2;\n  float wy = w * y2;\n  float wz = w * z2;\n  float sx = s.x;\n  float sy = s.y;\n  float sz = s.z;\n  return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n    (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n    (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n    t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\n  vec4 quat;\n  quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n  quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n  quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n  quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n  return quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\n  float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n  float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n  float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n  float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n  v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n  v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n  v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n  vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n  vec4 rotQuat = quatMultiply(viewQuat, q);\n  rotateVecFromQuat(pos, rotQuat);\n  return pos;\n}\nmat3 quatToMat3(vec4 q) {\n  vec3 m0 = vec3(\n    1.0 - 2.0 * q.y * q.y - 2.0 * q.z * q.z,\n    2.0 * q.x * q.y + 2.0 * q.w * q.z,\n    2.0 * q.x * q.z - 2.0 * q.w * q.y);\n\tvec3 m1 = vec3(\n    2.0 * q.x * q.y - 2.0 * q.w * q.z,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.z * q.z,\n    2.0 * q.y * q.z + 2.0 * q.w * q.x);\n\tvec3 m2 = vec3(\n    2.0 * q.x * q.z + 2.0 * q.w * q.y,\n    2.0 * q.y * q.z - 2.0 * q.w * q.x,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.y * q.y);\n  return mat3(m0, m1, m2);\n}\nvec4 mat3ToQuat(mat3 mat) {\n  float tr = mat[0][0] + mat[1][1] + mat[2][2];\n\tfloat qw, qx, qy, qz;\n  if (tr > 0.0) {\n    float S = sqrt(tr + 1.0) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = 0.25 * S;\n\t  qx = (mat[1][2] - mat[2][1]) * invS;\n\t  qy = (mat[2][0] - mat[0][2]) * invS;\n\t  qz = (mat[0][1] - mat[1][0]) * invS;\n  } else if ((mat[0][0] > mat[1][1])&&(mat[0][0] > mat[2][2])) {\n    float S = sqrt(1.0 + mat[0][0] - mat[1][1] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[1][2] - mat[2][1]) * invS;\n\t  qx = 0.25 * S;\n\t  qy = (mat[1][0] + mat[0][1]) * invS;\n\t  qz = (mat[2][0] + mat[0][2]) * invS;\n  } else if (mat[1][1] > mat[2][2]) {\n\t  float S = sqrt(1.0 + mat[1][1] - mat[0][0] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[2][0] - mat[0][2]) * invS;\n\t  qx = (mat[1][0] + mat[0][1]) * invS;\n\t  qy = 0.25 * S;\n\t  qz = (mat[2][1] + mat[1][2]) * invS;\n  } else {\n\t  float S = sqrt(1.0 + mat[2][2] - mat[0][0] - mat[1][1]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[0][1] - mat[1][0]) * invS;\n\t  qx = (mat[2][0] + mat[0][2]) * invS;\n\t  qy = (mat[2][1] + mat[1][2]) * invS;\n\t  qz = 0.25 * S;\n  }\n  return vec4(qx, qy, qz, qw);\n}\n   uniform vec4 mainTiling_Offset;\n   uniform vec4 frameTile_velLenScale;\n   uniform vec4 scale;\n   uniform vec4 nodeRotation;\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matViewInv;\n  uniform highp mat4 cc_matViewProj;\n  uniform highp vec4 cc_cameraPos;\nuniform highp mat4 cc_matWorld;\nvarying mediump vec2 uv;\nvarying mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n  , mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n  vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n  vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = vec3(1, 0, 0);\n  vec3 camY = vec3(0, 0, -1);\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  rotateVecFromQuat(viewSpaceVert, q);\n  vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n  vec3 camY = vec3(0, 1, 0);\n  vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n  pos.xyz += offset;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\n  vertIndex.y = 1. - vertIndex.y;\n#endif\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nattribute vec3 a_position;\nattribute vec3 a_texCoord;\nattribute vec3 a_texCoord1;\nattribute vec3 a_texCoord2;\nattribute vec4 a_color;\n#if CC_RENDER_MODE == 1\n  attribute vec3 a_color1;\n#endif\n#if CC_RENDER_MODE == 4\n  attribute vec3 a_texCoord3;\n  attribute vec3 a_normal;\n  attribute vec4 a_color1;\n#endif\nvec4 lpvs_main () {\n  vec3 compScale = scale.xyz * a_texCoord1;\n  vec4 pos = vec4(a_position, 1);\n  #if CC_RENDER_MODE == 1\n    vec4 velocity = vec4(a_color1.xyz, 0);\n  #endif\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_RENDER_MODE == 1\n      velocity = cc_matWorld * velocity;\n    #endif\n  #endif\n  #if ROTATION_OVER_TIME_MODULE_ENABLE\n    vec3 rotTmp = a_texCoord2;\n    float mulFactor = 1.0;\n    if (rotTmp.x > 10.0 * 0.5) {\n        rotTmp.x -= 10.0;\n        mulFactor = -1.0;\n    }\n    vec4 rot = vec4(rotTmp, 0.0);\n    rot.w = mulFactor * sqrt(abs(1.0 - rot.x * rot.x - rot.y * rot.y - rot.z * rot.z));\n  #else\n    #if CC_RENDER_MODE != 4\n      #if CC_RENDER_MODE == 0\n        vec3 rotEuler = a_texCoord2;\n      #elif CC_RENDER_MODE == 1\n        vec3 rotEuler = vec3(0.);\n      #else\n        vec3 rotEuler = vec3(0., 0., a_texCoord2.z);\n      #endif\n      vec4 rot = quaternionFromEuler(rotEuler);\n    #else\n      vec4 rot = quaternionFromEuler(a_texCoord2);\n    #endif\n  #endif\n  #if CC_RENDER_MODE != 4\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n    #if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_matViewInv);\n    #elif CC_RENDER_MODE == 1\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_cameraPos.xyz, velocity, frameTile_velLenScale.z, frameTile_velLenScale.w, a_texCoord.x);\n    #elif 2\n      computeVertPos(pos, cornerOffset, rot, compScale);\n    #endif\n    color = a_color;\n  #else\n    mat3 rotMat = quatToMat3(rot);\n    mat3 nodeMat = quatToMat3(nodeRotation);\n    rotMat = nodeMat * rotMat;\n    rot = mat3ToQuat(rotMat);\n    mat4 xformNoScale = matrixFromRT(rot, pos.xyz);\n    mat4 xform = matFromRTS(rot, pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n  #endif\n  uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  pos = cc_matViewProj * pos;\n  return pos;\n}\nvoid main() { gl_Position = lpvs_main(); }","frag":"\nprecision mediump float;\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nvarying vec2 uv;\nvarying vec4 color;\nuniform sampler2D mainTexture;\nvec4 addSmooth () {\n  vec4 col = color * texture2D(mainTexture, uv);\n  col.rgb *= col.a;\n  return CCFragOutput(col);\n}\nvoid main() { gl_FragColor = addSmooth(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":52,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":39}},"defines":[{"name":"CC_RENDER_MODE","type":"number","defines":[],"range":[0,4]},{"name":"CC_USE_WORLD_SPACE","type":"boolean","defines":[]},{"name":"ROTATION_OVER_TIME_MODULE_ENABLE","type":"boolean","defines":[]}]},{"hash":3775475229,"name":"builtin-particle|particle-vs-legacy:lpvs_main|no-tint-fs:premultiplied","blocks":[{"name":"Constants","stageFlags":1,"binding":0,"members":[{"name":"mainTiling_Offset","type":16,"count":1},{"name":"frameTile_velLenScale","type":16,"count":1},{"name":"scale","type":16,"count":1},{"name":"nodeRotation","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"mainTexture","type":28,"count":1,"stageFlags":16,"binding":1,"defines":[]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_texCoord","format":32,"location":1,"defines":[]},{"name":"a_texCoord1","format":32,"location":2,"defines":[]},{"name":"a_texCoord2","format":32,"location":3,"defines":[]},{"name":"a_color","format":44,"location":4,"defines":[]},{"name":"a_color1","format":32,"location":8,"defines":["CC_RENDER_MODE"]},{"name":"a_texCoord3","format":32,"location":6,"defines":["CC_RENDER_MODE"]},{"name":"a_normal","format":32,"location":7,"defines":["CC_RENDER_MODE"]}],"varyings":[{"name":"uv","type":14,"count":1,"stageFlags":17,"location":0,"defines":[]},{"name":"color","type":16,"count":1,"stageFlags":17,"location":1,"defines":[]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"glsl4":{"vert":"\nprecision highp float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\n  mat3 m = mat3(xAxis,yAxis,zAxis);\n  float trace = m[0][0] + m[1][1] + m[2][2];\n  vec4 quat;\n  if (trace > 0.) {\n    float s = 0.5 / sqrt(trace + 1.0);\n    quat.w = 0.25 / s;\n    quat.x = (m[2][1] - m[1][2]) * s;\n    quat.y = (m[0][2] - m[2][0]) * s;\n    quat.z = (m[1][0] - m[0][1]) * s;\n  } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n    float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n    quat.w = (m[2][1] - m[1][2]) / s;\n    quat.x = 0.25 * s;\n    quat.y = (m[0][1] + m[1][0]) / s;\n    quat.z = (m[0][2] + m[2][0]) / s;\n  } else if (m[1][1] > m[2][2]) {\n    float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n    quat.w = (m[0][2] - m[2][0]) / s;\n    quat.x = (m[0][1] + m[1][0]) / s;\n    quat.y = 0.25 * s;\n    quat.z = (m[1][2] + m[2][1]) / s;\n  } else {\n    float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n    quat.w = (m[1][0] - m[0][1]) / s;\n    quat.x = (m[0][2] + m[2][0]) / s;\n    quat.y = (m[1][2] + m[2][1]) / s;\n    quat.z = 0.25 * s;\n  }\n  float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n  if (len > 0.) {\n    len = 1. / sqrt(len);\n    quat.x = quat.x * len;\n    quat.y = quat.y * len;\n    quat.z = quat.z * len;\n    quat.w = quat.w * len;\n  }\n  return quat;\n}\nvec4 quaternionFromEuler (vec3 angle){\n  float x = angle.x / 2.;\n  float y = angle.y / 2.;\n  float z = angle.z / 2.;\n  float sx = sin(x);\n  float cx = cos(x);\n  float sy = sin(y);\n  float cy = cos(y);\n  float sz = sin(z);\n  float cz = cos(z);\n  vec4 quat = vec4(0);\n  quat.x = sx * cy * cz + cx * sy * sz;\n  quat.y = cx * sy * cz + sx * cy * sz;\n  quat.z = cx * cy * sz - sx * sy * cz;\n  quat.w = cx * cy * cz - sx * sy * sz;\n  return quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\n  float x2 = q.x + q.x;\n  float y2 = q.y + q.y;\n  float z2 = q.z + q.z;\n  float xx = q.x * x2;\n  float xy = q.x * y2;\n  float xz = q.x * z2;\n  float yy = q.y * y2;\n  float yz = q.y * z2;\n  float zz = q.z * z2;\n  float wx = q.w * x2;\n  float wy = q.w * y2;\n  float wz = q.w * z2;\n  return mat4(\n    1. - (yy + zz), xy + wz, xz - wy, 0,\n    xy - wz, 1. - (xx + zz), yz + wx, 0,\n    xz + wy, yz - wx, 1. - (xx + yy), 0,\n    p.x, p.y, p.z, 1\n  );\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  float x2 = x + x;\n  float y2 = y + y;\n  float z2 = z + z;\n  float xx = x * x2;\n  float xy = x * y2;\n  float xz = x * z2;\n  float yy = y * y2;\n  float yz = y * z2;\n  float zz = z * z2;\n  float wx = w * x2;\n  float wy = w * y2;\n  float wz = w * z2;\n  float sx = s.x;\n  float sy = s.y;\n  float sz = s.z;\n  return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n    (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n    (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n    t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\n  vec4 quat;\n  quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n  quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n  quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n  quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n  return quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\n  float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n  float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n  float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n  float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n  v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n  v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n  v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n  vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n  vec4 rotQuat = quatMultiply(viewQuat, q);\n  rotateVecFromQuat(pos, rotQuat);\n  return pos;\n}\nmat3 quatToMat3(vec4 q) {\n  vec3 m0 = vec3(\n    1.0 - 2.0 * q.y * q.y - 2.0 * q.z * q.z,\n    2.0 * q.x * q.y + 2.0 * q.w * q.z,\n    2.0 * q.x * q.z - 2.0 * q.w * q.y);\n\tvec3 m1 = vec3(\n    2.0 * q.x * q.y - 2.0 * q.w * q.z,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.z * q.z,\n    2.0 * q.y * q.z + 2.0 * q.w * q.x);\n\tvec3 m2 = vec3(\n    2.0 * q.x * q.z + 2.0 * q.w * q.y,\n    2.0 * q.y * q.z - 2.0 * q.w * q.x,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.y * q.y);\n  return mat3(m0, m1, m2);\n}\nvec4 mat3ToQuat(mat3 mat) {\n  float tr = mat[0][0] + mat[1][1] + mat[2][2];\n\tfloat qw, qx, qy, qz;\n  if (tr > 0.0) {\n    float S = sqrt(tr + 1.0) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = 0.25 * S;\n\t  qx = (mat[1][2] - mat[2][1]) * invS;\n\t  qy = (mat[2][0] - mat[0][2]) * invS;\n\t  qz = (mat[0][1] - mat[1][0]) * invS;\n  } else if ((mat[0][0] > mat[1][1])&&(mat[0][0] > mat[2][2])) {\n    float S = sqrt(1.0 + mat[0][0] - mat[1][1] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[1][2] - mat[2][1]) * invS;\n\t  qx = 0.25 * S;\n\t  qy = (mat[1][0] + mat[0][1]) * invS;\n\t  qz = (mat[2][0] + mat[0][2]) * invS;\n  } else if (mat[1][1] > mat[2][2]) {\n\t  float S = sqrt(1.0 + mat[1][1] - mat[0][0] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[2][0] - mat[0][2]) * invS;\n\t  qx = (mat[1][0] + mat[0][1]) * invS;\n\t  qy = 0.25 * S;\n\t  qz = (mat[2][1] + mat[1][2]) * invS;\n  } else {\n\t  float S = sqrt(1.0 + mat[2][2] - mat[0][0] - mat[1][1]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[0][1] - mat[1][0]) * invS;\n\t  qx = (mat[2][0] + mat[0][2]) * invS;\n\t  qy = (mat[2][1] + mat[1][2]) * invS;\n\t  qz = 0.25 * S;\n  }\n  return vec4(qx, qy, qz, qw);\n}\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 mainTiling_Offset;\n  vec4 frameTile_velLenScale;\n  vec4 scale;\n  vec4 nodeRotation;\n};\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(set = 2, binding = 0) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n};\nlayout(location = 0) out mediump vec2 uv;\nlayout(location = 1) out mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n  , mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n  vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n  vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = vec3(1, 0, 0);\n  vec3 camY = vec3(0, 0, -1);\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  rotateVecFromQuat(viewSpaceVert, q);\n  vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n  vec3 camY = vec3(0, 1, 0);\n  vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n  pos.xyz += offset;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\n  vertIndex.y = 1. - vertIndex.y;\n#endif\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec3 a_texCoord;\nlayout(location = 2) in vec3 a_texCoord1;\nlayout(location = 3) in vec3 a_texCoord2;\nlayout(location = 4) in vec4 a_color;\n#if CC_RENDER_MODE == 1\n  layout(location = 8) in vec3 a_color1;\n#endif\n#if CC_RENDER_MODE == 4\n  layout(location = 6) in vec3 a_texCoord3;\n  layout(location = 7) in vec3 a_normal;\n  layout(location = 8) in vec4 a_color1;\n#endif\nvec4 lpvs_main () {\n  vec3 compScale = scale.xyz * a_texCoord1;\n  vec4 pos = vec4(a_position, 1);\n  #if CC_RENDER_MODE == 1\n    vec4 velocity = vec4(a_color1.xyz, 0);\n  #endif\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_RENDER_MODE == 1\n      velocity = cc_matWorld * velocity;\n    #endif\n  #endif\n  #if ROTATION_OVER_TIME_MODULE_ENABLE\n    vec3 rotTmp = a_texCoord2;\n    float mulFactor = 1.0;\n    if (rotTmp.x > 10.0 * 0.5) {\n        rotTmp.x -= 10.0;\n        mulFactor = -1.0;\n    }\n    vec4 rot = vec4(rotTmp, 0.0);\n    rot.w = mulFactor * sqrt(abs(1.0 - rot.x * rot.x - rot.y * rot.y - rot.z * rot.z));\n  #else\n    #if CC_RENDER_MODE != 4\n      #if CC_RENDER_MODE == 0\n        vec3 rotEuler = a_texCoord2;\n      #elif CC_RENDER_MODE == 1\n        vec3 rotEuler = vec3(0.);\n      #else\n        vec3 rotEuler = vec3(0., 0., a_texCoord2.z);\n      #endif\n      vec4 rot = quaternionFromEuler(rotEuler);\n    #else\n      vec4 rot = quaternionFromEuler(a_texCoord2);\n    #endif\n  #endif\n  #if CC_RENDER_MODE != 4\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n    #if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_matViewInv);\n    #elif CC_RENDER_MODE == 1\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_cameraPos.xyz, velocity, frameTile_velLenScale.z, frameTile_velLenScale.w, a_texCoord.x);\n    #elif 2\n      computeVertPos(pos, cornerOffset, rot, compScale);\n    #endif\n    color = a_color;\n  #else\n    mat3 rotMat = quatToMat3(rot);\n    mat3 nodeMat = quatToMat3(nodeRotation);\n    rotMat = nodeMat * rotMat;\n    rot = mat3ToQuat(rotMat);\n    mat4 xformNoScale = matrixFromRT(rot, pos.xyz);\n    mat4 xform = matFromRTS(rot, pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n  #endif\n  uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  pos = cc_matViewProj * pos;\n  return pos;\n}\nvoid main() { gl_Position = lpvs_main(); }","frag":"\nprecision mediump float;\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nlayout(location = 0) in vec2 uv;\nlayout(location = 1) in vec4 color;\nlayout(set = 1, binding = 1) uniform sampler2D mainTexture;\nvec4 premultiplied () {\n  vec4 col = color * texture(mainTexture, uv) * color.a;\n  return CCFragOutput(col);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = premultiplied(); }"},"glsl3":{"vert":"\nprecision highp float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\n  mat3 m = mat3(xAxis,yAxis,zAxis);\n  float trace = m[0][0] + m[1][1] + m[2][2];\n  vec4 quat;\n  if (trace > 0.) {\n    float s = 0.5 / sqrt(trace + 1.0);\n    quat.w = 0.25 / s;\n    quat.x = (m[2][1] - m[1][2]) * s;\n    quat.y = (m[0][2] - m[2][0]) * s;\n    quat.z = (m[1][0] - m[0][1]) * s;\n  } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n    float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n    quat.w = (m[2][1] - m[1][2]) / s;\n    quat.x = 0.25 * s;\n    quat.y = (m[0][1] + m[1][0]) / s;\n    quat.z = (m[0][2] + m[2][0]) / s;\n  } else if (m[1][1] > m[2][2]) {\n    float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n    quat.w = (m[0][2] - m[2][0]) / s;\n    quat.x = (m[0][1] + m[1][0]) / s;\n    quat.y = 0.25 * s;\n    quat.z = (m[1][2] + m[2][1]) / s;\n  } else {\n    float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n    quat.w = (m[1][0] - m[0][1]) / s;\n    quat.x = (m[0][2] + m[2][0]) / s;\n    quat.y = (m[1][2] + m[2][1]) / s;\n    quat.z = 0.25 * s;\n  }\n  float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n  if (len > 0.) {\n    len = 1. / sqrt(len);\n    quat.x = quat.x * len;\n    quat.y = quat.y * len;\n    quat.z = quat.z * len;\n    quat.w = quat.w * len;\n  }\n  return quat;\n}\nvec4 quaternionFromEuler (vec3 angle){\n  float x = angle.x / 2.;\n  float y = angle.y / 2.;\n  float z = angle.z / 2.;\n  float sx = sin(x);\n  float cx = cos(x);\n  float sy = sin(y);\n  float cy = cos(y);\n  float sz = sin(z);\n  float cz = cos(z);\n  vec4 quat = vec4(0);\n  quat.x = sx * cy * cz + cx * sy * sz;\n  quat.y = cx * sy * cz + sx * cy * sz;\n  quat.z = cx * cy * sz - sx * sy * cz;\n  quat.w = cx * cy * cz - sx * sy * sz;\n  return quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\n  float x2 = q.x + q.x;\n  float y2 = q.y + q.y;\n  float z2 = q.z + q.z;\n  float xx = q.x * x2;\n  float xy = q.x * y2;\n  float xz = q.x * z2;\n  float yy = q.y * y2;\n  float yz = q.y * z2;\n  float zz = q.z * z2;\n  float wx = q.w * x2;\n  float wy = q.w * y2;\n  float wz = q.w * z2;\n  return mat4(\n    1. - (yy + zz), xy + wz, xz - wy, 0,\n    xy - wz, 1. - (xx + zz), yz + wx, 0,\n    xz + wy, yz - wx, 1. - (xx + yy), 0,\n    p.x, p.y, p.z, 1\n  );\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  float x2 = x + x;\n  float y2 = y + y;\n  float z2 = z + z;\n  float xx = x * x2;\n  float xy = x * y2;\n  float xz = x * z2;\n  float yy = y * y2;\n  float yz = y * z2;\n  float zz = z * z2;\n  float wx = w * x2;\n  float wy = w * y2;\n  float wz = w * z2;\n  float sx = s.x;\n  float sy = s.y;\n  float sz = s.z;\n  return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n    (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n    (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n    t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\n  vec4 quat;\n  quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n  quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n  quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n  quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n  return quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\n  float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n  float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n  float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n  float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n  v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n  v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n  v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n  vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n  vec4 rotQuat = quatMultiply(viewQuat, q);\n  rotateVecFromQuat(pos, rotQuat);\n  return pos;\n}\nmat3 quatToMat3(vec4 q) {\n  vec3 m0 = vec3(\n    1.0 - 2.0 * q.y * q.y - 2.0 * q.z * q.z,\n    2.0 * q.x * q.y + 2.0 * q.w * q.z,\n    2.0 * q.x * q.z - 2.0 * q.w * q.y);\n\tvec3 m1 = vec3(\n    2.0 * q.x * q.y - 2.0 * q.w * q.z,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.z * q.z,\n    2.0 * q.y * q.z + 2.0 * q.w * q.x);\n\tvec3 m2 = vec3(\n    2.0 * q.x * q.z + 2.0 * q.w * q.y,\n    2.0 * q.y * q.z - 2.0 * q.w * q.x,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.y * q.y);\n  return mat3(m0, m1, m2);\n}\nvec4 mat3ToQuat(mat3 mat) {\n  float tr = mat[0][0] + mat[1][1] + mat[2][2];\n\tfloat qw, qx, qy, qz;\n  if (tr > 0.0) {\n    float S = sqrt(tr + 1.0) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = 0.25 * S;\n\t  qx = (mat[1][2] - mat[2][1]) * invS;\n\t  qy = (mat[2][0] - mat[0][2]) * invS;\n\t  qz = (mat[0][1] - mat[1][0]) * invS;\n  } else if ((mat[0][0] > mat[1][1])&&(mat[0][0] > mat[2][2])) {\n    float S = sqrt(1.0 + mat[0][0] - mat[1][1] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[1][2] - mat[2][1]) * invS;\n\t  qx = 0.25 * S;\n\t  qy = (mat[1][0] + mat[0][1]) * invS;\n\t  qz = (mat[2][0] + mat[0][2]) * invS;\n  } else if (mat[1][1] > mat[2][2]) {\n\t  float S = sqrt(1.0 + mat[1][1] - mat[0][0] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[2][0] - mat[0][2]) * invS;\n\t  qx = (mat[1][0] + mat[0][1]) * invS;\n\t  qy = 0.25 * S;\n\t  qz = (mat[2][1] + mat[1][2]) * invS;\n  } else {\n\t  float S = sqrt(1.0 + mat[2][2] - mat[0][0] - mat[1][1]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[0][1] - mat[1][0]) * invS;\n\t  qx = (mat[2][0] + mat[0][2]) * invS;\n\t  qy = (mat[2][1] + mat[1][2]) * invS;\n\t  qz = 0.25 * S;\n  }\n  return vec4(qx, qy, qz, qw);\n}\nlayout(std140) uniform Constants {\n  vec4 mainTiling_Offset;\n  vec4 frameTile_velLenScale;\n  vec4 scale;\n  vec4 nodeRotation;\n};\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(std140) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n};\nout mediump vec2 uv;\nout mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n  , mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n  vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n  vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = vec3(1, 0, 0);\n  vec3 camY = vec3(0, 0, -1);\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  rotateVecFromQuat(viewSpaceVert, q);\n  vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n  vec3 camY = vec3(0, 1, 0);\n  vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n  pos.xyz += offset;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\n  vertIndex.y = 1. - vertIndex.y;\n#endif\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nin vec3 a_position;\nin vec3 a_texCoord;\nin vec3 a_texCoord1;\nin vec3 a_texCoord2;\nin vec4 a_color;\n#if CC_RENDER_MODE == 1\n  in vec3 a_color1;\n#endif\n#if CC_RENDER_MODE == 4\n  in vec3 a_texCoord3;\n  in vec3 a_normal;\n  in vec4 a_color1;\n#endif\nvec4 lpvs_main () {\n  vec3 compScale = scale.xyz * a_texCoord1;\n  vec4 pos = vec4(a_position, 1);\n  #if CC_RENDER_MODE == 1\n    vec4 velocity = vec4(a_color1.xyz, 0);\n  #endif\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_RENDER_MODE == 1\n      velocity = cc_matWorld * velocity;\n    #endif\n  #endif\n  #if ROTATION_OVER_TIME_MODULE_ENABLE\n    vec3 rotTmp = a_texCoord2;\n    float mulFactor = 1.0;\n    if (rotTmp.x > 10.0 * 0.5) {\n        rotTmp.x -= 10.0;\n        mulFactor = -1.0;\n    }\n    vec4 rot = vec4(rotTmp, 0.0);\n    rot.w = mulFactor * sqrt(abs(1.0 - rot.x * rot.x - rot.y * rot.y - rot.z * rot.z));\n  #else\n    #if CC_RENDER_MODE != 4\n      #if CC_RENDER_MODE == 0\n        vec3 rotEuler = a_texCoord2;\n      #elif CC_RENDER_MODE == 1\n        vec3 rotEuler = vec3(0.);\n      #else\n        vec3 rotEuler = vec3(0., 0., a_texCoord2.z);\n      #endif\n      vec4 rot = quaternionFromEuler(rotEuler);\n    #else\n      vec4 rot = quaternionFromEuler(a_texCoord2);\n    #endif\n  #endif\n  #if CC_RENDER_MODE != 4\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n    #if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_matViewInv);\n    #elif CC_RENDER_MODE == 1\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_cameraPos.xyz, velocity, frameTile_velLenScale.z, frameTile_velLenScale.w, a_texCoord.x);\n    #elif 2\n      computeVertPos(pos, cornerOffset, rot, compScale);\n    #endif\n    color = a_color;\n  #else\n    mat3 rotMat = quatToMat3(rot);\n    mat3 nodeMat = quatToMat3(nodeRotation);\n    rotMat = nodeMat * rotMat;\n    rot = mat3ToQuat(rotMat);\n    mat4 xformNoScale = matrixFromRT(rot, pos.xyz);\n    mat4 xform = matFromRTS(rot, pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n  #endif\n  uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  pos = cc_matViewProj * pos;\n  return pos;\n}\nvoid main() { gl_Position = lpvs_main(); }","frag":"\nprecision mediump float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nin vec2 uv;\nin vec4 color;\nuniform sampler2D mainTexture;\nvec4 premultiplied () {\n  vec4 col = color * texture(mainTexture, uv) * color.a;\n  return CCFragOutput(col);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = premultiplied(); }"},"glsl1":{"vert":"\nprecision highp float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\n  mat3 m = mat3(xAxis,yAxis,zAxis);\n  float trace = m[0][0] + m[1][1] + m[2][2];\n  vec4 quat;\n  if (trace > 0.) {\n    float s = 0.5 / sqrt(trace + 1.0);\n    quat.w = 0.25 / s;\n    quat.x = (m[2][1] - m[1][2]) * s;\n    quat.y = (m[0][2] - m[2][0]) * s;\n    quat.z = (m[1][0] - m[0][1]) * s;\n  } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n    float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n    quat.w = (m[2][1] - m[1][2]) / s;\n    quat.x = 0.25 * s;\n    quat.y = (m[0][1] + m[1][0]) / s;\n    quat.z = (m[0][2] + m[2][0]) / s;\n  } else if (m[1][1] > m[2][2]) {\n    float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n    quat.w = (m[0][2] - m[2][0]) / s;\n    quat.x = (m[0][1] + m[1][0]) / s;\n    quat.y = 0.25 * s;\n    quat.z = (m[1][2] + m[2][1]) / s;\n  } else {\n    float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n    quat.w = (m[1][0] - m[0][1]) / s;\n    quat.x = (m[0][2] + m[2][0]) / s;\n    quat.y = (m[1][2] + m[2][1]) / s;\n    quat.z = 0.25 * s;\n  }\n  float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n  if (len > 0.) {\n    len = 1. / sqrt(len);\n    quat.x = quat.x * len;\n    quat.y = quat.y * len;\n    quat.z = quat.z * len;\n    quat.w = quat.w * len;\n  }\n  return quat;\n}\nvec4 quaternionFromEuler (vec3 angle){\n  float x = angle.x / 2.;\n  float y = angle.y / 2.;\n  float z = angle.z / 2.;\n  float sx = sin(x);\n  float cx = cos(x);\n  float sy = sin(y);\n  float cy = cos(y);\n  float sz = sin(z);\n  float cz = cos(z);\n  vec4 quat = vec4(0);\n  quat.x = sx * cy * cz + cx * sy * sz;\n  quat.y = cx * sy * cz + sx * cy * sz;\n  quat.z = cx * cy * sz - sx * sy * cz;\n  quat.w = cx * cy * cz - sx * sy * sz;\n  return quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\n  float x2 = q.x + q.x;\n  float y2 = q.y + q.y;\n  float z2 = q.z + q.z;\n  float xx = q.x * x2;\n  float xy = q.x * y2;\n  float xz = q.x * z2;\n  float yy = q.y * y2;\n  float yz = q.y * z2;\n  float zz = q.z * z2;\n  float wx = q.w * x2;\n  float wy = q.w * y2;\n  float wz = q.w * z2;\n  return mat4(\n    1. - (yy + zz), xy + wz, xz - wy, 0,\n    xy - wz, 1. - (xx + zz), yz + wx, 0,\n    xz + wy, yz - wx, 1. - (xx + yy), 0,\n    p.x, p.y, p.z, 1\n  );\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  float x2 = x + x;\n  float y2 = y + y;\n  float z2 = z + z;\n  float xx = x * x2;\n  float xy = x * y2;\n  float xz = x * z2;\n  float yy = y * y2;\n  float yz = y * z2;\n  float zz = z * z2;\n  float wx = w * x2;\n  float wy = w * y2;\n  float wz = w * z2;\n  float sx = s.x;\n  float sy = s.y;\n  float sz = s.z;\n  return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n    (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n    (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n    t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\n  vec4 quat;\n  quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n  quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n  quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n  quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n  return quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\n  float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n  float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n  float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n  float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n  v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n  v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n  v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n  vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n  vec4 rotQuat = quatMultiply(viewQuat, q);\n  rotateVecFromQuat(pos, rotQuat);\n  return pos;\n}\nmat3 quatToMat3(vec4 q) {\n  vec3 m0 = vec3(\n    1.0 - 2.0 * q.y * q.y - 2.0 * q.z * q.z,\n    2.0 * q.x * q.y + 2.0 * q.w * q.z,\n    2.0 * q.x * q.z - 2.0 * q.w * q.y);\n\tvec3 m1 = vec3(\n    2.0 * q.x * q.y - 2.0 * q.w * q.z,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.z * q.z,\n    2.0 * q.y * q.z + 2.0 * q.w * q.x);\n\tvec3 m2 = vec3(\n    2.0 * q.x * q.z + 2.0 * q.w * q.y,\n    2.0 * q.y * q.z - 2.0 * q.w * q.x,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.y * q.y);\n  return mat3(m0, m1, m2);\n}\nvec4 mat3ToQuat(mat3 mat) {\n  float tr = mat[0][0] + mat[1][1] + mat[2][2];\n\tfloat qw, qx, qy, qz;\n  if (tr > 0.0) {\n    float S = sqrt(tr + 1.0) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = 0.25 * S;\n\t  qx = (mat[1][2] - mat[2][1]) * invS;\n\t  qy = (mat[2][0] - mat[0][2]) * invS;\n\t  qz = (mat[0][1] - mat[1][0]) * invS;\n  } else if ((mat[0][0] > mat[1][1])&&(mat[0][0] > mat[2][2])) {\n    float S = sqrt(1.0 + mat[0][0] - mat[1][1] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[1][2] - mat[2][1]) * invS;\n\t  qx = 0.25 * S;\n\t  qy = (mat[1][0] + mat[0][1]) * invS;\n\t  qz = (mat[2][0] + mat[0][2]) * invS;\n  } else if (mat[1][1] > mat[2][2]) {\n\t  float S = sqrt(1.0 + mat[1][1] - mat[0][0] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[2][0] - mat[0][2]) * invS;\n\t  qx = (mat[1][0] + mat[0][1]) * invS;\n\t  qy = 0.25 * S;\n\t  qz = (mat[2][1] + mat[1][2]) * invS;\n  } else {\n\t  float S = sqrt(1.0 + mat[2][2] - mat[0][0] - mat[1][1]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[0][1] - mat[1][0]) * invS;\n\t  qx = (mat[2][0] + mat[0][2]) * invS;\n\t  qy = (mat[2][1] + mat[1][2]) * invS;\n\t  qz = 0.25 * S;\n  }\n  return vec4(qx, qy, qz, qw);\n}\n   uniform vec4 mainTiling_Offset;\n   uniform vec4 frameTile_velLenScale;\n   uniform vec4 scale;\n   uniform vec4 nodeRotation;\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matViewInv;\n  uniform highp mat4 cc_matViewProj;\n  uniform highp vec4 cc_cameraPos;\nuniform highp mat4 cc_matWorld;\nvarying mediump vec2 uv;\nvarying mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n  , mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n  vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n  vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = vec3(1, 0, 0);\n  vec3 camY = vec3(0, 0, -1);\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  rotateVecFromQuat(viewSpaceVert, q);\n  vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n  vec3 camY = vec3(0, 1, 0);\n  vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n  pos.xyz += offset;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\n  vertIndex.y = 1. - vertIndex.y;\n#endif\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nattribute vec3 a_position;\nattribute vec3 a_texCoord;\nattribute vec3 a_texCoord1;\nattribute vec3 a_texCoord2;\nattribute vec4 a_color;\n#if CC_RENDER_MODE == 1\n  attribute vec3 a_color1;\n#endif\n#if CC_RENDER_MODE == 4\n  attribute vec3 a_texCoord3;\n  attribute vec3 a_normal;\n  attribute vec4 a_color1;\n#endif\nvec4 lpvs_main () {\n  vec3 compScale = scale.xyz * a_texCoord1;\n  vec4 pos = vec4(a_position, 1);\n  #if CC_RENDER_MODE == 1\n    vec4 velocity = vec4(a_color1.xyz, 0);\n  #endif\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_RENDER_MODE == 1\n      velocity = cc_matWorld * velocity;\n    #endif\n  #endif\n  #if ROTATION_OVER_TIME_MODULE_ENABLE\n    vec3 rotTmp = a_texCoord2;\n    float mulFactor = 1.0;\n    if (rotTmp.x > 10.0 * 0.5) {\n        rotTmp.x -= 10.0;\n        mulFactor = -1.0;\n    }\n    vec4 rot = vec4(rotTmp, 0.0);\n    rot.w = mulFactor * sqrt(abs(1.0 - rot.x * rot.x - rot.y * rot.y - rot.z * rot.z));\n  #else\n    #if CC_RENDER_MODE != 4\n      #if CC_RENDER_MODE == 0\n        vec3 rotEuler = a_texCoord2;\n      #elif CC_RENDER_MODE == 1\n        vec3 rotEuler = vec3(0.);\n      #else\n        vec3 rotEuler = vec3(0., 0., a_texCoord2.z);\n      #endif\n      vec4 rot = quaternionFromEuler(rotEuler);\n    #else\n      vec4 rot = quaternionFromEuler(a_texCoord2);\n    #endif\n  #endif\n  #if CC_RENDER_MODE != 4\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n    #if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_matViewInv);\n    #elif CC_RENDER_MODE == 1\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_cameraPos.xyz, velocity, frameTile_velLenScale.z, frameTile_velLenScale.w, a_texCoord.x);\n    #elif 2\n      computeVertPos(pos, cornerOffset, rot, compScale);\n    #endif\n    color = a_color;\n  #else\n    mat3 rotMat = quatToMat3(rot);\n    mat3 nodeMat = quatToMat3(nodeRotation);\n    rotMat = nodeMat * rotMat;\n    rot = mat3ToQuat(rotMat);\n    mat4 xformNoScale = matrixFromRT(rot, pos.xyz);\n    mat4 xform = matFromRTS(rot, pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n  #endif\n  uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  pos = cc_matViewProj * pos;\n  return pos;\n}\nvoid main() { gl_Position = lpvs_main(); }","frag":"\nprecision mediump float;\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nvarying vec2 uv;\nvarying vec4 color;\nuniform sampler2D mainTexture;\nvec4 premultiplied () {\n  vec4 col = color * texture2D(mainTexture, uv) * color.a;\n  return CCFragOutput(col);\n}\nvoid main() { gl_FragColor = premultiplied(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":52,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":39}},"defines":[{"name":"CC_RENDER_MODE","type":"number","defines":[],"range":[0,4]},{"name":"CC_USE_WORLD_SPACE","type":"boolean","defines":[]},{"name":"ROTATION_OVER_TIME_MODULE_ENABLE","type":"boolean","defines":[]}]}],[{"name":"add","passes":[{"program":"builtin-particle|particle-vs-legacy:lpvs_main|tinted-fs:add","rasterizerState":{"cullMode":0},"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":1,"blendSrcAlpha":2,"blendDstAlpha":1}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"mainTexture":{"value":"grey","type":28},"mainTiling_Offset":{"type":16,"value":[1,1,0,0]},"tintColor":{"type":16,"value":[0.5,0.5,0.5,0.5],"editor":{"type":"color"}}}}]},{"name":"alpha-blend","passes":[{"program":"builtin-particle|particle-vs-legacy:lpvs_main|tinted-fs:add","rasterizerState":{"cullMode":0},"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendSrcAlpha":0,"blendDstAlpha":1}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"mainTexture":{"value":"grey","type":28},"mainTiling_Offset":{"type":16,"value":[1,1,0,0]},"tintColor":{"type":16,"value":[0.5,0.5,0.5,0.5],"editor":{"type":"color"}}}}]},{"name":"add-multiply","passes":[{"program":"builtin-particle|particle-vs-legacy:lpvs_main|tinted-fs:multiply","rasterizerState":{"cullMode":0},"blendState":{"targets":[{"blend":true,"blendSrc":7,"blendDst":1,"blendSrcAlpha":0,"blendDstAlpha":3}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"mainTexture":{"value":"grey","type":28},"mainTiling_Offset":{"type":16,"value":[1,1,0,0]},"tintColor":{"type":16,"value":[0.5,0.5,0.5,0.5],"editor":{"type":"color"}}}}]},{"name":"add-smooth","passes":[{"program":"builtin-particle|particle-vs-legacy:lpvs_main|no-tint-fs:addSmooth","rasterizerState":{"cullMode":0},"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":1,"blendSrcAlpha":2,"blendDstAlpha":1}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"mainTexture":{"value":"grey","type":28},"mainTiling_Offset":{"type":16,"value":[1,1,0,0]}}}]},{"name":"premultiply-blend","passes":[{"program":"builtin-particle|particle-vs-legacy:lpvs_main|no-tint-fs:premultiplied","rasterizerState":{"cullMode":0},"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendSrcAlpha":0,"blendDstAlpha":1}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"mainTexture":{"value":"grey","type":28},"mainTiling_Offset":{"type":16,"value":[1,1,0,0]}}}]}]]],0,0,[],[],[]],[[[52,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[9,8],[2,14]],[[[52,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[9,8],[2,14]],[[[81,"1",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{}],[{"USE_LIGHTMAP":true,"USE_ALBEDO_MAP":true},{},{}],[[[{},"mainTexture",6,0],{},{}],11,0,0]]],0,0,[0,0],[9,8],[145,6]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["dcCTiT2PVBO4UvIzXQfNk9"]}],[2],0,[],[],[]],[[{"name":"tryBtn","rect":{"x":0,"y":0,"width":373,"height":167},"offset":{"x":0,"y":0},"originalSize":{"width":373,"height":167},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[3],0,[0],[12],[146]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["deaoOX0RFK54zvVtz/nhBo"]}],[2],0,[],[],[]],[[{"name":"time_tab2","rect":{"x":91,"y":30,"width":376,"height":34},"offset":{"x":39.5,"y":-1},"originalSize":{"width":479,"height":92},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[3],0,[0],[12],[147]],[[[52,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{}],[{"USE_LIGHTMAP":true,"HAS_SECOND_UV":true},{},{}],[[[{"roughness":0.30151134729385376,"metallic":0},"mainColor",8,[4,4293778943]],{},{}],11,0,0]]],0,0,[0],[8],[6]],[[[142,"CatScene2"],[35,"break_wall_",[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24]],[35,"break_wall_",[-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48]],[5,["d8s2smx0BGKZuCh9SYwYNL"]],[118,"Canvas2D",33554432,[-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63],[[31,-49,[5,320,480]],[143,-51,-50],[144,45,-2.842170943040401e-14,-2.842170943040401e-14,-52]],[1,160,239.99999999999997,0]],[119,"Wall",[-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76],[1,1,1.5,0.9999999999999998]],[35,"Room",[-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87]],[98,0,null,[93,"c45rgHdxpZTpMuNOO3sYfa",-119,[190,"89wHLWYqxFOYiCSKyiZ8bj",[[146,[5,["c45rgHdxpZTpMuNOO3sYfa"]],[-118]]],[[147,[5,["c45rgHdxpZTpMuNOO3sYfa"]],[[26,-114,[1,0,0.05,0],[1,0.05,0.1,0.05]],[56,16,100,-115,[1,1,0,1],[1,1,0,1]],[193,-117,-116]]]],[[11,"police_Base",["_name"],[5,["c45rgHdxpZTpMuNOO3sYfa"]]],[48,["_lpos"],[5,["c45rgHdxpZTpMuNOO3sYfa"]],[1,5.914,0,2.1]],[48,["_lrot"],[5,["c45rgHdxpZTpMuNOO3sYfa"]],[3,0,1,0,6.123233995736766e-17]],[48,["_euler"],[5,["c45rgHdxpZTpMuNOO3sYfa"]],[1,0,180,0]],[57,["_lscale"],-88,[1,30,30,30]],[12,3,["_clips","length"],-89],[61,["_clips","0"],-90,263],[61,["_clips","1"],-91,264],[61,["_clips","2"],-92,265],[61,["_clips","3"],-93,266],[61,["_defaultClip"],-94,267],[12,true,["_active"],-95],[12,0,["_sockets","length"],-96],[83,["_sockets","0"],-97,[106,"Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R/MiddleFinger1_R/MiddleFinger2_R/MiddleFinger3_R"]],[12,true,["playOnLoad"],-98],[12,1,["_shadowCastingMode"],-99],[73,["_skinningRoot"],-101,-100],[12,1,["_shadowCastingMode"],-102],[73,["_skinningRoot"],-104,-103],[12,1,["_shadowCastingMode"],-105],[73,["_skinningRoot"],-107,-106],[12,1,["_shadowCastingMode"],-108],[73,["_skinningRoot"],-110,-109],[12,1,["_shadowCastingMode"],-111],[73,["_skinningRoot"],-113,-112]]],260]],[178,"CatController",[-124,-125,-126],[[[179,-120,[233,234],[[106,"Root_M/Tail0_M/Tail1_M/Tail2_M/Tail3_M/Tail4_M/Tail5_M"],[106,"Root_M/RootPart1_M/RootPart2_M/Spine2_M/Chest_M/Neck_M/NeckPart1_M/Head_M/HeadEnd_M"]],235],[26,-121,[1,0,0.02,0.004],[1,0.033,0.04,0.043]],[149,100,-122,[1,1,0,1]],-123],4,4,4,1],[1,-7.64,0,2.195],[3,0,0.7071067811865475,0,0.7071067811865476],[1,30,30,30],[1,0,90,0]],[103,"AudioManager","91MUdo8mRCu5o6mQ9zrX1M",[-128,-129,-130,-131,-132,-133,-134,-135],[-127]],[99,"CTA",33554432,4,[-138,-139,-140,-141,-142,-143],[[96,-136],[113,-137,[254],255]]],[98,0,{},[93,"f6h5JTA61Krp7fpJXxRpdl",-146,[145,"0aRJjUW8ZPNJ2S45jl1QOw",null,[[11,"Walk Break",["_name"],[5,["f6h5JTA61Krp7fpJXxRpdl"]]],[48,["_lpos"],[5,["f6h5JTA61Krp7fpJXxRpdl"]],[1,0,0.017,0]],[48,["_lrot"],[5,["f6h5JTA61Krp7fpJXxRpdl"]],[3,0.7071067811865475,0,0,0.7071067811865476]],[48,["_euler"],[5,["f6h5JTA61Krp7fpJXxRpdl"]],[1,90,0,0]],[11,1,["_simulationSpace"],[5,["b2Z3tunMxD543DLFEf8MY1"]]],[48,["_lscale"],[5,["f6h5JTA61Krp7fpJXxRpdl"]],[1,1,1,1]],[11,true,["loop"],[5,["d6dNQQc1JJ872kZBLdCYV/"]]],[11,true,["loop"],[5,["b2Z3tunMxD543DLFEf8MY1"]]],[11,true,["loop"],[5,["d8s2smx0BGKZuCh9SYwYNL"]]],[11,0,["scaleSpace"],[5,["b2Z3tunMxD543DLFEf8MY1"]]],[11,0,["scaleSpace"],[5,["d6dNQQc1JJ872kZBLdCYV/"]]],[11,0,["scaleSpace"],[5,["d8s2smx0BGKZuCh9SYwYNL"]]],[48,["_lscale"],[5,["ec12r82KpHmrFyR4IuXAYD"]],[1,0.007,0.007,0.007]],[48,["_lpos"],[5,["ec12r82KpHmrFyR4IuXAYD"]],[1,0,0,0.013]],[11,true,["playOnAwake"],[5,["d6dNQQc1JJ872kZBLdCYV/"]]],[11,2,["_materials","length"],[5,["d6dNQQc1JJ872kZBLdCYV/"]]],[11,null,["_materials","1"],[5,["d6dNQQc1JJ872kZBLdCYV/"]]],[11,0.25,["duration"],[5,["d6dNQQc1JJ872kZBLdCYV/"]]],[11,0.3,["startSizeX","constantMin"],[5,["d6dNQQc1JJ872kZBLdCYV/"]]],[11,2,["startSizeX","constantMax"],[5,["d6dNQQc1JJ872kZBLdCYV/"]]],[11,0.35,["simulationSpeed"],[5,["d6dNQQc1JJ872kZBLdCYV/"]]],[11,6.283185307179586,["startRotationZ","constantMin"],[5,["d6dNQQc1JJ872kZBLdCYV/"]]],[11,0,["gravityModifier","constant"],[5,["d6dNQQc1JJ872kZBLdCYV/"]]],[11,false,["startSize3D"],[5,["d6dNQQc1JJ872kZBLdCYV/"]]],[11,2,["startSpeed","constant"],[5,["d6dNQQc1JJ872kZBLdCYV/"]]],[11,0.6,["startLifetime","constantMax"],[5,["d6dNQQc1JJ872kZBLdCYV/"]]],[11,6.283185307179586,["startRotationZ","constantMax"],[5,["d6dNQQc1JJ872kZBLdCYV/"]]],[11,true,["_textureAnimationModule","_enable"],[5,["d6dNQQc1JJ872kZBLdCYV/"]]],[89,["renderer","_mainTexture"],[5,["d6dNQQc1JJ872kZBLdCYV/"]],134],[11,true,["_limitVelocityOvertimeModule","_enable"],[5,["d6dNQQc1JJ872kZBLdCYV/"]]],[11,false,["_trailModule","_enable"],[5,["d6dNQQc1JJ872kZBLdCYV/"]]],[11,0,["_simulationSpace"],[5,["d8s2smx0BGKZuCh9SYwYNL"]]],[11,true,["playOnAwake"],[5,["d8s2smx0BGKZuCh9SYwYNL"]]],[57,["_lpos"],-144,[1,0,0,0.017]],[89,["_materials","0"],[5,["d8s2smx0BGKZuCh9SYwYNL"]],135],[61,["renderer","_mainTexture"],3,136],[89,["_materials","0"],[5,["d6dNQQc1JJ872kZBLdCYV/"]],137],[11,0,["_simulationSpace"],[5,["d6dNQQc1JJ872kZBLdCYV/"]]],[12,0.10039999999999999,["_colorOverLifetimeModule","color","gradient","colorKeys","1","time"],3],[12,0.9352678571428571,["_colorOverLifetimeModule","color","gradient","alphaKeys","1","time"],3],[12,4,["_colorOverLifetimeModule","color","gradient","colorKeys","length"],3],[83,["_colorOverLifetimeModule","color","gradient","colorKeys","2"],3,[104,0.2701]],[83,["_colorOverLifetimeModule","color","gradient","colorKeys","3"],3,[16,1,[4,4278190335]]],[57,["_colorOverLifetimeModule","color","gradient","colorKeys","1","color"],3,[4,4284012543]],[12,0.2,["duration"],3],[12,0.1,["simulationSpeed"],3],[57,["startColor","color"],3,[4,2533359615]],[12,false,["startRotation3D"],3],[12,6.283185307179586,["startRotationZ","constant"],3],[57,["_lscale"],-145,[1,0.016,0.016,0.016]],[12,3,["startRotationZ","mode"],3],[12,6.283185307179586,["startRotationZ","constantMin"],3],[12,6.283185307179586,["startRotationZ","constantMax"],3],[12,3,["startLifetime","mode"],3],[12,0.2,["startLifetime","constantMin"],3],[12,0.6,["startLifetime","constantMax"],3],[12,0.8883928571428572,["_colorOverLifetimeModule","color","gradient","alphaKeys","0","time"],3],[12,255,["_colorOverLifetimeModule","color","gradient","alphaKeys","0","alpha"],3],[12,255,["_colorOverLifetimeModule","color","gradient","alphaKeys","1","alpha"],3],[12,3,["_colorOverLifetimeModule","color","gradient","alphaKeys","length"],3],[83,["_colorOverLifetimeModule","color","gradient","alphaKeys","2"],3,[105,255,0.9910714285714286]],[12,0.2,["startSpeed","constant"],3]]],133]],[5,["ef7win4PBfzYC323/PxlPf"]],[103,"GameNode","2dHAV5VQFGj4wTXC++MSEv",[-148,-149,-150,-151,4],[-147]],[151,"CatScene2",[13,-163,-164,-165,9,-166],[132,"f82590ab-7475-4b63-9a96-e8c0a6a65b85",[[50,["_trailModule","_particleSystem"],11,[5,["b2Z3tunMxD543DLFEf8MY1"]],11,[5,["b2Z3tunMxD543DLFEf8MY1"]]],[50,["_trailModule","_particleSystem"],11,[5,["d6dNQQc1JJ872kZBLdCYV/"]],11,[5,["d6dNQQc1JJ872kZBLdCYV/"]]],[50,["_trailModule","_particleSystem"],11,[5,["d8s2smx0BGKZuCh9SYwYNL"]],11,[5,["d8s2smx0BGKZuCh9SYwYNL"]]],[50,["_trailModule","_particleSystem"],-154,[5,["5cc7kqZIFB1br2814jbBtQ"]],-153,[5,["5cc7kqZIFB1br2814jbBtQ"]]],[50,["_trailModule","_particleSystem"],-156,[5,["5cc7kqZIFB1br2814jbBtQ"]],-155,[5,["5cc7kqZIFB1br2814jbBtQ"]]],[50,["_trailModule","_particleSystem"],-158,[5,["5cc7kqZIFB1br2814jbBtQ"]],-157,[5,["5cc7kqZIFB1br2814jbBtQ"]]],[50,["_trailModule","_particleSystem"],-160,[5,["5cc7kqZIFB1br2814jbBtQ"]],-159,[5,["5cc7kqZIFB1br2814jbBtQ"]]],[50,["_trailModule","_particleSystem"],-162,[5,["5cc7kqZIFB1br2814jbBtQ"]],-161,[5,["5cc7kqZIFB1br2814jbBtQ"]]]],[11,-152,7]],[152,[153,0.5208,[2,0.23529411764705882,0.3607843137254902,0.796078431372549,0.520833125],[2,0.23529411764705882,0.3607843137254902,0.796078431372549,1],[2,0.519964,0.630786,0.905039,0.5208],[2,0.519544,0.630484,0.905069,0]],[154,1,true,2,0.05,0.4,0.2,30,2000,10,0.36,[4,4283190348],[0,2048,2048]],[155,true,268,269],[156],[157]]],[53,"Environment",13,[-167,5,-168,6,-169,-170]],[4,"break_wall.009",2,[[3,1,-171,[94],[1],95],[8,4,-172],[6,-173,[1,0.005,0.005,0.005]]],[1,-0.012499326840043068,0.007452864665538073,-0.000001718401563266525]],[126,"carpet1",[[-174,-175,-176,-177,[66,"transform1",-178]],1,1,1,1,4]],[100,"Food",6,[-182,11],[[3,1,-179,[138],[95,true],139],[26,-180,[1,0,0.002,0],[1,0.00944,0.0035,0.006958]],[90,true,-181,[140],141]],[1,4.524,0.365,-3.039],[1,150,150,150]],[53,"Effects",15,[-183,-184,-185,-186,-187]],[68,"Electric_1",19,[-189,-190],[-188],[1,2.87,1.145,4.176],[3,0.7071067811865475,0,0,0.7071067811865476],[1,0.26,0.26000000000000006,0.26000000000000006],[1,89.99999999999999,0,0]],[68,"Electric_2",19,[-192,-193],[-191],[1,2.87,1.142,0.299],[3,0.7071067811865475,0,0,0.7071067811865476],[1,0.26,0.26000000000000006,0.26000000000000006],[1,89.99999999999999,0,0]],[68,"Electric_3",19,[-195,-196],[-194],[1,2.87,1.303,2.125],[3,0.7071067811865475,0,0,0.7071067811865476],[1,0.26,0.26000000000000006,0.26000000000000006],[1,89.99999999999999,0,0]],[68,"Electric_4",19,[-198,-199],[-197],[1,2.87,0.108,1.03],[3,0.7071067811865475,0,0,0.7071067811865476],[1,0.26,0.26000000000000006,0.26000000000000006],[1,89.99999999999999,0,0]],[68,"Electric_5",19,[-201,-202],[-200],[1,2.87,0.076,3.149],[3,0.7071067811865475,0,0,0.7071067811865476],[1,0.26,0.26000000000000006,0.26000000000000006],[1,89.99999999999999,0,0]],[159,9],[130,"JoyStick",33554432,4,[[[31,-203,[5,80,80]],[114,0,-204,259],-205,[107,0,-206]],4,4,1,4],[1,0,-130,0]],[4,"break_wall",1,[[3,1,-207,[28],[1],29],[6,-208,[1,0.005,0.005,0.005]],[8,4,-209]],[1,-0.017498958855867386,0.012452497147023678,-0.0000017197428405779647]],[4,"break_wall.001",1,[[3,1,-210,[30],[1],31],[6,-211,[1,0.005,0.005,0.005]],[8,4,-212]],[1,-0.012499326840043068,0.012452497147023678,-0.000001718401563266525]],[4,"break_wall.002",1,[[3,1,-213,[32],[1],33],[6,-214,[1,0.005,0.005,0.005]],[8,4,-215]],[1,-0.007499693427234888,0.012452497147023678,-0.000001718401563266525]],[4,"break_wall.004",1,[[3,1,-216,[36],[1],37],[6,-217,[1,0.005,0.005,0.005]],[8,4,-218]],[1,0.0024995713029056787,0.012452497147023678,-0.000001718401563266525]],[4,"break_wall.005",1,[[3,1,-219,[38],[1],39],[6,-220,[1,0.005,0.005,0.005]],[8,4,-221]],[1,0.007499203085899353,0.012452497147023678,-0.000001718401563266525]],[4,"break_wall.006",1,[[3,1,-222,[40],[1],41],[6,-223,[1,0.005,0.005,0.005]],[8,4,-224]],[1,0.012498835101723671,0.012452497147023678,-0.000001718401563266525]],[4,"break_wall.007",1,[[3,1,-225,[42],[1],43],[6,-226,[1,0.005,0.005,0.005]],[8,4,-227]],[1,0.017498468980193138,0.012452497147023678,-0.000001718401563266525]],[4,"break_wall.008",1,[[3,1,-228,[44],[1],45],[6,-229,[1,0.005,0.005,0.005]],[8,4,-230]],[1,-0.017498958855867386,0.007452864665538073,-0.000001718401563266525]],[4,"break_wall.009",1,[[3,1,-231,[46],[1],47],[6,-232,[1,0.005,0.005,0.005]],[8,4,-233]],[1,-0.012499326840043068,0.007452864665538073,-0.000001718401563266525]],[4,"break_wall.010",1,[[3,1,-234,[48],[1],49],[6,-235,[1,0.005,0.005,0.005]],[8,4,-236]],[1,-0.007499693427234888,0.007452864665538073,-0.000001718401563266525]],[4,"break_wall.011",1,[[3,1,-237,[50],[1],51],[6,-238,[1,0.005,0.005,0.005]],[8,4,-239]],[1,-0.0025000611785799265,0.007452864665538073,-0.000001718401563266525]],[4,"break_wall.012",1,[[3,1,-240,[52],[1],53],[6,-241,[1,0.005,0.005,0.005]],[8,4,-242]],[1,0.0024995713029056787,0.007452864665538073,-0.000001718401563266525]],[4,"break_wall.013",1,[[3,1,-243,[54],[1],55],[6,-244,[1,0.005,0.005,0.005]],[8,4,-245]],[1,0.007499203085899353,0.007452864665538073,-0.000001718401563266525]],[4,"break_wall.014",1,[[3,1,-246,[56],[1],57],[6,-247,[1,0.005,0.005,0.005]],[8,4,-248]],[1,0.012498835101723671,0.007452864665538073,-0.000001718401563266525]],[4,"break_wall.015",1,[[3,1,-249,[58],[1],59],[6,-250,[1,0.005,0.005,0.005]],[8,4,-251]],[1,0.017498468980193138,0.007452864665538073,-0.000001718401563266525]],[4,"break_wall.016",1,[[3,1,-252,[60],[1],61],[6,-253,[1,0.005,0.005,0.005]],[8,4,-254]],[1,-0.017498958855867386,0.0024532328825443983,-0.000001718401563266525]],[4,"break_wall.017",1,[[3,1,-255,[62],[1],63],[6,-256,[1,0.005,0.005,0.005]],[8,4,-257]],[1,-0.012499326840043068,0.0024532328825443983,-0.000001718401563266525]],[4,"break_wall.018",1,[[3,1,-258,[64],[1],65],[6,-259,[1,0.005,0.005,0.005]],[8,4,-260]],[1,-0.007499693427234888,0.0024532328825443983,-0.000001718401563266525]],[4,"break_wall.019",1,[[3,1,-261,[66],[1],67],[6,-262,[1,0.005,0.005,0.005]],[8,4,-263]],[1,-0.0025000611785799265,0.0024532328825443983,-0.000001718401563266525]],[4,"break_wall.020",1,[[3,1,-264,[68],[1],69],[6,-265,[1,0.005,0.005,0.005]],[8,4,-266]],[1,0.0024995713029056787,0.0024532328825443983,-0.000001718401563266525]],[4,"break_wall.021",1,[[3,1,-267,[70],[1],71],[6,-268,[1,0.005,0.005,0.005]],[8,4,-269]],[1,0.007499203085899353,0.0024532328825443983,-0.000001718401563266525]],[4,"break_wall.022",1,[[3,1,-270,[72],[1],73],[6,-271,[1,0.005,0.005,0.005]],[8,4,-272]],[1,0.012498835101723671,0.0024532328825443983,-0.000001718401563266525]],[4,"break_wall.023",1,[[3,1,-273,[74],[1],75],[6,-274,[1,0.005,0.005,0.005]],[8,4,-275]],[1,0.017498468980193138,0.0024532328825443983,-0.000001718401563266525]],[4,"break_wall",2,[[3,1,-276,[76],[1],77],[8,4,-277],[6,-278,[1,0.005,0.005,0.005]]],[1,-0.017498958855867386,0.012452497147023678,-0.0000017197428405779647]],[4,"break_wall.001",2,[[3,1,-279,[78],[1],79],[8,4,-280],[6,-281,[1,0.005,0.005,0.005]]],[1,-0.012499326840043068,0.012452497147023678,-0.000001718401563266525]],[4,"break_wall.002",2,[[3,1,-282,[80],[1],81],[8,4,-283],[6,-284,[1,0.005,0.005,0.005]]],[1,-0.007499693427234888,0.012452497147023678,-0.000001718401563266525]],[4,"break_wall.003",2,[[3,1,-285,[82],[1],83],[8,4,-286],[6,-287,[1,0.005,0.005,0.005]]],[1,-0.0025000611785799265,0.012452497147023678,-0.000001718401563266525]],[4,"break_wall.004",2,[[3,1,-288,[84],[1],85],[8,4,-289],[6,-290,[1,0.005,0.005,0.005]]],[1,0.0024995713029056787,0.012452497147023678,-0.000001718401563266525]],[4,"break_wall.005",2,[[3,1,-291,[86],[1],87],[8,4,-292],[6,-293,[1,0.005,0.005,0.005]]],[1,0.007499203085899353,0.012452497147023678,-0.000001718401563266525]],[4,"break_wall.006",2,[[3,1,-294,[88],[1],89],[8,4,-295],[6,-296,[1,0.005,0.005,0.005]]],[1,0.012498835101723671,0.012452497147023678,-0.000001718401563266525]],[4,"break_wall.007",2,[[3,1,-297,[90],[1],91],[8,4,-298],[6,-299,[1,0.005,0.005,0.005]]],[1,0.017498468980193138,0.012452497147023678,-0.000001718401563266525]],[4,"break_wall.008",2,[[3,1,-300,[92],[1],93],[8,4,-301],[6,-302,[1,0.005,0.005,0.005]]],[1,-0.017498958855867386,0.007452864665538073,-0.000001718401563266525]],[4,"break_wall.010",2,[[3,1,-303,[96],[1],97],[8,4,-304],[6,-305,[1,0.005,0.005,0.005]]],[1,-0.007499693427234888,0.007452864665538073,-0.000001718401563266525]],[4,"break_wall.011",2,[[3,1,-306,[98],[1],99],[8,4,-307],[6,-308,[1,0.005,0.005,0.005]]],[1,-0.0025000611785799265,0.007452864665538073,-0.000001718401563266525]],[4,"break_wall.012",2,[[3,1,-309,[100],[1],101],[8,4,-310],[6,-311,[1,0.005,0.005,0.005]]],[1,0.0024995713029056787,0.007452864665538073,-0.000001718401563266525]],[4,"break_wall.013",2,[[3,1,-312,[102],[1],103],[8,4,-313],[6,-314,[1,0.005,0.005,0.005]]],[1,0.007499203085899353,0.007452864665538073,-0.000001718401563266525]],[4,"break_wall.014",2,[[3,1,-315,[104],[1],105],[8,4,-316],[6,-317,[1,0.005,0.005,0.005]]],[1,0.012498835101723671,0.007452864665538073,-0.000001718401563266525]],[4,"break_wall.015",2,[[3,1,-318,[106],[1],107],[8,4,-319],[6,-320,[1,0.005,0.005,0.005]]],[1,0.017498468980193138,0.007452864665538073,-0.000001718401563266525]],[4,"break_wall.016",2,[[3,1,-321,[108],[1],109],[8,4,-322],[6,-323,[1,0.005,0.005,0.005]]],[1,-0.017498958855867386,0.0024532328825443983,-0.000001718401563266525]],[4,"break_wall.017",2,[[3,1,-324,[110],[1],111],[8,4,-325],[6,-326,[1,0.005,0.005,0.005]]],[1,-0.012499326840043068,0.0024532328825443983,-0.000001718401563266525]],[4,"break_wall.018",2,[[3,1,-327,[112],[1],113],[8,4,-328],[6,-329,[1,0.005,0.005,0.005]]],[1,-0.007499693427234888,0.0024532328825443983,-0.000001718401563266525]],[4,"break_wall.019",2,[[3,1,-330,[114],[1],115],[8,4,-331],[6,-332,[1,0.005,0.005,0.005]]],[1,-0.0025000611785799265,0.0024532328825443983,-0.000001718401563266525]],[4,"break_wall.020",2,[[3,1,-333,[116],[1],117],[8,4,-334],[6,-335,[1,0.005,0.005,0.005]]],[1,0.0024995713029056787,0.0024532328825443983,-0.000001718401563266525]],[4,"break_wall.021",2,[[3,1,-336,[118],[1],119],[8,4,-337],[6,-338,[1,0.005,0.005,0.005]]],[1,0.007499203085899353,0.0024532328825443983,-0.000001718401563266525]],[4,"break_wall.022",2,[[3,1,-339,[120],[1],121],[8,4,-340],[6,-341,[1,0.005,0.005,0.005]]],[1,0.012498835101723671,0.0024532328825443983,-0.000001718401563266525]],[4,"break_wall.023",2,[[3,1,-342,[122],[1],123],[8,4,-343],[6,-344,[1,0.005,0.005,0.005]]],[1,0.017498468980193138,0.0024532328825443983,-0.000001718401563266525]],[35,"Laser_Button",[-345,-346,-347,-348]],[35,"Laser_Button",[-349,-350,-351,-352]],[15,"Root_M",8,[-353,-354,-355,-356],[1,1.0018953194960331e-25,0.01481025293469429,-0.0051376777701079845],[3,0.6968476547856595,-0.12001394093906889,0.6968476547856595,-0.12001394093906889],[1,180,-90,-19.543700609739705]],[99,"Navigate",33554432,4,[-358,-359],[[96,-357]]],[110,"Point",33554432,4,[[31,-360,[5,40,40]],[85,0,-361,[4,4279177021],244],[107,0,-362]],[1,0,-130,0]],[34,"tryBtn",33554432,10,[[31,-363,[5,373,167]],[79,-364,[4,16777215],247],[160,3,1.1,-365,248]],[1,0,-162.034,0],[1,0.4,0.4,1]],[41,"Vision",7,[[91,"Quad<ModelComponent>",-366,[261],[1],262],[148,-367,[1,0,0,0.3]],[150,false,32,10000,-368,[1,0,1,0]]],[1,0,0.001,0.042],[3,-0.7071067811865475,0,0,0.7071067811865476],[1,0.08,0.08,0.833333],[1,-90,0,0]],[34,"Cube1",8388608,5,[[33,"Cube<ModelComponent>",1,-369,[2],[1],3],[47,-370],[32,2,2,-371]],[1,0,0.5,-5],[1,20,2,0.25]],[34,"Cube2",8388608,5,[[33,"Cube<ModelComponent>",1,-372,[4],[1],5],[6,-373,[1,1,1.1,2]],[32,2,2,-374]],[1,-2,0.5,4.873],[1,16,2,0.25]],[34,"Cube3",8388608,5,[[91,"Cube<ModelComponent>",-375,[6],[1],7],[47,-376],[32,2,2,-377]],[1,7.123,0.5,4.873],[1,5,2,0.25]],[111,"Cube4",8388608,5,[[33,"Cube<ModelComponent>",1,-378,[8],[1],9],[6,-379,[1,1,1,2]],[32,2,2,-380]],[1,-9.876,0.5,-0.032],[3,0,0.7071067811865475,0,0.7071067811865476],[1,10,2,0.25],[1,0,89.99999999999999,0]],[86,"Cube5",5,[[33,"Cube<ModelComponent>",1,-381,[10],[1],11],[6,-382,[1,1,1,1.5]],[32,2,2,-383]],[1,-7.329,0.5,-0.801],[1,5,2,0.35]],[41,"Cube8",5,[[33,"Cube<ModelComponent>",1,-384,[12],[1],13],[6,-385,[1,1,1,1.5]],[32,2,2,-386]],[1,-5,0.5,-1.969],[3,0,0.7071067811865475,0,0.7071067811865477],[1,6,2,0.35],[1,0,89.99999999999999,0]],[41,"Cube9",5,[[33,"Cube<ModelComponent>",1,-387,[14],[1],15],[47,-388],[32,2,2,-389]],[1,-5,0.5,4.06],[3,0,0.7071067811865475,0,0.7071067811865477],[1,1.8,2,0.35],[1,0,89.99999999999999,0]],[86,"Cube10",5,[[33,"Cube<ModelComponent>",1,-390,[16],[1],17],[47,-391],[32,2,2,-392]],[1,2.428,0.5,-0.846],[1,4.8,2,0.35]],[41,"Cube11",5,[[33,"Cube<ModelComponent>",1,-393,[18],[1],19],[47,-394],[32,2,2,-395]],[1,8.367,0.5,-0.846],[3,0,1,0,6.123233995736766e-17],[1,2.8,2,0.35],[1,0,180,0]],[41,"Cube19",5,[[33,"Cube<ModelComponent>",1,-396,[20],[1],21],[47,-397],[32,2,2,-398]],[1,9.861,0.5,-2.231],[3,0,0.7071067811865475,0,0.7071067811865477],[1,5.5,2,0.25],[1,0,89.99999999999999,0]],[41,"Cube20",5,[[33,"Cube<ModelComponent>",1,-399,[22],[1],23],[47,-400],[32,2,2,-401]],[1,1.246,0.5,4.095],[3,-6.5420519111824014e-18,0.7071067811865475,1.4719616800160387e-17,0.7071067811865476],[1,1.8,2,0.35],[1,-1.7228004524594049e-15,89.99999999999999,6.626155586382319e-16]],[41,"Cube21",5,[[33,"Cube<ModelComponent>",1,-402,[24],[1],25],[47,-403],[32,2,2,-404]],[1,1.246,0.5,0.066],[3,-6.5420519111824014e-18,0.7071067811865475,1.4719616800160387e-17,0.7071067811865476],[1,1.8,2,0.35],[1,-1.7228004524594049e-15,89.99999999999999,6.626155586382319e-16]],[41,"Cube12",5,[[33,"Cube<ModelComponent>",1,-405,[26],[1],27],[47,-406],[32,2,2,-407]],[1,9.74,0.5,4.354],[3,-1.0630834355671389e-17,0.7071067811865475,-1.0630834355671397e-17,0.7071067811865476],[1,1.3,2,0.25],[1,4.033991139266958e-31,90,-1.7228004524594049e-15]],[4,"break_wall.003",1,[[3,1,-408,[34],[1],35],[6,-409,[1,0.005,0.005,0.005]],[8,4,-410]],[1,-0.0025000611785799265,0.012452497147023678,-0.000001718401563266525]],[120,"MocQuanAo",6,[-413],[[84,-411,[126],[1],127],[26,-412,[1,0,0.009,0],[1,0.006667,0.020667,0.006667]]],[1,8.969,0,-4.229],[3,0,-0.6205731361358193,0,0.7841485718322477],[1,150,150,150],[1,0,-76.716,0]],[100,"Tham",6,[17,-415],[[158,-414,[130],[1]]],[1,-7.62,0,2.195],[1,80.00000000000001,80,80.00000000000001]],[59,"Door1_1",[[3,1,-416,[146],[1],147],[56,8,0.0001,-417,[1,0,0,0],[1,0,1,0]],[26,-418,[1,-0.004,0,0],[1,0.006,0.015,0.002]]],[1,0.007821347564458847,0.00755288265645504,1.175609470882577e-10]],[59,"Door1_2",[[3,1,-419,[148],[1],149],[56,8,0.0001,-420,[1,0,0,0],[1,0,1,0]],[26,-421,[1,0.004,0,0],[1,0.006,0.015,0.002]]],[1,-0.007821347564458847,0.00755288265645504,1.175609470882577e-10]],[59,"Door1",[[3,1,-422,[150],[1],151],[56,8,0.0001,-423,[1,0,0,0],[1,0,1,0]],[26,-424,[1,-0.004,0,0],[1,0.006,0.015,0.003]]],[1,0.007821347564458847,0.00755288265645504,1.175609470882577e-10]],[59,"Door2",[[3,1,-425,[152],[1],153],[56,8,0.0001,-426,[1,0,0,0],[1,0,1,0]],[26,-427,[1,0.004,0,0],[1,0.006,0.015,0.003]]],[1,-0.007821347564458847,0.00755288265645504,1.175609470882577e-10]],[59,"Door1",[[3,1,-428,[154],[1],155],[56,8,0.1,-429,[1,0,0,0],[1,0,1,0]],[26,-430,[1,-0.004,0,0],[1,0.007,0.014,0.002]]],[1,0.007821347564458847,0.00755288265645504,1.175609470882577e-10]],[59,"Door2",[[3,1,-431,[156],[1],157],[26,-432,[1,0.004,0,0],[1,0.007,0.014,0.002]],[56,8,0.1,-433,[1,0,0,0],[1,0,1,0]]],[1,-0.007821347564458847,0.00755288265645504,1.175609470882577e-10]],[36,"WallLaserBtn",74,[[3,1,-434,[172],[1],173],[26,-435,[1,-1.1874362826347351e-8,0.0005,4.889443516731262e-9],[1,0.002,0.1,0.002]],[32,2,2,-436]]],[53,"Lasers",15,[-437,-438,-439]],[35,"Electro",[-440,-441,-442]],[86,"Electro_vfx_mesh",104,[[3,1,-443,[180],[1],181],[6,-444,[1,0.0019843416521325707,0.010201558005064726,0.03618932329118252]]],[1,2.410281751963339e-7,0.007962931878864765,1.182999476156965e-9],[1,1.2,1.2,1]],[35,"laser",[-445,-446,-447]],[4,"laser_vfx_mesh",106,[[3,1,-448,[184],[1],185],[6,-449,[1,0.0016475273296236992,0.012324807699769735,0.02926943451166153]]],[1,-2.109229413349567e-8,0.007881137542426586,2.020315292838859e-7]],[35,"laser",[-450,-451,-452]],[4,"laser_vfx_mesh",108,[[3,1,-453,[190],[1],191],[6,-454,[1,0.0016475273296236992,0.012324807699769735,0.02926943451166153]]],[1,-2.109229413349567e-8,0.007881137542426586,2.020315292838859e-7]],[121,"Chest_M",[-455,-456,-457],[1,0.005447485018521547,-1.554312241092664e-17,-5.346294532827751e-18],[3,-9.193751724705897e-17,7.319178504059276e-18,-0.017864119002931025,0.9998404238938577],[1,-1.0525317154700937e-14,6.507944086134008e-16,-2.0471861423310167]],[5,["8c/+pGOoBR/rovZ1GQtGDO"]],[34,"Gradient",33554432,4,[[31,-458,[5,16,478]],[58,-459,236]],[1,0,240,0],[1,50,0.2,1]],[34,"text",33554432,4,[[31,-460,[5,438,56]],[58,-461,237]],[1,0,-224.365,0],[1,0.3,0.3,0.3]],[34,"title",33554432,4,[[31,-462,[5,556,220]],[58,-463,238]],[1,-40,206.99999999999997,0],[1,0.2,0.2,0.4]],[34,"icon",33554432,4,[[31,-464,[5,198,198]],[58,-465,239]],[1,56,206.99999999999997,0],[1,0.25,0.25,0.6]],[34,"hand",33554432,76,[[31,-466,[5,108,134]],[58,-467,241],[90,true,-468,[242],243]],[1,-53.722999999999985,-197.265,0],[1,0.24999999999999997,0.24999999999999997,0.24999999999999997]],[92,"LoadMap",33554432,10,[[31,-469,[5,2000,2000]],[85,0,-470,[4,0],245]]],[34,"Download",33554432,10,[[31,-471,[5,373,167]],[79,-472,[4,16777215],246]],[1,0,-163,0],[1,0.4,0.4,1]],[34,"hand",33554432,10,[[112,-473,[5,205,168],[0,0.5,0]],[79,-474,[4,16777215],251],[90,true,-475,[252],253]],[1,39.009000000000015,-238.782,0],[1,0.35,0.35,1]],[92,"fakeBG",33554432,4,[[31,-476,[5,5000,5000]],[85,0,-477,[4,16777215],256]]],[172,"Clock",false,33554432,4,[-479,-480],[[96,-478]],[1,0,200,0],[1,0.6,0.6,1]],[101,"Camera",13,[[161,"Camera<CameraComponent>",2,1822425087,-481,[4,4278239999]]],[1,-13,24,0],[3,-0.3588838181618332,-0.6092638222162746,-0.358883818161833,0.6092638222162747],[1,-61,-90,6.3611093629270335e-15]],[122,"Ground",15,[[91,"Plane<ModelComponent>",-482,[0],[133,true],1],[163,-483]],[1,2,1,1]],[53,"BreakWalls",15,[-484,-485]],[51,"Doors_1",6,[-486],[1,-4.943,0,2.084],[3,0,0.7071067811865475,0,0.7071067811865476],[1,140,140,140],[1,0,89.99999999999999,0]],[53,"Doors",125,[96,97]],[35,"Doors",[98,99]],[35,"Doors",[100,101]],[35,"exit_door",[-487,-488]],[4,"ExitDoor",129,[[3,1,-489,[158],[1],159],[26,-490,[1,0.008676467288751155,-0.00008720159530639648,-0.0007142104441300035],[1,0.02070255985017866,0.014756504446268082,0.004769404651597142]]],[1,-0.019050396978855133,0.0074655115604400635,-0.00011989556514890864]],[4,"ExitDoor",129,[[3,1,-491,[160],[1],161],[26,-492,[1,-0.008676467288751155,-0.00008720159530639648,-0.0007142079994082451],[1,0.02070255985017866,0.014756504446268082,0.0047693997621536255]]],[1,0.019050396978855133,0.0074655115604400635,-0.00011989721679128706]],[36,"LaserButtonGreen",73,[[3,1,-493,[162],[1],163]]],[36,"LaserBtn",73,[[3,1,-494,[164],[1],165],[26,-495,[1,-1.1874362826347351e-8,0.005,4.889443516731262e-9],[1,0.002,0.05,0.002]]]],[102,"LaserButtonRed",false,73,[[3,1,-496,[166],[1],167]]],[102,"WallLaserButtonGreen",false,74,[[3,1,-497,[170],[1],171]]],[36,"WallLaserButtonRed",74,[[3,1,-498,[174],[1],175]]],[4,"laser_base2",108,[[3,1,-499,[192],[1],193],[26,-500,[1,-0.0022566841216757894,0.007889981320338947,-0.0005208068469073623],[1,0.009780378779396415,0.015779962885702645,0.002453161228913814]]],[1,-2.078171768005177e-8,0.0000016899934962566476,0.014305144548416138]],[4,"laser_base1",108,[[3,1,-501,[194],[1],195],[26,-502,[1,-0.0022566841216757894,0.007889981320338947,0.0005208076327107847],[1,0.009780378779396415,0.015779962885702645,0.0024531626841053367]]],[1,-2.2032313751196853e-8,0.0000016899934962566476,-0.014305144548416138]],[69,0.3,false,20,[200],[9],[14,3,0.6,0.9],[0],[0],[14,3,2,4],[0],[0],[14,3,6.283185307179586,6.283185307179586],[0],[14,3,0.15,0.3],[0],[2,20],[0],[[20,[2,9]]],[21,true,[19,1,[27,[[64,[4,33554431]],[16,0.3727678571428572,[4,33539082]]]]]],[70,true,3,0.01,0.5,[2,1]],[28,[0],[0],[0],[0]],[22,[0],[0],[0],[2,1]],[23,[0],[0],[0]],[65,true,0.5,[0],[0],[0],[2,0.2]],[24,[0],[0],[0]],[45,true,3,3,1,[17,1,[18,[0,1],[[29,1,1,1,1],[30,1,1,1,1,1]]]],[0]],[25,[2,1],[0],[9],[9],-503],[72,1,201]],[69,0.3,false,21,[206],[9],[14,3,0.6,0.9],[0],[0],[14,3,2,4],[0],[0],[77,3,6.283185307179586],[0],[14,3,0.15,0.3],[0],[2,20],[0],[[20,[2,9]]],[21,true,[19,1,[27,[[64,[4,33554431]],[16,0.3727678571428572,[4,33539082]]]]]],[70,true,3,0.01,0.5,[2,1]],[28,[0],[0],[0],[0]],[22,[0],[0],[0],[2,1]],[23,[0],[0],[0]],[65,true,0.5,[0],[0],[0],[2,0.2]],[24,[0],[0],[0]],[45,true,3,3,1,[17,1,[18,[0,1],[[29,1,1,1,1],[30,1,1,1,1,1]]]],[0]],[25,[2,1],[0],[9],[9],-504],[72,1,207]],[69,0.6,false,22,[212],[9],[14,3,0.6,0.9],[0],[0],[14,3,2,4],[0],[0],[77,3,6.283185307179586],[0],[14,3,0.15,0.3],[0],[2,20],[0],[[20,[2,9]]],[21,true,[19,1,[27,[[64,[4,33554431]],[16,0.3727678571428572,[4,33539082]]]]]],[70,true,3,0.01,0.5,[2,1]],[28,[0],[0],[0],[0]],[22,[0],[0],[0],[2,1]],[23,[0],[0],[0]],[65,true,0.5,[0],[0],[0],[2,0.2]],[24,[0],[0],[0]],[45,true,3,3,1,[17,1,[18,[0,1],[[29,1,1,1,1],[30,1,1,1,1,1]]]],[0]],[25,[2,1],[0],[9],[9],-505],[72,1,213]],[69,0.8,false,23,[218],[9],[14,3,0.6,0.9],[0],[0],[14,3,2,4],[0],[0],[77,3,6.283185307179586],[0],[14,3,0.15,0.3],[0],[2,20],[0],[[20,[2,9]]],[21,true,[19,1,[27,[[64,[4,33554431]],[16,0.3727678571428572,[4,33539082]]]]]],[70,true,3,0.01,0.5,[2,1]],[28,[0],[0],[0],[0]],[22,[0],[0],[0],[2,1]],[23,[0],[0],[0]],[65,true,0.5,[0],[0],[0],[2,0.2]],[24,[0],[0],[0]],[45,true,3,3,1,[17,1,[18,[0,1],[[29,1,1,1,1],[30,1,1,1,1,1]]]],[0]],[25,[2,1],[0],[9],[9],-506],[72,1,219]],[69,0.8,false,24,[224],[9],[14,3,0.6,0.9],[0],[0],[14,3,2,4],[0],[0],[77,3,6.283185307179586],[0],[14,3,0.15,0.3],[0],[2,20],[0],[[20,[2,9]]],[21,true,[19,1,[27,[[64,[4,33554431]],[16,0.3727678571428572,[4,33539082]]]]]],[70,true,3,0.01,0.5,[2,1]],[28,[0],[0],[0],[0]],[22,[0],[0],[0],[2,1]],[23,[0],[0],[0]],[65,true,0.5,[0],[0],[0],[2,0.2]],[24,[0],[0],[0]],[45,true,3,3,1,[17,1,[18,[0,1],[[29,1,1,1,1],[30,1,1,1,1,1]]]],[0]],[25,[2,1],[0],[9],[9],-507],[72,1,225]],[53,"Characters",13,[8,7]],[127,"Head_M",[[[54,"HeadEnd_M",-508,[1,0.015095275826752186,-2.2204459996194763e-18,1.1147259642693237e-17]],-509],4,1],[1,0.005839296150952578,-2.2204459996194763e-18,7.335141521958022e-11],[3,-3.2970677530887142e-24,2.9610711926934064e-25,-0.05829603108103105,0.9982993402583213],[1,-3.7776313382545368e-22,1.1929573189923404e-23,-6.684022599098756]],[173,0,null,8,[93,"8c/+pGOoBR/rovZ1GQtGDO",-510,[191,"8bSkTwLhhEtYMCF2KYLwWA",[[12,"Deer_Cat",["_name"],111],[57,["_lpos"],111,[1,0,0,0]],[57,["_lrot"],111,[3,0,0,0,1]],[57,["_euler"],111,[1,0,0,0]],[11,false,["_active"],[5,["d1Nmk6CxVdXIRaAYBSZaMv"]]]]],232]],[195,13,25,8,4,115,76,113,114,26,122,117,10,78,118],[164,26,25,13,8,77,120],[34,"8",33554432,76,[[31,-511,[5,416,201]],[58,-512,240]],[1,0,-180.053,0],[1,0.3,0.3,1]],[123,"icon",33554432,10,[[31,-513,[5,198,198]],[79,-514,[4,16777215],249]],[1,0.6,0.6,1]],[34,"title_game",33554432,10,[[31,-515,[5,556,220]],[79,-516,[4,16777215],250]],[1,0,157.99999999999997,0],[1,0.5,0.5,1]],[92,"time_tab1",33554432,121,[[31,-517,[5,479,92]],[58,-518,257]]],[110,"time_tab2",33554432,121,[[112,-519,[5,376,34],[0,0,0.5]],[58,-520,258]],[1,-150,0,0]],[101,"Directional Light",13,[[165,90000,2.34375,-521,[166]]],[1,-12.927,23.868,0.609],[3,-0.46772509094040937,-0.4606509224664642,-0.3889418124971846,0.6463421953013637],[1,-74.895,-74.112,-4.121]],[67,"breakwall_1",124,[1],[1,-2.437,0.04,-0.891],[1,120,120,120]],[51,"breakwall_2",124,[2],[1,1.256,0.04,-2.962],[3,0,-0.7071067811865475,0,0.7071067811865476],[1,90,110,110],[1,0,-89.99999999999999,0]],[36,"coat",94,[[3,1,-522,[124],[1],125]]],[82,"polySurface5",17,[[66,"transform2",-523]]],[82,"polySurface6",17,[[66,"transform5",-524]]],[82,"polySurface7",17,[[66,"transform3",-525]]],[82,"polySurface9",17,[[66,"transform4",-526]]],[36,"polySurface6",95,[[84,-527,[128],[1],129]]],[36,"cat_food",18,[[3,1,-528,[131],[95,true],132]]],[5,["f2sDa1qWtF56f7v5izDlLP"]],[51,"tree_A_1",6,[-529],[1,4.066,0,7.047],[3,0,0.7336231290607853,0,0.6795565498963736],[1,75,75,75],[1,0,94.38200000000002,0]],[36,"Tree_A",165,[[84,-530,[142],[1],143]]],[51,"tree_A_2",6,[-531],[1,0.984,0,-6.896],[3,0,0.8902803762621423,0,0.45541283649293224],[1,50.00000000000001,50,50.00000000000001],[1,0,125.81700000000001,0]],[36,"Tree_A",167,[[84,-532,[144],[1],145]]],[51,"Doors_2",6,[127],[1,1.192,0.142,2.084],[3,-3.407318703740833e-18,0.7071067811865475,3.40731870374083e-18,0.7071067811865476],[1,140.00000000000003,140,140.00000000000003],[1,-5.521796321985272e-16,89.99999999999999,-2.2069531490250793e-31]],[67,"Doors_3",6,[128],[1,5.898,0.003,-0.858],[1,140,140,140]],[51,"Doors_4",6,[129],[1,9.806,0.542,2.119],[3,0,0.7071067811865475,0,0.7071067811865476],[1,80,90,90],[1,0,90,0]],[67,"laser_button_1",6,[73],[1,-2,0,-3],[1,100,100,100]],[41,"icon",73,[[33,"Quad<ModelComponent>",1,-533,[168],[1],169]],[1,-0.001,0.005,0],[3,-0.5,-0.5,-0.4999999999999999,0.5000000000000001],[1,0.007,0.007,0.007],[1,-90,-90,0]],[67,"laser_button_2",6,[74],[1,-7.7,0,-3],[1,100,100,100]],[41,"icon",74,[[33,"Quad<ModelComponent>",1,-534,[176],[1],177]],[1,0,0.003,0],[3,-0.5,-0.5,-0.4999999999999999,0.5000000000000001],[1,0.006,0.006,0.006],[1,-90,-90,0]],[51,"Electro",103,[104],[1,5.5,0,0.227],[3,0,0.7071067811865475,0,0.7071067811865476],[1,150,150,190],[1,0,90,0]],[4,"Electro_wall1",104,[[3,1,-535,[178],[1],179]],[1,2.452812566389184e-7,0.00001882825199572835,0.021018020808696747]],[4,"Electro_wall2",104,[[3,1,-536,[182],[1],183]],[1,2.452812566389184e-7,0.00001882825199572835,-0.021018020808696747]],[124,"laser_wall_1",false,103,[106],[1,5.685,0,2.944],[3,0,1,0,-6.123233995736766e-17],[1,120,120,120],[1,0,-180,0]],[4,"laser_base2",106,[[3,1,-537,[186],[1],187]],[1,-2.078171768005177e-8,0.0000016899934962566476,0.014305144548416138]],[4,"laser_base1",106,[[3,1,-538,[188],[1],189]],[1,-2.2032313751196853e-8,0.0000016899934962566476,-0.014305144548416138]],[124,"laser_wall_2",false,103,[108],[1,7.933,0,1.394],[3,0,0.7071067811865476,0,0.7071067811865475],[1,120,120,120],[1,0,90.00000000000003,0]],[42,"Nova",20,[-539],[3,0.7071067811865475,0,0,0.7071067811865476],[1,90,0,0]],[43,1,false,183,[196],[9],[14,3,1,2.5],[0],[0],[0],[0],[0],[0],[0],[2,0.25],[0],[0],[0],[[20,[2,1]]],[21,true,[19,1,[27,[[40],[16,0.5,[4,4294943551]]]]]],[44,3,[2,1]],[28,[0],[0],[0],[0]],[22,[0],[0],[0],[2,1]],[23,[0],[0],[0]],[37,[0],[0],[0],[0]],[24,[0],[0],[0]],[45,true,3,3,1,[17,1,[18,[0,1],[[29,1,1,1,1],[30,1,1,1,1,1]]]],[0]],[25,[2,1],[0],[9],[9],-540],[38,197]],[42,"Glow",20,[-541],[3,0.7071067811865475,0,0,0.7071067811865476],[1,90,0,0]],[43,1,false,185,[198],[9],[2,5],[0],[0],[0],[0],[0],[0],[0],[2,0.5],[0],[0],[0],[[20,[2,1]]],[21,true,[19,1,[27,[[40],[16,0.5,[4,4294943551]]]]]],[44,3,[2,1]],[28,[0],[0],[0],[0]],[22,[0],[0],[0],[2,1]],[23,[0],[0],[0]],[37,[0],[0],[0],[0]],[24,[0],[0],[0]],[71,3,3,1,[17,1,[18,[0,1],[[29,1,1,1,1],[30,1,1,1,1,1]]]],[0]],[25,[2,1],[0],[9],[9],-542],[38,199]],[42,"Nova",21,[-543],[3,0.7071067811865475,0,0,0.7071067811865476],[1,90,0,0]],[43,1,false,187,[202],[9],[14,3,1,2.5],[0],[0],[0],[0],[0],[0],[0],[2,0.25],[0],[0],[0],[[20,[2,1]]],[21,true,[19,1,[27,[[40],[16,0.5,[4,4294943551]]]]]],[44,3,[2,1]],[28,[0],[0],[0],[0]],[22,[0],[0],[0],[2,1]],[23,[0],[0],[0]],[37,[0],[0],[0],[0]],[24,[0],[0],[0]],[45,true,3,3,1,[17,1,[18,[0,1],[[29,1,1,1,1],[30,1,1,1,1,1]]]],[0]],[25,[2,1],[0],[9],[9],-544],[38,203]],[42,"Glow",21,[-545],[3,0.7071067811865475,0,0,0.7071067811865476],[1,90,0,0]],[43,1,false,189,[204],[9],[2,5],[0],[0],[0],[0],[0],[0],[0],[2,0.5],[0],[0],[0],[[20,[2,1]]],[21,true,[19,1,[27,[[40],[16,0.5,[4,4294943551]]]]]],[44,3,[2,1]],[28,[0],[0],[0],[0]],[22,[0],[0],[0],[2,1]],[23,[0],[0],[0]],[37,[0],[0],[0],[0]],[24,[0],[0],[0]],[71,3,3,1,[17,1,[18,[0,1],[[29,1,1,1,1],[30,1,1,1,1,1]]]],[0]],[25,[2,1],[0],[9],[9],-546],[38,205]],[42,"Nova",22,[-547],[3,0.7071067811865475,0,0,0.7071067811865476],[1,90,0,0]],[43,1,false,191,[208],[9],[14,3,1,2.5],[0],[0],[0],[0],[0],[0],[0],[2,0.25],[0],[0],[0],[[20,[2,1]]],[21,true,[19,1,[27,[[40],[16,0.5,[4,4294943551]]]]]],[44,3,[2,1]],[28,[0],[0],[0],[0]],[22,[0],[0],[0],[2,1]],[23,[0],[0],[0]],[37,[0],[0],[0],[0]],[24,[0],[0],[0]],[45,true,3,3,1,[17,1,[18,[0,1],[[29,1,1,1,1],[30,1,1,1,1,1]]]],[0]],[25,[2,1],[0],[9],[9],-548],[38,209]],[42,"Glow",22,[-549],[3,0.7071067811865475,0,0,0.7071067811865476],[1,90,0,0]],[43,1,false,193,[210],[9],[2,5],[0],[0],[0],[0],[0],[0],[0],[2,0.5],[0],[0],[0],[[20,[2,1]]],[21,true,[19,1,[27,[[40],[16,0.5,[4,4294943551]]]]]],[44,3,[2,1]],[28,[0],[0],[0],[0]],[22,[0],[0],[0],[2,1]],[23,[0],[0],[0]],[37,[0],[0],[0],[0]],[24,[0],[0],[0]],[71,3,3,1,[17,1,[18,[0,1],[[29,1,1,1,1],[30,1,1,1,1,1]]]],[0]],[25,[2,1],[0],[9],[9],-550],[38,211]],[42,"Nova",23,[-551],[3,0.7071067811865475,0,0,0.7071067811865476],[1,90,0,0]],[43,1,false,195,[214],[9],[14,3,1,2.5],[0],[0],[0],[0],[0],[0],[0],[2,0.25],[0],[0],[0],[[20,[2,1]]],[21,true,[19,1,[27,[[40],[16,0.5,[4,4294943551]]]]]],[44,3,[2,1]],[28,[0],[0],[0],[0]],[22,[0],[0],[0],[2,1]],[23,[0],[0],[0]],[37,[0],[0],[0],[0]],[24,[0],[0],[0]],[45,true,3,3,1,[17,1,[18,[0,1],[[29,1,1,1,1],[30,1,1,1,1,1]]]],[0]],[25,[2,1],[0],[9],[9],-552],[38,215]],[42,"Glow",23,[-553],[3,0.7071067811865475,0,0,0.7071067811865476],[1,90,0,0]],[43,1,false,197,[216],[9],[2,5],[0],[0],[0],[0],[0],[0],[0],[2,0.5],[0],[0],[0],[[20,[2,1]]],[21,true,[19,1,[27,[[40],[16,0.5,[4,4294943551]]]]]],[44,3,[2,1]],[28,[0],[0],[0],[0]],[22,[0],[0],[0],[2,1]],[23,[0],[0],[0]],[37,[0],[0],[0],[0]],[24,[0],[0],[0]],[71,3,3,1,[17,1,[18,[0,1],[[29,1,1,1,1],[30,1,1,1,1,1]]]],[0]],[25,[2,1],[0],[9],[9],-554],[38,217]],[42,"Nova",24,[-555],[3,0.7071067811865475,0,0,0.7071067811865476],[1,90,0,0]],[43,1,false,199,[220],[9],[14,3,1,2.5],[0],[0],[0],[0],[0],[0],[0],[2,0.25],[0],[0],[0],[[20,[2,1]]],[21,true,[19,1,[27,[[40],[16,0.5,[4,4294943551]]]]]],[44,3,[2,1]],[28,[0],[0],[0],[0]],[22,[0],[0],[0],[2,1]],[23,[0],[0],[0]],[37,[0],[0],[0],[0]],[24,[0],[0],[0]],[45,true,3,3,1,[17,1,[18,[0,1],[[29,1,1,1,1],[30,1,1,1,1,1]]]],[0]],[25,[2,1],[0],[9],[9],-556],[38,221]],[42,"Glow",24,[-557],[3,0.7071067811865475,0,0,0.7071067811865476],[1,90,0,0]],[43,1,false,201,[222],[9],[2,5],[0],[0],[0],[0],[0],[0],[0],[2,0.5],[0],[0],[0],[[20,[2,1]]],[21,true,[19,1,[27,[[40],[16,0.5,[4,4294943551]]]]]],[44,3,[2,1]],[28,[0],[0],[0],[0]],[22,[0],[0],[0],[2,1]],[23,[0],[0],[0]],[37,[0],[0],[0],[0]],[24,[0],[0],[0]],[71,3,3,1,[17,1,[18,[0,1],[[29,1,1,1,1],[30,1,1,1,1,1]]]],[0]],[25,[2,1],[0],[9],[9],-558],[38,223]],[15,"Tail0_M",75,[-559],[1,-0.003016774309799075,-0.0010064324596896768,4.4113056957284513e-11],[3,-0.13222044449472428,0.9912203357768733,1.899605991128237e-9,-2.5339324590359113e-10],[1,-2.1960685843697459e-7,-179.9999999999998,-15.19584442452546]],[15,"Tail1_M",203,[-560],[1,0.0032178927212953568,-1.1102229998097382e-18,-1.5827465746491744e-16],[3,7.854134306970377e-17,6.62973558865667e-17,-0.04753538670956306,0.9988695545517303],[1,9.393584386234256e-15,8.05274822932461e-15,-5.449207570713341]],[15,"Tail2_M",204,[-561],[1,0.002976355142891407,-5.551115205843844e-18,1.0832962131501755e-12],[3,-1.3949894977543174e-17,-3.883391342022682e-17,-0.11471089869868772,0.993398917716211],[1,-2.155174162256571e-15,-4.728473690825402e-15,-13.173900830243293]],[15,"Tail3_M",205,[-562],[1,0.003203141037374735,4.440891999238953e-18,3.920579572797012e-12],[3,-9.969521051823741e-17,-9.806948956650378e-17,-0.1655651210611257,0.9861988596059187],[1,-1.3888595449279292e-14,-1.3726848857505547e-14,-19.060130128725042]],[15,"Tail4_M",206,[-563],[1,0.0028079531621187925,0,6.5790389629227786e-12],[3,-8.251598561738025e-17,-1.135794569833411e-16,-0.06482256304208014,0.9978968059477171],[1,-1.0366549825034899e-14,-1.3716080958521048e-14,-7.433330535637716]],[60,"Tail5_M",207,[[54,"Tail6_M",-564,[1,0.0030258502811193466,8.881783998477905e-18,9.688655260020607e-12]]],[1,0.002689178567379713,4.440891999238953e-18,7.303118179646795e-12],[3,9.537444787153138e-17,-2.118270460406824e-16,-0.10054238934768282,0.9949327755905215],[1,8.60721837145069e-15,-2.3527419865239222e-14,-11.54080902638327]],[15,"Hip_R",75,[-565],[1,-0.00007880734483478591,0.0005406050477176905,-0.003936111461371183],[3,0.9649268585378106,0.23634742681996387,-0.11070779936605146,0.02828134840243218],[1,173.12485222053104,14.725639548400835,26.73431895575666]],[15,"Knee_R",209,[-566],[1,0.006485617719590664,9.992007618673103e-18,9.992007618673103e-18],[3,1.0421712215713451e-17,9.1641098275595e-18,-0.7509635080199943,0.6603437056732683],[1,180,180,-82.65218201681442]],[15,"Ankle_R",210,[-567],[1,0.006850753910839558,-9.992007618673103e-18,-1.4432898790731443e-17],[3,-0.107779091379776,0.03794360473263759,0.4382270207142593,0.8915722228945604],[1,-20.825588126741046,14.81324250428513,50.646009467453176]],[60,"Toes1_R",211,[[54,"Toes2_R",-568,[1,0.0028587731067091227,-0.0018769684247672558,-2.8829633125226906e-11]]],[1,0.003821877297013998,9.992007618673103e-18,1.4055525840439564e-11],[3,7.078807208851528e-26,7.338928554393833e-26,0.7197470906365884,0.6942363614217905],[1,-180,180,87.93279256115314]],[87,"RootPart1_M",75,[-569],[1,0.0020652245730161667,2.2204459996194763e-18,-6.089342295085281e-19]],[87,"RootPart2_M",213,[-570],[1,0.0020652245730161667,2.2204459996194763e-18,-6.089341778097398e-19]],[15,"Spine2_M",214,[110],[1,0.0020652245730161667,4.440891999238953e-18,2.7589170037440396e-18],[3,2.833542290373483e-16,-5.276558712844762e-17,-0.13887424912163487,0.9903100236445666],[1,3.257203985875381e-14,-1.5379762679065733e-15,-15.965418280697603]],[15,"Neck_M",110,[-571],[1,0.002901608357205987,-0.0031024303752928972,-9.727658892874631e-18],[3,-2.4871766108048305e-24,2.1821083289339757e-24,-0.6595017750111039,0.7517030056858913],[1,-3.791516639546766e-22,0,-82.52377277072583]],[87,"NeckPart1_M",216,[145],[1,0.005839296150952578,5.551115205843844e-18,2.898164867815023e-11]],[60,"Jaw_M",145,[[54,"JawEnd_M",-572,[1,0.01144465059041977,-4.440891999238953e-18,2.616274463397792e-18]]],[1,-0.0070828660391271114,0.001565893879160285,-4.563028938995164e-18],[3,-4.0602511795263196e-25,8.309202330691217e-25,0.7944917325602083,0.6072749681103925],[1,-180,180,74.7854503251938]],[15,"Scapula_R",110,[-573],[1,0.0009082318283617496,-0.0016960602952167392,-0.0035904867108911276],[3,0.7485383193052008,0.6073311003787559,-0.20668350270817637,0.16769391388107713],[1,112.31256356364936,70.98174103154757,57.129780034201545]],[15,"Shoulder_R",219,[-574],[1,0.002976213349029422,0,-8.881783998477905e-18],[3,-0.07353511641712662,0.25579661788485253,-0.2663195499695608,0.9264095067712771],[1,0.0000012480393304219223,30.871376804796846,-32.07723760154569]],[15,"Elbow_R",220,[-575],[1,0.006145196035504341,-5.551115205843844e-18,1.0769163656501374e-16],[3,8.504070203628985e-25,6.16430870102796e-26,0.3120392175523727,0.9500692220618996],[1,1.1223607321790314e-22,-2.942762314065395e-23,36.36433252877887]],[15,"Wrist_R",221,[-576],[1,0.003922537434846163,-7.77156120546332e-18,2.0003202219620597e-11],[3,1.26163860488356e-8,3.485806502145198e-9,0.26631405719129686,0.9638863122496919],[1,0.0000014998981938610756,2.921850661819311e-14,30.890097833571968]],[60,"Fingers1_R",222,[[54,"Fingers2_R",-577,[1,0.0024803609121590853,-0.0011090633925050497,4.9960034784643064e-17]]],[1,0.0013398798182606697,1.1102229998097382e-18,2.8932013035332105e-12],[3,-1.0268690676414758e-8,-4.1971217162257e-9,0.37834661793140156,0.9256639977334487],[1,-0.0000012712012910317389,-1.2653603427533027e-14,44.46261181934115]],[15,"Scapula_L",110,[-578],[1,0.0009082318283617496,-0.0016960602952167392,0.0035904867108911276],[3,-0.6073310985082828,0.7485383169998342,0.16769391336460931,0.20668351697278872],[1,-67.68743656021654,109.01825758625266,-57.12977896045119]],[15,"Shoulder_L",224,[-579],[1,-0.002976213349029422,-2.2204459996194763e-18,-6.661337998858429e-18],[3,-0.08087501841085962,0.2535716049327198,-0.29290211802618116,0.9183512518773331],[1,-0.0000020023668605326484,30.871375957102188,-35.37948463187456]],[15,"Elbow_L",225,[-580],[1,-0.006145196035504341,2.1649348186097164e-17,2.5022001831631613e-11],[3,3.698432393575249e-24,7.844895137691728e-26,0.4660808189363135,0.8847421490014223],[1,6.556099890129191e-22,-3.352136588885891e-22,55.56038648837976]],[15,"Wrist_L",226,[-581],[1,-0.003922537434846163,1.1102230411687688e-17,-2.0801102160183937e-11],[3,-2.2213494740521317e-8,2.682952490230911e-9,-0.11990886018104767,0.9927849038185872],[1,-0.000002563978345591965,-1.238952164628575e-14,-13.773685345369223]],[60,"Fingers1_L",227,[[54,"Fingers2_L",-582,[1,-0.0024803609121590853,0.0011090633925050497,-1.7181324071802173e-11]]],[1,-0.0013398798182606697,3.3306689994292145e-18,-3.0510691195750894e-11],[3,1.202641542986473e-8,-1.7758621256120527e-8,0.5607324843663741,0.8279970295697404],[1,0.000006148774687692887,-0.0000066217698935251255,68.21293812945635]],[15,"Hip_L",75,[-583],[1,-0.00007880722841946408,0.0005406050477176905,0.003936111461371183],[3,-0.33800700071914674,0.9337119991241997,0.028422765236197228,0.11456577400194808],[1,-9.622341407618702,162.62735726022657,-38.65942560522658]],[15,"Knee_L",229,[-584],[1,-0.006485617719590664,-5.551114999048691e-19,1.1102229998097382e-18],[3,-1.7336686139568426e-19,-9.811546734126506e-18,-0.719488810323054,0.6945040329759912],[1,-179.99999999999997,-179.99999999999997,-87.97541642889963]],[15,"Ankle_L",230,[-585],[1,-0.006850753910839558,9.992007618673103e-18,7.77156120546332e-18],[3,-0.10166416476507739,0.05983485747743264,0.6161200500698334,0.7787684324208453],[1,-46.51448788453161,43.07919569002581,71.34531796373011]],[60,"Toes1_L",231,[[54,"Toes2_L",-586,[1,-0.0028587731067091227,0.0018769684247672558,2.8829636594673858e-11]]],[1,-0.003821877297013998,0,2.3568615808988724e-11],[3,-0.00020272489692942466,0.00016227147528271118,0.6862465063574965,0.727369002008413],[1,-0.5101740052366177,0.5068947396755507,86.66730611092152]],[36,"Cat_model",8,[[94,1,-587,[226,227,228,229],[95,true],8,230,231]]],[167,8,25,147,125,148],[49,"BgSound",9,[-588]],[108,true,false,235],[49,"catAngrySoound",9,[-589]],[62,false,237],[49,"electricSound",9,[-590]],[108,true,false,239],[49,"electric2Sund",9,[-591]],[62,false,241],[49,"winSound",9,[-592]],[62,false,243],[49,"loseSoound",9,[-593]],[62,false,245],[49,"eatSound",9,[-594]],[62,false,247],[49,"clockSound",9,[-595]],[62,false,249],[128,"Camera",4,[-596],[1,0,0,1000]],[162,0,3,240,2000,6,41943040,251,[4,4278190080]],[168,25],[129,"GameController","9fgkvo20FBAKynqRhhqW/W",14,[253]],[5,["c45rgHdxpZTpMuNOO3sYfa"]],[5,["79QUWxipRUxbjMc6R6NR7B"]],[5,["9cxAXifCRcI4K0dEbyj+yp"]],[5,["7f8l6VPatSC4F3hE0gXkzY"]],[5,["dbDyplvXZQOJ9fGtkLQbTw"]],[5,["603heDJEBTprOSXinozT0e"]],[88,"LaserController","252+iqgvVFK61BOQRNHXeq",14,[[198,-597,25,234,107,109,105,134,132,136,135,[139,140,141,142,143]]]],[88,"CubeController","b3nb8h/T5GgIPN/YxYu1K3",14,[[169,-598,[27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,16,16,59,60,61,62,63,64,65,66,67,68,69,70,71,72]]]],[88,"Responsive","93m7EM2HBCV798YB+7/26R",14,[[170,-599,112,147]]]],0,[0,-1,27,0,-2,28,0,-3,29,0,-4,93,0,-5,30,0,-6,31,0,-7,32,0,-8,33,0,-9,34,0,-10,35,0,-11,36,0,-12,37,0,-13,38,0,-14,39,0,-15,40,0,-16,41,0,-17,42,0,-18,43,0,-19,44,0,-20,45,0,-21,46,0,-22,47,0,-23,48,0,-24,49,0,-1,50,0,-2,51,0,-3,52,0,-4,53,0,-5,54,0,-6,55,0,-7,56,0,-8,57,0,-9,58,0,-10,16,0,-11,59,0,-12,60,0,-13,61,0,-14,62,0,-15,63,0,-16,64,0,-17,65,0,-18,66,0,-19,67,0,-20,68,0,-21,69,0,-22,70,0,-23,71,0,-24,72,0,0,4,0,19,252,0,0,4,0,0,4,0,-1,251,0,-2,112,0,-3,113,0,-4,114,0,-5,115,0,-6,76,0,-7,26,0,-8,77,0,-9,10,0,-10,120,0,-11,121,0,-1,80,0,-2,81,0,-3,82,0,-4,83,0,-5,84,0,-6,85,0,-7,86,0,-8,87,0,-9,88,0,-10,89,0,-11,90,0,-12,91,0,-13,92,0,-1,94,0,-2,95,0,-3,18,0,-4,165,0,-5,167,0,-6,125,0,-7,169,0,-8,170,0,-9,171,0,-10,172,0,-11,174,0,3,255,0,3,12,0,3,12,0,3,12,0,3,12,0,3,12,0,3,12,0,3,255,0,3,12,0,3,12,0,3,12,0,3,256,0,7,7,0,3,256,0,3,257,0,7,7,0,3,257,0,3,258,0,7,7,0,3,258,0,3,259,0,7,7,0,3,259,0,3,260,0,7,7,0,3,260,0,0,7,0,0,7,0,20,79,0,0,7,0,-1,79,0,16,7,0,0,8,0,0,8,0,0,8,0,-4,234,0,-1,75,0,-2,233,0,-3,146,0,-1,25,0,-1,235,0,-2,237,0,-3,239,0,-4,241,0,-5,243,0,-6,245,0,-7,247,0,-8,249,0,0,10,0,0,10,0,-1,117,0,-2,118,0,-3,78,0,-4,150,0,-5,151,0,-6,119,0,3,164,0,3,164,0,16,11,0,-1,147,0,-1,122,0,-2,154,0,-3,15,0,-4,144,0,-2,146,0,14,20,0,15,20,0,14,21,0,15,21,0,14,22,0,15,22,0,14,24,0,15,24,0,14,23,0,15,23,0,-2,254,0,-3,261,0,-4,262,0,-6,263,0,-1,123,0,-3,124,0,-5,103,0,-6,19,0,0,16,0,0,16,0,0,16,0,-1,158,0,-2,159,0,-3,160,0,-4,161,0,2,17,0,0,18,0,0,18,0,0,18,0,-1,163,0,-1,20,0,-2,21,0,-3,22,0,-4,23,0,-5,24,0,-1,139,0,-1,183,0,-2,185,0,-1,140,0,-1,187,0,-2,189,0,-1,141,0,-1,191,0,-2,193,0,-1,142,0,-1,195,0,-2,197,0,-1,143,0,-1,199,0,-2,201,0,0,26,0,0,26,0,-3,148,0,0,26,0,0,27,0,0,27,0,0,27,0,0,28,0,0,28,0,0,28,0,0,29,0,0,29,0,0,29,0,0,30,0,0,30,0,0,30,0,0,31,0,0,31,0,0,31,0,0,32,0,0,32,0,0,32,0,0,33,0,0,33,0,0,33,0,0,34,0,0,34,0,0,34,0,0,35,0,0,35,0,0,35,0,0,36,0,0,36,0,0,36,0,0,37,0,0,37,0,0,37,0,0,38,0,0,38,0,0,38,0,0,39,0,0,39,0,0,39,0,0,40,0,0,40,0,0,40,0,0,41,0,0,41,0,0,41,0,0,42,0,0,42,0,0,42,0,0,43,0,0,43,0,0,43,0,0,44,0,0,44,0,0,44,0,0,45,0,0,45,0,0,45,0,0,46,0,0,46,0,0,46,0,0,47,0,0,47,0,0,47,0,0,48,0,0,48,0,0,48,0,0,49,0,0,49,0,0,49,0,0,50,0,0,50,0,0,50,0,0,51,0,0,51,0,0,51,0,0,52,0,0,52,0,0,52,0,0,53,0,0,53,0,0,53,0,0,54,0,0,54,0,0,54,0,0,55,0,0,55,0,0,55,0,0,56,0,0,56,0,0,56,0,0,57,0,0,57,0,0,57,0,0,58,0,0,58,0,0,58,0,0,59,0,0,59,0,0,59,0,0,60,0,0,60,0,0,60,0,0,61,0,0,61,0,0,61,0,0,62,0,0,62,0,0,62,0,0,63,0,0,63,0,0,63,0,0,64,0,0,64,0,0,64,0,0,65,0,0,65,0,0,65,0,0,66,0,0,66,0,0,66,0,0,67,0,0,67,0,0,67,0,0,68,0,0,68,0,0,68,0,0,69,0,0,69,0,0,69,0,0,70,0,0,70,0,0,70,0,0,71,0,0,71,0,0,71,0,0,72,0,0,72,0,0,72,0,-1,132,0,-2,133,0,-3,134,0,-4,173,0,-1,135,0,-2,102,0,-3,136,0,-4,175,0,-1,203,0,-2,209,0,-3,213,0,-4,229,0,0,76,0,-1,149,0,-2,116,0,0,77,0,0,77,0,0,77,0,0,78,0,0,78,0,0,78,0,0,79,0,0,79,0,0,79,0,0,80,0,0,80,0,0,80,0,0,81,0,0,81,0,0,81,0,0,82,0,0,82,0,0,82,0,0,83,0,0,83,0,0,83,0,0,84,0,0,84,0,0,84,0,0,85,0,0,85,0,0,85,0,0,86,0,0,86,0,0,86,0,0,87,0,0,87,0,0,87,0,0,88,0,0,88,0,0,88,0,0,89,0,0,89,0,0,89,0,0,90,0,0,90,0,0,90,0,0,91,0,0,91,0,0,91,0,0,92,0,0,92,0,0,92,0,0,93,0,0,93,0,0,93,0,0,94,0,0,94,0,-1,157,0,0,95,0,-2,162,0,0,96,0,0,96,0,0,96,0,0,97,0,0,97,0,0,97,0,0,98,0,0,98,0,0,98,0,0,99,0,0,99,0,0,99,0,0,100,0,0,100,0,0,100,0,0,101,0,0,101,0,0,101,0,0,102,0,0,102,0,0,102,0,-1,176,0,-2,179,0,-3,182,0,-1,177,0,-2,105,0,-3,178,0,0,105,0,0,105,0,-1,107,0,-2,180,0,-3,181,0,0,107,0,0,107,0,-1,109,0,-2,137,0,-3,138,0,0,109,0,0,109,0,-1,216,0,-2,219,0,-3,224,0,0,112,0,0,112,0,0,113,0,0,113,0,0,114,0,0,114,0,0,115,0,0,115,0,0,116,0,0,116,0,0,116,0,0,117,0,0,117,0,0,118,0,0,118,0,0,119,0,0,119,0,0,119,0,0,120,0,0,120,0,0,121,0,-1,152,0,-2,153,0,0,122,0,0,123,0,0,123,0,-1,155,0,-2,156,0,-1,126,0,-1,130,0,-2,131,0,0,130,0,0,130,0,0,131,0,0,131,0,0,132,0,0,133,0,0,133,0,0,134,0,0,135,0,0,136,0,0,137,0,0,137,0,0,138,0,0,138,0,4,139,0,4,140,0,4,141,0,4,142,0,4,143,0,2,145,0,-2,218,0,16,146,0,0,149,0,0,149,0,0,150,0,0,150,0,0,151,0,0,151,0,0,152,0,0,152,0,0,153,0,0,153,0,0,154,0,0,157,0,2,158,0,2,159,0,2,160,0,2,161,0,0,162,0,0,163,0,-1,166,0,0,166,0,-1,168,0,0,168,0,0,173,0,0,175,0,0,177,0,0,178,0,0,180,0,0,181,0,-1,184,0,4,184,0,-1,186,0,4,186,0,-1,188,0,4,188,0,-1,190,0,4,190,0,-1,192,0,4,192,0,-1,194,0,4,194,0,-1,196,0,4,196,0,-1,198,0,4,198,0,-1,200,0,4,200,0,-1,202,0,4,202,0,-1,204,0,-1,205,0,-1,206,0,-1,207,0,-1,208,0,2,208,0,-1,210,0,-1,211,0,-1,212,0,2,212,0,-1,214,0,-1,215,0,-1,217,0,2,218,0,-1,220,0,-1,221,0,-1,222,0,-1,223,0,2,223,0,-1,225,0,-1,226,0,-1,227,0,-1,228,0,2,228,0,-1,230,0,-1,231,0,-1,232,0,2,232,0,0,233,0,-1,236,0,-1,238,0,-1,240,0,-1,242,0,-1,244,0,-1,246,0,-1,248,0,-1,250,0,-1,252,0,0,261,0,0,262,0,0,263,0,21,14,1,2,155,2,2,156,4,2,13,5,2,15,6,2,15,7,2,144,8,2,144,9,2,14,11,2,18,13,2,14,17,2,95,25,22,250,25,23,248,25,24,246,25,25,244,25,26,242,25,27,240,25,28,238,25,29,236,73,2,172,74,2,174,96,2,126,97,2,126,98,2,127,99,2,127,100,2,128,101,2,128,104,2,176,106,2,179,108,2,182,110,2,215,127,2,169,128,2,170,129,2,171,145,2,217,147,30,253,147,31,148,253,0,254,599],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,236,238,240,242,244,246,248,250],[-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,-1,1,17,7,7,7,7,-1,1,-1,13,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,5,-1,5,-1,5,-1,5,-1,5,-1,5,-1,5,-1,5,-1,5,-1,5,-1,5,-1,5,-1,5,-1,5,-1,5,-1,-2,-3,-4,1,11,17,-1,-2,13,6,6,6,6,6,6,-1,13,6,6,6,6,32,6,6,6,-1,13,-1,13,6,6,6,6,17,-1,1,7,7,7,7,7,33,34,10,10,10,10,10,10,10,10],[81,82,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,0,19,1,20,0,21,1,22,0,23,1,24,0,25,1,26,1,27,0,28,1,29,0,30,1,31,0,32,1,33,0,34,0,35,1,36,0,37,1,38,0,39,1,40,0,41,1,42,0,19,1,20,0,21,1,22,0,23,1,24,0,25,1,26,1,27,0,28,1,29,0,30,1,31,0,32,1,33,0,34,0,35,1,36,0,37,1,38,0,39,1,40,0,41,1,42,46,47,46,47,48,83,48,5,49,84,44,73,45,72,5,49,50,50,5,51,5,51,7,16,7,17,7,16,7,17,7,16,7,17,7,85,7,86,0,11,5,52,53,11,87,18,88,11,5,52,53,11,89,18,5,90,91,92,5,93,54,55,5,56,5,57,54,55,5,56,5,57,8,2,9,2,10,2,8,2,9,2,10,2,8,2,9,2,10,2,8,2,9,2,10,2,8,2,9,2,10,2,12,12,12,12,69,70,148,58,94,58,95,96,59,60,97,98,61,61,62,63,99,64,64,60,59,100,65,65,66,66,63,149,150,62,101,102,18,103,67,68,68,67,104,105,106,107,108,109,110,111,112,113]],[[[13,".bin",1324059261,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":77232,"length":22176,"count":5544,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":77232,"count":1609,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.020160561427474022,-0.0016125263646245003,-0.01934860460460186],"maxPosition",8,[1,0.025917362421751022,0.019485151395201683,0.017504869028925896]]],-1],0,0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["e71uS35VpPpbPKtBCx7x94"]}],[2],0,[],[],[]],[[{"name":"img_navigate","rect":{"x":2,"y":1,"width":416,"height":201},"offset":{"x":0,"y":0.5},"originalSize":{"width":420,"height":204},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[3],0,[0],[12],[151]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[{"base":"2,2,0,0,0,0","mipmaps":["edGoT/hLNPK7dChjeBJYcx"]}],[2],0,[],[],[]],[[[80,"angry_cat",".mp3",1.205333],-1],0,0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[[142,"CatEscape"],[35,"break_wall_",[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24]],[35,"break_wall_",[-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48]],[35,"break_wall_",[-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72]],[5,["d8s2smx0BGKZuCh9SYwYNL"]],[118,"Canvas2D",33554432,[-77,-78,-79,-80,-81,-82,-83,-84,-85,-86],[[31,-73,[5,320,480]],[143,-75,-74],[144,45,-2.842170943040401e-14,-2.842170943040401e-14,-76]],[1,160,239.99999999999997,0]],[119,"Wall",[-87,-88,-89,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99],[1,1,1.5,0.9999999999999998]],[174,"Deer_Cat",[-108,-109,-110],[[180,-100,[316,317,318],319],[26,-101,[1,0,0.02,0.004],[1,0.033,0.04,0.043]],[149,100,-102,[1,1,0,1]],[167,-107,-106,-105,-104,-103]],[1,-7.64,0,2.195],[3,0,0.7071067811865475,0,0.7071067811865476],[1,30,30,30],[1,0,89.99999999999999,0]],[35,"Room",[-111,-112,-113,-114,-115,-116,-117,-118,-119,-120,-121]],[98,0,null,[93,"c45rgHdxpZTpMuNOO3sYfa",-156,[192,"feCa6PK4lEW5VKG1TRy70e",null,[[146,[5,["c45rgHdxpZTpMuNOO3sYfa"]],[-155]]],[[147,[5,["c45rgHdxpZTpMuNOO3sYfa"]],[[26,-148,[1,0,0.05,0],[1,0.05,0.1,0.05]],[56,16,100,-149,[1,1,0,1],[1,1,0,1]],[194,-154,-153,-152,-151,-150]]]],[[11,"police_Base",["_name"],[5,["c45rgHdxpZTpMuNOO3sYfa"]]],[48,["_lpos"],[5,["c45rgHdxpZTpMuNOO3sYfa"]],[1,-3.5,0,2.1]],[48,["_lrot"],[5,["c45rgHdxpZTpMuNOO3sYfa"]],[3,0,0.7071067811865475,0,0.7071067811865476]],[48,["_euler"],[5,["c45rgHdxpZTpMuNOO3sYfa"]],[1,0,90,0]],[57,["_lscale"],-122,[1,30,30,30]],[12,3,["_clips","length"],-123],[61,["_clips","0"],-124,320],[61,["_clips","1"],-125,321],[61,["_clips","2"],-126,322],[61,["_clips","3"],-127,323],[61,["_defaultClip"],-128,324],[12,true,["_active"],-129],[12,0,["_sockets","length"],-130],[83,["_sockets","0"],-131,[106,"Root_M/Spine1_M/Spine2_M/Chest_M/Scapula_R/Shoulder_R/ShoulderPart1_R/Elbow_R/ElbowPart1_R/Wrist_R/MiddleFinger1_R/MiddleFinger2_R/MiddleFinger3_R"]],[12,true,["playOnLoad"],-132],[12,1,["_shadowCastingMode"],-133],[73,["_skinningRoot"],-135,-134],[12,1,["_shadowCastingMode"],-136],[73,["_skinningRoot"],-138,-137],[12,1,["_shadowCastingMode"],-139],[73,["_skinningRoot"],-141,-140],[12,1,["_shadowCastingMode"],-142],[73,["_skinningRoot"],-144,-143],[12,1,["_shadowCastingMode"],-145],[73,["_skinningRoot"],-147,-146]]],274]],[103,"AudioManager","91MUdo8mRCu5o6mQ9zrX1M",[-158,-159,-160,-161,-162,-163,-164,-165],[-157]],[99,"CTA",33554432,5,[-168,-169,-170,-171,-172,-173],[[96,-166],[113,-167,[295],296]]],[98,0,{},[93,"f6h5JTA61Krp7fpJXxRpdl",-176,[145,"0aRJjUW8ZPNJ2S45jl1QOw",null,[[11,"Walk Break",["_name"],[5,["f6h5JTA61Krp7fpJXxRpdl"]]],[48,["_lpos"],[5,["f6h5JTA61Krp7fpJXxRpdl"]],[1,0,0.017,0]],[48,["_lrot"],[5,["f6h5JTA61Krp7fpJXxRpdl"]],[3,0.7071067811865475,0,0,0.7071067811865476]],[48,["_euler"],[5,["f6h5JTA61Krp7fpJXxRpdl"]],[1,90,0,0]],[11,1,["_simulationSpace"],[5,["b2Z3tunMxD543DLFEf8MY1"]]],[48,["_lscale"],[5,["f6h5JTA61Krp7fpJXxRpdl"]],[1,1,1,1]],[11,true,["loop"],[5,["d6dNQQc1JJ872kZBLdCYV/"]]],[11,true,["loop"],[5,["b2Z3tunMxD543DLFEf8MY1"]]],[11,true,["loop"],[5,["d8s2smx0BGKZuCh9SYwYNL"]]],[11,0,["scaleSpace"],[5,["b2Z3tunMxD543DLFEf8MY1"]]],[11,0,["scaleSpace"],[5,["d6dNQQc1JJ872kZBLdCYV/"]]],[11,0,["scaleSpace"],[5,["d8s2smx0BGKZuCh9SYwYNL"]]],[48,["_lscale"],[5,["ec12r82KpHmrFyR4IuXAYD"]],[1,0.007,0.007,0.007]],[48,["_lpos"],[5,["ec12r82KpHmrFyR4IuXAYD"]],[1,0,0,0.013]],[11,true,["playOnAwake"],[5,["d6dNQQc1JJ872kZBLdCYV/"]]],[11,2,["_materials","length"],[5,["d6dNQQc1JJ872kZBLdCYV/"]]],[11,null,["_materials","1"],[5,["d6dNQQc1JJ872kZBLdCYV/"]]],[11,0.25,["duration"],[5,["d6dNQQc1JJ872kZBLdCYV/"]]],[11,0.3,["startSizeX","constantMin"],[5,["d6dNQQc1JJ872kZBLdCYV/"]]],[11,2,["startSizeX","constantMax"],[5,["d6dNQQc1JJ872kZBLdCYV/"]]],[11,0.35,["simulationSpeed"],[5,["d6dNQQc1JJ872kZBLdCYV/"]]],[11,6.283185307179586,["startRotationZ","constantMin"],[5,["d6dNQQc1JJ872kZBLdCYV/"]]],[11,0,["gravityModifier","constant"],[5,["d6dNQQc1JJ872kZBLdCYV/"]]],[11,false,["startSize3D"],[5,["d6dNQQc1JJ872kZBLdCYV/"]]],[11,2,["startSpeed","constant"],[5,["d6dNQQc1JJ872kZBLdCYV/"]]],[11,0.6,["startLifetime","constantMax"],[5,["d6dNQQc1JJ872kZBLdCYV/"]]],[11,6.283185307179586,["startRotationZ","constantMax"],[5,["d6dNQQc1JJ872kZBLdCYV/"]]],[11,true,["_textureAnimationModule","_enable"],[5,["d6dNQQc1JJ872kZBLdCYV/"]]],[89,["renderer","_mainTexture"],[5,["d6dNQQc1JJ872kZBLdCYV/"]],182],[11,true,["_limitVelocityOvertimeModule","_enable"],[5,["d6dNQQc1JJ872kZBLdCYV/"]]],[11,false,["_trailModule","_enable"],[5,["d6dNQQc1JJ872kZBLdCYV/"]]],[11,0,["_simulationSpace"],[5,["d8s2smx0BGKZuCh9SYwYNL"]]],[11,true,["playOnAwake"],[5,["d8s2smx0BGKZuCh9SYwYNL"]]],[57,["_lpos"],-174,[1,0,0,0.017]],[89,["_materials","0"],[5,["d8s2smx0BGKZuCh9SYwYNL"]],183],[61,["renderer","_mainTexture"],4,184],[89,["_materials","0"],[5,["d6dNQQc1JJ872kZBLdCYV/"]],185],[11,0,["_simulationSpace"],[5,["d6dNQQc1JJ872kZBLdCYV/"]]],[12,0.10039999999999999,["_colorOverLifetimeModule","color","gradient","colorKeys","1","time"],4],[12,0.9352678571428571,["_colorOverLifetimeModule","color","gradient","alphaKeys","1","time"],4],[12,4,["_colorOverLifetimeModule","color","gradient","colorKeys","length"],4],[83,["_colorOverLifetimeModule","color","gradient","colorKeys","2"],4,[104,0.2701]],[83,["_colorOverLifetimeModule","color","gradient","colorKeys","3"],4,[16,1,[4,4278190335]]],[57,["_colorOverLifetimeModule","color","gradient","colorKeys","1","color"],4,[4,4284012543]],[12,0.2,["duration"],4],[12,0.1,["simulationSpeed"],4],[57,["startColor","color"],4,[4,2533359615]],[12,false,["startRotation3D"],4],[12,6.283185307179586,["startRotationZ","constant"],4],[57,["_lscale"],-175,[1,0.016,0.016,0.016]],[12,3,["startRotationZ","mode"],4],[12,6.283185307179586,["startRotationZ","constantMin"],4],[12,6.283185307179586,["startRotationZ","constantMax"],4],[12,3,["startLifetime","mode"],4],[12,0.2,["startLifetime","constantMin"],4],[12,0.6,["startLifetime","constantMax"],4],[12,0.8883928571428572,["_colorOverLifetimeModule","color","gradient","alphaKeys","0","time"],4],[12,255,["_colorOverLifetimeModule","color","gradient","alphaKeys","0","alpha"],4],[12,255,["_colorOverLifetimeModule","color","gradient","alphaKeys","1","alpha"],4],[12,3,["_colorOverLifetimeModule","color","gradient","alphaKeys","length"],4],[83,["_colorOverLifetimeModule","color","gradient","alphaKeys","2"],4,[105,255,0.9910714285714286]],[12,0.2,["startSpeed","constant"],4]]],181]],[5,["ef7win4PBfzYC323/PxlPf"]],[103,"GameNode","2dHAV5VQFGj4wTXC++MSEv",[-178,-179,-180,-181,5],[-177]],[159,10],[151,"CatEscape",[14,-192,-193,-194,10,-195],[132,"f82590ab-7475-4b63-9a96-e8c0a6a65b85",[[50,["_trailModule","_particleSystem"],12,[5,["b2Z3tunMxD543DLFEf8MY1"]],12,[5,["b2Z3tunMxD543DLFEf8MY1"]]],[50,["_trailModule","_particleSystem"],12,[5,["d6dNQQc1JJ872kZBLdCYV/"]],12,[5,["d6dNQQc1JJ872kZBLdCYV/"]]],[50,["_trailModule","_particleSystem"],12,[5,["d8s2smx0BGKZuCh9SYwYNL"]],12,[5,["d8s2smx0BGKZuCh9SYwYNL"]]],[50,["_trailModule","_particleSystem"],-183,[5,["5cc7kqZIFB1br2814jbBtQ"]],-182,[5,["5cc7kqZIFB1br2814jbBtQ"]]],[50,["_trailModule","_particleSystem"],-185,[5,["5cc7kqZIFB1br2814jbBtQ"]],-184,[5,["5cc7kqZIFB1br2814jbBtQ"]]],[50,["_trailModule","_particleSystem"],-187,[5,["5cc7kqZIFB1br2814jbBtQ"]],-186,[5,["5cc7kqZIFB1br2814jbBtQ"]]],[50,["_trailModule","_particleSystem"],-189,[5,["5cc7kqZIFB1br2814jbBtQ"]],-188,[5,["5cc7kqZIFB1br2814jbBtQ"]]],[50,["_trailModule","_particleSystem"],-191,[5,["5cc7kqZIFB1br2814jbBtQ"]],-190,[5,["5cc7kqZIFB1br2814jbBtQ"]]]],[12,9]],[152,[153,0.5208,[2,0.23529411764705882,0.3607843137254902,0.796078431372549,0.520833125],[2,0.23529411764705882,0.3607843137254902,0.796078431372549,1],[2,0.519964,0.630786,0.905039,0.5208],[2,0.519544,0.630484,0.905069,0]],[154,1,true,2,0.05,0.4,0.2,30,2000,10,0.36,[4,4283190348],[0,2048,2048]],[155,true,325,326],[156],[157]]],[53,"Environment",14,[-196,6,-197,8,-198,-199]],[4,"break_wall.009",2,[[3,1,-200,[94],[1],95],[8,4,-201],[6,-202,[1,0.005,0.005,0.005]]],[1,-0.012499326840043068,0.007452864665538073,-0.000001718401563266525]],[126,"carpet1",[[-203,-204,-205,-206,[66,"transform1",-207]],1,1,1,1,4]],[100,"Food",8,[-211,12],[[3,1,-208,[186],[95,true],187],[26,-209,[1,0,0.002,0],[1,0.00944,0.0035,0.006958]],[90,true,-210,[188],189]],[1,-2.135,0.365,0.36],[1,150,150,150]],[53,"Effects",17,[-212,-213,-214,-215,-216]],[68,"Electric_1",21,[-218,-219],[-217],[1,2.87,1.145,4.176],[3,0.7071067811865475,0,0,0.7071067811865476],[1,0.26,0.26000000000000006,0.26000000000000006],[1,89.99999999999999,0,0]],[68,"Electric_2",21,[-221,-222],[-220],[1,2.87,1.142,0.299],[3,0.7071067811865475,0,0,0.7071067811865476],[1,0.26,0.26000000000000006,0.26000000000000006],[1,89.99999999999999,0,0]],[68,"Electric_3",21,[-224,-225],[-223],[1,2.87,1.303,2.125],[3,0.7071067811865475,0,0,0.7071067811865476],[1,0.26,0.26000000000000006,0.26000000000000006],[1,89.99999999999999,0,0]],[68,"Electric_4",21,[-227,-228],[-226],[1,2.87,0.108,1.03],[3,0.7071067811865475,0,0,0.7071067811865476],[1,0.26,0.26000000000000006,0.26000000000000006],[1,89.99999999999999,0,0]],[68,"Electric_5",21,[-230,-231],[-229],[1,2.87,0.076,3.149],[3,0.7071067811865475,0,0,0.7071067811865476],[1,0.26,0.26000000000000006,0.26000000000000006],[1,89.99999999999999,0,0]],[130,"JoyStick",33554432,5,[[[31,-232,[5,80,80]],[114,0,-233,300],-234,[107,0,-235]],4,4,1,4],[1,0,-130,0]],[4,"break_wall",1,[[3,1,-236,[28],[1],29],[6,-237,[1,0.005,0.005,0.005]],[8,4,-238]],[1,-0.017498958855867386,0.012452497147023678,-0.0000017197428405779647]],[4,"break_wall.001",1,[[3,1,-239,[30],[1],31],[6,-240,[1,0.005,0.005,0.005]],[8,4,-241]],[1,-0.012499326840043068,0.012452497147023678,-0.000001718401563266525]],[4,"break_wall.002",1,[[3,1,-242,[32],[1],33],[6,-243,[1,0.005,0.005,0.005]],[8,4,-244]],[1,-0.007499693427234888,0.012452497147023678,-0.000001718401563266525]],[4,"break_wall.004",1,[[3,1,-245,[36],[1],37],[6,-246,[1,0.005,0.005,0.005]],[8,4,-247]],[1,0.0024995713029056787,0.012452497147023678,-0.000001718401563266525]],[4,"break_wall.005",1,[[3,1,-248,[38],[1],39],[6,-249,[1,0.005,0.005,0.005]],[8,4,-250]],[1,0.007499203085899353,0.012452497147023678,-0.000001718401563266525]],[4,"break_wall.006",1,[[3,1,-251,[40],[1],41],[6,-252,[1,0.005,0.005,0.005]],[8,4,-253]],[1,0.012498835101723671,0.012452497147023678,-0.000001718401563266525]],[4,"break_wall.007",1,[[3,1,-254,[42],[1],43],[6,-255,[1,0.005,0.005,0.005]],[8,4,-256]],[1,0.017498468980193138,0.012452497147023678,-0.000001718401563266525]],[4,"break_wall.008",1,[[3,1,-257,[44],[1],45],[6,-258,[1,0.005,0.005,0.005]],[8,4,-259]],[1,-0.017498958855867386,0.007452864665538073,-0.000001718401563266525]],[4,"break_wall.009",1,[[3,1,-260,[46],[1],47],[6,-261,[1,0.005,0.005,0.005]],[8,4,-262]],[1,-0.012499326840043068,0.007452864665538073,-0.000001718401563266525]],[4,"break_wall.010",1,[[3,1,-263,[48],[1],49],[6,-264,[1,0.005,0.005,0.005]],[8,4,-265]],[1,-0.007499693427234888,0.007452864665538073,-0.000001718401563266525]],[4,"break_wall.011",1,[[3,1,-266,[50],[1],51],[6,-267,[1,0.005,0.005,0.005]],[8,4,-268]],[1,-0.0025000611785799265,0.007452864665538073,-0.000001718401563266525]],[4,"break_wall.012",1,[[3,1,-269,[52],[1],53],[6,-270,[1,0.005,0.005,0.005]],[8,4,-271]],[1,0.0024995713029056787,0.007452864665538073,-0.000001718401563266525]],[4,"break_wall.013",1,[[3,1,-272,[54],[1],55],[6,-273,[1,0.005,0.005,0.005]],[8,4,-274]],[1,0.007499203085899353,0.007452864665538073,-0.000001718401563266525]],[4,"break_wall.014",1,[[3,1,-275,[56],[1],57],[6,-276,[1,0.005,0.005,0.005]],[8,4,-277]],[1,0.012498835101723671,0.007452864665538073,-0.000001718401563266525]],[4,"break_wall.015",1,[[3,1,-278,[58],[1],59],[6,-279,[1,0.005,0.005,0.005]],[8,4,-280]],[1,0.017498468980193138,0.007452864665538073,-0.000001718401563266525]],[4,"break_wall.016",1,[[3,1,-281,[60],[1],61],[6,-282,[1,0.005,0.005,0.005]],[8,4,-283]],[1,-0.017498958855867386,0.0024532328825443983,-0.000001718401563266525]],[4,"break_wall.017",1,[[3,1,-284,[62],[1],63],[6,-285,[1,0.005,0.005,0.005]],[8,4,-286]],[1,-0.012499326840043068,0.0024532328825443983,-0.000001718401563266525]],[4,"break_wall.018",1,[[3,1,-287,[64],[1],65],[6,-288,[1,0.005,0.005,0.005]],[8,4,-289]],[1,-0.007499693427234888,0.0024532328825443983,-0.000001718401563266525]],[4,"break_wall.019",1,[[3,1,-290,[66],[1],67],[6,-291,[1,0.005,0.005,0.005]],[8,4,-292]],[1,-0.0025000611785799265,0.0024532328825443983,-0.000001718401563266525]],[4,"break_wall.020",1,[[3,1,-293,[68],[1],69],[6,-294,[1,0.005,0.005,0.005]],[8,4,-295]],[1,0.0024995713029056787,0.0024532328825443983,-0.000001718401563266525]],[4,"break_wall.021",1,[[3,1,-296,[70],[1],71],[6,-297,[1,0.005,0.005,0.005]],[8,4,-298]],[1,0.007499203085899353,0.0024532328825443983,-0.000001718401563266525]],[4,"break_wall.022",1,[[3,1,-299,[72],[1],73],[6,-300,[1,0.005,0.005,0.005]],[8,4,-301]],[1,0.012498835101723671,0.0024532328825443983,-0.000001718401563266525]],[4,"break_wall.023",1,[[3,1,-302,[74],[1],75],[6,-303,[1,0.005,0.005,0.005]],[8,4,-304]],[1,0.017498468980193138,0.0024532328825443983,-0.000001718401563266525]],[4,"break_wall",2,[[3,1,-305,[76],[1],77],[8,4,-306],[6,-307,[1,0.005,0.005,0.005]]],[1,-0.017498958855867386,0.012452497147023678,-0.0000017197428405779647]],[4,"break_wall.001",2,[[3,1,-308,[78],[1],79],[8,4,-309],[6,-310,[1,0.005,0.005,0.005]]],[1,-0.012499326840043068,0.012452497147023678,-0.000001718401563266525]],[4,"break_wall.002",2,[[3,1,-311,[80],[1],81],[8,4,-312],[6,-313,[1,0.005,0.005,0.005]]],[1,-0.007499693427234888,0.012452497147023678,-0.000001718401563266525]],[4,"break_wall.003",2,[[3,1,-314,[82],[1],83],[8,4,-315],[6,-316,[1,0.005,0.005,0.005]]],[1,-0.0025000611785799265,0.012452497147023678,-0.000001718401563266525]],[4,"break_wall.004",2,[[3,1,-317,[84],[1],85],[8,4,-318],[6,-319,[1,0.005,0.005,0.005]]],[1,0.0024995713029056787,0.012452497147023678,-0.000001718401563266525]],[4,"break_wall.005",2,[[3,1,-320,[86],[1],87],[8,4,-321],[6,-322,[1,0.005,0.005,0.005]]],[1,0.007499203085899353,0.012452497147023678,-0.000001718401563266525]],[4,"break_wall.006",2,[[3,1,-323,[88],[1],89],[8,4,-324],[6,-325,[1,0.005,0.005,0.005]]],[1,0.012498835101723671,0.012452497147023678,-0.000001718401563266525]],[4,"break_wall.007",2,[[3,1,-326,[90],[1],91],[8,4,-327],[6,-328,[1,0.005,0.005,0.005]]],[1,0.017498468980193138,0.012452497147023678,-0.000001718401563266525]],[4,"break_wall.008",2,[[3,1,-329,[92],[1],93],[8,4,-330],[6,-331,[1,0.005,0.005,0.005]]],[1,-0.017498958855867386,0.007452864665538073,-0.000001718401563266525]],[4,"break_wall.010",2,[[3,1,-332,[96],[1],97],[8,4,-333],[6,-334,[1,0.005,0.005,0.005]]],[1,-0.007499693427234888,0.007452864665538073,-0.000001718401563266525]],[4,"break_wall.011",2,[[3,1,-335,[98],[1],99],[8,4,-336],[6,-337,[1,0.005,0.005,0.005]]],[1,-0.0025000611785799265,0.007452864665538073,-0.000001718401563266525]],[4,"break_wall.012",2,[[3,1,-338,[100],[1],101],[8,4,-339],[6,-340,[1,0.005,0.005,0.005]]],[1,0.0024995713029056787,0.007452864665538073,-0.000001718401563266525]],[4,"break_wall.013",2,[[3,1,-341,[102],[1],103],[8,4,-342],[6,-343,[1,0.005,0.005,0.005]]],[1,0.007499203085899353,0.007452864665538073,-0.000001718401563266525]],[4,"break_wall.014",2,[[3,1,-344,[104],[1],105],[8,4,-345],[6,-346,[1,0.005,0.005,0.005]]],[1,0.012498835101723671,0.007452864665538073,-0.000001718401563266525]],[4,"break_wall.015",2,[[3,1,-347,[106],[1],107],[8,4,-348],[6,-349,[1,0.005,0.005,0.005]]],[1,0.017498468980193138,0.007452864665538073,-0.000001718401563266525]],[4,"break_wall.016",2,[[3,1,-350,[108],[1],109],[8,4,-351],[6,-352,[1,0.005,0.005,0.005]]],[1,-0.017498958855867386,0.0024532328825443983,-0.000001718401563266525]],[4,"break_wall.017",2,[[3,1,-353,[110],[1],111],[8,4,-354],[6,-355,[1,0.005,0.005,0.005]]],[1,-0.012499326840043068,0.0024532328825443983,-0.000001718401563266525]],[4,"break_wall.018",2,[[3,1,-356,[112],[1],113],[8,4,-357],[6,-358,[1,0.005,0.005,0.005]]],[1,-0.007499693427234888,0.0024532328825443983,-0.000001718401563266525]],[4,"break_wall.019",2,[[3,1,-359,[114],[1],115],[8,4,-360],[6,-361,[1,0.005,0.005,0.005]]],[1,-0.0025000611785799265,0.0024532328825443983,-0.000001718401563266525]],[4,"break_wall.020",2,[[3,1,-362,[116],[1],117],[8,4,-363],[6,-364,[1,0.005,0.005,0.005]]],[1,0.0024995713029056787,0.0024532328825443983,-0.000001718401563266525]],[4,"break_wall.021",2,[[3,1,-365,[118],[1],119],[8,4,-366],[6,-367,[1,0.005,0.005,0.005]]],[1,0.007499203085899353,0.0024532328825443983,-0.000001718401563266525]],[4,"break_wall.022",2,[[3,1,-368,[120],[1],121],[8,4,-369],[6,-370,[1,0.005,0.005,0.005]]],[1,0.012498835101723671,0.0024532328825443983,-0.000001718401563266525]],[4,"break_wall.023",2,[[3,1,-371,[122],[1],123],[8,4,-372],[6,-373,[1,0.005,0.005,0.005]]],[1,0.017498468980193138,0.0024532328825443983,-0.000001718401563266525]],[4,"break_wall.015",3,[[3,1,-374,[154],[1],155],[8,4,-375],[6,-376,[1,0.005,0.005,0.005]]],[1,0.017498468980193138,0.007452864665538073,-0.000001718401563266525]],[35,"Laser_Button",[-377,-378,-379,-380]],[35,"Laser_Button",[-381,-382,-383,-384]],[41,"Vision",9,[[91,"Quad<ModelComponent>",-385,[275],[1],276],[148,-386,[1,0,0,0.3]],[150,false,32,10000,-387,[1,0,1,0]]],[1,0,0.001,0.042],[3,-0.7071067811865475,0,0,0.7071067811865476],[1,0.08,0.08,0.833333],[1,-90,0,0]],[196,14,15,7,5,27,11],[99,"Navigate",33554432,5,[-389,-390],[[96,-388]]],[110,"Point",33554432,5,[[31,-391,[5,40,40]],[85,0,-392,[4,4279177021],285],[107,0,-393]],[1,0,-130,0]],[34,"tryBtn",33554432,11,[[31,-394,[5,373,167]],[79,-395,[4,16777215],288],[160,3,1.1,-396,289]],[1,0,-162.034,0],[1,0.4,0.4,1]],[92,"fakeBG",33554432,5,[[31,-397,[5,5000,5000]],[85,0,-398,[4,39423],297],[113,-399,[298],299]]],[15,"Root_M",7,[-400,-401,-402,-403],[1,1.0018953194960331e-25,0.01481025293469429,-0.0051376777701079845],[3,0.6968476547856595,-0.12001394093906889,0.6968476547856595,-0.12001394093906889],[1,180,-90,-19.543700609739705]],[34,"Cube1",8388608,6,[[33,"Cube<ModelComponent>",1,-404,[2],[1],3],[47,-405],[32,2,2,-406]],[1,0,0.5,-5],[1,20,2,0.25]],[34,"Cube2",8388608,6,[[33,"Cube<ModelComponent>",1,-407,[4],[1],5],[6,-408,[1,1,1.1,2]],[32,2,2,-409]],[1,-2,0.5,4.873],[1,16,2,0.25]],[111,"Cube3",8388608,6,[[91,"Cube<ModelComponent>",-410,[6],[1],7],[47,-411],[32,2,2,-412]],[1,9.873,0.5,2.466],[3,0,0.7071067811865475,0,0.7071067811865477],[1,5,2,0.25],[1,0,89.99999999999999,0]],[111,"Cube4",8388608,6,[[33,"Cube<ModelComponent>",1,-413,[8],[1],9],[6,-414,[1,1,1,2]],[32,2,2,-415]],[1,-9.876,0.5,-0.032],[3,0,0.7071067811865475,0,0.7071067811865476],[1,10,2,0.25],[1,0,89.99999999999999,0]],[86,"Cube5",6,[[33,"Cube<ModelComponent>",1,-416,[10],[1],11],[6,-417,[1,1,1,1.5]],[32,2,2,-418]],[1,-7.329,0.5,-0.801],[1,5,2,0.35]],[41,"Cube8",6,[[33,"Cube<ModelComponent>",1,-419,[12],[1],13],[6,-420,[1,1,1,1.5]],[32,2,2,-421]],[1,-5,0.5,0.115],[3,0,0.7071067811865475,0,0.7071067811865477],[1,1.8,2,0.35],[1,0,89.99999999999999,0]],[41,"Cube9",6,[[33,"Cube<ModelComponent>",1,-422,[14],[1],15],[47,-423],[32,2,2,-424]],[1,-5,0.5,4.06],[3,0,0.7071067811865475,0,0.7071067811865477],[1,1.8,2,0.35],[1,0,89.99999999999999,0]],[86,"Cube10",6,[[33,"Cube<ModelComponent>",1,-425,[16],[1],17],[47,-426],[32,2,2,-427]],[1,2.428,0.5,-0.846],[1,4.8,2,0.35]],[41,"Cube11",6,[[33,"Cube<ModelComponent>",1,-428,[18],[1],19],[47,-429],[32,2,2,-430]],[1,8.367,0.5,-0.846],[3,0,1,0,6.123233995736766e-17],[1,2.8,2,0.35],[1,0,180,0]],[41,"Cube19",6,[[33,"Cube<ModelComponent>",1,-431,[20],[1],21],[47,-432],[32,2,2,-433]],[1,9.873,0.5,-2.469],[3,0,0.7071067811865475,0,0.7071067811865477],[1,5,2,0.25],[1,0,89.99999999999999,0]],[41,"Cube20",6,[[33,"Cube<ModelComponent>",1,-434,[22],[1],23],[47,-435],[32,2,2,-436]],[1,1.246,0.5,4.095],[3,-6.5420519111824014e-18,0.7071067811865475,1.4719616800160387e-17,0.7071067811865476],[1,1.8,2,0.35],[1,-1.7228004524594049e-15,89.99999999999999,6.626155586382319e-16]],[41,"Cube21",6,[[33,"Cube<ModelComponent>",1,-437,[24],[1],25],[47,-438],[32,2,2,-439]],[1,1.246,0.5,0.066],[3,-6.5420519111824014e-18,0.7071067811865475,1.4719616800160387e-17,0.7071067811865476],[1,1.8,2,0.35],[1,-1.7228004524594049e-15,89.99999999999999,6.626155586382319e-16]],[41,"Cube12",6,[[33,"Cube<ModelComponent>",1,-440,[26],[1],27],[47,-441],[32,2,2,-442]],[1,9.7,0.5,4.873],[3,-1.5034270125132327e-17,1,-4.440904908137276e-33,6.123233995736767e-17],[1,0.6,2,0.25],[1,4.033991139266958e-31,180,-1.7228004524594049e-15]],[53,"BreakWalls",17,[-443,-444,-445]],[4,"break_wall.003",1,[[3,1,-446,[34],[1],35],[6,-447,[1,0.005,0.005,0.005]],[8,4,-448]],[1,-0.0025000611785799265,0.012452497147023678,-0.000001718401563266525]],[4,"break_wall",3,[[3,1,-449,[124],[1],125],[8,4,-450],[6,-451,[1,0.005,0.005,0.005]]],[1,-0.017498958855867386,0.012452497147023678,-0.0000017197428405779647]],[4,"break_wall.001",3,[[3,1,-452,[126],[1],127],[8,4,-453],[6,-454,[1,0.005,0.005,0.005]]],[1,-0.012499326840043068,0.012452497147023678,-0.000001718401563266525]],[4,"break_wall.002",3,[[3,1,-455,[128],[1],129],[8,4,-456],[6,-457,[1,0.005,0.005,0.005]]],[1,-0.007499693427234888,0.012452497147023678,-0.000001718401563266525]],[4,"break_wall.003",3,[[3,1,-458,[130],[1],131],[8,4,-459],[6,-460,[1,0.005,0.005,0.005]]],[1,-0.0025000611785799265,0.012452497147023678,-0.000001718401563266525]],[4,"break_wall.004",3,[[3,1,-461,[132],[1],133],[8,4,-462],[6,-463,[1,0.005,0.005,0.005]]],[1,0.0024995713029056787,0.012452497147023678,-0.000001718401563266525]],[4,"break_wall.005",3,[[3,1,-464,[134],[1],135],[8,4,-465],[6,-466,[1,0.005,0.005,0.005]]],[1,0.007499203085899353,0.012452497147023678,-0.000001718401563266525]],[4,"break_wall.006",3,[[3,1,-467,[136],[1],137],[8,4,-468],[6,-469,[1,0.005,0.005,0.005]]],[1,0.012498835101723671,0.012452497147023678,-0.000001718401563266525]],[4,"break_wall.007",3,[[3,1,-470,[138],[1],139],[8,4,-471],[6,-472,[1,0.005,0.005,0.005]]],[1,0.017498468980193138,0.012452497147023678,-0.000001718401563266525]],[4,"break_wall.008",3,[[3,1,-473,[140],[1],141],[8,4,-474],[6,-475,[1,0.005,0.005,0.005]]],[1,-0.017498958855867386,0.007452864665538073,-0.000001718401563266525]],[4,"break_wall.009",3,[[3,1,-476,[142],[1],143],[8,4,-477],[6,-478,[1,0.005,0.005,0.005]]],[1,-0.012499326840043068,0.007452864665538073,-0.000001718401563266525]],[4,"break_wall.010",3,[[3,1,-479,[144],[1],145],[8,4,-480],[6,-481,[1,0.005,0.005,0.005]]],[1,-0.007499693427234888,0.007452864665538073,-0.000001718401563266525]],[4,"break_wall.011",3,[[3,1,-482,[146],[1],147],[8,4,-483],[6,-484,[1,0.005,0.005,0.005]]],[1,-0.0025000611785799265,0.007452864665538073,-0.000001718401563266525]],[4,"break_wall.012",3,[[3,1,-485,[148],[1],149],[8,4,-486],[6,-487,[1,0.005,0.005,0.005]]],[1,0.0024995713029056787,0.007452864665538073,-0.000001718401563266525]],[4,"break_wall.013",3,[[3,1,-488,[150],[1],151],[8,4,-489],[6,-490,[1,0.005,0.005,0.005]]],[1,0.007499203085899353,0.007452864665538073,-0.000001718401563266525]],[4,"break_wall.014",3,[[3,1,-491,[152],[1],153],[8,4,-492],[6,-493,[1,0.005,0.005,0.005]]],[1,0.012498835101723671,0.007452864665538073,-0.000001718401563266525]],[4,"break_wall.016",3,[[3,1,-494,[156],[1],157],[8,4,-495],[6,-496,[1,0.005,0.005,0.005]]],[1,-0.017498958855867386,0.0024532328825443983,-0.000001718401563266525]],[4,"break_wall.017",3,[[3,1,-497,[158],[1],159],[8,4,-498],[6,-499,[1,0.005,0.005,0.005]]],[1,-0.012499326840043068,0.0024532328825443983,-0.000001718401563266525]],[4,"break_wall.018",3,[[3,1,-500,[160],[1],161],[8,4,-501],[6,-502,[1,0.005,0.005,0.005]]],[1,-0.007499693427234888,0.0024532328825443983,-0.000001718401563266525]],[4,"break_wall.019",3,[[3,1,-503,[162],[1],163],[8,4,-504],[6,-505,[1,0.005,0.005,0.005]]],[1,-0.0025000611785799265,0.0024532328825443983,-0.000001718401563266525]],[4,"break_wall.020",3,[[3,1,-506,[164],[1],165],[8,4,-507],[6,-508,[1,0.005,0.005,0.005]]],[1,0.0024995713029056787,0.0024532328825443983,-0.000001718401563266525]],[4,"break_wall.021",3,[[3,1,-509,[166],[1],167],[8,4,-510],[6,-511,[1,0.005,0.005,0.005]]],[1,0.007499203085899353,0.0024532328825443983,-0.000001718401563266525]],[4,"break_wall.022",3,[[3,1,-512,[168],[1],169],[8,4,-513],[6,-514,[1,0.005,0.005,0.005]]],[1,0.012498835101723671,0.0024532328825443983,-0.000001718401563266525]],[4,"break_wall.023",3,[[3,1,-515,[170],[1],171],[8,4,-516],[6,-517,[1,0.005,0.005,0.005]]],[1,0.017498468980193138,0.0024532328825443983,-0.000001718401563266525]],[120,"MocQuanAo",8,[-520],[[84,-518,[174],[1],175],[26,-519,[1,0,0.009,0],[1,0.006667,0.020667,0.006667]]],[1,8.969,0,-4.229],[3,0,-0.6205731361358193,0,0.7841485718322477],[1,150,150,150],[1,0,-76.716,0]],[100,"Tham",8,[19,-522],[[158,-521,[178],[1]]],[1,-7.62,0,2.195],[1,80.00000000000001,80,80.00000000000001]],[51,"Doors_1",8,[-523],[1,-4.943,0,2.084],[3,0,0.7071067811865475,0,0.7071067811865476],[1,140,140,140],[1,0,89.99999999999999,0]],[59,"Door1_1",[[3,1,-524,[194],[1],195],[56,8,0.0001,-525,[1,0,0,0],[1,0,1,0]],[26,-526,[1,-0.004,0,0],[1,0.006,0.015,0.002]]],[1,0.007821347564458847,0.00755288265645504,1.175609470882577e-10]],[59,"Door1_2",[[3,1,-527,[196],[1],197],[56,8,0.0001,-528,[1,0,0,0],[1,0,1,0]],[26,-529,[1,0.004,0,0],[1,0.006,0.015,0.002]]],[1,-0.007821347564458847,0.00755288265645504,1.175609470882577e-10]],[59,"Door1",[[3,1,-530,[198],[1],199],[56,8,0.0001,-531,[1,0,0,0],[1,0,1,0]],[26,-532,[1,-0.004,0,0],[1,0.006,0.015,0.003]]],[1,0.007821347564458847,0.00755288265645504,1.175609470882577e-10]],[59,"Door2",[[3,1,-533,[200],[1],201],[56,8,0.0001,-534,[1,0,0,0],[1,0,1,0]],[26,-535,[1,0.004,0,0],[1,0.006,0.015,0.003]]],[1,-0.007821347564458847,0.00755288265645504,1.175609470882577e-10]],[59,"Door1",[[3,1,-536,[202],[1],203],[56,8,0.1,-537,[1,0,0,0],[1,0,1,0]],[26,-538,[1,-0.004,0,0],[1,0.007,0.014,0.002]]],[1,0.007821347564458847,0.00755288265645504,1.175609470882577e-10]],[59,"Door2",[[3,1,-539,[204],[1],205],[26,-540,[1,0.004,0,0],[1,0.007,0.014,0.002]],[56,8,0.1,-541,[1,0,0,0],[1,0,1,0]]],[1,-0.007821347564458847,0.00755288265645504,1.175609470882577e-10]],[36,"WallLaserBtn",76,[[3,1,-542,[220],[1],221],[26,-543,[1,-1.1874362826347351e-8,0.0005,4.889443516731262e-9],[1,0.002,0.1,0.002]],[32,2,2,-544]]],[53,"Lasers",17,[-545,-546,-547]],[35,"Electro",[-548,-549,-550]],[86,"Electro_vfx_mesh",133,[[3,1,-551,[228],[1],229],[6,-552,[1,0.0019843416521325707,0.010201558005064726,0.03618932329118252]]],[1,2.410281751963339e-7,0.007962931878864765,1.182999476156965e-9],[1,1.2,1.2,1]],[35,"laser",[-553,-554,-555]],[4,"laser_vfx_mesh",135,[[3,1,-556,[232],[1],233],[6,-557,[1,0.0016475273296236992,0.012324807699769735,0.02926943451166153]]],[1,-2.109229413349567e-8,0.007881137542426586,2.020315292838859e-7]],[35,"laser",[-558,-559,-560]],[4,"laser_vfx_mesh",137,[[3,1,-561,[238],[1],239],[6,-562,[1,0.0016475273296236992,0.012324807699769735,0.02926943451166153]]],[1,-2.109229413349567e-8,0.007881137542426586,2.020315292838859e-7]],[164,27,15,14,7,80,82],[34,"Gradient",33554432,5,[[31,-563,[5,16,478]],[58,-564,277]],[1,0,240,0],[1,50,0.2,1]],[34,"text",33554432,5,[[31,-565,[5,438,56]],[58,-566,278]],[1,0,-224.365,0],[1,0.3,0.3,0.3]],[34,"title",33554432,5,[[31,-567,[5,557,220]],[114,0,-568,279]],[1,-40,206.99999999999997,0],[1,0.2,0.2,0.4]],[34,"icon",33554432,5,[[31,-569,[5,198,198]],[58,-570,280]],[1,56,206.99999999999997,0],[1,0.25,0.25,0.6]],[34,"hand",33554432,79,[[31,-571,[5,108,134]],[58,-572,282],[90,true,-573,[283],284]],[1,-53.722999999999985,-197.265,0],[1,0.24999999999999997,0.24999999999999997,0.24999999999999997]],[92,"LoadMap",33554432,11,[[31,-574,[5,2000,2000]],[85,0,-575,[4,0],286]]],[34,"Download",33554432,11,[[31,-576,[5,373,167]],[79,-577,[4,16777215],287]],[1,0,-163,0],[1,0.4,0.4,1]],[34,"hand",33554432,11,[[112,-578,[5,205,168],[0,0.5,0]],[79,-579,[4,16777215],292],[90,true,-580,[293],294]],[1,39.009000000000015,-238.782,0],[1,0.35,0.35,1]],[121,"Chest_M",[-581,-582,-583],[1,0.005447485018521547,-1.554312241092664e-17,-5.346294532827751e-18],[3,-9.193751724705897e-17,7.319178504059276e-18,-0.017864119002931025,0.9998404238938577],[1,-1.0525317154700937e-14,6.507944086134008e-16,-2.0471861423310167]],[53,"Deer_Cat",7,[-584,-585,-586]],[101,"Camera",14,[[161,"Camera<CameraComponent>",2,1822425087,-587,[4,4278239999]]],[1,-13,24,0],[3,-0.3588838181618332,-0.6092638222162746,-0.358883818161833,0.6092638222162747],[1,-61,-90,6.3611093629270335e-15]],[122,"Ground",17,[[91,"Plane<ModelComponent>",-588,[0],[133,true],1],[163,-589]],[1,2,1,1]],[53,"Doors",124,[125,126]],[35,"Doors",[127,128]],[35,"Doors",[129,130]],[35,"exit_door",[-590,-591]],[4,"ExitDoor",155,[[3,1,-592,[206],[1],207],[26,-593,[1,0.008676467288751155,-0.00008720159530639648,-0.0007142104441300035],[1,0.02070255985017866,0.014756504446268082,0.004769404651597142]]],[1,-0.019050396978855133,0.0074655115604400635,-0.00011989556514890864]],[4,"ExitDoor",155,[[3,1,-594,[208],[1],209],[26,-595,[1,-0.008676467288751155,-0.00008720159530639648,-0.0007142079994082451],[1,0.02070255985017866,0.014756504446268082,0.0047693997621536255]]],[1,0.019050396978855133,0.0074655115604400635,-0.00011989721679128706]],[36,"LaserButtonGreen",75,[[3,1,-596,[210],[1],211]]],[36,"LaserBtn",75,[[3,1,-597,[212],[1],213],[26,-598,[1,-1.1874362826347351e-8,0.005,4.889443516731262e-9],[1,0.002,0.05,0.002]]]],[102,"LaserButtonRed",false,75,[[3,1,-599,[214],[1],215]]],[102,"WallLaserButtonGreen",false,76,[[3,1,-600,[218],[1],219]]],[36,"WallLaserButtonRed",76,[[3,1,-601,[222],[1],223]]],[4,"laser_base2",137,[[3,1,-602,[240],[1],241],[26,-603,[1,-0.0022566841216757894,0.007889981320338947,-0.0005208068469073623],[1,0.009780378779396415,0.015779962885702645,0.002453161228913814]]],[1,-2.078171768005177e-8,0.0000016899934962566476,0.014305144548416138]],[4,"laser_base1",137,[[3,1,-604,[242],[1],243],[26,-605,[1,-0.0022566841216757894,0.007889981320338947,0.0005208076327107847],[1,0.009780378779396415,0.015779962885702645,0.0024531626841053367]]],[1,-2.2032313751196853e-8,0.0000016899934962566476,-0.014305144548416138]],[69,0.3,false,22,[248],[9],[14,3,0.6,0.9],[0],[0],[14,3,2,4],[0],[0],[14,3,6.283185307179586,6.283185307179586],[0],[14,3,0.15,0.3],[0],[2,20],[0],[[20,[2,9]]],[21,true,[19,1,[27,[[64,[4,33554431]],[16,0.3727678571428572,[4,33539082]]]]]],[70,true,3,0.01,0.5,[2,1]],[28,[0],[0],[0],[0]],[22,[0],[0],[0],[2,1]],[23,[0],[0],[0]],[65,true,0.5,[0],[0],[0],[2,0.2]],[24,[0],[0],[0]],[45,true,3,3,1,[17,1,[18,[0,1],[[29,1,1,1,1],[30,1,1,1,1,1]]]],[0]],[25,[2,1],[0],[9],[9],-606],[72,1,249]],[69,0.3,false,23,[254],[9],[14,3,0.6,0.9],[0],[0],[14,3,2,4],[0],[0],[77,3,6.283185307179586],[0],[14,3,0.15,0.3],[0],[2,20],[0],[[20,[2,9]]],[21,true,[19,1,[27,[[64,[4,33554431]],[16,0.3727678571428572,[4,33539082]]]]]],[70,true,3,0.01,0.5,[2,1]],[28,[0],[0],[0],[0]],[22,[0],[0],[0],[2,1]],[23,[0],[0],[0]],[65,true,0.5,[0],[0],[0],[2,0.2]],[24,[0],[0],[0]],[45,true,3,3,1,[17,1,[18,[0,1],[[29,1,1,1,1],[30,1,1,1,1,1]]]],[0]],[25,[2,1],[0],[9],[9],-607],[72,1,255]],[69,0.6,false,24,[260],[9],[14,3,0.6,0.9],[0],[0],[14,3,2,4],[0],[0],[77,3,6.283185307179586],[0],[14,3,0.15,0.3],[0],[2,20],[0],[[20,[2,9]]],[21,true,[19,1,[27,[[64,[4,33554431]],[16,0.3727678571428572,[4,33539082]]]]]],[70,true,3,0.01,0.5,[2,1]],[28,[0],[0],[0],[0]],[22,[0],[0],[0],[2,1]],[23,[0],[0],[0]],[65,true,0.5,[0],[0],[0],[2,0.2]],[24,[0],[0],[0]],[45,true,3,3,1,[17,1,[18,[0,1],[[29,1,1,1,1],[30,1,1,1,1,1]]]],[0]],[25,[2,1],[0],[9],[9],-608],[72,1,261]],[69,0.8,false,25,[266],[9],[14,3,0.6,0.9],[0],[0],[14,3,2,4],[0],[0],[77,3,6.283185307179586],[0],[14,3,0.15,0.3],[0],[2,20],[0],[[20,[2,9]]],[21,true,[19,1,[27,[[64,[4,33554431]],[16,0.3727678571428572,[4,33539082]]]]]],[70,true,3,0.01,0.5,[2,1]],[28,[0],[0],[0],[0]],[22,[0],[0],[0],[2,1]],[23,[0],[0],[0]],[65,true,0.5,[0],[0],[0],[2,0.2]],[24,[0],[0],[0]],[45,true,3,3,1,[17,1,[18,[0,1],[[29,1,1,1,1],[30,1,1,1,1,1]]]],[0]],[25,[2,1],[0],[9],[9],-609],[72,1,267]],[69,0.8,false,26,[272],[9],[14,3,0.6,0.9],[0],[0],[14,3,2,4],[0],[0],[77,3,6.283185307179586],[0],[14,3,0.15,0.3],[0],[2,20],[0],[[20,[2,9]]],[21,true,[19,1,[27,[[64,[4,33554431]],[16,0.3727678571428572,[4,33539082]]]]]],[70,true,3,0.01,0.5,[2,1]],[28,[0],[0],[0],[0]],[22,[0],[0],[0],[2,1]],[23,[0],[0],[0]],[65,true,0.5,[0],[0],[0],[2,0.2]],[24,[0],[0],[0]],[45,true,3,3,1,[17,1,[18,[0,1],[[29,1,1,1,1],[30,1,1,1,1,1]]]],[0]],[25,[2,1],[0],[9],[9],-610],[72,1,273]],[53,"Characters",14,[9,-611]],[34,"8",33554432,79,[[31,-612,[5,416,201]],[58,-613,281]],[1,0,-180.053,0],[1,0.3,0.3,1]],[123,"icon",33554432,11,[[31,-614,[5,198,198]],[79,-615,[4,16777215],290]],[1,0.6,0.6,1]],[34,"title_game",33554432,11,[[31,-616,[5,557,220]],[85,0,-617,[4,16777215],291]],[1,0,157.99999999999997,0],[1,0.5,0.5,1]],[127,"Head_M",[[[54,"HeadEnd_M",-618,[1,0.015095275826752186,-2.2204459996194763e-18,1.1147259642693237e-17]],-619],4,1],[1,0.005839296150952578,-2.2204459996194763e-18,7.335141521958022e-11],[3,-3.2970677530887142e-24,2.9610711926934064e-25,-0.05829603108103105,0.9982993402583213],[1,-3.7776313382545368e-22,1.1929573189923404e-23,-6.684022599098756]],[101,"Directional Light",14,[[165,90000,2.34375,-620,[166]]],[1,-12.927,23.868,0.609],[3,-0.46772509094040937,-0.4606509224664642,-0.3889418124971846,0.6463421953013637],[1,-74.895,-74.112,-4.121]],[67,"breakwall_1",97,[1],[1,-2.437,0.04,-0.891],[1,120,120,120]],[51,"breakwall_2",97,[2],[1,1.256,0.04,-2.962],[3,0,-0.7071067811865475,0,0.7071067811865476],[1,90,110,110],[1,0,-89.99999999999999,0]],[51,"breakwall_3",97,[3],[1,-5.586,0.04,-2.921],[3,0,-0.7071067811865475,0,0.7071067811865476],[1,90,110,110],[1,0,-89.99999999999999,0]],[36,"coat",122,[[3,1,-621,[172],[1],173]]],[82,"polySurface5",19,[[66,"transform2",-622]]],[82,"polySurface6",19,[[66,"transform5",-623]]],[82,"polySurface7",19,[[66,"transform3",-624]]],[82,"polySurface9",19,[[66,"transform4",-625]]],[36,"polySurface6",123,[[84,-626,[176],[1],177]]],[36,"cat_food",20,[[3,1,-627,[179],[95,true],180]]],[5,["f2sDa1qWtF56f7v5izDlLP"]],[51,"tree_A_1",8,[-628],[1,4.066,0,7.047],[3,0,0.7336231290607853,0,0.6795565498963736],[1,75,75,75],[1,0,94.38200000000002,0]],[36,"Tree_A",187,[[84,-629,[190],[1],191]]],[51,"tree_A_2",8,[-630],[1,0.984,0,-6.896],[3,0,0.8902803762621423,0,0.45541283649293224],[1,50.00000000000001,50,50.00000000000001],[1,0,125.81700000000001,0]],[36,"Tree_A",189,[[84,-631,[192],[1],193]]],[51,"Doors_2",8,[153],[1,1.192,0.142,2.084],[3,-3.407318703740833e-18,0.7071067811865475,3.40731870374083e-18,0.7071067811865476],[1,140.00000000000003,140,140.00000000000003],[1,-5.521796321985272e-16,89.99999999999999,-2.2069531490250793e-31]],[67,"Doors_3",8,[154],[1,5.898,0.003,-0.858],[1,140,140,140]],[67,"Doors_4",8,[155],[1,7.74,0.542,4.881],[1,80,90,90]],[67,"laser_button_1",8,[75],[1,-2,0,-3],[1,100,100,100]],[41,"icon",75,[[33,"Quad<ModelComponent>",1,-632,[216],[1],217]],[1,-0.001,0.005,0],[3,-0.5,-0.5,-0.4999999999999999,0.5000000000000001],[1,0.007,0.007,0.007],[1,-90,-90,0]],[67,"laser_button_2",8,[76],[1,-7.7,0,-3],[1,100,100,100]],[41,"icon",76,[[33,"Quad<ModelComponent>",1,-633,[224],[1],225]],[1,0,0.003,0],[3,-0.5,-0.5,-0.4999999999999999,0.5000000000000001],[1,0.006,0.006,0.006],[1,-90,-90,0]],[67,"Electro",132,[133],[1,2.61,0,2.007],[1,130,130,130]],[4,"Electro_wall1",133,[[3,1,-634,[226],[1],227]],[1,2.452812566389184e-7,0.00001882825199572835,0.021018020808696747]],[4,"Electro_wall2",133,[[3,1,-635,[230],[1],231]],[1,2.452812566389184e-7,0.00001882825199572835,-0.021018020808696747]],[51,"laser_wall_1",132,[135],[1,5.685,0,2.944],[3,0,1,0,-6.123233995736766e-17],[1,120,120,120],[1,0,-180,0]],[4,"laser_base2",135,[[3,1,-636,[234],[1],235]],[1,-2.078171768005177e-8,0.0000016899934962566476,0.014305144548416138]],[4,"laser_base1",135,[[3,1,-637,[236],[1],237]],[1,-2.2032313751196853e-8,0.0000016899934962566476,-0.014305144548416138]],[51,"laser_wall_2",132,[137],[1,7.933,0,1.394],[3,0,0.7071067811865476,0,0.7071067811865475],[1,120,120,120],[1,0,90.00000000000003,0]],[42,"Nova",22,[-638],[3,0.7071067811865475,0,0,0.7071067811865476],[1,90,0,0]],[43,1,false,205,[244],[9],[14,3,1,2.5],[0],[0],[0],[0],[0],[0],[0],[2,0.25],[0],[0],[0],[[20,[2,1]]],[21,true,[19,1,[27,[[40],[16,0.5,[4,4294943551]]]]]],[44,3,[2,1]],[28,[0],[0],[0],[0]],[22,[0],[0],[0],[2,1]],[23,[0],[0],[0]],[37,[0],[0],[0],[0]],[24,[0],[0],[0]],[45,true,3,3,1,[17,1,[18,[0,1],[[29,1,1,1,1],[30,1,1,1,1,1]]]],[0]],[25,[2,1],[0],[9],[9],-639],[38,245]],[42,"Glow",22,[-640],[3,0.7071067811865475,0,0,0.7071067811865476],[1,90,0,0]],[43,1,false,207,[246],[9],[2,5],[0],[0],[0],[0],[0],[0],[0],[2,0.5],[0],[0],[0],[[20,[2,1]]],[21,true,[19,1,[27,[[40],[16,0.5,[4,4294943551]]]]]],[44,3,[2,1]],[28,[0],[0],[0],[0]],[22,[0],[0],[0],[2,1]],[23,[0],[0],[0]],[37,[0],[0],[0],[0]],[24,[0],[0],[0]],[71,3,3,1,[17,1,[18,[0,1],[[29,1,1,1,1],[30,1,1,1,1,1]]]],[0]],[25,[2,1],[0],[9],[9],-641],[38,247]],[42,"Nova",23,[-642],[3,0.7071067811865475,0,0,0.7071067811865476],[1,90,0,0]],[43,1,false,209,[250],[9],[14,3,1,2.5],[0],[0],[0],[0],[0],[0],[0],[2,0.25],[0],[0],[0],[[20,[2,1]]],[21,true,[19,1,[27,[[40],[16,0.5,[4,4294943551]]]]]],[44,3,[2,1]],[28,[0],[0],[0],[0]],[22,[0],[0],[0],[2,1]],[23,[0],[0],[0]],[37,[0],[0],[0],[0]],[24,[0],[0],[0]],[45,true,3,3,1,[17,1,[18,[0,1],[[29,1,1,1,1],[30,1,1,1,1,1]]]],[0]],[25,[2,1],[0],[9],[9],-643],[38,251]],[42,"Glow",23,[-644],[3,0.7071067811865475,0,0,0.7071067811865476],[1,90,0,0]],[43,1,false,211,[252],[9],[2,5],[0],[0],[0],[0],[0],[0],[0],[2,0.5],[0],[0],[0],[[20,[2,1]]],[21,true,[19,1,[27,[[40],[16,0.5,[4,4294943551]]]]]],[44,3,[2,1]],[28,[0],[0],[0],[0]],[22,[0],[0],[0],[2,1]],[23,[0],[0],[0]],[37,[0],[0],[0],[0]],[24,[0],[0],[0]],[71,3,3,1,[17,1,[18,[0,1],[[29,1,1,1,1],[30,1,1,1,1,1]]]],[0]],[25,[2,1],[0],[9],[9],-645],[38,253]],[42,"Nova",24,[-646],[3,0.7071067811865475,0,0,0.7071067811865476],[1,90,0,0]],[43,1,false,213,[256],[9],[14,3,1,2.5],[0],[0],[0],[0],[0],[0],[0],[2,0.25],[0],[0],[0],[[20,[2,1]]],[21,true,[19,1,[27,[[40],[16,0.5,[4,4294943551]]]]]],[44,3,[2,1]],[28,[0],[0],[0],[0]],[22,[0],[0],[0],[2,1]],[23,[0],[0],[0]],[37,[0],[0],[0],[0]],[24,[0],[0],[0]],[45,true,3,3,1,[17,1,[18,[0,1],[[29,1,1,1,1],[30,1,1,1,1,1]]]],[0]],[25,[2,1],[0],[9],[9],-647],[38,257]],[42,"Glow",24,[-648],[3,0.7071067811865475,0,0,0.7071067811865476],[1,90,0,0]],[43,1,false,215,[258],[9],[2,5],[0],[0],[0],[0],[0],[0],[0],[2,0.5],[0],[0],[0],[[20,[2,1]]],[21,true,[19,1,[27,[[40],[16,0.5,[4,4294943551]]]]]],[44,3,[2,1]],[28,[0],[0],[0],[0]],[22,[0],[0],[0],[2,1]],[23,[0],[0],[0]],[37,[0],[0],[0],[0]],[24,[0],[0],[0]],[71,3,3,1,[17,1,[18,[0,1],[[29,1,1,1,1],[30,1,1,1,1,1]]]],[0]],[25,[2,1],[0],[9],[9],-649],[38,259]],[42,"Nova",25,[-650],[3,0.7071067811865475,0,0,0.7071067811865476],[1,90,0,0]],[43,1,false,217,[262],[9],[14,3,1,2.5],[0],[0],[0],[0],[0],[0],[0],[2,0.25],[0],[0],[0],[[20,[2,1]]],[21,true,[19,1,[27,[[40],[16,0.5,[4,4294943551]]]]]],[44,3,[2,1]],[28,[0],[0],[0],[0]],[22,[0],[0],[0],[2,1]],[23,[0],[0],[0]],[37,[0],[0],[0],[0]],[24,[0],[0],[0]],[45,true,3,3,1,[17,1,[18,[0,1],[[29,1,1,1,1],[30,1,1,1,1,1]]]],[0]],[25,[2,1],[0],[9],[9],-651],[38,263]],[42,"Glow",25,[-652],[3,0.7071067811865475,0,0,0.7071067811865476],[1,90,0,0]],[43,1,false,219,[264],[9],[2,5],[0],[0],[0],[0],[0],[0],[0],[2,0.5],[0],[0],[0],[[20,[2,1]]],[21,true,[19,1,[27,[[40],[16,0.5,[4,4294943551]]]]]],[44,3,[2,1]],[28,[0],[0],[0],[0]],[22,[0],[0],[0],[2,1]],[23,[0],[0],[0]],[37,[0],[0],[0],[0]],[24,[0],[0],[0]],[71,3,3,1,[17,1,[18,[0,1],[[29,1,1,1,1],[30,1,1,1,1,1]]]],[0]],[25,[2,1],[0],[9],[9],-653],[38,265]],[42,"Nova",26,[-654],[3,0.7071067811865475,0,0,0.7071067811865476],[1,90,0,0]],[43,1,false,221,[268],[9],[14,3,1,2.5],[0],[0],[0],[0],[0],[0],[0],[2,0.25],[0],[0],[0],[[20,[2,1]]],[21,true,[19,1,[27,[[40],[16,0.5,[4,4294943551]]]]]],[44,3,[2,1]],[28,[0],[0],[0],[0]],[22,[0],[0],[0],[2,1]],[23,[0],[0],[0]],[37,[0],[0],[0],[0]],[24,[0],[0],[0]],[45,true,3,3,1,[17,1,[18,[0,1],[[29,1,1,1,1],[30,1,1,1,1,1]]]],[0]],[25,[2,1],[0],[9],[9],-655],[38,269]],[42,"Glow",26,[-656],[3,0.7071067811865475,0,0,0.7071067811865476],[1,90,0,0]],[43,1,false,223,[270],[9],[2,5],[0],[0],[0],[0],[0],[0],[0],[2,0.5],[0],[0],[0],[[20,[2,1]]],[21,true,[19,1,[27,[[40],[16,0.5,[4,4294943551]]]]]],[44,3,[2,1]],[28,[0],[0],[0],[0]],[22,[0],[0],[0],[2,1]],[23,[0],[0],[0]],[37,[0],[0],[0],[0]],[24,[0],[0],[0]],[71,3,3,1,[17,1,[18,[0,1],[[29,1,1,1,1],[30,1,1,1,1,1]]]],[0]],[25,[2,1],[0],[9],[9],-657],[38,271]],[49,"BgSound",10,[-658]],[108,true,false,225],[49,"catAngrySoound",10,[-659]],[62,false,227],[49,"electricSound",10,[-660]],[108,true,false,229],[49,"electric2Sund",10,[-661]],[62,false,231],[49,"winSound",10,[-662]],[62,false,233],[49,"loseSoound",10,[-663]],[62,false,235],[49,"eatSound",10,[-664]],[62,false,237],[49,"clockSound",10,[-665]],[62,false,239],[128,"Camera",5,[-666],[1,0,0,1000]],[162,0,3,240,2000,6,41943040,241,[4,4278190080]],[53,"Cat",170,[7]],[15,"Tail0_M",83,[-667],[1,-0.003016774309799075,-0.0010064324596896768,4.4113056957284513e-11],[3,-0.13222044449472428,0.9912203357768733,1.899605991128237e-9,-2.5339324590359113e-10],[1,-2.1960685843697459e-7,-179.9999999999998,-15.19584442452546]],[15,"Tail1_M",244,[-668],[1,0.0032178927212953568,-1.1102229998097382e-18,-1.5827465746491744e-16],[3,7.854134306970377e-17,6.62973558865667e-17,-0.04753538670956306,0.9988695545517303],[1,9.393584386234256e-15,8.05274822932461e-15,-5.449207570713341]],[15,"Tail2_M",245,[-669],[1,0.002976355142891407,-5.551115205843844e-18,1.0832962131501755e-12],[3,-1.3949894977543174e-17,-3.883391342022682e-17,-0.11471089869868772,0.993398917716211],[1,-2.155174162256571e-15,-4.728473690825402e-15,-13.173900830243293]],[15,"Tail3_M",246,[-670],[1,0.003203141037374735,4.440891999238953e-18,3.920579572797012e-12],[3,-9.969521051823741e-17,-9.806948956650378e-17,-0.1655651210611257,0.9861988596059187],[1,-1.3888595449279292e-14,-1.3726848857505547e-14,-19.060130128725042]],[15,"Tail4_M",247,[-671],[1,0.0028079531621187925,0,6.5790389629227786e-12],[3,-8.251598561738025e-17,-1.135794569833411e-16,-0.06482256304208014,0.9978968059477171],[1,-1.0366549825034899e-14,-1.3716080958521048e-14,-7.433330535637716]],[60,"Tail5_M",248,[[54,"Tail6_M",-672,[1,0.0030258502811193466,8.881783998477905e-18,9.688655260020607e-12]]],[1,0.002689178567379713,4.440891999238953e-18,7.303118179646795e-12],[3,9.537444787153138e-17,-2.118270460406824e-16,-0.10054238934768282,0.9949327755905215],[1,8.60721837145069e-15,-2.3527419865239222e-14,-11.54080902638327]],[15,"Hip_R",83,[-673],[1,-0.00007880734483478591,0.0005406050477176905,-0.003936111461371183],[3,0.9649268585378106,0.23634742681996387,-0.11070779936605146,0.02828134840243218],[1,173.12485222053104,14.725639548400835,26.73431895575666]],[15,"Knee_R",250,[-674],[1,0.006485617719590664,9.992007618673103e-18,9.992007618673103e-18],[3,1.0421712215713451e-17,9.1641098275595e-18,-0.7509635080199943,0.6603437056732683],[1,180,180,-82.65218201681442]],[15,"Ankle_R",251,[-675],[1,0.006850753910839558,-9.992007618673103e-18,-1.4432898790731443e-17],[3,-0.107779091379776,0.03794360473263759,0.4382270207142593,0.8915722228945604],[1,-20.825588126741046,14.81324250428513,50.646009467453176]],[60,"Toes1_R",252,[[54,"Toes2_R",-676,[1,0.0028587731067091227,-0.0018769684247672558,-2.8829633125226906e-11]]],[1,0.003821877297013998,9.992007618673103e-18,1.4055525840439564e-11],[3,7.078807208851528e-26,7.338928554393833e-26,0.7197470906365884,0.6942363614217905],[1,-180,180,87.93279256115314]],[87,"RootPart1_M",83,[-677],[1,0.0020652245730161667,2.2204459996194763e-18,-6.089342295085281e-19]],[87,"RootPart2_M",254,[-678],[1,0.0020652245730161667,2.2204459996194763e-18,-6.089341778097398e-19]],[15,"Spine2_M",255,[148],[1,0.0020652245730161667,4.440891999238953e-18,2.7589170037440396e-18],[3,2.833542290373483e-16,-5.276558712844762e-17,-0.13887424912163487,0.9903100236445666],[1,3.257203985875381e-14,-1.5379762679065733e-15,-15.965418280697603]],[15,"Neck_M",148,[-679],[1,0.002901608357205987,-0.0031024303752928972,-9.727658892874631e-18],[3,-2.4871766108048305e-24,2.1821083289339757e-24,-0.6595017750111039,0.7517030056858913],[1,-3.791516639546766e-22,0,-82.52377277072583]],[87,"NeckPart1_M",257,[174],[1,0.005839296150952578,5.551115205843844e-18,2.898164867815023e-11]],[60,"Jaw_M",174,[[54,"JawEnd_M",-680,[1,0.01144465059041977,-4.440891999238953e-18,2.616274463397792e-18]]],[1,-0.0070828660391271114,0.001565893879160285,-4.563028938995164e-18],[3,-4.0602511795263196e-25,8.309202330691217e-25,0.7944917325602083,0.6072749681103925],[1,-180,180,74.7854503251938]],[15,"Scapula_R",148,[-681],[1,0.0009082318283617496,-0.0016960602952167392,-0.0035904867108911276],[3,0.7485383193052008,0.6073311003787559,-0.20668350270817637,0.16769391388107713],[1,112.31256356364936,70.98174103154757,57.129780034201545]],[15,"Shoulder_R",260,[-682],[1,0.002976213349029422,0,-8.881783998477905e-18],[3,-0.07353511641712662,0.25579661788485253,-0.2663195499695608,0.9264095067712771],[1,0.0000012480393304219223,30.871376804796846,-32.07723760154569]],[15,"Elbow_R",261,[-683],[1,0.006145196035504341,-5.551115205843844e-18,1.0769163656501374e-16],[3,8.504070203628985e-25,6.16430870102796e-26,0.3120392175523727,0.9500692220618996],[1,1.1223607321790314e-22,-2.942762314065395e-23,36.36433252877887]],[15,"Wrist_R",262,[-684],[1,0.003922537434846163,-7.77156120546332e-18,2.0003202219620597e-11],[3,1.26163860488356e-8,3.485806502145198e-9,0.26631405719129686,0.9638863122496919],[1,0.0000014998981938610756,2.921850661819311e-14,30.890097833571968]],[60,"Fingers1_R",263,[[54,"Fingers2_R",-685,[1,0.0024803609121590853,-0.0011090633925050497,4.9960034784643064e-17]]],[1,0.0013398798182606697,1.1102229998097382e-18,2.8932013035332105e-12],[3,-1.0268690676414758e-8,-4.1971217162257e-9,0.37834661793140156,0.9256639977334487],[1,-0.0000012712012910317389,-1.2653603427533027e-14,44.46261181934115]],[15,"Scapula_L",148,[-686],[1,0.0009082318283617496,-0.0016960602952167392,0.0035904867108911276],[3,-0.6073310985082828,0.7485383169998342,0.16769391336460931,0.20668351697278872],[1,-67.68743656021654,109.01825758625266,-57.12977896045119]],[15,"Shoulder_L",265,[-687],[1,-0.002976213349029422,-2.2204459996194763e-18,-6.661337998858429e-18],[3,-0.08087501841085962,0.2535716049327198,-0.29290211802618116,0.9183512518773331],[1,-0.0000020023668605326484,30.871375957102188,-35.37948463187456]],[15,"Elbow_L",266,[-688],[1,-0.006145196035504341,2.1649348186097164e-17,2.5022001831631613e-11],[3,3.698432393575249e-24,7.844895137691728e-26,0.4660808189363135,0.8847421490014223],[1,6.556099890129191e-22,-3.352136588885891e-22,55.56038648837976]],[15,"Wrist_L",267,[-689],[1,-0.003922537434846163,1.1102230411687688e-17,-2.0801102160183937e-11],[3,-2.2213494740521317e-8,2.682952490230911e-9,-0.11990886018104767,0.9927849038185872],[1,-0.000002563978345591965,-1.238952164628575e-14,-13.773685345369223]],[60,"Fingers1_L",268,[[54,"Fingers2_L",-690,[1,-0.0024803609121590853,0.0011090633925050497,-1.7181324071802173e-11]]],[1,-0.0013398798182606697,3.3306689994292145e-18,-3.0510691195750894e-11],[3,1.202641542986473e-8,-1.7758621256120527e-8,0.5607324843663741,0.8279970295697404],[1,0.000006148774687692887,-0.0000066217698935251255,68.21293812945635]],[15,"Hip_L",83,[-691],[1,-0.00007880722841946408,0.0005406050477176905,0.003936111461371183],[3,-0.33800700071914674,0.9337119991241997,0.028422765236197228,0.11456577400194808],[1,-9.622341407618702,162.62735726022657,-38.65942560522658]],[15,"Knee_L",270,[-692],[1,-0.006485617719590664,-5.551114999048691e-19,1.1102229998097382e-18],[3,-1.7336686139568426e-19,-9.811546734126506e-18,-0.719488810323054,0.6945040329759912],[1,-179.99999999999997,-179.99999999999997,-87.97541642889963]],[15,"Ankle_L",271,[-693],[1,-0.006850753910839558,9.992007618673103e-18,7.77156120546332e-18],[3,-0.10166416476507739,0.05983485747743264,0.6161200500698334,0.7787684324208453],[1,-46.51448788453161,43.07919569002581,71.34531796373011]],[60,"Toes1_L",272,[[54,"Toes2_L",-694,[1,-0.0028587731067091227,0.0018769684247672558,2.8829636594673858e-11]]],[1,-0.003821877297013998,0,2.3568615808988724e-11],[3,-0.00020272489692942466,0.00016227147528271118,0.6862465063574965,0.727369002008413],[1,-0.5101740052366177,0.5068947396755507,86.66730611092152]],[36,"Cat_model",7,[[94,1,-695,[301,302,303,304],[1],7,305,306]]],[36,"Tail_06",149,[[94,1,-696,[307],[1],7,308,309]]],[36,"Backpack_07",149,[[94,1,-697,[310],[1],7,311,312]]],[36,"Hat_10",149,[[94,1,-698,[313],[1],7,314,315]]],[168,15],[129,"GameController","9fgkvo20FBAKynqRhhqW/W",16,[278]],[5,["c45rgHdxpZTpMuNOO3sYfa"]],[5,["79QUWxipRUxbjMc6R6NR7B"]],[5,["9cxAXifCRcI4K0dEbyj+yp"]],[5,["7f8l6VPatSC4F3hE0gXkzY"]],[5,["dbDyplvXZQOJ9fGtkLQbTw"]],[5,["603heDJEBTprOSXinozT0e"]],[88,"LaserController","252+iqgvVFK61BOQRNHXeq",16,[[199,-699,15,[197,15,78,124,139],136,138,134,160,158,162,161,[165,166,167,168,169]]]],[88,"CubeController","b3nb8h/T5GgIPN/YxYu1K3",16,[[169,-700,[28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,18,18,60,61,62,63,64,65,66,67,68,69,70,71,72,73]]]],[88,"Responsive","93m7EM2HBCV798YB+7/26R",16,[[170,-701,140,78]]]],0,[0,-1,28,0,-2,29,0,-3,30,0,-4,98,0,-5,31,0,-6,32,0,-7,33,0,-8,34,0,-9,35,0,-10,36,0,-11,37,0,-12,38,0,-13,39,0,-14,40,0,-15,41,0,-16,42,0,-17,43,0,-18,44,0,-19,45,0,-20,46,0,-21,47,0,-22,48,0,-23,49,0,-24,50,0,-1,51,0,-2,52,0,-3,53,0,-4,54,0,-5,55,0,-6,56,0,-7,57,0,-8,58,0,-9,59,0,-10,18,0,-11,60,0,-12,61,0,-13,62,0,-14,63,0,-15,64,0,-16,65,0,-17,66,0,-18,67,0,-19,68,0,-20,69,0,-21,70,0,-22,71,0,-23,72,0,-24,73,0,-1,99,0,-2,100,0,-3,101,0,-4,102,0,-5,103,0,-6,104,0,-7,105,0,-8,106,0,-9,107,0,-10,108,0,-11,109,0,-12,110,0,-13,111,0,-14,112,0,-15,113,0,-16,74,0,-17,114,0,-18,115,0,-19,116,0,-20,117,0,-21,118,0,-22,119,0,-23,120,0,-24,121,0,0,5,0,19,242,0,0,5,0,0,5,0,-1,241,0,-2,140,0,-3,141,0,-4,142,0,-5,143,0,-6,79,0,-7,27,0,-8,80,0,-9,11,0,-10,82,0,-1,84,0,-2,85,0,-3,86,0,-4,87,0,-5,88,0,-6,89,0,-7,90,0,-8,91,0,-9,92,0,-10,93,0,-11,94,0,-12,95,0,-13,96,0,0,7,0,0,7,0,0,7,0,36,139,0,37,124,0,38,78,0,35,15,0,0,7,0,-1,83,0,-2,274,0,-3,149,0,-1,122,0,-2,123,0,-3,20,0,-4,187,0,-5,189,0,-6,124,0,-7,191,0,-8,192,0,-9,193,0,-10,194,0,-11,196,0,3,280,0,3,13,0,3,13,0,3,13,0,3,13,0,3,13,0,3,13,0,3,280,0,3,13,0,3,13,0,3,13,0,3,281,0,7,9,0,3,281,0,3,282,0,7,9,0,3,282,0,3,283,0,7,9,0,3,283,0,3,284,0,7,9,0,3,284,0,3,285,0,7,9,0,3,285,0,0,9,0,0,9,0,20,77,0,39,74,0,40,78,0,35,15,0,0,9,0,-1,77,0,16,9,0,-1,15,0,-1,225,0,-2,227,0,-3,229,0,-4,231,0,-5,233,0,-6,235,0,-7,237,0,-8,239,0,0,11,0,0,11,0,-1,145,0,-2,146,0,-3,81,0,-4,172,0,-5,173,0,-6,147,0,3,186,0,3,186,0,16,12,0,-1,78,0,-1,150,0,-2,175,0,-3,17,0,-4,170,0,14,22,0,15,22,0,14,23,0,15,23,0,14,24,0,15,24,0,14,26,0,15,26,0,14,25,0,15,25,0,-2,279,0,-3,286,0,-4,287,0,-6,288,0,-1,151,0,-3,97,0,-5,132,0,-6,21,0,0,18,0,0,18,0,0,18,0,-1,180,0,-2,181,0,-3,182,0,-4,183,0,2,19,0,0,20,0,0,20,0,0,20,0,-1,185,0,-1,22,0,-2,23,0,-3,24,0,-4,25,0,-5,26,0,-1,165,0,-1,205,0,-2,207,0,-1,166,0,-1,209,0,-2,211,0,-1,167,0,-1,213,0,-2,215,0,-1,168,0,-1,217,0,-2,219,0,-1,169,0,-1,221,0,-2,223,0,0,27,0,0,27,0,-3,139,0,0,27,0,0,28,0,0,28,0,0,28,0,0,29,0,0,29,0,0,29,0,0,30,0,0,30,0,0,30,0,0,31,0,0,31,0,0,31,0,0,32,0,0,32,0,0,32,0,0,33,0,0,33,0,0,33,0,0,34,0,0,34,0,0,34,0,0,35,0,0,35,0,0,35,0,0,36,0,0,36,0,0,36,0,0,37,0,0,37,0,0,37,0,0,38,0,0,38,0,0,38,0,0,39,0,0,39,0,0,39,0,0,40,0,0,40,0,0,40,0,0,41,0,0,41,0,0,41,0,0,42,0,0,42,0,0,42,0,0,43,0,0,43,0,0,43,0,0,44,0,0,44,0,0,44,0,0,45,0,0,45,0,0,45,0,0,46,0,0,46,0,0,46,0,0,47,0,0,47,0,0,47,0,0,48,0,0,48,0,0,48,0,0,49,0,0,49,0,0,49,0,0,50,0,0,50,0,0,50,0,0,51,0,0,51,0,0,51,0,0,52,0,0,52,0,0,52,0,0,53,0,0,53,0,0,53,0,0,54,0,0,54,0,0,54,0,0,55,0,0,55,0,0,55,0,0,56,0,0,56,0,0,56,0,0,57,0,0,57,0,0,57,0,0,58,0,0,58,0,0,58,0,0,59,0,0,59,0,0,59,0,0,60,0,0,60,0,0,60,0,0,61,0,0,61,0,0,61,0,0,62,0,0,62,0,0,62,0,0,63,0,0,63,0,0,63,0,0,64,0,0,64,0,0,64,0,0,65,0,0,65,0,0,65,0,0,66,0,0,66,0,0,66,0,0,67,0,0,67,0,0,67,0,0,68,0,0,68,0,0,68,0,0,69,0,0,69,0,0,69,0,0,70,0,0,70,0,0,70,0,0,71,0,0,71,0,0,71,0,0,72,0,0,72,0,0,72,0,0,73,0,0,73,0,0,73,0,0,74,0,0,74,0,0,74,0,-1,158,0,-2,159,0,-3,160,0,-4,195,0,-1,161,0,-2,131,0,-3,162,0,-4,197,0,0,77,0,0,77,0,0,77,0,0,79,0,-1,171,0,-2,144,0,0,80,0,0,80,0,0,80,0,0,81,0,0,81,0,0,81,0,0,82,0,0,82,0,0,82,0,-1,244,0,-2,250,0,-3,254,0,-4,270,0,0,84,0,0,84,0,0,84,0,0,85,0,0,85,0,0,85,0,0,86,0,0,86,0,0,86,0,0,87,0,0,87,0,0,87,0,0,88,0,0,88,0,0,88,0,0,89,0,0,89,0,0,89,0,0,90,0,0,90,0,0,90,0,0,91,0,0,91,0,0,91,0,0,92,0,0,92,0,0,92,0,0,93,0,0,93,0,0,93,0,0,94,0,0,94,0,0,94,0,0,95,0,0,95,0,0,95,0,0,96,0,0,96,0,0,96,0,-1,176,0,-2,177,0,-3,178,0,0,98,0,0,98,0,0,98,0,0,99,0,0,99,0,0,99,0,0,100,0,0,100,0,0,100,0,0,101,0,0,101,0,0,101,0,0,102,0,0,102,0,0,102,0,0,103,0,0,103,0,0,103,0,0,104,0,0,104,0,0,104,0,0,105,0,0,105,0,0,105,0,0,106,0,0,106,0,0,106,0,0,107,0,0,107,0,0,107,0,0,108,0,0,108,0,0,108,0,0,109,0,0,109,0,0,109,0,0,110,0,0,110,0,0,110,0,0,111,0,0,111,0,0,111,0,0,112,0,0,112,0,0,112,0,0,113,0,0,113,0,0,113,0,0,114,0,0,114,0,0,114,0,0,115,0,0,115,0,0,115,0,0,116,0,0,116,0,0,116,0,0,117,0,0,117,0,0,117,0,0,118,0,0,118,0,0,118,0,0,119,0,0,119,0,0,119,0,0,120,0,0,120,0,0,120,0,0,121,0,0,121,0,0,121,0,0,122,0,0,122,0,-1,179,0,0,123,0,-2,184,0,-1,152,0,0,125,0,0,125,0,0,125,0,0,126,0,0,126,0,0,126,0,0,127,0,0,127,0,0,127,0,0,128,0,0,128,0,0,128,0,0,129,0,0,129,0,0,129,0,0,130,0,0,130,0,0,130,0,0,131,0,0,131,0,0,131,0,-1,198,0,-2,201,0,-3,204,0,-1,199,0,-2,134,0,-3,200,0,0,134,0,0,134,0,-1,136,0,-2,202,0,-3,203,0,0,136,0,0,136,0,-1,138,0,-2,163,0,-3,164,0,0,138,0,0,138,0,0,140,0,0,140,0,0,141,0,0,141,0,0,142,0,0,142,0,0,143,0,0,143,0,0,144,0,0,144,0,0,144,0,0,145,0,0,145,0,0,146,0,0,146,0,0,147,0,0,147,0,0,147,0,-1,257,0,-2,260,0,-3,265,0,-1,275,0,-2,276,0,-3,277,0,0,150,0,0,151,0,0,151,0,-1,156,0,-2,157,0,0,156,0,0,156,0,0,157,0,0,157,0,0,158,0,0,159,0,0,159,0,0,160,0,0,161,0,0,162,0,0,163,0,0,163,0,0,164,0,0,164,0,4,165,0,4,166,0,4,167,0,4,168,0,4,169,0,-2,243,0,0,171,0,0,171,0,0,172,0,0,172,0,0,173,0,0,173,0,2,174,0,-2,259,0,0,175,0,0,179,0,2,180,0,2,181,0,2,182,0,2,183,0,0,184,0,0,185,0,-1,188,0,0,188,0,-1,190,0,0,190,0,0,195,0,0,197,0,0,199,0,0,200,0,0,202,0,0,203,0,-1,206,0,4,206,0,-1,208,0,4,208,0,-1,210,0,4,210,0,-1,212,0,4,212,0,-1,214,0,4,214,0,-1,216,0,4,216,0,-1,218,0,4,218,0,-1,220,0,4,220,0,-1,222,0,4,222,0,-1,224,0,4,224,0,-1,226,0,-1,228,0,-1,230,0,-1,232,0,-1,234,0,-1,236,0,-1,238,0,-1,240,0,-1,242,0,-1,245,0,-1,246,0,-1,247,0,-1,248,0,-1,249,0,2,249,0,-1,251,0,-1,252,0,-1,253,0,2,253,0,-1,255,0,-1,256,0,-1,258,0,2,259,0,-1,261,0,-1,262,0,-1,263,0,-1,264,0,2,264,0,-1,266,0,-1,267,0,-1,268,0,-1,269,0,2,269,0,-1,271,0,-1,272,0,-1,273,0,2,273,0,0,274,0,0,275,0,0,276,0,0,277,0,0,286,0,0,287,0,0,288,0,21,16,1,2,176,2,2,177,3,2,178,5,2,14,6,2,17,7,2,243,8,2,17,9,2,170,10,2,16,12,2,20,14,2,16,15,22,240,15,23,238,15,24,236,15,25,234,15,26,232,15,27,230,15,28,228,15,29,226,19,2,123,75,2,194,76,2,196,78,41,146,78,42,81,78,43,145,78,44,150,78,45,142,78,46,141,78,47,79,78,48,143,78,30,278,78,31,139,125,2,152,126,2,152,127,2,153,128,2,153,129,2,154,130,2,154,133,2,198,135,2,201,137,2,204,148,2,256,153,2,191,154,2,192,155,2,193,174,2,258,278,0,279,701],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,226,228,230,232,234,236,238,240],[-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,-1,1,17,7,7,7,7,-1,1,-1,13,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,5,-1,5,-1,5,-1,5,-1,5,-1,5,-1,5,-1,5,-1,5,-1,5,-1,5,-1,5,-1,5,-1,5,-1,5,17,-1,1,6,6,6,6,6,6,-1,13,6,6,6,6,32,6,6,6,-1,13,-1,13,6,-1,13,6,-1,-2,-3,-4,1,11,-1,1,11,-1,1,11,-1,1,11,-1,-2,-3,13,7,7,7,7,7,33,34,10,10,10,10,10,10,10,10],[81,82,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,0,19,1,20,0,21,1,22,0,23,1,24,0,25,1,26,1,27,0,28,1,29,0,30,1,31,0,32,1,33,0,34,0,35,1,36,0,37,1,38,0,39,1,40,0,41,1,42,0,19,1,20,0,21,1,22,0,23,1,24,0,25,1,26,1,27,0,28,1,29,0,30,1,31,0,32,1,33,0,34,0,35,1,36,0,37,1,38,0,39,1,40,0,41,1,42,0,19,1,20,0,21,1,22,0,23,1,24,0,25,1,26,1,27,0,28,1,29,0,30,1,31,0,32,1,33,0,34,0,35,1,36,0,37,1,38,0,39,1,40,0,41,1,42,46,47,46,47,48,83,48,5,49,84,44,73,45,72,5,49,50,50,5,51,5,51,7,16,7,17,7,16,7,17,7,16,7,17,7,85,7,86,0,11,5,52,53,11,87,18,88,11,5,52,53,11,89,18,5,90,91,92,5,93,54,55,5,56,5,57,54,55,5,56,5,57,8,2,9,2,10,2,8,2,9,2,10,2,8,2,9,2,10,2,8,2,9,2,10,2,8,2,9,2,10,2,101,102,18,95,96,59,60,97,98,61,61,62,63,99,64,64,60,59,100,65,65,66,66,63,114,114,62,12,12,12,12,69,70,13,74,75,13,76,77,13,78,79,58,94,152,58,103,67,68,68,67,104,105,106,107,108,109,110,111,112,113]],[[[200,[[201,"ShadowFlow",[[202,"ShadowStage"]]],[203,"ForwardFlow",1,[[204,"ForwardStage",[[205,["default"]],[206,true,1,["default"]]]]]]]]],0,0,[],[],[]]]]
