{"version":3,"sources":["file:///D:/PA_2024/3D/CatEscape/CatEscape_OP16/assets/Script/Game/LaserController.ts"],"names":["_decorator","Component","Node","ParticleSystem","Constants","CatController","AudioManager","ccclass","property","LaserController","onLoad","LaserBtn_Blue","active","LaserBtn_Red","wallLaserBtn_Blue","wallLaserBtn_Red","Laser","Fx_Lightning","forEach","fx","node","start","activeLaser","wallLaser","wallLaser_1","wallLaser_2","laser","laserFlag","playSound","SoundTrack","electricSound","play","stopSound","stop","update","dt","ironSource","isEndGame"],"mappings":"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","sourcesContent":["\nimport { _decorator, Component, Node, ParticleSystem } from 'cc';\nimport { Constants } from '../Data/Constant';\nimport { CatController } from './CatController';\nimport AudioManager from '../Plugin/AudioManager';\nconst { ccclass, property } = _decorator;\n\n@ccclass('LaserController')\nexport class LaserController extends Component {\n    @property(AudioManager)\n    AudioManager: AudioManager = null;\n    @property(CatController)\n    CatController: CatController = null;\n\n    @property(Node)\n    wallLaser_1: Node = null;\n    @property(Node)\n    wallLaser_2: Node = null;\n    @property(Node)\n    Laser: Node = null;\n\n    @property(Node)\n    LaserBtn_Red: Node = null;\n    @property(Node)\n    LaserBtn_Blue: Node = null;\n    @property(Node)\n    wallLaserBtn_Red: Node = null;\n    @property(Node)\n    wallLaserBtn_Blue: Node = null;\n\n    @property([ParticleSystem])\n    Fx_Lightning: ParticleSystem[] = [];\n\n\n    laserFlag: boolean = false;\n    wallLaserFlag: boolean = false;\n\n\n    protected onLoad(): void {\n        if (this.LaserBtn_Blue) {\n            this.LaserBtn_Blue.active = false;\n            this.LaserBtn_Red.active = true;\n            this.wallLaserBtn_Blue.active = true;\n            this.wallLaserBtn_Red.active = false;\n        }\n        if (this.Laser) {\n            this.Laser.active = false;\n        }\n\n        this.Fx_Lightning.forEach(fx => {\n            fx.node.active = false;\n        });\n    }\n\n    \n    protected start(): void {\n\n    }\n\n\n    private activeLaser(): void {\n        if (Constants.wallLaser) {\n            this.wallLaserBtn_Blue.active = true;\n            this.wallLaserBtn_Red.active = false;\n            this.wallLaser_1.active = true;\n            this.wallLaser_2.active = true;\n        } else {\n            this.wallLaserBtn_Red.active = true;\n            this.wallLaserBtn_Blue.active = false;\n            this.wallLaser_1.active = false;\n            this.wallLaser_2.active = false;\n        }\n\n        if (Constants.laser) {\n            if (this.laserFlag) {\n                return;\n            }\n\n            this.laserFlag = true;\n            this.LaserBtn_Blue.active = true;\n            this.LaserBtn_Red.active = false;\n            this.Laser.active = true;\n            this.AudioManager.playSound(Constants.SoundTrack.electricSound);\n            this.Fx_Lightning.forEach(fx => {\n                fx.node.active = true;\n                fx.play();\n            })\n        } else {\n\n            if (!this.laserFlag) {\n                return;\n            }\n\n            this.laserFlag = false;\n            this.LaserBtn_Red.active = true;\n            this.LaserBtn_Blue.active = false;\n            this.Laser.active = false;\n            this.AudioManager.stopSound(Constants.SoundTrack.electricSound);\n            this.Fx_Lightning.forEach(fx => {\n                fx.node.active = false;\n                fx.stop();\n            })\n        }\n    }\n\n\n    protected update(dt: number): void {\n        !Constants.ironSource.isEndGame && this.LaserBtn_Blue && this.activeLaser();\n    }\n}\n\n"]}