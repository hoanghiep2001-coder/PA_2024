{"version":3,"sources":["file:///D:/PA_2024/3D/ArtPuzzle/ArtPuzzle_Op1/assets/Script/Utils/Dissolve.ts"],"names":["_decorator","Component","gfx","MeshRenderer","Texture2D","ccclass","property","Dissolve","start","update","deltaTime","mr","materials","pass","passes","dissolve","dissolveThreshold","processPass","setDissolveThreshold","dissolve2","preFetchHandles","dissolveThresholdHandle","getHandle","dissolveThresholdTyeHandle","Type","FLOAT","dissolveType2Handle","dissolveNoiseMapBinding","getBinding","value","setUniform","onBtnDissolve","console","log","bindTexture","txtNoise1","getGFXTexture"],"mappings":"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","sourcesContent":["\nimport { _decorator, Component, gfx, MeshRenderer, Node, renderer, Texture2D } from 'cc';\nconst { ccclass, property } = _decorator;\n\n/**\n * Predefined variables\n * Name = Dissolve\n * DateTime = Tue May 28 2024 14:47:12 GMT+0700 (Indochina Time)\n * Author = hoanghiep2001\n * FileBasename = Dissolve.ts\n * FileBasenameNoExtension = Dissolve\n * URL = db://assets/Script/Utils/Dissolve.ts\n * ManualUrl = https://docs.cocos.com/creator/3.4/manual/en/\n *\n */\n \n@ccclass('Dissolve')\nexport class Dissolve extends Component {\n    @property(MeshRenderer)\n    mr: MeshRenderer | null = null;\n\n    @property(Texture2D)\n    txtNoise1: Texture2D | null = null;\n\n    @property(Texture2D)\n    txtNoise2: Texture2D | null = null;\n\n    private dissolve: boolean = false;\n    private dissolve2: boolean = false;\n\n    private dissolveThresholdHandle: number = -1;\n    private dissolveThresholdTyeHandle: number = -1;\n    private dissolveType2Handle: number = -1;\n    private dissolveNoiseMapBinding: number = -1;\n    private dissolveThreshold: number = 0.0;\n\n    start () {\n    }\n\n    update (deltaTime: number) {\n        if (this.mr?.materials) {\n            let pass = this.mr?.materials[0]?.passes[0];\n            if (pass) {\n                if (this.dissolve) {\n                    this.dissolveThreshold += 1 * deltaTime;\n                    if (this.dissolveThreshold > 1) {\n                        this.dissolveThreshold = 0;\n                    }\n                }\n                this.processPass(pass);\n            }\n\n            pass = this.mr?.materials[1]?.passes[0];\n            if (pass) {\n                this.processPass(pass);\n            }\n\n            if (0 == this.dissolveThreshold) {\n                this.dissolve = false;\n            }\n        }\n    }\n\n    processPass(pass: renderer.Pass) {\n        if (this.dissolve) {\n            this.setDissolveThreshold(pass, this.dissolveThreshold);\n        } else if (this.dissolve2) {\n            this.setDissolveThreshold(pass, this.dissolveThreshold);\n        }\n    }\n\n    preFetchHandles(pass: renderer.Pass) {\n        if (-1 == this.dissolveThresholdHandle) {\n            this.dissolveThresholdHandle = pass.getHandle('dissolveThreshold')\n        }\n        if (-1 == this.dissolveThresholdTyeHandle) {\n            this.dissolveThresholdTyeHandle = pass.getHandle('dissolveOffsetDir', 3, gfx.Type.FLOAT);\n        }\n        if (-1 == this.dissolveType2Handle) {\n            this.dissolveType2Handle = pass.getHandle('dissolveParams2', 0, gfx.Type.FLOAT);\n        }\n        if (-1 == this.dissolveNoiseMapBinding) {\n            this.dissolveNoiseMapBinding = pass.getBinding('dissolveMap');\n        }\n    }\n\n    setDissolveThreshold(pass: renderer.Pass, value: number) {\n        pass.setUniform(this.dissolveThresholdHandle, value);\n        pass.update();\n    }\n\n    onBtnDissolve() {\n        this.dissolve = true;\n        if (this.mr?.materials) {\n            let pass = this.mr?.materials[0]?.passes[0];\n            if (pass) {\n                this.preFetchHandles(pass);\n\n                console.log(pass);\n\n                pass.setUniform(this.dissolveThresholdTyeHandle, 1.0);\n                pass.setUniform(this.dissolveType2Handle, 1.0);\n                pass.bindTexture(this.dissolveNoiseMapBinding, this.txtNoise1?.getGFXTexture()!);\n                pass.update();\n            }\n\n            pass = this.mr?.materials[1]?.passes[0];\n            if (pass) {\n                pass.setUniform(this.dissolveThresholdTyeHandle, 1.0);\n                pass.setUniform(this.dissolveType2Handle, 1.0);\n                pass.bindTexture(this.dissolveNoiseMapBinding, this.txtNoise1?.getGFXTexture()!);\n                pass.update();\n            }\n        }\n    }\n\n}\n"]}