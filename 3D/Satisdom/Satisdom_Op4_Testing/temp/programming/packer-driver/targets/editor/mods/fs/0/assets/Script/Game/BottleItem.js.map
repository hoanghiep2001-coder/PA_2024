{"version":3,"sources":["file:///D:/PA_2024/3D/Satisdom/Satisdom_Op4/assets/Script/Game/BottleItem.ts"],"names":["_decorator","Component","CCInteger","Graphics","Color","log","ccclass","property","executeInEditMode","BottleItem","type","waterHeights","_waterHeights","heights","drawWater","waterColors","_waterColors","colors","bottleAngle","_bottleAngle","angle","node","onLoad","start","height1","height2","height3","forEach","color","toCSS","drawGraphics","clear","index","length","height","drawOneWater","radiansA","Math","PI","radiansM","atan","bottleWidth","tempWTan","tan","fillColor","hL","sqrt","bottleHeight","bW","moveTo","lineTo","cutOffset","hR","fill","update","dt","eulerAngles","z"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, CCInteger, Graphics, Color, tween, log } from 'cc';\r\nconst { ccclass, property, executeInEditMode } = _decorator;\r\n\r\n@ccclass('BottleItem')\r\n\r\n@executeInEditMode\r\nexport class BottleItem extends Component {\r\n    @property({ type: [CCInteger] })\r\n    public _waterHeights: number[] = [];\r\n    get waterHeights() {\r\n        return this._waterHeights;\r\n    }\r\n    set waterHeights(heights) {\r\n        this._waterHeights = heights;\r\n        this.drawWater();\r\n    }\r\n\r\n    @property({ type: [Color] })\r\n    public _waterColors: Color[] = [];\r\n    get waterColors() {\r\n        return this._waterColors;\r\n    }\r\n    set waterColors(colors) {\r\n        this._waterColors = colors;\r\n        this.drawWater();\r\n    }\r\n\r\n\r\n    @property(CCInteger)\r\n    bottleWidth: number = 564;\r\n\r\n    @property(CCInteger)\r\n    bottleHeight: number = 1024;\r\n\r\n\r\n    @property(CCInteger)\r\n    _bottleAngle: number = 0;\r\n\r\n\r\n    @property(CCInteger)\r\n    get bottleAngle() {\r\n        return this._bottleAngle;\r\n    }\r\n    set bottleAngle(angle) {\r\n        this._bottleAngle = angle;\r\n        this.node.angle = angle;\r\n        this.drawWater();\r\n    }\r\n\r\n    @property(Graphics)\r\n    drawGraphics: Graphics = null!;\r\n\r\n    private height1: number = 800;\r\n    private height2: number = 400;\r\n    private height3: number = 200;\r\n    // private lastRotation: number = 0;\r\n\r\n\r\n    onLoad() {\r\n\r\n    }\r\n\r\n\r\n    start() {\r\n        // step 1 = 75;\r\n        // step 2 = 85;\r\n        // step 3 = 90;\r\n\r\n        this._waterHeights = [this.height1, this.height2, this.height3];\r\n        this.drawWater();\r\n        \r\n        log(\"------------------\")\r\n        this.waterColors.forEach(color => {\r\n            log(color.toCSS())\r\n        });\r\n        log(\"------------------\")\r\n\r\n        // this.scheduleOnce(() => {\r\n        //     tween(this.node)\r\n        //     .to(1.5, {angle: -90})\r\n        //     .start()\r\n        // }, 1.5)\r\n    }\r\n\r\n\r\n    private drawWater() {\r\n        if (!this.drawGraphics) return;\r\n\r\n        this.drawGraphics.clear();\r\n        for (let index = 0; index < this.waterHeights.length; index++) {\r\n            const height = this.waterHeights[index];\r\n            this.drawOneWater(height, this.waterColors[index]);\r\n        }\r\n\r\n    }\r\n\r\n\r\n    private drawOneWater(height: number, color: Color) {\r\n        const radiansA = this.bottleAngle / 180 * Math.PI;\r\n        const radiansM = Math.atan(2 * height / this.bottleWidth);\r\n        const tempWTan = this.bottleWidth * Math.tan(radiansA);\r\n        this.drawGraphics.fillColor = color;\r\n        if (radiansA <= radiansM) {\r\n            if (radiansA < -radiansM) {\r\n                let hL = Math.sqrt(2 * height * -tempWTan);\r\n                hL = hL > this.bottleHeight ? this.bottleHeight : hL;\r\n                const bW = hL / Math.tan(-radiansA);\r\n                this.drawGraphics.moveTo(this.bottleWidth, 0);\r\n                this.drawGraphics.lineTo(this.bottleWidth, hL);\r\n                this.drawGraphics.lineTo(this.bottleWidth - bW, 0);\r\n                this.drawGraphics.lineTo(this.bottleWidth, 0);\r\n            } else {\r\n                this.drawGraphics.moveTo(0, 0);\r\n                let hL = height + tempWTan / 2;\r\n                let cutOffset = 0;\r\n                if (hL > this.bottleHeight) {\r\n                    cutOffset += hL - this.bottleHeight\r\n                }\r\n                let hR = height - tempWTan / 2;\r\n                if (hR > this.bottleHeight) {\r\n                    cutOffset += hR - this.bottleHeight\r\n                }\r\n\r\n                this.drawGraphics.lineTo(this.bottleWidth, 0);\r\n                this.drawGraphics.lineTo(this.bottleWidth, hR - cutOffset);\r\n                this.drawGraphics.lineTo(0, hL - cutOffset);\r\n                this.drawGraphics.lineTo(0, 0);\r\n            }\r\n        } else {\r\n            let hL = Math.sqrt(2 * height * tempWTan);\r\n            hL = hL > this.bottleHeight ? this.bottleHeight : hL;\r\n            const bW = hL / Math.tan(radiansA);\r\n            this.drawGraphics.moveTo(0, 0);\r\n            this.drawGraphics.lineTo(bW, 0);\r\n            this.drawGraphics.lineTo(0, hL);\r\n            this.drawGraphics.lineTo(0, 0);\r\n        }\r\n\r\n        this.drawGraphics.fill();\r\n    }\r\n\r\n\r\n    protected update(dt: number): void {\r\n         this.bottleAngle = this.node.eulerAngles.z\r\n    }\r\n}\r\n"]}