{"version":3,"sources":["file:///D:/PA_2024/3D/Satisdom/Satisdom_Op4/assets/Script/Game/Other/BottleItem.ts"],"names":["_decorator","Component","CCInteger","Color","tween","log","Vec3","UITransform","Sprite","Constants","AudioManager","ccclass","property","executeInEditMode","BottleItem","onLoad","start","initPos","node","getPosition","applyHeightToColors","initTubeSide","setWaterColors","tubeController","parent","getComponent","graphics","Graphics","index","spriteColors","length","sprite","color","_waterColors","_waterHeights","height1","height2","height3","getColorStatus","GamePlayNode","getChildByName","GamePlayComp","colorStatus","waterColors","applyWaterColor","values","firstColorOfTube","match","map","Number","indexOfFirstColor","rotateTube","tubeState","otherTube","setIndexHeightToZero","currentHeightOfColor","increseHeightOfWater","playSound","SoundTrack","WaterDropSound","to","angle","call","isFillUp2Color","isSorting","clear","scheduleOnce","decreaseHeightOfWater","console","targetNumber","heightObject","height","nonTransparentColorArr","onUpdate","target","fakeDrawSortWater","newState","leftPoint","rightPoint","otherTubeMiddlePoint","colorToDraw","posA","posB","drawWaterSide","getWorldPosition","graphicsNodeTransform","nodeAPosition","convertToNodeSpaceAR","nodeBPosition","strokeColor","moveTo","x","y","lineTo","stroke","CompleteSound","comeBackInitPos","interactingColorNumber","transparentColor","position","isCanTouch","MoveToAnotherTube","heightToCompare","name","tubeSide","drawWater","drawGraphics","waterHeights","drawOneWater","update","dt"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, CCInteger, Graphics, Color, tween, log, Vec3, color, Vec2, UITransform, Sprite } from 'cc';\r\nconst { ccclass, property, executeInEditMode } = _decorator;\r\n\r\nimport * as Interfaces from '../../Data/interfaces';\r\nimport { Constants } from '../../Data/constants';\r\nimport { AudioManager } from '../Controller/AudioManager';\r\n\r\ntype TubeController = import('../Controller/TubeController').TubeController;\r\n\r\ntype GamePlay = import(\"./GamePlay\").GamePlay;\r\n\r\n@ccclass('BottleItem')\r\n\r\nexport class BottleItem extends Component {\r\n\r\n    @property(AudioManager)\r\n    AudioManager: AudioManager = null;\r\n\r\n    // @property({ type: [CCInteger] })\r\n    // public _waterHeights: number[] = [];\r\n    // get waterHeights() {\r\n    //     return this._waterHeights;\r\n    // }\r\n    // set waterHeights(heights) {\r\n    //     this._waterHeights = heights;\r\n    //     this.drawWater();\r\n    // }\r\n\r\n    @property([Sprite])\r\n    spriteColors: Sprite[] = [];\r\n\r\n\r\n    public _waterColors: Color[] = [];\r\n\r\n\r\n\r\n    // @property(CCInteger)\r\n    // bottleWidth: number = 564;\r\n\r\n\r\n    // @property(CCInteger)\r\n    // bottleHeight: number = 1024;\r\n\r\n\r\n    @property(CCInteger)\r\n    _bottleAngle: number = 0;\r\n\r\n\r\n    // @property(CCInteger)\r\n    // get bottleAngle() {\r\n    //     return this._bottleAngle;\r\n    // }\r\n    // set bottleAngle(angle) {\r\n    //     this._bottleAngle = angle;\r\n    //     this.node.angle = angle;\r\n    //     this.drawWater();\r\n    // }\r\n\r\n\r\n    // @property(Graphics)\r\n    // drawGraphics: Graphics = null;\r\n\r\n\r\n    private height1: number = 900;\r\n    private height2: number = 450;\r\n    private height3: number = 200;\r\n\r\n    public tubeSide: string = \"\";\r\n    public initPos: Vec3 = null;\r\n\r\n    tubeController: TubeController = null;\r\n    graphics: Graphics = null;\r\n    isSorting: boolean = false;\r\n    newState: Interfaces.tubeState = null;\r\n\r\n    \r\n    onLoad() {\r\n\r\n    }\r\n\r\n\r\n    start() {\r\n        // step 1 = 65;\r\n        // step 2 = 85;\r\n        // step 3 = 90;\r\n\r\n        this.initPos = this.node.getPosition();\r\n\r\n        this.applyHeightToColors();\r\n\r\n        this.initTubeSide();\r\n\r\n        this.setWaterColors();\r\n\r\n        this.tubeController = this.node.parent.getComponent(\"TubeController\") as TubeController;\r\n\r\n        this.graphics = this.tubeController.Graphics;\r\n    }\r\n\r\n\r\n    private setWaterColors(): void {\r\n        for (let index = 0; index < this.spriteColors.length; index++) {\r\n            const sprite = this.spriteColors[index];\r\n            sprite.color = this._waterColors[index];\r\n        }\r\n    }\r\n\r\n\r\n    private applyHeightToColors(): void {\r\n        this._waterHeights = [this.height1, this.height2, this.height3];\r\n    }\r\n\r\n\r\n    private getColorStatus(): Interfaces.colorStatus {\r\n        const GamePlayNode: Node = this.node.parent.parent.parent.getChildByName(\"GamePlay\");\r\n        const GamePlayComp: GamePlay = GamePlayNode.getComponent(\"GamePlay\") as GamePlay;\r\n        const colorStatus = GamePlayComp.getColorStatus(this.waterColors);\r\n\r\n        return colorStatus;\r\n    }\r\n\r\n\r\n    private applyWaterColor(): void {\r\n        const colorStatus = this.getColorStatus();\r\n\r\n        // tách chuỗi string rgba thành từng phần\r\n        let values = colorStatus.firstColorOfTube.match(/\\d+(\\.\\d+)?/g).map(Number);\r\n        let color = new Color(values[0], values[1], values[2], values[3] * 255);\r\n\r\n        this._waterColors[colorStatus.indexOfFirstColor - 1] = color;\r\n\r\n        log(\"Màu đc chuyển đổi: \" + color)\r\n    }\r\n\r\n\r\n    public rotateTube(tubeState: Interfaces.tubeState): void {\r\n        log(\"angling\")\r\n\r\n        tubeState.otherTube.setIndexHeightToZero(tubeState.currentHeightOfColor);\r\n\r\n        tubeState.otherTube.applyWaterColor();\r\n\r\n        tubeState.otherTube.increseHeightOfWater();\r\n\r\n        this.AudioManager.playSound(Constants.SoundTrack.WaterDropSound);\r\n\r\n        tween(this.node)\r\n            .to(1.5, { angle: tubeState.angle })\r\n            .call(() => {\r\n                Constants.isFillUp2Color = false;\r\n\r\n                this.isSorting = false;\r\n\r\n                this.graphics.clear();\r\n            })\r\n            .start();\r\n\r\n            this.scheduleOnce(() => {\r\n                this.isSorting = true;\r\n                this.decreaseHeightOfWater(tubeState)\r\n            }, 0.4)\r\n    }\r\n\r\n\r\n    private increseHeightOfWater(): void {\r\n        console.log(\"Tăng mực nước\");\r\n\r\n        const colorStatus = this.getColorStatus();\r\n        let targetNumber: number = null;\r\n        let heightObject: Interfaces.heightObject = { height: null };\r\n\r\n        switch (colorStatus.nonTransparentColorArr.length) {\r\n            case 3:\r\n                targetNumber = 900;\r\n                heightObject.height = this.height1;\r\n                break;\r\n            case 2:\r\n                targetNumber = 900;\r\n                heightObject.height = this.height2;\r\n                Constants.isFillUp2Color = true;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n        tween(heightObject)\r\n            .to(1.5, { height: targetNumber }, {\r\n                onUpdate: (target: Interfaces.heightObject) => {\r\n\r\n                    if (Constants.isFillUp2Color) {\r\n                        this.height2 = target.height;\r\n                    } else {\r\n                        if (targetNumber === 900) this.height1 = target.height;\r\n                        else if (targetNumber === 450) this.height2 = target.height;\r\n                        else if (targetNumber === 200) this.height3 = target.height;\r\n                    }\r\n\r\n                    this.applyHeightToColors();\r\n                },\r\n            })\r\n            .start();\r\n    };\r\n\r\n\r\n    private fakeDrawSortWater(newState: Interfaces.tubeState): void {\r\n        let leftPoint = this.node.getChildByName(\"LeftPoint\"),\r\n            rightPoint = this.node.getChildByName(\"RightPoint\"),\r\n            otherTube: Node = newState.otherTube.node,\r\n            otherTubeMiddlePoint = otherTube.getChildByName(\"MiddlePoint\"),\r\n\r\n            values = newState.firstColorOfTube.match(/\\d+(\\.\\d+)?/g).map(Number),\r\n            colorToDraw = new Color(values[0], values[1], values[2], values[3] * 255),\r\n            posA: Vec3 = new Vec3(),\r\n            posB: Vec3 = new Vec3();\r\n\r\n        if (newState.drawWaterSide === \"left\") {\r\n            posA = leftPoint.getWorldPosition();\r\n            posB = otherTubeMiddlePoint.getWorldPosition();\r\n        }\r\n        else {\r\n            posA = rightPoint.getWorldPosition();\r\n            posB = otherTubeMiddlePoint.getWorldPosition();\r\n        }\r\n\r\n        // Chuyển đổi vị trí từ không gian thế giới sang không gian của GraphicsNode\r\n        const graphicsNodeTransform = this.graphics.getComponent(UITransform);\r\n        const nodeAPosition = graphicsNodeTransform.convertToNodeSpaceAR(posA);\r\n        const nodeBPosition = graphicsNodeTransform.convertToNodeSpaceAR(posB);\r\n\r\n        // Vẽ đường nối và đặt màu\r\n        this.graphics.clear();\r\n        this.graphics.strokeColor = colorToDraw;  // Đặt màu cho đường vẽ\r\n        this.graphics.moveTo(nodeAPosition.x, nodeAPosition.y);\r\n        this.graphics.lineTo(nodeBPosition.x, nodeBPosition.y);\r\n        this.graphics.stroke();\r\n\r\n        log(\"vẽ giọt nước\");\r\n\r\n    }\r\n\r\n\r\n    private decreaseHeightOfWater(newState: Interfaces.tubeState): void {\r\n\r\n        const colorStatus = this.getColorStatus();\r\n\r\n        let targetNumber: number = null;\r\n        let heightObject: Interfaces.heightObject = { height: null };\r\n\r\n        switch (colorStatus.nonTransparentColorArr.length) {\r\n            case 3:\r\n                targetNumber = 900;\r\n                heightObject.height = this.height1;\r\n                break;\r\n            case 2:\r\n                targetNumber = 900;\r\n                heightObject.height = this.height1;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n        tween(heightObject)\r\n            .to(1.5, { height: 0 }, {\r\n                onUpdate: (target: Interfaces.heightObject) => {\r\n                    if (Constants.isFillUp2Color) {\r\n                        this.height1 = target.height;\r\n                        this.height2 = target.height;\r\n                    } else {\r\n                        if (targetNumber === 900) this.height1 = target.height;\r\n                        else if (targetNumber === 450) this.height2 = target.height;\r\n                        else if (targetNumber === 200) this.height3 = target.height;\r\n                    }\r\n\r\n                    this.applyHeightToColors();\r\n                },\r\n            })\r\n            .call(() => {\r\n                this.AudioManager.playSound(Constants.SoundTrack.CompleteSound);\r\n                this.comeBackInitPos();\r\n                this._waterColors[Constants.interactingColorNumber] = Constants.transparentColor;\r\n\r\n                if (Constants.isFillUp2Color) this._waterColors[Constants.interactingColorNumber + 1] = Constants.transparentColor;\r\n\r\n                console.log(\"Sort Xong\")\r\n                log(\"------------------\")\r\n            })\r\n            .start();\r\n    };\r\n\r\n\r\n    public comeBackInitPos(): void {\r\n        tween(this.node)\r\n            .to(0.3, { position: this.initPos, angle: 0 })\r\n            .call(() => Constants.isCanTouch = true)\r\n            .start();\r\n    };\r\n\r\n\r\n    public MoveToAnotherTube(newState: Interfaces.tubeState): void {\r\n        log(\"Di chuyển\")\r\n\r\n        Constants.isCanTouch = false;\r\n\r\n        this.newState = newState;\r\n\r\n        tween(this.node)\r\n            .to(0.3, { position: newState.position })\r\n            .call(() => this.rotateTube(newState))\r\n            .start();\r\n    };\r\n\r\n\r\n    private setIndexHeightToZero(heightToCompare: number): void {\r\n        let height: string = \"\";\r\n\r\n        switch (heightToCompare) {\r\n            case 900:\r\n                this.height1 = 0;\r\n                height = \"height1\";\r\n                break;\r\n            case 450:\r\n                this.height2 = 450;\r\n                height = \"height2\";\r\n\r\n                if (this.node.name === \"Base_Tube_2\") this.height1 = 0;\r\n                break;\r\n            case 200:\r\n                this.height3 = 200;\r\n                height = \"height3\";\r\n                break;\r\n            default:\r\n                break;\r\n        };\r\n\r\n        log(this.node.name + \" - index Height to zero: \" + height);\r\n\r\n        this.applyHeightToColors();\r\n    }\r\n\r\n\r\n    private initTubeSide(): void {\r\n        switch (this.node.name) {\r\n            case \"Base_Tube_0\":\r\n                this.tubeSide = \"left\";\r\n                break;\r\n            case \"Base_Tube_1\":\r\n                this.tubeSide = \"right\";\r\n                break;\r\n            case \"Base_Tube_2\":\r\n                this.tubeSide = \"right\";\r\n                break;\r\n            case \"Base_Tube_3\":\r\n                this.tubeSide = \"left\";\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n\r\n    private drawWater() {\r\n        if (!this.drawGraphics) return;\r\n\r\n        this.drawGraphics.clear();\r\n        for (let index = 0; index < this.waterHeights.length; index++) {\r\n            const height = this.waterHeights[index];\r\n            this.drawOneWater(height, this.waterColors[index]);\r\n        }\r\n    }\r\n\r\n\r\n    // private drawOneWater(height: number, color: Color) {\r\n    //     const radiansA = this.bottleAngle / 180 * Math.PI;\r\n    //     const radiansM = Math.atan(2 * height / this.bottleWidth);\r\n    //     const tempWTan = this.bottleWidth * Math.tan(radiansA);\r\n    //     this.drawGraphics.fillColor = color;\r\n    //     if (radiansA <= radiansM) {\r\n    //         if (radiansA < -radiansM) {\r\n    //             let hL = Math.sqrt(2 * height * -tempWTan);\r\n    //             hL = hL > this.bottleHeight ? this.bottleHeight : hL;\r\n    //             const bW = hL / Math.tan(-radiansA);\r\n    //             this.drawGraphics.moveTo(this.bottleWidth, 0);\r\n    //             this.drawGraphics.lineTo(this.bottleWidth, hL);\r\n    //             this.drawGraphics.lineTo(this.bottleWidth - bW, 0);\r\n    //             this.drawGraphics.lineTo(this.bottleWidth, 0);\r\n    //         } else {\r\n    //             this.drawGraphics.moveTo(0, 0);\r\n    //             let hL = height + tempWTan / 2;\r\n    //             let cutOffset = 0;\r\n    //             if (hL > this.bottleHeight) {\r\n    //                 cutOffset += hL - this.bottleHeight\r\n    //             }\r\n    //             let hR = height - tempWTan / 2;\r\n    //             if (hR > this.bottleHeight) {\r\n    //                 cutOffset += hR - this.bottleHeight\r\n    //             }\r\n\r\n    //             this.drawGraphics.lineTo(this.bottleWidth, 0);\r\n    //             this.drawGraphics.lineTo(this.bottleWidth, hR - cutOffset);\r\n    //             this.drawGraphics.lineTo(0, hL - cutOffset);\r\n    //             this.drawGraphics.lineTo(0, 0);\r\n    //         }\r\n    //     } else {\r\n    //         let hL = Math.sqrt(2 * height * tempWTan);\r\n    //         hL = hL > this.bottleHeight ? this.bottleHeight : hL;\r\n    //         const bW = hL / Math.tan(radiansA);\r\n    //         this.drawGraphics.moveTo(0, 0);\r\n    //         this.drawGraphics.lineTo(bW, 0);\r\n    //         this.drawGraphics.lineTo(0, hL);\r\n    //         this.drawGraphics.lineTo(0, 0);\r\n    //     }\r\n\r\n    //     this.drawGraphics.fill();\r\n    // }\r\n\r\n\r\n    protected update(dt: number): void {\r\n        // this.bottleAngle = this.node.eulerAngles.z;\r\n\r\n        this.isSorting && this.fakeDrawSortWater(this.newState)\r\n    }\r\n}\r\n"]}