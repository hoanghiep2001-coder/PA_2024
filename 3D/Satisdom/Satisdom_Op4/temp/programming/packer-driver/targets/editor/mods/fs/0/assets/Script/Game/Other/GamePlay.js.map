{"version":3,"sources":["file:///D:/PA_2024/3D/Satisdom/Satisdom_Op4/assets/Script/Game/Other/GamePlay.ts"],"names":["_decorator","Component","Node","Vec3","GameController","Constants","AudioManager","BottleItem","NodeController","ccclass","property","GamePlay","onLoad","start","getColorStatus","colors","firstColorOfTube","indexOfFirstColor","nonTransparentColorArr","heightOfFirstColor","colorHeightArr","isHasTwoSameColor","hasConsecutiveDuplicateColors","i","length","a","toCSS","push","areColorsEqual","color1","color2","r","g","b","handleMoveToAnotherTube","tubeA","tubeB","tubeABottleItemComp","getComponent","tubeBBottleItemComp","setSiblingIndex","Tubes","tubeState","calculateNewTubeState","MoveToAnotherTube","console","log","newState","position","angle","currentHeightOfColor","otherTube","drawWaterSide","tubeBpos","node","getPosition","colorStatus","waterColors","tubeSide","y","handleMuteSoundIronSource","ironSource","State","parseInt","localStorage","getItem","SoundState","isEndGame","stopAllSound"],"mappings":"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","sourcesContent":["import { _decorator, Animation, Component, EventTouch, Node, PhysicsSystem, SkeletalAnimation, Vec2, Vec3, ParticleSystem, log, sp, view, UITransform, Label, Sprite, VideoPlayer, director, Button, ParticleSystem2D, tween, Color } from 'cc';\nconst { ccclass, property } = _decorator;\n\nimport * as Interfaces from '../../Data/interfaces';\n\nimport { GameController } from '../Controller/GameController';\nimport { Constants } from '../../Data/constants';\nimport { AudioManager } from '../Controller/AudioManager';\nimport { BottleItem } from './BottleItem';\nimport { NodeController } from '../Controller/NodeController';\n\n\n@ccclass('GamePlay')\nexport class GamePlay extends Component {\n\n    // Component\n    @property(GameController)\n    GameController: GameController = null;\n    @property(AudioManager)\n    AudioManager: AudioManager = null;\n    @property(NodeController)\n    NodeController: NodeController = null;\n\n    @property(Node)\n    HideMask: Node = null;\n\n\n    protected onLoad(): void {\n\n    }\n\n\n    protected start(): void {\n        // this.AudioManager.playSound(Constants.SoundTrack.bgSound);\n    }\n\n\n    public getColorStatus(colors: Color[]): Interfaces.colorStatus {\n        let firstColorOfTube: string = null;\n        let indexOfFirstColor: number = null;\n        let nonTransparentColorArr: string[] = [];\n        let heightOfFirstColor: number = null;\n        let colorHeightArr = [900, 450, 200];\n        let isHasTwoSameColor: boolean = false;\n        \n        isHasTwoSameColor = this.hasConsecutiveDuplicateColors(colors);\n\n        for (let i = 0; i < colors.length; i++) {\n            if (colors[i].a !== 0) {\n                if (!firstColorOfTube) {\n                    firstColorOfTube = colors[i].toCSS();\n                    heightOfFirstColor = colorHeightArr[i];\n                    indexOfFirstColor = i;\n                };\n                nonTransparentColorArr.push(colors[i].toCSS());\n            }\n        }\n    \n        return {\n            firstColorOfTube: firstColorOfTube,\n            indexOfFirstColor: indexOfFirstColor,\n            nonTransparentColorArr: nonTransparentColorArr,\n            heightOfFirstColor: heightOfFirstColor,\n            isHasTwoSameColor: isHasTwoSameColor\n        }\n    }\n\n\n    private areColorsEqual(color1: Color, color2: Color): boolean {\n        return color1.r === color2.r &&\n               color1.g === color2.g &&\n               color1.b === color2.b &&\n               color1.a === color2.a;\n    }\n\n\n    private hasConsecutiveDuplicateColors(colors: Color[]): boolean {\n        for (let i = 0; i < colors.length - 1; i++) {\n            if (this.areColorsEqual(colors[i], colors[i + 1])) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    public handleMoveToAnotherTube(tubeA: Node, tubeB: Node): void {\n        const tubeABottleItemComp = tubeA.getComponent(BottleItem);\n\n        const tubeBBottleItemComp = tubeB.getComponent(BottleItem);\n\n        tubeB.setSiblingIndex(this.NodeController.Tubes.length - 1);\n\n        tubeA.setSiblingIndex(this.NodeController.Tubes.length - 2);\n\n        let tubeState = this.calculateNewTubeState(tubeBBottleItemComp, tubeABottleItemComp)\n\n        tubeABottleItemComp.MoveToAnotherTube(tubeState);\n\n        console.log(\"correct\");\n    }\n\n\n    private calculateNewTubeState(tubeBBottleItemComp: BottleItem, tubeABottleItemComp: BottleItem): Interfaces.tubeState {\n        let newState: Interfaces.tubeState = {\n            position: null,\n            angle: null,\n            firstColorOfTube: null,\n            currentHeightOfColor: null,\n            otherTube: null,\n            drawWaterSide: null,\n        };\n\n        const tubeBpos: Vec3 = tubeBBottleItemComp.node.getPosition();\n\n        const colorStatus: Interfaces.colorStatus = this.getColorStatus(tubeABottleItemComp.waterColors);\n\n        newState.firstColorOfTube = colorStatus.firstColorOfTube;\n\n        newState.currentHeightOfColor = colorStatus.heightOfFirstColor;\n\n        newState.otherTube = tubeBBottleItemComp;\n\n        switch (tubeBBottleItemComp.tubeSide) {\n            case \"left\":\n                newState.position = new Vec3(30, tubeBpos.y + 120, 0);\n\n                if (colorStatus.nonTransparentColorArr.length === 3) newState.angle = 65\n\n                else if (colorStatus.nonTransparentColorArr.length === 2) newState.angle = 85\n\n                else newState.angle = 90;\n\n                newState.drawWaterSide = \"left\";\n\n                break;\n            case \"right\":\n                newState.position = new Vec3(-30, tubeBpos.y + 120, 0)\n\n                if (colorStatus.nonTransparentColorArr.length === 3) newState.angle = -75\n\n                else if (colorStatus.nonTransparentColorArr.length === 2) newState.angle = -85\n\n                else newState.angle = -90;\n\n                newState.drawWaterSide = \"right\";\n\n                break;\n            default:\n                break;\n        }\n\n        return newState;\n    }\n\n\n    private handleMuteSoundIronSource(): void {\n        Constants.ironSource.State = parseInt(localStorage.getItem(\"cocosSoundState\"), 10)\n\n        if (Constants.ironSource.State) {\n            if (Constants.ironSource.State === 1 && !Constants.ironSource.SoundState && !Constants.ironSource.isEndGame) {\n                Constants.ironSource.SoundState = true;\n            }\n\n            if (Constants.ironSource.State === 2 && Constants.ironSource.SoundState) {\n                Constants.ironSource.SoundState = false;\n                this.AudioManager.stopAllSound();\n            }\n        }\n    }\n}\n"]}