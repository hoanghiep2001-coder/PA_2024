{"version":3,"sources":["file:///D:/PA_2024/3D/MergeRobo/MergeRobo_Op8/assets/assets/script/orbitCameraInputTouch.ts"],"names":["_decorator","Component","systemEvent","SystemEvent","math","CameraComponent","SystemEventType","OrbitCamera","ccclass","property","OrbitCameraInputTouch","Vec3","Vec2","start","onEnable","_addEvents","onDisable","_removeEvents","on","EventType","TOUCH_START","onTouchStartEndCancel","TOUCH_MOVE","onTouchMove","TOUCH_END","TOUCH_CANCEL","off","getPinchDistance","pointA","pointB","dx","x","dy","y","Math","sqrt","calcMidPoint","result","set","scale","t","event","touches","getTouches","length","type","lastPinchDistance","getLocation","touch1Pos","touch2Pos","lastPinchMidPoint","pan","midPoint","orbitCamera","isLock","pinchMidPoint","touch","getPreviousLocation","startPos","endPos","pitch","orbitSensitivity","yaw","console","log","currentPinchDistance","diffInPinchDistance","distance","distanceSensitivity","copy"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, systemEvent, SystemEvent, math, CameraComponent, EventTouch, SystemEventType } from 'cc';\nimport { OrbitCamera } from './orbitCamera';\nconst { ccclass, property } = _decorator;\n\n@ccclass('OrbitCameraInputTouch')\nexport class OrbitCameraInputTouch extends Component {\n    /* class member could be defined like this */\n    // dummy = '';\n\n    /* use `property` decorator if your want the member to be serializable */\n    // @property\n    // serializableDummy = 0;\n    @property\n    orbitSensitivity = 0.3;\n    @property\n    distanceSensitivity = 0.15;\n    @property(OrbitCamera)\n    orbitCamera: OrbitCamera = null;\n    @property(CameraComponent)\n    camera: CameraComponent = null;\n    \n    fromWorldPoint = new math.Vec3();\n    toWorldPoint = new math.Vec3();\n    worldDiff = new math.Vec3();\n    pinchMidPoint = new math.Vec2();\n    lastTouchPoint = new math.Vec2();\n    lastPinchMidPoint = new math.Vec2();\n    lastPinchDistance = 0;\n    startPos = new math.Vec2();\n    endPos = new math.Vec2();\n    touch1Pos = new math.Vec2();\n    touch2Pos = new math.Vec2();\n\n    start () {\n        // Your initialization goes here.\n    }\n\n    onEnable () {\n\t\tthis._addEvents();\n\t}\n\n\tonDisable () {\n        this._removeEvents();\n    }\n    \n    private _addEvents () {\n\t\tsystemEvent.on(SystemEvent.EventType.TOUCH_START, this.onTouchStartEndCancel, this);\n\t\tsystemEvent.on(SystemEvent.EventType.TOUCH_MOVE, this.onTouchMove, this);\n\t\tsystemEvent.on(SystemEvent.EventType.TOUCH_END, this.onTouchStartEndCancel, this);\n        systemEvent.on(SystemEvent.EventType.TOUCH_CANCEL, this.onTouchStartEndCancel, this);\n\t}\n\n\tprivate _removeEvents () {\n\t\tsystemEvent.off(SystemEvent.EventType.TOUCH_START, this.onTouchStartEndCancel, this);\n\t\tsystemEvent.off(SystemEvent.EventType.TOUCH_MOVE, this.onTouchMove, this);\n\t\tsystemEvent.off(SystemEvent.EventType.TOUCH_END, this.onTouchStartEndCancel, this);\n        systemEvent.off(SystemEvent.EventType.TOUCH_CANCEL, this.onTouchStartEndCancel, this);\n    }\n    \n    getPinchDistance (pointA, pointB) {\n        // Return the distance between the two points\n        var dx = pointA.x - pointB.x;\n        var dy = pointA.y - pointB.y;\n    \n        return Math.sqrt((dx * dx) + (dy * dy));\n    }\n    \n    calcMidPoint (pointA, pointB, result) {\n        result.set(pointB.x - pointA.x, pointB.y - pointA.y);\n        result.scale(0.5);\n        result.x += pointA.x;\n        result.y += pointA.y;\n    }\n    \n    onTouchStartEndCancel (t: Touch, event: EventTouch) {\n        // We only care about the first touch for camera rotation. As the user touches the screen,\n        // we stored the current touch position\n        // console.log(event.type);\n        var touches = event.getTouches();\n        if (touches.length == 1) {\n            //this.lastTouchPoint.set(touches[0].x, touches[0].y);\n            if (event.type === SystemEventType.TOUCH_START) {\n                this.lastPinchDistance = null;    //对于多点触控可能会导致获取数据异常\n            }\n        } else if (touches.length == 2) {\n            // If there are 2 touches on the screen, then set the pinch distance\n            touches[0].getLocation(this.touch1Pos);\n            touches[1].getLocation(this.touch2Pos);\n            this.lastPinchDistance = this.getPinchDistance(this.touch1Pos, this.touch2Pos);\n            this.calcMidPoint(this.touch1Pos, this.touch2Pos, this.lastPinchMidPoint);\n\n            // console.log(event.type, this.touch1Pos, this.touch2Pos, this.lastPinchDistance);\n        }\n    };\n    \n    \n    pan (midPoint) {\n        // var fromWorldPoint = this.fromWorldPoint;\n        // var toWorldPoint = this.toWorldPoint;\n        // var worldDiff = this.worldDiff;\n    \n        // // For panning to work at any zoom level, we use screen point to world projection\n        // // to work out how far we need to pan the pivotEntity in world space\n        // var distance = this.orbitCamera.distance;\n    \n        // this.camera.screenToWorld(new math.Vec3(midPoint.x, midPoint.y, distance), fromWorldPoint);\n        // this.camera.screenToWorld(new math.Vec3(this.lastPinchMidPoint.x, this.lastPinchMidPoint.y, distance), toWorldPoint);\n    \n        // math.Vec3.subtract(worldDiff, toWorldPoint, fromWorldPoint);\n    \n        // this.orbitCamera.pivotPoint.add(worldDiff);\n    };\n    \n    \n    onTouchMove (t: Touch, event: EventTouch) {\n        if (this.orbitCamera.isLock) {\n            return;\n        }\n\n        var pinchMidPoint = this.pinchMidPoint;\n    \n        // We only care about the first touch for camera rotation. Work out the difference moved since the last event\n        // and use that to update the camera target position\n        var touches = event.getTouches();\n        if (touches.length == 1) {\n            var touch = touches[0];\n            touch.getPreviousLocation(this.startPos);\n            touch.getLocation(this.endPos);\n            this.orbitCamera.pitch -= (this.startPos.y - this.endPos.y) * this.orbitSensitivity;\n            this.orbitCamera.yaw -= (this.endPos.x - this.startPos.x) * this.orbitSensitivity;\n            // this.orbitCamera.pitch -= (touch.y - this.lastTouchPoint.y) * this.orbitSensitivity;\n            // this.orbitCamera.yaw -= (touch.x - this.lastTouchPoint.x) * this.orbitSensitivity;\n    \n            // this.lastTouchPoint.set(touch.x, touch.y);\n\n            console.log(\"onTouchMove1\", \"this.orbitCamera.pitch: \", this.orbitCamera.pitch, \"this.orbitCamera.yaw: \",this.orbitCamera.yaw );\n    \n        } else if (touches.length == 2) {\n            // Calculate the difference in pinch distance since the last event\n            touches[0].getLocation(this.touch1Pos);\n            touches[1].getLocation(this.touch2Pos);\n            \n            var currentPinchDistance = this.getPinchDistance(this.touch1Pos, this.touch2Pos);\n            var diffInPinchDistance = 0;\n            if (this.lastPinchDistance !== null) {\n                diffInPinchDistance = currentPinchDistance - this.lastPinchDistance;\n            }\n\n            // console.log(\"move:\", this.touch1Pos, this.touch2Pos, currentPinchDistance, this.lastPinchDistance, diffInPinchDistance);\n            this.lastPinchDistance = currentPinchDistance;\n    \n            this.orbitCamera.distance -= (diffInPinchDistance * this.distanceSensitivity * 0.1) * (this.orbitCamera.distance * 0.1);\n    \n            // Calculate pan difference\n            this.calcMidPoint(this.touch1Pos, this.touch2Pos, pinchMidPoint);\n            this.pan(pinchMidPoint);\n            math.Vec2.copy(this.lastPinchMidPoint, pinchMidPoint);\n\n            console.log(\"onTouchMove2\");\n        }\n    };\n\n    // update (deltaTime: number) {\n    //     // Your update function goes here.\n    // }\n}\n"]}