{"version":3,"sources":["file:///D:/PA_2024/3D/MergeRobo/MergeRobo/assets/Script/Controller/GamePlay.ts"],"names":["_decorator","Animation","Component","math","SkeletalAnimation","Vec3","tween","easing","GameController","AudioManager","Constants","NodesController","BossController","ccclass","property","GamePlay","onLoad","start","Text_Tap","active","startHintToMerge","robo1","robo2","robo1Pos","getPosition","robo2Pos","to","position","x","z","elasticInOut","mergeStep1","isCanTouch","isMergeStep1Flag","robo_Step1","robo3","posRobo3","forEach","robo","getComponent","play","scheduleOnce","call","Spine_Flash","hideMask","playSound","SoundTrack","MergeSound","optimus_Step1","playDanceAnim","showStep2","activeEasingTweenForNode","setRotationFromEuler","children","getChildByName","setPosition","playMuscleAnim","node","scaleUp","scaleDown","repeatForever","scale","elasticOut","showCTA","isDonePA","CTA","CTA_btn","update","dt","GameData","isDoneStep1"],"mappings":"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","sourcesContent":["import { _decorator, Animation, AudioSource, Camera, view, Vec2, Component, EventTouch, Graphics, log, math, Node, PhysicsSystem, quat, RigidBody, SkeletalAnimation, Skeleton, Vec3, UITransform, ParticleSystem, PrivateNode, tween, easing } from 'cc';\r\nimport { GameController } from './GameController';\r\nimport { AudioManager } from '../Plugin/AudioManager';\r\nimport { Constants } from '../Data/Constant';\r\nimport { NodesController } from './NodesController';\r\nimport { BossController } from './BossController';\r\nconst { ccclass, property } = _decorator;\r\n@ccclass('GamePlay')\r\nexport class GamePlay extends Component {\r\n    // Script\r\n    @property(NodesController)\r\n    NodesController: NodesController = null;\r\n    @property(GameController)\r\n    GameController: GameController = null;\r\n    @property(AudioManager)\r\n    AudioManager: AudioManager = null;\r\n    @property(BossController)\r\n    BossController: BossController = null;\r\n\r\n    // state\r\n    isMergeStep1Flag: boolean = false;\r\n    isMergeStep2Flag: boolean = false;\r\n    isDonePA: boolean = false;\r\n\r\n\r\n    protected onLoad(): void {\r\n\r\n    }\r\n\r\n\r\n    protected start(): void {\r\n        this.NodesController.Text_Tap.active = false;\r\n\r\n        // this.AudioManager.playSound(Constants.SoundTrack.bgSound);\r\n    }\r\n\r\n\r\n    private startHintToMerge(robo1: Node, robo2: Node): void {\r\n        let robo1Pos = robo1.getPosition();\r\n        let robo2Pos = robo2.getPosition();\r\n\r\n        tween(robo1)\r\n            .to(0.5, \r\n                { position: new math.Vec3(robo1Pos.x, -12.1, robo1Pos.z) },\r\n                { easing: easing.elasticInOut }\r\n            )\r\n            .start();\r\n\r\n        tween(robo2)\r\n            .to(0.5, \r\n                { position: new math.Vec3(robo2Pos.x, -12.1, robo2Pos.z) }, \r\n                { easing: easing.elasticInOut }\r\n            )\r\n            .start();\r\n    }\r\n\r\n\r\n    private mergeStep1(): void {\r\n        Constants.isCanTouch = false;\r\n\r\n        this.isMergeStep1Flag = true;\r\n\r\n        let robo1 = this.NodesController.robo_Step1[0];\r\n        let robo2 = this.NodesController.robo_Step1[1];\r\n        let robo3 = this.NodesController.robo_Step1[2];\r\n        let posRobo3 = robo3.getPosition();\r\n\r\n        this.NodesController.robo_Step1.forEach(robo => robo.getComponent(SkeletalAnimation).play(\"pickup\"));\r\n\r\n        this.startHintToMerge(robo1, robo2);\r\n\r\n        this.scheduleOnce(() => {\r\n            tween(robo1)\r\n                .to(0.5, { position: posRobo3 })\r\n                .start();\r\n\r\n            tween(robo2)\r\n                .to(0.5, { position: posRobo3 })\r\n                .call(() => {\r\n                    this.NodesController.Spine_Flash.active = true;\r\n\r\n                    this.NodesController.hideMask.getComponent(Animation).play();\r\n\r\n                    this.AudioManager.playSound(Constants.SoundTrack.MergeSound);\r\n\r\n                    robo1.active = false;\r\n\r\n                    robo2.active = false;\r\n\r\n                    this.scheduleOnce(() => {\r\n\r\n                        this.NodesController.optimus_Step1.active = true;\r\n\r\n                        this.BossController.playDanceAnim();\r\n                    }, 0.5);\r\n                })\r\n                .start();\r\n        }, 0.5);\r\n\r\n\r\n        this.scheduleOnce(() => {\r\n            this.showStep2();\r\n        }, 4)\r\n    }\r\n\r\n\r\n    private showStep2(): void {\r\n        this.NodesController.hideMask.getComponent(Animation).play();\r\n\r\n        this.scheduleOnce(() => {\r\n            Constants.isCanTouch = true;\r\n\r\n            this.NodesController.Text_Tap.active = true;\r\n\r\n            this.activeEasingTweenForNode(this.NodesController.Text_Tap, 0.35, 0.3);\r\n            \r\n            this.NodesController.optimus_Step1.setRotationFromEuler(0, 180, 0);\r\n\r\n            this.NodesController.optimus_Step1.children[0].getChildByName(\"Level\").setRotationFromEuler(0, -180, 0)\r\n\r\n            this.NodesController.optimus_Step1.children[0].getChildByName(\"Level\").setPosition(0.008, 0.025, -0.006)\r\n\r\n            this.BossController.playMuscleAnim();\r\n\r\n        }, 0.5);\r\n    }\r\n\r\n\r\n    private activeEasingTweenForNode(node: Node, scaleUp: number, scaleDown: number): void {\r\n       tween(node)\r\n        .repeatForever(\r\n           tween(node)\r\n                .to(0.5, { scale: new Vec3(scaleUp, scaleUp, scaleUp) })\r\n                .to(0.5, { scale:  new Vec3(scaleDown, scaleDown, scaleDown)}, { easing: easing.elasticOut})\r\n        ).start();\r\n    }\r\n\r\n\r\n    private showCTA(): void {\r\n        this.isDonePA = true;\r\n\r\n        this.NodesController.CTA.active = true;\r\n\r\n        this.activeEasingTweenForNode(this.NodesController.CTA_btn, 0.5, 0.45);\r\n    }\r\n\r\n\r\n    protected update(dt: number): void {\r\n        Constants.GameData.isDoneStep1 && !this.isMergeStep1Flag && this.mergeStep1();\r\n        Constants.isDonePA && !this.isDonePA && this.showCTA();\r\n    }\r\n}\r\n"]}