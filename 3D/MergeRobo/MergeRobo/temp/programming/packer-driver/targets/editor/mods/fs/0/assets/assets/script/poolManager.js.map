{"version":3,"sources":["file:///D:/PA_2024/3D/MergeRobo/MergeRobo_Op8/assets/assets/script/poolManager.ts"],"names":["NodePool","_decorator","ccclass","property","PoolManager","instance","_instance","prePool","prefabList","nodeNum","i","length","obj","name","pool","dictPool","j","node","cc","instantiate","put","getNode","prefab","parent","position","data","hasOwnProperty","size","get","putNode","clearPool","clear","clearAllPool","keys","Object","forEach","element"],"mappings":"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","sourcesContent":["import { Prefab, NodePool, Node, _decorator } from \"cc\";\n\n// Learn TypeScript:\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/typescript.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html\n// Learn Attribute:\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html\n\nconst { ccclass, property } = _decorator;\n\n@ccclass(\"PoolManager\")\nexport default class PoolManager {\n\n    static _instance: PoolManager;\n\n    static get instance () {\n        if (this._instance) {\n            return this._instance;\n        }\n\n        this._instance = new PoolManager();\n        return this._instance;\n    }\n\n    dictPool = {}\n\n    /**\n     * 预生成对象池\n     * @param prefabList    需要预生成对象池的预制体或节点\n     * @param nodeNum       对象池节点数量,默认是1\n     * @method prePool\n     */\n    prePool (prefabList: [Prefab], nodeNum = 1) {\n        for (let i = 0; i < prefabList.length; i++) {\n            const obj = prefabList[i];\n            const { name } = obj;\n            const pool = new NodePool();\n            this.dictPool[name] = pool;\n            for (let j = 0; j < nodeNum; j++) {\n                const node = cc.instantiate(obj);\n                pool.put(node);\n            }\n        }\n    }\n\n    /**\n     * 根据预设从对象池中获取对应节点\n     */\n    getNode (prefab: Prefab|Node, parent: Node) {\n        let name = prefab.name;\n        //@ts-ignore\n        if (!prefab.position) {\n            //@ts-ignore\n            name = prefab.data.name;\n        }\n        \n        let node = null;\n        if (this.dictPool.hasOwnProperty(name)) {\n            //已有对应的对象池\n            let pool = this.dictPool[name];\n            if (pool.size() > 0) {\n                node = pool.get();\n            } else {\n                node = cc.instantiate(prefab);\n            }\n        } else {\n            //没有对应对象池，创建他！\n            let pool = new cc.NodePool();\n            this.dictPool[name] = pool;\n\n            node = cc.instantiate(prefab);\n        }\n\n        node.parent = parent;\n        return node as Node;\n    }\n\n    /**\n     * 将对应节点放回对象池中\n     */\n    putNode (node: Node) {\n        let name = node.name;\n        let pool = null;\n        if (this.dictPool.hasOwnProperty(name)) {\n            //已有对应的对象池\n            pool = this.dictPool[name];\n        } else {\n            //没有对应对象池，创建他！\n            pool = new cc.NodePool();\n            this.dictPool[name] = pool;\n        }\n\n        pool.put(node);\n    }\n\n    /**\n     * 根据名称，清除对应对象池\n     */\n    clearPool (name: string) {\n        if (this.dictPool.hasOwnProperty(name)) {\n            let pool = this.dictPool[name];\n            pool.clear();\n        }\n    }\n\n    /**\n     * 清除全部对象池\n     * @method clearAllPool\n     */\n    clearAllPool () {\n        const keys = Object.keys(this.dictPool);\n\n        keys.forEach((element) => {\n            const pool = this.dictPool[element];\n            pool.clear();\n        });\n\n        this.dictPool = {};\n    }\n\n    // update (dt) {}\n}\n"]}