{"version":3,"sources":["file:///D:/PA_2024/3D/MergeRobo/MergeRobo_Op8/assets/assets/script/chooseUI.ts"],"names":["_decorator","Component","Node","assetManager","Prefab","SkeletalAnimation","ParticleSystemComponent","AnimationComponent","Item","PoolManager","reuseList","ccclass","property","ChooseUI","start","path","_getAllPrefabPaths","key","Object","keys","sort","gridView","init","length","showFBX","onEnable","node","on","initItem","onDisable","off","detail","index","content","data","getComponent","show","paths","added","pathToUuid","resources","config","_map","resPaths","i","aliasPath","aliasArr","split","name","resouceType","entryObj","entry","getTarget","constructor","Array","entryLength","j","ctor","resourceName","indexOf","console","error","push","txt","target","children","instance","putNode","getBundle","load","err","prefab","getNode","setScale","play","clear","stop","arrParticle","getComponentsInChildren","forEach","item","loop"],"mappings":"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","sourcesContent":["\nimport { _decorator, Component, Node, assetManager, Prefab, getPathFromRoot, LabelComponent, SkeletalAnimation, ParticleSystemComponent, AnimationComponent } from 'cc';\nimport { Item } from './item';\nimport PoolManager from './poolManager';\nimport { reuseList } from './reuseList';\nconst { ccclass, property } = _decorator;\n\n@ccclass('ChooseUI')\nexport class ChooseUI extends Component {\n    // [1]\n    // dummy = '';\n\n    // [2]\n    // @property\n    // serializableDummy = 0;\n    @property(Node)\n    target: Node;\n\n    @property(reuseList)\n    gridView: reuseList;\n\n    @property()\n    resouceType: string = 'model';\n    \n    path: any;\n\n    start () {\n        // [3]\n        this.path  = this._getAllPrefabPaths();\n        let key = Object.keys(this.path).sort();\n        this.gridView.init(key);\n        if (key.length) this.showFBX(key[0]);\n\n    }\n\n    onEnable () {\n\n        this.gridView.node.on('show', this.initItem, this);\n    }\n\n    onDisable () {\n\n        this.gridView.node.off('show', this.initItem, this);\n    }\n\n    initItem (detail: any) {\n        let index = detail.index;\n        let node = detail.node;\n        let content = detail.data;\n        node.getComponent(Item).show(this, content);\n    }\n\n    _getAllPrefabPaths() {\n        const paths = {};\n        const added = [];\n        const pathToUuid = assetManager.resources?.config.paths._map;\n        const resPaths = Object.keys(pathToUuid);\n\n        const { length } = resPaths;\n        for (let i = 0; i < length; i += 1) {\n            const aliasPath = resPaths[i];\n            const aliasArr = aliasPath.split('/');\n            const name = aliasArr[0];\n            if (name !== this.resouceType) continue;\n            const entryObj = pathToUuid[aliasPath];\n\n            let entry = entryObj;\n            let getTarget = false;\n            if (entryObj.constructor === Array) {\n                const { length: entryLength } = entryObj;\n                for (let j = 0; j < entryLength; j += 1) {\n                    entry = entryObj[j];\n                    // 同名的资源中不会出现同类型的资源，因此只要检测到 prefab 立即跳出循环\n                    if (entry && entry.ctor && entry.ctor === Prefab) {\n                        if (this.resouceType !== 'model' && aliasArr.length === 4) break; //排除fbx\n                        let resourceName = aliasArr[1];\n                        if (this.resouceType !== 'model') {\n                            resourceName = aliasArr[2];\n                        }\n\n                        if (added.indexOf(resourceName) > -1) {\n                            console.error(`[panelManager] ${resourceName} of ${aliasPath} clash with ${paths[resourceName]}`);\n                        } else {\n                            paths[resourceName] = aliasPath;\n                            added.push(resourceName);\n                        }\n\n                        break;\n                    }\n                }\n            }\n        }\n\n        return paths;\n    }\n\n    showFBX (txt: string) {\n        if (this.target.children.length) PoolManager.instance.putNode(this.target.children[0]);\n        assetManager.getBundle('resources')?.load(this.path[txt], Prefab, (err: any, prefab: Prefab) => {\n            if (err) return;\n            let node = PoolManager.instance.getNode(prefab, this.target);\n            node.setScale(1, 1, 1);\n            node.getComponent(SkeletalAnimation)?.play();\n            node.getComponent(AnimationComponent)?.play();\n            node.getComponent(ParticleSystemComponent)?.clear();\n            node.getComponent(ParticleSystemComponent)?.stop();\n            node.getComponent(ParticleSystemComponent)?.play();\n            let arrParticle = node.getComponentsInChildren(ParticleSystemComponent);\n            arrParticle.forEach((item: ParticleSystemComponent)=>{\n                item?.clear();\n                item?.stop();\n                item.loop = true;\n                item?.play();\n            })\n            \n\n        });\n    }\n\n    // update (deltaTime: number) {\n    //     // [4]\n    // }\n}\n\n/**\n * [1] Class member could be defined like this.\n * [2] Use `property` decorator if your want the member to be serializable.\n * [3] Your initialization goes here.\n * [4] Your update function goes here.\n *\n * Learn more about scripting: https://docs.cocos.com/creator/3.0/manual/en/scripting/\n * Learn more about CCClass: https://docs.cocos.com/creator/3.0/manual/en/scripting/ccclass.html\n * Learn more about life-cycle callbacks: https://docs.cocos.com/creator/3.0/manual/en/scripting/life-cycle-callbacks.html\n */\n"]}