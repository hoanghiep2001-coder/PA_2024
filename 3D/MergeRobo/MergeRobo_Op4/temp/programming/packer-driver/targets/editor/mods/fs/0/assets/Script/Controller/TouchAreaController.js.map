{"version":3,"sources":["file:///D:/PA_2024/3D/MergeRobo/MergeRobo_Op4/assets/Script/Controller/TouchAreaController.ts"],"names":["_decorator","Component","Node","Vec3","UITransform","Constants","NodesController","GameController","AudioManager","IronSource","ccclass","property","TouchAreaController","start","registerEvent","hideMask","on","EventType","TOUCH_START","touchStart","TOUCH_MOVE","touchMove","TOUCH_END","touchEnd","TOUCH_CANCEL","toStore","installHandle","isCanTouch","isTouching","isDoneMergeStep2","isFailStep2","Text_Tap","active","hint_1","hint_2","hint_3","event","stick","ironSource","isEndGame","screenPos","getUILocation","pos","convertToLocalLocation","point","setPosition","isFailStep1","checkMergeFirstStep","checkMergeSecondStep","isDoneMergeStep1","init","playSound","SoundTrack","Dino_FightSound","dino_lines_2","forEach","line","value","localX","x","node","getPosition","localY","y","result","i","points_1","length","currentNode","nodeBdx","getComponent","getBoundingBox","pointBdx","intersects","isMergeStep1States","j","Dino_ChooseSound","dino_lines","stateArr","filter","state","arrayOf6","slice","every","points_2","isMergeStep2States","arrayOf4"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, Vec2, EventTouch, Vec3, UITransform } from \"cc\";\r\nimport { Constants } from \"../Data/Constant\";\r\nimport { NodesController } from \"./NodesController\";\r\nimport { GameController } from \"./GameController\";\r\nimport { AudioManager } from \"../Plugin/AudioManager\";\r\nimport { IronSource } from \"../Plugin/IronSource\";\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass(\"TouchAreaController\")\r\nexport class TouchAreaController extends Component {\r\n  @property(IronSource)\r\n  IronSource: IronSource = null;\r\n  @property(AudioManager)\r\n  AudioManager: AudioManager = null;\r\n  @property(NodesController)\r\n  NodesController: NodesController = null;\r\n  @property(GameController)\r\n  GameController: GameController = null;\r\n\r\n  // state\r\n  pos: Vec3 = null;\r\n\r\n\r\n  isDoneMergeStep1: boolean = false;\r\n  isDoneMergeStep2: boolean = false;\r\n\r\n  protected start(): void {\r\n    this.registerEvent();\r\n  }\r\n\r\n\r\n  private registerEvent(): void {\r\n    this.NodesController.hideMask.on(Node.EventType.TOUCH_START, this.touchStart, this);\r\n    this.NodesController.hideMask.on(Node.EventType.TOUCH_MOVE, this.touchMove, this);\r\n    this.NodesController.hideMask.on(Node.EventType.TOUCH_END, this.touchEnd, this);\r\n    this.NodesController.hideMask.on(Node.EventType.TOUCH_CANCEL, this.touchEnd, this);\r\n  }\r\n\r\n\r\n  private touchStart(): void {\r\n    if(Constants.toStore) {\r\n      this.GameController.installHandle();\r\n      return;\r\n    }\r\n\r\n    if (!Constants.isCanTouch) {\r\n      return;\r\n    }\r\n\r\n    Constants.isTouching = true;\r\n\r\n    if (Constants.isDoneMergeStep2 && Constants.isFailStep2) {\r\n      this.GameController.installHandle();\r\n    }\r\n\r\n    this.NodesController.Text_Tap.active = false;\r\n    this.NodesController.hint_1.active = false;\r\n    this.NodesController.hint_2.active = false;\r\n    this.NodesController.hint_3.active = false;\r\n\r\n    // this.IronSource.handleIronSourcePlaySound();\r\n  }\r\n\r\n\r\n  private touchMove(event: EventTouch, stick: Node) {\r\n    if (!Constants.isCanTouch || Constants.ironSource.isEndGame) {\r\n      return;\r\n    }\r\n\r\n    const screenPos = event.getUILocation();\r\n    this.pos = this.convertToLocalLocation(screenPos);\r\n    this.NodesController.point.setPosition(this.pos);\r\n\r\n    !Constants.isFailStep1 && this.checkMergeFirstStep();\r\n    Constants.isFailStep1 && this.checkMergeSecondStep();\r\n  }\r\n\r\n\r\n  private touchEnd(): void {\r\n    if (!Constants.isCanTouch || Constants.ironSource.isEndGame) {\r\n      return;\r\n    }\r\n\r\n    Constants.isTouching = false;\r\n\r\n    if (!Constants.isFailStep1 && !Constants.isDoneMergeStep1) {\r\n      if (!this.isDoneMergeStep1) {\r\n        this.NodesController.init();\r\n      } else {\r\n        Constants.isDoneMergeStep1 = true;\r\n        this.AudioManager.playSound(Constants.SoundTrack.Dino_FightSound);\r\n      }\r\n      return;\r\n    }\r\n\r\n    if (!Constants.isDoneMergeStep2 && Constants.isFailStep1) {\r\n      if (!this.isDoneMergeStep2) {\r\n        this.NodesController.init();\r\n      } else {\r\n        Constants.isDoneMergeStep2 = true;\r\n        this.AudioManager.playSound(Constants.SoundTrack.Dino_FightSound);\r\n        Constants.dino_lines_2.forEach(line => line.active = true);\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  private convertToLocalLocation(value: Vec2): Vec3 {\r\n    const localX = value.x - 160 - this.node.getPosition().x;\r\n    const localY = value.y - 240 - this.node.getPosition().y;\r\n    const result = new Vec3(localX, localY, 0);\r\n    return result;\r\n  }\r\n\r\n\r\n  private checkMergeFirstStep(): void {\r\n    for (let i = 0; i < Constants.points_1.length; i++) {\r\n      let currentNode = Constants.points_1[i];\r\n      let nodeBdx = currentNode.getComponent(UITransform).getBoundingBox();\r\n      let pointBdx = Constants.point.getComponent(UITransform).getBoundingBox();\r\n      if (nodeBdx.intersects(pointBdx)) {\r\n        if (Constants.isMergeStep1States[i]) {\r\n          break;\r\n        }\r\n\r\n        for (let j = 0; j < Constants.isMergeStep1States.length; j++) {\r\n          if (!Constants.isMergeStep1States[j]) {\r\n            this.AudioManager.playSound(Constants.SoundTrack.Dino_ChooseSound);\r\n            Constants.isMergeStep1States[i] = true;\r\n            Constants.dino_lines[i].active = true;\r\n\r\n            let stateArr = Constants.isMergeStep1States.filter((state => state === true));\r\n            const arrayOf6 = stateArr.slice(0, 6);\r\n            \r\n            if (arrayOf6.every(state => state === true) && arrayOf6[4]) {\r\n              this.isDoneMergeStep1 = true;\r\n              Constants.dino_lines.forEach(line => line.active = true);\r\n            }\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  private checkMergeSecondStep(): void {\r\n    for (let i = 0; i < Constants.points_2.length; i++) {\r\n      let currentNode = Constants.points_2[i];\r\n      let nodeBdx = currentNode.getComponent(UITransform).getBoundingBox();\r\n      let pointBdx = Constants.point.getComponent(UITransform).getBoundingBox();\r\n      if (nodeBdx.intersects(pointBdx)) {\r\n\r\n        if (Constants.isMergeStep2States[i]) {\r\n          break;\r\n        }\r\n\r\n\r\n        for (let j = 0; j < Constants.isMergeStep2States.length; j++) {\r\n          if (!Constants.isMergeStep2States[j]) {\r\n            this.AudioManager.playSound(Constants.SoundTrack.Dino_ChooseSound);\r\n            Constants.isMergeStep2States[i] = true;\r\n            Constants.dino_lines_2[i].active = true;\r\n\r\n            let stateArr = Constants.isMergeStep2States.filter((state => state === true));\r\n            const arrayOf4 = stateArr.slice(0, 5);\r\n            if (arrayOf4.every(state => state === true && arrayOf4[3])) {\r\n              this.isDoneMergeStep2 = true;\r\n              Constants.dino_lines_2.forEach(line => line.active = true);\r\n            }\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  // protected update(dt: number): void {\r\n  //       this.IronSource.handleMuteSoundIronSource();\r\n  // }\r\n}\r\n"]}