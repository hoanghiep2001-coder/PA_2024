[1,["faHvrLiwRMO6zVZYs7TpY6","12Y9dMgWdJKJGmTiZyQR9H@fc873","eeRheGDp5C+Y/Kp+cBKMpM@1f586","4dMWfINNlN6ol9iMdMho3C@f9941","1brw/JvvpFnIvdrxpFCgMZ","7dj5uJT9FMn6OrOOx83tfK@f9941","9dTNv/2rpNRrjg8BmGBts9@953b3","deIBAT5zxG/KGW2ojgDH9c@b4251","21wrcxYrlJJ6IscFzd2F0N@7f3dc","2eoK5inHRJxbqf39oN36p+","adRPVAPz1ELLgFaAdxemP4","4dCcgUmKlKlYfayMieDe8D@eb908","4dCcgUmKlKlYfayMieDe8D@30732","4dCcgUmKlKlYfayMieDe8D@793db","4dCcgUmKlKlYfayMieDe8D@f1394","4dCcgUmKlKlYfayMieDe8D@504e2","4dCcgUmKlKlYfayMieDe8D@75ee4","4dCcgUmKlKlYfayMieDe8D@fed22","4dCcgUmKlKlYfayMieDe8D@a72ab","4dCcgUmKlKlYfayMieDe8D@a3f07","4dCcgUmKlKlYfayMieDe8D@2224c","4dCcgUmKlKlYfayMieDe8D@405eb","4dCcgUmKlKlYfayMieDe8D@62756","1eOHNMDNFFcqIc3VPOHmBW@2eddb","e9KGWKiD1OmJ9yPv2EAcxX@a58ca","42ClTYZQ5EV57I2AETuZgr","d1NGQ2rJZCcbhjH0/erZWw","fbXY8s6StHypsrlG0j58W0@6c48a","3foayWK8pAXofxFm3igdB7@6c48a","9c39Up6vlMPJEhp6OwpRnl@f9941","9fc4fZYs9G7Jx1RuScFb6+@37358","1aDnxnbOZKu7GZJlErgYNt","24pF+vWxhBh5k3n5hTEOVT@6c48a","08W69LaV5FuJmW1Ic/NjJv","a3QJBlpYhF0ZLVVP/hw8JB","d6fNL4mVFJG7AadxT3c+ab","e2lRYZ6rxLiKPJNw4PnROP","d2cvKR7MBD8oSRG69aWYyI","6d0Qs/18ZEmbH2BoZ8Gf8j","40UfVBkRBDbJbQKs2Dr/eB","17f+mB9ctBOKHHfi2ASpgU","49r686cztLgYffy3zfFErP@78249","9dTNv/2rpNRrjg8BmGBts9@9fd92","9dTNv/2rpNRrjg8BmGBts9@30732","9dTNv/2rpNRrjg8BmGBts9@b22e3","9dTNv/2rpNRrjg8BmGBts9@f1394","9dTNv/2rpNRrjg8BmGBts9@8dd90","9dTNv/2rpNRrjg8BmGBts9@75ee4","9dTNv/2rpNRrjg8BmGBts9@999bc","9dTNv/2rpNRrjg8BmGBts9@a72ab","9dTNv/2rpNRrjg8BmGBts9@6d452","9dTNv/2rpNRrjg8BmGBts9@2224c","9dTNv/2rpNRrjg8BmGBts9@9c565","9dTNv/2rpNRrjg8BmGBts9@62756","9dTNv/2rpNRrjg8BmGBts9@65061","9dTNv/2rpNRrjg8BmGBts9@7d08b","9dTNv/2rpNRrjg8BmGBts9@2796d","9dTNv/2rpNRrjg8BmGBts9@b5902","078CoEXBBCVruc3p9EqMu2","d7B8zTVDZGBIeDya74wfhV@b7bbc","40KtS7a1VPdKJCMBkId6DA","509AO8N9dCY4JC2+SZLyqN@6c48a","ecuoFLjG1O141ajhJjvo7x@6c48a","18XqHpKn9BR7xbVFnFEZ9Y@6c48a","14keyxtUlE5qRHRf1ntswB","1eOHNMDNFFcqIc3VPOHmBW@36c77","9398BhvRBG45iTd0Q+8ZkT@6c48a","92Ym0wJPBDX4tzqCrSh3zi@6c48a","4dMWfINNlN6ol9iMdMho3C@6c48a","fagV42oNZHOreJMAcTmaSF@6c48a","75220E3nxFx4LsYqowyKOt@6c48a","7dj5uJT9FMn6OrOOx83tfK@6c48a","afHwiiuh5Ctb7Sj3EO3iDM@6c48a","9c39Up6vlMPJEhp6OwpRnl@6c48a","9dTNv/2rpNRrjg8BmGBts9@6c3a1","a8cLPnlwNARonQrXZMim+j@6c48a","d3zZQ9KsJO+JEppSewEZva@6c48a","cf3h69QOZFnK5v7t/NlO4w@6c48a","a8cLPnlwNARonQrXZMim+j@f9941","18XqHpKn9BR7xbVFnFEZ9Y@f9941","cf3h69QOZFnK5v7t/NlO4w@f9941","75220E3nxFx4LsYqowyKOt@f9941","35AWkPrIZE77OxQ6HwHWjh","bc67+sUb9Gn7QOUccqExpZ@122e1","bc67+sUb9Gn7QOUccqExpZ@99d6c","bc67+sUb9Gn7QOUccqExpZ@58a28","bc67+sUb9Gn7QOUccqExpZ@6ec10","bc67+sUb9Gn7QOUccqExpZ@1cf6e","bc67+sUb9Gn7QOUccqExpZ@3620d","bc67+sUb9Gn7QOUccqExpZ@29372","bc67+sUb9Gn7QOUccqExpZ@cbffa","bc67+sUb9Gn7QOUccqExpZ@ed581","bc67+sUb9Gn7QOUccqExpZ@3c0d1","adSgwdGcVO67GRK/JoUPpj","bc67+sUb9Gn7QOUccqExpZ@b755d","bc67+sUb9Gn7QOUccqExpZ@6745b","09ueCIww1CmKGh3lRD6Vj/","246Tx7yBtOXZoaSl9yNDk+@51cc5","246Tx7yBtOXZoaSl9yNDk+@438fe","246Tx7yBtOXZoaSl9yNDk+@73d50","246Tx7yBtOXZoaSl9yNDk+@82e00","246Tx7yBtOXZoaSl9yNDk+@43cd6","246Tx7yBtOXZoaSl9yNDk+@3e925","246Tx7yBtOXZoaSl9yNDk+@9292d","95kt3MOoxBJqWFyzatX5tm","1eOHNMDNFFcqIc3VPOHmBW@3566d","1eOHNMDNFFcqIc3VPOHmBW@30732","1eOHNMDNFFcqIc3VPOHmBW@5fd49","1eOHNMDNFFcqIc3VPOHmBW@f1394","1eOHNMDNFFcqIc3VPOHmBW@398a7","1eOHNMDNFFcqIc3VPOHmBW@75ee4","1eOHNMDNFFcqIc3VPOHmBW@0f0b7","1eOHNMDNFFcqIc3VPOHmBW@a72ab","1eOHNMDNFFcqIc3VPOHmBW@55a28","1eOHNMDNFFcqIc3VPOHmBW@2224c","1eOHNMDNFFcqIc3VPOHmBW@03d47","1eOHNMDNFFcqIc3VPOHmBW@62756","1eOHNMDNFFcqIc3VPOHmBW@79a0e","1eOHNMDNFFcqIc3VPOHmBW@7d08b","4dhNhfObhIpZg74tcb7aTX","d0MqyYBeFAkIi762QNy1/B@b47c0","6fAc9/gb9Kfr1dCvwZaWSA@b47c0","f6Tzv9D1pKMZXmZAWxgAq2","f8RWMSNbtIT42iB3eJMC5y","1fzsIdaq5Im4pP89Qmc26Z","67v5GrdcZH54DL2IjRSQle","841489+zFNhoQYM8muwfPd","f09ppTaQdAxp1Kfl+cOjrf","3fct6/xFNAkYd1mNgaePbC","05Ix0D3H9GKonLe80eJjTE","c6025CLuxPPJrYF8nbEdL7@6c48a"],["node","_mesh","_parent","_skeleton","_spriteFrame","_defaultClip","targetInfo","_effectAsset","mainTexture","target","_clip","_textureSource","_particleSystem","_mainTexture","source","root","asset","level","NodesController","AudioManager","data","_cameraComponent","IronSource","scene","Fail","Text_Tap","targetNode","FX_Merge_2","FX_Merge","hideMask","point","Camera","ExplosionSound","Dino_ChooseSound","Dino_FightSound","Dino_MergeSound","Dino_ScreamSound","Dino_LoseSound","Dino_AttkSound","bgSound","_envmapHDR","_envmapLDR"],[["cc.Node",["_name","_layer","_id","_objFlags","__editorExtras__","_active","_parent","_children","_lpos","_lrot","_euler","_components","_lscale","_prefab"],-3,1,2,5,5,5,2,5,4],["cc.Node",["_name","_layer","_active","_id","_components","_parent","_lscale","_lpos","_children","_lrot","_euler"],-1,9,1,5,5,2,5,5],"cc.ImageAsset",["cc.RealKeyframeValue",["rightTangent","rightTangentWeight","leftTangent","leftTangentWeight","value","interpolationMode"],-3],"cc.SpriteFrame",["cc.CurveRange",["mode","constantMax","constantMin","constant","multiplier","spline"],-2,4],["cc.MeshRenderer",["_name","_shadowReceivingMode","node","_materials","lightmapSettings","_mesh"],1,1,3,4,6],["cc.Material",["_states","_defines","_techIdx","_name","_props"],-1,12],["cc.ParticleSystem",["duration","_simulationSpace","loop","playOnAwake","scaleSpace","startSize3D","startRotation3D","_aabbHalfX","_aabbHalfY","_aabbHalfZ","node","_materials","startColor","startSizeX","startSizeY","startSizeZ","startSpeed","startRotationX","startRotationY","startRotationZ","startDelay","startLifetime","gravityModifier","rateOverTime","rateOverDistance","_colorOverLifetimeModule","_shapeModule","_sizeOvertimeModule","_velocityOvertimeModule","_forceOvertimeModule","_limitVelocityOvertimeModule","_rotationOvertimeModule","_textureAnimationModule","_trailModule","renderer","bursts","__prefab"],-7,1,12,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,9,4],["cc.GradientRange",["_mode","gradient","color"],2,4,5],["cc.ColorKey",["time","color"],2,5],["cc.ShapeModule",["_enable","emitFrom","_shapeType","radius","radiusThickness","arcSpeed"],-2,4],["cc.LimitVelocityOvertimeModule",["_enable","dampen","limitX","limitY","limitZ","limit"],1,4,4,4,4],["cc.RotationOvertimeModule",["_enable","_separateAxes","x","y","z"],1,4,4,4],["cc.ParticleSystemRenderer",["_alignSpace","_lengthScale","_renderMode","_mainTexture","_mesh"],0,6,6],["cc.UITransform",["node","_contentSize","_anchorPoint"],3,1,5,5],["cc.SkeletalAnimation",["playOnLoad","node","_clips","_defaultClip"],2,1,3,6],["cc.Animation",["playOnLoad","node","_clips","_defaultClip"],2,1,3,6],["cc.Sprite",["_sizeMode","node","_spriteFrame","_color"],2,1,6,5],"cc.TextureCube",["cc.Node",["_name","_id","_parent","_components","_children","_lpos","_lrot","_euler"],1,1,12,2,5,5,5],["cc.Node",["_name","_layer","_parent","_children","_lpos","_lrot","_euler"],1,1,9,5,5,5],["cc.PrefabInfo",["fileId","root","asset","targetOverrides","nestedPrefabInstanceRoots"],2,1,1,9,2],["cc.ColorOvertimeModule",["_enable","color"],2,4],["cc.Gradient",["colorKeys","alphaKeys"],3,9,9],["cc.SizeOvertimeModule",["_enable","separateAxes","size","x","y","z"],1,4,4,4,4],["cc.TextureAnimationModule",["_enable","_numTilesX","_numTilesY","cycleCount","frameOverTime","startFrame"],-1,4,4],["cc.TargetOverrideInfo",["propertyPath","source","target","targetInfo","sourceInfo"],2,1,1,4,4],["cc.Camera",["_priority","_far","_visibility","_name","_fov","_projection","_orthoHeight","_clearFlags","node","_color"],-5,1,5],["cc.AudioSource",["_playOnAwake","_loop","node"],1,1],["cc.AudioClip",["_name","_native","_duration"],0],["cc.Material",["_props","_states","_defines"],0],["cc.Mesh",["_native","_hash","_struct"],1,11],["cc.Prefab",["_name"],2],["cc.PrefabInfo",["fileId","root","instance","asset"],2,1,4,6],["cc.CompPrefabInfo",["fileId"],2],["cc.VelocityOvertimeModule",["x","y","z","speedModifier"],3,4,4,4,4],["cc.ForceOvertimeModule",["x","y","z"],3,4,4,4],["cc.RealCurve",["_times","_values"],2,9],["cc.TrailModule",["lifeTime","widthRatio","colorOverTrail","colorOvertime","_particleSystem"],3,4,4,4,4,1],["cc.EffectAsset",["_name","shaders","techniques"],0],["cc.Skeleton",["_name","_hash","_joints","_bindposes"],0,12],["cc.SceneAsset",["_name"],2],["cc.BoxCollider",["node","_center","_size"],3,1,5,5],["cc.RigidBody",["_group","_type","node"],1,1],["7c0ab6OlgNN8Ju8uLqdS5KA",["node","AudioManager","NodesController","level"],3,1,1,1,1],["51538WFcw1P6baoyBNVdquG",["node"],3,1],["c38f329EN1D9YpLdfC+d21z",["node"],3,1],["cc.Canvas",["node","_cameraComponent"],3,1,1],["cc.Widget",["_alignFlags","_top","_bottom","node"],0,1],["d10beQtB81Cg6A6SV/C935H",["hint_1","hint_2","hint_3","dinoLines","points_1","points_2","unitsStep1","unitstep2","dinoLevels","dinosStep1","dinosStep2","Boss","MainCharacter_1","MainCharacter_2"],3,1,1,1,2,2,2,2,2,2,2,2,1,1,1],["cc.Scene",["_name","_children","_prefab","_globals"],2,2,4,4],["cc.TargetInfo",["localID"],2],["cc.SceneGlobals",["ambient","shadows","_skybox","fog","octree"],3,4,4,4,4,4],["cc.AmbientInfo",["_skyIllumLDR","_skyColorHDR","_groundAlbedoHDR","_skyColorLDR","_groundAlbedoLDR"],2,5,5,5,5],["cc.ShadowsInfo",["_type","_enabled","_pcf","_bias","_normalBias","_near","_shadowDistance","_invisibleOcclusionRange","_orthoSize","_maxReceived","_shadowColor","_size"],-7,5,5],["cc.SkyboxInfo",["_enabled","_envmapHDR","_envmapLDR"],2,6,6],["cc.FogInfo",[],3],["cc.OctreeInfo",[],3],["dd163zuMEBDDa1UHoAitHH9",["node"],3,1],["cc.UIOpacity",["node"],3,1],["cc.PrefabInstance",["fileId","propertyOverrides"],2,9],["CCPropertyOverrideInfo",["value","propertyPath","targetInfo"],1,1],["CCPropertyOverrideInfo",["propertyPath","targetInfo","value"],2,1,8],["cc.ModelLightmapSettings",[],3],["cc.PlaneCollider",["node"],3,1],["068c9ERAfJF1b4+fsWryUsH",["AudioManager"],3,1],["cc.Burst",["count"],3,4],["cc.AlphaKey",["alpha","time"],1],["d6ba26BX9VFWrvN11awPr8L",["node","NodesController","GameController","AudioManager"],3,1,1,1,1],["cc.SkinnedMeshRenderer",["_shadowCastingMode","node","_materials","lightmapSettings","_skinningRoot","_mesh","_skeleton"],2,1,3,4,1,6,6],["cc.DirectionalLight",["_colorTemperature","_illuminanceHDR","_illuminanceLDR","node","_staticSettings"],0,1,4],["cc.StaticLightSettings",[],3],["96cd1/50FZEdpbn/o5xig83",["node","NodesController"],3,1,1],["6c960lg0NRGuppywOJ0wWQL",["node","IronSource","AudioManager","NodesController","GameController"],3,1,1,1,1,1],["9e7afRzdixF9ayAvRwivwpz",["AudioManager"],3,1]],[[0,0,1,6,7,8,9,10,3],[64,1],[5,1],[1,0,1,5,4,3],[70,0,1,2,3,4,5,6,2],[0,0,1,6,8,3],[21,0,1,2,3,4,5,6,3],[15,0,1,1],[1,0,1,5,4,7,9,6,10,3],[5,3,2],[32,0,1,2,3],[0,0,1,7,8,9,10,3],[41,0,1,2,3,4],[6,0,2,3,4,5,2],[44,0,1,2,3],[43,0,1,2,1],[52,0,2],[18,1,3,2,1],[0,0,1,6,7,3],[0,0,1,6,7,8,9,12,10,3],[1,0,1,5,4,7,6,3],[1,0,1,5,4,7,3],[18,0,1,3,2,2],[16,0,1,2,3,2],[46,0,1],[1,0,1,8,4,6,3],[6,0,1,2,3,4,5,3],[9,1],[62,0,1,2,3],[18,1,2,1],[0,0,1,6,7,8,3],[38,0,1,2],[63,0,1,2,2],[5,0,5,2],[30,0,1,2,4],[7,3,0,1,4,4],[0,0,6,11,2],[5,0,2,1,4],[29,0,2,2],[7,2,0,1,4,4],[7,0,1,4,3],[3,5,4,3],[6,2,3,4,5,1],[68,0,1,3],[1,0,1,8,4,3],[21,0,1,2,3,4,3],[5,0,1,3],[36,0,1,2,3,1],[37,0,1,2,1],[39,0,1,2,3,4,1],[17,0,1,2,3,2],[9,2,1],[3,5,4,0,1,2,3,7],[3,5,0,1,2,3,6],[27,0,1,4,2,3,2],[27,0,1,2,3,2],[67,0,1],[0,3,4,6,13,3],[0,0,2,6,11,3],[34,0,1,2,3,2],[9,0,1,2],[23,0,1,2],[10,0,2],[10,0,1,2],[25,2,3,4,5,1],[26,0,1,2,3,4,5,5],[3,4,0,1,2,3,6],[15,0,1],[61,0,1,2],[0,0,1,7,3],[0,0,1,6,7,8,12,3],[0,0,1,6,11,3],[0,0,1,6,8,9,10,3],[1,0,1,8,4,7,3],[1,0,3,5,4,3],[8,4,5,6,0,2,3,7,8,9,1,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,35,25,26,27,28,29,30,31,32,33,34,11],[8,0,2,3,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,35,25,26,27,28,29,30,31,32,33,34,4],[5,0,4,5,3],[23,1,1],[24,0,1,1],[11,1,5,2],[11,0,1,5,3],[25,0,1,2,3,4,5,3],[12,0,2,3,4,5,2],[12,0,1,2,3,4,5,3],[13,0,2,3,4,2],[13,0,1,2,3,4,3],[26,0,4,5,2],[3,5,4,0,2,5],[3,5,2],[3,4,1,3,4],[14,2,0,4,3,3],[14,0,3,2],[40,0,1,2,4],[16,1,2,3,1],[45,0,1,2,3,1],[17,1,2,3,1],[31,0,1,2,4],[33,0,2],[0,0,11,13,8,9,10,2],[0,0,1,7,8,12,3],[0,0,2,7,11,3],[0,0,1,7,8,3],[0,0,1,7,11,9,12,10,3],[0,0,5,1,6,7,8,9,12,10,4],[0,0,1,6,7,11,9,12,10,3],[0,0,6,11,8,2],[0,0,1,6,7,9,12,10,3],[1,0,1,8,4,7,9,6,10,3],[1,0,1,8,4,9,6,10,3],[1,0,2,1,5,8,4,7,6,4],[1,0,1,5,8,4,3],[1,0,1,5,8,4,7,6,3],[1,0,1,5,4,9,6,10,3],[1,0,5,4,7,9,10,2],[1,0,1,4,7,9,6,10,3],[20,0,1,2,4,3,3],[20,0,2,3,5,6,7,2],[22,0,1,2,2],[22,0,3,4,2],[8,0,1,10,36,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,3],[35,0,2],[24,0,1],[10,1],[11,0,2,3,4,5,5],[12,2,3,4,5,1],[13,2,3,4,1],[3,0,1,2,3,5],[14,1,3,2],[42,0,2],[15,0,1,2,1],[16,1,2,1],[47,0,1],[17,1,1],[48,0,1,1],[49,0,1,2,3,4],[50,0,1,2,3,4,5,6,7,8,9,10,11,12,13,1],[51,0,1,2,3,2],[53,0,1,2,3,4,1],[54,0,1,2,3,4,2],[55,0,1,2,3,4,5,6,7,8,9,10,11,11],[56,0,1,2,2],[57,1],[58,1],[59,0,1],[60,0,1],[6,2,3,4,1],[65,0,1],[66,0,1],[28,3,0,4,1,2,8,9,6],[28,5,0,6,1,7,2,8,9,7],[69,0,1,2,3,1],[29,1,0,2,3],[71,0,1,2,3,4,4],[72,1],[73,0,1,1],[74,0,1,2,3,4,1],[75,0,1]],[[[[34,"Ig_BreakWall",".mp3",1.07102],-1],0,0,[],[],[]],[[[39,"1",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{}],[{"USE_LIGHTMAP":true,"USE_ALBEDO_MAP":true},{},{}],[[[{},"mainTexture",6,0],{},{}],11,0,0]]],0,0,[0,0],[8,7],[61,4]],[[[40,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{}],[{"USE_LIGHTMAP":true,"USE_ALBEDO_MAP":true},{},{}],[[[{},"mainTexture",6,0],{},{}],11,0,0]]],0,0,[0,0],[8,7],[62,4]],[[[10,".bin",3383603168,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":224,"length":24,"count":6,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":224,"count":4,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.5,-0.5,0],"maxPosition",8,[1,0.5,0.5,0]]],-1],0,0,[],[],[]],[[[39,"1",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[8,7],[32,26]],[[[40,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[8,7],[27,26]],[[{"name":"hand-001","rect":{"x":0,"y":0,"width":201,"height":257},"offset":{"x":0,"y":0},"originalSize":{"width":201,"height":257},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[4],0,[0],[11],[63]],[[[98,"FireBall"],[99,"FireBall",[-2],[118,"0dZngw4XVG4L0NExqeSESL",-1,0],[1,-1.488,0,1.296],[3,0.7071067811865475,0,0,0.7071067811865476],[1,90,0,0]],[120,0.1,0,1,[121,"997SBNaQNCWKIt4cMMbVIk"],[[0,null],6,0],[27],[37,3,3,1],[2],[2],[9,1],[2],[2],[46,3,4.71238898038469],[2],[9,0.5],[2],[9,100],[2],[61,true,[60,1,[122,[[123],[62,0.25892857142857145],[63,0.4955357142857143,[4,4281459711]],[63,0.7566964285714286,[4,4278211071]],[63,1,[4,4278191239]]]]]],[124,true,3,0.2,0.2,[9,1]],[64,[2],[2],[2],[2]],[47,[2],[2],[2],[9,1]],[48,[2],[2],[2]],[125,[2],[2],[2],[2]],[126,[2],[2],[2]],[65,true,4,4,1,[33,1,[31,[0,1],[[127,1,1,1,1],[66,1,1,1,1,1]]]],[2]],[49,[9,1],[2],[27],[27],-3],[128,-15,1]]],0,[0,15,1,0,-1,2,0,12,2,0,20,1,3],[0,0],[-1,13],[64,32]],[[[93,"builtin-standard",[{"hash":4038009253,"name":"builtin-standard|standard-vs|standard-fs","blocks":[{"name":"Constants","stageFlags":17,"binding":0,"members":[{"name":"tilingOffset","type":16,"count":1},{"name":"albedo","type":16,"count":1},{"name":"albedoScaleAndCutoff","type":16,"count":1},{"name":"pbrParams","type":16,"count":1},{"name":"emissive","type":16,"count":1},{"name":"emissiveScaleParam","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"albedoMap","type":28,"count":1,"stageFlags":16,"binding":1,"defines":["USE_ALBEDO_MAP"]},{"name":"normalMap","type":28,"count":1,"stageFlags":16,"binding":2,"defines":["USE_NORMAL_MAP"]},{"name":"pbrMap","type":28,"count":1,"stageFlags":16,"binding":3,"defines":["USE_PBR_MAP"]},{"name":"metallicRoughnessMap","type":28,"count":1,"stageFlags":16,"binding":4,"defines":["USE_METALLIC_ROUGHNESS_MAP"]},{"name":"occlusionMap","type":28,"count":1,"stageFlags":16,"binding":5,"defines":["USE_OCCLUSION_MAP"]},{"name":"emissiveMap","type":28,"count":1,"stageFlags":16,"binding":6,"defines":["USE_EMISSIVE_MAP"]}],"samplers":[],"textures":[],"buffers":[{"name":"b_ccLightsBuffer","memoryAccess":1,"stageFlags":16,"binding":7,"defines":["CC_FORWARD_ADD","CC_ENABLE_CLUSTERED_LIGHT_CULLING"]},{"name":"b_clusterLightIndicesBuffer","memoryAccess":1,"stageFlags":16,"binding":8,"defines":["CC_FORWARD_ADD","CC_ENABLE_CLUSTERED_LIGHT_CULLING"]},{"name":"b_clusterLightGridBuffer","memoryAccess":1,"stageFlags":16,"binding":9,"defines":["CC_FORWARD_ADD","CC_ENABLE_CLUSTERED_LIGHT_CULLING"]}],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_normal","format":32,"location":1,"defines":[]},{"name":"a_texCoord","format":21,"location":2,"defines":[]},{"name":"a_tangent","format":44,"location":3,"defines":[]},{"name":"a_vertexId","format":11,"location":6,"defines":["CC_USE_MORPH"]},{"name":"a_joints","location":4,"defines":["CC_USE_SKINNING"]},{"name":"a_weights","format":44,"location":5,"defines":["CC_USE_SKINNING"]},{"name":"a_jointAnimInfo","format":44,"isInstanced":true,"location":7,"defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION","USE_INSTANCING"]},{"name":"a_matWorld0","format":44,"isInstanced":true,"location":8,"defines":["USE_INSTANCING"]},{"name":"a_matWorld1","format":44,"isInstanced":true,"location":9,"defines":["USE_INSTANCING"]},{"name":"a_matWorld2","format":44,"isInstanced":true,"location":10,"defines":["USE_INSTANCING"]},{"name":"a_lightingMapUVParam","format":44,"isInstanced":true,"location":11,"defines":["USE_INSTANCING","USE_LIGHTMAP"]},{"name":"a_dyn_batch_id","format":11,"location":12,"defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"a_color","format":44,"location":13,"defines":["USE_VERTEX_COLOR"]},{"name":"a_texCoord1","format":21,"location":14,"defines":[]}],"varyings":[{"name":"v_fog_factor","type":13,"count":1,"stageFlags":17,"location":0,"defines":["!CC_USE_ACCURATE_FOG"]},{"name":"v_shadowPos","type":16,"count":1,"stageFlags":17,"location":1,"defines":[]},{"name":"v_color","type":16,"count":1,"stageFlags":17,"location":2,"defines":["USE_VERTEX_COLOR"]},{"name":"v_position","type":15,"count":1,"stageFlags":17,"location":3,"defines":[]},{"name":"v_normal","type":15,"count":1,"stageFlags":17,"location":4,"defines":[]},{"name":"v_uv","type":14,"count":1,"stageFlags":17,"location":5,"defines":[]},{"name":"v_uv1","type":14,"count":1,"stageFlags":17,"location":6,"defines":[]},{"name":"v_tangent","type":15,"count":1,"stageFlags":17,"location":7,"defines":["USE_NORMAL_MAP"]},{"name":"v_bitangent","type":15,"count":1,"stageFlags":17,"location":8,"defines":["USE_NORMAL_MAP"]},{"name":"v_luv","type":15,"count":1,"stageFlags":17,"location":9,"defines":["USE_LIGHTMAP","!USE_BATCHING","!CC_FORWARD_ADD"]}],"fragColors":[{"name":"fragColorX","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":["CC_FORWARD_ADD"]},{"name":"fragColor0","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":1,"defines":["!CC_FORWARD_ADD","CC_PIPELINE_TYPE"]},{"name":"fragColor1","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":2,"defines":["!CC_FORWARD_ADD","CC_PIPELINE_TYPE"]},{"name":"fragColor2","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":3,"defines":["!CC_FORWARD_ADD","CC_PIPELINE_TYPE"]}],"glsl4":{"vert":"#extension GL_EXT_shader_explicit_arithmetic_types_int32: require\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec3 a_normal;\nlayout(location = 2) in vec2 a_texCoord;\nlayout(location = 3) in vec4 a_tangent;\n#if CC_USE_MORPH\n    int getVertexId() {\n      return gl_VertexIndex;\n    }\n  layout(set = 2, binding = 4) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    layout(set = 2, binding = 7) uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    layout(set = 2, binding = 8) uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    layout(set = 2, binding = 9) uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n    layout(location = 4) in u32vec4 a_joints;\n  layout(location = 5) in vec4 a_weights;\n  #if CC_USE_BAKED_ANIMATION\n    #if USE_INSTANCING\n      layout(location = 7) in highp vec4 a_jointAnimInfo;\n    #endif\n    layout(set = 2, binding = 3) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(set = 2, binding = 2) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    layout(set = 2, binding = 6) uniform highp sampler2D cc_jointTexture;\n      #else\n    layout(set = 2, binding = 3) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout StandardVertInput attr) {\n    mat4 m = skinMatrix();\n    attr.position = m * attr.position;\n    attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n    attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n  }\n#endif\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if USE_INSTANCING\n  layout(location = 8) in vec4 a_matWorld0;\n  layout(location = 9) in vec4 a_matWorld1;\n  layout(location = 10) in vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    layout(location = 11) in vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  layout(location = 12) in float a_dyn_batch_id;\n  layout(set = 2, binding = 0) uniform CCLocalBatched {\n    highp mat4 cc_matWorlds[10];\n  };\n#else\n  layout(set = 2, binding = 0) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n  };\n#endif\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n  #if CC_USE_FOG == 0\n\tfactor = LinearFog(pos);\n  #elif CC_USE_FOG == 1\n    factor = ExpFog(pos);\n  #elif CC_USE_FOG == 2\n    factor = ExpSquaredFog(pos);\n  #elif CC_USE_FOG == 3\n    factor = LayeredFog(pos);\n  #else\n    factor = 1.0;\n  #endif\n}\n#if !CC_USE_ACCURATE_FOG\nlayout(location = 0) out float v_fog_factor;\n#endif\nvoid CC_TRANSFER_FOG(vec4 pos) {\n#if !CC_USE_ACCURATE_FOG\n    CC_TRANSFER_FOG_BASE(pos, v_fog_factor);\n#endif\n}\nlayout(location = 1) out highp vec4 v_shadowPos;\nlayout(set = 0, binding = 2) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\n#if CC_RECEIVE_SHADOW\n  layout(set = 0, binding = 3) uniform highp sampler2D cc_shadowMap;\n  layout(set = 0, binding = 5) uniform highp sampler2D cc_spotLightingMap;\n#endif\n#if USE_VERTEX_COLOR\n  layout(location = 13) in vec4 a_color;\n  layout(location = 2) out vec4 v_color;\n#endif\nlayout(location = 3) out vec3 v_position;\nlayout(location = 4) out vec3 v_normal;\nlayout(location = 5) out vec2 v_uv;\nlayout(location = 6) out vec2 v_uv1;\n#if USE_NORMAL_MAP\n  layout(location = 7) out vec3 v_tangent;\n  layout(location = 8) out vec3 v_bitangent;\n#endif\n#if HAS_SECOND_UV || USE_LIGHTMAP\n  layout(location = 14) in vec2 a_texCoord1;\n#endif\n#if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n  layout(location = 9) out vec3 v_luv;\n  void CCLightingMapCaclUV()\n  {\n  #if !USE_INSTANCING\n    v_luv.xy = cc_lightingMapUVParam.xy + a_texCoord1 * cc_lightingMapUVParam.zw;\n    v_luv.z = cc_lightingMapUVParam.z;\n  #else\n    v_luv.xy = a_lightingMapUVParam.xy + a_texCoord1 * a_lightingMapUVParam.zw;\n    v_luv.z = a_lightingMapUVParam.z;\n  #endif\n  }\n#endif\nvoid main () {\n  StandardVertInput In;\n      In.position = vec4(a_position, 1.0);\n      In.normal = a_normal;\n      In.tangent = a_tangent;\n    #if CC_USE_MORPH\n      applyMorph(In);\n    #endif\n    #if CC_USE_SKINNING\n      CCSkin(In);\n    #endif\n  mat4 matWorld, matWorldIT;\n    #if USE_INSTANCING\n      matWorld = mat4(\n        vec4(a_matWorld0.xyz, 0.0),\n        vec4(a_matWorld1.xyz, 0.0),\n        vec4(a_matWorld2.xyz, 0.0),\n        vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n      );\n      matWorldIT = matWorld;\n    #elif USE_BATCHING\n      matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n      matWorldIT = matWorld;\n    #else\n      matWorld = cc_matWorld;\n      matWorldIT = cc_matWorldIT;\n    #endif\n  vec4 pos = matWorld * In.position;\n  v_position = pos.xyz;\n  v_normal = normalize((matWorldIT * vec4(In.normal, 0.0)).xyz);\n  #if USE_TWOSIDE\n    vec3 viewDirect = normalize(cc_cameraPos.xyz - v_position);\n    v_normal *= dot(v_normal, viewDirect) < 0.0 ? -1.0 : 1.0;\n  #endif\n  #if USE_NORMAL_MAP\n    v_tangent = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n    v_bitangent = cross(v_normal, v_tangent) * In.tangent.w;\n  #endif\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if SAMPLE_FROM_RT\n    v_uv = cc_cameraPos.w > 1.0 ? vec2(v_uv.x, 1.0 - v_uv.y) : v_uv;\n  #endif\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n    #if SAMPLE_FROM_RT\n      v_uv1 = cc_cameraPos.w > 1.0 ? vec2(v_uv1.x, 1.0 - v_uv1.y) : v_uv1;\n    #endif\n  #endif\n  #if USE_VERTEX_COLOR\n    v_color = a_color;\n  #endif\n  CC_TRANSFER_FOG(pos);\n  v_shadowPos = cc_matLightViewProj * pos;\n  #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    CCLightingMapCaclUV();\n  #endif\n  gl_Position = cc_matProj * (cc_matView * matWorld) * In.position;\n}","frag":"\nprecision highp float;\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n  #if CC_USE_FOG == 0\n\tfactor = LinearFog(pos);\n  #elif CC_USE_FOG == 1\n    factor = ExpFog(pos);\n  #elif CC_USE_FOG == 2\n    factor = ExpSquaredFog(pos);\n  #elif CC_USE_FOG == 3\n    factor = LayeredFog(pos);\n  #else\n    factor = 1.0;\n  #endif\n}\nvoid CC_APPLY_FOG_BASE(inout vec4 color, float factor) {\n  color = vec4(mix(cc_fogColor.rgb, color.rgb, factor), color.a);\n}\n#if !CC_USE_ACCURATE_FOG\nlayout(location = 0) in float v_fog_factor;\n#endif\nvoid CC_APPLY_FOG(inout vec4 color) {\n#if !CC_USE_ACCURATE_FOG\n    CC_APPLY_FOG_BASE(color, v_fog_factor);\n#endif\n}\nvoid CC_APPLY_FOG(inout vec4 color, vec3 worldPos) {\n#if CC_USE_ACCURATE_FOG\n    float factor;\n    CC_TRANSFER_FOG_BASE(vec4(worldPos, 1.0), factor);\n#else\n    float factor = v_fog_factor;\n#endif\n    CC_APPLY_FOG_BASE(color, factor);\n}\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nlayout(set = 0, binding = 2) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\nhighp float unpackHighpData (float mainPart, float modPart) {\n  highp float data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out float mainPart, out float modPart, highp float data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp float unpackHighpData (float mainPart, float modPart, const float modValue) {\n  highp float data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out float mainPart, out float modPart, highp float data, const float modValue) {\n  highp float divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec2 unpackHighpData (vec2 mainPart, vec2 modPart) {\n  highp vec2 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec2 unpackHighpData (vec2 mainPart, vec2 modPart, const float modValue) {\n  highp vec2 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data, const float modValue) {\n  highp vec2 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec3 unpackHighpData (vec3 mainPart, vec3 modPart) {\n  highp vec3 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec3 unpackHighpData (vec3 mainPart, vec3 modPart, const float modValue) {\n  highp vec3 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data, const float modValue) {\n  highp vec3 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec4 unpackHighpData (vec4 mainPart, vec4 modPart) {\n  highp vec4 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec4 unpackHighpData (vec4 mainPart, vec4 modPart, const float modValue) {\n  highp vec4 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data, const float modValue) {\n  highp vec4 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nfloat CCGetLinearDepthFromViewSpace(vec3 viewPos) {\n  float dist = length(viewPos);\n  return (dist - cc_shadowNFLSInfo.x) / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n  vec4 viewStartPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  return CCGetLinearDepthFromViewSpace(viewStartPos.xyz);\n}\n#if CC_RECEIVE_SHADOW\n  layout(set = 0, binding = 3) uniform highp sampler2D cc_shadowMap;\n  layout(set = 0, binding = 5) uniform highp sampler2D cc_spotLightingMap;\n  vec4 ApplyShadowDepthBias_FaceNormal(vec4 shadowPos, vec3 worldNormal)\n  {\n    vec4 newShadowPos = shadowPos;\n    if(cc_shadowLPNNInfo.z > 0.0001)\n    {\n      vec4 viewNormal = cc_matLightView * vec4(worldNormal, 0.0);\n      if(viewNormal.z < 0.1)\n        newShadowPos.xy += viewNormal.xy * cc_shadowProjInfo.xy * cc_shadowLPNNInfo.z * clamp(viewNormal.z, 0.001, 0.1);\n    }\n    return newShadowPos;\n  }\n  vec4 ApplyShadowDepthBias_Perspective(vec4 shadowPos, float viewspaceDepthBias)\n  {\n    vec3 viewSpacePos;\n    viewSpacePos.xy = shadowPos.xy * cc_shadowProjInfo.zw;\n    viewSpacePos.z = shadowPos.z * cc_shadowInvProjDepthInfo.x + shadowPos.w * cc_shadowInvProjDepthInfo.y;\n    viewSpacePos.xyz += cc_shadowProjDepthInfo.z * normalize(viewSpacePos.xyz) * viewspaceDepthBias;\n    vec4 clipSpacePos;\n    clipSpacePos.xy = viewSpacePos.xy * cc_shadowProjInfo.xy;\n    clipSpacePos.zw = viewSpacePos.z * cc_shadowProjDepthInfo.xz + vec2(cc_shadowProjDepthInfo.y, 0.0);\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      clipSpacePos.z = CCGetLinearDepthFromViewSpace(viewSpacePos.xyz);\n      clipSpacePos.z = (clipSpacePos.z * 2.0 - 1.0) * clipSpacePos.w;\n    }\n    return clipSpacePos;\n  }\n  vec4 ApplyShadowDepthBias_Orthographic(vec4 shadowPos, float viewspaceDepthBias)\n  {\n    float coeffA = cc_shadowProjDepthInfo.x;\n    float coeffB = cc_shadowProjDepthInfo.y;\n    float viewSpacePos_z = (shadowPos.z - coeffB) / coeffA;\n    viewSpacePos_z += viewspaceDepthBias;\n    vec4 result = shadowPos;\n    result.z = viewSpacePos_z * coeffA + coeffB;\n    return result;\n  }\n  float CCGetShadowFactorHard (vec4 shadowPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float shadow = 0.0;\n    float closestDepth = 0.0;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      closestDepth = dot(texture(cc_shadowMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0));\n    } else {\n      closestDepth = texture(cc_shadowMap, clipPos.xy).x;\n    }\n    shadow = step(clipPos.z, closestDepth);\n    return shadow;\n  }\n  float CCGetShadowFactorSoft (vec4 shadowPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float offsetDepth = clipPos.z;\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    vec2 clipPos_offset = clipPos.xy + oneTap;\n    float block0, block1, block2, block3;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      block0 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n      block1 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)).x);\n      block2 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)).x);\n      block3 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)).x);\n    }\n    float coefX   = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block2, block3, coefX);\n    float coefY   = mod(clipPos.y, oneTap.y) * mapSize.y;\n    return mix(resultX, resultY, coefY);\n  }\n  float CCGetShadowFactorSoft2X (vec4 shadowPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float offsetDepth = clipPos.z;\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    float clipPos_offset_L = clipPos.x - oneTap.x;\n    float clipPos_offset_R = clipPos.x + oneTap.x;\n    float clipPos_offset_U = clipPos.y - oneTap.y;\n    float clipPos_offset_D = clipPos.y + oneTap.y;\n    float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      block0 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)).x);\n      block1 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)).x);\n      block2 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)).x);\n      block3 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)).x);\n      block4 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n      block5 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)).x);\n      block6 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)).x);\n      block7 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)).x);\n      block8 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)).x);\n    }\n    float coefX = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float coefY = mod(clipPos.y, oneTap.y) * mapSize.y;\n    float shadow = 0.0;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block3, block4, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block1, block2, coefX);\n    resultY = mix(block4, block5, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block3, block4, coefX);\n    resultY = mix(block6, block7, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    resultX = mix(block4, block5, coefX);\n    resultY = mix(block7, block8, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    return shadow * 0.25;\n  }\n  float CCGetSpotLightShadowFactorHard (vec4 shadowPos, vec3 worldPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float shadow = 0.0;\n    float closestDepth = 0.0;\n    float depth = clipPos.z;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      closestDepth = dot(texture(cc_spotLightingMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0));\n    } else {\n      closestDepth = texture(cc_spotLightingMap, clipPos.xy).x;\n    }\n    shadow = step(depth, closestDepth);\n    return shadow;\n  }\n  float CCGetSpotLightShadowFactorSoft (vec4 shadowPos, vec3 worldPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float depth = 0.0;\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      depth = CCGetLinearDepth(worldPos);\n    } else {\n      depth = clipPos.z;\n    }\n    float bias = cc_shadowWHPBInfo.w;\n    vec2 oneTap = 1.0 / cc_shadowWHPBInfo.xy;\n    vec2 clipPos_offset = clipPos.xy + oneTap;\n    float block0, block1, block2, block3;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      block0 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)).x);\n      block1 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos.y)).x);\n      block2 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset.y)).x);\n      block3 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos_offset.y)).x);\n    }\n    float coefX   = mod(clipPos.x, oneTap.x) * cc_shadowWHPBInfo.x;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block2, block3, coefX);\n    float coefY   = mod(clipPos.y, oneTap.y) * cc_shadowWHPBInfo.y;\n    return mix(resultX, resultY, coefY);\n  }\n  float CCGetSpotLightShadowFactorSoft2X (vec4 shadowPos, vec3 worldPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float depth = 0.0;\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      depth = CCGetLinearDepth(worldPos);\n    } else {\n      depth = clipPos.z;\n    }\n    float bias = cc_shadowWHPBInfo.w;\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    float clipPos_offset_L = clipPos.x - oneTap.x;\n    float clipPos_offset_R = clipPos.x + oneTap.x;\n    float clipPos_offset_U = clipPos.y - oneTap.y;\n    float clipPos_offset_D = clipPos.y + oneTap.y;\n    float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      block0 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_U)).x);\n      block1 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_U)).x);\n      block2 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_U)).x);\n      block3 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos.y)).x);\n      block4 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)).x);\n      block5 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos.y)).x);\n      block6 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_D)).x);\n      block7 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_D)).x);\n      block8 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_D)).x);\n    }\n    float coefX = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float coefY = mod(clipPos.y, oneTap.y) * mapSize.y;\n    float shadow = 0.0;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block3, block4, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block1, block2, coefX);\n    resultY = mix(block4, block5, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block3, block4, coefX);\n    resultY = mix(block6, block7, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    resultX = mix(block4, block5, coefX);\n    resultY = mix(block7, block8, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    return shadow * 0.25;\n  }\n#endif\n#if CC_USE_IBL\n  layout(set = 0, binding = 4) uniform samplerCube cc_environment;\n  vec4 fragTextureLod (sampler2D tex, vec2 coord, float lod) {\n      return textureLod(tex, coord, lod);\n  }\n  vec4 fragTextureLod (samplerCube tex, vec3 coord, float lod) {\n      return textureLod(tex, coord, lod);\n  }\n  vec3 unpackRGBE (vec4 rgbe) {\n    return rgbe.rgb * pow(1.1, rgbe.a * 255.0 - 128.0);\n  }\n  #if CC_USE_DIFFUSEMAP\n    layout(set = 0, binding = 6) uniform samplerCube cc_diffuseMap;\n  #endif\n#endif\nfloat GGXMobile (float roughness, float NoH, vec3 H, vec3 N) {\n  vec3 NxH = cross(N, H);\n  float OneMinusNoHSqr = dot(NxH, NxH);\n  float a = roughness * roughness;\n  float n = NoH * a;\n  float p = a / (OneMinusNoHSqr + n * n);\n  return p * p;\n}\nfloat CalcSpecular (float roughness, float NoH, vec3 H, vec3 N) {\n  return (roughness * 0.25 + 0.25) * GGXMobile(roughness, NoH, H, N);\n}\nvec3 BRDFApprox (vec3 specular, float roughness, float NoV) {\n  const vec4 c0 = vec4(-1.0, -0.0275, -0.572, 0.022);\n  const vec4 c1 = vec4(1.0, 0.0425, 1.04, -0.04);\n  vec4 r = roughness * c0 + c1;\n  float a004 = min(r.x * r.x, exp2(-9.28 * NoV)) * r.x + r.y;\n  vec2 AB = vec2(-1.04, 1.04) * a004 + r.zw;\n  AB.y *= clamp(50.0 * specular.g, 0.0, 1.0);\n  return specular * AB.x + AB.y;\n}\n#if USE_REFLECTION_DENOISE\n  vec3 GetEnvReflectionWithMipFiltering(vec3 R, float roughness, float mipCount, float denoiseIntensity) {\n    #if CC_USE_IBL\n    \tfloat mip = roughness * mipCount;\n    \tfloat delta = (dot(dFdx(R), dFdy(R))) * 1000.0;\n    \tfloat mipBias = mix(0.0, 5.0, clamp(delta, 0.0, 1.0));\n    \tvec4 biased = fragTextureLod(cc_environment, R, mip + mipBias);\n     \tvec4 filtered = texture(cc_environment, R);\n      #if CC_USE_IBL == 2\n      \tbiased.rgb = unpackRGBE(biased);\n      \tfiltered.rgb = unpackRGBE(filtered);\n      #else\n      \tbiased.rgb = SRGBToLinear(biased.rgb);\n      \tfiltered.rgb = SRGBToLinear(filtered.rgb);\n      #endif\n      return mix(biased.rgb, filtered.rgb, denoiseIntensity);\n    #else\n      return vec3(0.0, 0.0, 0.0);\n    #endif\n  }\n#endif\nstruct StandardSurface {\n  vec4 albedo;\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  vec3 position, position_fract_part;\n  #else\n  vec3 position;\n  #endif\n  vec3 normal;\n  vec3 emissive;\n  vec3 lightmap;\n  float lightmap_test;\n  float roughness;\n  float metallic;\n  float occlusion;\n};\nvec4 CCStandardShadingBase (StandardSurface s, vec4 shadowPos) {\n  vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n  vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n  vec3 position;\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  position = unpackHighpData(s.position, s.position_fract_part);\n  #else\n  position = s.position;\n  #endif\n  vec3 N = normalize(s.normal);\n  vec3 V = normalize(cc_cameraPos.xyz - position);\n  float NV = max(abs(dot(N, V)), 0.0);\n  specular = BRDFApprox(specular, s.roughness, NV);\n  vec3 L = normalize(-cc_mainLitDir.xyz);\n  vec3 H = normalize(L + V);\n  float NH = max(dot(N, H), 0.0);\n  float NL = max(dot(N, L), 0.0);\n  vec3 finalColor = NL * cc_mainLitColor.rgb * cc_mainLitColor.w;\n  vec3 diffuseContrib = diffuse;\n  #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    if (s.lightmap_test > 0.0001) {\n      finalColor = s.lightmap.rgb;\n    }\n  #else\n    diffuseContrib /= 3.14159265359;\n  #endif\n  vec3 specularContrib = specular * CalcSpecular(s.roughness, NH, H, N);\n  vec3 dirlightContrib = (diffuseContrib + specularContrib);\n  float shadow = 1.0;\n  #if CC_RECEIVE_SHADOW\n    if (NL > 0.0 && cc_mainLitDir.w > 0.0) {\n      {\n        vec4 pos = ApplyShadowDepthBias_FaceNormal(shadowPos, N);\n        float pcf = cc_shadowWHPBInfo.z;\n        if (pcf > 1.9) shadow = CCGetShadowFactorSoft2X(pos);\n        else if (pcf > 0.9) shadow = CCGetShadowFactorSoft(pos);\n        else shadow = CCGetShadowFactorHard(pos);\n        shadow = mix(shadow, 1.0, cc_shadowNFLSInfo.w);\n      }\n    }\n  #endif\n  dirlightContrib *= shadow;\n  finalColor *= dirlightContrib;\n  float fAmb = 0.5 - N.y * 0.5;\n  vec3 ambDiff = mix(cc_ambientSky.rgb, cc_ambientGround.rgb, fAmb);\n  #if CC_USE_IBL\n    #if CC_USE_DIFFUSEMAP\n      vec4 diffuseMap = texture(cc_diffuseMap, N);\n      #if CC_USE_DIFFUSEMAP == 2\n        ambDiff = unpackRGBE(diffuseMap);\n      #else\n        ambDiff = SRGBToLinear(diffuseMap.rgb);\n      #endif\n    #endif\n    vec3 R = normalize(reflect(-V, N));\n    #if USE_REFLECTION_DENOISE\n      vec3 env = GetEnvReflectionWithMipFiltering(R, s.roughness, cc_ambientGround.w, 0.6);\n    #else\n      vec4 envmap = fragTextureLod(cc_environment, R, s.roughness * cc_ambientGround.w);\n      #if CC_USE_IBL == 2\n        vec3 env = unpackRGBE(envmap);\n      #else\n        vec3 env = SRGBToLinear(envmap.rgb);\n      #endif\n    #endif\n    finalColor += env * cc_ambientSky.w * specular * s.occlusion;\n  #endif\n  finalColor += ambDiff.rgb * cc_ambientSky.w * diffuse * s.occlusion;\n  finalColor += s.emissive;\n  return vec4(finalColor, s.albedo.a);\n}\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = ACESToneMap(color.rgb);\n  #endif\n  color.rgb = sqrt(color.rgb);\n  return color;\n}\nlayout(location = 1) in highp vec4 v_shadowPos;\n#if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n  layout(location = 9) in vec3 v_luv;\n  layout(set = 2, binding = 10) uniform sampler2D cc_lightingMap;\n  vec3 UnpackLightingmap(vec4 color) {\n    vec3 c;\n    float e = 1.0 + color.a * (8.0 - 1.0);\n    c.r = color.r * e;\n    c.g = color.g * e;\n    c.b = color.b * e;\n    return c;\n  }\n#endif\nlayout(location = 3) in vec3 v_position;\nlayout(location = 5) in vec2 v_uv;\nlayout(location = 6) in vec2 v_uv1;\nlayout(location = 4) in vec3 v_normal;\n#if USE_VERTEX_COLOR\n  layout(location = 2) in vec4 v_color;\n#endif\n#if USE_ALBEDO_MAP\n  layout(set = 1, binding = 1) uniform sampler2D albedoMap;\n#endif\n#if USE_NORMAL_MAP\n  layout(location = 7) in vec3 v_tangent;\n  layout(location = 8) in vec3 v_bitangent;\n  layout(set = 1, binding = 2) uniform sampler2D normalMap;\n#endif\n#if USE_PBR_MAP\n  layout(set = 1, binding = 3) uniform sampler2D pbrMap;\n#endif\n#if USE_METALLIC_ROUGHNESS_MAP\n  layout(set = 1, binding = 4) uniform sampler2D metallicRoughnessMap;\n#endif\n#if USE_OCCLUSION_MAP\n  layout(set = 1, binding = 5) uniform sampler2D occlusionMap;\n#endif\n#if USE_EMISSIVE_MAP\n  layout(set = 1, binding = 6) uniform sampler2D emissiveMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvoid surf (out StandardSurface s) {\n  vec4 baseColor = albedo;\n  #if USE_VERTEX_COLOR\n    baseColor.rgb *= SRGBToLinear(v_color.rgb);\n    baseColor.a *= v_color.a;\n  #endif\n  #if USE_ALBEDO_MAP\n    vec4 texColor = texture(albedoMap, ALBEDO_UV);\n    texColor.rgb = SRGBToLinear(texColor.rgb);\n    baseColor *= texColor;\n  #endif\n  s.albedo = baseColor;\n  s.albedo.rgb *= albedoScaleAndCutoff.xyz;\n  #if USE_ALPHA_TEST\n    if (s.albedo.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n  #endif\n  #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    vec4 lightColor = texture(cc_lightingMap, v_luv.xy);\n    s.lightmap = UnpackLightingmap(lightColor);\n    s.lightmap_test = v_luv.z;\n  #endif\n  s.normal = v_normal;\n  #if USE_NORMAL_MAP\n    vec3 nmmp = texture(normalMap, NORMAL_UV).xyz - vec3(0.5);\n    s.normal =\n      (nmmp.x * emissiveScaleParam.w) * normalize(v_tangent) +\n      (nmmp.y * emissiveScaleParam.w) * normalize(v_bitangent) +\n      nmmp.z * normalize(s.normal);\n  #endif\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  packHighpData(s.position, s.position_fract_part, v_position);\n  #else\n  s.position = v_position;\n  #endif\n  vec4 pbr = pbrParams;\n  #if USE_PBR_MAP\n    vec4 res = texture(pbrMap, PBR_UV);\n    pbr.x *= res.r;\n    pbr.y *= res.g;\n    pbr.z *= res.b;\n    pbr.w *= res.a;\n  #endif\n  #if USE_METALLIC_ROUGHNESS_MAP\n    vec4 metallicRoughness = texture(metallicRoughnessMap, PBR_UV);\n    pbr.z *= metallicRoughness.b;\n    pbr.y *= metallicRoughness.g;\n  #endif\n  #if USE_OCCLUSION_MAP\n    pbr.x *= texture(occlusionMap, PBR_UV).r;\n  #endif\n  s.occlusion = pbr.x;\n  s.roughness = pbr.y;\n  s.metallic = pbr.z;\n  s.emissive = emissive.rgb * emissiveScaleParam.xyz;\n  #if USE_EMISSIVE_MAP\n    s.emissive *= SRGBToLinear(texture(emissiveMap, EMISSIVE_UV).rgb);\n  #endif\n}\n#if CC_FORWARD_ADD\n  #if CC_PIPELINE_TYPE == 0\n  # define LIGHTS_PER_PASS 1\n  #else\n  # define LIGHTS_PER_PASS 10\n  #endif\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n  layout(set = 2, binding = 1) uniform CCForwardLight {\n    highp vec4 cc_lightPos[LIGHTS_PER_PASS];\n    vec4 cc_lightColor[LIGHTS_PER_PASS];\n    vec4 cc_lightSizeRangeAngle[LIGHTS_PER_PASS];\n    vec4 cc_lightDir[LIGHTS_PER_PASS];\n  };\n  #endif\n  float SmoothDistAtt (float distSqr, float invSqrAttRadius) {\n    float factor = distSqr * invSqrAttRadius;\n    float smoothFactor = clamp(1.0 - factor * factor, 0.0, 1.0);\n    return smoothFactor * smoothFactor;\n  }\n  float GetDistAtt (float distSqr, float invSqrAttRadius) {\n    float attenuation = 1.0 / max(distSqr, 0.01*0.01);\n    attenuation *= SmoothDistAtt(distSqr , invSqrAttRadius);\n    return attenuation;\n  }\n  float GetAngleAtt (vec3 L, vec3 litDir, float litAngleScale, float litAngleOffset) {\n    float cd = dot(litDir, L);\n    float attenuation = clamp(cd * litAngleScale + litAngleOffset, 0.0, 1.0);\n    return (attenuation * attenuation);\n  }\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n  vec4 CCStandardShadingAdditive (StandardSurface s, vec4 shadowPos) {\n    vec3 position;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    position = unpackHighpData(s.position, s.position_fract_part);\n    #else\n    position = s.position;\n    #endif\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n    vec3 diffuseContrib = diffuse / 3.14159265359;\n    vec3 N = normalize(s.normal);\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    float NV = max(abs(dot(N, V)), 0.0);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 finalColor = vec3(0.0);\n    int numLights = CC_PIPELINE_TYPE == 0 ? LIGHTS_PER_PASS : int(cc_lightDir[0].w);\n    for (int i = 0; i < LIGHTS_PER_PASS; i++) {\n      if (i >= numLights) break;\n      vec3 SLU = cc_lightPos[i].xyz - position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = max(dot(N, SL), 0.0);\n      float SNH = max(dot(N, SH), 0.0);\n      float distSqr = dot(SLU, SLU);\n      float litRadius = cc_lightSizeRangeAngle[i].x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = 3.14159265359 * (litRadiusSqr / max(litRadiusSqr , distSqr));\n      float attRadiusSqrInv = 1.0 / max(cc_lightSizeRangeAngle[i].y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\n      if (cc_lightPos[i].w > 0.0) {\n        float cosInner = max(dot(-cc_lightDir[i].xyz, SL), 0.01);\n        float cosOuter = cc_lightSizeRangeAngle[i].z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -cc_lightDir[i].xyz, litAngleScale, litAngleOffset);\n      }\n      vec3 lightColor = cc_lightColor[i].rgb;\n      float shadow = 1.0;\n      #if CC_RECEIVE_SHADOW\n        if (cc_lightPos[i].w > 0.0 && cc_lightSizeRangeAngle[i].w > 0.0) {\n          {\n            float pcf = cc_shadowWHPBInfo.z;\n            if (pcf > 1.9) shadow = CCGetSpotLightShadowFactorSoft2X(shadowPos, position);\n            else if (pcf > 0.9) shadow = CCGetSpotLightShadowFactorSoft(shadowPos, position);\n            else shadow = CCGetSpotLightShadowFactorHard(shadowPos, position);\n          }\n        }\n      #endif\n      lightColor *= shadow;\n      finalColor += SNL * lightColor * cc_lightColor[i].w * illum * att * (diffuseContrib + lspec);\n    }\n    return vec4(finalColor, 0.0);\n  }\n  #endif\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 1\n  layout(set = 1, binding = 7) readonly buffer b_ccLightsBuffer { vec4 b_ccLights[]; };\n  layout(set = 1, binding = 8) readonly buffer b_clusterLightIndicesBuffer { uint b_clusterLightIndices[]; };\n  layout(set = 1, binding = 9) readonly buffer b_clusterLightGridBuffer { uvec4 b_clusterLightGrid[]; };\n  struct CCLight\n  {\n    vec4 cc_lightPos;\n    vec4 cc_lightColor;\n    vec4 cc_lightSizeRangeAngle;\n    vec4 cc_lightDir;\n  };\n  struct Cluster\n  {\n    vec3 minBounds;\n    vec3 maxBounds;\n  };\n  struct LightGrid\n  {\n    uint offset;\n    uint ccLights;\n  };\n  CCLight getCCLight(uint i)\n  {\n    CCLight light;\n    light.cc_lightPos = b_ccLights[4u * i + 0u];\n    light.cc_lightColor = b_ccLights[4u * i + 1u];\n    light.cc_lightSizeRangeAngle = b_ccLights[4u * i + 2u];\n    light.cc_lightDir = b_ccLights[4u * i + 3u];\n    return light;\n  }\n  LightGrid getLightGrid(uint cluster)\n  {\n    uvec4 gridvec = b_clusterLightGrid[cluster];\n    LightGrid grid;\n    grid.offset = gridvec.x;\n    grid.ccLights = gridvec.y;\n    return grid;\n  }\n  uint getGridLightIndex(uint start, uint offset)\n  {\n    return b_clusterLightIndices[start + offset];\n  }\n  uint getClusterZIndex(vec4 worldPos)\n  {\n    float scale = float(24) / log(cc_nearFar.y / cc_nearFar.x);\n    float bias = -(float(24) * log(cc_nearFar.x) / log(cc_nearFar.y / cc_nearFar.x));\n    float eyeDepth = -(cc_matView * worldPos).z;\n    uint zIndex = uint(max(log(eyeDepth) * scale + bias, 0.0));\n    return zIndex;\n  }\n  uint getClusterIndex(vec4 fragCoord, vec4 worldPos)\n  {\n    uint zIndex = getClusterZIndex(worldPos);\n    float clusterSizeX = ceil(cc_viewPort.z / float(16));\n    float clusterSizeY = ceil(cc_viewPort.w / float(8));\n    uvec3 indices = uvec3(uvec2(fragCoord.xy / vec2(clusterSizeX, clusterSizeY)), zIndex);\n    uint cluster = (16u * 8u) * indices.z + 16u * indices.y + indices.x;\n    return cluster;\n  }\n  vec4 CCClusterShadingAdditive (StandardSurface s, vec4 shadowPos) {\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n    vec3 diffuseContrib = diffuse / 3.14159265359;\n    vec3 position;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    position = unpackHighpData(s.position, s.position_fract_part);\n    #else\n    position = s.position;\n    #endif\n    vec3 N = normalize(s.normal);\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    float NV = max(abs(dot(N, V)), 0.001);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 finalColor = vec3(0.0);\n    uint cluster = getClusterIndex(gl_FragCoord, vec4(position, 1.0));\n    LightGrid grid = getLightGrid(cluster);\n    uint numLights = grid.ccLights;\n    for (uint i = 0u; i < 100u; i++) {\n      if (i >= numLights) break;\n      uint lightIndex = getGridLightIndex(grid.offset, i);\n      CCLight light = getCCLight(lightIndex);\n      vec3 SLU = light.cc_lightPos.xyz - position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = max(dot(N, SL), 0.001);\n      float SNH = max(dot(N, SH), 0.0);\n      float distSqr = dot(SLU, SLU);\n      float litRadius = light.cc_lightSizeRangeAngle.x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = 3.14159265359 * (litRadiusSqr / max(litRadiusSqr , distSqr));\n      float attRadiusSqrInv = 1.0 / max(light.cc_lightSizeRangeAngle.y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\n      if (light.cc_lightPos.w > 0.0) {\n        float cosInner = max(dot(-light.cc_lightDir.xyz, SL), 0.01);\n        float cosOuter = light.cc_lightSizeRangeAngle.z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -light.cc_lightDir.xyz, litAngleScale, litAngleOffset);\n      }\n      vec3 lightColor = light.cc_lightColor.rgb;\n      float shadow = 1.0;\n      #if CC_RECEIVE_SHADOW\n        if (light.cc_lightPos.w > 0.0) {\n          {\n            float pcf = cc_shadowWHPBInfo.z;\n            if (pcf > 1.9) shadow = CCGetSpotLightShadowFactorSoft2X(shadowPos, position);\n            else if (pcf > 0.9) shadow = CCGetSpotLightShadowFactorSoft(shadowPos, position);\n            else shadow = CCGetSpotLightShadowFactorHard(shadowPos, position);\n          }\n        }\n      #endif\n      lightColor *= shadow;\n      finalColor += SNL * lightColor * light.cc_lightColor.w * illum * att * (diffuseContrib + lspec);\n    }\n    return vec4(finalColor, 0.0);\n  }\n  #endif\n  layout(location = 0) out vec4 fragColorX;\n  void main () {\n    StandardSurface s; surf(s);\n    #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 1\n    vec4 color = CCClusterShadingAdditive(s, v_shadowPos);\n    #else\n    vec4 color = CCStandardShadingAdditive(s, v_shadowPos);\n    #endif\n    CC_APPLY_FOG(color, s.position.xyz);\n    fragColorX = CCFragOutput(color);\n  }\n#elif (CC_PIPELINE_TYPE == 0 || CC_FORCE_FORWARD_SHADING)\n  layout(location = 0) out vec4 fragColorX;\n  void main () {\n    StandardSurface s; surf(s);\n    vec4 color = CCStandardShadingBase(s, v_shadowPos);\n    CC_APPLY_FOG(color, s.position.xyz);\n    fragColorX = CCFragOutput(color);\n  }\n#elif CC_PIPELINE_TYPE == 1\n  vec2 signNotZero(vec2 v) {\n    return vec2((v.x >= 0.0) ? +1.0 : -1.0, (v.y >= 0.0) ? +1.0 : -1.0);\n  }\n  vec2 float32x3_to_oct(in vec3 v) {\n    vec2 p = v.xy * (1.0 / (abs(v.x) + abs(v.y) + abs(v.z)));\n    return (v.z <= 0.0) ? ((1.0 - abs(p.yx)) * signNotZero(p)) : p;\n  }\n  layout(location = 0) out vec4 fragColor0;\n  layout(location = 1) out vec4 fragColor1;\n  layout(location = 2) out vec4 fragColor2;\n  void main () {\n    StandardSurface s; surf(s);\n    fragColor0 = s.albedo;\n    fragColor1 = vec4(float32x3_to_oct(s.normal), s.roughness, s.metallic);\n    fragColor2 = vec4(s.emissive, s.occlusion);\n  }\n#endif"},"glsl3":{"vert":"\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nin vec3 a_position;\nin vec3 a_normal;\nin vec2 a_texCoord;\nin vec4 a_tangent;\n#if CC_USE_MORPH\n    in float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n  layout(std140) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n    in vec4 a_joints;\n  in vec4 a_weights;\n  #if CC_USE_BAKED_ANIMATION\n    #if USE_INSTANCING\n      in highp vec4 a_jointAnimInfo;\n    #endif\n    layout(std140) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(std140) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    uniform highp sampler2D cc_jointTexture;\n      #else\n    layout(std140) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout StandardVertInput attr) {\n    mat4 m = skinMatrix();\n    attr.position = m * attr.position;\n    attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n    attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n  }\n#endif\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if USE_INSTANCING\n  in vec4 a_matWorld0;\n  in vec4 a_matWorld1;\n  in vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    in vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  in float a_dyn_batch_id;\n  layout(std140) uniform CCLocalBatched {\n    highp mat4 cc_matWorlds[10];\n  };\n#else\n  layout(std140) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n  };\n#endif\nlayout(std140) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n  #if CC_USE_FOG == 0\n\tfactor = LinearFog(pos);\n  #elif CC_USE_FOG == 1\n    factor = ExpFog(pos);\n  #elif CC_USE_FOG == 2\n    factor = ExpSquaredFog(pos);\n  #elif CC_USE_FOG == 3\n    factor = LayeredFog(pos);\n  #else\n    factor = 1.0;\n  #endif\n}\n#if !CC_USE_ACCURATE_FOG\nout float v_fog_factor;\n#endif\nvoid CC_TRANSFER_FOG(vec4 pos) {\n#if !CC_USE_ACCURATE_FOG\n    CC_TRANSFER_FOG_BASE(pos, v_fog_factor);\n#endif\n}\nout highp vec4 v_shadowPos;\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotLightingMap;\n#endif\n#if USE_VERTEX_COLOR\n  in vec4 a_color;\n  out vec4 v_color;\n#endif\nout vec3 v_position;\nout vec3 v_normal;\nout vec2 v_uv;\nout vec2 v_uv1;\n#if USE_NORMAL_MAP\n  out vec3 v_tangent;\n  out vec3 v_bitangent;\n#endif\n#if HAS_SECOND_UV || USE_LIGHTMAP\n  in vec2 a_texCoord1;\n#endif\n#if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n  out vec3 v_luv;\n  void CCLightingMapCaclUV()\n  {\n  #if !USE_INSTANCING\n    v_luv.xy = cc_lightingMapUVParam.xy + a_texCoord1 * cc_lightingMapUVParam.zw;\n    v_luv.z = cc_lightingMapUVParam.z;\n  #else\n    v_luv.xy = a_lightingMapUVParam.xy + a_texCoord1 * a_lightingMapUVParam.zw;\n    v_luv.z = a_lightingMapUVParam.z;\n  #endif\n  }\n#endif\nvoid main () {\n  StandardVertInput In;\n      In.position = vec4(a_position, 1.0);\n      In.normal = a_normal;\n      In.tangent = a_tangent;\n    #if CC_USE_MORPH\n      applyMorph(In);\n    #endif\n    #if CC_USE_SKINNING\n      CCSkin(In);\n    #endif\n  mat4 matWorld, matWorldIT;\n    #if USE_INSTANCING\n      matWorld = mat4(\n        vec4(a_matWorld0.xyz, 0.0),\n        vec4(a_matWorld1.xyz, 0.0),\n        vec4(a_matWorld2.xyz, 0.0),\n        vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n      );\n      matWorldIT = matWorld;\n    #elif USE_BATCHING\n      matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n      matWorldIT = matWorld;\n    #else\n      matWorld = cc_matWorld;\n      matWorldIT = cc_matWorldIT;\n    #endif\n  vec4 pos = matWorld * In.position;\n  v_position = pos.xyz;\n  v_normal = normalize((matWorldIT * vec4(In.normal, 0.0)).xyz);\n  #if USE_TWOSIDE\n    vec3 viewDirect = normalize(cc_cameraPos.xyz - v_position);\n    v_normal *= dot(v_normal, viewDirect) < 0.0 ? -1.0 : 1.0;\n  #endif\n  #if USE_NORMAL_MAP\n    v_tangent = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n    v_bitangent = cross(v_normal, v_tangent) * In.tangent.w;\n  #endif\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if SAMPLE_FROM_RT\n    v_uv = cc_cameraPos.w > 1.0 ? vec2(v_uv.x, 1.0 - v_uv.y) : v_uv;\n  #endif\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n    #if SAMPLE_FROM_RT\n      v_uv1 = cc_cameraPos.w > 1.0 ? vec2(v_uv1.x, 1.0 - v_uv1.y) : v_uv1;\n    #endif\n  #endif\n  #if USE_VERTEX_COLOR\n    v_color = a_color;\n  #endif\n  CC_TRANSFER_FOG(pos);\n  v_shadowPos = cc_matLightViewProj * pos;\n  #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    CCLightingMapCaclUV();\n  #endif\n  gl_Position = cc_matProj * (cc_matView * matWorld) * In.position;\n}","frag":"\nprecision highp float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(std140) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n  #if CC_USE_FOG == 0\n\tfactor = LinearFog(pos);\n  #elif CC_USE_FOG == 1\n    factor = ExpFog(pos);\n  #elif CC_USE_FOG == 2\n    factor = ExpSquaredFog(pos);\n  #elif CC_USE_FOG == 3\n    factor = LayeredFog(pos);\n  #else\n    factor = 1.0;\n  #endif\n}\nvoid CC_APPLY_FOG_BASE(inout vec4 color, float factor) {\n  color = vec4(mix(cc_fogColor.rgb, color.rgb, factor), color.a);\n}\n#if !CC_USE_ACCURATE_FOG\nin float v_fog_factor;\n#endif\nvoid CC_APPLY_FOG(inout vec4 color) {\n#if !CC_USE_ACCURATE_FOG\n    CC_APPLY_FOG_BASE(color, v_fog_factor);\n#endif\n}\nvoid CC_APPLY_FOG(inout vec4 color, vec3 worldPos) {\n#if CC_USE_ACCURATE_FOG\n    float factor;\n    CC_TRANSFER_FOG_BASE(vec4(worldPos, 1.0), factor);\n#else\n    float factor = v_fog_factor;\n#endif\n    CC_APPLY_FOG_BASE(color, factor);\n}\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\nhighp float unpackHighpData (float mainPart, float modPart) {\n  highp float data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out float mainPart, out float modPart, highp float data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp float unpackHighpData (float mainPart, float modPart, const float modValue) {\n  highp float data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out float mainPart, out float modPart, highp float data, const float modValue) {\n  highp float divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec2 unpackHighpData (vec2 mainPart, vec2 modPart) {\n  highp vec2 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec2 unpackHighpData (vec2 mainPart, vec2 modPart, const float modValue) {\n  highp vec2 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data, const float modValue) {\n  highp vec2 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec3 unpackHighpData (vec3 mainPart, vec3 modPart) {\n  highp vec3 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec3 unpackHighpData (vec3 mainPart, vec3 modPart, const float modValue) {\n  highp vec3 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data, const float modValue) {\n  highp vec3 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec4 unpackHighpData (vec4 mainPart, vec4 modPart) {\n  highp vec4 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec4 unpackHighpData (vec4 mainPart, vec4 modPart, const float modValue) {\n  highp vec4 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data, const float modValue) {\n  highp vec4 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nfloat CCGetLinearDepthFromViewSpace(vec3 viewPos) {\n  float dist = length(viewPos);\n  return (dist - cc_shadowNFLSInfo.x) / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n  vec4 viewStartPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  return CCGetLinearDepthFromViewSpace(viewStartPos.xyz);\n}\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotLightingMap;\n  vec4 ApplyShadowDepthBias_FaceNormal(vec4 shadowPos, vec3 worldNormal)\n  {\n    vec4 newShadowPos = shadowPos;\n    if(cc_shadowLPNNInfo.z > 0.0001)\n    {\n      vec4 viewNormal = cc_matLightView * vec4(worldNormal, 0.0);\n      if(viewNormal.z < 0.1)\n        newShadowPos.xy += viewNormal.xy * cc_shadowProjInfo.xy * cc_shadowLPNNInfo.z * clamp(viewNormal.z, 0.001, 0.1);\n    }\n    return newShadowPos;\n  }\n  vec4 ApplyShadowDepthBias_Perspective(vec4 shadowPos, float viewspaceDepthBias)\n  {\n    vec3 viewSpacePos;\n    viewSpacePos.xy = shadowPos.xy * cc_shadowProjInfo.zw;\n    viewSpacePos.z = shadowPos.z * cc_shadowInvProjDepthInfo.x + shadowPos.w * cc_shadowInvProjDepthInfo.y;\n    viewSpacePos.xyz += cc_shadowProjDepthInfo.z * normalize(viewSpacePos.xyz) * viewspaceDepthBias;\n    vec4 clipSpacePos;\n    clipSpacePos.xy = viewSpacePos.xy * cc_shadowProjInfo.xy;\n    clipSpacePos.zw = viewSpacePos.z * cc_shadowProjDepthInfo.xz + vec2(cc_shadowProjDepthInfo.y, 0.0);\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      clipSpacePos.z = CCGetLinearDepthFromViewSpace(viewSpacePos.xyz);\n      clipSpacePos.z = (clipSpacePos.z * 2.0 - 1.0) * clipSpacePos.w;\n    }\n    return clipSpacePos;\n  }\n  vec4 ApplyShadowDepthBias_Orthographic(vec4 shadowPos, float viewspaceDepthBias)\n  {\n    float coeffA = cc_shadowProjDepthInfo.x;\n    float coeffB = cc_shadowProjDepthInfo.y;\n    float viewSpacePos_z = (shadowPos.z - coeffB) / coeffA;\n    viewSpacePos_z += viewspaceDepthBias;\n    vec4 result = shadowPos;\n    result.z = viewSpacePos_z * coeffA + coeffB;\n    return result;\n  }\n  float CCGetShadowFactorHard (vec4 shadowPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float shadow = 0.0;\n    float closestDepth = 0.0;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      closestDepth = dot(texture(cc_shadowMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0));\n    } else {\n      closestDepth = texture(cc_shadowMap, clipPos.xy).x;\n    }\n    shadow = step(clipPos.z, closestDepth);\n    return shadow;\n  }\n  float CCGetShadowFactorSoft (vec4 shadowPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float offsetDepth = clipPos.z;\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    vec2 clipPos_offset = clipPos.xy + oneTap;\n    float block0, block1, block2, block3;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      block0 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n      block1 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)).x);\n      block2 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)).x);\n      block3 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)).x);\n    }\n    float coefX   = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block2, block3, coefX);\n    float coefY   = mod(clipPos.y, oneTap.y) * mapSize.y;\n    return mix(resultX, resultY, coefY);\n  }\n  float CCGetShadowFactorSoft2X (vec4 shadowPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float offsetDepth = clipPos.z;\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    float clipPos_offset_L = clipPos.x - oneTap.x;\n    float clipPos_offset_R = clipPos.x + oneTap.x;\n    float clipPos_offset_U = clipPos.y - oneTap.y;\n    float clipPos_offset_D = clipPos.y + oneTap.y;\n    float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      block0 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)).x);\n      block1 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)).x);\n      block2 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)).x);\n      block3 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)).x);\n      block4 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n      block5 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)).x);\n      block6 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)).x);\n      block7 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)).x);\n      block8 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)).x);\n    }\n    float coefX = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float coefY = mod(clipPos.y, oneTap.y) * mapSize.y;\n    float shadow = 0.0;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block3, block4, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block1, block2, coefX);\n    resultY = mix(block4, block5, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block3, block4, coefX);\n    resultY = mix(block6, block7, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    resultX = mix(block4, block5, coefX);\n    resultY = mix(block7, block8, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    return shadow * 0.25;\n  }\n  float CCGetSpotLightShadowFactorHard (vec4 shadowPos, vec3 worldPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float shadow = 0.0;\n    float closestDepth = 0.0;\n    float depth = clipPos.z;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      closestDepth = dot(texture(cc_spotLightingMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0));\n    } else {\n      closestDepth = texture(cc_spotLightingMap, clipPos.xy).x;\n    }\n    shadow = step(depth, closestDepth);\n    return shadow;\n  }\n  float CCGetSpotLightShadowFactorSoft (vec4 shadowPos, vec3 worldPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float depth = 0.0;\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      depth = CCGetLinearDepth(worldPos);\n    } else {\n      depth = clipPos.z;\n    }\n    float bias = cc_shadowWHPBInfo.w;\n    vec2 oneTap = 1.0 / cc_shadowWHPBInfo.xy;\n    vec2 clipPos_offset = clipPos.xy + oneTap;\n    float block0, block1, block2, block3;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      block0 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)).x);\n      block1 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos.y)).x);\n      block2 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset.y)).x);\n      block3 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos_offset.y)).x);\n    }\n    float coefX   = mod(clipPos.x, oneTap.x) * cc_shadowWHPBInfo.x;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block2, block3, coefX);\n    float coefY   = mod(clipPos.y, oneTap.y) * cc_shadowWHPBInfo.y;\n    return mix(resultX, resultY, coefY);\n  }\n  float CCGetSpotLightShadowFactorSoft2X (vec4 shadowPos, vec3 worldPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float depth = 0.0;\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      depth = CCGetLinearDepth(worldPos);\n    } else {\n      depth = clipPos.z;\n    }\n    float bias = cc_shadowWHPBInfo.w;\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    float clipPos_offset_L = clipPos.x - oneTap.x;\n    float clipPos_offset_R = clipPos.x + oneTap.x;\n    float clipPos_offset_U = clipPos.y - oneTap.y;\n    float clipPos_offset_D = clipPos.y + oneTap.y;\n    float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      block0 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_U)).x);\n      block1 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_U)).x);\n      block2 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_U)).x);\n      block3 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos.y)).x);\n      block4 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)).x);\n      block5 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos.y)).x);\n      block6 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_D)).x);\n      block7 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_D)).x);\n      block8 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_D)).x);\n    }\n    float coefX = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float coefY = mod(clipPos.y, oneTap.y) * mapSize.y;\n    float shadow = 0.0;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block3, block4, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block1, block2, coefX);\n    resultY = mix(block4, block5, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block3, block4, coefX);\n    resultY = mix(block6, block7, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    resultX = mix(block4, block5, coefX);\n    resultY = mix(block7, block8, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    return shadow * 0.25;\n  }\n#endif\n#if CC_USE_IBL\n  uniform samplerCube cc_environment;\n  vec4 fragTextureLod (sampler2D tex, vec2 coord, float lod) {\n      return textureLod(tex, coord, lod);\n  }\n  vec4 fragTextureLod (samplerCube tex, vec3 coord, float lod) {\n      return textureLod(tex, coord, lod);\n  }\n  vec3 unpackRGBE (vec4 rgbe) {\n    return rgbe.rgb * pow(1.1, rgbe.a * 255.0 - 128.0);\n  }\n  #if CC_USE_DIFFUSEMAP\n    uniform samplerCube cc_diffuseMap;\n  #endif\n#endif\nfloat GGXMobile (float roughness, float NoH, vec3 H, vec3 N) {\n  vec3 NxH = cross(N, H);\n  float OneMinusNoHSqr = dot(NxH, NxH);\n  float a = roughness * roughness;\n  float n = NoH * a;\n  float p = a / (OneMinusNoHSqr + n * n);\n  return p * p;\n}\nfloat CalcSpecular (float roughness, float NoH, vec3 H, vec3 N) {\n  return (roughness * 0.25 + 0.25) * GGXMobile(roughness, NoH, H, N);\n}\nvec3 BRDFApprox (vec3 specular, float roughness, float NoV) {\n  const vec4 c0 = vec4(-1.0, -0.0275, -0.572, 0.022);\n  const vec4 c1 = vec4(1.0, 0.0425, 1.04, -0.04);\n  vec4 r = roughness * c0 + c1;\n  float a004 = min(r.x * r.x, exp2(-9.28 * NoV)) * r.x + r.y;\n  vec2 AB = vec2(-1.04, 1.04) * a004 + r.zw;\n  AB.y *= clamp(50.0 * specular.g, 0.0, 1.0);\n  return specular * AB.x + AB.y;\n}\n#if USE_REFLECTION_DENOISE\n  vec3 GetEnvReflectionWithMipFiltering(vec3 R, float roughness, float mipCount, float denoiseIntensity) {\n    #if CC_USE_IBL\n    \tfloat mip = roughness * mipCount;\n    \tfloat delta = (dot(dFdx(R), dFdy(R))) * 1000.0;\n    \tfloat mipBias = mix(0.0, 5.0, clamp(delta, 0.0, 1.0));\n    \tvec4 biased = fragTextureLod(cc_environment, R, mip + mipBias);\n     \tvec4 filtered = texture(cc_environment, R);\n      #if CC_USE_IBL == 2\n      \tbiased.rgb = unpackRGBE(biased);\n      \tfiltered.rgb = unpackRGBE(filtered);\n      #else\n      \tbiased.rgb = SRGBToLinear(biased.rgb);\n      \tfiltered.rgb = SRGBToLinear(filtered.rgb);\n      #endif\n      return mix(biased.rgb, filtered.rgb, denoiseIntensity);\n    #else\n      return vec3(0.0, 0.0, 0.0);\n    #endif\n  }\n#endif\nstruct StandardSurface {\n  vec4 albedo;\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  vec3 position, position_fract_part;\n  #else\n  vec3 position;\n  #endif\n  vec3 normal;\n  vec3 emissive;\n  vec3 lightmap;\n  float lightmap_test;\n  float roughness;\n  float metallic;\n  float occlusion;\n};\nvec4 CCStandardShadingBase (StandardSurface s, vec4 shadowPos) {\n  vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n  vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n  vec3 position;\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  position = unpackHighpData(s.position, s.position_fract_part);\n  #else\n  position = s.position;\n  #endif\n  vec3 N = normalize(s.normal);\n  vec3 V = normalize(cc_cameraPos.xyz - position);\n  float NV = max(abs(dot(N, V)), 0.0);\n  specular = BRDFApprox(specular, s.roughness, NV);\n  vec3 L = normalize(-cc_mainLitDir.xyz);\n  vec3 H = normalize(L + V);\n  float NH = max(dot(N, H), 0.0);\n  float NL = max(dot(N, L), 0.0);\n  vec3 finalColor = NL * cc_mainLitColor.rgb * cc_mainLitColor.w;\n  vec3 diffuseContrib = diffuse;\n  #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    if (s.lightmap_test > 0.0001) {\n      finalColor = s.lightmap.rgb;\n    }\n  #else\n    diffuseContrib /= 3.14159265359;\n  #endif\n  vec3 specularContrib = specular * CalcSpecular(s.roughness, NH, H, N);\n  vec3 dirlightContrib = (diffuseContrib + specularContrib);\n  float shadow = 1.0;\n  #if CC_RECEIVE_SHADOW\n    if (NL > 0.0 && cc_mainLitDir.w > 0.0) {\n      {\n        vec4 pos = ApplyShadowDepthBias_FaceNormal(shadowPos, N);\n        float pcf = cc_shadowWHPBInfo.z;\n        if (pcf > 1.9) shadow = CCGetShadowFactorSoft2X(pos);\n        else if (pcf > 0.9) shadow = CCGetShadowFactorSoft(pos);\n        else shadow = CCGetShadowFactorHard(pos);\n        shadow = mix(shadow, 1.0, cc_shadowNFLSInfo.w);\n      }\n    }\n  #endif\n  dirlightContrib *= shadow;\n  finalColor *= dirlightContrib;\n  float fAmb = 0.5 - N.y * 0.5;\n  vec3 ambDiff = mix(cc_ambientSky.rgb, cc_ambientGround.rgb, fAmb);\n  #if CC_USE_IBL\n    #if CC_USE_DIFFUSEMAP\n      vec4 diffuseMap = texture(cc_diffuseMap, N);\n      #if CC_USE_DIFFUSEMAP == 2\n        ambDiff = unpackRGBE(diffuseMap);\n      #else\n        ambDiff = SRGBToLinear(diffuseMap.rgb);\n      #endif\n    #endif\n    vec3 R = normalize(reflect(-V, N));\n    #if USE_REFLECTION_DENOISE\n      vec3 env = GetEnvReflectionWithMipFiltering(R, s.roughness, cc_ambientGround.w, 0.6);\n    #else\n      vec4 envmap = fragTextureLod(cc_environment, R, s.roughness * cc_ambientGround.w);\n      #if CC_USE_IBL == 2\n        vec3 env = unpackRGBE(envmap);\n      #else\n        vec3 env = SRGBToLinear(envmap.rgb);\n      #endif\n    #endif\n    finalColor += env * cc_ambientSky.w * specular * s.occlusion;\n  #endif\n  finalColor += ambDiff.rgb * cc_ambientSky.w * diffuse * s.occlusion;\n  finalColor += s.emissive;\n  return vec4(finalColor, s.albedo.a);\n}\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = ACESToneMap(color.rgb);\n  #endif\n  color.rgb = sqrt(color.rgb);\n  return color;\n}\nin highp vec4 v_shadowPos;\n#if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n  in vec3 v_luv;\n  uniform sampler2D cc_lightingMap;\n  vec3 UnpackLightingmap(vec4 color) {\n    vec3 c;\n    float e = 1.0 + color.a * (8.0 - 1.0);\n    c.r = color.r * e;\n    c.g = color.g * e;\n    c.b = color.b * e;\n    return c;\n  }\n#endif\nin vec3 v_position;\nin vec2 v_uv;\nin vec2 v_uv1;\nin vec3 v_normal;\n#if USE_VERTEX_COLOR\n  in vec4 v_color;\n#endif\n#if USE_ALBEDO_MAP\n  uniform sampler2D albedoMap;\n#endif\n#if USE_NORMAL_MAP\n  in vec3 v_tangent;\n  in vec3 v_bitangent;\n  uniform sampler2D normalMap;\n#endif\n#if USE_PBR_MAP\n  uniform sampler2D pbrMap;\n#endif\n#if USE_METALLIC_ROUGHNESS_MAP\n  uniform sampler2D metallicRoughnessMap;\n#endif\n#if USE_OCCLUSION_MAP\n  uniform sampler2D occlusionMap;\n#endif\n#if USE_EMISSIVE_MAP\n  uniform sampler2D emissiveMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvoid surf (out StandardSurface s) {\n  vec4 baseColor = albedo;\n  #if USE_VERTEX_COLOR\n    baseColor.rgb *= SRGBToLinear(v_color.rgb);\n    baseColor.a *= v_color.a;\n  #endif\n  #if USE_ALBEDO_MAP\n    vec4 texColor = texture(albedoMap, ALBEDO_UV);\n    texColor.rgb = SRGBToLinear(texColor.rgb);\n    baseColor *= texColor;\n  #endif\n  s.albedo = baseColor;\n  s.albedo.rgb *= albedoScaleAndCutoff.xyz;\n  #if USE_ALPHA_TEST\n    if (s.albedo.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n  #endif\n  #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    vec4 lightColor = texture(cc_lightingMap, v_luv.xy);\n    s.lightmap = UnpackLightingmap(lightColor);\n    s.lightmap_test = v_luv.z;\n  #endif\n  s.normal = v_normal;\n  #if USE_NORMAL_MAP\n    vec3 nmmp = texture(normalMap, NORMAL_UV).xyz - vec3(0.5);\n    s.normal =\n      (nmmp.x * emissiveScaleParam.w) * normalize(v_tangent) +\n      (nmmp.y * emissiveScaleParam.w) * normalize(v_bitangent) +\n      nmmp.z * normalize(s.normal);\n  #endif\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  packHighpData(s.position, s.position_fract_part, v_position);\n  #else\n  s.position = v_position;\n  #endif\n  vec4 pbr = pbrParams;\n  #if USE_PBR_MAP\n    vec4 res = texture(pbrMap, PBR_UV);\n    pbr.x *= res.r;\n    pbr.y *= res.g;\n    pbr.z *= res.b;\n    pbr.w *= res.a;\n  #endif\n  #if USE_METALLIC_ROUGHNESS_MAP\n    vec4 metallicRoughness = texture(metallicRoughnessMap, PBR_UV);\n    pbr.z *= metallicRoughness.b;\n    pbr.y *= metallicRoughness.g;\n  #endif\n  #if USE_OCCLUSION_MAP\n    pbr.x *= texture(occlusionMap, PBR_UV).r;\n  #endif\n  s.occlusion = pbr.x;\n  s.roughness = pbr.y;\n  s.metallic = pbr.z;\n  s.emissive = emissive.rgb * emissiveScaleParam.xyz;\n  #if USE_EMISSIVE_MAP\n    s.emissive *= SRGBToLinear(texture(emissiveMap, EMISSIVE_UV).rgb);\n  #endif\n}\n#if CC_FORWARD_ADD\n  #if CC_PIPELINE_TYPE == 0\n  # define LIGHTS_PER_PASS 1\n  #else\n  # define LIGHTS_PER_PASS 10\n  #endif\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n  layout(std140) uniform CCForwardLight {\n    highp vec4 cc_lightPos[LIGHTS_PER_PASS];\n    vec4 cc_lightColor[LIGHTS_PER_PASS];\n    vec4 cc_lightSizeRangeAngle[LIGHTS_PER_PASS];\n    vec4 cc_lightDir[LIGHTS_PER_PASS];\n  };\n  #endif\n  float SmoothDistAtt (float distSqr, float invSqrAttRadius) {\n    float factor = distSqr * invSqrAttRadius;\n    float smoothFactor = clamp(1.0 - factor * factor, 0.0, 1.0);\n    return smoothFactor * smoothFactor;\n  }\n  float GetDistAtt (float distSqr, float invSqrAttRadius) {\n    float attenuation = 1.0 / max(distSqr, 0.01*0.01);\n    attenuation *= SmoothDistAtt(distSqr , invSqrAttRadius);\n    return attenuation;\n  }\n  float GetAngleAtt (vec3 L, vec3 litDir, float litAngleScale, float litAngleOffset) {\n    float cd = dot(litDir, L);\n    float attenuation = clamp(cd * litAngleScale + litAngleOffset, 0.0, 1.0);\n    return (attenuation * attenuation);\n  }\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n  vec4 CCStandardShadingAdditive (StandardSurface s, vec4 shadowPos) {\n    vec3 position;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    position = unpackHighpData(s.position, s.position_fract_part);\n    #else\n    position = s.position;\n    #endif\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n    vec3 diffuseContrib = diffuse / 3.14159265359;\n    vec3 N = normalize(s.normal);\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    float NV = max(abs(dot(N, V)), 0.0);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 finalColor = vec3(0.0);\n    int numLights = CC_PIPELINE_TYPE == 0 ? LIGHTS_PER_PASS : int(cc_lightDir[0].w);\n    for (int i = 0; i < LIGHTS_PER_PASS; i++) {\n      if (i >= numLights) break;\n      vec3 SLU = cc_lightPos[i].xyz - position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = max(dot(N, SL), 0.0);\n      float SNH = max(dot(N, SH), 0.0);\n      float distSqr = dot(SLU, SLU);\n      float litRadius = cc_lightSizeRangeAngle[i].x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = 3.14159265359 * (litRadiusSqr / max(litRadiusSqr , distSqr));\n      float attRadiusSqrInv = 1.0 / max(cc_lightSizeRangeAngle[i].y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\n      if (cc_lightPos[i].w > 0.0) {\n        float cosInner = max(dot(-cc_lightDir[i].xyz, SL), 0.01);\n        float cosOuter = cc_lightSizeRangeAngle[i].z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -cc_lightDir[i].xyz, litAngleScale, litAngleOffset);\n      }\n      vec3 lightColor = cc_lightColor[i].rgb;\n      float shadow = 1.0;\n      #if CC_RECEIVE_SHADOW\n        if (cc_lightPos[i].w > 0.0 && cc_lightSizeRangeAngle[i].w > 0.0) {\n          {\n            float pcf = cc_shadowWHPBInfo.z;\n            if (pcf > 1.9) shadow = CCGetSpotLightShadowFactorSoft2X(shadowPos, position);\n            else if (pcf > 0.9) shadow = CCGetSpotLightShadowFactorSoft(shadowPos, position);\n            else shadow = CCGetSpotLightShadowFactorHard(shadowPos, position);\n          }\n        }\n      #endif\n      lightColor *= shadow;\n      finalColor += SNL * lightColor * cc_lightColor[i].w * illum * att * (diffuseContrib + lspec);\n    }\n    return vec4(finalColor, 0.0);\n  }\n  #endif\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 1\n  layout(std430, binding = 4) readonly buffer b_ccLightsBuffer { vec4 b_ccLights[]; };\n  layout(std430, binding = 5) readonly buffer b_clusterLightIndicesBuffer { uint b_clusterLightIndices[]; };\n  layout(std430, binding = 6) readonly buffer b_clusterLightGridBuffer { uvec4 b_clusterLightGrid[]; };\n  struct CCLight\n  {\n    vec4 cc_lightPos;\n    vec4 cc_lightColor;\n    vec4 cc_lightSizeRangeAngle;\n    vec4 cc_lightDir;\n  };\n  struct Cluster\n  {\n    vec3 minBounds;\n    vec3 maxBounds;\n  };\n  struct LightGrid\n  {\n    uint offset;\n    uint ccLights;\n  };\n  CCLight getCCLight(uint i)\n  {\n    CCLight light;\n    light.cc_lightPos = b_ccLights[4u * i + 0u];\n    light.cc_lightColor = b_ccLights[4u * i + 1u];\n    light.cc_lightSizeRangeAngle = b_ccLights[4u * i + 2u];\n    light.cc_lightDir = b_ccLights[4u * i + 3u];\n    return light;\n  }\n  LightGrid getLightGrid(uint cluster)\n  {\n    uvec4 gridvec = b_clusterLightGrid[cluster];\n    LightGrid grid;\n    grid.offset = gridvec.x;\n    grid.ccLights = gridvec.y;\n    return grid;\n  }\n  uint getGridLightIndex(uint start, uint offset)\n  {\n    return b_clusterLightIndices[start + offset];\n  }\n  uint getClusterZIndex(vec4 worldPos)\n  {\n    float scale = float(24) / log(cc_nearFar.y / cc_nearFar.x);\n    float bias = -(float(24) * log(cc_nearFar.x) / log(cc_nearFar.y / cc_nearFar.x));\n    float eyeDepth = -(cc_matView * worldPos).z;\n    uint zIndex = uint(max(log(eyeDepth) * scale + bias, 0.0));\n    return zIndex;\n  }\n  uint getClusterIndex(vec4 fragCoord, vec4 worldPos)\n  {\n    uint zIndex = getClusterZIndex(worldPos);\n    float clusterSizeX = ceil(cc_viewPort.z / float(16));\n    float clusterSizeY = ceil(cc_viewPort.w / float(8));\n    uvec3 indices = uvec3(uvec2(fragCoord.xy / vec2(clusterSizeX, clusterSizeY)), zIndex);\n    uint cluster = (16u * 8u) * indices.z + 16u * indices.y + indices.x;\n    return cluster;\n  }\n  vec4 CCClusterShadingAdditive (StandardSurface s, vec4 shadowPos) {\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n    vec3 diffuseContrib = diffuse / 3.14159265359;\n    vec3 position;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    position = unpackHighpData(s.position, s.position_fract_part);\n    #else\n    position = s.position;\n    #endif\n    vec3 N = normalize(s.normal);\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    float NV = max(abs(dot(N, V)), 0.001);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 finalColor = vec3(0.0);\n    uint cluster = getClusterIndex(gl_FragCoord, vec4(position, 1.0));\n    LightGrid grid = getLightGrid(cluster);\n    uint numLights = grid.ccLights;\n    for (uint i = 0u; i < 100u; i++) {\n      if (i >= numLights) break;\n      uint lightIndex = getGridLightIndex(grid.offset, i);\n      CCLight light = getCCLight(lightIndex);\n      vec3 SLU = light.cc_lightPos.xyz - position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = max(dot(N, SL), 0.001);\n      float SNH = max(dot(N, SH), 0.0);\n      float distSqr = dot(SLU, SLU);\n      float litRadius = light.cc_lightSizeRangeAngle.x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = 3.14159265359 * (litRadiusSqr / max(litRadiusSqr , distSqr));\n      float attRadiusSqrInv = 1.0 / max(light.cc_lightSizeRangeAngle.y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\n      if (light.cc_lightPos.w > 0.0) {\n        float cosInner = max(dot(-light.cc_lightDir.xyz, SL), 0.01);\n        float cosOuter = light.cc_lightSizeRangeAngle.z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -light.cc_lightDir.xyz, litAngleScale, litAngleOffset);\n      }\n      vec3 lightColor = light.cc_lightColor.rgb;\n      float shadow = 1.0;\n      #if CC_RECEIVE_SHADOW\n        if (light.cc_lightPos.w > 0.0) {\n          {\n            float pcf = cc_shadowWHPBInfo.z;\n            if (pcf > 1.9) shadow = CCGetSpotLightShadowFactorSoft2X(shadowPos, position);\n            else if (pcf > 0.9) shadow = CCGetSpotLightShadowFactorSoft(shadowPos, position);\n            else shadow = CCGetSpotLightShadowFactorHard(shadowPos, position);\n          }\n        }\n      #endif\n      lightColor *= shadow;\n      finalColor += SNL * lightColor * light.cc_lightColor.w * illum * att * (diffuseContrib + lspec);\n    }\n    return vec4(finalColor, 0.0);\n  }\n  #endif\n  layout(location = 0) out vec4 fragColorX;\n  void main () {\n    StandardSurface s; surf(s);\n    #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 1\n    vec4 color = CCClusterShadingAdditive(s, v_shadowPos);\n    #else\n    vec4 color = CCStandardShadingAdditive(s, v_shadowPos);\n    #endif\n    CC_APPLY_FOG(color, s.position.xyz);\n    fragColorX = CCFragOutput(color);\n  }\n#elif (CC_PIPELINE_TYPE == 0 || CC_FORCE_FORWARD_SHADING)\n  layout(location = 0) out vec4 fragColorX;\n  void main () {\n    StandardSurface s; surf(s);\n    vec4 color = CCStandardShadingBase(s, v_shadowPos);\n    CC_APPLY_FOG(color, s.position.xyz);\n    fragColorX = CCFragOutput(color);\n  }\n#elif CC_PIPELINE_TYPE == 1\n  vec2 signNotZero(vec2 v) {\n    return vec2((v.x >= 0.0) ? +1.0 : -1.0, (v.y >= 0.0) ? +1.0 : -1.0);\n  }\n  vec2 float32x3_to_oct(in vec3 v) {\n    vec2 p = v.xy * (1.0 / (abs(v.x) + abs(v.y) + abs(v.z)));\n    return (v.z <= 0.0) ? ((1.0 - abs(p.yx)) * signNotZero(p)) : p;\n  }\n  layout(location = 0) out vec4 fragColor0;\n  layout(location = 1) out vec4 fragColor1;\n  layout(location = 2) out vec4 fragColor2;\n  void main () {\n    StandardSurface s; surf(s);\n    fragColor0 = s.albedo;\n    fragColor1 = vec4(float32x3_to_oct(s.normal), s.roughness, s.metallic);\n    fragColor2 = vec4(s.emissive, s.occlusion);\n  }\n#endif"},"glsl1":{"vert":"\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec2 a_texCoord;\nattribute vec4 a_tangent;\n#if CC_USE_MORPH\n    attribute float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n  uniform vec4 cc_displacementWeights[15];\n  uniform vec4 cc_displacementTextureInfo;\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n        int pixelIndex = elementIndex;\n        vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n        vec2 uv = getPixelCoordFromLocation(location, cc_displacementTextureInfo.xy);\n        return texture2D(tex, uv);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture2D(tex, x)),\n        decode32(texture2D(tex, y)),\n        decode32(texture2D(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n    attribute vec4 a_joints;\n  attribute vec4 a_weights;\n  #if CC_USE_BAKED_ANIMATION\n    #if USE_INSTANCING\n      attribute highp vec4 a_jointAnimInfo;\n    #endif\n    uniform highp vec4 cc_jointTextureInfo;\n    uniform highp vec4 cc_jointAnimInfo;\n    uniform highp sampler2D cc_jointTexture;\n      #else\n    uniform highp vec4 cc_joints[90];\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout StandardVertInput attr) {\n    mat4 m = skinMatrix();\n    attr.position = m * attr.position;\n    attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n    attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n  }\n#endif\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matProj;\n  uniform highp vec4 cc_cameraPos;\n  uniform mediump vec4 cc_fogBase;\n  uniform mediump vec4 cc_fogAdd;\n#if USE_INSTANCING\n  attribute vec4 a_matWorld0;\n  attribute vec4 a_matWorld1;\n  attribute vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    attribute vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  attribute float a_dyn_batch_id;\n  uniform highp mat4 cc_matWorlds[10];\n#else\n  uniform highp mat4 cc_matWorld;\n  uniform highp mat4 cc_matWorldIT;\n  uniform highp vec4 cc_lightingMapUVParam;\n#endif\n      uniform vec4 tilingOffset;\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n  #if CC_USE_FOG == 0\n\tfactor = LinearFog(pos);\n  #elif CC_USE_FOG == 1\n    factor = ExpFog(pos);\n  #elif CC_USE_FOG == 2\n    factor = ExpSquaredFog(pos);\n  #elif CC_USE_FOG == 3\n    factor = LayeredFog(pos);\n  #else\n    factor = 1.0;\n  #endif\n}\n#if !CC_USE_ACCURATE_FOG\nvarying float v_fog_factor;\n#endif\nvoid CC_TRANSFER_FOG(vec4 pos) {\n#if !CC_USE_ACCURATE_FOG\n    CC_TRANSFER_FOG_BASE(pos, v_fog_factor);\n#endif\n}\nvarying highp vec4 v_shadowPos;\nuniform highp mat4 cc_matLightViewProj;\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotLightingMap;\n#endif\n#if USE_VERTEX_COLOR\n  attribute vec4 a_color;\n  varying vec4 v_color;\n#endif\nvarying vec3 v_position;\nvarying vec3 v_normal;\nvarying vec2 v_uv;\nvarying vec2 v_uv1;\n#if USE_NORMAL_MAP\n  varying vec3 v_tangent;\n  varying vec3 v_bitangent;\n#endif\n#if HAS_SECOND_UV || USE_LIGHTMAP\n  attribute vec2 a_texCoord1;\n#endif\n#if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n  varying vec3 v_luv;\n  void CCLightingMapCaclUV()\n  {\n  #if !USE_INSTANCING\n    v_luv.xy = cc_lightingMapUVParam.xy + a_texCoord1 * cc_lightingMapUVParam.zw;\n    v_luv.z = cc_lightingMapUVParam.z;\n  #else\n    v_luv.xy = a_lightingMapUVParam.xy + a_texCoord1 * a_lightingMapUVParam.zw;\n    v_luv.z = a_lightingMapUVParam.z;\n  #endif\n  }\n#endif\nvoid main () {\n  StandardVertInput In;\n      In.position = vec4(a_position, 1.0);\n      In.normal = a_normal;\n      In.tangent = a_tangent;\n    #if CC_USE_MORPH\n      applyMorph(In);\n    #endif\n    #if CC_USE_SKINNING\n      CCSkin(In);\n    #endif\n  mat4 matWorld, matWorldIT;\n    #if USE_INSTANCING\n      matWorld = mat4(\n        vec4(a_matWorld0.xyz, 0.0),\n        vec4(a_matWorld1.xyz, 0.0),\n        vec4(a_matWorld2.xyz, 0.0),\n        vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n      );\n      matWorldIT = matWorld;\n    #elif USE_BATCHING\n      matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n      matWorldIT = matWorld;\n    #else\n      matWorld = cc_matWorld;\n      matWorldIT = cc_matWorldIT;\n    #endif\n  vec4 pos = matWorld * In.position;\n  v_position = pos.xyz;\n  v_normal = normalize((matWorldIT * vec4(In.normal, 0.0)).xyz);\n  #if USE_TWOSIDE\n    vec3 viewDirect = normalize(cc_cameraPos.xyz - v_position);\n    v_normal *= dot(v_normal, viewDirect) < 0.0 ? -1.0 : 1.0;\n  #endif\n  #if USE_NORMAL_MAP\n    v_tangent = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n    v_bitangent = cross(v_normal, v_tangent) * In.tangent.w;\n  #endif\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if SAMPLE_FROM_RT\n    v_uv = cc_cameraPos.w > 1.0 ? vec2(v_uv.x, 1.0 - v_uv.y) : v_uv;\n  #endif\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n    #if SAMPLE_FROM_RT\n      v_uv1 = cc_cameraPos.w > 1.0 ? vec2(v_uv1.x, 1.0 - v_uv1.y) : v_uv1;\n    #endif\n  #endif\n  #if USE_VERTEX_COLOR\n    v_color = a_color;\n  #endif\n  CC_TRANSFER_FOG(pos);\n  v_shadowPos = cc_matLightViewProj * pos;\n  #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    CCLightingMapCaclUV();\n  #endif\n  gl_Position = cc_matProj * (cc_matView * matWorld) * In.position;\n}","frag":"\n#ifdef GL_EXT_draw_buffers\n#extension GL_EXT_draw_buffers: enable\n#endif\n#ifdef GL_OES_standard_derivatives\n#extension GL_OES_standard_derivatives: enable\n#endif\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod: enable\n#endif\nprecision highp float;\nuniform highp mat4 cc_matView;\n  uniform highp vec4 cc_cameraPos;\n  uniform mediump vec4 cc_mainLitDir;\n  uniform mediump vec4 cc_mainLitColor;\n  uniform mediump vec4 cc_ambientSky;\n  uniform mediump vec4 cc_ambientGround;\n  uniform mediump vec4 cc_fogColor;\n  uniform mediump vec4 cc_fogBase;\n  uniform mediump vec4 cc_fogAdd;\n  uniform mediump vec4 cc_nearFar;\n  uniform mediump vec4 cc_viewPort;\n     uniform vec4 albedo;\n     uniform vec4 albedoScaleAndCutoff;\n     uniform vec4 pbrParams;\n     uniform vec4 emissive;\n     uniform vec4 emissiveScaleParam;\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n  #if CC_USE_FOG == 0\n\tfactor = LinearFog(pos);\n  #elif CC_USE_FOG == 1\n    factor = ExpFog(pos);\n  #elif CC_USE_FOG == 2\n    factor = ExpSquaredFog(pos);\n  #elif CC_USE_FOG == 3\n    factor = LayeredFog(pos);\n  #else\n    factor = 1.0;\n  #endif\n}\nvoid CC_APPLY_FOG_BASE(inout vec4 color, float factor) {\n  color = vec4(mix(cc_fogColor.rgb, color.rgb, factor), color.a);\n}\n#if !CC_USE_ACCURATE_FOG\nvarying float v_fog_factor;\n#endif\nvoid CC_APPLY_FOG(inout vec4 color) {\n#if !CC_USE_ACCURATE_FOG\n    CC_APPLY_FOG_BASE(color, v_fog_factor);\n#endif\n}\nvoid CC_APPLY_FOG(inout vec4 color, vec3 worldPos) {\n#if CC_USE_ACCURATE_FOG\n    float factor;\n    CC_TRANSFER_FOG_BASE(vec4(worldPos, 1.0), factor);\n#else\n    float factor = v_fog_factor;\n#endif\n    CC_APPLY_FOG_BASE(color, factor);\n}\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nuniform highp mat4 cc_matLightView;\n  uniform highp vec4 cc_shadowInvProjDepthInfo;\n  uniform highp vec4 cc_shadowProjDepthInfo;\n  uniform highp vec4 cc_shadowProjInfo;\n  uniform mediump vec4 cc_shadowNFLSInfo;\n  uniform mediump vec4 cc_shadowWHPBInfo;\n  uniform mediump vec4 cc_shadowLPNNInfo;\nhighp float unpackHighpData (float mainPart, float modPart) {\n  highp float data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out float mainPart, out float modPart, highp float data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp float unpackHighpData (float mainPart, float modPart, const float modValue) {\n  highp float data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out float mainPart, out float modPart, highp float data, const float modValue) {\n  highp float divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec2 unpackHighpData (vec2 mainPart, vec2 modPart) {\n  highp vec2 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec2 unpackHighpData (vec2 mainPart, vec2 modPart, const float modValue) {\n  highp vec2 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data, const float modValue) {\n  highp vec2 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec3 unpackHighpData (vec3 mainPart, vec3 modPart) {\n  highp vec3 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec3 unpackHighpData (vec3 mainPart, vec3 modPart, const float modValue) {\n  highp vec3 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data, const float modValue) {\n  highp vec3 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec4 unpackHighpData (vec4 mainPart, vec4 modPart) {\n  highp vec4 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec4 unpackHighpData (vec4 mainPart, vec4 modPart, const float modValue) {\n  highp vec4 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data, const float modValue) {\n  highp vec4 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nfloat CCGetLinearDepthFromViewSpace(vec3 viewPos) {\n  float dist = length(viewPos);\n  return (dist - cc_shadowNFLSInfo.x) / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n  vec4 viewStartPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  return CCGetLinearDepthFromViewSpace(viewStartPos.xyz);\n}\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotLightingMap;\n  vec4 ApplyShadowDepthBias_FaceNormal(vec4 shadowPos, vec3 worldNormal)\n  {\n    vec4 newShadowPos = shadowPos;\n    if(cc_shadowLPNNInfo.z > 0.0001)\n    {\n      vec4 viewNormal = cc_matLightView * vec4(worldNormal, 0.0);\n      if(viewNormal.z < 0.1)\n        newShadowPos.xy += viewNormal.xy * cc_shadowProjInfo.xy * cc_shadowLPNNInfo.z * clamp(viewNormal.z, 0.001, 0.1);\n    }\n    return newShadowPos;\n  }\n  vec4 ApplyShadowDepthBias_Perspective(vec4 shadowPos, float viewspaceDepthBias)\n  {\n    vec3 viewSpacePos;\n    viewSpacePos.xy = shadowPos.xy * cc_shadowProjInfo.zw;\n    viewSpacePos.z = shadowPos.z * cc_shadowInvProjDepthInfo.x + shadowPos.w * cc_shadowInvProjDepthInfo.y;\n    viewSpacePos.xyz += cc_shadowProjDepthInfo.z * normalize(viewSpacePos.xyz) * viewspaceDepthBias;\n    vec4 clipSpacePos;\n    clipSpacePos.xy = viewSpacePos.xy * cc_shadowProjInfo.xy;\n    clipSpacePos.zw = viewSpacePos.z * cc_shadowProjDepthInfo.xz + vec2(cc_shadowProjDepthInfo.y, 0.0);\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      clipSpacePos.z = CCGetLinearDepthFromViewSpace(viewSpacePos.xyz);\n      clipSpacePos.z = (clipSpacePos.z * 2.0 - 1.0) * clipSpacePos.w;\n    }\n    return clipSpacePos;\n  }\n  vec4 ApplyShadowDepthBias_Orthographic(vec4 shadowPos, float viewspaceDepthBias)\n  {\n    float coeffA = cc_shadowProjDepthInfo.x;\n    float coeffB = cc_shadowProjDepthInfo.y;\n    float viewSpacePos_z = (shadowPos.z - coeffB) / coeffA;\n    viewSpacePos_z += viewspaceDepthBias;\n    vec4 result = shadowPos;\n    result.z = viewSpacePos_z * coeffA + coeffB;\n    return result;\n  }\n  float CCGetShadowFactorHard (vec4 shadowPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float shadow = 0.0;\n    float closestDepth = 0.0;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      closestDepth = dot(texture2D(cc_shadowMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0));\n    } else {\n      closestDepth = texture2D(cc_shadowMap, clipPos.xy).x;\n    }\n    shadow = step(clipPos.z, closestDepth);\n    return shadow;\n  }\n  float CCGetShadowFactorSoft (vec4 shadowPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float offsetDepth = clipPos.z;\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    vec2 clipPos_offset = clipPos.xy + oneTap;\n    float block0, block1, block2, block3;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      block0 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n      block1 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)).x);\n      block2 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)).x);\n      block3 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)).x);\n    }\n    float coefX   = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block2, block3, coefX);\n    float coefY   = mod(clipPos.y, oneTap.y) * mapSize.y;\n    return mix(resultX, resultY, coefY);\n  }\n  float CCGetShadowFactorSoft2X (vec4 shadowPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float offsetDepth = clipPos.z;\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    float clipPos_offset_L = clipPos.x - oneTap.x;\n    float clipPos_offset_R = clipPos.x + oneTap.x;\n    float clipPos_offset_U = clipPos.y - oneTap.y;\n    float clipPos_offset_D = clipPos.y + oneTap.y;\n    float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      block0 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)).x);\n      block1 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)).x);\n      block2 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)).x);\n      block3 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)).x);\n      block4 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n      block5 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)).x);\n      block6 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)).x);\n      block7 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)).x);\n      block8 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)).x);\n    }\n    float coefX = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float coefY = mod(clipPos.y, oneTap.y) * mapSize.y;\n    float shadow = 0.0;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block3, block4, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block1, block2, coefX);\n    resultY = mix(block4, block5, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block3, block4, coefX);\n    resultY = mix(block6, block7, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    resultX = mix(block4, block5, coefX);\n    resultY = mix(block7, block8, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    return shadow * 0.25;\n  }\n  float CCGetSpotLightShadowFactorHard (vec4 shadowPos, vec3 worldPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float shadow = 0.0;\n    float closestDepth = 0.0;\n    float depth = clipPos.z;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      closestDepth = dot(texture2D(cc_spotLightingMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0));\n    } else {\n      closestDepth = texture2D(cc_spotLightingMap, clipPos.xy).x;\n    }\n    shadow = step(depth, closestDepth);\n    return shadow;\n  }\n  float CCGetSpotLightShadowFactorSoft (vec4 shadowPos, vec3 worldPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float depth = 0.0;\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      depth = CCGetLinearDepth(worldPos);\n    } else {\n      depth = clipPos.z;\n    }\n    float bias = cc_shadowWHPBInfo.w;\n    vec2 oneTap = 1.0 / cc_shadowWHPBInfo.xy;\n    vec2 clipPos_offset = clipPos.xy + oneTap;\n    float block0, block1, block2, block3;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      block0 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)).x);\n      block1 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos.y)).x);\n      block2 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset.y)).x);\n      block3 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos_offset.y)).x);\n    }\n    float coefX   = mod(clipPos.x, oneTap.x) * cc_shadowWHPBInfo.x;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block2, block3, coefX);\n    float coefY   = mod(clipPos.y, oneTap.y) * cc_shadowWHPBInfo.y;\n    return mix(resultX, resultY, coefY);\n  }\n  float CCGetSpotLightShadowFactorSoft2X (vec4 shadowPos, vec3 worldPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float depth = 0.0;\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      depth = CCGetLinearDepth(worldPos);\n    } else {\n      depth = clipPos.z;\n    }\n    float bias = cc_shadowWHPBInfo.w;\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    float clipPos_offset_L = clipPos.x - oneTap.x;\n    float clipPos_offset_R = clipPos.x + oneTap.x;\n    float clipPos_offset_U = clipPos.y - oneTap.y;\n    float clipPos_offset_D = clipPos.y + oneTap.y;\n    float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      block0 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_U)).x);\n      block1 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_U)).x);\n      block2 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_U)).x);\n      block3 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos.y)).x);\n      block4 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)).x);\n      block5 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos.y)).x);\n      block6 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_D)).x);\n      block7 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_D)).x);\n      block8 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_D)).x);\n    }\n    float coefX = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float coefY = mod(clipPos.y, oneTap.y) * mapSize.y;\n    float shadow = 0.0;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block3, block4, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block1, block2, coefX);\n    resultY = mix(block4, block5, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block3, block4, coefX);\n    resultY = mix(block6, block7, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    resultX = mix(block4, block5, coefX);\n    resultY = mix(block7, block8, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    return shadow * 0.25;\n  }\n#endif\n#if CC_USE_IBL\n  uniform samplerCube cc_environment;\n  vec4 fragTextureLod (sampler2D tex, vec2 coord, float lod) {\n      #ifdef GL_EXT_shader_texture_lod\n        return texture2DLodEXT(tex, coord, lod);\n      #else\n        return texture2D(tex, coord, lod);\n      #endif\n  }\n  vec4 fragTextureLod (samplerCube tex, vec3 coord, float lod) {\n      #ifdef GL_EXT_shader_texture_lod\n        return textureCubeLodEXT(tex, coord, lod);\n      #else\n        return textureCube(tex, coord, lod);\n      #endif\n  }\n  vec3 unpackRGBE (vec4 rgbe) {\n    return rgbe.rgb * pow(1.1, rgbe.a * 255.0 - 128.0);\n  }\n  #if CC_USE_DIFFUSEMAP\n    uniform samplerCube cc_diffuseMap;\n  #endif\n#endif\nfloat GGXMobile (float roughness, float NoH, vec3 H, vec3 N) {\n  vec3 NxH = cross(N, H);\n  float OneMinusNoHSqr = dot(NxH, NxH);\n  float a = roughness * roughness;\n  float n = NoH * a;\n  float p = a / (OneMinusNoHSqr + n * n);\n  return p * p;\n}\nfloat CalcSpecular (float roughness, float NoH, vec3 H, vec3 N) {\n  return (roughness * 0.25 + 0.25) * GGXMobile(roughness, NoH, H, N);\n}\nvec3 BRDFApprox (vec3 specular, float roughness, float NoV) {\n  const vec4 c0 = vec4(-1.0, -0.0275, -0.572, 0.022);\n  const vec4 c1 = vec4(1.0, 0.0425, 1.04, -0.04);\n  vec4 r = roughness * c0 + c1;\n  float a004 = min(r.x * r.x, exp2(-9.28 * NoV)) * r.x + r.y;\n  vec2 AB = vec2(-1.04, 1.04) * a004 + r.zw;\n  AB.y *= clamp(50.0 * specular.g, 0.0, 1.0);\n  return specular * AB.x + AB.y;\n}\n#if USE_REFLECTION_DENOISE\n  vec3 GetEnvReflectionWithMipFiltering(vec3 R, float roughness, float mipCount, float denoiseIntensity) {\n    #if CC_USE_IBL\n    \tfloat mip = roughness * mipCount;\n    \tfloat delta = (dot(dFdx(R), dFdy(R))) * 1000.0;\n    \tfloat mipBias = mix(0.0, 5.0, clamp(delta, 0.0, 1.0));\n    \tvec4 biased = fragTextureLod(cc_environment, R, mip + mipBias);\n     \tvec4 filtered = textureCube(cc_environment, R);\n      #if CC_USE_IBL == 2\n      \tbiased.rgb = unpackRGBE(biased);\n      \tfiltered.rgb = unpackRGBE(filtered);\n      #else\n      \tbiased.rgb = SRGBToLinear(biased.rgb);\n      \tfiltered.rgb = SRGBToLinear(filtered.rgb);\n      #endif\n      return mix(biased.rgb, filtered.rgb, denoiseIntensity);\n    #else\n      return vec3(0.0, 0.0, 0.0);\n    #endif\n  }\n#endif\nstruct StandardSurface {\n  vec4 albedo;\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  vec3 position, position_fract_part;\n  #else\n  vec3 position;\n  #endif\n  vec3 normal;\n  vec3 emissive;\n  vec3 lightmap;\n  float lightmap_test;\n  float roughness;\n  float metallic;\n  float occlusion;\n};\nvec4 CCStandardShadingBase (StandardSurface s, vec4 shadowPos) {\n  vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n  vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n  vec3 position;\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  position = unpackHighpData(s.position, s.position_fract_part);\n  #else\n  position = s.position;\n  #endif\n  vec3 N = normalize(s.normal);\n  vec3 V = normalize(cc_cameraPos.xyz - position);\n  float NV = max(abs(dot(N, V)), 0.0);\n  specular = BRDFApprox(specular, s.roughness, NV);\n  vec3 L = normalize(-cc_mainLitDir.xyz);\n  vec3 H = normalize(L + V);\n  float NH = max(dot(N, H), 0.0);\n  float NL = max(dot(N, L), 0.0);\n  vec3 finalColor = NL * cc_mainLitColor.rgb * cc_mainLitColor.w;\n  vec3 diffuseContrib = diffuse;\n  #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    if (s.lightmap_test > 0.0001) {\n      finalColor = s.lightmap.rgb;\n    }\n  #else\n    diffuseContrib /= 3.14159265359;\n  #endif\n  vec3 specularContrib = specular * CalcSpecular(s.roughness, NH, H, N);\n  vec3 dirlightContrib = (diffuseContrib + specularContrib);\n  float shadow = 1.0;\n  #if CC_RECEIVE_SHADOW\n    if (NL > 0.0 && cc_mainLitDir.w > 0.0) {\n      {\n        vec4 pos = ApplyShadowDepthBias_FaceNormal(shadowPos, N);\n        float pcf = cc_shadowWHPBInfo.z;\n        if (pcf > 1.9) shadow = CCGetShadowFactorSoft2X(pos);\n        else if (pcf > 0.9) shadow = CCGetShadowFactorSoft(pos);\n        else shadow = CCGetShadowFactorHard(pos);\n        shadow = mix(shadow, 1.0, cc_shadowNFLSInfo.w);\n      }\n    }\n  #endif\n  dirlightContrib *= shadow;\n  finalColor *= dirlightContrib;\n  float fAmb = 0.5 - N.y * 0.5;\n  vec3 ambDiff = mix(cc_ambientSky.rgb, cc_ambientGround.rgb, fAmb);\n  #if CC_USE_IBL\n    #if CC_USE_DIFFUSEMAP\n      vec4 diffuseMap = textureCube(cc_diffuseMap, N);\n      #if CC_USE_DIFFUSEMAP == 2\n        ambDiff = unpackRGBE(diffuseMap);\n      #else\n        ambDiff = SRGBToLinear(diffuseMap.rgb);\n      #endif\n    #endif\n    vec3 R = normalize(reflect(-V, N));\n    #if USE_REFLECTION_DENOISE\n      vec3 env = GetEnvReflectionWithMipFiltering(R, s.roughness, cc_ambientGround.w, 0.6);\n    #else\n      vec4 envmap = fragTextureLod(cc_environment, R, s.roughness * cc_ambientGround.w);\n      #if CC_USE_IBL == 2\n        vec3 env = unpackRGBE(envmap);\n      #else\n        vec3 env = SRGBToLinear(envmap.rgb);\n      #endif\n    #endif\n    finalColor += env * cc_ambientSky.w * specular * s.occlusion;\n  #endif\n  finalColor += ambDiff.rgb * cc_ambientSky.w * diffuse * s.occlusion;\n  finalColor += s.emissive;\n  return vec4(finalColor, s.albedo.a);\n}\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = ACESToneMap(color.rgb);\n  #endif\n  color.rgb = sqrt(color.rgb);\n  return color;\n}\nvarying highp vec4 v_shadowPos;\n#if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n  varying vec3 v_luv;\n  uniform sampler2D cc_lightingMap;\n  vec3 UnpackLightingmap(vec4 color) {\n    vec3 c;\n    float e = 1.0 + color.a * (8.0 - 1.0);\n    c.r = color.r * e;\n    c.g = color.g * e;\n    c.b = color.b * e;\n    return c;\n  }\n#endif\nvarying vec3 v_position;\nvarying vec2 v_uv;\nvarying vec2 v_uv1;\nvarying vec3 v_normal;\n#if USE_VERTEX_COLOR\n  varying vec4 v_color;\n#endif\n#if USE_ALBEDO_MAP\n  uniform sampler2D albedoMap;\n#endif\n#if USE_NORMAL_MAP\n  varying vec3 v_tangent;\n  varying vec3 v_bitangent;\n  uniform sampler2D normalMap;\n#endif\n#if USE_PBR_MAP\n  uniform sampler2D pbrMap;\n#endif\n#if USE_METALLIC_ROUGHNESS_MAP\n  uniform sampler2D metallicRoughnessMap;\n#endif\n#if USE_OCCLUSION_MAP\n  uniform sampler2D occlusionMap;\n#endif\n#if USE_EMISSIVE_MAP\n  uniform sampler2D emissiveMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvoid surf (out StandardSurface s) {\n  vec4 baseColor = albedo;\n  #if USE_VERTEX_COLOR\n    baseColor.rgb *= SRGBToLinear(v_color.rgb);\n    baseColor.a *= v_color.a;\n  #endif\n  #if USE_ALBEDO_MAP\n    vec4 texColor = texture2D(albedoMap, ALBEDO_UV);\n    texColor.rgb = SRGBToLinear(texColor.rgb);\n    baseColor *= texColor;\n  #endif\n  s.albedo = baseColor;\n  s.albedo.rgb *= albedoScaleAndCutoff.xyz;\n  #if USE_ALPHA_TEST\n    if (s.albedo.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n  #endif\n  #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    vec4 lightColor = texture2D(cc_lightingMap, v_luv.xy);\n    s.lightmap = UnpackLightingmap(lightColor);\n    s.lightmap_test = v_luv.z;\n  #endif\n  s.normal = v_normal;\n  #if USE_NORMAL_MAP\n    vec3 nmmp = texture2D(normalMap, NORMAL_UV).xyz - vec3(0.5);\n    s.normal =\n      (nmmp.x * emissiveScaleParam.w) * normalize(v_tangent) +\n      (nmmp.y * emissiveScaleParam.w) * normalize(v_bitangent) +\n      nmmp.z * normalize(s.normal);\n  #endif\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  packHighpData(s.position, s.position_fract_part, v_position);\n  #else\n  s.position = v_position;\n  #endif\n  vec4 pbr = pbrParams;\n  #if USE_PBR_MAP\n    vec4 res = texture2D(pbrMap, PBR_UV);\n    pbr.x *= res.r;\n    pbr.y *= res.g;\n    pbr.z *= res.b;\n    pbr.w *= res.a;\n  #endif\n  #if USE_METALLIC_ROUGHNESS_MAP\n    vec4 metallicRoughness = texture2D(metallicRoughnessMap, PBR_UV);\n    pbr.z *= metallicRoughness.b;\n    pbr.y *= metallicRoughness.g;\n  #endif\n  #if USE_OCCLUSION_MAP\n    pbr.x *= texture2D(occlusionMap, PBR_UV).r;\n  #endif\n  s.occlusion = pbr.x;\n  s.roughness = pbr.y;\n  s.metallic = pbr.z;\n  s.emissive = emissive.rgb * emissiveScaleParam.xyz;\n  #if USE_EMISSIVE_MAP\n    s.emissive *= SRGBToLinear(texture2D(emissiveMap, EMISSIVE_UV).rgb);\n  #endif\n}\n#if CC_FORWARD_ADD\n  #if CC_PIPELINE_TYPE == 0\n  # define LIGHTS_PER_PASS 1\n  #else\n  # define LIGHTS_PER_PASS 10\n  #endif\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n  uniform highp vec4 cc_lightPos[LIGHTS_PER_PASS];\n  uniform vec4 cc_lightColor[LIGHTS_PER_PASS];\n  uniform vec4 cc_lightSizeRangeAngle[LIGHTS_PER_PASS];\n  uniform vec4 cc_lightDir[LIGHTS_PER_PASS];\n  #endif\n  float SmoothDistAtt (float distSqr, float invSqrAttRadius) {\n    float factor = distSqr * invSqrAttRadius;\n    float smoothFactor = clamp(1.0 - factor * factor, 0.0, 1.0);\n    return smoothFactor * smoothFactor;\n  }\n  float GetDistAtt (float distSqr, float invSqrAttRadius) {\n    float attenuation = 1.0 / max(distSqr, 0.01*0.01);\n    attenuation *= SmoothDistAtt(distSqr , invSqrAttRadius);\n    return attenuation;\n  }\n  float GetAngleAtt (vec3 L, vec3 litDir, float litAngleScale, float litAngleOffset) {\n    float cd = dot(litDir, L);\n    float attenuation = clamp(cd * litAngleScale + litAngleOffset, 0.0, 1.0);\n    return (attenuation * attenuation);\n  }\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n  vec4 CCStandardShadingAdditive (StandardSurface s, vec4 shadowPos) {\n    vec3 position;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    position = unpackHighpData(s.position, s.position_fract_part);\n    #else\n    position = s.position;\n    #endif\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n    vec3 diffuseContrib = diffuse / 3.14159265359;\n    vec3 N = normalize(s.normal);\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    float NV = max(abs(dot(N, V)), 0.0);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 finalColor = vec3(0.0);\n    int numLights = CC_PIPELINE_TYPE == 0 ? LIGHTS_PER_PASS : int(cc_lightDir[0].w);\n    for (int i = 0; i < LIGHTS_PER_PASS; i++) {\n      if (i >= numLights) break;\n      vec3 SLU = cc_lightPos[i].xyz - position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = max(dot(N, SL), 0.0);\n      float SNH = max(dot(N, SH), 0.0);\n      float distSqr = dot(SLU, SLU);\n      float litRadius = cc_lightSizeRangeAngle[i].x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = 3.14159265359 * (litRadiusSqr / max(litRadiusSqr , distSqr));\n      float attRadiusSqrInv = 1.0 / max(cc_lightSizeRangeAngle[i].y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\n      if (cc_lightPos[i].w > 0.0) {\n        float cosInner = max(dot(-cc_lightDir[i].xyz, SL), 0.01);\n        float cosOuter = cc_lightSizeRangeAngle[i].z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -cc_lightDir[i].xyz, litAngleScale, litAngleOffset);\n      }\n      vec3 lightColor = cc_lightColor[i].rgb;\n      float shadow = 1.0;\n      #if CC_RECEIVE_SHADOW\n        if (cc_lightPos[i].w > 0.0 && cc_lightSizeRangeAngle[i].w > 0.0) {\n          {\n            float pcf = cc_shadowWHPBInfo.z;\n            if (pcf > 1.9) shadow = CCGetSpotLightShadowFactorSoft2X(shadowPos, position);\n            else if (pcf > 0.9) shadow = CCGetSpotLightShadowFactorSoft(shadowPos, position);\n            else shadow = CCGetSpotLightShadowFactorHard(shadowPos, position);\n          }\n        }\n      #endif\n      lightColor *= shadow;\n      finalColor += SNL * lightColor * cc_lightColor[i].w * illum * att * (diffuseContrib + lspec);\n    }\n    return vec4(finalColor, 0.0);\n  }\n  #endif\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 1\n  readonly buffer b_ccLightsBuffer { vec4 b_ccLights[]; };\n  readonly buffer b_clusterLightIndicesBuffer { uint b_clusterLightIndices[]; };\n  readonly buffer b_clusterLightGridBuffer { uvec4 b_clusterLightGrid[]; };\n  struct CCLight\n  {\n    vec4 cc_lightPos;\n    vec4 cc_lightColor;\n    vec4 cc_lightSizeRangeAngle;\n    vec4 cc_lightDir;\n  };\n  struct Cluster\n  {\n    vec3 minBounds;\n    vec3 maxBounds;\n  };\n  struct LightGrid\n  {\n    uint offset;\n    uint ccLights;\n  };\n  CCLight getCCLight(uint i)\n  {\n    CCLight light;\n    light.cc_lightPos = b_ccLights[4u * i + 0u];\n    light.cc_lightColor = b_ccLights[4u * i + 1u];\n    light.cc_lightSizeRangeAngle = b_ccLights[4u * i + 2u];\n    light.cc_lightDir = b_ccLights[4u * i + 3u];\n    return light;\n  }\n  LightGrid getLightGrid(uint cluster)\n  {\n    uvec4 gridvec = b_clusterLightGrid[cluster];\n    LightGrid grid;\n    grid.offset = gridvec.x;\n    grid.ccLights = gridvec.y;\n    return grid;\n  }\n  uint getGridLightIndex(uint start, uint offset)\n  {\n    return b_clusterLightIndices[start + offset];\n  }\n  uint getClusterZIndex(vec4 worldPos)\n  {\n    float scale = float(24) / log(cc_nearFar.y / cc_nearFar.x);\n    float bias = -(float(24) * log(cc_nearFar.x) / log(cc_nearFar.y / cc_nearFar.x));\n    float eyeDepth = -(cc_matView * worldPos).z;\n    uint zIndex = uint(max(log(eyeDepth) * scale + bias, 0.0));\n    return zIndex;\n  }\n  uint getClusterIndex(vec4 fragCoord, vec4 worldPos)\n  {\n    uint zIndex = getClusterZIndex(worldPos);\n    float clusterSizeX = ceil(cc_viewPort.z / float(16));\n    float clusterSizeY = ceil(cc_viewPort.w / float(8));\n    uvec3 indices = uvec3(uvec2(fragCoord.xy / vec2(clusterSizeX, clusterSizeY)), zIndex);\n    uint cluster = (16u * 8u) * indices.z + 16u * indices.y + indices.x;\n    return cluster;\n  }\n  vec4 CCClusterShadingAdditive (StandardSurface s, vec4 shadowPos) {\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n    vec3 diffuseContrib = diffuse / 3.14159265359;\n    vec3 position;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    position = unpackHighpData(s.position, s.position_fract_part);\n    #else\n    position = s.position;\n    #endif\n    vec3 N = normalize(s.normal);\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    float NV = max(abs(dot(N, V)), 0.001);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 finalColor = vec3(0.0);\n    uint cluster = getClusterIndex(gl_FragCoord, vec4(position, 1.0));\n    LightGrid grid = getLightGrid(cluster);\n    uint numLights = grid.ccLights;\n    for (uint i = 0u; i < 100u; i++) {\n      if (i >= numLights) break;\n      uint lightIndex = getGridLightIndex(grid.offset, i);\n      CCLight light = getCCLight(lightIndex);\n      vec3 SLU = light.cc_lightPos.xyz - position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = max(dot(N, SL), 0.001);\n      float SNH = max(dot(N, SH), 0.0);\n      float distSqr = dot(SLU, SLU);\n      float litRadius = light.cc_lightSizeRangeAngle.x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = 3.14159265359 * (litRadiusSqr / max(litRadiusSqr , distSqr));\n      float attRadiusSqrInv = 1.0 / max(light.cc_lightSizeRangeAngle.y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\n      if (light.cc_lightPos.w > 0.0) {\n        float cosInner = max(dot(-light.cc_lightDir.xyz, SL), 0.01);\n        float cosOuter = light.cc_lightSizeRangeAngle.z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -light.cc_lightDir.xyz, litAngleScale, litAngleOffset);\n      }\n      vec3 lightColor = light.cc_lightColor.rgb;\n      float shadow = 1.0;\n      #if CC_RECEIVE_SHADOW\n        if (light.cc_lightPos.w > 0.0) {\n          {\n            float pcf = cc_shadowWHPBInfo.z;\n            if (pcf > 1.9) shadow = CCGetSpotLightShadowFactorSoft2X(shadowPos, position);\n            else if (pcf > 0.9) shadow = CCGetSpotLightShadowFactorSoft(shadowPos, position);\n            else shadow = CCGetSpotLightShadowFactorHard(shadowPos, position);\n          }\n        }\n      #endif\n      lightColor *= shadow;\n      finalColor += SNL * lightColor * light.cc_lightColor.w * illum * att * (diffuseContrib + lspec);\n    }\n    return vec4(finalColor, 0.0);\n  }\n  #endif\n  void main () {\n    StandardSurface s; surf(s);\n    #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 1\n    vec4 color = CCClusterShadingAdditive(s, v_shadowPos);\n    #else\n    vec4 color = CCStandardShadingAdditive(s, v_shadowPos);\n    #endif\n    CC_APPLY_FOG(color, s.position.xyz);\n    gl_FragData[0] = CCFragOutput(color);\n  }\n#elif (CC_PIPELINE_TYPE == 0 || CC_FORCE_FORWARD_SHADING)\n  void main () {\n    StandardSurface s; surf(s);\n    vec4 color = CCStandardShadingBase(s, v_shadowPos);\n    CC_APPLY_FOG(color, s.position.xyz);\n    gl_FragData[0] = CCFragOutput(color);\n  }\n#elif CC_PIPELINE_TYPE == 1\n  vec2 signNotZero(vec2 v) {\n    return vec2((v.x >= 0.0) ? +1.0 : -1.0, (v.y >= 0.0) ? +1.0 : -1.0);\n  }\n  vec2 float32x3_to_oct(in vec3 v) {\n    vec2 p = v.xy * (1.0 / (abs(v.x) + abs(v.y) + abs(v.z)));\n    return (v.z <= 0.0) ? ((1.0 - abs(p.yx)) * signNotZero(p)) : p;\n  }\n  void main () {\n    StandardSurface s; surf(s);\n    gl_FragData[0] = s.albedo;\n    gl_FragData[1] = vec4(float32x3_to_oct(s.normal), s.roughness, s.metallic);\n    gl_FragData[2] = vec4(s.emissive, s.occlusion);\n  }\n#endif"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]},{"name":"CCShadow","defines":[]}],"samplerTextures":[{"name":"cc_shadowMap","defines":["CC_RECEIVE_SHADOW"]},{"name":"cc_spotLightingMap","defines":["CC_RECEIVE_SHADOW"]},{"name":"cc_environment","defines":["CC_USE_IBL"]},{"name":"cc_diffuseMap","defines":["CC_USE_IBL","CC_USE_DIFFUSEMAP"]}],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCMorph","defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION"]},{"name":"CCLocalBatched","defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"CCLocal","defines":["!USE_INSTANCING","!USE_BATCHING"]},{"name":"CCForwardLight","defines":["CC_FORWARD_ADD","CC_ENABLE_CLUSTERED_LIGHT_CULLING"]}],"samplerTextures":[{"name":"cc_PositionDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"cc_lightingMap","defines":["USE_LIGHTMAP","!USE_BATCHING","!CC_FORWARD_ADD"]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":222,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":65}},"defines":[{"name":"CC_USE_MORPH","type":"boolean","defines":[]},{"name":"CC_MORPH_TARGET_COUNT","type":"number","defines":["CC_USE_MORPH"],"range":[2,8]},{"name":"CC_MORPH_PRECOMPUTED","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_POSITION","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_NORMAL","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_TANGENT","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_USE_SKINNING","type":"boolean","defines":[]},{"name":"CC_USE_BAKED_ANIMATION","type":"boolean","defines":["CC_USE_SKINNING"]},{"name":"USE_INSTANCING","type":"boolean","defines":[],"editor":{"elevated":true}},{"name":"USE_BATCHING","type":"boolean","defines":["!USE_INSTANCING"],"editor":{"elevated":true}},{"name":"USE_LIGHTMAP","type":"boolean","defines":[]},{"name":"CC_USE_FOG","type":"number","defines":[],"range":[0,4]},{"name":"CC_USE_ACCURATE_FOG","type":"boolean","defines":[]},{"name":"CC_RECEIVE_SHADOW","type":"boolean","defines":[]},{"name":"USE_VERTEX_COLOR","type":"boolean","defines":[]},{"name":"USE_NORMAL_MAP","type":"boolean","defines":[]},{"name":"HAS_SECOND_UV","type":"boolean","defines":[]},{"name":"CC_FORWARD_ADD","type":"boolean","defines":[]},{"name":"USE_TWOSIDE","type":"boolean","defines":[]},{"name":"SAMPLE_FROM_RT","type":"boolean","defines":[]},{"name":"CC_USE_IBL","type":"number","defines":[],"range":[0,2]},{"name":"CC_USE_DIFFUSEMAP","type":"number","defines":["CC_USE_IBL"],"range":[0,2]},{"name":"USE_REFLECTION_DENOISE","type":"boolean","defines":[]},{"name":"CC_USE_HDR","type":"boolean","defines":[]},{"name":"USE_ALBEDO_MAP","type":"boolean","defines":[]},{"name":"ALBEDO_UV","type":"string","defines":["USE_ALBEDO_MAP"],"options":["v_uv","v_uv1"]},{"name":"NORMAL_UV","type":"string","defines":["USE_NORMAL_MAP"],"options":["v_uv","v_uv1"]},{"name":"PBR_UV","type":"string","defines":[],"options":["v_uv","v_uv1"]},{"name":"USE_PBR_MAP","type":"boolean","defines":[]},{"name":"USE_METALLIC_ROUGHNESS_MAP","type":"boolean","defines":[]},{"name":"USE_OCCLUSION_MAP","type":"boolean","defines":[]},{"name":"USE_EMISSIVE_MAP","type":"boolean","defines":[]},{"name":"EMISSIVE_UV","type":"string","defines":["USE_EMISSIVE_MAP"],"options":["v_uv","v_uv1"]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"ALPHA_TEST_CHANNEL","type":"string","defines":["USE_ALPHA_TEST"],"options":["a","r"]},{"name":"CC_PIPELINE_TYPE","type":"number","defines":["CC_FORWARD_ADD"],"range":[0,1]},{"name":"CC_FORCE_FORWARD_SHADING","type":"boolean","defines":["CC_FORWARD_ADD"]}]},{"hash":210600745,"name":"builtin-standard|shadow-caster-vs:vert|shadow-caster-fs:frag","blocks":[{"name":"Constants","stageFlags":17,"binding":0,"members":[{"name":"tilingOffset","type":16,"count":1},{"name":"albedo","type":16,"count":1},{"name":"albedoScaleAndCutoff","type":16,"count":1},{"name":"pbrParams","type":16,"count":1},{"name":"emissive","type":16,"count":1},{"name":"emissiveScaleParam","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"albedoMap","type":28,"count":1,"stageFlags":16,"binding":1,"defines":["USE_ALBEDO_MAP"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_normal","format":32,"location":1,"defines":[]},{"name":"a_texCoord","format":21,"location":2,"defines":[]},{"name":"a_tangent","format":44,"location":3,"defines":[]},{"name":"a_vertexId","format":11,"location":6,"defines":["CC_USE_MORPH"]},{"name":"a_joints","location":4,"defines":["CC_USE_SKINNING"]},{"name":"a_weights","format":44,"location":5,"defines":["CC_USE_SKINNING"]},{"name":"a_jointAnimInfo","format":44,"isInstanced":true,"location":7,"defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION","USE_INSTANCING"]},{"name":"a_matWorld0","format":44,"isInstanced":true,"location":8,"defines":["USE_INSTANCING"]},{"name":"a_matWorld1","format":44,"isInstanced":true,"location":9,"defines":["USE_INSTANCING"]},{"name":"a_matWorld2","format":44,"isInstanced":true,"location":10,"defines":["USE_INSTANCING"]},{"name":"a_lightingMapUVParam","format":44,"isInstanced":true,"location":11,"defines":["USE_INSTANCING","USE_LIGHTMAP"]},{"name":"a_dyn_batch_id","format":11,"location":12,"defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"a_texCoord1","format":21,"location":13,"defines":[]}],"varyings":[{"name":"v_uv","type":14,"count":1,"stageFlags":17,"location":0,"defines":[]},{"name":"v_uv1","type":14,"count":1,"stageFlags":17,"location":1,"defines":[]},{"name":"v_worldPos","type":16,"count":1,"stageFlags":17,"location":2,"defines":[]},{"name":"v_clip_depth","type":13,"count":1,"stageFlags":17,"location":3,"defines":[]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"glsl4":{"vert":"#extension GL_EXT_shader_explicit_arithmetic_types_int32: require\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec3 a_normal;\nlayout(location = 2) in vec2 a_texCoord;\nlayout(location = 3) in vec4 a_tangent;\n#if CC_USE_MORPH\n    int getVertexId() {\n      return gl_VertexIndex;\n    }\n  layout(set = 2, binding = 4) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    layout(set = 2, binding = 7) uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    layout(set = 2, binding = 8) uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    layout(set = 2, binding = 9) uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n    layout(location = 4) in u32vec4 a_joints;\n  layout(location = 5) in vec4 a_weights;\n  #if CC_USE_BAKED_ANIMATION\n    #if USE_INSTANCING\n      layout(location = 7) in highp vec4 a_jointAnimInfo;\n    #endif\n    layout(set = 2, binding = 3) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(set = 2, binding = 2) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    layout(set = 2, binding = 6) uniform highp sampler2D cc_jointTexture;\n      #else\n    layout(set = 2, binding = 3) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout StandardVertInput attr) {\n    mat4 m = skinMatrix();\n    attr.position = m * attr.position;\n    attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n    attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n  }\n#endif\n#if USE_INSTANCING\n  layout(location = 8) in vec4 a_matWorld0;\n  layout(location = 9) in vec4 a_matWorld1;\n  layout(location = 10) in vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    layout(location = 11) in vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  layout(location = 12) in float a_dyn_batch_id;\n  layout(set = 2, binding = 0) uniform CCLocalBatched {\n    highp mat4 cc_matWorlds[10];\n  };\n#else\n  layout(set = 2, binding = 0) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n  };\n#endif\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\nlayout(set = 0, binding = 2) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\n#if HAS_SECOND_UV || USE_LIGHTMAP\n  layout(location = 13) in vec2 a_texCoord1;\n#endif\nlayout(location = 0) out vec2 v_uv;\nlayout(location = 1) out vec2 v_uv1;\nlayout(location = 2) out vec4 v_worldPos;\nlayout(location = 3) out float v_clip_depth;\nvec4 vert () {\n  StandardVertInput In;\n      In.position = vec4(a_position, 1.0);\n      In.normal = a_normal;\n      In.tangent = a_tangent;\n    #if CC_USE_MORPH\n      applyMorph(In);\n    #endif\n    #if CC_USE_SKINNING\n      CCSkin(In);\n    #endif\n  mat4 matWorld, matWorldIT;\n    #if USE_INSTANCING\n      matWorld = mat4(\n        vec4(a_matWorld0.xyz, 0.0),\n        vec4(a_matWorld1.xyz, 0.0),\n        vec4(a_matWorld2.xyz, 0.0),\n        vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n      );\n      matWorldIT = matWorld;\n    #elif USE_BATCHING\n      matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n      matWorldIT = matWorld;\n    #else\n      matWorld = cc_matWorld;\n      matWorldIT = cc_matWorldIT;\n    #endif\n  v_worldPos = matWorld * In.position;\n  vec4 clipPos = cc_matLightViewProj * v_worldPos;\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n  #endif\n  v_clip_depth = clipPos.z / clipPos.w * 0.5 + 0.5;\n  return clipPos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\nvec4 packDepthToRGBA (float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 16581375.0) * depth;\n  ret = fract(ret);\n  ret -= vec4(ret.yzw, 0.0) / 255.0;\n  return ret;\n}\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(set = 0, binding = 2) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\nfloat CCGetLinearDepthFromViewSpace(vec3 viewPos) {\n  float dist = length(viewPos);\n  return (dist - cc_shadowNFLSInfo.x) / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n  vec4 viewStartPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  return CCGetLinearDepthFromViewSpace(viewStartPos.xyz);\n}\n#if CC_RECEIVE_SHADOW\n  layout(set = 0, binding = 3) uniform highp sampler2D cc_shadowMap;\n  layout(set = 0, binding = 5) uniform highp sampler2D cc_spotLightingMap;\n#endif\nlayout(location = 0) in vec2 v_uv;\nlayout(location = 1) in vec2 v_uv1;\nlayout(location = 2) in vec4 v_worldPos;\nlayout(location = 3) in float v_clip_depth;\n#if USE_ALBEDO_MAP\n  layout(set = 1, binding = 1) uniform sampler2D albedoMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvec4 frag () {\n  vec4 baseColor = albedo;\n  #if USE_ALBEDO_MAP\n    baseColor *= texture(albedoMap, ALBEDO_UV);\n  #endif\n  #if USE_ALPHA_TEST\n    if (baseColor.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n  #endif\n  if(cc_shadowLPNNInfo.x > 0.000001 && cc_shadowLPNNInfo.x < 1.999999) {\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      return vec4(CCGetLinearDepth(v_worldPos.xyz), 1.0, 1.0, 1.0);\n    }\n  }\n  if (cc_shadowLPNNInfo.y > 0.000001) {\n    return packDepthToRGBA(v_clip_depth);\n  }\n  return vec4(v_clip_depth, 1.0, 1.0, 1.0);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl3":{"vert":"\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nin vec3 a_position;\nin vec3 a_normal;\nin vec2 a_texCoord;\nin vec4 a_tangent;\n#if CC_USE_MORPH\n    in float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n  layout(std140) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n    in vec4 a_joints;\n  in vec4 a_weights;\n  #if CC_USE_BAKED_ANIMATION\n    #if USE_INSTANCING\n      in highp vec4 a_jointAnimInfo;\n    #endif\n    layout(std140) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(std140) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    uniform highp sampler2D cc_jointTexture;\n      #else\n    layout(std140) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout StandardVertInput attr) {\n    mat4 m = skinMatrix();\n    attr.position = m * attr.position;\n    attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n    attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n  }\n#endif\n#if USE_INSTANCING\n  in vec4 a_matWorld0;\n  in vec4 a_matWorld1;\n  in vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    in vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  in float a_dyn_batch_id;\n  layout(std140) uniform CCLocalBatched {\n    highp mat4 cc_matWorlds[10];\n  };\n#else\n  layout(std140) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n  };\n#endif\nlayout(std140) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\n#if HAS_SECOND_UV || USE_LIGHTMAP\n  in vec2 a_texCoord1;\n#endif\nout vec2 v_uv;\nout vec2 v_uv1;\nout vec4 v_worldPos;\nout float v_clip_depth;\nvec4 vert () {\n  StandardVertInput In;\n      In.position = vec4(a_position, 1.0);\n      In.normal = a_normal;\n      In.tangent = a_tangent;\n    #if CC_USE_MORPH\n      applyMorph(In);\n    #endif\n    #if CC_USE_SKINNING\n      CCSkin(In);\n    #endif\n  mat4 matWorld, matWorldIT;\n    #if USE_INSTANCING\n      matWorld = mat4(\n        vec4(a_matWorld0.xyz, 0.0),\n        vec4(a_matWorld1.xyz, 0.0),\n        vec4(a_matWorld2.xyz, 0.0),\n        vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n      );\n      matWorldIT = matWorld;\n    #elif USE_BATCHING\n      matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n      matWorldIT = matWorld;\n    #else\n      matWorld = cc_matWorld;\n      matWorldIT = cc_matWorldIT;\n    #endif\n  v_worldPos = matWorld * In.position;\n  vec4 clipPos = cc_matLightViewProj * v_worldPos;\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n  #endif\n  v_clip_depth = clipPos.z / clipPos.w * 0.5 + 0.5;\n  return clipPos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nlayout(std140) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\nvec4 packDepthToRGBA (float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 16581375.0) * depth;\n  ret = fract(ret);\n  ret -= vec4(ret.yzw, 0.0) / 255.0;\n  return ret;\n}\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\nfloat CCGetLinearDepthFromViewSpace(vec3 viewPos) {\n  float dist = length(viewPos);\n  return (dist - cc_shadowNFLSInfo.x) / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n  vec4 viewStartPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  return CCGetLinearDepthFromViewSpace(viewStartPos.xyz);\n}\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotLightingMap;\n#endif\nin vec2 v_uv;\nin vec2 v_uv1;\nin vec4 v_worldPos;\nin float v_clip_depth;\n#if USE_ALBEDO_MAP\n  uniform sampler2D albedoMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvec4 frag () {\n  vec4 baseColor = albedo;\n  #if USE_ALBEDO_MAP\n    baseColor *= texture(albedoMap, ALBEDO_UV);\n  #endif\n  #if USE_ALPHA_TEST\n    if (baseColor.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n  #endif\n  if(cc_shadowLPNNInfo.x > 0.000001 && cc_shadowLPNNInfo.x < 1.999999) {\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      return vec4(CCGetLinearDepth(v_worldPos.xyz), 1.0, 1.0, 1.0);\n    }\n  }\n  if (cc_shadowLPNNInfo.y > 0.000001) {\n    return packDepthToRGBA(v_clip_depth);\n  }\n  return vec4(v_clip_depth, 1.0, 1.0, 1.0);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec2 a_texCoord;\nattribute vec4 a_tangent;\n#if CC_USE_MORPH\n    attribute float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n  uniform vec4 cc_displacementWeights[15];\n  uniform vec4 cc_displacementTextureInfo;\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n        int pixelIndex = elementIndex;\n        vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n        vec2 uv = getPixelCoordFromLocation(location, cc_displacementTextureInfo.xy);\n        return texture2D(tex, uv);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture2D(tex, x)),\n        decode32(texture2D(tex, y)),\n        decode32(texture2D(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n    attribute vec4 a_joints;\n  attribute vec4 a_weights;\n  #if CC_USE_BAKED_ANIMATION\n    #if USE_INSTANCING\n      attribute highp vec4 a_jointAnimInfo;\n    #endif\n    uniform highp vec4 cc_jointTextureInfo;\n    uniform highp vec4 cc_jointAnimInfo;\n    uniform highp sampler2D cc_jointTexture;\n      #else\n    uniform highp vec4 cc_joints[90];\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout StandardVertInput attr) {\n    mat4 m = skinMatrix();\n    attr.position = m * attr.position;\n    attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n    attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n  }\n#endif\n#if USE_INSTANCING\n  attribute vec4 a_matWorld0;\n  attribute vec4 a_matWorld1;\n  attribute vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    attribute vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  attribute float a_dyn_batch_id;\n  uniform highp mat4 cc_matWorlds[10];\n#else\n  uniform highp mat4 cc_matWorld;\n  uniform highp mat4 cc_matWorldIT;\n#endif\n      uniform vec4 tilingOffset;\nuniform highp mat4 cc_matLightViewProj;\n#if HAS_SECOND_UV || USE_LIGHTMAP\n  attribute vec2 a_texCoord1;\n#endif\nvarying vec2 v_uv;\nvarying vec2 v_uv1;\nvarying vec4 v_worldPos;\nvarying float v_clip_depth;\nvec4 vert () {\n  StandardVertInput In;\n      In.position = vec4(a_position, 1.0);\n      In.normal = a_normal;\n      In.tangent = a_tangent;\n    #if CC_USE_MORPH\n      applyMorph(In);\n    #endif\n    #if CC_USE_SKINNING\n      CCSkin(In);\n    #endif\n  mat4 matWorld, matWorldIT;\n    #if USE_INSTANCING\n      matWorld = mat4(\n        vec4(a_matWorld0.xyz, 0.0),\n        vec4(a_matWorld1.xyz, 0.0),\n        vec4(a_matWorld2.xyz, 0.0),\n        vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n      );\n      matWorldIT = matWorld;\n    #elif USE_BATCHING\n      matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n      matWorldIT = matWorld;\n    #else\n      matWorld = cc_matWorld;\n      matWorldIT = cc_matWorldIT;\n    #endif\n  v_worldPos = matWorld * In.position;\n  vec4 clipPos = cc_matLightViewProj * v_worldPos;\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n  #endif\n  v_clip_depth = clipPos.z / clipPos.w * 0.5 + 0.5;\n  return clipPos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\n   uniform vec4 albedo;\n   uniform vec4 albedoScaleAndCutoff;\nvec4 packDepthToRGBA (float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 16581375.0) * depth;\n  ret = fract(ret);\n  ret -= vec4(ret.yzw, 0.0) / 255.0;\n  return ret;\n}\nuniform highp mat4 cc_matLightView;\n  uniform mediump vec4 cc_shadowNFLSInfo;\n  uniform mediump vec4 cc_shadowLPNNInfo;\nfloat CCGetLinearDepthFromViewSpace(vec3 viewPos) {\n  float dist = length(viewPos);\n  return (dist - cc_shadowNFLSInfo.x) / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n  vec4 viewStartPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  return CCGetLinearDepthFromViewSpace(viewStartPos.xyz);\n}\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotLightingMap;\n#endif\nvarying vec2 v_uv;\nvarying vec2 v_uv1;\nvarying vec4 v_worldPos;\nvarying float v_clip_depth;\n#if USE_ALBEDO_MAP\n  uniform sampler2D albedoMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvec4 frag () {\n  vec4 baseColor = albedo;\n  #if USE_ALBEDO_MAP\n    baseColor *= texture2D(albedoMap, ALBEDO_UV);\n  #endif\n  #if USE_ALPHA_TEST\n    if (baseColor.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n  #endif\n  if(cc_shadowLPNNInfo.x > 0.000001 && cc_shadowLPNNInfo.x < 1.999999) {\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      return vec4(CCGetLinearDepth(v_worldPos.xyz), 1.0, 1.0, 1.0);\n    }\n  }\n  if (cc_shadowLPNNInfo.y > 0.000001) {\n    return packDepthToRGBA(v_clip_depth);\n  }\n  return vec4(v_clip_depth, 1.0, 1.0, 1.0);\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCShadow","defines":[]},{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[{"name":"cc_shadowMap","defines":["CC_RECEIVE_SHADOW"]},{"name":"cc_spotLightingMap","defines":["CC_RECEIVE_SHADOW"]}],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCMorph","defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION"]},{"name":"CCLocalBatched","defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"CCLocal","defines":["!USE_INSTANCING","!USE_BATCHING"]}],"samplerTextures":[{"name":"cc_PositionDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":183,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":65}},"defines":[{"name":"CC_USE_MORPH","type":"boolean","defines":[]},{"name":"CC_MORPH_TARGET_COUNT","type":"number","defines":["CC_USE_MORPH"],"range":[2,8]},{"name":"CC_MORPH_PRECOMPUTED","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_POSITION","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_NORMAL","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_TANGENT","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_USE_SKINNING","type":"boolean","defines":[]},{"name":"CC_USE_BAKED_ANIMATION","type":"boolean","defines":["CC_USE_SKINNING"]},{"name":"USE_INSTANCING","type":"boolean","defines":[],"editor":{"elevated":true}},{"name":"USE_BATCHING","type":"boolean","defines":["!USE_INSTANCING"],"editor":{"elevated":true}},{"name":"USE_LIGHTMAP","type":"boolean","defines":["USE_INSTANCING"]},{"name":"HAS_SECOND_UV","type":"boolean","defines":[]},{"name":"CC_RECEIVE_SHADOW","type":"boolean","defines":[]},{"name":"USE_ALBEDO_MAP","type":"boolean","defines":[]},{"name":"ALBEDO_UV","type":"string","defines":["USE_ALBEDO_MAP"],"options":["v_uv","v_uv1"]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"ALPHA_TEST_CHANNEL","type":"string","defines":["USE_ALPHA_TEST"],"options":["a","r"]}]}],[{"name":"opaque","passes":[{"program":"builtin-standard|standard-vs|standard-fs","properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"linear":true,"type":16,"value":[1,1,1,1],"editor":{"displayName":"Albedo","type":"color"},"handleInfo":["albedo",0,16]},"albedoScale":{"type":15,"value":[1,1,1],"handleInfo":["albedoScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST","slide":true,"step":0.001,"range":[0,1]},"handleInfo":["albedoScaleAndCutoff",3,13]},"occlusion":{"type":13,"value":[1],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",0,13]},"roughness":{"type":13,"value":[0.8],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",1,13]},"metallic":{"type":13,"value":[0.6],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",2,13]},"SpecularIntensity":{"type":13,"value":[0.5],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",3,13]},"emissive":{"linear":true,"type":16,"value":[0,0,0,1],"editor":{"type":"color"}},"emissiveScale":{"type":15,"value":[1,1,1],"handleInfo":["emissiveScaleParam",0,15]},"normalStrenth":{"type":13,"value":[1],"editor":{"parent":"USE_NORMAL_MAP","slide":true,"step":0.001,"range":[0,1]},"handleInfo":["emissiveScaleParam",3,13]},"mainTexture":{"value":"grey","type":28,"editor":{"displayName":"AlbedoMap"},"handleInfo":["albedoMap",0,28]},"normalMap":{"value":"normal","type":28},"pbrMap":{"value":"grey","type":28},"metallicRoughnessMap":{"value":"grey","type":28},"occlusionMap":{"value":"white","type":28},"emissiveMap":{"value":"grey","type":28},"albedo":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"albedoScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]},"pbrParams":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,0.8,0.6,0.5]},"emissiveScaleParam":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"albedoMap":{"type":28,"value":"grey","editor":{"visible":false,"deprecated":true}}}},{"phase":"forward-add","propertyIndex":0,"program":"builtin-standard|standard-vs|standard-fs","embeddedMacros":{"CC_FORWARD_ADD":true},"blendState":{"targets":[{"blend":true,"blendSrc":1,"blendDst":1,"blendSrcAlpha":0,"blendDstAlpha":1}]},"depthStencilState":{"depthFunc":2,"depthTest":true,"depthWrite":false}},{"phase":"shadow-caster","propertyIndex":0,"program":"builtin-standard|shadow-caster-vs:vert|shadow-caster-fs:frag","rasterizerState":{"cullMode":1},"properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"type":16,"value":[1,1,1,1],"editor":{"displayName":"Albedo","type":"color"},"handleInfo":["albedo",0,16]},"albedoScale":{"type":15,"value":[1,1,1],"handleInfo":["albedoScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST"},"handleInfo":["albedoScaleAndCutoff",3,13]},"mainTexture":{"value":"grey","type":28,"editor":{"displayName":"AlbedoMap"},"handleInfo":["albedoMap",0,28]},"albedo":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"albedoScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]},"albedoMap":{"type":28,"value":"grey","editor":{"visible":false,"deprecated":true}}}}]},{"name":"transparent","passes":[{"program":"builtin-standard|standard-vs|standard-fs","embeddedMacros":{"CC_FORCE_FORWARD_SHADING":true},"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendDstAlpha":4}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"linear":true,"type":16,"value":[1,1,1,1],"editor":{"displayName":"Albedo","type":"color"},"handleInfo":["albedo",0,16]},"albedoScale":{"type":15,"value":[1,1,1],"handleInfo":["albedoScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST","slide":true,"step":0.001,"range":[0,1]},"handleInfo":["albedoScaleAndCutoff",3,13]},"occlusion":{"type":13,"value":[1],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",0,13]},"roughness":{"type":13,"value":[0.8],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",1,13]},"metallic":{"type":13,"value":[0.6],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",2,13]},"SpecularIntensity":{"type":13,"value":[0.5],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",3,13]},"emissive":{"linear":true,"type":16,"value":[0,0,0,1],"editor":{"type":"color"}},"emissiveScale":{"type":15,"value":[1,1,1],"handleInfo":["emissiveScaleParam",0,15]},"normalStrenth":{"type":13,"value":[1],"editor":{"parent":"USE_NORMAL_MAP","slide":true,"step":0.001,"range":[0,1]},"handleInfo":["emissiveScaleParam",3,13]},"mainTexture":{"value":"grey","type":28,"editor":{"displayName":"AlbedoMap"},"handleInfo":["albedoMap",0,28]},"normalMap":{"value":"normal","type":28},"pbrMap":{"value":"grey","type":28},"metallicRoughnessMap":{"value":"grey","type":28},"occlusionMap":{"value":"white","type":28},"emissiveMap":{"value":"grey","type":28},"albedo":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"albedoScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]},"pbrParams":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,0.8,0.6,0.5]},"emissiveScaleParam":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"albedoMap":{"type":28,"value":"grey","editor":{"visible":false,"deprecated":true}}}},{"phase":"forward-add","propertyIndex":0,"program":"builtin-standard|standard-vs|standard-fs","embeddedMacros":{"CC_FORWARD_ADD":true},"blendState":{"targets":[{"blend":true,"blendSrc":1,"blendDst":1,"blendSrcAlpha":0,"blendDstAlpha":1}]},"depthStencilState":{"depthFunc":2,"depthTest":true,"depthWrite":false}},{"phase":"shadow-caster","propertyIndex":0,"program":"builtin-standard|shadow-caster-vs:vert|shadow-caster-fs:frag","rasterizerState":{"cullMode":1},"properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"type":16,"value":[1,1,1,1],"editor":{"displayName":"Albedo","type":"color"},"handleInfo":["albedo",0,16]},"albedoScale":{"type":15,"value":[1,1,1],"handleInfo":["albedoScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST"},"handleInfo":["albedoScaleAndCutoff",3,13]},"mainTexture":{"value":"grey","type":28,"editor":{"displayName":"AlbedoMap"},"handleInfo":["albedoMap",0,28]},"albedo":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"albedoScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]},"albedoMap":{"type":28,"value":"grey","editor":{"visible":false,"deprecated":true}}}}]}]]],0,0,[],[],[]],[[[10,".bin",1807389818,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":94536,"length":9672,"count":2418,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":94536,"count":1313,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,1,17,18,19,20]]},"minPosition",8,[1,0.00014011404709890485,3.9426605979997476e-8,-0.002747314516454935],"maxPosition",8,[1,0.005042050965130329,0.02120165526866913,0.005284117069095373]]],-1],0,0,[],[],[]],[[[10,".bin",3410698223,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":149400,"length":17016,"count":4254,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":149400,"count":2075,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,2,9,10,11,12]]},"minPosition",8,[1,0.0027620994951575994,0.015239289961755276,-0.003292680950835347],"maxPosition",8,[1,0.01094001904129982,0.031005149707198143,0.0028642856050282717]]],-1],0,0,[],[],[]],[[[12,"Skin-4",2311663973,["Root_M","Root_M/Spine1_M","Root_M/Spine1_M/Chest_M","Root_M/Spine1_M/Chest_M/Neck_M","Root_M/Spine1_M/Chest_M/Neck_M/Head_M","Root_M/Spine1_M/Chest_M/Scapula_R","Root_M/Spine1_M/Chest_M/Scapula_R/Shoulder_R","Root_M/Spine1_M/Chest_M/Scapula_R/Shoulder_R/Elbow_R","Root_M/Spine1_M/Chest_M/Scapula_R/Shoulder_R/Elbow_R/Wrist_R","Root_M/Spine1_M/Chest_M/Scapula_L","Root_M/Spine1_M/Chest_M/Scapula_L/Shoulder_L","Root_M/Spine1_M/Chest_M/Scapula_L/Shoulder_L/Elbow_L","Root_M/Spine1_M/Chest_M/Scapula_L/Shoulder_L/Elbow_L/Wrist_L","Root_M/Hip_R","Root_M/Hip_R/Knee_R","Root_M/Hip_R/Knee_R/Ankle_R","Root_M/Hip_R/Knee_R/Ankle_R/Toes_R","Root_M/Hip_L","Root_M/Hip_L/Knee_L","Root_M/Hip_L/Knee_L/Ankle_L","Root_M/Hip_L/Knee_L/Ankle_L/Toes_L"],[[[7,-1.6073266766851061e-16,-5.002625820273957e-16,1,0,0.9995050430297852,-0.031458914279937744,1.4491539940461042e-16,0,0.031458914279937744,0.9995050430297852,5.050714527667544e-16,0,-0.019512146711349487,0.0004364966880530119,-3.2884277806782753e-18,1],[7,-1.6051606546202993e-16,-4.955657313953114e-16,1,0,0.9981581568717957,-0.06066583842039108,1.3015651204319428e-16,0,0.06066583842039108,0.9981581568717957,5.043908088540763e-16,0,-0.024823229759931564,0.0011626967461779714,-3.024364845781441e-18,1],[7,-1.6073587051184242e-16,-5.003653906513687e-16,1,0,0.9995249509811401,-0.03081941418349743,1.4523855570887774e-16,0,0.03081941418349743,0.9995249509811401,5.05081511283003e-16,0,-0.02732432447373867,0.0003465543850325048,-1.9691652799332707e-18,1],[7,5.751306066253416e-17,-4.843061753670192e-16,1,0,0.9392595887184143,0.34320753812789917,1.1219782537462701e-16,0,-0.34320753812789917,0.9392595887184143,4.746281357303692e-16,0,-0.02801189385354519,-0.010852459818124771,-9.365741732283693e-18,1],[7,-1.6081226229577292e-16,-5.053215392444312e-16,1,0,1,-2.0489094865183688e-8,1.6081224906088311e-16,0,2.0489094865183688e-8,1,5.053215392444312e-16,0,-0.03196112811565399,0.00012439562124200165,-9.574726432503377e-18,1],[7,-0.9999274015426636,-0.0000014861826684864354,-0.012051843106746674,0,-0.012051843106746674,0.00012334794155322015,0.9999273419380188,0,4.953271126595382e-10,1,-0.00012335690553300083,0,-0.0026569380424916744,0.00010892005229834467,-0.02848154492676258,1],[7,-0.13757513463497162,-0.002986916108056903,-0.9904868006706238,0,-0.9848853349685669,-0.10582999140024185,0.13711625337600708,0,-0.10523276776075363,0.9943797588348389,0.011617805808782578,0,0.027152078226208687,0.0031008601654320955,-0.009787609800696373,1],[7,-0.13418284058570862,0.03050908073782921,-0.9904868006706238,0,-0.9143990874290466,0.3814191222190857,0.13562361896038055,0,0.38192838430404663,0.9238986372947693,-0.023282427340745926,0,0.020675957202911377,-0.008082355372607708,-0.009775741025805473,1],[7,-0.1095951646566391,0.04025038704276085,-0.9931610226631165,0,-0.916633665561676,0.38233044743537903,0.11664529889822006,0,0.38441070914268494,0.9231485724449158,-0.005006704945117235,0,0.015505842864513397,-0.00802612118422985,-0.009472150355577469,1],[7,-0.9999274015426636,-0.000001486659016336489,-0.012051837518811226,0,0.0120518384501338,-0.00012334641360212117,-0.9999273419380188,0,-9.146007654567759e-16,-1,0.00012335537758190185,0,0.0026569380424916744,-0.00010892009595409036,0.02848154492676258,1],[7,-0.1382497102022171,-0.0029869170393794775,-0.9903929233551025,0,0.9847917556762695,0.10582999885082245,-0.13778701424598694,0,0.10522483289241791,-0.9943797588348389,-0.011689475737512112,0,-0.027123883366584778,-0.0030986019410192966,0.009807745926082134,1],[7,-0.13483723998069763,0.030672883614897728,-0.9903929233551025,0,0.9810152649879456,-0.13646891713142395,-0.13778701424598694,0,-0.1393841803073883,-0.9901694059371948,-0.011689475737512112,0,-0.02204393781721592,0.0023237529676407576,0.009807745926082134,1],[7,-0.11025131493806839,0.04041488096117973,-0.9930816888809204,0,0.9838196039199829,-0.13753312826156616,-0.11482014507055283,0,-0.14122207462787628,-0.9896723031997681,-0.024597741663455963,0,-0.016886811703443527,0.0022708119358867407,0.009415285661816597,1],[7,-0.010730288922786713,-0.0003671304730232805,-0.9999423623085022,0,-0.9993575811386108,-0.03419242799282074,0.01073656789958477,0,-0.034194398671388626,0.9994152188301086,-2.2132606511404695e-11,0,0.01896691881120205,0.0005232312832958996,-0.0027990643866360188,1],[7,-0.010681620799005032,-0.0010848328238353133,-0.9999423623085022,0,-0.9948249459266663,-0.10103510320186615,0.01073656789958477,0,-0.10104092955589294,0.9948822855949402,-2.213251457106047e-11,0,0.01038399152457714,0.0012213099980726838,-0.0027990643866360188,1],[7,-1.8117590760979851e-10,-0.0015915741678327322,-0.9999987483024597,0,-1,-7.552468872518148e-8,3.013794214190568e-10,0,-7.552507241825879e-8,0.9999987483024597,-0.0015915741678327322,0,0.002713743830099702,0.0009506093338131905,-0.0027716041076928377,1],[7,7.942823003759258e-7,6.541559827155652e-8,-1,0,-0.08185373991727829,0.9966443777084351,1.8111570576628822e-10,0,0.9966443777084351,0.08185373991727829,7.96971448835393e-7,0,-0.0015626671956852078,-0.0007490511634387076,-0.0027741852682083845,1],[7,-0.010730288922786713,-0.0003671304730232805,-0.9999423623085022,0,0.9993575811386108,0.03419242799282074,-0.01073656789958477,0,0.034194398671388626,-0.9994152188301086,2.2804104762017604e-15,0,-0.01896691881120205,-0.0005232313415035605,0.0027990643866360188,1],[7,-0.010681620799005032,-0.0010848328238353133,-0.9999423623085022,0,0.9948249459266663,0.10103511065244675,-0.01073656789958477,0,0.10104092955589294,-0.9948822855949402,2.2699371255671978e-15,0,-0.01038399152457714,-0.0012213099980726838,0.0027990643866360188,1],[7,-1.8150986269560576e-10,-0.0015915741678327322,-0.9999987483024597,0,1,7.69743095929698e-8,-3.0402055872791323e-10,0,7.697469328604711e-8,-0.9999987483024597,0.0015915741678327322,0,-0.002713743830099702,-0.0009506093920208514,0.0027716041076928377,1],[7,-7.873639447097958e-7,-6.519635320501038e-8,-1,0,0.08185373991727829,-0.9966443777084351,5.288988691454222e-10,0,-0.9966443777084351,-0.08185373991727829,7.900583796072169e-7,0,0.0015626716194674373,0.0007490515126846731,0.0027741827070713043,1]],8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]]],0,0,[],[],[]],[[[35,"megatexture1",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true}],[[[{"metallic":0.4000000059604645,"roughness":0.7071067690849304},"mainTexture",6,0]],11]]],0,0,[0,0],[8,7],[65,4]],[[[12,"Skin-0",2311663973,["Root_M","Root_M/Spine1_M","Root_M/Spine1_M/Chest_M","Root_M/Spine1_M/Chest_M/Neck_M","Root_M/Spine1_M/Chest_M/Neck_M/Head_M","Root_M/Spine1_M/Chest_M/Scapula_R","Root_M/Spine1_M/Chest_M/Scapula_R/Shoulder_R","Root_M/Spine1_M/Chest_M/Scapula_R/Shoulder_R/Elbow_R","Root_M/Spine1_M/Chest_M/Scapula_R/Shoulder_R/Elbow_R/Wrist_R","Root_M/Spine1_M/Chest_M/Scapula_L","Root_M/Spine1_M/Chest_M/Scapula_L/Shoulder_L","Root_M/Spine1_M/Chest_M/Scapula_L/Shoulder_L/Elbow_L","Root_M/Spine1_M/Chest_M/Scapula_L/Shoulder_L/Elbow_L/Wrist_L","Root_M/Hip_R","Root_M/Hip_R/Knee_R","Root_M/Hip_R/Knee_R/Ankle_R","Root_M/Hip_R/Knee_R/Ankle_R/Toes_R","Root_M/Hip_L","Root_M/Hip_L/Knee_L","Root_M/Hip_L/Knee_L/Ankle_L","Root_M/Hip_L/Knee_L/Ankle_L/Toes_L"],[[[7,-1.6073266766851061e-16,-5.002625820273957e-16,1,0,0.9995050430297852,-0.031458914279937744,1.4491539940461042e-16,0,0.031458914279937744,0.9995050430297852,5.050714527667544e-16,0,-0.019512146711349487,0.0004364966880530119,-3.2884277806782753e-18,1],[7,-1.6051606546202993e-16,-4.955657313953114e-16,1,0,0.9981581568717957,-0.06066583842039108,1.3015651204319428e-16,0,0.06066583842039108,0.9981581568717957,5.043908088540763e-16,0,-0.024823229759931564,0.0011626967461779714,-3.024364845781441e-18,1],[7,-1.6073587051184242e-16,-5.003653906513687e-16,1,0,0.9995249509811401,-0.03081941418349743,1.4523855570887774e-16,0,0.03081941418349743,0.9995249509811401,5.05081511283003e-16,0,-0.02732432447373867,0.0003465543850325048,-1.9691652799332707e-18,1],[7,5.751306066253416e-17,-4.843061753670192e-16,1,0,0.9392595887184143,0.34320753812789917,1.1219782537462701e-16,0,-0.34320753812789917,0.9392595887184143,4.746281357303692e-16,0,-0.02801189385354519,-0.010852459818124771,-9.365741732283693e-18,1],[7,-1.6081226229577292e-16,-5.053215392444312e-16,1,0,1,-2.0489094865183688e-8,1.6081224906088311e-16,0,2.0489094865183688e-8,1,5.053215392444312e-16,0,-0.03196112811565399,0.00012439562124200165,-9.574726432503377e-18,1],[7,-0.9999274015426636,-0.0000014861826684864354,-0.012051843106746674,0,-0.012051843106746674,0.00012334794155322015,0.9999273419380188,0,4.953271126595382e-10,1,-0.00012335690553300083,0,-0.0026569380424916744,0.00010892005229834467,-0.02848154492676258,1],[7,-0.13757513463497162,-0.002986916108056903,-0.9904868006706238,0,-0.9848853349685669,-0.10582999140024185,0.13711625337600708,0,-0.10523276776075363,0.9943797588348389,0.011617805808782578,0,0.027152078226208687,0.0031008601654320955,-0.009787609800696373,1],[7,-0.13418284058570862,0.03050908073782921,-0.9904868006706238,0,-0.9143990874290466,0.3814191222190857,0.13562361896038055,0,0.38192838430404663,0.9238986372947693,-0.023282427340745926,0,0.020675957202911377,-0.008082355372607708,-0.009775741025805473,1],[7,-0.1095951646566391,0.04025038704276085,-0.9931610226631165,0,-0.916633665561676,0.38233044743537903,0.11664529889822006,0,0.38441070914268494,0.9231485724449158,-0.005006704945117235,0,0.015505842864513397,-0.00802612118422985,-0.009472150355577469,1],[7,-0.9999274015426636,-0.000001486659016336489,-0.012051837518811226,0,0.0120518384501338,-0.00012334641360212117,-0.9999273419380188,0,-9.146007654567759e-16,-1,0.00012335537758190185,0,0.0026569380424916744,-0.00010892009595409036,0.02848154492676258,1],[7,-0.1382497102022171,-0.0029869170393794775,-0.9903929233551025,0,0.9847917556762695,0.10582999885082245,-0.13778701424598694,0,0.10522483289241791,-0.9943797588348389,-0.011689475737512112,0,-0.027123883366584778,-0.0030986019410192966,0.009807745926082134,1],[7,-0.13483723998069763,0.030672883614897728,-0.9903929233551025,0,0.9810152649879456,-0.13646891713142395,-0.13778701424598694,0,-0.1393841803073883,-0.9901694059371948,-0.011689475737512112,0,-0.02204393781721592,0.0023237529676407576,0.009807745926082134,1],[7,-0.11025131493806839,0.04041488096117973,-0.9930816888809204,0,0.9838196039199829,-0.13753312826156616,-0.11482014507055283,0,-0.14122207462787628,-0.9896723031997681,-0.024597741663455963,0,-0.016886811703443527,0.0022708119358867407,0.009415285661816597,1],[7,-0.010730288922786713,-0.0003671304730232805,-0.9999423623085022,0,-0.9993575811386108,-0.03419242799282074,0.01073656789958477,0,-0.034194398671388626,0.9994152188301086,-2.2132606511404695e-11,0,0.01896691881120205,0.0005232312832958996,-0.0027990643866360188,1],[7,-0.010681620799005032,-0.0010848328238353133,-0.9999423623085022,0,-0.9948249459266663,-0.10103510320186615,0.01073656789958477,0,-0.10104092955589294,0.9948822855949402,-2.213251457106047e-11,0,0.01038399152457714,0.0012213099980726838,-0.0027990643866360188,1],[7,-1.8117590760979851e-10,-0.0015915741678327322,-0.9999987483024597,0,-1,-7.552468872518148e-8,3.013794214190568e-10,0,-7.552507241825879e-8,0.9999987483024597,-0.0015915741678327322,0,0.002713743830099702,0.0009506093338131905,-0.0027716041076928377,1],[7,7.942823003759258e-7,6.541559827155652e-8,-1,0,-0.08185373991727829,0.9966443777084351,1.8111570576628822e-10,0,0.9966443777084351,0.08185373991727829,7.96971448835393e-7,0,-0.0015626671956852078,-0.0007490511634387076,-0.0027741852682083845,1],[7,-0.010730288922786713,-0.0003671304730232805,-0.9999423623085022,0,0.9993575811386108,0.03419242799282074,-0.01073656789958477,0,0.034194398671388626,-0.9994152188301086,2.2804104762017604e-15,0,-0.01896691881120205,-0.0005232313415035605,0.0027990643866360188,1],[7,-0.010681620799005032,-0.0010848328238353133,-0.9999423623085022,0,0.9948249459266663,0.10103511065244675,-0.01073656789958477,0,0.10104092955589294,-0.9948822855949402,2.2699371255671978e-15,0,-0.01038399152457714,-0.0012213099980726838,0.0027990643866360188,1],[7,-1.8150986269560576e-10,-0.0015915741678327322,-0.9999987483024597,0,1,7.69743095929698e-8,-3.0402055872791323e-10,0,7.697469328604711e-8,-0.9999987483024597,0.0015915741678327322,0,-0.002713743830099702,-0.0009506093920208514,0.0027716041076928377,1],[7,-7.873639447097958e-7,-6.519635320501038e-8,-1,0,0.08185373991727829,-0.9966443777084351,5.288988691454222e-10,0,-0.9966443777084351,-0.08185373991727829,7.900583796072169e-7,0,0.0015626716194674373,0.0007490515126846731,0.0027741827070713043,1]],8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]]],0,0,[],[],[]],[[[10,".bin",3282262026,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":149688,"length":14628,"count":3657,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":149688,"count":2079,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,1,2,3,4,5,9,13,17]]},"minPosition",8,[1,-0.004253585822880268,0.017822612076997757,-0.0038464791141450405],"maxPosition",8,[1,0.004253585822880268,0.031113214790821075,0.004096930380910635]]],-1],0,0,[],[],[]],[[[10,".bin",1190738828,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":76032,"length":7908,"count":1977,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":76032,"count":1056,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,1,2,3,4,5,9]]},"minPosition",8,[1,-0.0019124604295939207,0.029204759746789932,-0.003246339038014412],"maxPosition",8,[1,0.0019124604295939207,0.03494063764810562,0.0021485798060894012]]],-1],0,0,[],[],[]],[[[10,".bin",2334841053,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":94536,"length":9672,"count":2418,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":94536,"count":1313,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,1,13,14,15,16]]},"minPosition",8,[1,-0.005042050965130329,3.9426605979997476e-8,-0.002747314516454935],"maxPosition",8,[1,-0.00014011170424055308,0.02120167762041092,0.005284117069095373]]],-1],0,0,[],[],[]],[[[10,".bin",863031265,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":185832,"length":27600,"count":6900,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":185832,"count":2581,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.01371309906244278,0.017852870747447014,-0.009863494895398617],"maxPosition",8,[1,0.01371309906244278,0.03421872854232788,-0.003442745190113783]]],-1],0,0,[],[],[]],[[[12,"Skin-5",2311663973,["Root_M","Root_M/Spine1_M","Root_M/Spine1_M/Chest_M","Root_M/Spine1_M/Chest_M/Neck_M","Root_M/Spine1_M/Chest_M/Neck_M/Head_M","Root_M/Spine1_M/Chest_M/Scapula_R","Root_M/Spine1_M/Chest_M/Scapula_R/Shoulder_R","Root_M/Spine1_M/Chest_M/Scapula_R/Shoulder_R/Elbow_R","Root_M/Spine1_M/Chest_M/Scapula_R/Shoulder_R/Elbow_R/Wrist_R","Root_M/Spine1_M/Chest_M/Scapula_L","Root_M/Spine1_M/Chest_M/Scapula_L/Shoulder_L","Root_M/Spine1_M/Chest_M/Scapula_L/Shoulder_L/Elbow_L","Root_M/Spine1_M/Chest_M/Scapula_L/Shoulder_L/Elbow_L/Wrist_L","Root_M/Hip_R","Root_M/Hip_R/Knee_R","Root_M/Hip_R/Knee_R/Ankle_R","Root_M/Hip_R/Knee_R/Ankle_R/Toes_R","Root_M/Hip_L","Root_M/Hip_L/Knee_L","Root_M/Hip_L/Knee_L/Ankle_L","Root_M/Hip_L/Knee_L/Ankle_L/Toes_L"],[[[7,-1.6073266766851061e-16,-5.002625820273957e-16,1,0,0.9995050430297852,-0.031458914279937744,1.4491539940461042e-16,0,0.031458914279937744,0.9995050430297852,5.050714527667544e-16,0,-0.019512146711349487,0.0004364966880530119,-3.2884277806782753e-18,1],[7,-1.6051606546202993e-16,-4.955657313953114e-16,1,0,0.9981581568717957,-0.06066583842039108,1.3015651204319428e-16,0,0.06066583842039108,0.9981581568717957,5.043908088540763e-16,0,-0.024823229759931564,0.0011626967461779714,-3.024364845781441e-18,1],[7,-1.6073587051184242e-16,-5.003653906513687e-16,1,0,0.9995249509811401,-0.03081941418349743,1.4523855570887774e-16,0,0.03081941418349743,0.9995249509811401,5.05081511283003e-16,0,-0.02732432447373867,0.0003465543850325048,-1.9691652799332707e-18,1],[7,5.751306066253416e-17,-4.843061753670192e-16,1,0,0.9392595887184143,0.34320753812789917,1.1219782537462701e-16,0,-0.34320753812789917,0.9392595887184143,4.746281357303692e-16,0,-0.02801189385354519,-0.010852459818124771,-9.365741732283693e-18,1],[7,-1.6081226229577292e-16,-5.053215392444312e-16,1,0,1,-2.0489094865183688e-8,1.6081224906088311e-16,0,2.0489094865183688e-8,1,5.053215392444312e-16,0,-0.03196112811565399,0.00012439562124200165,-9.574726432503377e-18,1],[7,-0.9999274015426636,-0.0000014861826684864354,-0.012051843106746674,0,-0.012051843106746674,0.00012334794155322015,0.9999273419380188,0,4.953271126595382e-10,1,-0.00012335690553300083,0,-0.0026569380424916744,0.00010892005229834467,-0.02848154492676258,1],[7,-0.13757513463497162,-0.002986916108056903,-0.9904868006706238,0,-0.9848853349685669,-0.10582999140024185,0.13711625337600708,0,-0.10523276776075363,0.9943797588348389,0.011617805808782578,0,0.027152078226208687,0.0031008601654320955,-0.009787609800696373,1],[7,-0.13418284058570862,0.03050908073782921,-0.9904868006706238,0,-0.9143990874290466,0.3814191222190857,0.13562361896038055,0,0.38192838430404663,0.9238986372947693,-0.023282427340745926,0,0.020675957202911377,-0.008082355372607708,-0.009775741025805473,1],[7,-0.1095951646566391,0.04025038704276085,-0.9931610226631165,0,-0.916633665561676,0.38233044743537903,0.11664529889822006,0,0.38441070914268494,0.9231485724449158,-0.005006704945117235,0,0.015505842864513397,-0.00802612118422985,-0.009472150355577469,1],[7,-0.9999274015426636,-0.000001486659016336489,-0.012051837518811226,0,0.0120518384501338,-0.00012334641360212117,-0.9999273419380188,0,-9.146007654567759e-16,-1,0.00012335537758190185,0,0.0026569380424916744,-0.00010892009595409036,0.02848154492676258,1],[7,-0.1382497102022171,-0.0029869170393794775,-0.9903929233551025,0,0.9847917556762695,0.10582999885082245,-0.13778701424598694,0,0.10522483289241791,-0.9943797588348389,-0.011689475737512112,0,-0.027123883366584778,-0.0030986019410192966,0.009807745926082134,1],[7,-0.13483723998069763,0.030672883614897728,-0.9903929233551025,0,0.9810152649879456,-0.13646891713142395,-0.13778701424598694,0,-0.1393841803073883,-0.9901694059371948,-0.011689475737512112,0,-0.02204393781721592,0.0023237529676407576,0.009807745926082134,1],[7,-0.11025131493806839,0.04041488096117973,-0.9930816888809204,0,0.9838196039199829,-0.13753312826156616,-0.11482014507055283,0,-0.14122207462787628,-0.9896723031997681,-0.024597741663455963,0,-0.016886811703443527,0.0022708119358867407,0.009415285661816597,1],[7,-0.010730288922786713,-0.0003671304730232805,-0.9999423623085022,0,-0.9993575811386108,-0.03419242799282074,0.01073656789958477,0,-0.034194398671388626,0.9994152188301086,-2.2132606511404695e-11,0,0.01896691881120205,0.0005232312832958996,-0.0027990643866360188,1],[7,-0.010681620799005032,-0.0010848328238353133,-0.9999423623085022,0,-0.9948249459266663,-0.10103510320186615,0.01073656789958477,0,-0.10104092955589294,0.9948822855949402,-2.213251457106047e-11,0,0.01038399152457714,0.0012213099980726838,-0.0027990643866360188,1],[7,-1.8117590760979851e-10,-0.0015915741678327322,-0.9999987483024597,0,-1,-7.552468872518148e-8,3.013794214190568e-10,0,-7.552507241825879e-8,0.9999987483024597,-0.0015915741678327322,0,0.002713743830099702,0.0009506093338131905,-0.0027716041076928377,1],[7,7.942823003759258e-7,6.541559827155652e-8,-1,0,-0.08185373991727829,0.9966443777084351,1.8111570576628822e-10,0,0.9966443777084351,0.08185373991727829,7.96971448835393e-7,0,-0.0015626671956852078,-0.0007490511634387076,-0.0027741852682083845,1],[7,-0.010730288922786713,-0.0003671304730232805,-0.9999423623085022,0,0.9993575811386108,0.03419242799282074,-0.01073656789958477,0,0.034194398671388626,-0.9994152188301086,2.2804104762017604e-15,0,-0.01896691881120205,-0.0005232313415035605,0.0027990643866360188,1],[7,-0.010681620799005032,-0.0010848328238353133,-0.9999423623085022,0,0.9948249459266663,0.10103511065244675,-0.01073656789958477,0,0.10104092955589294,-0.9948822855949402,2.2699371255671978e-15,0,-0.01038399152457714,-0.0012213099980726838,0.0027990643866360188,1],[7,-1.8150986269560576e-10,-0.0015915741678327322,-0.9999987483024597,0,1,7.69743095929698e-8,-3.0402055872791323e-10,0,7.697469328604711e-8,-0.9999987483024597,0.0015915741678327322,0,-0.002713743830099702,-0.0009506093920208514,0.0027716041076928377,1],[7,-7.873639447097958e-7,-6.519635320501038e-8,-1,0,0.08185373991727829,-0.9966443777084351,5.288988691454222e-10,0,-0.9966443777084351,-0.08185373991727829,7.900583796072169e-7,0,0.0015626716194674373,0.0007490515126846731,0.0027741827070713043,1]],8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]]],0,0,[],[],[]],[[[12,"Skin-2",2311663973,["Root_M","Root_M/Spine1_M","Root_M/Spine1_M/Chest_M","Root_M/Spine1_M/Chest_M/Neck_M","Root_M/Spine1_M/Chest_M/Neck_M/Head_M","Root_M/Spine1_M/Chest_M/Scapula_R","Root_M/Spine1_M/Chest_M/Scapula_R/Shoulder_R","Root_M/Spine1_M/Chest_M/Scapula_R/Shoulder_R/Elbow_R","Root_M/Spine1_M/Chest_M/Scapula_R/Shoulder_R/Elbow_R/Wrist_R","Root_M/Spine1_M/Chest_M/Scapula_L","Root_M/Spine1_M/Chest_M/Scapula_L/Shoulder_L","Root_M/Spine1_M/Chest_M/Scapula_L/Shoulder_L/Elbow_L","Root_M/Spine1_M/Chest_M/Scapula_L/Shoulder_L/Elbow_L/Wrist_L","Root_M/Hip_R","Root_M/Hip_R/Knee_R","Root_M/Hip_R/Knee_R/Ankle_R","Root_M/Hip_R/Knee_R/Ankle_R/Toes_R","Root_M/Hip_L","Root_M/Hip_L/Knee_L","Root_M/Hip_L/Knee_L/Ankle_L","Root_M/Hip_L/Knee_L/Ankle_L/Toes_L"],[[[7,-1.6073266766851061e-16,-5.002625820273957e-16,1,0,0.9995050430297852,-0.031458914279937744,1.4491539940461042e-16,0,0.031458914279937744,0.9995050430297852,5.050714527667544e-16,0,-0.019512146711349487,0.0004364966880530119,-3.2884277806782753e-18,1],[7,-1.6051606546202993e-16,-4.955657313953114e-16,1,0,0.9981581568717957,-0.06066583842039108,1.3015651204319428e-16,0,0.06066583842039108,0.9981581568717957,5.043908088540763e-16,0,-0.024823229759931564,0.0011626967461779714,-3.024364845781441e-18,1],[7,-1.6073587051184242e-16,-5.003653906513687e-16,1,0,0.9995249509811401,-0.03081941418349743,1.4523855570887774e-16,0,0.03081941418349743,0.9995249509811401,5.05081511283003e-16,0,-0.02732432447373867,0.0003465543850325048,-1.9691652799332707e-18,1],[7,5.751306066253416e-17,-4.843061753670192e-16,1,0,0.9392595887184143,0.34320753812789917,1.1219782537462701e-16,0,-0.34320753812789917,0.9392595887184143,4.746281357303692e-16,0,-0.02801189385354519,-0.010852459818124771,-9.365741732283693e-18,1],[7,-1.6081226229577292e-16,-5.053215392444312e-16,1,0,1,-2.0489094865183688e-8,1.6081224906088311e-16,0,2.0489094865183688e-8,1,5.053215392444312e-16,0,-0.03196112811565399,0.00012439562124200165,-9.574726432503377e-18,1],[7,-0.9999274015426636,-0.0000014861826684864354,-0.012051843106746674,0,-0.012051843106746674,0.00012334794155322015,0.9999273419380188,0,4.953271126595382e-10,1,-0.00012335690553300083,0,-0.0026569380424916744,0.00010892005229834467,-0.02848154492676258,1],[7,-0.13757513463497162,-0.002986916108056903,-0.9904868006706238,0,-0.9848853349685669,-0.10582999140024185,0.13711625337600708,0,-0.10523276776075363,0.9943797588348389,0.011617805808782578,0,0.027152078226208687,0.0031008601654320955,-0.009787609800696373,1],[7,-0.13418284058570862,0.03050908073782921,-0.9904868006706238,0,-0.9143990874290466,0.3814191222190857,0.13562361896038055,0,0.38192838430404663,0.9238986372947693,-0.023282427340745926,0,0.020675957202911377,-0.008082355372607708,-0.009775741025805473,1],[7,-0.1095951646566391,0.04025038704276085,-0.9931610226631165,0,-0.916633665561676,0.38233044743537903,0.11664529889822006,0,0.38441070914268494,0.9231485724449158,-0.005006704945117235,0,0.015505842864513397,-0.00802612118422985,-0.009472150355577469,1],[7,-0.9999274015426636,-0.000001486659016336489,-0.012051837518811226,0,0.0120518384501338,-0.00012334641360212117,-0.9999273419380188,0,-9.146007654567759e-16,-1,0.00012335537758190185,0,0.0026569380424916744,-0.00010892009595409036,0.02848154492676258,1],[7,-0.1382497102022171,-0.0029869170393794775,-0.9903929233551025,0,0.9847917556762695,0.10582999885082245,-0.13778701424598694,0,0.10522483289241791,-0.9943797588348389,-0.011689475737512112,0,-0.027123883366584778,-0.0030986019410192966,0.009807745926082134,1],[7,-0.13483723998069763,0.030672883614897728,-0.9903929233551025,0,0.9810152649879456,-0.13646891713142395,-0.13778701424598694,0,-0.1393841803073883,-0.9901694059371948,-0.011689475737512112,0,-0.02204393781721592,0.0023237529676407576,0.009807745926082134,1],[7,-0.11025131493806839,0.04041488096117973,-0.9930816888809204,0,0.9838196039199829,-0.13753312826156616,-0.11482014507055283,0,-0.14122207462787628,-0.9896723031997681,-0.024597741663455963,0,-0.016886811703443527,0.0022708119358867407,0.009415285661816597,1],[7,-0.010730288922786713,-0.0003671304730232805,-0.9999423623085022,0,-0.9993575811386108,-0.03419242799282074,0.01073656789958477,0,-0.034194398671388626,0.9994152188301086,-2.2132606511404695e-11,0,0.01896691881120205,0.0005232312832958996,-0.0027990643866360188,1],[7,-0.010681620799005032,-0.0010848328238353133,-0.9999423623085022,0,-0.9948249459266663,-0.10103510320186615,0.01073656789958477,0,-0.10104092955589294,0.9948822855949402,-2.213251457106047e-11,0,0.01038399152457714,0.0012213099980726838,-0.0027990643866360188,1],[7,-1.8117590760979851e-10,-0.0015915741678327322,-0.9999987483024597,0,-1,-7.552468872518148e-8,3.013794214190568e-10,0,-7.552507241825879e-8,0.9999987483024597,-0.0015915741678327322,0,0.002713743830099702,0.0009506093338131905,-0.0027716041076928377,1],[7,7.942823003759258e-7,6.541559827155652e-8,-1,0,-0.08185373991727829,0.9966443777084351,1.8111570576628822e-10,0,0.9966443777084351,0.08185373991727829,7.96971448835393e-7,0,-0.0015626671956852078,-0.0007490511634387076,-0.0027741852682083845,1],[7,-0.010730288922786713,-0.0003671304730232805,-0.9999423623085022,0,0.9993575811386108,0.03419242799282074,-0.01073656789958477,0,0.034194398671388626,-0.9994152188301086,2.2804104762017604e-15,0,-0.01896691881120205,-0.0005232313415035605,0.0027990643866360188,1],[7,-0.010681620799005032,-0.0010848328238353133,-0.9999423623085022,0,0.9948249459266663,0.10103511065244675,-0.01073656789958477,0,0.10104092955589294,-0.9948822855949402,2.2699371255671978e-15,0,-0.01038399152457714,-0.0012213099980726838,0.0027990643866360188,1],[7,-1.8150986269560576e-10,-0.0015915741678327322,-0.9999987483024597,0,1,7.69743095929698e-8,-3.0402055872791323e-10,0,7.697469328604711e-8,-0.9999987483024597,0.0015915741678327322,0,-0.002713743830099702,-0.0009506093920208514,0.0027716041076928377,1],[7,-7.873639447097958e-7,-6.519635320501038e-8,-1,0,0.08185373991727829,-0.9966443777084351,5.288988691454222e-10,0,-0.9966443777084351,-0.08185373991727829,7.900583796072169e-7,0,0.0015626716194674373,0.0007490515126846731,0.0027741827070713043,1]],8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]]],0,0,[],[],[]],[[[10,".bin",3629128062,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":149472,"length":17004,"count":4251,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":149472,"count":2076,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,5,6,7,8]]},"minPosition",8,[1,-0.01094001904129982,0.01523931510746479,-0.0032927049323916435],"maxPosition",8,[1,-0.002762042684480548,0.031005149707198143,0.00286426255479455]]],-1],0,0,[],[],[]],[[[12,"Skin-6",2311663973,["Root_M","Root_M/Spine1_M","Root_M/Spine1_M/Chest_M","Root_M/Spine1_M/Chest_M/Neck_M","Root_M/Spine1_M/Chest_M/Neck_M/Head_M","Root_M/Spine1_M/Chest_M/Scapula_R","Root_M/Spine1_M/Chest_M/Scapula_R/Shoulder_R","Root_M/Spine1_M/Chest_M/Scapula_R/Shoulder_R/Elbow_R","Root_M/Spine1_M/Chest_M/Scapula_R/Shoulder_R/Elbow_R/Wrist_R","Root_M/Spine1_M/Chest_M/Scapula_L","Root_M/Spine1_M/Chest_M/Scapula_L/Shoulder_L","Root_M/Spine1_M/Chest_M/Scapula_L/Shoulder_L/Elbow_L","Root_M/Spine1_M/Chest_M/Scapula_L/Shoulder_L/Elbow_L/Wrist_L","Root_M/Hip_R","Root_M/Hip_R/Knee_R","Root_M/Hip_R/Knee_R/Ankle_R","Root_M/Hip_R/Knee_R/Ankle_R/Toes_R","Root_M/Hip_L","Root_M/Hip_L/Knee_L","Root_M/Hip_L/Knee_L/Ankle_L","Root_M/Hip_L/Knee_L/Ankle_L/Toes_L"],[[[7,-1.6073266766851061e-16,-5.002625820273957e-16,1,0,0.9995050430297852,-0.031458914279937744,1.4491539940461042e-16,0,0.031458914279937744,0.9995050430297852,5.050714527667544e-16,0,-0.019512146711349487,0.0004364966880530119,-3.2884277806782753e-18,1],[7,-1.6051606546202993e-16,-4.955657313953114e-16,1,0,0.9981581568717957,-0.06066583842039108,1.3015651204319428e-16,0,0.06066583842039108,0.9981581568717957,5.043908088540763e-16,0,-0.024823229759931564,0.0011626967461779714,-3.024364845781441e-18,1],[7,-1.6073587051184242e-16,-5.003653906513687e-16,1,0,0.9995249509811401,-0.03081941418349743,1.4523855570887774e-16,0,0.03081941418349743,0.9995249509811401,5.05081511283003e-16,0,-0.02732432447373867,0.0003465543850325048,-1.9691652799332707e-18,1],[7,5.751306066253416e-17,-4.843061753670192e-16,1,0,0.9392595887184143,0.34320753812789917,1.1219782537462701e-16,0,-0.34320753812789917,0.9392595887184143,4.746281357303692e-16,0,-0.02801189385354519,-0.010852459818124771,-9.365741732283693e-18,1],[7,-1.6081226229577292e-16,-5.053215392444312e-16,1,0,1,-2.0489094865183688e-8,1.6081224906088311e-16,0,2.0489094865183688e-8,1,5.053215392444312e-16,0,-0.03196112811565399,0.00012439562124200165,-9.574726432503377e-18,1],[7,-0.9999274015426636,-0.0000014861826684864354,-0.012051843106746674,0,-0.012051843106746674,0.00012334794155322015,0.9999273419380188,0,4.953271126595382e-10,1,-0.00012335690553300083,0,-0.0026569380424916744,0.00010892005229834467,-0.02848154492676258,1],[7,-0.13757513463497162,-0.002986916108056903,-0.9904868006706238,0,-0.9848853349685669,-0.10582999140024185,0.13711625337600708,0,-0.10523276776075363,0.9943797588348389,0.011617805808782578,0,0.027152078226208687,0.0031008601654320955,-0.009787609800696373,1],[7,-0.13418284058570862,0.03050908073782921,-0.9904868006706238,0,-0.9143990874290466,0.3814191222190857,0.13562361896038055,0,0.38192838430404663,0.9238986372947693,-0.023282427340745926,0,0.020675957202911377,-0.008082355372607708,-0.009775741025805473,1],[7,-0.1095951646566391,0.04025038704276085,-0.9931610226631165,0,-0.916633665561676,0.38233044743537903,0.11664529889822006,0,0.38441070914268494,0.9231485724449158,-0.005006704945117235,0,0.015505842864513397,-0.00802612118422985,-0.009472150355577469,1],[7,-0.9999274015426636,-0.000001486659016336489,-0.012051837518811226,0,0.0120518384501338,-0.00012334641360212117,-0.9999273419380188,0,-9.146007654567759e-16,-1,0.00012335537758190185,0,0.0026569380424916744,-0.00010892009595409036,0.02848154492676258,1],[7,-0.1382497102022171,-0.0029869170393794775,-0.9903929233551025,0,0.9847917556762695,0.10582999885082245,-0.13778701424598694,0,0.10522483289241791,-0.9943797588348389,-0.011689475737512112,0,-0.027123883366584778,-0.0030986019410192966,0.009807745926082134,1],[7,-0.13483723998069763,0.030672883614897728,-0.9903929233551025,0,0.9810152649879456,-0.13646891713142395,-0.13778701424598694,0,-0.1393841803073883,-0.9901694059371948,-0.011689475737512112,0,-0.02204393781721592,0.0023237529676407576,0.009807745926082134,1],[7,-0.11025131493806839,0.04041488096117973,-0.9930816888809204,0,0.9838196039199829,-0.13753312826156616,-0.11482014507055283,0,-0.14122207462787628,-0.9896723031997681,-0.024597741663455963,0,-0.016886811703443527,0.0022708119358867407,0.009415285661816597,1],[7,-0.010730288922786713,-0.0003671304730232805,-0.9999423623085022,0,-0.9993575811386108,-0.03419242799282074,0.01073656789958477,0,-0.034194398671388626,0.9994152188301086,-2.2132606511404695e-11,0,0.01896691881120205,0.0005232312832958996,-0.0027990643866360188,1],[7,-0.010681620799005032,-0.0010848328238353133,-0.9999423623085022,0,-0.9948249459266663,-0.10103510320186615,0.01073656789958477,0,-0.10104092955589294,0.9948822855949402,-2.213251457106047e-11,0,0.01038399152457714,0.0012213099980726838,-0.0027990643866360188,1],[7,-1.8117590760979851e-10,-0.0015915741678327322,-0.9999987483024597,0,-1,-7.552468872518148e-8,3.013794214190568e-10,0,-7.552507241825879e-8,0.9999987483024597,-0.0015915741678327322,0,0.002713743830099702,0.0009506093338131905,-0.0027716041076928377,1],[7,7.942823003759258e-7,6.541559827155652e-8,-1,0,-0.08185373991727829,0.9966443777084351,1.8111570576628822e-10,0,0.9966443777084351,0.08185373991727829,7.96971448835393e-7,0,-0.0015626671956852078,-0.0007490511634387076,-0.0027741852682083845,1],[7,-0.010730288922786713,-0.0003671304730232805,-0.9999423623085022,0,0.9993575811386108,0.03419242799282074,-0.01073656789958477,0,0.034194398671388626,-0.9994152188301086,2.2804104762017604e-15,0,-0.01896691881120205,-0.0005232313415035605,0.0027990643866360188,1],[7,-0.010681620799005032,-0.0010848328238353133,-0.9999423623085022,0,0.9948249459266663,0.10103511065244675,-0.01073656789958477,0,0.10104092955589294,-0.9948822855949402,2.2699371255671978e-15,0,-0.01038399152457714,-0.0012213099980726838,0.0027990643866360188,1],[7,-1.8150986269560576e-10,-0.0015915741678327322,-0.9999987483024597,0,1,7.69743095929698e-8,-3.0402055872791323e-10,0,7.697469328604711e-8,-0.9999987483024597,0.0015915741678327322,0,-0.002713743830099702,-0.0009506093920208514,0.0027716041076928377,1],[7,-7.873639447097958e-7,-6.519635320501038e-8,-1,0,0.08185373991727829,-0.9966443777084351,5.288988691454222e-10,0,-0.9966443777084351,-0.08185373991727829,7.900583796072169e-7,0,0.0015626716194674373,0.0007490515126846731,0.0027741827070713043,1]],8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]]],0,0,[],[],[]],[[[12,"Skin-3",2311663973,["Root_M","Root_M/Spine1_M","Root_M/Spine1_M/Chest_M","Root_M/Spine1_M/Chest_M/Neck_M","Root_M/Spine1_M/Chest_M/Neck_M/Head_M","Root_M/Spine1_M/Chest_M/Scapula_R","Root_M/Spine1_M/Chest_M/Scapula_R/Shoulder_R","Root_M/Spine1_M/Chest_M/Scapula_R/Shoulder_R/Elbow_R","Root_M/Spine1_M/Chest_M/Scapula_R/Shoulder_R/Elbow_R/Wrist_R","Root_M/Spine1_M/Chest_M/Scapula_L","Root_M/Spine1_M/Chest_M/Scapula_L/Shoulder_L","Root_M/Spine1_M/Chest_M/Scapula_L/Shoulder_L/Elbow_L","Root_M/Spine1_M/Chest_M/Scapula_L/Shoulder_L/Elbow_L/Wrist_L","Root_M/Hip_R","Root_M/Hip_R/Knee_R","Root_M/Hip_R/Knee_R/Ankle_R","Root_M/Hip_R/Knee_R/Ankle_R/Toes_R","Root_M/Hip_L","Root_M/Hip_L/Knee_L","Root_M/Hip_L/Knee_L/Ankle_L","Root_M/Hip_L/Knee_L/Ankle_L/Toes_L"],[[[7,-1.6073266766851061e-16,-5.002625820273957e-16,1,0,0.9995050430297852,-0.031458914279937744,1.4491539940461042e-16,0,0.031458914279937744,0.9995050430297852,5.050714527667544e-16,0,-0.019512146711349487,0.0004364966880530119,-3.2884277806782753e-18,1],[7,-1.6051606546202993e-16,-4.955657313953114e-16,1,0,0.9981581568717957,-0.06066583842039108,1.3015651204319428e-16,0,0.06066583842039108,0.9981581568717957,5.043908088540763e-16,0,-0.024823229759931564,0.0011626967461779714,-3.024364845781441e-18,1],[7,-1.6073587051184242e-16,-5.003653906513687e-16,1,0,0.9995249509811401,-0.03081941418349743,1.4523855570887774e-16,0,0.03081941418349743,0.9995249509811401,5.05081511283003e-16,0,-0.02732432447373867,0.0003465543850325048,-1.9691652799332707e-18,1],[7,5.751306066253416e-17,-4.843061753670192e-16,1,0,0.9392595887184143,0.34320753812789917,1.1219782537462701e-16,0,-0.34320753812789917,0.9392595887184143,4.746281357303692e-16,0,-0.02801189385354519,-0.010852459818124771,-9.365741732283693e-18,1],[7,-1.6081226229577292e-16,-5.053215392444312e-16,1,0,1,-2.0489094865183688e-8,1.6081224906088311e-16,0,2.0489094865183688e-8,1,5.053215392444312e-16,0,-0.03196112811565399,0.00012439562124200165,-9.574726432503377e-18,1],[7,-0.9999274015426636,-0.0000014861826684864354,-0.012051843106746674,0,-0.012051843106746674,0.00012334794155322015,0.9999273419380188,0,4.953271126595382e-10,1,-0.00012335690553300083,0,-0.0026569380424916744,0.00010892005229834467,-0.02848154492676258,1],[7,-0.13757513463497162,-0.002986916108056903,-0.9904868006706238,0,-0.9848853349685669,-0.10582999140024185,0.13711625337600708,0,-0.10523276776075363,0.9943797588348389,0.011617805808782578,0,0.027152078226208687,0.0031008601654320955,-0.009787609800696373,1],[7,-0.13418284058570862,0.03050908073782921,-0.9904868006706238,0,-0.9143990874290466,0.3814191222190857,0.13562361896038055,0,0.38192838430404663,0.9238986372947693,-0.023282427340745926,0,0.020675957202911377,-0.008082355372607708,-0.009775741025805473,1],[7,-0.1095951646566391,0.04025038704276085,-0.9931610226631165,0,-0.916633665561676,0.38233044743537903,0.11664529889822006,0,0.38441070914268494,0.9231485724449158,-0.005006704945117235,0,0.015505842864513397,-0.00802612118422985,-0.009472150355577469,1],[7,-0.9999274015426636,-0.000001486659016336489,-0.012051837518811226,0,0.0120518384501338,-0.00012334641360212117,-0.9999273419380188,0,-9.146007654567759e-16,-1,0.00012335537758190185,0,0.0026569380424916744,-0.00010892009595409036,0.02848154492676258,1],[7,-0.1382497102022171,-0.0029869170393794775,-0.9903929233551025,0,0.9847917556762695,0.10582999885082245,-0.13778701424598694,0,0.10522483289241791,-0.9943797588348389,-0.011689475737512112,0,-0.027123883366584778,-0.0030986019410192966,0.009807745926082134,1],[7,-0.13483723998069763,0.030672883614897728,-0.9903929233551025,0,0.9810152649879456,-0.13646891713142395,-0.13778701424598694,0,-0.1393841803073883,-0.9901694059371948,-0.011689475737512112,0,-0.02204393781721592,0.0023237529676407576,0.009807745926082134,1],[7,-0.11025131493806839,0.04041488096117973,-0.9930816888809204,0,0.9838196039199829,-0.13753312826156616,-0.11482014507055283,0,-0.14122207462787628,-0.9896723031997681,-0.024597741663455963,0,-0.016886811703443527,0.0022708119358867407,0.009415285661816597,1],[7,-0.010730288922786713,-0.0003671304730232805,-0.9999423623085022,0,-0.9993575811386108,-0.03419242799282074,0.01073656789958477,0,-0.034194398671388626,0.9994152188301086,-2.2132606511404695e-11,0,0.01896691881120205,0.0005232312832958996,-0.0027990643866360188,1],[7,-0.010681620799005032,-0.0010848328238353133,-0.9999423623085022,0,-0.9948249459266663,-0.10103510320186615,0.01073656789958477,0,-0.10104092955589294,0.9948822855949402,-2.213251457106047e-11,0,0.01038399152457714,0.0012213099980726838,-0.0027990643866360188,1],[7,-1.8117590760979851e-10,-0.0015915741678327322,-0.9999987483024597,0,-1,-7.552468872518148e-8,3.013794214190568e-10,0,-7.552507241825879e-8,0.9999987483024597,-0.0015915741678327322,0,0.002713743830099702,0.0009506093338131905,-0.0027716041076928377,1],[7,7.942823003759258e-7,6.541559827155652e-8,-1,0,-0.08185373991727829,0.9966443777084351,1.8111570576628822e-10,0,0.9966443777084351,0.08185373991727829,7.96971448835393e-7,0,-0.0015626671956852078,-0.0007490511634387076,-0.0027741852682083845,1],[7,-0.010730288922786713,-0.0003671304730232805,-0.9999423623085022,0,0.9993575811386108,0.03419242799282074,-0.01073656789958477,0,0.034194398671388626,-0.9994152188301086,2.2804104762017604e-15,0,-0.01896691881120205,-0.0005232313415035605,0.0027990643866360188,1],[7,-0.010681620799005032,-0.0010848328238353133,-0.9999423623085022,0,0.9948249459266663,0.10103511065244675,-0.01073656789958477,0,0.10104092955589294,-0.9948822855949402,2.2699371255671978e-15,0,-0.01038399152457714,-0.0012213099980726838,0.0027990643866360188,1],[7,-1.8150986269560576e-10,-0.0015915741678327322,-0.9999987483024597,0,1,7.69743095929698e-8,-3.0402055872791323e-10,0,7.697469328604711e-8,-0.9999987483024597,0.0015915741678327322,0,-0.002713743830099702,-0.0009506093920208514,0.0027716041076928377,1],[7,-7.873639447097958e-7,-6.519635320501038e-8,-1,0,0.08185373991727829,-0.9966443777084351,5.288988691454222e-10,0,-0.9966443777084351,-0.08185373991727829,7.900583796072169e-7,0,0.0015626716194674373,0.0007490515126846731,0.0027741827070713043,1]],8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]]],0,0,[],[],[]],[[[12,"Skin-1",3957892668,["Root_M/Spine1_M/Chest_M"],[[[7,-1.6073587051184242e-16,-5.003653906513687e-16,1,0,0.9995249509811401,-0.03081941418349743,1.4523855570887774e-16,0,0.03081941418349743,0.9995249509811401,5.05081511283003e-16,0,-0.02732432447373867,0.0003465543850325048,-1.9691652799332707e-18,1]],8]]],0,0,[],[],[]],[[[34,"sfx_merge(1)",".mp3",0.821333],-1],0,0,[],[],[]],[[[12,"Skin-0",4199602079,["Comp/root","Comp/root/spine0","Comp/root/spine0/spine1","Comp/root/spine0/spine1/spine2","Comp/root/spine0/spine1/spine2/spine3","Comp/root/spine0/spine1/spine2/spine3/spine4","Comp/root/spine0/spine1/spine2/spine3/spine4/spine5","Comp/root/spine0/spine1/spine2/spine3/spine4/spine5/left arm0","Comp/root/spine0/spine1/spine2/spine3/spine4/spine5/left arm0/left arm1","Comp/root/spine0/spine1/spine2/spine3/spine4/spine5/left arm0/left arm1/left hand","Comp/root/spine0/spine1/spine2/spine3/spine4/spine5/left arm0/left arm1/left hand/left finger3","Comp/root/spine0/spine1/spine2/spine3/spine4/spine5/left arm0/left arm1/left hand/left finger3/left finger4","Comp/root/spine0/spine1/spine2/spine3/spine4/spine5/left arm0/left arm1/left hand/left finger3/left finger4/left finger5","Comp/root/spine0/spine1/spine2/spine3/spine4/spine5/left arm0/left arm1/left hand/left finger3/left finger4/left finger5/left finger5_end","Comp/root/spine0/spine1/spine2/spine3/spine4/spine5/left arm0/left arm1/left hand/left finger3/left finger4/left finger5/left finger5_end/left finger5_end_end","Comp/root/spine0/spine1/spine2/spine3/spine4/spine5/left arm0/left arm1/left hand/left finger3/left finger4/left finger5/left finger5_end/left finger5_end_end/left finger5_end_end_end","Comp/root/spine0/spine1/spine2/spine3/spine4/spine5/right arm0","Comp/root/spine0/spine1/spine2/spine3/spine4/spine5/right arm0/right arm1","Comp/root/spine0/spine1/spine2/spine3/spine4/spine5/right arm0/right arm1/right hand","Comp/root/spine0/spine1/spine2/spine3/spine4/spine5/right arm0/right arm1/right hand/right finger3","Comp/root/spine0/spine1/spine2/spine3/spine4/spine5/right arm0/right arm1/right hand/right finger3/right finger4","Comp/root/spine0/spine1/spine2/spine3/spine4/spine5/right arm0/right arm1/right hand/right finger3/right finger4/right finger5","Comp/root/spine0/spine1/spine2/spine3/spine4/spine5/right arm0/right arm1/right hand/right finger3/right finger4/right finger5/right finger5_end","Comp/root/spine0/spine1/spine2/spine3/spine4/spine5/right arm0/right arm1/right hand/right finger3/right finger4/right finger5/right finger5_end/right finger5_end_end","Comp/root/spine0/spine1/spine2/spine3/spine4/spine5/right arm0/right arm1/right hand/right finger3/right finger4/right finger5/right finger5_end/right finger5_end_end/right finger5_end_end_end","Comp/root/spine0/spine1/spine2/spine3/spine4/spine5/neck0","Comp/root/spine0/spine1/spine2/spine3/spine4/spine5/neck0/neck1","Comp/root/spine0/spine1/spine2/spine3/spine4/spine5/neck0/neck1/neck2","Comp/root/spine0/spine1/spine2/spine3/spine4/spine5/neck0/neck1/neck2/neck3","Comp/root/spine0/spine1/spine2/spine3/spine4/spine5/neck0/neck1/neck2/neck3/head","Comp/root/spine0/spine1/spine2/spine3/spine4/spine5/neck0/neck1/neck2/neck3/head/eye0","Comp/root/spine0/spine1/spine2/spine3/spine4/spine5/neck0/neck1/neck2/neck3/head/eye0/right eye","Comp/root/spine0/spine1/spine2/spine3/spine4/spine5/neck0/neck1/neck2/neck3/head/eye0/right eye/right eye_end","Comp/root/spine0/spine1/spine2/spine3/spine4/spine5/neck0/neck1/neck2/neck3/head/eye0/right eye/right eye_end/right eye_end_end","Comp/root/spine0/spine1/spine2/spine3/spine4/spine5/neck0/neck1/neck2/neck3/head/eye0/right eye/right eye_end/right eye_end_end/right eye_end_end_end","Comp/root/spine0/spine1/spine2/spine3/spine4/spine5/neck0/neck1/neck2/neck3/head/eye0/left eye","Comp/root/spine0/spine1/spine2/spine3/spine4/spine5/neck0/neck1/neck2/neck3/head/eye0/left eye/left eye_end","Comp/root/spine0/spine1/spine2/spine3/spine4/spine5/neck0/neck1/neck2/neck3/head/eye0/left eye/left eye_end/left eye_end_end","Comp/root/spine0/spine1/spine2/spine3/spine4/spine5/neck0/neck1/neck2/neck3/head/eye0/left eye/left eye_end/left eye_end_end/left eye_end_end_end","Comp/root/spine0/spine1/spine2/spine3/spine4/spine5/neck0/neck1/neck2/neck3/head/jaw0","Comp/root/spine0/spine1/spine2/spine3/spine4/spine5/neck0/neck1/neck2/neck3/head/jaw0/jaw1","Comp/root/spine0/spine1/spine2/spine3/spine4/spine5/neck0/neck1/neck2/neck3/head/jaw0/jaw1/jaw1_end","Comp/root/spine0/spine1/spine2/spine3/spine4/spine5/neck0/neck1/neck2/neck3/head/jaw0/jaw1/jaw1_end/jaw1_end_end","Comp/root/spine0/spine1/spine2/spine3/spine4/spine5/neck0/neck1/neck2/neck3/head/jaw0/jaw1/jaw1_end/jaw1_end_end/jaw1_end_end_end","Comp/root/spine0/spine1/spine2/spine3/spine4/spine5/neck0/neck1/neck2/neck3/head/jaw0/tongue0","Comp/root/spine0/spine1/spine2/spine3/spine4/spine5/neck0/neck1/neck2/neck3/head/jaw0/tongue0/tongue1","Comp/root/spine0/spine1/spine2/spine3/spine4/spine5/neck0/neck1/neck2/neck3/head/jaw0/tongue0/tongue1/tongue2","Comp/root/spine0/spine1/spine2/spine3/spine4/spine5/neck0/neck1/neck2/neck3/head/jaw0/tongue0/tongue1/tongue2/tongue2_end","Comp/root/spine0/spine1/spine2/spine3/spine4/spine5/neck0/neck1/neck2/neck3/head/jaw0/tongue0/tongue1/tongue2/tongue2_end/tongue2_end_end","Comp/root/spine0/spine1/spine2/spine3/spine4/spine5/neck0/neck1/neck2/neck3/head/jaw0/tongue0/tongue1/tongue2/tongue2_end/tongue2_end_end/tongue2_end_end_end","Comp/root/spine0/spine1/spine2/Right Torso","Comp/root/spine0/spine1/spine2/Right Torso/Right Torso_end","Comp/root/spine0/spine1/spine2/Right Torso/Right Torso_end/Right Torso_end_end","Comp/root/spine0/spine1/spine2/Right Torso/Right Torso_end/Right Torso_end_end/Right Torso_end_end_end","Comp/root/spine0/spine1/spine2/Left Torso","Comp/root/spine0/spine1/spine2/Left Torso/Left Torso_end","Comp/root/spine0/spine1/spine2/Left Torso/Left Torso_end/Left Torso_end_end","Comp/root/spine0/spine1/spine2/Left Torso/Left Torso_end/Left Torso_end_end/Left Torso_end_end_end","Comp/root/pelvis","Comp/root/pelvis/tail0","Comp/root/pelvis/tail0/tail1","Comp/root/pelvis/tail0/tail1/tail2","Comp/root/pelvis/tail0/tail1/tail2/tail3","Comp/root/pelvis/tail0/tail1/tail2/tail3/tail4","Comp/root/pelvis/tail0/tail1/tail2/tail3/tail4/tail5","Comp/root/pelvis/tail0/tail1/tail2/tail3/tail4/tail5/tail6","Comp/root/pelvis/tail0/tail1/tail2/tail3/tail4/tail5/tail6/tail7","Comp/root/pelvis/tail0/tail1/tail2/tail3/tail4/tail5/tail6/tail7/tail8","Comp/root/pelvis/tail0/tail1/tail2/tail3/tail4/tail5/tail6/tail7/tail8/tail8_end","Comp/root/pelvis/tail0/tail1/tail2/tail3/tail4/tail5/tail6/tail7/tail8/tail8_end/tail8_end_end","Comp/root/pelvis/tail0/tail1/tail2/tail3/tail4/tail5/tail6/tail7/tail8/tail8_end/tail8_end_end/tail8_end_end_end","Comp/root/pelvis/right leg0","Comp/root/pelvis/right leg0/right leg1","Comp/root/pelvis/right leg0/right leg1/right foot0","Comp/root/pelvis/right leg0/right leg1/right foot0/right foot1","Comp/root/pelvis/right leg0/right leg1/right foot0/right foot1/right foot2","Comp/root/pelvis/right leg0/right leg1/right foot0/right foot1/right foot2/right toe0","Comp/root/pelvis/right leg0/right leg1/right foot0/right foot1/right foot2/right toe0/right toe1","Comp/root/pelvis/right leg0/right leg1/right foot0/right foot1/right foot2/right toe0/right toe1/right toe2","Comp/root/pelvis/right leg0/right leg1/right foot0/right foot1/right foot2/right toe0/right toe1/right toe2/right toe2_end","Comp/root/pelvis/right leg0/right leg1/right foot0/right foot1/right foot2/right toe0/right toe1/right toe2/right toe2_end/right toe2_end_end","Comp/root/pelvis/right leg0/right leg1/right foot0/right foot1/right foot2/right toe0/right toe1/right toe2/right toe2_end/right toe2_end_end/right toe2_end_end_end","Comp/root/pelvis/left leg0","Comp/root/pelvis/left leg0/left leg1","Comp/root/pelvis/left leg0/left leg1/left foot0","Comp/root/pelvis/left leg0/left leg1/left foot0/left foot1","Comp/root/pelvis/left leg0/left leg1/left foot0/left foot1/left foot2","Comp/root/pelvis/left leg0/left leg1/left foot0/left foot1/left foot2/left toe0","Comp/root/pelvis/left leg0/left leg1/left foot0/left foot1/left foot2/left toe0/left toe1","Comp/root/pelvis/left leg0/left leg1/left foot0/left foot1/left foot2/left toe0/left toe1/left toe2","Comp/root/pelvis/left leg0/left leg1/left foot0/left foot1/left foot2/left toe0/left toe1/left toe2/left toe2_end","Comp/root/pelvis/left leg0/left leg1/left foot0/left foot1/left foot2/left toe0/left toe1/left toe2/left toe2_end/left toe2_end_end","Comp/root/pelvis/left leg0/left leg1/left foot0/left foot1/left foot2/left toe0/left toe1/left toe2/left toe2_end/left toe2_end_end/left toe2_end_end_end"],[[[7,10,0.0000012909898714497103,-5.6430968025603795e-14,0,-5.6430968025603795e-14,-3.465204333327407e-14,-9.999999046325684,0,-0.0000012909895303891972,10.00000286102295,-3.4652023004483334e-14,0,-0.000011803059351223055,-0.006815664935857058,0.12852759659290314,1],[7,10,0.0000012909025599583401,-5.642714960107757e-14,0,-5.642714960107757e-14,-3.465092524978369e-14,-9.999999046325684,0,-0.0000012909021052109892,10.00000286102295,-3.465090492099296e-14,0,-0.000011803809684352018,-0.010724741034209728,0.12945276498794556,1],[7,10,0.0000012908643611808657,-5.6425482640237376e-14,0,-5.6425482640237376e-14,-3.4650437358806074e-14,-9.999999046325684,0,-0.0000012908640201203525,10.00000286102295,-3.465041703001534e-14,0,-0.000011804465430031996,-0.018872950226068497,0.13191109895706177,1],[7,10,0.0000012904991990581038,-5.640951437511574e-14,0,-5.640951437511574e-14,-3.420169963214148e-14,-9.999999046325684,0,-0.000001290498744310753,10.00000286102295,-3.4201679303350746e-14,0,-0.000011805024769273587,-0.025435438379645348,0.1339183747768402,1],[7,10,0.0000012904000641356106,-5.6405184342689374e-14,0,-5.6405184342689374e-14,-3.4200439247115966e-14,-9.999999046325684,0,-0.0000012903997230750974,10.00000286102295,-3.420041891832523e-14,0,-0.000011805733265646268,-0.033023953437805176,0.1358249932527542,1],[7,10,0.0000012892056702185073,-5.635296984368883e-14,0,-5.635297323182062e-14,-3.418522653538328e-14,-9.999999046325684,0,-0.0000012892052154711564,10.00000286102295,-3.4185206206592544e-14,0,-0.000011806461770902388,-0.04120945930480957,0.13689500093460083,1],[7,10,0.000001290350041927013,-5.640299222142188e-14,0,-5.640299222142188e-14,-3.419979889020784e-14,-9.999999046325684,0,-0.0000012903495871796622,10.00000286102295,-3.419977856141711e-14,0,-0.000011806704605987761,-0.04531390592455864,0.13715922832489014,1],[7,10,0.0000012903499282401754,-5.640299222142188e-14,0,-5.640299222142188e-14,-3.419979889020784e-14,-9.999999046325684,0,-0.0000012903495871796622,10.00000286102295,-3.419977856141711e-14,0,-0.013963191770017147,-0.06210416182875633,0.12106608599424362,1],[7,10,0.0000014605494698116672,-6.38426350630869e-14,0,-6.384264183935048e-14,-7.752015887118203e-15,-9.999999046325684,0,-0.0000014605489013774786,10.000003814697266,-7.752003181623994e-15,0,-0.015018383972346783,-0.054361749440431595,0.09924375265836716,1],[7,10,-0.0000022543877093994524,0.0000021058569927845383,0,1.6541741663499837e-13,-6.826233863830566,-7.307705402374268,0,0.0000030849464565108065,7.307704448699951,-6.826234340667725,0,-0.01511258352547884,0.009443355724215508,0.11266597360372543,1],[7,10,-0.0000034854972454922972,0.000003255853926020791,0,2.4480021959191745e-13,-6.826233863830566,-7.307706356048584,0,0.000004769620318256784,7.307705879211426,-6.826234340667725,0,-0.015112591907382011,0.00021619422477670014,0.1083710789680481,1],[7,7.836563753471637e-8,-10.000000953674316,-0.0000028396016205078922,0,-6.826417446136475,0.000002021552063524723,-7.307534694671631,0,7.307533264160156,0.000001995695811274345,-6.826418399810791,0,-0.00198533246293664,0.015163128264248371,0.10521519929170609,1],[7,10,-2.765009128324891e-7,2.5828398975136224e-7,0,1.6814012272878438e-14,-6.826240539550781,-7.307701110839844,0,3.783692932302074e-7,7.3077006340026855,-6.8262410163879395,0,-0.01529723685234785,-0.00240886933170259,0.09958764165639877,1],[7,10,0.000002173492475776584,-0.000039942398871062323,0,-0.000027606796720647253,-6.851036548614502,-7.284459590911865,0,-0.00002894794124586042,7.284459590911865,-6.85103702545166,0,-0.015296838246285915,-0.007715178653597832,0.09961447864770889,1],[7,10,-0.000012475985386117827,0.000011653979527181946,0,1.27512984979955e-12,-6.82622766494751,-7.307713985443115,0,0.00001707235787762329,7.307713508605957,-6.826228618621826,0,-0.01529737189412117,-0.013698640279471874,0.09958755970001221,1],[7,10,-0.000002525192485336447,0.000002358820438530529,0,2.5809907054467895e-13,-6.826235771179199,-7.307705879211426,0,0.000003455520982242888,7.307705402374268,-6.826236724853516,0,-0.01529726479202509,-0.019343368709087372,0.0995875895023346,1],[7,0.0000020663208033511182,-10.000000953674316,-0.0000016621313534415094,0,-0.0000015099585652933456,0.0000016621310123809963,-9.999999046325684,0,10.00000286102295,0.0000020663203486037673,-0.0000015099576557986438,0,-0.062104154378175735,-0.013963179662823677,0.1210661381483078,1],[7,0.0000020663210307247937,-10.000000953674316,-0.0000016621313534415094,0,-0.0000015099594747880474,0.0000016621310123809963,-9.999999046325684,0,10.00000286102295,0.0000020663203486037673,-0.0000015099585652933456,0,-0.0543617345392704,-0.015018359757959843,0.09924376755952835,1],[7,3.7533254726440646e-7,-10.000000953674316,-0.0000026251645977026783,0,-6.826413154602051,0.0000016621315808151849,-7.307539463043213,0,7.307539939880371,0.0000020663210307247937,-6.826412677764893,0,0.00944604817777872,-0.015112524852156639,0.11266584694385529,1],[7,3.7534704233621596e-7,-10.000001907348633,-0.0000026251627787132747,0,-6.826371669769287,0.0000016621316945020226,-7.307577133178711,0,7.307577133178711,0.0000020663210307247937,-6.826371669769287,0,0.0002181456220569089,-0.015112513676285744,0.10837115347385406,1],[7,3.753383737148397e-7,-10.000001907348633,-0.000002625163915581652,0,-6.826395511627197,0.0000016621318081888603,-7.307554721832275,0,7.307555675506592,0.0000020663208033511182,-6.826395511627197,0,-0.001985735259950161,-0.015163118951022625,0.10521523654460907,1],[7,3.753384021365491e-7,-10.000000953674316,-0.000002625163915581652,0,-6.826396465301514,0.0000016621315808151849,-7.307555198669434,0,7.307555198669434,0.0000020663208033511182,-6.826396465301514,0,-0.0024068509228527546,-0.015297201462090015,0.09958774596452713,1],[7,8.481374607072212e-7,-10.000000953674316,-0.000014581481991626788,0,-6.826396465301514,0.000010076522812596522,-7.307555198669434,0,7.307555198669434,0.00001057367535395315,-6.826396465301514,0,-0.0024068565107882023,-0.020942145958542824,0.09958772361278534,1],[7,0.000005801707629871089,-10.000000953674316,0.000015470250218641013,0,-6.826396465301514,-0.000015265441106748767,-7.307555198669434,0,7.307555198669434,-0.000006320974080153974,-6.826396465301514,0,-0.002406846499070525,-0.026586687192320824,0.0995878130197525,1],[7,4.4168547219669563e-7,-10.000000953674316,-0.0000026420898393553216,0,-6.826396465301514,0.0000016292092368530575,-7.307555198669434,0,7.307555198669434,0.0000021263588223519037,-6.826396465301514,0,-0.0024068609345704317,-0.03223169967532158,0.09958775341510773,1],[7,10,0.0000012903988135803957,-5.640512674444896e-14,0,-5.640512674444896e-14,-3.420042230645702e-14,-9.999999046325684,0,-0.0000012903984725198825,10.00000286102295,-3.4200401977666287e-14,0,-0.000011804258974734694,-0.06056998670101166,0.14311140775680542,1],[7,10,0.000001290509771934012,-5.6409978549170833e-14,0,-5.6409978549170833e-14,-3.420183515741304e-14,-9.999999046325684,0,-0.0000012905094308734988,10.00000286102295,-3.4201814828622307e-14,0,-0.000011807338523794897,-0.0781131312251091,0.1592836230993271,1],[7,10,0.0000012906543815915938,-5.641629741495735e-14,0,-5.641630080308914e-14,-3.4203678301106266e-14,-9.999999046325684,0,-0.0000012906540405310807,10.00000286102295,-3.420365797231553e-14,0,-0.000011810538126155734,-0.09514087438583374,0.1761401742696762,1],[7,10,0.0000012905599078294472,-5.641216728230654e-14,0,-5.641216728230654e-14,-3.4202475514321165e-14,-9.999999046325684,0,-0.000001290559566768934,10.00000286102295,-3.420245518553043e-14,0,-0.000011812492630269844,-0.10280857235193253,0.18766041100025177,1],[7,10,0.0000012904855566375772,-5.640891806392087e-14,0,-5.640891806392087e-14,-3.420152683742024e-14,-9.999999046325684,0,-0.0000012904851018902264,10.00000286102295,-3.4201506508629506e-14,0,-0.000011814722711278591,-0.1162201389670372,0.20055772364139557,1],[7,10,0.000001290601630898891,-5.641399348534082e-14,0,-5.641399348534082e-14,-3.420300745101204e-14,-9.999999046325684,0,-0.0000012906012898383779,10.00000286102295,-3.4202987122221307e-14,0,-0.000011815094694611616,-0.1252829134464264,0.19889234006404877,1],[7,0.000002066590013782843,-10.000000953674316,-0.0000016377121028199326,0,-0.0000015099585652933456,0.0000016377117617594195,-9.999999046325684,0,10.00000286102295,0.0000020665893316618167,-0.0000015099576557986438,0,-0.13337096571922302,-0.00782849546521902,0.19808202981948853,1],[7,0.000010570007361820899,-10.000000953674316,0.00003217308403691277,0,-0.0000015099324173206696,-0.00003217308403691277,-9.999999046325684,0,10.00000286102295,0.000010569998266873881,-0.0000015099658412509598,0,-0.13337093591690063,-0.01911325566470623,0.1980821043252945,1],[7,0.000010570007361820899,-10.000000953674316,-0.000018530359739088453,0,-0.0000015099755046321661,0.00001853035792009905,-9.999999046325684,0,10.00000286102295,0.000010570005542831495,-0.0000015099552683750517,0,-0.13337093591690063,-0.03039957955479622,0.19808195531368256,1],[7,0.0000021194225610088324,-10.000000953674316,-0.0000016292024156427942,0,-0.0000015099599295353983,0.000001629202074582281,-9.999999046325684,0,10.00000286102295,0.000002119421878887806,-0.0000015099590200406965,0,-0.1333709955215454,-0.04168445244431496,0.19808202981948853,1],[7,0.0000013736305390921189,-10.000000953674316,0.0000023306708953896305,0,9.999999046325684,0.0000013736305390921189,-4.286095531824685e-7,0,4.286090700134082e-7,0.0000023306699858949287,10.00000286102295,0,-0.19808202981948853,0.00782847311347723,-0.13337098062038422,1],[7,-0.00003243717583245598,-10.000000953674316,0.0000023835057163523743,0,9.999999046325684,-0.00003243717583245598,-4.371086390619894e-7,0,4.3711619923669787e-7,0.00000238350344261562,10.00000286102295,0,-0.19808204472064972,-0.00345617881976068,-0.13337098062038422,1],[7,0.0000013651261951963534,-10.000000953674316,-0.000006067080903449096,0,9.999999046325684,0.0000013651265362568665,-4.371119359802833e-7,0,4.371125896796002e-7,-0.000006067078629712341,10.00000286102295,0,-0.19808198511600494,-0.014742054976522923,-0.1333709955215454,1],[7,0.0000013651261951963534,-10.000000953674316,0.0000023835023057472426,0,9.999999046325684,0.0000013651260815095156,-4.371137265479774e-7,0,4.371132433789171e-7,0.0000023835016236262163,10.00000286102295,0,-0.19808201491832733,-0.026027483865618706,-0.13337098062038422,1],[7,10,8.33973317071468e-8,-1.733500631928564e-8,0,-3.954125980636103e-15,-2.0351057052612305,-9.790728569030762,0,-8.51798986900576e-8,9.790731430053711,-2.0351052284240723,0,-0.000011828137758129742,-0.08696012943983078,0.21155788004398346,1],[7,10,-5.638756874759565e-7,1.1720728565478566e-7,0,2.9001093518853105e-14,-2.0351028442382812,-9.790728569030762,0,5.759281407335948e-7,9.790731430053711,-2.035102367401123,0,-0.000011844265827676281,-0.13197419047355652,0.1958482414484024,1],[7,10,-0.000016405374481109902,0.0000034099939512088895,0,8.437318226896251e-13,-2.035086154937744,-9.790731430053711,0,0.000016756021068431437,9.790735244750977,-2.035085439682007,0,-0.00001216773125634063,-0.15941882133483887,0.1958479881286621,1],[7,10,0.0000017900865714182146,-0.00002213999323430471,0,-0.00002151125590899028,-1.7038416862487793,-9.853777885437012,0,-0.000005536214302992448,9.853780746459961,-1.7038410902023315,0,-0.000011390276085876394,-0.19335980713367462,0.18943670392036438,1],[7,10,8.338925283624121e-8,-1.7333325885715567e-8,0,-4.288862813479162e-15,-2.0351057052612305,-9.790727615356445,0,-8.517164218346807e-8,9.790731430053711,-2.035104990005493,0,-0.000011847067980852444,-0.2143070548772812,0.1958482712507248,1],[7,10,-0.000003152004865114577,6.551748015226622e-7,0,9.962992616237981e-14,-2.0350987911224365,-9.790728569030762,0,0.000003219376367269433,9.790731430053711,-2.0350983142852783,0,-0.00001187178168038372,-0.09138043969869614,0.20585882663726807,1],[7,10,7.868003422117908e-7,-5.6294588546279556e-8,0,-3.6222737184949186e-14,-0.7136632800102234,-9.974501609802246,0,-7.888114623710862e-7,9.974505424499512,-0.7136630415916443,0,-0.000011820306099252775,-0.12932632863521576,0.19158107042312622,1],[7,10,-1.9577015564209432e-7,-4.0589810623714584e-8,0,7.853840258806484e-15,2.030165195465088,-9.791752815246582,0,1.9993366606740892e-7,9.791756629943848,2.0301644802093506,0,-0.000011837435522465967,-0.19010993838310242,0.14469584822654724,1],[7,10,0.0000022578883545065764,-0.000026847081244341098,0,-0.00002664817111508455,2.296257495880127,-9.73279094696045,0,0.00000396722452933318,9.732792854309082,2.2962567806243896,0,-0.000011417139830882661,-0.20817241072654724,0.1390743851661682,1],[7,10,0.000002270258846692741,0.000042060248233610764,0,0.00004090677248314023,1.8573182821273804,-9.826003074645996,0,-0.000010042685971711762,9.826006889343262,1.8573180437088013,0,-0.000012416406207194086,-0.21591660380363464,0.14852330088615417,1],[7,10,9.014045190269826e-7,1.8689182468278887e-7,0,-1.8338818961669e-14,2.030164957046509,-9.791753768920898,0,-9.20575018881209e-7,9.791756629943848,2.0301644802093506,0,-0.000011825675755972043,-0.23269511759281158,0.14469587802886963,1],[7,0.0000020664799649239285,-10.000000953674316,-0.0000018943452460007393,0,-0.0000015099585652933456,0.0000018943450186270638,-9.999999046325684,0,10.00000286102295,0.0000020664795101765776,-0.000001509957542111806,0,-0.035008642822504044,-0.01745273917913437,0.10346534848213196,1],[7,0.0000072650209403946064,-10.000000953674316,0.0000054711749726266135,0,-0.000001509956746303942,-0.000005471176336868666,-9.999999046325684,0,10.00000286102295,0.000007265017302415799,-0.0000015099601569090737,0,-0.03500862047076225,-0.044315289705991745,0.10346537828445435,1],[7,1.646303928737325e-7,-10.000000953674316,0.0000054711745178792626,0,-0.0000015099608390301,-0.0000054711749726266135,-9.999999046325684,0,10.00000286102295,1.6462949758988543e-7,-0.0000015099603842827491,0,-0.03500867262482643,-0.0711778774857521,0.10346537828445435,1],[7,0.000001939727553690318,-10.000000953674316,-0.000001629207417863654,0,-0.0000015099594747880474,0.0000016292071904899785,-9.999999046325684,0,10.00000286102295,0.000001939727098942967,-0.0000015099585652933456,0,-0.03500865772366524,-0.09804057329893112,0.10346532613039017,1],[7,0.0000021728017145505873,-10.000000953674316,-5.961643410046236e-7,0,9.999999046325684,0.0000021728017145505873,-1.7197568524807139e-7,0,1.7197574209149025e-7,-5.961640567875293e-7,10.00000286102295,0,-0.10346534848213196,0.01745273359119892,-0.035008661448955536,1],[7,0.000005457856332213851,-10.000000953674316,6.084043207010836e-7,0,9.999999046325684,0.000005457856332213851,-4.3711366970455856e-7,0,4.371131581137888e-7,6.084043207010836e-7,10.00000286102295,0,-0.10346535593271255,-0.009409925900399685,-0.035008661448955536,1],[7,0.000001907663545352989,-10.000000953674316,-0.0000011666928685372113,0,9.999999046325684,0.0000019076637727266643,-4.371131296920794e-7,0,4.3711318653549824e-7,-0.0000011666923001030227,10.00000286102295,0,-0.10346535593271255,-0.03627248853445053,-0.03500865772366524,1],[7,0.0000019076637727266643,-10.000000953674316,-2.791438475924224e-7,0,9.999999046325684,0.0000019076637727266643,-4.371132149572077e-7,0,4.3711310127036995e-7,-2.791436486404564e-7,10.00000286102295,0,-0.10346535593271255,-0.06313510984182358,-0.03500865772366524,1],[7,10,0.0000012901954278277117,-5.639623967476637e-14,0,-5.639623967476637e-14,-3.4641916207356696e-14,-9.999999046325684,0,-0.0000012901950867671985,10.00000286102295,-3.464189587856596e-14,0,-0.000011801585969806183,0.005695546045899391,0.12563294172286987,1],[7,10,0.0000012903462902613683,-5.6402832979227796e-14,0,-5.6402832979227796e-14,-3.4199754844494584e-14,-9.999999046325684,0,-0.000001290345949200855,10.00000286102295,-3.419973451570385e-14,0,-0.0000117999534268165,0.02527664229273796,0.1210150420665741,1],[7,10,0.0000012902979733553366,-5.640071878499145e-14,0,-5.640071878499145e-14,-3.419913820450898e-14,-9.999999046325684,0,-0.0000012902976322948234,10.00000286102295,-3.419911787571825e-14,0,-0.000011798304512922186,0.05150018259882927,0.12173646688461304,1],[7,10,0.000001290242266804853,-5.6398282718235146e-14,0,-5.6398282718235146e-14,-3.419842669683329e-14,-9.999999046325684,0,-0.000001290241812057502,10.00000286102295,-3.4198406368042555e-14,0,-0.000011796205399150494,0.08293063193559647,0.12163315713405609,1],[7,10,0.0000012905378525829292,-5.641120505287846e-14,0,-5.6411208441010247e-14,-3.4202194299382677e-14,-9.999999046325684,0,-0.000001290537511522416,10.00000286102295,-3.420217397059194e-14,0,-0.000011794288184319157,0.11220701038837433,0.12143301218748093,1],[7,10,0.0000012902070238851593,-5.639674450640293e-14,0,-5.639674789453472e-14,-3.419797946343714e-14,-9.999999046325684,0,-0.0000012902066828246461,10.00000286102295,-3.4197959134646405e-14,0,-0.00001179243281512754,0.13959883153438568,0.12123666703701019,1],[7,10,0.000001290556724597991,-5.641203175703498e-14,0,-5.641203175703498e-14,-3.42024348567397e-14,-9.999999046325684,0,-0.0000012905563835374778,10.00000286102295,-3.420241452794896e-14,0,-0.000011790641110565048,0.1667986661195755,0.12093474715948105,1],[7,10,0.0000012905014727948583,-5.640961601906941e-14,0,-5.640961601906941e-14,-3.420173012532758e-14,-9.999999046325684,0,-0.0000012905011317343451,10.00000286102295,-3.420170979653685e-14,0,-0.000011788915799115784,0.19192783534526825,0.11979008466005325,1],[7,10,0.000001290377440454904,-5.640419162007519e-14,0,-5.640419500820698e-14,-3.420014786778211e-14,-9.999999046325684,0,-0.0000012903770993943908,10.00000286102295,-3.4200127538991376e-14,0,-0.000011787279618147295,0.21646641194820404,0.11917385458946228,1],[7,10,0.000001290377440454904,-5.640419500820698e-14,0,-5.640419500820698e-14,-3.42001512559139e-14,-9.999999046325684,0,-0.0000012903770993943908,10.00000286102295,-3.4200130927123165e-14,0,-0.000011786478353315033,0.22967258095741272,0.1189044937491417,1],[7,10,-0.000005716669420507969,4.377232517421836e-12,0,2.4988352858267004e-13,-0.00000721985406926251,-9.999999046325684,0,0.000005716667601518566,10.00000286102295,-0.000007219851340778405,0,-0.00001163582692242926,0.21646374464035034,0.11890432983636856,1],[7,10,-0.000005478547336679185,-3.715970673529023e-12,0,2.394752148318635e-13,0.000007219885446829721,-9.999999046325684,0,0.000005478545517689781,10.00000286102295,0.000007219882718345616,0,-0.000011650949090835638,0.20325449109077454,0.11890462040901184,1],[7,10,0.0000012903757351523382,-5.640392734579565e-14,0,-5.64041272455712e-14,1.5014601974921993e-12,-9.999999046325684,0,-0.000001290375394091825,10.00000286102295,1.501459655391113e-12,0,-0.00001178955517389113,0.19004561007022858,0.1189044937491417,1],[7,0.0000032582495350652607,-10.000000953674316,-0.0000017790694073482882,0,-0.0000015099583379196702,0.0000017790689526009373,-9.999999046325684,0,10.00000286102295,0.000003258248625570559,-0.0000015099570873644552,0,0.0029483891557902098,-0.018731215968728065,0.11051031202077866,1],[7,0.0000029864220323361224,-10.000000953674316,-0.0000017790696347219637,0,-0.000001509960043222236,0.0000017790691799746128,-9.999999046325684,0,10.00000286102295,0.0000029864211228414206,-0.0000015099589063538588,0,-0.008355725556612015,-0.017161212861537933,0.06895669549703598,1],[7,0.000002986421804962447,-10.000000953674316,-0.0000017790696347219637,0,-0.000001509960043222236,0.0000017790691799746128,-9.999999046325684,0,10.00000286102295,0.000002986420895467745,-0.0000015099589063538588,0,0.021530717611312866,-0.01873120106756687,0.03690082207322121,1],[7,0.0000024963276246126043,-10.000000953674316,-7.988817287696293e-7,0,-0.0000015099599295353983,7.988813308656972e-7,-9.999999046325684,0,10.00000286102295,0.0000024963267151179025,-0.0000015099591337275342,0,0.01762363314628601,-0.018583519384264946,0.018118107691407204,1],[7,-0.0000024963278519862797,-10.000000953674316,-0.000004177457412879448,0,0.0000030199187222024193,-0.000004177457867626799,9.999999046325684,0,-10.00000286102295,0.0000024963255782495253,0.0000030199187222024193,0,-0.012205800972878933,-0.018743006512522697,-0.007230831775814295,1],[7,0.0000032568791539233644,-10.000000953674316,-8.61184503264667e-7,0,-0.000001509959247414372,8.611839916738973e-7,-9.999999046325684,0,10.00000286102295,0.000003256878017054987,-0.0000015099584516065079,0,0.007439755834639072,-0.019223231822252274,0.007321810815483332,1],[7,0.0000013206894209361053,-10.000000953674316,-0.000001587255610502325,0,-0.0000015099593611012097,0.0000015872553831286496,-9.999999046325684,0,10.00000286102295,0.0000013206890798755921,-0.0000015099585652933456,0,-0.00036480638664215803,-0.018804611638188362,0.006744801998138428,1],[7,0.000002288783889525803,-10.000000953674316,-0.000001629206963116303,0,-0.0000015099594747880474,0.00000162920662205579,-9.999999046325684,0,10.00000286102295,0.0000022887832074047765,-0.0000015099585652933456,0,-0.00651364354416728,-0.01911969855427742,0.006744795478880405,1],[7,0.0000034371448691672413,-10.000000953674316,0.000001275077465834329,0,-0.0000015099591337275342,-0.0000012750780342685175,-9.999999046325684,0,10.00000286102295,0.0000034371435049251886,-0.0000015099590200406965,0,-0.006513639353215694,-0.025276601314544678,0.00674480339512229,1],[7,0.000001500952407695877,-10.000000953674316,-0.000003565397491911426,0,-0.0000015099593611012097,0.0000035653972645377507,-9.999999046325684,0,10.00000286102295,0.0000015009522940090392,-0.0000015099582242328324,0,-0.006513645406812429,-0.03143351525068283,0.006744787096977234,1],[7,0.0000024690484679013025,-10.000000953674316,-0.0000016292073041768163,0,-0.0000015099594747880474,0.000001629206963116303,-9.999999046325684,0,10.00000286102295,0.000002469047785780276,-0.0000015099585652933456,0,-0.006513641215860844,-0.03759040683507919,0.0067447940818965435,1],[7,10,0.0000012901954278277117,-5.639623967476637e-14,0,-5.639623967476637e-14,-3.419783377377021e-14,-9.999999046325684,0,-0.0000012901950867671985,10.00000286102295,-3.419781344497948e-14,0,-0.01873122528195381,0.0029483684338629246,0.11051027476787567,1],[7,10,0.000001382991399623279,-6.045247717125987e-14,0,-6.045247717125987e-14,-3.541340059197949e-14,-9.999999046325684,0,-0.0000013829909448759281,10.00000286102295,-3.541337687505697e-14,0,-0.017161210998892784,-0.008355739526450634,0.06895667314529419,1],[7,10,0.0000014470175528913387,-6.325114856788744e-14,0,-6.325114856788744e-14,-3.633959723848418e-14,-9.999999046325684,0,-0.0000014470172118308255,10.00000286102295,-3.6339576909693444e-14,0,-0.018731221556663513,0.021530702710151672,0.03690082207322121,1],[7,10,8.694317443769251e-7,-3.80040711899475e-14,0,-3.80040711899475e-14,-2.903420234269538e-14,-9.999999046325684,0,-8.694315170032496e-7,10.00000286102295,-2.9034185402036436e-14,0,-0.018583541736006737,0.01762363314628601,0.018118100240826607,1],[7,-0.0000019473995962471236,-10.000000953674316,-0.000009115474313148297,0,-7.24138069152832,0.000007696718057559337,-6.896552085876465,0,6.896552085876465,0.000005257826614979422,-7.241381645202637,0,0.01365390419960022,0.018743036314845085,-0.0038519061636179686,1],[7,-0.0000020714523998321965,-10,0.000004821714355784934,0,8.00000286102295,0.0000012358653975752532,5.999998569488525,0,-5.999998092651367,0.000005100243015476735,8.000001907348633,0,-0.010321298614144325,0.019223257899284363,0.0015587180387228727,1],[7,0.0000020112679521844257,-10.000000953674316,0.000004518693458521739,0,9.999999046325684,0.0000020112668153160485,-0.0000025431195354030933,0,0.0000025431177164136898,0.000004518692549027037,10.00000286102295,0,-0.006744799204170704,0.019206557422876358,-0.0003647021949291229,1],[7,0.000001742159952300426,-10.000000953674316,0.00000451869436801644,0,9.999999046325684,0.000001742159611239913,-7.351378030762135e-7,0,7.351367230512551e-7,0.000004518693003774388,10.00000286102295,0,-0.006744799204170704,0.01911972276866436,-0.006513644475489855,1],[7,-0.0000011655965863610618,-10.000000953674316,-6.31831767350377e-7,0,9.999999046325684,-0.0000011655965863610618,-7.351375188591192e-7,0,7.35137177798606e-7,-6.318315968201205e-7,10.00000286102295,0,-0.00674479641020298,0.012970183044672012,-0.006513636559247971,1],[7,0.0000027114126623928314,-10.000000953674316,0.000007122198439901695,0,9.999999046325684,0.0000027114122076454805,-7.35139622065617e-7,0,7.351374051722814e-7,0.000007122195711417589,10.00000286102295,0,-0.006744799204170704,0.006820622831583023,-0.006513640750199556,1],[7,0.000001742159952300426,-10.000000953674316,0.000004214435648464132,0,9.999999046325684,0.000001742159611239913,-7.351382009801455e-7,0,7.351372346420249e-7,0.0000042144342842220794,10.00000286102295,0,-0.006744798738509417,0.0006710799061693251,-0.006513640750199556,1]],8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]]],0,0,[],[],[]],[[[10,".bin",396937407,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":6552,"length":318,"count":159,"stride":2}},{"primitiveMode":7,"jointMapIndex":1,"vertexBundelIndices":[1],"indexView":{"offset":21774,"length":660,"count":330,"stride":2}},{"primitiveMode":7,"jointMapIndex":2,"vertexBundelIndices":[2],"indexView":{"offset":29922,"length":378,"count":189,"stride":2}},{"primitiveMode":7,"jointMapIndex":3,"vertexBundelIndices":[3],"indexView":{"offset":44772,"length":678,"count":339,"stride":2}},{"primitiveMode":7,"jointMapIndex":4,"vertexBundelIndices":[4],"indexView":{"offset":46818,"length":144,"count":72,"stride":2}},{"primitiveMode":7,"jointMapIndex":3,"vertexBundelIndices":[5],"indexView":{"offset":48548,"length":336,"count":84,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":6552,"count":91,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]},{"view":{"offset":6870,"length":14904,"count":207,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]},{"view":{"offset":22434,"length":7488,"count":104,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]},{"view":{"offset":30300,"length":14472,"count":201,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]},{"view":{"offset":45450,"length":1368,"count":19,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]},{"view":{"offset":46962,"length":1584,"count":22,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,3,4,5,6,7,8,25,26,27,28,29,39,54,58,59,60,61,62,63,64,65,66,67,82,85,86,87,88],[0,1,2,3,4,5,6,7,8,9,10,11,25,26,27,28,29,39,54,58,59,60,61,82,83,84,85,86,87,88],[0,1,2,3,4,5,6,16,17,25,26,27,28,29,39,50,58,59,60,61,62,63,64,65,66,71,74,75,76,77],[0,1,2,3,5,6,16,17,18,19,20,27,28,29,31,35,39,50,58,59,60,61,71,72,73,74,75,76,77],[0,29,31,39,44,45,46]]},"minPosition",8,[1,-0.002649865113198757,0.0005072757485322654,-0.023691222071647644],"maxPosition",8,[1,0.002649865113198757,0.020600700750947,0.01760418526828289]]],-1],0,0,[],[],[]],[[[40,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{}],[{"USE_LIGHTMAP":true},{},{}],[[[{},"mainColor",8,[4,4282861567]],{},{}],11,0,0]]],0,0,[0],[7],[4]],[[[39,"1",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{}],[{"USE_LIGHTMAP":true,"USE_ALBEDO_MAP":true},{},{}],[[[{},"mainTexture",6,0],{},{}],11,0,0]]],0,0,[0,0],[8,7],[66,4]],[[[34,"PurchaseDino",".mp3",0.36],-1],0,0,[],[],[]],[[[40,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[8,7],[28,26]],[[[40,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{}],[{"USE_LIGHTMAP":true,"USE_ALBEDO_MAP":true},{},{}],[[[{},"mainTexture",6,0],{},{}],11,0,0]]],0,0,[0,0],[8,7],[67,4]],[[[10,".bin",1247067917,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":3168,"length":768,"count":192,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":3168,"count":66,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.3200426995754242,-0.32004261016845703,0],"maxPosition",8,[1,0.32004252076148987,0.3200426399707794,0.29342496395111084]]],-1],0,0,[],[],[]],[[[12,"Skin-4",3761838401,["Root_M","Root_M/Spine1_M","Root_M/Spine1_M/Chest_M","Root_M/Spine1_M/Chest_M/Neck_M","Root_M/Spine1_M/Chest_M/Neck_M/Head_M","Root_M/Spine1_M/Chest_M/Scapula_R","Root_M/Spine1_M/Chest_M/Scapula_R/Shoulder_R","Root_M/Spine1_M/Chest_M/Scapula_R/Shoulder_R/Elbow_R","Root_M/Spine1_M/Chest_M/Scapula_R/Shoulder_R/Elbow_R/Wrist_R","Root_M/Hip_R","Root_M/Hip_R/Knee_R"],[[[7,-1.6073266766851061e-16,-5.002625820273957e-16,1,0,0.9995050430297852,-0.031458914279937744,1.4491539940461042e-16,0,0.031458914279937744,0.9995050430297852,5.050714527667544e-16,0,-0.019512146711349487,0.0004364966880530119,-3.2884277806782753e-18,1],[7,-1.6051606546202993e-16,-4.955657313953114e-16,1,0,0.9981581568717957,-0.06066583842039108,1.3015651204319428e-16,0,0.06066583842039108,0.9981581568717957,5.043908088540763e-16,0,-0.024823229759931564,0.0011626967461779714,-3.024364845781441e-18,1],[7,-1.6073587051184242e-16,-5.003653906513687e-16,1,0,0.9995249509811401,-0.03081941418349743,1.4523855570887774e-16,0,0.03081941418349743,0.9995249509811401,5.05081511283003e-16,0,-0.02732432447373867,0.0003465543850325048,-1.9691652799332707e-18,1],[7,5.751306066253416e-17,-4.843061753670192e-16,1,0,0.9392595887184143,0.34320753812789917,1.1219782537462701e-16,0,-0.34320753812789917,0.9392595887184143,4.746281357303692e-16,0,-0.02801189385354519,-0.010852459818124771,-9.365741732283693e-18,1],[7,-1.6081226229577292e-16,-5.053215392444312e-16,1,0,1,-2.0489094865183688e-8,1.6081224906088311e-16,0,2.0489094865183688e-8,1,5.053215392444312e-16,0,-0.03196112811565399,0.00012439562124200165,-9.574726432503377e-18,1],[7,-0.9999274015426636,-0.0000014861826684864354,-0.012051843106746674,0,-0.012051843106746674,0.00012334794155322015,0.9999273419380188,0,4.953271126595382e-10,1,-0.00012335690553300083,0,-0.002503913827240467,0.00010892027785303071,-0.028479700908064842,1],[7,-0.0927719995379448,-0.02428782358765602,-0.9953911304473877,0,-0.9907236695289612,-0.09744593501091003,0.0947146937251091,0,-0.09929723292589188,0.9949443936347961,-0.015022268518805504,0,0.027415143325924873,0.00269489549100399,-0.010212181136012077,1],[7,-0.09589303284883499,-0.0010335920378565788,-0.9953911304473877,0,-0.9847338199615479,0.14604248106479645,0.0947146937251091,0,0.14527148008346558,0.9892777800559998,-0.015022268518805504,0,0.02222844958305359,-0.0027861015405505896,-0.010212181136012077,1],[7,-0.07126504927873611,0.008662938140332699,-0.9974197745323181,0,-0.9864515066146851,0.14752475917339325,0.07176267355680466,0,0.14776578545570374,0.9890204071998596,-0.0019677907694131136,0,0.01708024926483631,-0.0027297406923025846,-0.009819445200264454,1],[7,-0.010730288922786713,-0.0003671304730232805,-0.9999423623085022,0,-0.9993575811386108,-0.03419242799282074,0.01073656789958477,0,-0.034194398671388626,0.9994152188301086,-2.2132606511404695e-11,0,0.01896691881120205,0.0005232312832958996,-0.0027990643866360188,1],[7,-0.010681620799005032,-0.0010848328238353133,-0.9999423623085022,0,-0.9948249459266663,-0.10103510320186615,0.01073656789958477,0,-0.10104092955589294,0.9948822855949402,-2.213251457106047e-11,0,0.01038399152457714,0.0012213099980726838,-0.0027990643866360188,1]],8,8,8,8,8,8,8,8,8,8,8]]],0,0,[],[],[]],[[[12,"Skin-0",1398445096,["Root_M","Root_M/Spine1_M","Root_M/Spine1_M/Chest_M","Root_M/Spine1_M/Chest_M/Neck_M","Root_M/Spine1_M/Chest_M/Neck_M/Head_M","Root_M/Spine1_M/Chest_M/Scapula_R","Root_M/Spine1_M/Chest_M/Scapula_R/Shoulder_R","Root_M/Spine1_M/Chest_M/Scapula_R/Shoulder_R/Elbow_R","Root_M/Spine1_M/Chest_M/Scapula_R/Shoulder_R/Elbow_R/Wrist_R","Root_M/Spine1_M/Chest_M/Scapula_L","Root_M/Spine1_M/Chest_M/Scapula_L/Shoulder_L","Root_M/Spine1_M/Chest_M/Scapula_L/Shoulder_L/Elbow_L","Root_M/Spine1_M/Chest_M/Scapula_L/Shoulder_L/Elbow_L/Wrist_L","Root_M/Hip_R","Root_M/Hip_R/Knee_R","Root_M/Hip_L","Root_M/Hip_L/Knee_L"],[[[7,-1.6073266766851061e-16,-5.002625820273957e-16,1,0,0.9995050430297852,-0.031458914279937744,1.4491539940461042e-16,0,0.031458914279937744,0.9995050430297852,5.050714527667544e-16,0,-0.019512146711349487,0.0004364966880530119,-3.2884277806782753e-18,1],[7,-1.6051606546202993e-16,-4.955657313953114e-16,1,0,0.9981581568717957,-0.06066583842039108,1.3015651204319428e-16,0,0.06066583842039108,0.9981581568717957,5.043908088540763e-16,0,-0.024823229759931564,0.0011626967461779714,-3.024364845781441e-18,1],[7,-1.6073587051184242e-16,-5.003653906513687e-16,1,0,0.9995249509811401,-0.03081941418349743,1.4523855570887774e-16,0,0.03081941418349743,0.9995249509811401,5.05081511283003e-16,0,-0.02732432447373867,0.0003465543850325048,-1.9691652799332707e-18,1],[7,5.751306066253416e-17,-4.843061753670192e-16,1,0,0.9392595887184143,0.34320753812789917,1.1219782537462701e-16,0,-0.34320753812789917,0.9392595887184143,4.746281357303692e-16,0,-0.02801189385354519,-0.010852459818124771,-9.365741732283693e-18,1],[7,-1.6081226229577292e-16,-5.053215392444312e-16,1,0,1,-2.0489094865183688e-8,1.6081224906088311e-16,0,2.0489094865183688e-8,1,5.053215392444312e-16,0,-0.03196112811565399,0.00012439562124200165,-9.574726432503377e-18,1],[7,-0.9999274015426636,-0.0000014861826684864354,-0.012051843106746674,0,-0.012051843106746674,0.00012334794155322015,0.9999273419380188,0,4.953271126595382e-10,1,-0.00012335690553300083,0,-0.002503913827240467,0.00010892027785303071,-0.028479700908064842,1],[7,-0.0927719995379448,-0.02428782358765602,-0.9953911304473877,0,-0.9907236695289612,-0.09744593501091003,0.0947146937251091,0,-0.09929723292589188,0.9949443936347961,-0.015022268518805504,0,0.027415143325924873,0.00269489549100399,-0.010212181136012077,1],[7,-0.09589303284883499,-0.0010335920378565788,-0.9953911304473877,0,-0.9847338199615479,0.14604248106479645,0.0947146937251091,0,0.14527148008346558,0.9892777800559998,-0.015022268518805504,0,0.02222844958305359,-0.0027861015405505896,-0.010212181136012077,1],[7,-0.07126504927873611,0.008662938140332699,-0.9974197745323181,0,-0.9864515066146851,0.14752475917339325,0.07176267355680466,0,0.14776578545570374,0.9890204071998596,-0.0019677907694131136,0,0.01708024926483631,-0.0027297406923025846,-0.009819445200264454,1],[7,-0.9999274015426636,-0.000001486659016336489,-0.012051837518811226,0,0.0120518384501338,-0.00012334641360212117,-0.9999273419380188,0,-9.146007654567759e-16,-1,0.00012335537758190185,0,0.0028796999249607325,-0.0001089197612600401,0.028484230861067772,1],[7,-0.15891462564468384,-0.016919724643230438,-0.987147331237793,0,0.9815993309020996,0.10451140254735947,-0.1598128229379654,0,0.10587213933467865,-0.9943797588348389,5.446323392277463e-10,0,-0.02677895687520504,-0.0029642386361956596,0.011229886673390865,1],[7,-0.15826688706874847,0.022175027057528496,-0.987147331237793,0,0.977598249912262,-0.13697285950183868,-0.1598128229379654,0,-0.13875624537467957,-0.9903265833854675,5.44632006160839e-10,0,-0.02167670615017414,0.002370338188484311,0.011229886673390865,1],[7,-0.1337725818157196,0.0319434329867363,-0.9904971122741699,0,0.9809468388557434,-0.1378193348646164,-0.13692742586135864,0,-0.14088359475135803,-0.9899421334266663,-0.01289836224168539,0,-0.016554739326238632,0.0023029823787510395,0.010846441611647606,1],[7,-0.010730288922786713,-0.0003671304730232805,-0.9999423623085022,0,-0.9993575811386108,-0.03419242799282074,0.01073656789958477,0,-0.034194398671388626,0.9994152188301086,-2.2132606511404695e-11,0,0.01896691881120205,0.0005232312832958996,-0.0027990643866360188,1],[7,-0.010681620799005032,-0.0010848328238353133,-0.9999423623085022,0,-0.9948249459266663,-0.10103510320186615,0.01073656789958477,0,-0.10104092955589294,0.9948822855949402,-2.213251457106047e-11,0,0.01038399152457714,0.0012213099980726838,-0.0027990643866360188,1],[7,-0.010730288922786713,-0.0003671304730232805,-0.9999423623085022,0,0.9993575811386108,0.03419242799282074,-0.01073656789958477,0,0.034194398671388626,-0.9994152188301086,2.2804104762017604e-15,0,-0.01896691881120205,-0.0005232313415035605,0.0027990643866360188,1],[7,-0.010681620799005032,-0.0010848328238353133,-0.9999423623085022,0,0.9948249459266663,0.10103511065244675,-0.01073656789958477,0,0.10104092955589294,-0.9948822855949402,2.2699371255671978e-15,0,-0.01038399152457714,-0.0012213099980726838,0.0027990643866360188,1]],8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]]],0,0,[],[],[]],[[[10,".bin",4291740134,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":121536,"length":13656,"count":3414,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":121536,"count":1688,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,5,6,7,8,9]]},"minPosition",8,[1,-0.008162803947925568,-2.770612539393369e-8,-0.0028996625915169716],"maxPosition",8,[1,-0.0003719171218108386,0.019594445824623108,0.004642312414944172]]],-1],0,0,[],[],[]],[[[10,".bin",3923920747,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":53424,"length":5952,"count":1488,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":53424,"count":742,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,1,2,3,5,6,7,8]]},"minPosition",8,[1,0.003725956892594695,0.014783668331801891,-0.0029849016573280096],"maxPosition",8,[1,0.011450743302702904,0.0316593274474144,0.0030465873423963785]]],-1],0,0,[],[],[]],[[[12,"Skin-5",504387730,["Root_M","Root_M/Spine1_M","Root_M/Spine1_M/Chest_M/Scapula_R/Shoulder_R","Root_M/Spine1_M/Chest_M/Scapula_R/Shoulder_R/Elbow_R","Root_M/Spine1_M/Chest_M/Scapula_R/Shoulder_R/Elbow_R/Wrist_R","Root_M/Hip_R","Root_M/Hip_R/Knee_R","Root_M/Hip_R/Knee_R/Ankle_R","Root_M/Hip_R/Knee_R/Ankle_R/Toes_R","Root_M/Hip_L","Root_M/Hip_L/Knee_L","Root_M/Hip_L/Knee_L/Ankle_L","Root_M/Hip_L/Knee_L/Ankle_L/Toes_L"],[[[7,-1.6073266766851061e-16,-5.002625820273957e-16,1,0,0.9995050430297852,-0.031458914279937744,1.4491539940461042e-16,0,0.031458914279937744,0.9995050430297852,5.050714527667544e-16,0,-0.019512146711349487,0.0004364966880530119,-3.2884277806782753e-18,1],[7,-1.6051606546202993e-16,-4.955657313953114e-16,1,0,0.9981581568717957,-0.06066583842039108,1.3015651204319428e-16,0,0.06066583842039108,0.9981581568717957,5.043908088540763e-16,0,-0.024823229759931564,0.0011626967461779714,-3.024364845781441e-18,1],[7,-0.0927719995379448,-0.02428782358765602,-0.9953911304473877,0,-0.9907236695289612,-0.09744593501091003,0.0947146937251091,0,-0.09929723292589188,0.9949443936347961,-0.015022268518805504,0,0.027415143325924873,0.00269489549100399,-0.010212181136012077,1],[7,-0.09589303284883499,-0.0010335920378565788,-0.9953911304473877,0,-0.9847338199615479,0.14604248106479645,0.0947146937251091,0,0.14527148008346558,0.9892777800559998,-0.015022268518805504,0,0.02222844958305359,-0.0027861015405505896,-0.010212181136012077,1],[7,-0.07126504927873611,0.008662938140332699,-0.9974197745323181,0,-0.9864515066146851,0.14752475917339325,0.07176267355680466,0,0.14776578545570374,0.9890204071998596,-0.0019677907694131136,0,0.01708024926483631,-0.0027297406923025846,-0.009819445200264454,1],[7,-0.010730288922786713,-0.0003671304730232805,-0.9999423623085022,0,-0.9993575811386108,-0.03419242799282074,0.01073656789958477,0,-0.034194398671388626,0.9994152188301086,-2.2132606511404695e-11,0,0.01896691881120205,0.0005232312832958996,-0.0027990643866360188,1],[7,-0.010681620799005032,-0.0010848328238353133,-0.9999423623085022,0,-0.9948249459266663,-0.10103510320186615,0.01073656789958477,0,-0.10104092955589294,0.9948822855949402,-2.213251457106047e-11,0,0.01038399152457714,0.0012213099980726838,-0.0027990643866360188,1],[7,-1.8117590760979851e-10,-0.0015915741678327322,-0.9999987483024597,0,-1,-7.552468872518148e-8,3.013794214190568e-10,0,-7.552507241825879e-8,0.9999987483024597,-0.0015915741678327322,0,0.002713743830099702,0.0009506093338131905,-0.0027716041076928377,1],[7,7.942823003759258e-7,6.541559827155652e-8,-1,0,-0.08185373991727829,0.9966443777084351,1.8111570576628822e-10,0,0.9966443777084351,0.08185373991727829,7.96971448835393e-7,0,-0.0015626671956852078,-0.0007490511634387076,-0.0027741852682083845,1],[7,-0.010730288922786713,-0.0003671304730232805,-0.9999423623085022,0,0.9993575811386108,0.03419242799282074,-0.01073656789958477,0,0.034194398671388626,-0.9994152188301086,2.2804104762017604e-15,0,-0.01896691881120205,-0.0005232313415035605,0.0027990643866360188,1],[7,-0.010681620799005032,-0.0010848328238353133,-0.9999423623085022,0,0.9948249459266663,0.10103511065244675,-0.01073656789958477,0,0.10104092955589294,-0.9948822855949402,2.2699371255671978e-15,0,-0.01038399152457714,-0.0012213099980726838,0.0027990643866360188,1],[7,-1.8150986269560576e-10,-0.0015915741678327322,-0.9999987483024597,0,1,7.69743095929698e-8,-3.0402055872791323e-10,0,7.697469328604711e-8,-0.9999987483024597,0.0015915741678327322,0,-0.002713743830099702,-0.0009506093920208514,0.0027716041076928377,1],[7,-7.873639447097958e-7,-6.519635320501038e-8,-1,0,0.08185373991727829,-0.9966443777084351,5.288988691454222e-10,0,-0.9966443777084351,-0.08185373991727829,7.900583796072169e-7,0,0.0015626716194674373,0.0007490515126846731,0.0027741827070713043,1]],8,8,8,8,8,8,8,8,8,8,8,8,8]]],0,0,[],[],[]],[[[12,"Skin-2",4144506546,["Root_M","Root_M/Spine1_M","Root_M/Spine1_M/Chest_M","Root_M/Spine1_M/Chest_M/Neck_M","Root_M/Spine1_M/Chest_M/Neck_M/Head_M","Root_M/Spine1_M/Chest_M/Scapula_L","Root_M/Spine1_M/Chest_M/Scapula_L/Shoulder_L","Root_M/Spine1_M/Chest_M/Scapula_L/Shoulder_L/Elbow_L","Root_M/Spine1_M/Chest_M/Scapula_L/Shoulder_L/Elbow_L/Wrist_L","Root_M/Hip_L","Root_M/Hip_L/Knee_L"],[[[7,-1.6073266766851061e-16,-5.002625820273957e-16,1,0,0.9995050430297852,-0.031458914279937744,1.4491539940461042e-16,0,0.031458914279937744,0.9995050430297852,5.050714527667544e-16,0,-0.019512146711349487,0.0004364966880530119,-3.2884277806782753e-18,1],[7,-1.6051606546202993e-16,-4.955657313953114e-16,1,0,0.9981581568717957,-0.06066583842039108,1.3015651204319428e-16,0,0.06066583842039108,0.9981581568717957,5.043908088540763e-16,0,-0.024823229759931564,0.0011626967461779714,-3.024364845781441e-18,1],[7,-1.6073587051184242e-16,-5.003653906513687e-16,1,0,0.9995249509811401,-0.03081941418349743,1.4523855570887774e-16,0,0.03081941418349743,0.9995249509811401,5.05081511283003e-16,0,-0.02732432447373867,0.0003465543850325048,-1.9691652799332707e-18,1],[7,5.751306066253416e-17,-4.843061753670192e-16,1,0,0.9392595887184143,0.34320753812789917,1.1219782537462701e-16,0,-0.34320753812789917,0.9392595887184143,4.746281357303692e-16,0,-0.02801189385354519,-0.010852459818124771,-9.365741732283693e-18,1],[7,-1.6081226229577292e-16,-5.053215392444312e-16,1,0,1,-2.0489094865183688e-8,1.6081224906088311e-16,0,2.0489094865183688e-8,1,5.053215392444312e-16,0,-0.03196112811565399,0.00012439562124200165,-9.574726432503377e-18,1],[7,-0.9999274015426636,-0.000001486659016336489,-0.012051837518811226,0,0.0120518384501338,-0.00012334641360212117,-0.9999273419380188,0,-9.146007654567759e-16,-1,0.00012335537758190185,0,0.0028796999249607325,-0.0001089197612600401,0.028484230861067772,1],[7,-0.15891462564468384,-0.016919724643230438,-0.987147331237793,0,0.9815993309020996,0.10451140254735947,-0.1598128229379654,0,0.10587213933467865,-0.9943797588348389,5.446323392277463e-10,0,-0.02677895687520504,-0.0029642386361956596,0.011229886673390865,1],[7,-0.15826688706874847,0.022175027057528496,-0.987147331237793,0,0.977598249912262,-0.13697285950183868,-0.1598128229379654,0,-0.13875624537467957,-0.9903265833854675,5.44632006160839e-10,0,-0.02167670615017414,0.002370338188484311,0.011229886673390865,1],[7,-0.1337725818157196,0.0319434329867363,-0.9904971122741699,0,0.9809468388557434,-0.1378193348646164,-0.13692742586135864,0,-0.14088359475135803,-0.9899421334266663,-0.01289836224168539,0,-0.016554739326238632,0.0023029823787510395,0.010846441611647606,1],[7,-0.010730288922786713,-0.0003671304730232805,-0.9999423623085022,0,0.9993575811386108,0.03419242799282074,-0.01073656789958477,0,0.034194398671388626,-0.9994152188301086,2.2804104762017604e-15,0,-0.01896691881120205,-0.0005232313415035605,0.0027990643866360188,1],[7,-0.010681620799005032,-0.0010848328238353133,-0.9999423623085022,0,0.9948249459266663,0.10103511065244675,-0.01073656789958477,0,0.10104092955589294,-0.9948822855949402,2.2699371255671978e-15,0,-0.01038399152457714,-0.0012213099980726838,0.0027990643866360188,1]],8,8,8,8,8,8,8,8,8,8,8]]],0,0,[],[],[]],[[[10,".bin",3857417360,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":47016,"length":4344,"count":1086,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":47016,"count":653,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,1,2,3,4,5]]},"minPosition",8,[1,-0.00273256772197783,0.029378218576312065,-0.0009605669765733182],"maxPosition",8,[1,0.00273256772197783,0.034015607088804245,0.003367869183421135]]],-1],0,0,[],[],[]],[[[10,".bin",931528313,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":53424,"length":5952,"count":1488,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":53424,"count":742,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,1,2,3,5,6,7,8]]},"minPosition",8,[1,-0.011450636200606823,0.014783668331801891,-0.0029849016573280096],"maxPosition",8,[1,-0.003725849324837327,0.0316593274474144,0.0030465873423963785]]],-1],0,0,[],[],[]],[[[12,"Skin-3",3669129590,["Root_M","Root_M/Spine1_M","Root_M/Spine1_M/Chest_M/Scapula_L/Shoulder_L","Root_M/Spine1_M/Chest_M/Scapula_L/Shoulder_L/Elbow_L","Root_M/Spine1_M/Chest_M/Scapula_L/Shoulder_L/Elbow_L/Wrist_L","Root_M/Hip_R","Root_M/Hip_R/Knee_R","Root_M/Hip_R/Knee_R/Ankle_R","Root_M/Hip_R/Knee_R/Ankle_R/Toes_R","Root_M/Hip_L","Root_M/Hip_L/Knee_L","Root_M/Hip_L/Knee_L/Ankle_L","Root_M/Hip_L/Knee_L/Ankle_L/Toes_L"],[[[7,-1.6073266766851061e-16,-5.002625820273957e-16,1,0,0.9995050430297852,-0.031458914279937744,1.4491539940461042e-16,0,0.031458914279937744,0.9995050430297852,5.050714527667544e-16,0,-0.019512146711349487,0.0004364966880530119,-3.2884277806782753e-18,1],[7,-1.6051606546202993e-16,-4.955657313953114e-16,1,0,0.9981581568717957,-0.06066583842039108,1.3015651204319428e-16,0,0.06066583842039108,0.9981581568717957,5.043908088540763e-16,0,-0.024823229759931564,0.0011626967461779714,-3.024364845781441e-18,1],[7,-0.15891462564468384,-0.016919724643230438,-0.987147331237793,0,0.9815993309020996,0.10451140254735947,-0.1598128229379654,0,0.10587213933467865,-0.9943797588348389,5.446323392277463e-10,0,-0.02677895687520504,-0.0029642386361956596,0.011229886673390865,1],[7,-0.15826688706874847,0.022175027057528496,-0.987147331237793,0,0.977598249912262,-0.13697285950183868,-0.1598128229379654,0,-0.13875624537467957,-0.9903265833854675,5.44632006160839e-10,0,-0.02167670615017414,0.002370338188484311,0.011229886673390865,1],[7,-0.1337725818157196,0.0319434329867363,-0.9904971122741699,0,0.9809468388557434,-0.1378193348646164,-0.13692742586135864,0,-0.14088359475135803,-0.9899421334266663,-0.01289836224168539,0,-0.016554739326238632,0.0023029823787510395,0.010846441611647606,1],[7,-0.010730288922786713,-0.0003671304730232805,-0.9999423623085022,0,-0.9993575811386108,-0.03419242799282074,0.01073656789958477,0,-0.034194398671388626,0.9994152188301086,-2.2132606511404695e-11,0,0.01896691881120205,0.0005232312832958996,-0.0027990643866360188,1],[7,-0.010681620799005032,-0.0010848328238353133,-0.9999423623085022,0,-0.9948249459266663,-0.10103510320186615,0.01073656789958477,0,-0.10104092955589294,0.9948822855949402,-2.213251457106047e-11,0,0.01038399152457714,0.0012213099980726838,-0.0027990643866360188,1],[7,-1.8117590760979851e-10,-0.0015915741678327322,-0.9999987483024597,0,-1,-7.552468872518148e-8,3.013794214190568e-10,0,-7.552507241825879e-8,0.9999987483024597,-0.0015915741678327322,0,0.002713743830099702,0.0009506093338131905,-0.0027716041076928377,1],[7,7.942823003759258e-7,6.541559827155652e-8,-1,0,-0.08185373991727829,0.9966443777084351,1.8111570576628822e-10,0,0.9966443777084351,0.08185373991727829,7.96971448835393e-7,0,-0.0015626671956852078,-0.0007490511634387076,-0.0027741852682083845,1],[7,-0.010730288922786713,-0.0003671304730232805,-0.9999423623085022,0,0.9993575811386108,0.03419242799282074,-0.01073656789958477,0,0.034194398671388626,-0.9994152188301086,2.2804104762017604e-15,0,-0.01896691881120205,-0.0005232313415035605,0.0027990643866360188,1],[7,-0.010681620799005032,-0.0010848328238353133,-0.9999423623085022,0,0.9948249459266663,0.10103511065244675,-0.01073656789958477,0,0.10104092955589294,-0.9948822855949402,2.2699371255671978e-15,0,-0.01038399152457714,-0.0012213099980726838,0.0027990643866360188,1],[7,-1.8150986269560576e-10,-0.0015915741678327322,-0.9999987483024597,0,1,7.69743095929698e-8,-3.0402055872791323e-10,0,7.697469328604711e-8,-0.9999987483024597,0.0015915741678327322,0,-0.002713743830099702,-0.0009506093920208514,0.0027716041076928377,1],[7,-7.873639447097958e-7,-6.519635320501038e-8,-1,0,0.08185373991727829,-0.9966443777084351,5.288988691454222e-10,0,-0.9966443777084351,-0.08185373991727829,7.900583796072169e-7,0,0.0015626716194674373,0.0007490515126846731,0.0027741827070713043,1]],8,8,8,8,8,8,8,8,8,8,8,8,8]]],0,0,[],[],[]],[[[10,".bin",3090674825,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":171144,"length":20664,"count":5166,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":171144,"count":2377,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,1,2,3,4,5,9,13,14,15,16]]},"minPosition",8,[1,-0.005051802843809128,0.016844069585204124,-0.005326585378497839],"maxPosition",8,[1,0.005051802843809128,0.03112988919019699,0.004788977559655905]]],-1],0,0,[],[],[]],[[[12,"Skin-1",2603301272,["Root_M/Spine1_M","Root_M/Spine1_M/Chest_M","Root_M/Spine1_M/Chest_M/Neck_M","Root_M/Spine1_M/Chest_M/Neck_M/Head_M","Root_M/Spine1_M/Chest_M/Scapula_R","Root_M/Spine1_M/Chest_M/Scapula_L"],[[[7,-1.6051606546202993e-16,-4.955657313953114e-16,1,0,0.9981581568717957,-0.06066583842039108,1.3015651204319428e-16,0,0.06066583842039108,0.9981581568717957,5.043908088540763e-16,0,-0.024823229759931564,0.0011626967461779714,-3.024364845781441e-18,1],[7,-1.6073587051184242e-16,-5.003653906513687e-16,1,0,0.9995249509811401,-0.03081941418349743,1.4523855570887774e-16,0,0.03081941418349743,0.9995249509811401,5.05081511283003e-16,0,-0.02732432447373867,0.0003465543850325048,-1.9691652799332707e-18,1],[7,5.751306066253416e-17,-4.843061753670192e-16,1,0,0.9392595887184143,0.34320753812789917,1.1219782537462701e-16,0,-0.34320753812789917,0.9392595887184143,4.746281357303692e-16,0,-0.02801189385354519,-0.010852459818124771,-9.365741732283693e-18,1],[7,-1.6081226229577292e-16,-5.053215392444312e-16,1,0,1,-2.0489094865183688e-8,1.6081224906088311e-16,0,2.0489094865183688e-8,1,5.053215392444312e-16,0,-0.03196112811565399,0.00012439562124200165,-9.574726432503377e-18,1],[7,-0.9999274015426636,-0.0000014861826684864354,-0.012051843106746674,0,-0.012051843106746674,0.00012334794155322015,0.9999273419380188,0,4.953271126595382e-10,1,-0.00012335690553300083,0,-0.002503913827240467,0.00010892027785303071,-0.028479700908064842,1],[7,-0.9999274015426636,-0.000001486659016336489,-0.012051837518811226,0,0.0120518384501338,-0.00012334641360212117,-0.9999273419380188,0,-9.146007654567759e-16,-1,0.00012335537758190185,0,0.0028796999249607325,-0.0001089197612600401,0.028484230861067772,1]],8,8,8,8,8,8]]],0,0,[],[],[]],[[[10,".bin",898411461,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":121536,"length":13656,"count":3414,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":121536,"count":1688,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,5,9,10,11,12]]},"minPosition",8,[1,0.0003719171218108386,-2.770612539393369e-8,-0.0028996625915169716],"maxPosition",8,[1,0.008162803947925568,0.019594445824623108,0.004642312414944172]]],-1],0,0,[],[],[]],[[{"name":"line-001","rect":{"x":0,"y":0,"width":53,"height":12},"offset":{"x":0,"y":0},"originalSize":{"width":53,"height":12},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[4],0,[0],[11],[68]],[[[39,"1",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{}],[{"USE_LIGHTMAP":true,"USE_ALBEDO_MAP":true},{},{}],[[[{},"mainTexture",6,0],{},{}],11,0,0]]],0,0,[0,0],[8,7],[69,4]],[[[34,"sfx_lose",".mp3",1.157333],-1],0,0,[],[],[]],[[{"base":"2,2,0,0,2,0","rgbe":false,"mipmaps":[{"front":"6f01cf7f-81bf-4a7e-bd5d-0afc19696480@b47c0@e9a6d","back":"6f01cf7f-81bf-4a7e-bd5d-0afc19696480@b47c0@40c10","left":"6f01cf7f-81bf-4a7e-bd5d-0afc19696480@b47c0@8fd34","right":"6f01cf7f-81bf-4a7e-bd5d-0afc19696480@b47c0@74afd","top":"6f01cf7f-81bf-4a7e-bd5d-0afc19696480@b47c0@bb97f","bottom":"6f01cf7f-81bf-4a7e-bd5d-0afc19696480@b47c0@7d38f"}]}],[19],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[2],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[2],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[2],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[2],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[2],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[2],0,[],[],[]],[[{"name":"fail","rect":{"x":0,"y":0,"width":466,"height":309},"offset":{"x":0,"y":0},"originalSize":{"width":466,"height":309},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[4],0,[0],[11],[70]],[[{"name":"default_sprite_splash","rect":{"x":0,"y":0,"width":2,"height":2},"offset":{"x":0,"y":0},"originalSize":{"width":2,"height":2},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[4],0,[0],[11],[71]],[[[34,"Boom Long",".mp3",4.493061],-1],0,0,[],[],[]],[[[39,"1",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{}],[{"USE_LIGHTMAP":true,"USE_ALBEDO_MAP":true},{},{}],[[[{},"mainTexture",6,0],{},{}],11,0,0]]],0,0,[0,0],[8,7],[72,4]],[[{"name":"hand","rect":{"x":0,"y":0,"width":201,"height":257},"offset":{"x":0,"y":0},"originalSize":{"width":201,"height":257},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[4],0,[0],[11],[73]],[[[12,"Skin-4",1168153290,["Root_M/Hip_L/Knee_L/Ankle_L/Toes_L","Root_M/Hip_L/Knee_L/Ankle_L","Root_M/Hip_L/Knee_L","Root_M/Hip_L","Root_M/Hip_R/Knee_R/Ankle_R/Toes_R","Root_M/Hip_R/Knee_R/Ankle_R","Root_M/Hip_R/Knee_R","Root_M/Hip_R","Root_M/Spine1_M/Chest_M/Scapula_L/Shoulder_L/Elbow_L/Wrist_L","Root_M/Spine1_M/Chest_M/Scapula_L/Shoulder_L/Elbow_L","Root_M/Spine1_M/Chest_M/Scapula_L/Shoulder_L","Root_M/Spine1_M/Chest_M/Scapula_L","Root_M/Spine1_M/Chest_M/Scapula_R/Shoulder_R/Elbow_R/Wrist_R","Root_M/Spine1_M/Chest_M/Scapula_R/Shoulder_R/Elbow_R","Root_M/Spine1_M/Chest_M/Scapula_R/Shoulder_R","Root_M/Spine1_M/Chest_M/Scapula_R","Root_M/Spine1_M/Chest_M/Neck_M/Head_M","Root_M/Spine1_M/Chest_M/Neck_M","Root_M/Spine1_M/Chest_M","Root_M/Spine1_M","Root_M"],[[[7,-7.873639447097958e-7,-6.519635320501038e-8,-1,0,0.08185373991727829,-0.9966443777084351,5.288988691454222e-10,0,-0.9966443777084351,-0.08185373991727829,7.900583796072169e-7,0,0.0015626716194674373,0.0007490515126846731,0.0027741827070713043,1],[7,-1.8150986269560576e-10,-0.0015915741678327322,-0.9999987483024597,0,1,7.69743095929698e-8,-3.0402055872791323e-10,0,7.697469328604711e-8,-0.9999987483024597,0.0015915741678327322,0,-0.002713743830099702,-0.0009506093920208514,0.0027716041076928377,1],[7,-0.010681620799005032,-0.0010848328238353133,-0.9999423623085022,0,0.9948249459266663,0.10103511065244675,-0.01073656789958477,0,0.10104092955589294,-0.9948822855949402,2.2699371255671978e-15,0,-0.01038399152457714,-0.0012213099980726838,0.0027990643866360188,1],[7,-0.010730288922786713,-0.0003671304730232805,-0.9999423623085022,0,0.9993575811386108,0.03419242799282074,-0.01073656789958477,0,0.034194398671388626,-0.9994152188301086,2.2804104762017604e-15,0,-0.01896691881120205,-0.0005232313415035605,0.0027990643866360188,1],[7,7.942823003759258e-7,6.541559827155652e-8,-1,0,-0.08185373991727829,0.9966443777084351,1.8111570576628822e-10,0,0.9966443777084351,0.08185373991727829,7.96971448835393e-7,0,-0.0015626671956852078,-0.0007490511634387076,-0.0027741852682083845,1],[7,-1.8117590760979851e-10,-0.0015915741678327322,-0.9999987483024597,0,-1,-7.552468872518148e-8,3.013794214190568e-10,0,-7.552507241825879e-8,0.9999987483024597,-0.0015915741678327322,0,0.002713743830099702,0.0009506093338131905,-0.0027716041076928377,1],[7,-0.010681620799005032,-0.0010848328238353133,-0.9999423623085022,0,-0.9948249459266663,-0.10103510320186615,0.01073656789958477,0,-0.10104092955589294,0.9948822855949402,-2.213251457106047e-11,0,0.01038399152457714,0.0012213099980726838,-0.0027990643866360188,1],[7,-0.010730288922786713,-0.0003671304730232805,-0.9999423623085022,0,-0.9993575811386108,-0.03419242799282074,0.01073656789958477,0,-0.034194398671388626,0.9994152188301086,-2.2132606511404695e-11,0,0.01896691881120205,0.0005232312832958996,-0.0027990643866360188,1],[7,-0.003217601217329502,0.013486070558428764,-0.9999038577079773,0,0.9900209307670593,-0.14082854986190796,-0.005085205193608999,0,-0.14088359475135803,-0.9899421334266663,-0.01289836224168539,0,-0.01772109419107437,0.0025276578962802887,0.006342135835438967,1],[7,-0.027939576655626297,0.003914658445864916,-0.9996019601821899,0,0.9899323582649231,-0.13870102167129517,-0.02821248769760132,0,-0.13875624537467957,-0.9903265833854675,5.44632006160839e-10,0,-0.022954469546675682,0.0025493649300187826,0.006753850262612104,1],[7,-0.028053926303982735,-0.0029869170393794775,-0.9996019601821899,0,0.9939839243888855,0.10582999885082245,-0.02821248769760132,0,0.10587213933467865,-0.9943797588348389,5.446323392277463e-10,0,-0.028061948716640472,-0.0031008420046418905,0.006753850262612104,1],[7,-0.9999274015426636,-0.000001486659016336489,-0.012051837518811226,0,0.0120518384501338,-0.00012334641360212117,-0.9999273419380188,0,-9.146007654567759e-16,-1,0.00012335537758190185,0,0.0026569380424916744,-0.00010892009595409036,0.02848154492676258,1],[7,-0.003217607969418168,0.013486023992300034,-0.9999038577079773,0,-0.9900209307670593,0.14082854986190796,0.005085205193608999,0,0.14088359475135803,0.9899421334266663,0.01289831567555666,0,0.01772116683423519,-0.0025277347303926945,-0.006337270140647888,1],[7,-0.027939582243561745,0.003914611879736185,-0.9996019601821899,0,-0.9899323582649231,0.13870102167129517,0.02821248769760132,0,0.13875624537467957,0.9903265833854675,-4.755057858574219e-8,0,0.022954663261771202,-0.002549394965171814,-0.00674898736178875,1],[7,-0.028053922578692436,-0.0029869636055082083,-0.9996019601821899,0,-0.9939839243888855,-0.10582999140024185,0.02821248769760132,0,-0.10587213933467865,0.9943797588348389,-4.755057858574219e-8,0,0.028062142431735992,0.0031008596997708082,-0.00674898736178875,1],[7,-0.9999274015426636,-0.0000014861826684864354,-0.012051843106746674,0,-0.012051843106746674,0.00012334794155322015,0.9999273419380188,0,4.953271126595382e-10,1,-0.00012335690553300083,0,-0.0026569380424916744,0.00010892005229834467,-0.02848154492676258,1],[7,-1.6081226229577292e-16,-5.053215392444312e-16,1,0,1,-2.0489094865183688e-8,1.6081224906088311e-16,0,2.0489094865183688e-8,1,5.053215392444312e-16,0,-0.03196112811565399,0.00012439562124200165,-9.574726432503377e-18,1],[7,5.751306066253416e-17,-4.843061753670192e-16,1,0,0.9392595887184143,0.34320753812789917,1.1219782537462701e-16,0,-0.34320753812789917,0.9392595887184143,4.746281357303692e-16,0,-0.02801189385354519,-0.010852459818124771,-9.365741732283693e-18,1],[7,-1.6073587051184242e-16,-5.003653906513687e-16,1,0,0.9995249509811401,-0.03081941418349743,1.4523855570887774e-16,0,0.03081941418349743,0.9995249509811401,5.05081511283003e-16,0,-0.02732432447373867,0.0003465543850325048,-1.9691652799332707e-18,1],[7,-1.6051606546202993e-16,-4.955657313953114e-16,1,0,0.9981581568717957,-0.06066583842039108,1.3015651204319428e-16,0,0.06066583842039108,0.9981581568717957,5.043908088540763e-16,0,-0.024823229759931564,0.0011626967461779714,-3.024364845781441e-18,1],[7,-1.6073266766851061e-16,-5.002625820273957e-16,1,0,0.9995050430297852,-0.031458914279937744,1.4491539940461042e-16,0,0.031458914279937744,0.9995050430297852,5.050714527667544e-16,0,-0.019512146711349487,0.0004364966880530119,-3.2884277806782753e-18,1]],8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]]],0,0,[],[],[]],[[[10,".bin",2962585139,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":2448,"length":240,"count":60,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":2448,"count":34,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,13]]},"minPosition",8,[1,-0.008023867383599281,0.010855235159397125,-0.0010978318750858307],"maxPosition",8,[1,-0.00751897506415844,0.021163325756788254,0.0007600172539241612]]],-1],0,0,[],[],[]],[[[12,"Skin-0",1168153290,["Root_M/Hip_L/Knee_L/Ankle_L/Toes_L","Root_M/Hip_L/Knee_L/Ankle_L","Root_M/Hip_L/Knee_L","Root_M/Hip_L","Root_M/Hip_R/Knee_R/Ankle_R/Toes_R","Root_M/Hip_R/Knee_R/Ankle_R","Root_M/Hip_R/Knee_R","Root_M/Hip_R","Root_M/Spine1_M/Chest_M/Scapula_L/Shoulder_L/Elbow_L/Wrist_L","Root_M/Spine1_M/Chest_M/Scapula_L/Shoulder_L/Elbow_L","Root_M/Spine1_M/Chest_M/Scapula_L/Shoulder_L","Root_M/Spine1_M/Chest_M/Scapula_L","Root_M/Spine1_M/Chest_M/Scapula_R/Shoulder_R/Elbow_R/Wrist_R","Root_M/Spine1_M/Chest_M/Scapula_R/Shoulder_R/Elbow_R","Root_M/Spine1_M/Chest_M/Scapula_R/Shoulder_R","Root_M/Spine1_M/Chest_M/Scapula_R","Root_M/Spine1_M/Chest_M/Neck_M/Head_M","Root_M/Spine1_M/Chest_M/Neck_M","Root_M/Spine1_M/Chest_M","Root_M/Spine1_M","Root_M"],[[[7,-7.873639447097958e-7,-6.519635320501038e-8,-1,0,0.08185373991727829,-0.9966443777084351,5.288988691454222e-10,0,-0.9966443777084351,-0.08185373991727829,7.900583796072169e-7,0,0.0015626716194674373,0.0007490515126846731,0.0027741827070713043,1],[7,-1.8150986269560576e-10,-0.0015915741678327322,-0.9999987483024597,0,1,7.69743095929698e-8,-3.0402055872791323e-10,0,7.697469328604711e-8,-0.9999987483024597,0.0015915741678327322,0,-0.002713743830099702,-0.0009506093920208514,0.0027716041076928377,1],[7,-0.010681620799005032,-0.0010848328238353133,-0.9999423623085022,0,0.9948249459266663,0.10103511065244675,-0.01073656789958477,0,0.10104092955589294,-0.9948822855949402,2.2699371255671978e-15,0,-0.01038399152457714,-0.0012213099980726838,0.0027990643866360188,1],[7,-0.010730288922786713,-0.0003671304730232805,-0.9999423623085022,0,0.9993575811386108,0.03419242799282074,-0.01073656789958477,0,0.034194398671388626,-0.9994152188301086,2.2804104762017604e-15,0,-0.01896691881120205,-0.0005232313415035605,0.0027990643866360188,1],[7,7.942823003759258e-7,6.541559827155652e-8,-1,0,-0.08185373991727829,0.9966443777084351,1.8111570576628822e-10,0,0.9966443777084351,0.08185373991727829,7.96971448835393e-7,0,-0.0015626671956852078,-0.0007490511634387076,-0.0027741852682083845,1],[7,-1.8117590760979851e-10,-0.0015915741678327322,-0.9999987483024597,0,-1,-7.552468872518148e-8,3.013794214190568e-10,0,-7.552507241825879e-8,0.9999987483024597,-0.0015915741678327322,0,0.002713743830099702,0.0009506093338131905,-0.0027716041076928377,1],[7,-0.010681620799005032,-0.0010848328238353133,-0.9999423623085022,0,-0.9948249459266663,-0.10103510320186615,0.01073656789958477,0,-0.10104092955589294,0.9948822855949402,-2.213251457106047e-11,0,0.01038399152457714,0.0012213099980726838,-0.0027990643866360188,1],[7,-0.010730288922786713,-0.0003671304730232805,-0.9999423623085022,0,-0.9993575811386108,-0.03419242799282074,0.01073656789958477,0,-0.034194398671388626,0.9994152188301086,-2.2132606511404695e-11,0,0.01896691881120205,0.0005232312832958996,-0.0027990643866360188,1],[7,-0.003217601217329502,0.013486070558428764,-0.9999038577079773,0,0.9900209307670593,-0.14082854986190796,-0.005085205193608999,0,-0.14088359475135803,-0.9899421334266663,-0.01289836224168539,0,-0.01772109419107437,0.0025276578962802887,0.006342135835438967,1],[7,-0.027939576655626297,0.003914658445864916,-0.9996019601821899,0,0.9899323582649231,-0.13870102167129517,-0.02821248769760132,0,-0.13875624537467957,-0.9903265833854675,5.44632006160839e-10,0,-0.022954469546675682,0.0025493649300187826,0.006753850262612104,1],[7,-0.028053926303982735,-0.0029869170393794775,-0.9996019601821899,0,0.9939839243888855,0.10582999885082245,-0.02821248769760132,0,0.10587213933467865,-0.9943797588348389,5.446323392277463e-10,0,-0.028061948716640472,-0.0031008420046418905,0.006753850262612104,1],[7,-0.9999274015426636,-0.000001486659016336489,-0.012051837518811226,0,0.0120518384501338,-0.00012334641360212117,-0.9999273419380188,0,-9.146007654567759e-16,-1,0.00012335537758190185,0,0.0026569380424916744,-0.00010892009595409036,0.02848154492676258,1],[7,-0.003217607969418168,0.013486023992300034,-0.9999038577079773,0,-0.9900209307670593,0.14082854986190796,0.005085205193608999,0,0.14088359475135803,0.9899421334266663,0.01289831567555666,0,0.01772116683423519,-0.0025277347303926945,-0.006337270140647888,1],[7,-0.027939582243561745,0.003914611879736185,-0.9996019601821899,0,-0.9899323582649231,0.13870102167129517,0.02821248769760132,0,0.13875624537467957,0.9903265833854675,-4.755057858574219e-8,0,0.022954663261771202,-0.002549394965171814,-0.00674898736178875,1],[7,-0.028053922578692436,-0.0029869636055082083,-0.9996019601821899,0,-0.9939839243888855,-0.10582999140024185,0.02821248769760132,0,-0.10587213933467865,0.9943797588348389,-4.755057858574219e-8,0,0.028062142431735992,0.0031008596997708082,-0.00674898736178875,1],[7,-0.9999274015426636,-0.0000014861826684864354,-0.012051843106746674,0,-0.012051843106746674,0.00012334794155322015,0.9999273419380188,0,4.953271126595382e-10,1,-0.00012335690553300083,0,-0.0026569380424916744,0.00010892005229834467,-0.02848154492676258,1],[7,-1.6081226229577292e-16,-5.053215392444312e-16,1,0,1,-2.0489094865183688e-8,1.6081224906088311e-16,0,2.0489094865183688e-8,1,5.053215392444312e-16,0,-0.03196112811565399,0.00012439562124200165,-9.574726432503377e-18,1],[7,5.751306066253416e-17,-4.843061753670192e-16,1,0,0.9392595887184143,0.34320753812789917,1.1219782537462701e-16,0,-0.34320753812789917,0.9392595887184143,4.746281357303692e-16,0,-0.02801189385354519,-0.010852459818124771,-9.365741732283693e-18,1],[7,-1.6073587051184242e-16,-5.003653906513687e-16,1,0,0.9995249509811401,-0.03081941418349743,1.4523855570887774e-16,0,0.03081941418349743,0.9995249509811401,5.05081511283003e-16,0,-0.02732432447373867,0.0003465543850325048,-1.9691652799332707e-18,1],[7,-1.6051606546202993e-16,-4.955657313953114e-16,1,0,0.9981581568717957,-0.06066583842039108,1.3015651204319428e-16,0,0.06066583842039108,0.9981581568717957,5.043908088540763e-16,0,-0.024823229759931564,0.0011626967461779714,-3.024364845781441e-18,1],[7,-1.6073266766851061e-16,-5.002625820273957e-16,1,0,0.9995050430297852,-0.031458914279937744,1.4491539940461042e-16,0,0.031458914279937744,0.9995050430297852,5.050714527667544e-16,0,-0.019512146711349487,0.0004364966880530119,-3.2884277806782753e-18,1]],8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]]],0,0,[],[],[]],[[[12,"Skin-5",1168153290,["Root_M/Hip_L/Knee_L/Ankle_L/Toes_L","Root_M/Hip_L/Knee_L/Ankle_L","Root_M/Hip_L/Knee_L","Root_M/Hip_L","Root_M/Hip_R/Knee_R/Ankle_R/Toes_R","Root_M/Hip_R/Knee_R/Ankle_R","Root_M/Hip_R/Knee_R","Root_M/Hip_R","Root_M/Spine1_M/Chest_M/Scapula_L/Shoulder_L/Elbow_L/Wrist_L","Root_M/Spine1_M/Chest_M/Scapula_L/Shoulder_L/Elbow_L","Root_M/Spine1_M/Chest_M/Scapula_L/Shoulder_L","Root_M/Spine1_M/Chest_M/Scapula_L","Root_M/Spine1_M/Chest_M/Scapula_R/Shoulder_R/Elbow_R/Wrist_R","Root_M/Spine1_M/Chest_M/Scapula_R/Shoulder_R/Elbow_R","Root_M/Spine1_M/Chest_M/Scapula_R/Shoulder_R","Root_M/Spine1_M/Chest_M/Scapula_R","Root_M/Spine1_M/Chest_M/Neck_M/Head_M","Root_M/Spine1_M/Chest_M/Neck_M","Root_M/Spine1_M/Chest_M","Root_M/Spine1_M","Root_M"],[[[7,-7.873639447097958e-7,-6.519635320501038e-8,-1,0,0.08185373991727829,-0.9966443777084351,5.288988691454222e-10,0,-0.9966443777084351,-0.08185373991727829,7.900583796072169e-7,0,0.0015626716194674373,0.0007490515126846731,0.0027741827070713043,1],[7,-1.8150986269560576e-10,-0.0015915741678327322,-0.9999987483024597,0,1,7.69743095929698e-8,-3.0402055872791323e-10,0,7.697469328604711e-8,-0.9999987483024597,0.0015915741678327322,0,-0.002713743830099702,-0.0009506093920208514,0.0027716041076928377,1],[7,-0.010681620799005032,-0.0010848328238353133,-0.9999423623085022,0,0.9948249459266663,0.10103511065244675,-0.01073656789958477,0,0.10104092955589294,-0.9948822855949402,2.2699371255671978e-15,0,-0.01038399152457714,-0.0012213099980726838,0.0027990643866360188,1],[7,-0.010730288922786713,-0.0003671304730232805,-0.9999423623085022,0,0.9993575811386108,0.03419242799282074,-0.01073656789958477,0,0.034194398671388626,-0.9994152188301086,2.2804104762017604e-15,0,-0.01896691881120205,-0.0005232313415035605,0.0027990643866360188,1],[7,7.942823003759258e-7,6.541559827155652e-8,-1,0,-0.08185373991727829,0.9966443777084351,1.8111570576628822e-10,0,0.9966443777084351,0.08185373991727829,7.96971448835393e-7,0,-0.0015626671956852078,-0.0007490511634387076,-0.0027741852682083845,1],[7,-1.8117590760979851e-10,-0.0015915741678327322,-0.9999987483024597,0,-1,-7.552468872518148e-8,3.013794214190568e-10,0,-7.552507241825879e-8,0.9999987483024597,-0.0015915741678327322,0,0.002713743830099702,0.0009506093338131905,-0.0027716041076928377,1],[7,-0.010681620799005032,-0.0010848328238353133,-0.9999423623085022,0,-0.9948249459266663,-0.10103510320186615,0.01073656789958477,0,-0.10104092955589294,0.9948822855949402,-2.213251457106047e-11,0,0.01038399152457714,0.0012213099980726838,-0.0027990643866360188,1],[7,-0.010730288922786713,-0.0003671304730232805,-0.9999423623085022,0,-0.9993575811386108,-0.03419242799282074,0.01073656789958477,0,-0.034194398671388626,0.9994152188301086,-2.2132606511404695e-11,0,0.01896691881120205,0.0005232312832958996,-0.0027990643866360188,1],[7,-0.003217601217329502,0.013486070558428764,-0.9999038577079773,0,0.9900209307670593,-0.14082854986190796,-0.005085205193608999,0,-0.14088359475135803,-0.9899421334266663,-0.01289836224168539,0,-0.01772109419107437,0.0025276578962802887,0.006342135835438967,1],[7,-0.027939576655626297,0.003914658445864916,-0.9996019601821899,0,0.9899323582649231,-0.13870102167129517,-0.02821248769760132,0,-0.13875624537467957,-0.9903265833854675,5.44632006160839e-10,0,-0.022954469546675682,0.0025493649300187826,0.006753850262612104,1],[7,-0.028053926303982735,-0.0029869170393794775,-0.9996019601821899,0,0.9939839243888855,0.10582999885082245,-0.02821248769760132,0,0.10587213933467865,-0.9943797588348389,5.446323392277463e-10,0,-0.028061948716640472,-0.0031008420046418905,0.006753850262612104,1],[7,-0.9999274015426636,-0.000001486659016336489,-0.012051837518811226,0,0.0120518384501338,-0.00012334641360212117,-0.9999273419380188,0,-9.146007654567759e-16,-1,0.00012335537758190185,0,0.0026569380424916744,-0.00010892009595409036,0.02848154492676258,1],[7,-0.003217607969418168,0.013486023992300034,-0.9999038577079773,0,-0.9900209307670593,0.14082854986190796,0.005085205193608999,0,0.14088359475135803,0.9899421334266663,0.01289831567555666,0,0.01772116683423519,-0.0025277347303926945,-0.006337270140647888,1],[7,-0.027939582243561745,0.003914611879736185,-0.9996019601821899,0,-0.9899323582649231,0.13870102167129517,0.02821248769760132,0,0.13875624537467957,0.9903265833854675,-4.755057858574219e-8,0,0.022954663261771202,-0.002549394965171814,-0.00674898736178875,1],[7,-0.028053922578692436,-0.0029869636055082083,-0.9996019601821899,0,-0.9939839243888855,-0.10582999140024185,0.02821248769760132,0,-0.10587213933467865,0.9943797588348389,-4.755057858574219e-8,0,0.028062142431735992,0.0031008596997708082,-0.00674898736178875,1],[7,-0.9999274015426636,-0.0000014861826684864354,-0.012051843106746674,0,-0.012051843106746674,0.00012334794155322015,0.9999273419380188,0,4.953271126595382e-10,1,-0.00012335690553300083,0,-0.0026569380424916744,0.00010892005229834467,-0.02848154492676258,1],[7,-1.6081226229577292e-16,-5.053215392444312e-16,1,0,1,-2.0489094865183688e-8,1.6081224906088311e-16,0,2.0489094865183688e-8,1,5.053215392444312e-16,0,-0.03196112811565399,0.00012439562124200165,-9.574726432503377e-18,1],[7,5.751306066253416e-17,-4.843061753670192e-16,1,0,0.9392595887184143,0.34320753812789917,1.1219782537462701e-16,0,-0.34320753812789917,0.9392595887184143,4.746281357303692e-16,0,-0.02801189385354519,-0.010852459818124771,-9.365741732283693e-18,1],[7,-1.6073587051184242e-16,-5.003653906513687e-16,1,0,0.9995249509811401,-0.03081941418349743,1.4523855570887774e-16,0,0.03081941418349743,0.9995249509811401,5.05081511283003e-16,0,-0.02732432447373867,0.0003465543850325048,-1.9691652799332707e-18,1],[7,-1.6051606546202993e-16,-4.955657313953114e-16,1,0,0.9981581568717957,-0.06066583842039108,1.3015651204319428e-16,0,0.06066583842039108,0.9981581568717957,5.043908088540763e-16,0,-0.024823229759931564,0.0011626967461779714,-3.024364845781441e-18,1],[7,-1.6073266766851061e-16,-5.002625820273957e-16,1,0,0.9995050430297852,-0.031458914279937744,1.4491539940461042e-16,0,0.031458914279937744,0.9995050430297852,5.050714527667544e-16,0,-0.019512146711349487,0.0004364966880530119,-3.2884277806782753e-18,1]],8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]]],0,0,[],[],[]],[[[10,".bin",1211064435,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":2448,"length":240,"count":60,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":2448,"count":34,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,9]]},"minPosition",8,[1,0.00751897506415844,0.010855235159397125,-0.0010978318750858307],"maxPosition",8,[1,0.008023867383599281,0.021163325756788254,0.0007600172539241612]]],-1],0,0,[],[],[]],[[[10,".bin",59570062,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":72936,"length":8244,"count":2061,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":72936,"count":1013,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,8,9,10,11]]},"minPosition",8,[1,0.0035619097761809826,0.015794306993484497,-0.0023642261512577534],"maxPosition",8,[1,0.009521526284515858,0.0326291024684906,0.0016573353204876184]]],-1],0,0,[],[],[]],[[[12,"Skin-2",1168153290,["Root_M/Hip_L/Knee_L/Ankle_L/Toes_L","Root_M/Hip_L/Knee_L/Ankle_L","Root_M/Hip_L/Knee_L","Root_M/Hip_L","Root_M/Hip_R/Knee_R/Ankle_R/Toes_R","Root_M/Hip_R/Knee_R/Ankle_R","Root_M/Hip_R/Knee_R","Root_M/Hip_R","Root_M/Spine1_M/Chest_M/Scapula_L/Shoulder_L/Elbow_L/Wrist_L","Root_M/Spine1_M/Chest_M/Scapula_L/Shoulder_L/Elbow_L","Root_M/Spine1_M/Chest_M/Scapula_L/Shoulder_L","Root_M/Spine1_M/Chest_M/Scapula_L","Root_M/Spine1_M/Chest_M/Scapula_R/Shoulder_R/Elbow_R/Wrist_R","Root_M/Spine1_M/Chest_M/Scapula_R/Shoulder_R/Elbow_R","Root_M/Spine1_M/Chest_M/Scapula_R/Shoulder_R","Root_M/Spine1_M/Chest_M/Scapula_R","Root_M/Spine1_M/Chest_M/Neck_M/Head_M","Root_M/Spine1_M/Chest_M/Neck_M","Root_M/Spine1_M/Chest_M","Root_M/Spine1_M","Root_M"],[[[7,-7.873639447097958e-7,-6.519635320501038e-8,-1,0,0.08185373991727829,-0.9966443777084351,5.288988691454222e-10,0,-0.9966443777084351,-0.08185373991727829,7.900583796072169e-7,0,0.0015626716194674373,0.0007490515126846731,0.0027741827070713043,1],[7,-1.8150986269560576e-10,-0.0015915741678327322,-0.9999987483024597,0,1,7.69743095929698e-8,-3.0402055872791323e-10,0,7.697469328604711e-8,-0.9999987483024597,0.0015915741678327322,0,-0.002713743830099702,-0.0009506093920208514,0.0027716041076928377,1],[7,-0.010681620799005032,-0.0010848328238353133,-0.9999423623085022,0,0.9948249459266663,0.10103511065244675,-0.01073656789958477,0,0.10104092955589294,-0.9948822855949402,2.2699371255671978e-15,0,-0.01038399152457714,-0.0012213099980726838,0.0027990643866360188,1],[7,-0.010730288922786713,-0.0003671304730232805,-0.9999423623085022,0,0.9993575811386108,0.03419242799282074,-0.01073656789958477,0,0.034194398671388626,-0.9994152188301086,2.2804104762017604e-15,0,-0.01896691881120205,-0.0005232313415035605,0.0027990643866360188,1],[7,7.942823003759258e-7,6.541559827155652e-8,-1,0,-0.08185373991727829,0.9966443777084351,1.8111570576628822e-10,0,0.9966443777084351,0.08185373991727829,7.96971448835393e-7,0,-0.0015626671956852078,-0.0007490511634387076,-0.0027741852682083845,1],[7,-1.8117590760979851e-10,-0.0015915741678327322,-0.9999987483024597,0,-1,-7.552468872518148e-8,3.013794214190568e-10,0,-7.552507241825879e-8,0.9999987483024597,-0.0015915741678327322,0,0.002713743830099702,0.0009506093338131905,-0.0027716041076928377,1],[7,-0.010681620799005032,-0.0010848328238353133,-0.9999423623085022,0,-0.9948249459266663,-0.10103510320186615,0.01073656789958477,0,-0.10104092955589294,0.9948822855949402,-2.213251457106047e-11,0,0.01038399152457714,0.0012213099980726838,-0.0027990643866360188,1],[7,-0.010730288922786713,-0.0003671304730232805,-0.9999423623085022,0,-0.9993575811386108,-0.03419242799282074,0.01073656789958477,0,-0.034194398671388626,0.9994152188301086,-2.2132606511404695e-11,0,0.01896691881120205,0.0005232312832958996,-0.0027990643866360188,1],[7,-0.003217601217329502,0.013486070558428764,-0.9999038577079773,0,0.9900209307670593,-0.14082854986190796,-0.005085205193608999,0,-0.14088359475135803,-0.9899421334266663,-0.01289836224168539,0,-0.01772109419107437,0.0025276578962802887,0.006342135835438967,1],[7,-0.027939576655626297,0.003914658445864916,-0.9996019601821899,0,0.9899323582649231,-0.13870102167129517,-0.02821248769760132,0,-0.13875624537467957,-0.9903265833854675,5.44632006160839e-10,0,-0.022954469546675682,0.0025493649300187826,0.006753850262612104,1],[7,-0.028053926303982735,-0.0029869170393794775,-0.9996019601821899,0,0.9939839243888855,0.10582999885082245,-0.02821248769760132,0,0.10587213933467865,-0.9943797588348389,5.446323392277463e-10,0,-0.028061948716640472,-0.0031008420046418905,0.006753850262612104,1],[7,-0.9999274015426636,-0.000001486659016336489,-0.012051837518811226,0,0.0120518384501338,-0.00012334641360212117,-0.9999273419380188,0,-9.146007654567759e-16,-1,0.00012335537758190185,0,0.0026569380424916744,-0.00010892009595409036,0.02848154492676258,1],[7,-0.003217607969418168,0.013486023992300034,-0.9999038577079773,0,-0.9900209307670593,0.14082854986190796,0.005085205193608999,0,0.14088359475135803,0.9899421334266663,0.01289831567555666,0,0.01772116683423519,-0.0025277347303926945,-0.006337270140647888,1],[7,-0.027939582243561745,0.003914611879736185,-0.9996019601821899,0,-0.9899323582649231,0.13870102167129517,0.02821248769760132,0,0.13875624537467957,0.9903265833854675,-4.755057858574219e-8,0,0.022954663261771202,-0.002549394965171814,-0.00674898736178875,1],[7,-0.028053922578692436,-0.0029869636055082083,-0.9996019601821899,0,-0.9939839243888855,-0.10582999140024185,0.02821248769760132,0,-0.10587213933467865,0.9943797588348389,-4.755057858574219e-8,0,0.028062142431735992,0.0031008596997708082,-0.00674898736178875,1],[7,-0.9999274015426636,-0.0000014861826684864354,-0.012051843106746674,0,-0.012051843106746674,0.00012334794155322015,0.9999273419380188,0,4.953271126595382e-10,1,-0.00012335690553300083,0,-0.0026569380424916744,0.00010892005229834467,-0.02848154492676258,1],[7,-1.6081226229577292e-16,-5.053215392444312e-16,1,0,1,-2.0489094865183688e-8,1.6081224906088311e-16,0,2.0489094865183688e-8,1,5.053215392444312e-16,0,-0.03196112811565399,0.00012439562124200165,-9.574726432503377e-18,1],[7,5.751306066253416e-17,-4.843061753670192e-16,1,0,0.9392595887184143,0.34320753812789917,1.1219782537462701e-16,0,-0.34320753812789917,0.9392595887184143,4.746281357303692e-16,0,-0.02801189385354519,-0.010852459818124771,-9.365741732283693e-18,1],[7,-1.6073587051184242e-16,-5.003653906513687e-16,1,0,0.9995249509811401,-0.03081941418349743,1.4523855570887774e-16,0,0.03081941418349743,0.9995249509811401,5.05081511283003e-16,0,-0.02732432447373867,0.0003465543850325048,-1.9691652799332707e-18,1],[7,-1.6051606546202993e-16,-4.955657313953114e-16,1,0,0.9981581568717957,-0.06066583842039108,1.3015651204319428e-16,0,0.06066583842039108,0.9981581568717957,5.043908088540763e-16,0,-0.024823229759931564,0.0011626967461779714,-3.024364845781441e-18,1],[7,-1.6073266766851061e-16,-5.002625820273957e-16,1,0,0.9995050430297852,-0.031458914279937744,1.4491539940461042e-16,0,0.031458914279937744,0.9995050430297852,5.050714527667544e-16,0,-0.019512146711349487,0.0004364966880530119,-3.2884277806782753e-18,1]],8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]]],0,0,[],[],[]],[[[12,"Skin-6",1168153290,["Root_M/Hip_L/Knee_L/Ankle_L/Toes_L","Root_M/Hip_L/Knee_L/Ankle_L","Root_M/Hip_L/Knee_L","Root_M/Hip_L","Root_M/Hip_R/Knee_R/Ankle_R/Toes_R","Root_M/Hip_R/Knee_R/Ankle_R","Root_M/Hip_R/Knee_R","Root_M/Hip_R","Root_M/Spine1_M/Chest_M/Scapula_L/Shoulder_L/Elbow_L/Wrist_L","Root_M/Spine1_M/Chest_M/Scapula_L/Shoulder_L/Elbow_L","Root_M/Spine1_M/Chest_M/Scapula_L/Shoulder_L","Root_M/Spine1_M/Chest_M/Scapula_L","Root_M/Spine1_M/Chest_M/Scapula_R/Shoulder_R/Elbow_R/Wrist_R","Root_M/Spine1_M/Chest_M/Scapula_R/Shoulder_R/Elbow_R","Root_M/Spine1_M/Chest_M/Scapula_R/Shoulder_R","Root_M/Spine1_M/Chest_M/Scapula_R","Root_M/Spine1_M/Chest_M/Neck_M/Head_M","Root_M/Spine1_M/Chest_M/Neck_M","Root_M/Spine1_M/Chest_M","Root_M/Spine1_M","Root_M"],[[[7,-7.873639447097958e-7,-6.519635320501038e-8,-1,0,0.08185373991727829,-0.9966443777084351,5.288988691454222e-10,0,-0.9966443777084351,-0.08185373991727829,7.900583796072169e-7,0,0.0015626716194674373,0.0007490515126846731,0.0027741827070713043,1],[7,-1.8150986269560576e-10,-0.0015915741678327322,-0.9999987483024597,0,1,7.69743095929698e-8,-3.0402055872791323e-10,0,7.697469328604711e-8,-0.9999987483024597,0.0015915741678327322,0,-0.002713743830099702,-0.0009506093920208514,0.0027716041076928377,1],[7,-0.010681620799005032,-0.0010848328238353133,-0.9999423623085022,0,0.9948249459266663,0.10103511065244675,-0.01073656789958477,0,0.10104092955589294,-0.9948822855949402,2.2699371255671978e-15,0,-0.01038399152457714,-0.0012213099980726838,0.0027990643866360188,1],[7,-0.010730288922786713,-0.0003671304730232805,-0.9999423623085022,0,0.9993575811386108,0.03419242799282074,-0.01073656789958477,0,0.034194398671388626,-0.9994152188301086,2.2804104762017604e-15,0,-0.01896691881120205,-0.0005232313415035605,0.0027990643866360188,1],[7,7.942823003759258e-7,6.541559827155652e-8,-1,0,-0.08185373991727829,0.9966443777084351,1.8111570576628822e-10,0,0.9966443777084351,0.08185373991727829,7.96971448835393e-7,0,-0.0015626671956852078,-0.0007490511634387076,-0.0027741852682083845,1],[7,-1.8117590760979851e-10,-0.0015915741678327322,-0.9999987483024597,0,-1,-7.552468872518148e-8,3.013794214190568e-10,0,-7.552507241825879e-8,0.9999987483024597,-0.0015915741678327322,0,0.002713743830099702,0.0009506093338131905,-0.0027716041076928377,1],[7,-0.010681620799005032,-0.0010848328238353133,-0.9999423623085022,0,-0.9948249459266663,-0.10103510320186615,0.01073656789958477,0,-0.10104092955589294,0.9948822855949402,-2.213251457106047e-11,0,0.01038399152457714,0.0012213099980726838,-0.0027990643866360188,1],[7,-0.010730288922786713,-0.0003671304730232805,-0.9999423623085022,0,-0.9993575811386108,-0.03419242799282074,0.01073656789958477,0,-0.034194398671388626,0.9994152188301086,-2.2132606511404695e-11,0,0.01896691881120205,0.0005232312832958996,-0.0027990643866360188,1],[7,-0.003217601217329502,0.013486070558428764,-0.9999038577079773,0,0.9900209307670593,-0.14082854986190796,-0.005085205193608999,0,-0.14088359475135803,-0.9899421334266663,-0.01289836224168539,0,-0.01772109419107437,0.0025276578962802887,0.006342135835438967,1],[7,-0.027939576655626297,0.003914658445864916,-0.9996019601821899,0,0.9899323582649231,-0.13870102167129517,-0.02821248769760132,0,-0.13875624537467957,-0.9903265833854675,5.44632006160839e-10,0,-0.022954469546675682,0.0025493649300187826,0.006753850262612104,1],[7,-0.028053926303982735,-0.0029869170393794775,-0.9996019601821899,0,0.9939839243888855,0.10582999885082245,-0.02821248769760132,0,0.10587213933467865,-0.9943797588348389,5.446323392277463e-10,0,-0.028061948716640472,-0.0031008420046418905,0.006753850262612104,1],[7,-0.9999274015426636,-0.000001486659016336489,-0.012051837518811226,0,0.0120518384501338,-0.00012334641360212117,-0.9999273419380188,0,-9.146007654567759e-16,-1,0.00012335537758190185,0,0.0026569380424916744,-0.00010892009595409036,0.02848154492676258,1],[7,-0.003217607969418168,0.013486023992300034,-0.9999038577079773,0,-0.9900209307670593,0.14082854986190796,0.005085205193608999,0,0.14088359475135803,0.9899421334266663,0.01289831567555666,0,0.01772116683423519,-0.0025277347303926945,-0.006337270140647888,1],[7,-0.027939582243561745,0.003914611879736185,-0.9996019601821899,0,-0.9899323582649231,0.13870102167129517,0.02821248769760132,0,0.13875624537467957,0.9903265833854675,-4.755057858574219e-8,0,0.022954663261771202,-0.002549394965171814,-0.00674898736178875,1],[7,-0.028053922578692436,-0.0029869636055082083,-0.9996019601821899,0,-0.9939839243888855,-0.10582999140024185,0.02821248769760132,0,-0.10587213933467865,0.9943797588348389,-4.755057858574219e-8,0,0.028062142431735992,0.0031008596997708082,-0.00674898736178875,1],[7,-0.9999274015426636,-0.0000014861826684864354,-0.012051843106746674,0,-0.012051843106746674,0.00012334794155322015,0.9999273419380188,0,4.953271126595382e-10,1,-0.00012335690553300083,0,-0.0026569380424916744,0.00010892005229834467,-0.02848154492676258,1],[7,-1.6081226229577292e-16,-5.053215392444312e-16,1,0,1,-2.0489094865183688e-8,1.6081224906088311e-16,0,2.0489094865183688e-8,1,5.053215392444312e-16,0,-0.03196112811565399,0.00012439562124200165,-9.574726432503377e-18,1],[7,5.751306066253416e-17,-4.843061753670192e-16,1,0,0.9392595887184143,0.34320753812789917,1.1219782537462701e-16,0,-0.34320753812789917,0.9392595887184143,4.746281357303692e-16,0,-0.02801189385354519,-0.010852459818124771,-9.365741732283693e-18,1],[7,-1.6073587051184242e-16,-5.003653906513687e-16,1,0,0.9995249509811401,-0.03081941418349743,1.4523855570887774e-16,0,0.03081941418349743,0.9995249509811401,5.05081511283003e-16,0,-0.02732432447373867,0.0003465543850325048,-1.9691652799332707e-18,1],[7,-1.6051606546202993e-16,-4.955657313953114e-16,1,0,0.9981581568717957,-0.06066583842039108,1.3015651204319428e-16,0,0.06066583842039108,0.9981581568717957,5.043908088540763e-16,0,-0.024823229759931564,0.0011626967461779714,-3.024364845781441e-18,1],[7,-1.6073266766851061e-16,-5.002625820273957e-16,1,0,0.9995050430297852,-0.031458914279937744,1.4491539940461042e-16,0,0.031458914279937744,0.9995050430297852,5.050714527667544e-16,0,-0.019512146711349487,0.0004364966880530119,-3.2884277806782753e-18,1]],8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]]],0,0,[],[],[]],[[[10,".bin",1802743759,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":86976,"length":10536,"count":2634,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":86976,"count":1208,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,1,2,3,20]]},"minPosition",8,[1,0.0009535561548545957,-7.370608123835609e-9,-0.003799456637352705],"maxPosition",8,[1,0.005842541344463825,0.01962107978761196,0.0028437741566449404]]],-1],0,0,[],[],[]],[[[35,"megatexture5",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true}],[[[{"metallic":0.4000000059604645,"roughness":0.7071067690849304},"mainTexture",6,0]],11]]],0,0,[0,0],[8,7],[74,4]],[[[10,".bin",1285690163,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":85248,"length":10392,"count":2598,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":85248,"count":1184,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,4,5,6,7,20]]},"minPosition",8,[1,-0.00583844818174839,1.8676191149147314e-10,-0.003799456637352705],"maxPosition",8,[1,-0.0009591798298060894,0.019621947780251503,0.0028437667060643435]]],-1],0,0,[],[],[]],[[[10,".bin",2426860453,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":73080,"length":8244,"count":2061,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":73080,"count":1015,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,12,13,14,15]]},"minPosition",8,[1,-0.009528715163469315,0.015794329345226288,-0.002364254789426923],"maxPosition",8,[1,-0.003532211994752288,0.0326291024684906,0.001657308777794242]]],-1],0,0,[],[],[]],[[[10,".bin",2180768408,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":220032,"length":25920,"count":6480,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":220032,"count":3056,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,11,15,16,17,18,19,20]]},"minPosition",8,[1,-0.005659661255776882,0.017558548599481583,-0.007011509500443935],"maxPosition",8,[1,0.005659661255776882,0.031901877373456955,0.004147702362388372]]],-1],0,0,[],[],[]],[[[12,"Skin-3",1168153290,["Root_M/Hip_L/Knee_L/Ankle_L/Toes_L","Root_M/Hip_L/Knee_L/Ankle_L","Root_M/Hip_L/Knee_L","Root_M/Hip_L","Root_M/Hip_R/Knee_R/Ankle_R/Toes_R","Root_M/Hip_R/Knee_R/Ankle_R","Root_M/Hip_R/Knee_R","Root_M/Hip_R","Root_M/Spine1_M/Chest_M/Scapula_L/Shoulder_L/Elbow_L/Wrist_L","Root_M/Spine1_M/Chest_M/Scapula_L/Shoulder_L/Elbow_L","Root_M/Spine1_M/Chest_M/Scapula_L/Shoulder_L","Root_M/Spine1_M/Chest_M/Scapula_L","Root_M/Spine1_M/Chest_M/Scapula_R/Shoulder_R/Elbow_R/Wrist_R","Root_M/Spine1_M/Chest_M/Scapula_R/Shoulder_R/Elbow_R","Root_M/Spine1_M/Chest_M/Scapula_R/Shoulder_R","Root_M/Spine1_M/Chest_M/Scapula_R","Root_M/Spine1_M/Chest_M/Neck_M/Head_M","Root_M/Spine1_M/Chest_M/Neck_M","Root_M/Spine1_M/Chest_M","Root_M/Spine1_M","Root_M"],[[[7,-7.873639447097958e-7,-6.519635320501038e-8,-1,0,0.08185373991727829,-0.9966443777084351,5.288988691454222e-10,0,-0.9966443777084351,-0.08185373991727829,7.900583796072169e-7,0,0.0015626716194674373,0.0007490515126846731,0.0027741827070713043,1],[7,-1.8150986269560576e-10,-0.0015915741678327322,-0.9999987483024597,0,1,7.69743095929698e-8,-3.0402055872791323e-10,0,7.697469328604711e-8,-0.9999987483024597,0.0015915741678327322,0,-0.002713743830099702,-0.0009506093920208514,0.0027716041076928377,1],[7,-0.010681620799005032,-0.0010848328238353133,-0.9999423623085022,0,0.9948249459266663,0.10103511065244675,-0.01073656789958477,0,0.10104092955589294,-0.9948822855949402,2.2699371255671978e-15,0,-0.01038399152457714,-0.0012213099980726838,0.0027990643866360188,1],[7,-0.010730288922786713,-0.0003671304730232805,-0.9999423623085022,0,0.9993575811386108,0.03419242799282074,-0.01073656789958477,0,0.034194398671388626,-0.9994152188301086,2.2804104762017604e-15,0,-0.01896691881120205,-0.0005232313415035605,0.0027990643866360188,1],[7,7.942823003759258e-7,6.541559827155652e-8,-1,0,-0.08185373991727829,0.9966443777084351,1.8111570576628822e-10,0,0.9966443777084351,0.08185373991727829,7.96971448835393e-7,0,-0.0015626671956852078,-0.0007490511634387076,-0.0027741852682083845,1],[7,-1.8117590760979851e-10,-0.0015915741678327322,-0.9999987483024597,0,-1,-7.552468872518148e-8,3.013794214190568e-10,0,-7.552507241825879e-8,0.9999987483024597,-0.0015915741678327322,0,0.002713743830099702,0.0009506093338131905,-0.0027716041076928377,1],[7,-0.010681620799005032,-0.0010848328238353133,-0.9999423623085022,0,-0.9948249459266663,-0.10103510320186615,0.01073656789958477,0,-0.10104092955589294,0.9948822855949402,-2.213251457106047e-11,0,0.01038399152457714,0.0012213099980726838,-0.0027990643866360188,1],[7,-0.010730288922786713,-0.0003671304730232805,-0.9999423623085022,0,-0.9993575811386108,-0.03419242799282074,0.01073656789958477,0,-0.034194398671388626,0.9994152188301086,-2.2132606511404695e-11,0,0.01896691881120205,0.0005232312832958996,-0.0027990643866360188,1],[7,-0.003217601217329502,0.013486070558428764,-0.9999038577079773,0,0.9900209307670593,-0.14082854986190796,-0.005085205193608999,0,-0.14088359475135803,-0.9899421334266663,-0.01289836224168539,0,-0.01772109419107437,0.0025276578962802887,0.006342135835438967,1],[7,-0.027939576655626297,0.003914658445864916,-0.9996019601821899,0,0.9899323582649231,-0.13870102167129517,-0.02821248769760132,0,-0.13875624537467957,-0.9903265833854675,5.44632006160839e-10,0,-0.022954469546675682,0.0025493649300187826,0.006753850262612104,1],[7,-0.028053926303982735,-0.0029869170393794775,-0.9996019601821899,0,0.9939839243888855,0.10582999885082245,-0.02821248769760132,0,0.10587213933467865,-0.9943797588348389,5.446323392277463e-10,0,-0.028061948716640472,-0.0031008420046418905,0.006753850262612104,1],[7,-0.9999274015426636,-0.000001486659016336489,-0.012051837518811226,0,0.0120518384501338,-0.00012334641360212117,-0.9999273419380188,0,-9.146007654567759e-16,-1,0.00012335537758190185,0,0.0026569380424916744,-0.00010892009595409036,0.02848154492676258,1],[7,-0.003217607969418168,0.013486023992300034,-0.9999038577079773,0,-0.9900209307670593,0.14082854986190796,0.005085205193608999,0,0.14088359475135803,0.9899421334266663,0.01289831567555666,0,0.01772116683423519,-0.0025277347303926945,-0.006337270140647888,1],[7,-0.027939582243561745,0.003914611879736185,-0.9996019601821899,0,-0.9899323582649231,0.13870102167129517,0.02821248769760132,0,0.13875624537467957,0.9903265833854675,-4.755057858574219e-8,0,0.022954663261771202,-0.002549394965171814,-0.00674898736178875,1],[7,-0.028053922578692436,-0.0029869636055082083,-0.9996019601821899,0,-0.9939839243888855,-0.10582999140024185,0.02821248769760132,0,-0.10587213933467865,0.9943797588348389,-4.755057858574219e-8,0,0.028062142431735992,0.0031008596997708082,-0.00674898736178875,1],[7,-0.9999274015426636,-0.0000014861826684864354,-0.012051843106746674,0,-0.012051843106746674,0.00012334794155322015,0.9999273419380188,0,4.953271126595382e-10,1,-0.00012335690553300083,0,-0.0026569380424916744,0.00010892005229834467,-0.02848154492676258,1],[7,-1.6081226229577292e-16,-5.053215392444312e-16,1,0,1,-2.0489094865183688e-8,1.6081224906088311e-16,0,2.0489094865183688e-8,1,5.053215392444312e-16,0,-0.03196112811565399,0.00012439562124200165,-9.574726432503377e-18,1],[7,5.751306066253416e-17,-4.843061753670192e-16,1,0,0.9392595887184143,0.34320753812789917,1.1219782537462701e-16,0,-0.34320753812789917,0.9392595887184143,4.746281357303692e-16,0,-0.02801189385354519,-0.010852459818124771,-9.365741732283693e-18,1],[7,-1.6073587051184242e-16,-5.003653906513687e-16,1,0,0.9995249509811401,-0.03081941418349743,1.4523855570887774e-16,0,0.03081941418349743,0.9995249509811401,5.05081511283003e-16,0,-0.02732432447373867,0.0003465543850325048,-1.9691652799332707e-18,1],[7,-1.6051606546202993e-16,-4.955657313953114e-16,1,0,0.9981581568717957,-0.06066583842039108,1.3015651204319428e-16,0,0.06066583842039108,0.9981581568717957,5.043908088540763e-16,0,-0.024823229759931564,0.0011626967461779714,-3.024364845781441e-18,1],[7,-1.6073266766851061e-16,-5.002625820273957e-16,1,0,0.9995050430297852,-0.031458914279937744,1.4491539940461042e-16,0,0.031458914279937744,0.9995050430297852,5.050714527667544e-16,0,-0.019512146711349487,0.0004364966880530119,-3.2884277806782753e-18,1]],8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]]],0,0,[],[],[]],[[[10,".bin",3021633291,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":130320,"length":14496,"count":3624,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":130320,"count":1810,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,16]]},"minPosition",8,[1,-0.0024110907688736916,0.028656356036663055,-0.0027839902322739363],"maxPosition",8,[1,0.0024110907688736916,0.03437618166208267,0.002181526506319642]]],-1],0,0,[],[],[]],[[[12,"Skin-7",1168153290,["Root_M/Hip_L/Knee_L/Ankle_L/Toes_L","Root_M/Hip_L/Knee_L/Ankle_L","Root_M/Hip_L/Knee_L","Root_M/Hip_L","Root_M/Hip_R/Knee_R/Ankle_R/Toes_R","Root_M/Hip_R/Knee_R/Ankle_R","Root_M/Hip_R/Knee_R","Root_M/Hip_R","Root_M/Spine1_M/Chest_M/Scapula_L/Shoulder_L/Elbow_L/Wrist_L","Root_M/Spine1_M/Chest_M/Scapula_L/Shoulder_L/Elbow_L","Root_M/Spine1_M/Chest_M/Scapula_L/Shoulder_L","Root_M/Spine1_M/Chest_M/Scapula_L","Root_M/Spine1_M/Chest_M/Scapula_R/Shoulder_R/Elbow_R/Wrist_R","Root_M/Spine1_M/Chest_M/Scapula_R/Shoulder_R/Elbow_R","Root_M/Spine1_M/Chest_M/Scapula_R/Shoulder_R","Root_M/Spine1_M/Chest_M/Scapula_R","Root_M/Spine1_M/Chest_M/Neck_M/Head_M","Root_M/Spine1_M/Chest_M/Neck_M","Root_M/Spine1_M/Chest_M","Root_M/Spine1_M","Root_M"],[[[7,-7.873639447097958e-7,-6.519635320501038e-8,-1,0,0.08185373991727829,-0.9966443777084351,5.288988691454222e-10,0,-0.9966443777084351,-0.08185373991727829,7.900583796072169e-7,0,0.0015626716194674373,0.0007490515126846731,0.0027741827070713043,1],[7,-1.8150986269560576e-10,-0.0015915741678327322,-0.9999987483024597,0,1,7.69743095929698e-8,-3.0402055872791323e-10,0,7.697469328604711e-8,-0.9999987483024597,0.0015915741678327322,0,-0.002713743830099702,-0.0009506093920208514,0.0027716041076928377,1],[7,-0.010681620799005032,-0.0010848328238353133,-0.9999423623085022,0,0.9948249459266663,0.10103511065244675,-0.01073656789958477,0,0.10104092955589294,-0.9948822855949402,2.2699371255671978e-15,0,-0.01038399152457714,-0.0012213099980726838,0.0027990643866360188,1],[7,-0.010730288922786713,-0.0003671304730232805,-0.9999423623085022,0,0.9993575811386108,0.03419242799282074,-0.01073656789958477,0,0.034194398671388626,-0.9994152188301086,2.2804104762017604e-15,0,-0.01896691881120205,-0.0005232313415035605,0.0027990643866360188,1],[7,7.942823003759258e-7,6.541559827155652e-8,-1,0,-0.08185373991727829,0.9966443777084351,1.8111570576628822e-10,0,0.9966443777084351,0.08185373991727829,7.96971448835393e-7,0,-0.0015626671956852078,-0.0007490511634387076,-0.0027741852682083845,1],[7,-1.8117590760979851e-10,-0.0015915741678327322,-0.9999987483024597,0,-1,-7.552468872518148e-8,3.013794214190568e-10,0,-7.552507241825879e-8,0.9999987483024597,-0.0015915741678327322,0,0.002713743830099702,0.0009506093338131905,-0.0027716041076928377,1],[7,-0.010681620799005032,-0.0010848328238353133,-0.9999423623085022,0,-0.9948249459266663,-0.10103510320186615,0.01073656789958477,0,-0.10104092955589294,0.9948822855949402,-2.213251457106047e-11,0,0.01038399152457714,0.0012213099980726838,-0.0027990643866360188,1],[7,-0.010730288922786713,-0.0003671304730232805,-0.9999423623085022,0,-0.9993575811386108,-0.03419242799282074,0.01073656789958477,0,-0.034194398671388626,0.9994152188301086,-2.2132606511404695e-11,0,0.01896691881120205,0.0005232312832958996,-0.0027990643866360188,1],[7,-0.003217601217329502,0.013486070558428764,-0.9999038577079773,0,0.9900209307670593,-0.14082854986190796,-0.005085205193608999,0,-0.14088359475135803,-0.9899421334266663,-0.01289836224168539,0,-0.01772109419107437,0.0025276578962802887,0.006342135835438967,1],[7,-0.027939576655626297,0.003914658445864916,-0.9996019601821899,0,0.9899323582649231,-0.13870102167129517,-0.02821248769760132,0,-0.13875624537467957,-0.9903265833854675,5.44632006160839e-10,0,-0.022954469546675682,0.0025493649300187826,0.006753850262612104,1],[7,-0.028053926303982735,-0.0029869170393794775,-0.9996019601821899,0,0.9939839243888855,0.10582999885082245,-0.02821248769760132,0,0.10587213933467865,-0.9943797588348389,5.446323392277463e-10,0,-0.028061948716640472,-0.0031008420046418905,0.006753850262612104,1],[7,-0.9999274015426636,-0.000001486659016336489,-0.012051837518811226,0,0.0120518384501338,-0.00012334641360212117,-0.9999273419380188,0,-9.146007654567759e-16,-1,0.00012335537758190185,0,0.0026569380424916744,-0.00010892009595409036,0.02848154492676258,1],[7,-0.003217607969418168,0.013486023992300034,-0.9999038577079773,0,-0.9900209307670593,0.14082854986190796,0.005085205193608999,0,0.14088359475135803,0.9899421334266663,0.01289831567555666,0,0.01772116683423519,-0.0025277347303926945,-0.006337270140647888,1],[7,-0.027939582243561745,0.003914611879736185,-0.9996019601821899,0,-0.9899323582649231,0.13870102167129517,0.02821248769760132,0,0.13875624537467957,0.9903265833854675,-4.755057858574219e-8,0,0.022954663261771202,-0.002549394965171814,-0.00674898736178875,1],[7,-0.028053922578692436,-0.0029869636055082083,-0.9996019601821899,0,-0.9939839243888855,-0.10582999140024185,0.02821248769760132,0,-0.10587213933467865,0.9943797588348389,-4.755057858574219e-8,0,0.028062142431735992,0.0031008596997708082,-0.00674898736178875,1],[7,-0.9999274015426636,-0.0000014861826684864354,-0.012051843106746674,0,-0.012051843106746674,0.00012334794155322015,0.9999273419380188,0,4.953271126595382e-10,1,-0.00012335690553300083,0,-0.0026569380424916744,0.00010892005229834467,-0.02848154492676258,1],[7,-1.6081226229577292e-16,-5.053215392444312e-16,1,0,1,-2.0489094865183688e-8,1.6081224906088311e-16,0,2.0489094865183688e-8,1,5.053215392444312e-16,0,-0.03196112811565399,0.00012439562124200165,-9.574726432503377e-18,1],[7,5.751306066253416e-17,-4.843061753670192e-16,1,0,0.9392595887184143,0.34320753812789917,1.1219782537462701e-16,0,-0.34320753812789917,0.9392595887184143,4.746281357303692e-16,0,-0.02801189385354519,-0.010852459818124771,-9.365741732283693e-18,1],[7,-1.6073587051184242e-16,-5.003653906513687e-16,1,0,0.9995249509811401,-0.03081941418349743,1.4523855570887774e-16,0,0.03081941418349743,0.9995249509811401,5.05081511283003e-16,0,-0.02732432447373867,0.0003465543850325048,-1.9691652799332707e-18,1],[7,-1.6051606546202993e-16,-4.955657313953114e-16,1,0,0.9981581568717957,-0.06066583842039108,1.3015651204319428e-16,0,0.06066583842039108,0.9981581568717957,5.043908088540763e-16,0,-0.024823229759931564,0.0011626967461779714,-3.024364845781441e-18,1],[7,-1.6073266766851061e-16,-5.002625820273957e-16,1,0,0.9995050430297852,-0.031458914279937744,1.4491539940461042e-16,0,0.031458914279937744,0.9995050430297852,5.050714527667544e-16,0,-0.019512146711349487,0.0004364966880530119,-3.2884277806782753e-18,1]],8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]]],0,0,[],[],[]],[[[12,"Skin-1",1168153290,["Root_M/Hip_L/Knee_L/Ankle_L/Toes_L","Root_M/Hip_L/Knee_L/Ankle_L","Root_M/Hip_L/Knee_L","Root_M/Hip_L","Root_M/Hip_R/Knee_R/Ankle_R/Toes_R","Root_M/Hip_R/Knee_R/Ankle_R","Root_M/Hip_R/Knee_R","Root_M/Hip_R","Root_M/Spine1_M/Chest_M/Scapula_L/Shoulder_L/Elbow_L/Wrist_L","Root_M/Spine1_M/Chest_M/Scapula_L/Shoulder_L/Elbow_L","Root_M/Spine1_M/Chest_M/Scapula_L/Shoulder_L","Root_M/Spine1_M/Chest_M/Scapula_L","Root_M/Spine1_M/Chest_M/Scapula_R/Shoulder_R/Elbow_R/Wrist_R","Root_M/Spine1_M/Chest_M/Scapula_R/Shoulder_R/Elbow_R","Root_M/Spine1_M/Chest_M/Scapula_R/Shoulder_R","Root_M/Spine1_M/Chest_M/Scapula_R","Root_M/Spine1_M/Chest_M/Neck_M/Head_M","Root_M/Spine1_M/Chest_M/Neck_M","Root_M/Spine1_M/Chest_M","Root_M/Spine1_M","Root_M"],[[[7,-7.873639447097958e-7,-6.519635320501038e-8,-1,0,0.08185373991727829,-0.9966443777084351,5.288988691454222e-10,0,-0.9966443777084351,-0.08185373991727829,7.900583796072169e-7,0,0.0015626716194674373,0.0007490515126846731,0.0027741827070713043,1],[7,-1.8150986269560576e-10,-0.0015915741678327322,-0.9999987483024597,0,1,7.69743095929698e-8,-3.0402055872791323e-10,0,7.697469328604711e-8,-0.9999987483024597,0.0015915741678327322,0,-0.002713743830099702,-0.0009506093920208514,0.0027716041076928377,1],[7,-0.010681620799005032,-0.0010848328238353133,-0.9999423623085022,0,0.9948249459266663,0.10103511065244675,-0.01073656789958477,0,0.10104092955589294,-0.9948822855949402,2.2699371255671978e-15,0,-0.01038399152457714,-0.0012213099980726838,0.0027990643866360188,1],[7,-0.010730288922786713,-0.0003671304730232805,-0.9999423623085022,0,0.9993575811386108,0.03419242799282074,-0.01073656789958477,0,0.034194398671388626,-0.9994152188301086,2.2804104762017604e-15,0,-0.01896691881120205,-0.0005232313415035605,0.0027990643866360188,1],[7,7.942823003759258e-7,6.541559827155652e-8,-1,0,-0.08185373991727829,0.9966443777084351,1.8111570576628822e-10,0,0.9966443777084351,0.08185373991727829,7.96971448835393e-7,0,-0.0015626671956852078,-0.0007490511634387076,-0.0027741852682083845,1],[7,-1.8117590760979851e-10,-0.0015915741678327322,-0.9999987483024597,0,-1,-7.552468872518148e-8,3.013794214190568e-10,0,-7.552507241825879e-8,0.9999987483024597,-0.0015915741678327322,0,0.002713743830099702,0.0009506093338131905,-0.0027716041076928377,1],[7,-0.010681620799005032,-0.0010848328238353133,-0.9999423623085022,0,-0.9948249459266663,-0.10103510320186615,0.01073656789958477,0,-0.10104092955589294,0.9948822855949402,-2.213251457106047e-11,0,0.01038399152457714,0.0012213099980726838,-0.0027990643866360188,1],[7,-0.010730288922786713,-0.0003671304730232805,-0.9999423623085022,0,-0.9993575811386108,-0.03419242799282074,0.01073656789958477,0,-0.034194398671388626,0.9994152188301086,-2.2132606511404695e-11,0,0.01896691881120205,0.0005232312832958996,-0.0027990643866360188,1],[7,-0.003217601217329502,0.013486070558428764,-0.9999038577079773,0,0.9900209307670593,-0.14082854986190796,-0.005085205193608999,0,-0.14088359475135803,-0.9899421334266663,-0.01289836224168539,0,-0.01772109419107437,0.0025276578962802887,0.006342135835438967,1],[7,-0.027939576655626297,0.003914658445864916,-0.9996019601821899,0,0.9899323582649231,-0.13870102167129517,-0.02821248769760132,0,-0.13875624537467957,-0.9903265833854675,5.44632006160839e-10,0,-0.022954469546675682,0.0025493649300187826,0.006753850262612104,1],[7,-0.028053926303982735,-0.0029869170393794775,-0.9996019601821899,0,0.9939839243888855,0.10582999885082245,-0.02821248769760132,0,0.10587213933467865,-0.9943797588348389,5.446323392277463e-10,0,-0.028061948716640472,-0.0031008420046418905,0.006753850262612104,1],[7,-0.9999274015426636,-0.000001486659016336489,-0.012051837518811226,0,0.0120518384501338,-0.00012334641360212117,-0.9999273419380188,0,-9.146007654567759e-16,-1,0.00012335537758190185,0,0.0026569380424916744,-0.00010892009595409036,0.02848154492676258,1],[7,-0.003217607969418168,0.013486023992300034,-0.9999038577079773,0,-0.9900209307670593,0.14082854986190796,0.005085205193608999,0,0.14088359475135803,0.9899421334266663,0.01289831567555666,0,0.01772116683423519,-0.0025277347303926945,-0.006337270140647888,1],[7,-0.027939582243561745,0.003914611879736185,-0.9996019601821899,0,-0.9899323582649231,0.13870102167129517,0.02821248769760132,0,0.13875624537467957,0.9903265833854675,-4.755057858574219e-8,0,0.022954663261771202,-0.002549394965171814,-0.00674898736178875,1],[7,-0.028053922578692436,-0.0029869636055082083,-0.9996019601821899,0,-0.9939839243888855,-0.10582999140024185,0.02821248769760132,0,-0.10587213933467865,0.9943797588348389,-4.755057858574219e-8,0,0.028062142431735992,0.0031008596997708082,-0.00674898736178875,1],[7,-0.9999274015426636,-0.0000014861826684864354,-0.012051843106746674,0,-0.012051843106746674,0.00012334794155322015,0.9999273419380188,0,4.953271126595382e-10,1,-0.00012335690553300083,0,-0.0026569380424916744,0.00010892005229834467,-0.02848154492676258,1],[7,-1.6081226229577292e-16,-5.053215392444312e-16,1,0,1,-2.0489094865183688e-8,1.6081224906088311e-16,0,2.0489094865183688e-8,1,5.053215392444312e-16,0,-0.03196112811565399,0.00012439562124200165,-9.574726432503377e-18,1],[7,5.751306066253416e-17,-4.843061753670192e-16,1,0,0.9392595887184143,0.34320753812789917,1.1219782537462701e-16,0,-0.34320753812789917,0.9392595887184143,4.746281357303692e-16,0,-0.02801189385354519,-0.010852459818124771,-9.365741732283693e-18,1],[7,-1.6073587051184242e-16,-5.003653906513687e-16,1,0,0.9995249509811401,-0.03081941418349743,1.4523855570887774e-16,0,0.03081941418349743,0.9995249509811401,5.05081511283003e-16,0,-0.02732432447373867,0.0003465543850325048,-1.9691652799332707e-18,1],[7,-1.6051606546202993e-16,-4.955657313953114e-16,1,0,0.9981581568717957,-0.06066583842039108,1.3015651204319428e-16,0,0.06066583842039108,0.9981581568717957,5.043908088540763e-16,0,-0.024823229759931564,0.0011626967461779714,-3.024364845781441e-18,1],[7,-1.6073266766851061e-16,-5.002625820273957e-16,1,0,0.9995050430297852,-0.031458914279937744,1.4491539940461042e-16,0,0.031458914279937744,0.9995050430297852,5.050714527667544e-16,0,-0.019512146711349487,0.0004364966880530119,-3.2884277806782753e-18,1]],8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]]],0,0,[],[],[]],[[{"name":"TryAgain","rect":{"x":0,"y":0,"width":442,"height":148},"offset":{"x":0,"y":0},"originalSize":{"width":442,"height":148},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[4],0,[0],[11],[75]],[[[39,"1",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{}],[{"USE_LIGHTMAP":true,"USE_ALBEDO_MAP":true},{},{}],[[[{},"mainTexture",6,0],{},{}],11,0,0]]],0,0,[0,0],[8,7],[76,4]],[[[97,[{},{},{}],[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{}],[{"USE_LIGHTMAP":true},{},{}]]],0,0,[0],[7],[4]],[[[35,"map_bottom",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{},"albedoScale",8,[1,0.9450981020927429,0.7137255072593689,0.45098042488098145]]],11]]],0,0,[0],[7],[4]],[[[35,"map_top",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{},"albedoScale",8,[1,0.9150943160057068,0.817440927028656,0.6258899569511414]]],11]]],0,0,[0],[7],[4]],[[[35,"arena_border",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{},"albedoScale",8,[1,0.5660377740859985,0.41064441204071045,0.3070487976074219]]],11]]],0,0,[0],[7],[4]],[[[10,".bin",3006973197,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":24192,"length":3024,"count":756,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":24192,"count":504,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-8.98915958404541,-11.478874206542969,-23.47831153869629],"maxPosition",8,[1,10.22496509552002,1.7585704326629639,-13.126023292541504]]],-1],0,0,[],[],[]],[[[10,".bin",2088782557,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1728,"length":408,"count":102,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1728,"count":36,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-2.9037060737609863,5.820766091346741e-11,-4.7448225021362305],"maxPosition",8,[1,2.9037065505981445,0.0000014305696822702885,4.707498550415039]]],-1],0,0,[],[],[]],[[[35,"map_mid",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{},"albedoScale",8,[1,0.7264150977134705,0.5540971159934998,0.35978105664253235]]],11]]],0,0,[0],[7],[4]],[[[10,".bin",63720426,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":5808,"length":2400,"count":600,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":5808,"count":121,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-5,-1.1102230246251565e-16,-5],"maxPosition",8,[1,5,1.1102230246251565e-16,5]]],-1],0,0,[],[],[]],[[[10,".bin",2774053404,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":6912,"length":864,"count":216,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":6912,"count":144,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-8.895931243896484,-11.478854179382324,-11.702766418457031],"maxPosition",8,[1,9.400227546691895,-0.5476887226104736,-1.0350635051727295]]],-1],0,0,[],[],[]],[[[10,".bin",1545483753,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":32256,"length":4032,"count":1008,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":32256,"count":672,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-9.181829452514648,-11.478874206542969,0.8526481986045837],"maxPosition",8,[1,10.83174991607666,1.7585704326629639,22.491722106933594]]],-1],0,0,[],[],[]],[[[35,"Fog_2",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{},"albedoScale",8,[1,0.9433962106704712,0.7119660377502441,0.44944819808006287]]],11]]],0,0,[0],[7],[4]],[[[10,".bin",2123467134,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":16032,"length":2544,"count":636,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":16032,"count":334,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-2.959693431854248,-11.41193962097168,-4.772816181182861],"maxPosition",8,[1,2.959693431854248,0.14929866790771484,4.772815704345703]]],-1],0,0,[],[],[]],[[[35,"arena_floor",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{},"albedoScale",8,[1,0.6784313917160034,0.6470588445663452,0.6196078658103943]]],11]]],0,0,[0],[7],[4]],[[{"name":"Tap To Fight","rect":{"x":0,"y":0,"width":768,"height":128},"offset":{"x":0,"y":0},"originalSize":{"width":768,"height":128},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[4],0,[0],[11],[77]],[[{"base":"2,2,0,0,2,0","rgbe":true,"mipmaps":[{"front":"d032ac98-05e1-4090-88bb-eb640dcb5fc1@b47c0@e9a6d","back":"d032ac98-05e1-4090-88bb-eb640dcb5fc1@b47c0@40c10","left":"d032ac98-05e1-4090-88bb-eb640dcb5fc1@b47c0@8fd34","right":"d032ac98-05e1-4090-88bb-eb640dcb5fc1@b47c0@74afd","top":"d032ac98-05e1-4090-88bb-eb640dcb5fc1@b47c0@bb97f","bottom":"d032ac98-05e1-4090-88bb-eb640dcb5fc1@b47c0@7d38f"}]}],[19],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[2],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[2],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[2],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[2],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[2],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[2],0,[],[],[]],[[[93,"builtin-particle",[{"hash":2554907268,"name":"builtin-particle|particle-vs-legacy:lpvs_main|tinted-fs:add","blocks":[{"name":"Constants","stageFlags":1,"binding":0,"members":[{"name":"mainTiling_Offset","type":16,"count":1},{"name":"frameTile_velLenScale","type":16,"count":1},{"name":"scale","type":16,"count":1},{"name":"nodeRotation","type":16,"count":1}],"defines":[]},{"name":"FragConstants","stageFlags":16,"binding":1,"members":[{"name":"tintColor","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"mainTexture","type":28,"count":1,"stageFlags":16,"binding":2,"defines":[]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_texCoord","format":32,"location":1,"defines":[]},{"name":"a_texCoord1","format":32,"location":2,"defines":[]},{"name":"a_texCoord2","format":32,"location":3,"defines":[]},{"name":"a_color","format":44,"location":4,"defines":[]},{"name":"a_color1","format":32,"location":8,"defines":["CC_RENDER_MODE"]},{"name":"a_texCoord3","format":32,"location":6,"defines":["CC_RENDER_MODE"]},{"name":"a_normal","format":32,"location":7,"defines":["CC_RENDER_MODE"]}],"varyings":[{"name":"uv","type":14,"count":1,"stageFlags":17,"location":0,"defines":[]},{"name":"color","type":16,"count":1,"stageFlags":17,"location":1,"defines":[]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"glsl4":{"vert":"\nprecision highp float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\n  mat3 m = mat3(xAxis,yAxis,zAxis);\n  float trace = m[0][0] + m[1][1] + m[2][2];\n  vec4 quat;\n  if (trace > 0.) {\n    float s = 0.5 / sqrt(trace + 1.0);\n    quat.w = 0.25 / s;\n    quat.x = (m[2][1] - m[1][2]) * s;\n    quat.y = (m[0][2] - m[2][0]) * s;\n    quat.z = (m[1][0] - m[0][1]) * s;\n  } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n    float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n    quat.w = (m[2][1] - m[1][2]) / s;\n    quat.x = 0.25 * s;\n    quat.y = (m[0][1] + m[1][0]) / s;\n    quat.z = (m[0][2] + m[2][0]) / s;\n  } else if (m[1][1] > m[2][2]) {\n    float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n    quat.w = (m[0][2] - m[2][0]) / s;\n    quat.x = (m[0][1] + m[1][0]) / s;\n    quat.y = 0.25 * s;\n    quat.z = (m[1][2] + m[2][1]) / s;\n  } else {\n    float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n    quat.w = (m[1][0] - m[0][1]) / s;\n    quat.x = (m[0][2] + m[2][0]) / s;\n    quat.y = (m[1][2] + m[2][1]) / s;\n    quat.z = 0.25 * s;\n  }\n  float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n  if (len > 0.) {\n    len = 1. / sqrt(len);\n    quat.x = quat.x * len;\n    quat.y = quat.y * len;\n    quat.z = quat.z * len;\n    quat.w = quat.w * len;\n  }\n  return quat;\n}\nvec4 quaternionFromEuler (vec3 angle){\n  float x = angle.x / 2.;\n  float y = angle.y / 2.;\n  float z = angle.z / 2.;\n  float sx = sin(x);\n  float cx = cos(x);\n  float sy = sin(y);\n  float cy = cos(y);\n  float sz = sin(z);\n  float cz = cos(z);\n  vec4 quat = vec4(0);\n  quat.x = sx * cy * cz + cx * sy * sz;\n  quat.y = cx * sy * cz + sx * cy * sz;\n  quat.z = cx * cy * sz - sx * sy * cz;\n  quat.w = cx * cy * cz - sx * sy * sz;\n  return quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\n  float x2 = q.x + q.x;\n  float y2 = q.y + q.y;\n  float z2 = q.z + q.z;\n  float xx = q.x * x2;\n  float xy = q.x * y2;\n  float xz = q.x * z2;\n  float yy = q.y * y2;\n  float yz = q.y * z2;\n  float zz = q.z * z2;\n  float wx = q.w * x2;\n  float wy = q.w * y2;\n  float wz = q.w * z2;\n  return mat4(\n    1. - (yy + zz), xy + wz, xz - wy, 0,\n    xy - wz, 1. - (xx + zz), yz + wx, 0,\n    xz + wy, yz - wx, 1. - (xx + yy), 0,\n    p.x, p.y, p.z, 1\n  );\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  float x2 = x + x;\n  float y2 = y + y;\n  float z2 = z + z;\n  float xx = x * x2;\n  float xy = x * y2;\n  float xz = x * z2;\n  float yy = y * y2;\n  float yz = y * z2;\n  float zz = z * z2;\n  float wx = w * x2;\n  float wy = w * y2;\n  float wz = w * z2;\n  float sx = s.x;\n  float sy = s.y;\n  float sz = s.z;\n  return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n    (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n    (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n    t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\n  vec4 quat;\n  quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n  quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n  quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n  quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n  return quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\n  float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n  float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n  float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n  float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n  v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n  v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n  v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n  vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n  vec4 rotQuat = quatMultiply(viewQuat, q);\n  rotateVecFromQuat(pos, rotQuat);\n  return pos;\n}\nmat3 quatToMat3(vec4 q) {\n  vec3 m0 = vec3(\n    1.0 - 2.0 * q.y * q.y - 2.0 * q.z * q.z,\n    2.0 * q.x * q.y + 2.0 * q.w * q.z,\n    2.0 * q.x * q.z - 2.0 * q.w * q.y);\n\tvec3 m1 = vec3(\n    2.0 * q.x * q.y - 2.0 * q.w * q.z,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.z * q.z,\n    2.0 * q.y * q.z + 2.0 * q.w * q.x);\n\tvec3 m2 = vec3(\n    2.0 * q.x * q.z + 2.0 * q.w * q.y,\n    2.0 * q.y * q.z - 2.0 * q.w * q.x,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.y * q.y);\n  return mat3(m0, m1, m2);\n}\nvec4 mat3ToQuat(mat3 mat) {\n  float tr = mat[0][0] + mat[1][1] + mat[2][2];\n\tfloat qw, qx, qy, qz;\n  if (tr > 0.0) {\n    float S = sqrt(tr + 1.0) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = 0.25 * S;\n\t  qx = (mat[1][2] - mat[2][1]) * invS;\n\t  qy = (mat[2][0] - mat[0][2]) * invS;\n\t  qz = (mat[0][1] - mat[1][0]) * invS;\n  } else if ((mat[0][0] > mat[1][1])&&(mat[0][0] > mat[2][2])) {\n    float S = sqrt(1.0 + mat[0][0] - mat[1][1] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[1][2] - mat[2][1]) * invS;\n\t  qx = 0.25 * S;\n\t  qy = (mat[1][0] + mat[0][1]) * invS;\n\t  qz = (mat[2][0] + mat[0][2]) * invS;\n  } else if (mat[1][1] > mat[2][2]) {\n\t  float S = sqrt(1.0 + mat[1][1] - mat[0][0] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[2][0] - mat[0][2]) * invS;\n\t  qx = (mat[1][0] + mat[0][1]) * invS;\n\t  qy = 0.25 * S;\n\t  qz = (mat[2][1] + mat[1][2]) * invS;\n  } else {\n\t  float S = sqrt(1.0 + mat[2][2] - mat[0][0] - mat[1][1]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[0][1] - mat[1][0]) * invS;\n\t  qx = (mat[2][0] + mat[0][2]) * invS;\n\t  qy = (mat[2][1] + mat[1][2]) * invS;\n\t  qz = 0.25 * S;\n  }\n  return vec4(qx, qy, qz, qw);\n}\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 mainTiling_Offset;\n  vec4 frameTile_velLenScale;\n  vec4 scale;\n  vec4 nodeRotation;\n};\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(set = 2, binding = 0) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n};\nlayout(location = 0) out mediump vec2 uv;\nlayout(location = 1) out mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n  , mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n  vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n  vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = vec3(1, 0, 0);\n  vec3 camY = vec3(0, 0, -1);\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  rotateVecFromQuat(viewSpaceVert, q);\n  vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n  vec3 camY = vec3(0, 1, 0);\n  vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n  pos.xyz += offset;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\n  vertIndex.y = 1. - vertIndex.y;\n#endif\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec3 a_texCoord;\nlayout(location = 2) in vec3 a_texCoord1;\nlayout(location = 3) in vec3 a_texCoord2;\nlayout(location = 4) in vec4 a_color;\n#if CC_RENDER_MODE == 1\n  layout(location = 8) in vec3 a_color1;\n#endif\n#if CC_RENDER_MODE == 4\n  layout(location = 6) in vec3 a_texCoord3;\n  layout(location = 7) in vec3 a_normal;\n  layout(location = 8) in vec4 a_color1;\n#endif\nvec4 lpvs_main () {\n  vec3 compScale = scale.xyz * a_texCoord1;\n  vec4 pos = vec4(a_position, 1);\n  #if CC_RENDER_MODE == 1\n    vec4 velocity = vec4(a_color1.xyz, 0);\n  #endif\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_RENDER_MODE == 1\n      velocity = cc_matWorld * velocity;\n    #endif\n  #endif\n  #if ROTATION_OVER_TIME_MODULE_ENABLE\n    vec3 rotTmp = a_texCoord2;\n    float mulFactor = 1.0;\n    if (rotTmp.x > 10.0 * 0.5) {\n        rotTmp.x -= 10.0;\n        mulFactor = -1.0;\n    }\n    vec4 rot = vec4(rotTmp, 0.0);\n    rot.w = mulFactor * sqrt(abs(1.0 - rot.x * rot.x - rot.y * rot.y - rot.z * rot.z));\n  #else\n    #if CC_RENDER_MODE != 4\n      #if CC_RENDER_MODE == 0\n        vec3 rotEuler = a_texCoord2;\n      #elif CC_RENDER_MODE == 1\n        vec3 rotEuler = vec3(0.);\n      #else\n        vec3 rotEuler = vec3(0., 0., a_texCoord2.z);\n      #endif\n      vec4 rot = quaternionFromEuler(rotEuler);\n    #else\n      vec4 rot = quaternionFromEuler(a_texCoord2);\n    #endif\n  #endif\n  #if CC_RENDER_MODE != 4\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n    #if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_matViewInv);\n    #elif CC_RENDER_MODE == 1\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_cameraPos.xyz, velocity, frameTile_velLenScale.z, frameTile_velLenScale.w, a_texCoord.x);\n    #elif 2\n      computeVertPos(pos, cornerOffset, rot, compScale);\n    #endif\n    color = a_color;\n  #else\n    mat3 rotMat = quatToMat3(rot);\n    mat3 nodeMat = quatToMat3(nodeRotation);\n    rotMat = nodeMat * rotMat;\n    rot = mat3ToQuat(rotMat);\n    mat4 xformNoScale = matrixFromRT(rot, pos.xyz);\n    mat4 xform = matFromRTS(rot, pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n  #endif\n  uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  pos = cc_matViewProj * pos;\n  return pos;\n}\nvoid main() { gl_Position = lpvs_main(); }","frag":"\nprecision mediump float;\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nlayout(location = 0) in vec2 uv;\nlayout(location = 1) in vec4 color;\nlayout(set = 1, binding = 2) uniform sampler2D mainTexture;\nlayout(set = 1, binding = 1) uniform FragConstants {\n  vec4 tintColor;\n};\nvec4 add () {\n  vec4 col = 2.0 * color * tintColor * texture(mainTexture, uv);\n  return CCFragOutput(col);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = add(); }"},"glsl3":{"vert":"\nprecision highp float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\n  mat3 m = mat3(xAxis,yAxis,zAxis);\n  float trace = m[0][0] + m[1][1] + m[2][2];\n  vec4 quat;\n  if (trace > 0.) {\n    float s = 0.5 / sqrt(trace + 1.0);\n    quat.w = 0.25 / s;\n    quat.x = (m[2][1] - m[1][2]) * s;\n    quat.y = (m[0][2] - m[2][0]) * s;\n    quat.z = (m[1][0] - m[0][1]) * s;\n  } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n    float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n    quat.w = (m[2][1] - m[1][2]) / s;\n    quat.x = 0.25 * s;\n    quat.y = (m[0][1] + m[1][0]) / s;\n    quat.z = (m[0][2] + m[2][0]) / s;\n  } else if (m[1][1] > m[2][2]) {\n    float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n    quat.w = (m[0][2] - m[2][0]) / s;\n    quat.x = (m[0][1] + m[1][0]) / s;\n    quat.y = 0.25 * s;\n    quat.z = (m[1][2] + m[2][1]) / s;\n  } else {\n    float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n    quat.w = (m[1][0] - m[0][1]) / s;\n    quat.x = (m[0][2] + m[2][0]) / s;\n    quat.y = (m[1][2] + m[2][1]) / s;\n    quat.z = 0.25 * s;\n  }\n  float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n  if (len > 0.) {\n    len = 1. / sqrt(len);\n    quat.x = quat.x * len;\n    quat.y = quat.y * len;\n    quat.z = quat.z * len;\n    quat.w = quat.w * len;\n  }\n  return quat;\n}\nvec4 quaternionFromEuler (vec3 angle){\n  float x = angle.x / 2.;\n  float y = angle.y / 2.;\n  float z = angle.z / 2.;\n  float sx = sin(x);\n  float cx = cos(x);\n  float sy = sin(y);\n  float cy = cos(y);\n  float sz = sin(z);\n  float cz = cos(z);\n  vec4 quat = vec4(0);\n  quat.x = sx * cy * cz + cx * sy * sz;\n  quat.y = cx * sy * cz + sx * cy * sz;\n  quat.z = cx * cy * sz - sx * sy * cz;\n  quat.w = cx * cy * cz - sx * sy * sz;\n  return quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\n  float x2 = q.x + q.x;\n  float y2 = q.y + q.y;\n  float z2 = q.z + q.z;\n  float xx = q.x * x2;\n  float xy = q.x * y2;\n  float xz = q.x * z2;\n  float yy = q.y * y2;\n  float yz = q.y * z2;\n  float zz = q.z * z2;\n  float wx = q.w * x2;\n  float wy = q.w * y2;\n  float wz = q.w * z2;\n  return mat4(\n    1. - (yy + zz), xy + wz, xz - wy, 0,\n    xy - wz, 1. - (xx + zz), yz + wx, 0,\n    xz + wy, yz - wx, 1. - (xx + yy), 0,\n    p.x, p.y, p.z, 1\n  );\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  float x2 = x + x;\n  float y2 = y + y;\n  float z2 = z + z;\n  float xx = x * x2;\n  float xy = x * y2;\n  float xz = x * z2;\n  float yy = y * y2;\n  float yz = y * z2;\n  float zz = z * z2;\n  float wx = w * x2;\n  float wy = w * y2;\n  float wz = w * z2;\n  float sx = s.x;\n  float sy = s.y;\n  float sz = s.z;\n  return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n    (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n    (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n    t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\n  vec4 quat;\n  quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n  quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n  quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n  quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n  return quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\n  float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n  float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n  float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n  float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n  v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n  v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n  v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n  vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n  vec4 rotQuat = quatMultiply(viewQuat, q);\n  rotateVecFromQuat(pos, rotQuat);\n  return pos;\n}\nmat3 quatToMat3(vec4 q) {\n  vec3 m0 = vec3(\n    1.0 - 2.0 * q.y * q.y - 2.0 * q.z * q.z,\n    2.0 * q.x * q.y + 2.0 * q.w * q.z,\n    2.0 * q.x * q.z - 2.0 * q.w * q.y);\n\tvec3 m1 = vec3(\n    2.0 * q.x * q.y - 2.0 * q.w * q.z,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.z * q.z,\n    2.0 * q.y * q.z + 2.0 * q.w * q.x);\n\tvec3 m2 = vec3(\n    2.0 * q.x * q.z + 2.0 * q.w * q.y,\n    2.0 * q.y * q.z - 2.0 * q.w * q.x,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.y * q.y);\n  return mat3(m0, m1, m2);\n}\nvec4 mat3ToQuat(mat3 mat) {\n  float tr = mat[0][0] + mat[1][1] + mat[2][2];\n\tfloat qw, qx, qy, qz;\n  if (tr > 0.0) {\n    float S = sqrt(tr + 1.0) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = 0.25 * S;\n\t  qx = (mat[1][2] - mat[2][1]) * invS;\n\t  qy = (mat[2][0] - mat[0][2]) * invS;\n\t  qz = (mat[0][1] - mat[1][0]) * invS;\n  } else if ((mat[0][0] > mat[1][1])&&(mat[0][0] > mat[2][2])) {\n    float S = sqrt(1.0 + mat[0][0] - mat[1][1] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[1][2] - mat[2][1]) * invS;\n\t  qx = 0.25 * S;\n\t  qy = (mat[1][0] + mat[0][1]) * invS;\n\t  qz = (mat[2][0] + mat[0][2]) * invS;\n  } else if (mat[1][1] > mat[2][2]) {\n\t  float S = sqrt(1.0 + mat[1][1] - mat[0][0] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[2][0] - mat[0][2]) * invS;\n\t  qx = (mat[1][0] + mat[0][1]) * invS;\n\t  qy = 0.25 * S;\n\t  qz = (mat[2][1] + mat[1][2]) * invS;\n  } else {\n\t  float S = sqrt(1.0 + mat[2][2] - mat[0][0] - mat[1][1]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[0][1] - mat[1][0]) * invS;\n\t  qx = (mat[2][0] + mat[0][2]) * invS;\n\t  qy = (mat[2][1] + mat[1][2]) * invS;\n\t  qz = 0.25 * S;\n  }\n  return vec4(qx, qy, qz, qw);\n}\nlayout(std140) uniform Constants {\n  vec4 mainTiling_Offset;\n  vec4 frameTile_velLenScale;\n  vec4 scale;\n  vec4 nodeRotation;\n};\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(std140) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n};\nout mediump vec2 uv;\nout mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n  , mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n  vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n  vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = vec3(1, 0, 0);\n  vec3 camY = vec3(0, 0, -1);\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  rotateVecFromQuat(viewSpaceVert, q);\n  vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n  vec3 camY = vec3(0, 1, 0);\n  vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n  pos.xyz += offset;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\n  vertIndex.y = 1. - vertIndex.y;\n#endif\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nin vec3 a_position;\nin vec3 a_texCoord;\nin vec3 a_texCoord1;\nin vec3 a_texCoord2;\nin vec4 a_color;\n#if CC_RENDER_MODE == 1\n  in vec3 a_color1;\n#endif\n#if CC_RENDER_MODE == 4\n  in vec3 a_texCoord3;\n  in vec3 a_normal;\n  in vec4 a_color1;\n#endif\nvec4 lpvs_main () {\n  vec3 compScale = scale.xyz * a_texCoord1;\n  vec4 pos = vec4(a_position, 1);\n  #if CC_RENDER_MODE == 1\n    vec4 velocity = vec4(a_color1.xyz, 0);\n  #endif\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_RENDER_MODE == 1\n      velocity = cc_matWorld * velocity;\n    #endif\n  #endif\n  #if ROTATION_OVER_TIME_MODULE_ENABLE\n    vec3 rotTmp = a_texCoord2;\n    float mulFactor = 1.0;\n    if (rotTmp.x > 10.0 * 0.5) {\n        rotTmp.x -= 10.0;\n        mulFactor = -1.0;\n    }\n    vec4 rot = vec4(rotTmp, 0.0);\n    rot.w = mulFactor * sqrt(abs(1.0 - rot.x * rot.x - rot.y * rot.y - rot.z * rot.z));\n  #else\n    #if CC_RENDER_MODE != 4\n      #if CC_RENDER_MODE == 0\n        vec3 rotEuler = a_texCoord2;\n      #elif CC_RENDER_MODE == 1\n        vec3 rotEuler = vec3(0.);\n      #else\n        vec3 rotEuler = vec3(0., 0., a_texCoord2.z);\n      #endif\n      vec4 rot = quaternionFromEuler(rotEuler);\n    #else\n      vec4 rot = quaternionFromEuler(a_texCoord2);\n    #endif\n  #endif\n  #if CC_RENDER_MODE != 4\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n    #if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_matViewInv);\n    #elif CC_RENDER_MODE == 1\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_cameraPos.xyz, velocity, frameTile_velLenScale.z, frameTile_velLenScale.w, a_texCoord.x);\n    #elif 2\n      computeVertPos(pos, cornerOffset, rot, compScale);\n    #endif\n    color = a_color;\n  #else\n    mat3 rotMat = quatToMat3(rot);\n    mat3 nodeMat = quatToMat3(nodeRotation);\n    rotMat = nodeMat * rotMat;\n    rot = mat3ToQuat(rotMat);\n    mat4 xformNoScale = matrixFromRT(rot, pos.xyz);\n    mat4 xform = matFromRTS(rot, pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n  #endif\n  uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  pos = cc_matViewProj * pos;\n  return pos;\n}\nvoid main() { gl_Position = lpvs_main(); }","frag":"\nprecision mediump float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nin vec2 uv;\nin vec4 color;\nuniform sampler2D mainTexture;\nlayout(std140) uniform FragConstants {\n  vec4 tintColor;\n};\nvec4 add () {\n  vec4 col = 2.0 * color * tintColor * texture(mainTexture, uv);\n  return CCFragOutput(col);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = add(); }"},"glsl1":{"vert":"\nprecision highp float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\n  mat3 m = mat3(xAxis,yAxis,zAxis);\n  float trace = m[0][0] + m[1][1] + m[2][2];\n  vec4 quat;\n  if (trace > 0.) {\n    float s = 0.5 / sqrt(trace + 1.0);\n    quat.w = 0.25 / s;\n    quat.x = (m[2][1] - m[1][2]) * s;\n    quat.y = (m[0][2] - m[2][0]) * s;\n    quat.z = (m[1][0] - m[0][1]) * s;\n  } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n    float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n    quat.w = (m[2][1] - m[1][2]) / s;\n    quat.x = 0.25 * s;\n    quat.y = (m[0][1] + m[1][0]) / s;\n    quat.z = (m[0][2] + m[2][0]) / s;\n  } else if (m[1][1] > m[2][2]) {\n    float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n    quat.w = (m[0][2] - m[2][0]) / s;\n    quat.x = (m[0][1] + m[1][0]) / s;\n    quat.y = 0.25 * s;\n    quat.z = (m[1][2] + m[2][1]) / s;\n  } else {\n    float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n    quat.w = (m[1][0] - m[0][1]) / s;\n    quat.x = (m[0][2] + m[2][0]) / s;\n    quat.y = (m[1][2] + m[2][1]) / s;\n    quat.z = 0.25 * s;\n  }\n  float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n  if (len > 0.) {\n    len = 1. / sqrt(len);\n    quat.x = quat.x * len;\n    quat.y = quat.y * len;\n    quat.z = quat.z * len;\n    quat.w = quat.w * len;\n  }\n  return quat;\n}\nvec4 quaternionFromEuler (vec3 angle){\n  float x = angle.x / 2.;\n  float y = angle.y / 2.;\n  float z = angle.z / 2.;\n  float sx = sin(x);\n  float cx = cos(x);\n  float sy = sin(y);\n  float cy = cos(y);\n  float sz = sin(z);\n  float cz = cos(z);\n  vec4 quat = vec4(0);\n  quat.x = sx * cy * cz + cx * sy * sz;\n  quat.y = cx * sy * cz + sx * cy * sz;\n  quat.z = cx * cy * sz - sx * sy * cz;\n  quat.w = cx * cy * cz - sx * sy * sz;\n  return quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\n  float x2 = q.x + q.x;\n  float y2 = q.y + q.y;\n  float z2 = q.z + q.z;\n  float xx = q.x * x2;\n  float xy = q.x * y2;\n  float xz = q.x * z2;\n  float yy = q.y * y2;\n  float yz = q.y * z2;\n  float zz = q.z * z2;\n  float wx = q.w * x2;\n  float wy = q.w * y2;\n  float wz = q.w * z2;\n  return mat4(\n    1. - (yy + zz), xy + wz, xz - wy, 0,\n    xy - wz, 1. - (xx + zz), yz + wx, 0,\n    xz + wy, yz - wx, 1. - (xx + yy), 0,\n    p.x, p.y, p.z, 1\n  );\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  float x2 = x + x;\n  float y2 = y + y;\n  float z2 = z + z;\n  float xx = x * x2;\n  float xy = x * y2;\n  float xz = x * z2;\n  float yy = y * y2;\n  float yz = y * z2;\n  float zz = z * z2;\n  float wx = w * x2;\n  float wy = w * y2;\n  float wz = w * z2;\n  float sx = s.x;\n  float sy = s.y;\n  float sz = s.z;\n  return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n    (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n    (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n    t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\n  vec4 quat;\n  quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n  quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n  quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n  quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n  return quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\n  float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n  float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n  float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n  float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n  v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n  v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n  v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n  vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n  vec4 rotQuat = quatMultiply(viewQuat, q);\n  rotateVecFromQuat(pos, rotQuat);\n  return pos;\n}\nmat3 quatToMat3(vec4 q) {\n  vec3 m0 = vec3(\n    1.0 - 2.0 * q.y * q.y - 2.0 * q.z * q.z,\n    2.0 * q.x * q.y + 2.0 * q.w * q.z,\n    2.0 * q.x * q.z - 2.0 * q.w * q.y);\n\tvec3 m1 = vec3(\n    2.0 * q.x * q.y - 2.0 * q.w * q.z,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.z * q.z,\n    2.0 * q.y * q.z + 2.0 * q.w * q.x);\n\tvec3 m2 = vec3(\n    2.0 * q.x * q.z + 2.0 * q.w * q.y,\n    2.0 * q.y * q.z - 2.0 * q.w * q.x,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.y * q.y);\n  return mat3(m0, m1, m2);\n}\nvec4 mat3ToQuat(mat3 mat) {\n  float tr = mat[0][0] + mat[1][1] + mat[2][2];\n\tfloat qw, qx, qy, qz;\n  if (tr > 0.0) {\n    float S = sqrt(tr + 1.0) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = 0.25 * S;\n\t  qx = (mat[1][2] - mat[2][1]) * invS;\n\t  qy = (mat[2][0] - mat[0][2]) * invS;\n\t  qz = (mat[0][1] - mat[1][0]) * invS;\n  } else if ((mat[0][0] > mat[1][1])&&(mat[0][0] > mat[2][2])) {\n    float S = sqrt(1.0 + mat[0][0] - mat[1][1] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[1][2] - mat[2][1]) * invS;\n\t  qx = 0.25 * S;\n\t  qy = (mat[1][0] + mat[0][1]) * invS;\n\t  qz = (mat[2][0] + mat[0][2]) * invS;\n  } else if (mat[1][1] > mat[2][2]) {\n\t  float S = sqrt(1.0 + mat[1][1] - mat[0][0] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[2][0] - mat[0][2]) * invS;\n\t  qx = (mat[1][0] + mat[0][1]) * invS;\n\t  qy = 0.25 * S;\n\t  qz = (mat[2][1] + mat[1][2]) * invS;\n  } else {\n\t  float S = sqrt(1.0 + mat[2][2] - mat[0][0] - mat[1][1]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[0][1] - mat[1][0]) * invS;\n\t  qx = (mat[2][0] + mat[0][2]) * invS;\n\t  qy = (mat[2][1] + mat[1][2]) * invS;\n\t  qz = 0.25 * S;\n  }\n  return vec4(qx, qy, qz, qw);\n}\n   uniform vec4 mainTiling_Offset;\n   uniform vec4 frameTile_velLenScale;\n   uniform vec4 scale;\n   uniform vec4 nodeRotation;\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matViewInv;\n  uniform highp mat4 cc_matViewProj;\n  uniform highp vec4 cc_cameraPos;\nuniform highp mat4 cc_matWorld;\nvarying mediump vec2 uv;\nvarying mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n  , mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n  vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n  vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = vec3(1, 0, 0);\n  vec3 camY = vec3(0, 0, -1);\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  rotateVecFromQuat(viewSpaceVert, q);\n  vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n  vec3 camY = vec3(0, 1, 0);\n  vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n  pos.xyz += offset;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\n  vertIndex.y = 1. - vertIndex.y;\n#endif\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nattribute vec3 a_position;\nattribute vec3 a_texCoord;\nattribute vec3 a_texCoord1;\nattribute vec3 a_texCoord2;\nattribute vec4 a_color;\n#if CC_RENDER_MODE == 1\n  attribute vec3 a_color1;\n#endif\n#if CC_RENDER_MODE == 4\n  attribute vec3 a_texCoord3;\n  attribute vec3 a_normal;\n  attribute vec4 a_color1;\n#endif\nvec4 lpvs_main () {\n  vec3 compScale = scale.xyz * a_texCoord1;\n  vec4 pos = vec4(a_position, 1);\n  #if CC_RENDER_MODE == 1\n    vec4 velocity = vec4(a_color1.xyz, 0);\n  #endif\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_RENDER_MODE == 1\n      velocity = cc_matWorld * velocity;\n    #endif\n  #endif\n  #if ROTATION_OVER_TIME_MODULE_ENABLE\n    vec3 rotTmp = a_texCoord2;\n    float mulFactor = 1.0;\n    if (rotTmp.x > 10.0 * 0.5) {\n        rotTmp.x -= 10.0;\n        mulFactor = -1.0;\n    }\n    vec4 rot = vec4(rotTmp, 0.0);\n    rot.w = mulFactor * sqrt(abs(1.0 - rot.x * rot.x - rot.y * rot.y - rot.z * rot.z));\n  #else\n    #if CC_RENDER_MODE != 4\n      #if CC_RENDER_MODE == 0\n        vec3 rotEuler = a_texCoord2;\n      #elif CC_RENDER_MODE == 1\n        vec3 rotEuler = vec3(0.);\n      #else\n        vec3 rotEuler = vec3(0., 0., a_texCoord2.z);\n      #endif\n      vec4 rot = quaternionFromEuler(rotEuler);\n    #else\n      vec4 rot = quaternionFromEuler(a_texCoord2);\n    #endif\n  #endif\n  #if CC_RENDER_MODE != 4\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n    #if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_matViewInv);\n    #elif CC_RENDER_MODE == 1\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_cameraPos.xyz, velocity, frameTile_velLenScale.z, frameTile_velLenScale.w, a_texCoord.x);\n    #elif 2\n      computeVertPos(pos, cornerOffset, rot, compScale);\n    #endif\n    color = a_color;\n  #else\n    mat3 rotMat = quatToMat3(rot);\n    mat3 nodeMat = quatToMat3(nodeRotation);\n    rotMat = nodeMat * rotMat;\n    rot = mat3ToQuat(rotMat);\n    mat4 xformNoScale = matrixFromRT(rot, pos.xyz);\n    mat4 xform = matFromRTS(rot, pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n  #endif\n  uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  pos = cc_matViewProj * pos;\n  return pos;\n}\nvoid main() { gl_Position = lpvs_main(); }","frag":"\nprecision mediump float;\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nvarying vec2 uv;\nvarying vec4 color;\nuniform sampler2D mainTexture;\n  uniform vec4 tintColor;\nvec4 add () {\n  vec4 col = 2.0 * color * tintColor * texture2D(mainTexture, uv);\n  return CCFragOutput(col);\n}\nvoid main() { gl_FragColor = add(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":52,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":40}},"defines":[{"name":"CC_RENDER_MODE","type":"number","defines":[],"range":[0,4]},{"name":"CC_USE_WORLD_SPACE","type":"boolean","defines":[]},{"name":"ROTATION_OVER_TIME_MODULE_ENABLE","type":"boolean","defines":[]}]},{"hash":1720952533,"name":"builtin-particle|particle-vs-legacy:lpvs_main|tinted-fs:multiply","blocks":[{"name":"Constants","stageFlags":1,"binding":0,"members":[{"name":"mainTiling_Offset","type":16,"count":1},{"name":"frameTile_velLenScale","type":16,"count":1},{"name":"scale","type":16,"count":1},{"name":"nodeRotation","type":16,"count":1}],"defines":[]},{"name":"FragConstants","stageFlags":16,"binding":1,"members":[{"name":"tintColor","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"mainTexture","type":28,"count":1,"stageFlags":16,"binding":2,"defines":[]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_texCoord","format":32,"location":1,"defines":[]},{"name":"a_texCoord1","format":32,"location":2,"defines":[]},{"name":"a_texCoord2","format":32,"location":3,"defines":[]},{"name":"a_color","format":44,"location":4,"defines":[]},{"name":"a_color1","format":32,"location":8,"defines":["CC_RENDER_MODE"]},{"name":"a_texCoord3","format":32,"location":6,"defines":["CC_RENDER_MODE"]},{"name":"a_normal","format":32,"location":7,"defines":["CC_RENDER_MODE"]}],"varyings":[{"name":"uv","type":14,"count":1,"stageFlags":17,"location":0,"defines":[]},{"name":"color","type":16,"count":1,"stageFlags":17,"location":1,"defines":[]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"glsl4":{"vert":"\nprecision highp float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\n  mat3 m = mat3(xAxis,yAxis,zAxis);\n  float trace = m[0][0] + m[1][1] + m[2][2];\n  vec4 quat;\n  if (trace > 0.) {\n    float s = 0.5 / sqrt(trace + 1.0);\n    quat.w = 0.25 / s;\n    quat.x = (m[2][1] - m[1][2]) * s;\n    quat.y = (m[0][2] - m[2][0]) * s;\n    quat.z = (m[1][0] - m[0][1]) * s;\n  } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n    float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n    quat.w = (m[2][1] - m[1][2]) / s;\n    quat.x = 0.25 * s;\n    quat.y = (m[0][1] + m[1][0]) / s;\n    quat.z = (m[0][2] + m[2][0]) / s;\n  } else if (m[1][1] > m[2][2]) {\n    float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n    quat.w = (m[0][2] - m[2][0]) / s;\n    quat.x = (m[0][1] + m[1][0]) / s;\n    quat.y = 0.25 * s;\n    quat.z = (m[1][2] + m[2][1]) / s;\n  } else {\n    float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n    quat.w = (m[1][0] - m[0][1]) / s;\n    quat.x = (m[0][2] + m[2][0]) / s;\n    quat.y = (m[1][2] + m[2][1]) / s;\n    quat.z = 0.25 * s;\n  }\n  float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n  if (len > 0.) {\n    len = 1. / sqrt(len);\n    quat.x = quat.x * len;\n    quat.y = quat.y * len;\n    quat.z = quat.z * len;\n    quat.w = quat.w * len;\n  }\n  return quat;\n}\nvec4 quaternionFromEuler (vec3 angle){\n  float x = angle.x / 2.;\n  float y = angle.y / 2.;\n  float z = angle.z / 2.;\n  float sx = sin(x);\n  float cx = cos(x);\n  float sy = sin(y);\n  float cy = cos(y);\n  float sz = sin(z);\n  float cz = cos(z);\n  vec4 quat = vec4(0);\n  quat.x = sx * cy * cz + cx * sy * sz;\n  quat.y = cx * sy * cz + sx * cy * sz;\n  quat.z = cx * cy * sz - sx * sy * cz;\n  quat.w = cx * cy * cz - sx * sy * sz;\n  return quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\n  float x2 = q.x + q.x;\n  float y2 = q.y + q.y;\n  float z2 = q.z + q.z;\n  float xx = q.x * x2;\n  float xy = q.x * y2;\n  float xz = q.x * z2;\n  float yy = q.y * y2;\n  float yz = q.y * z2;\n  float zz = q.z * z2;\n  float wx = q.w * x2;\n  float wy = q.w * y2;\n  float wz = q.w * z2;\n  return mat4(\n    1. - (yy + zz), xy + wz, xz - wy, 0,\n    xy - wz, 1. - (xx + zz), yz + wx, 0,\n    xz + wy, yz - wx, 1. - (xx + yy), 0,\n    p.x, p.y, p.z, 1\n  );\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  float x2 = x + x;\n  float y2 = y + y;\n  float z2 = z + z;\n  float xx = x * x2;\n  float xy = x * y2;\n  float xz = x * z2;\n  float yy = y * y2;\n  float yz = y * z2;\n  float zz = z * z2;\n  float wx = w * x2;\n  float wy = w * y2;\n  float wz = w * z2;\n  float sx = s.x;\n  float sy = s.y;\n  float sz = s.z;\n  return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n    (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n    (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n    t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\n  vec4 quat;\n  quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n  quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n  quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n  quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n  return quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\n  float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n  float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n  float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n  float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n  v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n  v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n  v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n  vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n  vec4 rotQuat = quatMultiply(viewQuat, q);\n  rotateVecFromQuat(pos, rotQuat);\n  return pos;\n}\nmat3 quatToMat3(vec4 q) {\n  vec3 m0 = vec3(\n    1.0 - 2.0 * q.y * q.y - 2.0 * q.z * q.z,\n    2.0 * q.x * q.y + 2.0 * q.w * q.z,\n    2.0 * q.x * q.z - 2.0 * q.w * q.y);\n\tvec3 m1 = vec3(\n    2.0 * q.x * q.y - 2.0 * q.w * q.z,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.z * q.z,\n    2.0 * q.y * q.z + 2.0 * q.w * q.x);\n\tvec3 m2 = vec3(\n    2.0 * q.x * q.z + 2.0 * q.w * q.y,\n    2.0 * q.y * q.z - 2.0 * q.w * q.x,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.y * q.y);\n  return mat3(m0, m1, m2);\n}\nvec4 mat3ToQuat(mat3 mat) {\n  float tr = mat[0][0] + mat[1][1] + mat[2][2];\n\tfloat qw, qx, qy, qz;\n  if (tr > 0.0) {\n    float S = sqrt(tr + 1.0) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = 0.25 * S;\n\t  qx = (mat[1][2] - mat[2][1]) * invS;\n\t  qy = (mat[2][0] - mat[0][2]) * invS;\n\t  qz = (mat[0][1] - mat[1][0]) * invS;\n  } else if ((mat[0][0] > mat[1][1])&&(mat[0][0] > mat[2][2])) {\n    float S = sqrt(1.0 + mat[0][0] - mat[1][1] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[1][2] - mat[2][1]) * invS;\n\t  qx = 0.25 * S;\n\t  qy = (mat[1][0] + mat[0][1]) * invS;\n\t  qz = (mat[2][0] + mat[0][2]) * invS;\n  } else if (mat[1][1] > mat[2][2]) {\n\t  float S = sqrt(1.0 + mat[1][1] - mat[0][0] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[2][0] - mat[0][2]) * invS;\n\t  qx = (mat[1][0] + mat[0][1]) * invS;\n\t  qy = 0.25 * S;\n\t  qz = (mat[2][1] + mat[1][2]) * invS;\n  } else {\n\t  float S = sqrt(1.0 + mat[2][2] - mat[0][0] - mat[1][1]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[0][1] - mat[1][0]) * invS;\n\t  qx = (mat[2][0] + mat[0][2]) * invS;\n\t  qy = (mat[2][1] + mat[1][2]) * invS;\n\t  qz = 0.25 * S;\n  }\n  return vec4(qx, qy, qz, qw);\n}\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 mainTiling_Offset;\n  vec4 frameTile_velLenScale;\n  vec4 scale;\n  vec4 nodeRotation;\n};\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(set = 2, binding = 0) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n};\nlayout(location = 0) out mediump vec2 uv;\nlayout(location = 1) out mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n  , mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n  vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n  vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = vec3(1, 0, 0);\n  vec3 camY = vec3(0, 0, -1);\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  rotateVecFromQuat(viewSpaceVert, q);\n  vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n  vec3 camY = vec3(0, 1, 0);\n  vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n  pos.xyz += offset;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\n  vertIndex.y = 1. - vertIndex.y;\n#endif\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec3 a_texCoord;\nlayout(location = 2) in vec3 a_texCoord1;\nlayout(location = 3) in vec3 a_texCoord2;\nlayout(location = 4) in vec4 a_color;\n#if CC_RENDER_MODE == 1\n  layout(location = 8) in vec3 a_color1;\n#endif\n#if CC_RENDER_MODE == 4\n  layout(location = 6) in vec3 a_texCoord3;\n  layout(location = 7) in vec3 a_normal;\n  layout(location = 8) in vec4 a_color1;\n#endif\nvec4 lpvs_main () {\n  vec3 compScale = scale.xyz * a_texCoord1;\n  vec4 pos = vec4(a_position, 1);\n  #if CC_RENDER_MODE == 1\n    vec4 velocity = vec4(a_color1.xyz, 0);\n  #endif\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_RENDER_MODE == 1\n      velocity = cc_matWorld * velocity;\n    #endif\n  #endif\n  #if ROTATION_OVER_TIME_MODULE_ENABLE\n    vec3 rotTmp = a_texCoord2;\n    float mulFactor = 1.0;\n    if (rotTmp.x > 10.0 * 0.5) {\n        rotTmp.x -= 10.0;\n        mulFactor = -1.0;\n    }\n    vec4 rot = vec4(rotTmp, 0.0);\n    rot.w = mulFactor * sqrt(abs(1.0 - rot.x * rot.x - rot.y * rot.y - rot.z * rot.z));\n  #else\n    #if CC_RENDER_MODE != 4\n      #if CC_RENDER_MODE == 0\n        vec3 rotEuler = a_texCoord2;\n      #elif CC_RENDER_MODE == 1\n        vec3 rotEuler = vec3(0.);\n      #else\n        vec3 rotEuler = vec3(0., 0., a_texCoord2.z);\n      #endif\n      vec4 rot = quaternionFromEuler(rotEuler);\n    #else\n      vec4 rot = quaternionFromEuler(a_texCoord2);\n    #endif\n  #endif\n  #if CC_RENDER_MODE != 4\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n    #if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_matViewInv);\n    #elif CC_RENDER_MODE == 1\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_cameraPos.xyz, velocity, frameTile_velLenScale.z, frameTile_velLenScale.w, a_texCoord.x);\n    #elif 2\n      computeVertPos(pos, cornerOffset, rot, compScale);\n    #endif\n    color = a_color;\n  #else\n    mat3 rotMat = quatToMat3(rot);\n    mat3 nodeMat = quatToMat3(nodeRotation);\n    rotMat = nodeMat * rotMat;\n    rot = mat3ToQuat(rotMat);\n    mat4 xformNoScale = matrixFromRT(rot, pos.xyz);\n    mat4 xform = matFromRTS(rot, pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n  #endif\n  uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  pos = cc_matViewProj * pos;\n  return pos;\n}\nvoid main() { gl_Position = lpvs_main(); }","frag":"\nprecision mediump float;\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nlayout(location = 0) in vec2 uv;\nlayout(location = 1) in vec4 color;\nlayout(set = 1, binding = 2) uniform sampler2D mainTexture;\nlayout(set = 1, binding = 1) uniform FragConstants {\n  vec4 tintColor;\n};\nvec4 multiply () {\n  vec4 col;\n  vec4 texColor = texture(mainTexture, uv);\n  col.rgb = tintColor.rgb * texColor.rgb * color.rgb * vec3(2.0);\n  return CCFragOutput(col);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = multiply(); }"},"glsl3":{"vert":"\nprecision highp float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\n  mat3 m = mat3(xAxis,yAxis,zAxis);\n  float trace = m[0][0] + m[1][1] + m[2][2];\n  vec4 quat;\n  if (trace > 0.) {\n    float s = 0.5 / sqrt(trace + 1.0);\n    quat.w = 0.25 / s;\n    quat.x = (m[2][1] - m[1][2]) * s;\n    quat.y = (m[0][2] - m[2][0]) * s;\n    quat.z = (m[1][0] - m[0][1]) * s;\n  } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n    float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n    quat.w = (m[2][1] - m[1][2]) / s;\n    quat.x = 0.25 * s;\n    quat.y = (m[0][1] + m[1][0]) / s;\n    quat.z = (m[0][2] + m[2][0]) / s;\n  } else if (m[1][1] > m[2][2]) {\n    float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n    quat.w = (m[0][2] - m[2][0]) / s;\n    quat.x = (m[0][1] + m[1][0]) / s;\n    quat.y = 0.25 * s;\n    quat.z = (m[1][2] + m[2][1]) / s;\n  } else {\n    float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n    quat.w = (m[1][0] - m[0][1]) / s;\n    quat.x = (m[0][2] + m[2][0]) / s;\n    quat.y = (m[1][2] + m[2][1]) / s;\n    quat.z = 0.25 * s;\n  }\n  float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n  if (len > 0.) {\n    len = 1. / sqrt(len);\n    quat.x = quat.x * len;\n    quat.y = quat.y * len;\n    quat.z = quat.z * len;\n    quat.w = quat.w * len;\n  }\n  return quat;\n}\nvec4 quaternionFromEuler (vec3 angle){\n  float x = angle.x / 2.;\n  float y = angle.y / 2.;\n  float z = angle.z / 2.;\n  float sx = sin(x);\n  float cx = cos(x);\n  float sy = sin(y);\n  float cy = cos(y);\n  float sz = sin(z);\n  float cz = cos(z);\n  vec4 quat = vec4(0);\n  quat.x = sx * cy * cz + cx * sy * sz;\n  quat.y = cx * sy * cz + sx * cy * sz;\n  quat.z = cx * cy * sz - sx * sy * cz;\n  quat.w = cx * cy * cz - sx * sy * sz;\n  return quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\n  float x2 = q.x + q.x;\n  float y2 = q.y + q.y;\n  float z2 = q.z + q.z;\n  float xx = q.x * x2;\n  float xy = q.x * y2;\n  float xz = q.x * z2;\n  float yy = q.y * y2;\n  float yz = q.y * z2;\n  float zz = q.z * z2;\n  float wx = q.w * x2;\n  float wy = q.w * y2;\n  float wz = q.w * z2;\n  return mat4(\n    1. - (yy + zz), xy + wz, xz - wy, 0,\n    xy - wz, 1. - (xx + zz), yz + wx, 0,\n    xz + wy, yz - wx, 1. - (xx + yy), 0,\n    p.x, p.y, p.z, 1\n  );\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  float x2 = x + x;\n  float y2 = y + y;\n  float z2 = z + z;\n  float xx = x * x2;\n  float xy = x * y2;\n  float xz = x * z2;\n  float yy = y * y2;\n  float yz = y * z2;\n  float zz = z * z2;\n  float wx = w * x2;\n  float wy = w * y2;\n  float wz = w * z2;\n  float sx = s.x;\n  float sy = s.y;\n  float sz = s.z;\n  return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n    (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n    (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n    t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\n  vec4 quat;\n  quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n  quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n  quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n  quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n  return quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\n  float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n  float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n  float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n  float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n  v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n  v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n  v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n  vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n  vec4 rotQuat = quatMultiply(viewQuat, q);\n  rotateVecFromQuat(pos, rotQuat);\n  return pos;\n}\nmat3 quatToMat3(vec4 q) {\n  vec3 m0 = vec3(\n    1.0 - 2.0 * q.y * q.y - 2.0 * q.z * q.z,\n    2.0 * q.x * q.y + 2.0 * q.w * q.z,\n    2.0 * q.x * q.z - 2.0 * q.w * q.y);\n\tvec3 m1 = vec3(\n    2.0 * q.x * q.y - 2.0 * q.w * q.z,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.z * q.z,\n    2.0 * q.y * q.z + 2.0 * q.w * q.x);\n\tvec3 m2 = vec3(\n    2.0 * q.x * q.z + 2.0 * q.w * q.y,\n    2.0 * q.y * q.z - 2.0 * q.w * q.x,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.y * q.y);\n  return mat3(m0, m1, m2);\n}\nvec4 mat3ToQuat(mat3 mat) {\n  float tr = mat[0][0] + mat[1][1] + mat[2][2];\n\tfloat qw, qx, qy, qz;\n  if (tr > 0.0) {\n    float S = sqrt(tr + 1.0) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = 0.25 * S;\n\t  qx = (mat[1][2] - mat[2][1]) * invS;\n\t  qy = (mat[2][0] - mat[0][2]) * invS;\n\t  qz = (mat[0][1] - mat[1][0]) * invS;\n  } else if ((mat[0][0] > mat[1][1])&&(mat[0][0] > mat[2][2])) {\n    float S = sqrt(1.0 + mat[0][0] - mat[1][1] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[1][2] - mat[2][1]) * invS;\n\t  qx = 0.25 * S;\n\t  qy = (mat[1][0] + mat[0][1]) * invS;\n\t  qz = (mat[2][0] + mat[0][2]) * invS;\n  } else if (mat[1][1] > mat[2][2]) {\n\t  float S = sqrt(1.0 + mat[1][1] - mat[0][0] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[2][0] - mat[0][2]) * invS;\n\t  qx = (mat[1][0] + mat[0][1]) * invS;\n\t  qy = 0.25 * S;\n\t  qz = (mat[2][1] + mat[1][2]) * invS;\n  } else {\n\t  float S = sqrt(1.0 + mat[2][2] - mat[0][0] - mat[1][1]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[0][1] - mat[1][0]) * invS;\n\t  qx = (mat[2][0] + mat[0][2]) * invS;\n\t  qy = (mat[2][1] + mat[1][2]) * invS;\n\t  qz = 0.25 * S;\n  }\n  return vec4(qx, qy, qz, qw);\n}\nlayout(std140) uniform Constants {\n  vec4 mainTiling_Offset;\n  vec4 frameTile_velLenScale;\n  vec4 scale;\n  vec4 nodeRotation;\n};\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(std140) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n};\nout mediump vec2 uv;\nout mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n  , mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n  vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n  vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = vec3(1, 0, 0);\n  vec3 camY = vec3(0, 0, -1);\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  rotateVecFromQuat(viewSpaceVert, q);\n  vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n  vec3 camY = vec3(0, 1, 0);\n  vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n  pos.xyz += offset;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\n  vertIndex.y = 1. - vertIndex.y;\n#endif\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nin vec3 a_position;\nin vec3 a_texCoord;\nin vec3 a_texCoord1;\nin vec3 a_texCoord2;\nin vec4 a_color;\n#if CC_RENDER_MODE == 1\n  in vec3 a_color1;\n#endif\n#if CC_RENDER_MODE == 4\n  in vec3 a_texCoord3;\n  in vec3 a_normal;\n  in vec4 a_color1;\n#endif\nvec4 lpvs_main () {\n  vec3 compScale = scale.xyz * a_texCoord1;\n  vec4 pos = vec4(a_position, 1);\n  #if CC_RENDER_MODE == 1\n    vec4 velocity = vec4(a_color1.xyz, 0);\n  #endif\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_RENDER_MODE == 1\n      velocity = cc_matWorld * velocity;\n    #endif\n  #endif\n  #if ROTATION_OVER_TIME_MODULE_ENABLE\n    vec3 rotTmp = a_texCoord2;\n    float mulFactor = 1.0;\n    if (rotTmp.x > 10.0 * 0.5) {\n        rotTmp.x -= 10.0;\n        mulFactor = -1.0;\n    }\n    vec4 rot = vec4(rotTmp, 0.0);\n    rot.w = mulFactor * sqrt(abs(1.0 - rot.x * rot.x - rot.y * rot.y - rot.z * rot.z));\n  #else\n    #if CC_RENDER_MODE != 4\n      #if CC_RENDER_MODE == 0\n        vec3 rotEuler = a_texCoord2;\n      #elif CC_RENDER_MODE == 1\n        vec3 rotEuler = vec3(0.);\n      #else\n        vec3 rotEuler = vec3(0., 0., a_texCoord2.z);\n      #endif\n      vec4 rot = quaternionFromEuler(rotEuler);\n    #else\n      vec4 rot = quaternionFromEuler(a_texCoord2);\n    #endif\n  #endif\n  #if CC_RENDER_MODE != 4\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n    #if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_matViewInv);\n    #elif CC_RENDER_MODE == 1\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_cameraPos.xyz, velocity, frameTile_velLenScale.z, frameTile_velLenScale.w, a_texCoord.x);\n    #elif 2\n      computeVertPos(pos, cornerOffset, rot, compScale);\n    #endif\n    color = a_color;\n  #else\n    mat3 rotMat = quatToMat3(rot);\n    mat3 nodeMat = quatToMat3(nodeRotation);\n    rotMat = nodeMat * rotMat;\n    rot = mat3ToQuat(rotMat);\n    mat4 xformNoScale = matrixFromRT(rot, pos.xyz);\n    mat4 xform = matFromRTS(rot, pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n  #endif\n  uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  pos = cc_matViewProj * pos;\n  return pos;\n}\nvoid main() { gl_Position = lpvs_main(); }","frag":"\nprecision mediump float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nin vec2 uv;\nin vec4 color;\nuniform sampler2D mainTexture;\nlayout(std140) uniform FragConstants {\n  vec4 tintColor;\n};\nvec4 multiply () {\n  vec4 col;\n  vec4 texColor = texture(mainTexture, uv);\n  col.rgb = tintColor.rgb * texColor.rgb * color.rgb * vec3(2.0);\n  return CCFragOutput(col);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = multiply(); }"},"glsl1":{"vert":"\nprecision highp float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\n  mat3 m = mat3(xAxis,yAxis,zAxis);\n  float trace = m[0][0] + m[1][1] + m[2][2];\n  vec4 quat;\n  if (trace > 0.) {\n    float s = 0.5 / sqrt(trace + 1.0);\n    quat.w = 0.25 / s;\n    quat.x = (m[2][1] - m[1][2]) * s;\n    quat.y = (m[0][2] - m[2][0]) * s;\n    quat.z = (m[1][0] - m[0][1]) * s;\n  } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n    float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n    quat.w = (m[2][1] - m[1][2]) / s;\n    quat.x = 0.25 * s;\n    quat.y = (m[0][1] + m[1][0]) / s;\n    quat.z = (m[0][2] + m[2][0]) / s;\n  } else if (m[1][1] > m[2][2]) {\n    float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n    quat.w = (m[0][2] - m[2][0]) / s;\n    quat.x = (m[0][1] + m[1][0]) / s;\n    quat.y = 0.25 * s;\n    quat.z = (m[1][2] + m[2][1]) / s;\n  } else {\n    float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n    quat.w = (m[1][0] - m[0][1]) / s;\n    quat.x = (m[0][2] + m[2][0]) / s;\n    quat.y = (m[1][2] + m[2][1]) / s;\n    quat.z = 0.25 * s;\n  }\n  float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n  if (len > 0.) {\n    len = 1. / sqrt(len);\n    quat.x = quat.x * len;\n    quat.y = quat.y * len;\n    quat.z = quat.z * len;\n    quat.w = quat.w * len;\n  }\n  return quat;\n}\nvec4 quaternionFromEuler (vec3 angle){\n  float x = angle.x / 2.;\n  float y = angle.y / 2.;\n  float z = angle.z / 2.;\n  float sx = sin(x);\n  float cx = cos(x);\n  float sy = sin(y);\n  float cy = cos(y);\n  float sz = sin(z);\n  float cz = cos(z);\n  vec4 quat = vec4(0);\n  quat.x = sx * cy * cz + cx * sy * sz;\n  quat.y = cx * sy * cz + sx * cy * sz;\n  quat.z = cx * cy * sz - sx * sy * cz;\n  quat.w = cx * cy * cz - sx * sy * sz;\n  return quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\n  float x2 = q.x + q.x;\n  float y2 = q.y + q.y;\n  float z2 = q.z + q.z;\n  float xx = q.x * x2;\n  float xy = q.x * y2;\n  float xz = q.x * z2;\n  float yy = q.y * y2;\n  float yz = q.y * z2;\n  float zz = q.z * z2;\n  float wx = q.w * x2;\n  float wy = q.w * y2;\n  float wz = q.w * z2;\n  return mat4(\n    1. - (yy + zz), xy + wz, xz - wy, 0,\n    xy - wz, 1. - (xx + zz), yz + wx, 0,\n    xz + wy, yz - wx, 1. - (xx + yy), 0,\n    p.x, p.y, p.z, 1\n  );\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  float x2 = x + x;\n  float y2 = y + y;\n  float z2 = z + z;\n  float xx = x * x2;\n  float xy = x * y2;\n  float xz = x * z2;\n  float yy = y * y2;\n  float yz = y * z2;\n  float zz = z * z2;\n  float wx = w * x2;\n  float wy = w * y2;\n  float wz = w * z2;\n  float sx = s.x;\n  float sy = s.y;\n  float sz = s.z;\n  return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n    (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n    (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n    t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\n  vec4 quat;\n  quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n  quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n  quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n  quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n  return quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\n  float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n  float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n  float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n  float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n  v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n  v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n  v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n  vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n  vec4 rotQuat = quatMultiply(viewQuat, q);\n  rotateVecFromQuat(pos, rotQuat);\n  return pos;\n}\nmat3 quatToMat3(vec4 q) {\n  vec3 m0 = vec3(\n    1.0 - 2.0 * q.y * q.y - 2.0 * q.z * q.z,\n    2.0 * q.x * q.y + 2.0 * q.w * q.z,\n    2.0 * q.x * q.z - 2.0 * q.w * q.y);\n\tvec3 m1 = vec3(\n    2.0 * q.x * q.y - 2.0 * q.w * q.z,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.z * q.z,\n    2.0 * q.y * q.z + 2.0 * q.w * q.x);\n\tvec3 m2 = vec3(\n    2.0 * q.x * q.z + 2.0 * q.w * q.y,\n    2.0 * q.y * q.z - 2.0 * q.w * q.x,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.y * q.y);\n  return mat3(m0, m1, m2);\n}\nvec4 mat3ToQuat(mat3 mat) {\n  float tr = mat[0][0] + mat[1][1] + mat[2][2];\n\tfloat qw, qx, qy, qz;\n  if (tr > 0.0) {\n    float S = sqrt(tr + 1.0) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = 0.25 * S;\n\t  qx = (mat[1][2] - mat[2][1]) * invS;\n\t  qy = (mat[2][0] - mat[0][2]) * invS;\n\t  qz = (mat[0][1] - mat[1][0]) * invS;\n  } else if ((mat[0][0] > mat[1][1])&&(mat[0][0] > mat[2][2])) {\n    float S = sqrt(1.0 + mat[0][0] - mat[1][1] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[1][2] - mat[2][1]) * invS;\n\t  qx = 0.25 * S;\n\t  qy = (mat[1][0] + mat[0][1]) * invS;\n\t  qz = (mat[2][0] + mat[0][2]) * invS;\n  } else if (mat[1][1] > mat[2][2]) {\n\t  float S = sqrt(1.0 + mat[1][1] - mat[0][0] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[2][0] - mat[0][2]) * invS;\n\t  qx = (mat[1][0] + mat[0][1]) * invS;\n\t  qy = 0.25 * S;\n\t  qz = (mat[2][1] + mat[1][2]) * invS;\n  } else {\n\t  float S = sqrt(1.0 + mat[2][2] - mat[0][0] - mat[1][1]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[0][1] - mat[1][0]) * invS;\n\t  qx = (mat[2][0] + mat[0][2]) * invS;\n\t  qy = (mat[2][1] + mat[1][2]) * invS;\n\t  qz = 0.25 * S;\n  }\n  return vec4(qx, qy, qz, qw);\n}\n   uniform vec4 mainTiling_Offset;\n   uniform vec4 frameTile_velLenScale;\n   uniform vec4 scale;\n   uniform vec4 nodeRotation;\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matViewInv;\n  uniform highp mat4 cc_matViewProj;\n  uniform highp vec4 cc_cameraPos;\nuniform highp mat4 cc_matWorld;\nvarying mediump vec2 uv;\nvarying mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n  , mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n  vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n  vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = vec3(1, 0, 0);\n  vec3 camY = vec3(0, 0, -1);\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  rotateVecFromQuat(viewSpaceVert, q);\n  vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n  vec3 camY = vec3(0, 1, 0);\n  vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n  pos.xyz += offset;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\n  vertIndex.y = 1. - vertIndex.y;\n#endif\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nattribute vec3 a_position;\nattribute vec3 a_texCoord;\nattribute vec3 a_texCoord1;\nattribute vec3 a_texCoord2;\nattribute vec4 a_color;\n#if CC_RENDER_MODE == 1\n  attribute vec3 a_color1;\n#endif\n#if CC_RENDER_MODE == 4\n  attribute vec3 a_texCoord3;\n  attribute vec3 a_normal;\n  attribute vec4 a_color1;\n#endif\nvec4 lpvs_main () {\n  vec3 compScale = scale.xyz * a_texCoord1;\n  vec4 pos = vec4(a_position, 1);\n  #if CC_RENDER_MODE == 1\n    vec4 velocity = vec4(a_color1.xyz, 0);\n  #endif\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_RENDER_MODE == 1\n      velocity = cc_matWorld * velocity;\n    #endif\n  #endif\n  #if ROTATION_OVER_TIME_MODULE_ENABLE\n    vec3 rotTmp = a_texCoord2;\n    float mulFactor = 1.0;\n    if (rotTmp.x > 10.0 * 0.5) {\n        rotTmp.x -= 10.0;\n        mulFactor = -1.0;\n    }\n    vec4 rot = vec4(rotTmp, 0.0);\n    rot.w = mulFactor * sqrt(abs(1.0 - rot.x * rot.x - rot.y * rot.y - rot.z * rot.z));\n  #else\n    #if CC_RENDER_MODE != 4\n      #if CC_RENDER_MODE == 0\n        vec3 rotEuler = a_texCoord2;\n      #elif CC_RENDER_MODE == 1\n        vec3 rotEuler = vec3(0.);\n      #else\n        vec3 rotEuler = vec3(0., 0., a_texCoord2.z);\n      #endif\n      vec4 rot = quaternionFromEuler(rotEuler);\n    #else\n      vec4 rot = quaternionFromEuler(a_texCoord2);\n    #endif\n  #endif\n  #if CC_RENDER_MODE != 4\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n    #if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_matViewInv);\n    #elif CC_RENDER_MODE == 1\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_cameraPos.xyz, velocity, frameTile_velLenScale.z, frameTile_velLenScale.w, a_texCoord.x);\n    #elif 2\n      computeVertPos(pos, cornerOffset, rot, compScale);\n    #endif\n    color = a_color;\n  #else\n    mat3 rotMat = quatToMat3(rot);\n    mat3 nodeMat = quatToMat3(nodeRotation);\n    rotMat = nodeMat * rotMat;\n    rot = mat3ToQuat(rotMat);\n    mat4 xformNoScale = matrixFromRT(rot, pos.xyz);\n    mat4 xform = matFromRTS(rot, pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n  #endif\n  uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  pos = cc_matViewProj * pos;\n  return pos;\n}\nvoid main() { gl_Position = lpvs_main(); }","frag":"\nprecision mediump float;\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nvarying vec2 uv;\nvarying vec4 color;\nuniform sampler2D mainTexture;\n  uniform vec4 tintColor;\nvec4 multiply () {\n  vec4 col;\n  vec4 texColor = texture2D(mainTexture, uv);\n  col.rgb = tintColor.rgb * texColor.rgb * color.rgb * vec3(2.0);\n  return CCFragOutput(col);\n}\nvoid main() { gl_FragColor = multiply(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":52,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":40}},"defines":[{"name":"CC_RENDER_MODE","type":"number","defines":[],"range":[0,4]},{"name":"CC_USE_WORLD_SPACE","type":"boolean","defines":[]},{"name":"ROTATION_OVER_TIME_MODULE_ENABLE","type":"boolean","defines":[]}]},{"hash":1759026248,"name":"builtin-particle|particle-vs-legacy:lpvs_main|no-tint-fs:addSmooth","blocks":[{"name":"Constants","stageFlags":1,"binding":0,"members":[{"name":"mainTiling_Offset","type":16,"count":1},{"name":"frameTile_velLenScale","type":16,"count":1},{"name":"scale","type":16,"count":1},{"name":"nodeRotation","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"mainTexture","type":28,"count":1,"stageFlags":16,"binding":1,"defines":[]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_texCoord","format":32,"location":1,"defines":[]},{"name":"a_texCoord1","format":32,"location":2,"defines":[]},{"name":"a_texCoord2","format":32,"location":3,"defines":[]},{"name":"a_color","format":44,"location":4,"defines":[]},{"name":"a_color1","format":32,"location":8,"defines":["CC_RENDER_MODE"]},{"name":"a_texCoord3","format":32,"location":6,"defines":["CC_RENDER_MODE"]},{"name":"a_normal","format":32,"location":7,"defines":["CC_RENDER_MODE"]}],"varyings":[{"name":"uv","type":14,"count":1,"stageFlags":17,"location":0,"defines":[]},{"name":"color","type":16,"count":1,"stageFlags":17,"location":1,"defines":[]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"glsl4":{"vert":"\nprecision highp float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\n  mat3 m = mat3(xAxis,yAxis,zAxis);\n  float trace = m[0][0] + m[1][1] + m[2][2];\n  vec4 quat;\n  if (trace > 0.) {\n    float s = 0.5 / sqrt(trace + 1.0);\n    quat.w = 0.25 / s;\n    quat.x = (m[2][1] - m[1][2]) * s;\n    quat.y = (m[0][2] - m[2][0]) * s;\n    quat.z = (m[1][0] - m[0][1]) * s;\n  } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n    float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n    quat.w = (m[2][1] - m[1][2]) / s;\n    quat.x = 0.25 * s;\n    quat.y = (m[0][1] + m[1][0]) / s;\n    quat.z = (m[0][2] + m[2][0]) / s;\n  } else if (m[1][1] > m[2][2]) {\n    float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n    quat.w = (m[0][2] - m[2][0]) / s;\n    quat.x = (m[0][1] + m[1][0]) / s;\n    quat.y = 0.25 * s;\n    quat.z = (m[1][2] + m[2][1]) / s;\n  } else {\n    float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n    quat.w = (m[1][0] - m[0][1]) / s;\n    quat.x = (m[0][2] + m[2][0]) / s;\n    quat.y = (m[1][2] + m[2][1]) / s;\n    quat.z = 0.25 * s;\n  }\n  float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n  if (len > 0.) {\n    len = 1. / sqrt(len);\n    quat.x = quat.x * len;\n    quat.y = quat.y * len;\n    quat.z = quat.z * len;\n    quat.w = quat.w * len;\n  }\n  return quat;\n}\nvec4 quaternionFromEuler (vec3 angle){\n  float x = angle.x / 2.;\n  float y = angle.y / 2.;\n  float z = angle.z / 2.;\n  float sx = sin(x);\n  float cx = cos(x);\n  float sy = sin(y);\n  float cy = cos(y);\n  float sz = sin(z);\n  float cz = cos(z);\n  vec4 quat = vec4(0);\n  quat.x = sx * cy * cz + cx * sy * sz;\n  quat.y = cx * sy * cz + sx * cy * sz;\n  quat.z = cx * cy * sz - sx * sy * cz;\n  quat.w = cx * cy * cz - sx * sy * sz;\n  return quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\n  float x2 = q.x + q.x;\n  float y2 = q.y + q.y;\n  float z2 = q.z + q.z;\n  float xx = q.x * x2;\n  float xy = q.x * y2;\n  float xz = q.x * z2;\n  float yy = q.y * y2;\n  float yz = q.y * z2;\n  float zz = q.z * z2;\n  float wx = q.w * x2;\n  float wy = q.w * y2;\n  float wz = q.w * z2;\n  return mat4(\n    1. - (yy + zz), xy + wz, xz - wy, 0,\n    xy - wz, 1. - (xx + zz), yz + wx, 0,\n    xz + wy, yz - wx, 1. - (xx + yy), 0,\n    p.x, p.y, p.z, 1\n  );\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  float x2 = x + x;\n  float y2 = y + y;\n  float z2 = z + z;\n  float xx = x * x2;\n  float xy = x * y2;\n  float xz = x * z2;\n  float yy = y * y2;\n  float yz = y * z2;\n  float zz = z * z2;\n  float wx = w * x2;\n  float wy = w * y2;\n  float wz = w * z2;\n  float sx = s.x;\n  float sy = s.y;\n  float sz = s.z;\n  return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n    (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n    (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n    t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\n  vec4 quat;\n  quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n  quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n  quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n  quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n  return quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\n  float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n  float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n  float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n  float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n  v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n  v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n  v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n  vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n  vec4 rotQuat = quatMultiply(viewQuat, q);\n  rotateVecFromQuat(pos, rotQuat);\n  return pos;\n}\nmat3 quatToMat3(vec4 q) {\n  vec3 m0 = vec3(\n    1.0 - 2.0 * q.y * q.y - 2.0 * q.z * q.z,\n    2.0 * q.x * q.y + 2.0 * q.w * q.z,\n    2.0 * q.x * q.z - 2.0 * q.w * q.y);\n\tvec3 m1 = vec3(\n    2.0 * q.x * q.y - 2.0 * q.w * q.z,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.z * q.z,\n    2.0 * q.y * q.z + 2.0 * q.w * q.x);\n\tvec3 m2 = vec3(\n    2.0 * q.x * q.z + 2.0 * q.w * q.y,\n    2.0 * q.y * q.z - 2.0 * q.w * q.x,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.y * q.y);\n  return mat3(m0, m1, m2);\n}\nvec4 mat3ToQuat(mat3 mat) {\n  float tr = mat[0][0] + mat[1][1] + mat[2][2];\n\tfloat qw, qx, qy, qz;\n  if (tr > 0.0) {\n    float S = sqrt(tr + 1.0) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = 0.25 * S;\n\t  qx = (mat[1][2] - mat[2][1]) * invS;\n\t  qy = (mat[2][0] - mat[0][2]) * invS;\n\t  qz = (mat[0][1] - mat[1][0]) * invS;\n  } else if ((mat[0][0] > mat[1][1])&&(mat[0][0] > mat[2][2])) {\n    float S = sqrt(1.0 + mat[0][0] - mat[1][1] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[1][2] - mat[2][1]) * invS;\n\t  qx = 0.25 * S;\n\t  qy = (mat[1][0] + mat[0][1]) * invS;\n\t  qz = (mat[2][0] + mat[0][2]) * invS;\n  } else if (mat[1][1] > mat[2][2]) {\n\t  float S = sqrt(1.0 + mat[1][1] - mat[0][0] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[2][0] - mat[0][2]) * invS;\n\t  qx = (mat[1][0] + mat[0][1]) * invS;\n\t  qy = 0.25 * S;\n\t  qz = (mat[2][1] + mat[1][2]) * invS;\n  } else {\n\t  float S = sqrt(1.0 + mat[2][2] - mat[0][0] - mat[1][1]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[0][1] - mat[1][0]) * invS;\n\t  qx = (mat[2][0] + mat[0][2]) * invS;\n\t  qy = (mat[2][1] + mat[1][2]) * invS;\n\t  qz = 0.25 * S;\n  }\n  return vec4(qx, qy, qz, qw);\n}\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 mainTiling_Offset;\n  vec4 frameTile_velLenScale;\n  vec4 scale;\n  vec4 nodeRotation;\n};\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(set = 2, binding = 0) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n};\nlayout(location = 0) out mediump vec2 uv;\nlayout(location = 1) out mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n  , mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n  vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n  vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = vec3(1, 0, 0);\n  vec3 camY = vec3(0, 0, -1);\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  rotateVecFromQuat(viewSpaceVert, q);\n  vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n  vec3 camY = vec3(0, 1, 0);\n  vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n  pos.xyz += offset;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\n  vertIndex.y = 1. - vertIndex.y;\n#endif\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec3 a_texCoord;\nlayout(location = 2) in vec3 a_texCoord1;\nlayout(location = 3) in vec3 a_texCoord2;\nlayout(location = 4) in vec4 a_color;\n#if CC_RENDER_MODE == 1\n  layout(location = 8) in vec3 a_color1;\n#endif\n#if CC_RENDER_MODE == 4\n  layout(location = 6) in vec3 a_texCoord3;\n  layout(location = 7) in vec3 a_normal;\n  layout(location = 8) in vec4 a_color1;\n#endif\nvec4 lpvs_main () {\n  vec3 compScale = scale.xyz * a_texCoord1;\n  vec4 pos = vec4(a_position, 1);\n  #if CC_RENDER_MODE == 1\n    vec4 velocity = vec4(a_color1.xyz, 0);\n  #endif\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_RENDER_MODE == 1\n      velocity = cc_matWorld * velocity;\n    #endif\n  #endif\n  #if ROTATION_OVER_TIME_MODULE_ENABLE\n    vec3 rotTmp = a_texCoord2;\n    float mulFactor = 1.0;\n    if (rotTmp.x > 10.0 * 0.5) {\n        rotTmp.x -= 10.0;\n        mulFactor = -1.0;\n    }\n    vec4 rot = vec4(rotTmp, 0.0);\n    rot.w = mulFactor * sqrt(abs(1.0 - rot.x * rot.x - rot.y * rot.y - rot.z * rot.z));\n  #else\n    #if CC_RENDER_MODE != 4\n      #if CC_RENDER_MODE == 0\n        vec3 rotEuler = a_texCoord2;\n      #elif CC_RENDER_MODE == 1\n        vec3 rotEuler = vec3(0.);\n      #else\n        vec3 rotEuler = vec3(0., 0., a_texCoord2.z);\n      #endif\n      vec4 rot = quaternionFromEuler(rotEuler);\n    #else\n      vec4 rot = quaternionFromEuler(a_texCoord2);\n    #endif\n  #endif\n  #if CC_RENDER_MODE != 4\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n    #if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_matViewInv);\n    #elif CC_RENDER_MODE == 1\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_cameraPos.xyz, velocity, frameTile_velLenScale.z, frameTile_velLenScale.w, a_texCoord.x);\n    #elif 2\n      computeVertPos(pos, cornerOffset, rot, compScale);\n    #endif\n    color = a_color;\n  #else\n    mat3 rotMat = quatToMat3(rot);\n    mat3 nodeMat = quatToMat3(nodeRotation);\n    rotMat = nodeMat * rotMat;\n    rot = mat3ToQuat(rotMat);\n    mat4 xformNoScale = matrixFromRT(rot, pos.xyz);\n    mat4 xform = matFromRTS(rot, pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n  #endif\n  uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  pos = cc_matViewProj * pos;\n  return pos;\n}\nvoid main() { gl_Position = lpvs_main(); }","frag":"\nprecision mediump float;\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nlayout(location = 0) in vec2 uv;\nlayout(location = 1) in vec4 color;\nlayout(set = 1, binding = 1) uniform sampler2D mainTexture;\nvec4 addSmooth () {\n  vec4 col = color * texture(mainTexture, uv);\n  col.rgb *= col.a;\n  return CCFragOutput(col);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = addSmooth(); }"},"glsl3":{"vert":"\nprecision highp float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\n  mat3 m = mat3(xAxis,yAxis,zAxis);\n  float trace = m[0][0] + m[1][1] + m[2][2];\n  vec4 quat;\n  if (trace > 0.) {\n    float s = 0.5 / sqrt(trace + 1.0);\n    quat.w = 0.25 / s;\n    quat.x = (m[2][1] - m[1][2]) * s;\n    quat.y = (m[0][2] - m[2][0]) * s;\n    quat.z = (m[1][0] - m[0][1]) * s;\n  } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n    float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n    quat.w = (m[2][1] - m[1][2]) / s;\n    quat.x = 0.25 * s;\n    quat.y = (m[0][1] + m[1][0]) / s;\n    quat.z = (m[0][2] + m[2][0]) / s;\n  } else if (m[1][1] > m[2][2]) {\n    float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n    quat.w = (m[0][2] - m[2][0]) / s;\n    quat.x = (m[0][1] + m[1][0]) / s;\n    quat.y = 0.25 * s;\n    quat.z = (m[1][2] + m[2][1]) / s;\n  } else {\n    float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n    quat.w = (m[1][0] - m[0][1]) / s;\n    quat.x = (m[0][2] + m[2][0]) / s;\n    quat.y = (m[1][2] + m[2][1]) / s;\n    quat.z = 0.25 * s;\n  }\n  float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n  if (len > 0.) {\n    len = 1. / sqrt(len);\n    quat.x = quat.x * len;\n    quat.y = quat.y * len;\n    quat.z = quat.z * len;\n    quat.w = quat.w * len;\n  }\n  return quat;\n}\nvec4 quaternionFromEuler (vec3 angle){\n  float x = angle.x / 2.;\n  float y = angle.y / 2.;\n  float z = angle.z / 2.;\n  float sx = sin(x);\n  float cx = cos(x);\n  float sy = sin(y);\n  float cy = cos(y);\n  float sz = sin(z);\n  float cz = cos(z);\n  vec4 quat = vec4(0);\n  quat.x = sx * cy * cz + cx * sy * sz;\n  quat.y = cx * sy * cz + sx * cy * sz;\n  quat.z = cx * cy * sz - sx * sy * cz;\n  quat.w = cx * cy * cz - sx * sy * sz;\n  return quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\n  float x2 = q.x + q.x;\n  float y2 = q.y + q.y;\n  float z2 = q.z + q.z;\n  float xx = q.x * x2;\n  float xy = q.x * y2;\n  float xz = q.x * z2;\n  float yy = q.y * y2;\n  float yz = q.y * z2;\n  float zz = q.z * z2;\n  float wx = q.w * x2;\n  float wy = q.w * y2;\n  float wz = q.w * z2;\n  return mat4(\n    1. - (yy + zz), xy + wz, xz - wy, 0,\n    xy - wz, 1. - (xx + zz), yz + wx, 0,\n    xz + wy, yz - wx, 1. - (xx + yy), 0,\n    p.x, p.y, p.z, 1\n  );\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  float x2 = x + x;\n  float y2 = y + y;\n  float z2 = z + z;\n  float xx = x * x2;\n  float xy = x * y2;\n  float xz = x * z2;\n  float yy = y * y2;\n  float yz = y * z2;\n  float zz = z * z2;\n  float wx = w * x2;\n  float wy = w * y2;\n  float wz = w * z2;\n  float sx = s.x;\n  float sy = s.y;\n  float sz = s.z;\n  return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n    (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n    (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n    t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\n  vec4 quat;\n  quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n  quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n  quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n  quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n  return quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\n  float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n  float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n  float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n  float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n  v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n  v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n  v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n  vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n  vec4 rotQuat = quatMultiply(viewQuat, q);\n  rotateVecFromQuat(pos, rotQuat);\n  return pos;\n}\nmat3 quatToMat3(vec4 q) {\n  vec3 m0 = vec3(\n    1.0 - 2.0 * q.y * q.y - 2.0 * q.z * q.z,\n    2.0 * q.x * q.y + 2.0 * q.w * q.z,\n    2.0 * q.x * q.z - 2.0 * q.w * q.y);\n\tvec3 m1 = vec3(\n    2.0 * q.x * q.y - 2.0 * q.w * q.z,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.z * q.z,\n    2.0 * q.y * q.z + 2.0 * q.w * q.x);\n\tvec3 m2 = vec3(\n    2.0 * q.x * q.z + 2.0 * q.w * q.y,\n    2.0 * q.y * q.z - 2.0 * q.w * q.x,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.y * q.y);\n  return mat3(m0, m1, m2);\n}\nvec4 mat3ToQuat(mat3 mat) {\n  float tr = mat[0][0] + mat[1][1] + mat[2][2];\n\tfloat qw, qx, qy, qz;\n  if (tr > 0.0) {\n    float S = sqrt(tr + 1.0) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = 0.25 * S;\n\t  qx = (mat[1][2] - mat[2][1]) * invS;\n\t  qy = (mat[2][0] - mat[0][2]) * invS;\n\t  qz = (mat[0][1] - mat[1][0]) * invS;\n  } else if ((mat[0][0] > mat[1][1])&&(mat[0][0] > mat[2][2])) {\n    float S = sqrt(1.0 + mat[0][0] - mat[1][1] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[1][2] - mat[2][1]) * invS;\n\t  qx = 0.25 * S;\n\t  qy = (mat[1][0] + mat[0][1]) * invS;\n\t  qz = (mat[2][0] + mat[0][2]) * invS;\n  } else if (mat[1][1] > mat[2][2]) {\n\t  float S = sqrt(1.0 + mat[1][1] - mat[0][0] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[2][0] - mat[0][2]) * invS;\n\t  qx = (mat[1][0] + mat[0][1]) * invS;\n\t  qy = 0.25 * S;\n\t  qz = (mat[2][1] + mat[1][2]) * invS;\n  } else {\n\t  float S = sqrt(1.0 + mat[2][2] - mat[0][0] - mat[1][1]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[0][1] - mat[1][0]) * invS;\n\t  qx = (mat[2][0] + mat[0][2]) * invS;\n\t  qy = (mat[2][1] + mat[1][2]) * invS;\n\t  qz = 0.25 * S;\n  }\n  return vec4(qx, qy, qz, qw);\n}\nlayout(std140) uniform Constants {\n  vec4 mainTiling_Offset;\n  vec4 frameTile_velLenScale;\n  vec4 scale;\n  vec4 nodeRotation;\n};\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(std140) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n};\nout mediump vec2 uv;\nout mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n  , mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n  vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n  vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = vec3(1, 0, 0);\n  vec3 camY = vec3(0, 0, -1);\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  rotateVecFromQuat(viewSpaceVert, q);\n  vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n  vec3 camY = vec3(0, 1, 0);\n  vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n  pos.xyz += offset;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\n  vertIndex.y = 1. - vertIndex.y;\n#endif\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nin vec3 a_position;\nin vec3 a_texCoord;\nin vec3 a_texCoord1;\nin vec3 a_texCoord2;\nin vec4 a_color;\n#if CC_RENDER_MODE == 1\n  in vec3 a_color1;\n#endif\n#if CC_RENDER_MODE == 4\n  in vec3 a_texCoord3;\n  in vec3 a_normal;\n  in vec4 a_color1;\n#endif\nvec4 lpvs_main () {\n  vec3 compScale = scale.xyz * a_texCoord1;\n  vec4 pos = vec4(a_position, 1);\n  #if CC_RENDER_MODE == 1\n    vec4 velocity = vec4(a_color1.xyz, 0);\n  #endif\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_RENDER_MODE == 1\n      velocity = cc_matWorld * velocity;\n    #endif\n  #endif\n  #if ROTATION_OVER_TIME_MODULE_ENABLE\n    vec3 rotTmp = a_texCoord2;\n    float mulFactor = 1.0;\n    if (rotTmp.x > 10.0 * 0.5) {\n        rotTmp.x -= 10.0;\n        mulFactor = -1.0;\n    }\n    vec4 rot = vec4(rotTmp, 0.0);\n    rot.w = mulFactor * sqrt(abs(1.0 - rot.x * rot.x - rot.y * rot.y - rot.z * rot.z));\n  #else\n    #if CC_RENDER_MODE != 4\n      #if CC_RENDER_MODE == 0\n        vec3 rotEuler = a_texCoord2;\n      #elif CC_RENDER_MODE == 1\n        vec3 rotEuler = vec3(0.);\n      #else\n        vec3 rotEuler = vec3(0., 0., a_texCoord2.z);\n      #endif\n      vec4 rot = quaternionFromEuler(rotEuler);\n    #else\n      vec4 rot = quaternionFromEuler(a_texCoord2);\n    #endif\n  #endif\n  #if CC_RENDER_MODE != 4\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n    #if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_matViewInv);\n    #elif CC_RENDER_MODE == 1\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_cameraPos.xyz, velocity, frameTile_velLenScale.z, frameTile_velLenScale.w, a_texCoord.x);\n    #elif 2\n      computeVertPos(pos, cornerOffset, rot, compScale);\n    #endif\n    color = a_color;\n  #else\n    mat3 rotMat = quatToMat3(rot);\n    mat3 nodeMat = quatToMat3(nodeRotation);\n    rotMat = nodeMat * rotMat;\n    rot = mat3ToQuat(rotMat);\n    mat4 xformNoScale = matrixFromRT(rot, pos.xyz);\n    mat4 xform = matFromRTS(rot, pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n  #endif\n  uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  pos = cc_matViewProj * pos;\n  return pos;\n}\nvoid main() { gl_Position = lpvs_main(); }","frag":"\nprecision mediump float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nin vec2 uv;\nin vec4 color;\nuniform sampler2D mainTexture;\nvec4 addSmooth () {\n  vec4 col = color * texture(mainTexture, uv);\n  col.rgb *= col.a;\n  return CCFragOutput(col);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = addSmooth(); }"},"glsl1":{"vert":"\nprecision highp float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\n  mat3 m = mat3(xAxis,yAxis,zAxis);\n  float trace = m[0][0] + m[1][1] + m[2][2];\n  vec4 quat;\n  if (trace > 0.) {\n    float s = 0.5 / sqrt(trace + 1.0);\n    quat.w = 0.25 / s;\n    quat.x = (m[2][1] - m[1][2]) * s;\n    quat.y = (m[0][2] - m[2][0]) * s;\n    quat.z = (m[1][0] - m[0][1]) * s;\n  } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n    float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n    quat.w = (m[2][1] - m[1][2]) / s;\n    quat.x = 0.25 * s;\n    quat.y = (m[0][1] + m[1][0]) / s;\n    quat.z = (m[0][2] + m[2][0]) / s;\n  } else if (m[1][1] > m[2][2]) {\n    float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n    quat.w = (m[0][2] - m[2][0]) / s;\n    quat.x = (m[0][1] + m[1][0]) / s;\n    quat.y = 0.25 * s;\n    quat.z = (m[1][2] + m[2][1]) / s;\n  } else {\n    float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n    quat.w = (m[1][0] - m[0][1]) / s;\n    quat.x = (m[0][2] + m[2][0]) / s;\n    quat.y = (m[1][2] + m[2][1]) / s;\n    quat.z = 0.25 * s;\n  }\n  float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n  if (len > 0.) {\n    len = 1. / sqrt(len);\n    quat.x = quat.x * len;\n    quat.y = quat.y * len;\n    quat.z = quat.z * len;\n    quat.w = quat.w * len;\n  }\n  return quat;\n}\nvec4 quaternionFromEuler (vec3 angle){\n  float x = angle.x / 2.;\n  float y = angle.y / 2.;\n  float z = angle.z / 2.;\n  float sx = sin(x);\n  float cx = cos(x);\n  float sy = sin(y);\n  float cy = cos(y);\n  float sz = sin(z);\n  float cz = cos(z);\n  vec4 quat = vec4(0);\n  quat.x = sx * cy * cz + cx * sy * sz;\n  quat.y = cx * sy * cz + sx * cy * sz;\n  quat.z = cx * cy * sz - sx * sy * cz;\n  quat.w = cx * cy * cz - sx * sy * sz;\n  return quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\n  float x2 = q.x + q.x;\n  float y2 = q.y + q.y;\n  float z2 = q.z + q.z;\n  float xx = q.x * x2;\n  float xy = q.x * y2;\n  float xz = q.x * z2;\n  float yy = q.y * y2;\n  float yz = q.y * z2;\n  float zz = q.z * z2;\n  float wx = q.w * x2;\n  float wy = q.w * y2;\n  float wz = q.w * z2;\n  return mat4(\n    1. - (yy + zz), xy + wz, xz - wy, 0,\n    xy - wz, 1. - (xx + zz), yz + wx, 0,\n    xz + wy, yz - wx, 1. - (xx + yy), 0,\n    p.x, p.y, p.z, 1\n  );\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  float x2 = x + x;\n  float y2 = y + y;\n  float z2 = z + z;\n  float xx = x * x2;\n  float xy = x * y2;\n  float xz = x * z2;\n  float yy = y * y2;\n  float yz = y * z2;\n  float zz = z * z2;\n  float wx = w * x2;\n  float wy = w * y2;\n  float wz = w * z2;\n  float sx = s.x;\n  float sy = s.y;\n  float sz = s.z;\n  return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n    (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n    (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n    t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\n  vec4 quat;\n  quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n  quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n  quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n  quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n  return quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\n  float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n  float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n  float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n  float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n  v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n  v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n  v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n  vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n  vec4 rotQuat = quatMultiply(viewQuat, q);\n  rotateVecFromQuat(pos, rotQuat);\n  return pos;\n}\nmat3 quatToMat3(vec4 q) {\n  vec3 m0 = vec3(\n    1.0 - 2.0 * q.y * q.y - 2.0 * q.z * q.z,\n    2.0 * q.x * q.y + 2.0 * q.w * q.z,\n    2.0 * q.x * q.z - 2.0 * q.w * q.y);\n\tvec3 m1 = vec3(\n    2.0 * q.x * q.y - 2.0 * q.w * q.z,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.z * q.z,\n    2.0 * q.y * q.z + 2.0 * q.w * q.x);\n\tvec3 m2 = vec3(\n    2.0 * q.x * q.z + 2.0 * q.w * q.y,\n    2.0 * q.y * q.z - 2.0 * q.w * q.x,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.y * q.y);\n  return mat3(m0, m1, m2);\n}\nvec4 mat3ToQuat(mat3 mat) {\n  float tr = mat[0][0] + mat[1][1] + mat[2][2];\n\tfloat qw, qx, qy, qz;\n  if (tr > 0.0) {\n    float S = sqrt(tr + 1.0) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = 0.25 * S;\n\t  qx = (mat[1][2] - mat[2][1]) * invS;\n\t  qy = (mat[2][0] - mat[0][2]) * invS;\n\t  qz = (mat[0][1] - mat[1][0]) * invS;\n  } else if ((mat[0][0] > mat[1][1])&&(mat[0][0] > mat[2][2])) {\n    float S = sqrt(1.0 + mat[0][0] - mat[1][1] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[1][2] - mat[2][1]) * invS;\n\t  qx = 0.25 * S;\n\t  qy = (mat[1][0] + mat[0][1]) * invS;\n\t  qz = (mat[2][0] + mat[0][2]) * invS;\n  } else if (mat[1][1] > mat[2][2]) {\n\t  float S = sqrt(1.0 + mat[1][1] - mat[0][0] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[2][0] - mat[0][2]) * invS;\n\t  qx = (mat[1][0] + mat[0][1]) * invS;\n\t  qy = 0.25 * S;\n\t  qz = (mat[2][1] + mat[1][2]) * invS;\n  } else {\n\t  float S = sqrt(1.0 + mat[2][2] - mat[0][0] - mat[1][1]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[0][1] - mat[1][0]) * invS;\n\t  qx = (mat[2][0] + mat[0][2]) * invS;\n\t  qy = (mat[2][1] + mat[1][2]) * invS;\n\t  qz = 0.25 * S;\n  }\n  return vec4(qx, qy, qz, qw);\n}\n   uniform vec4 mainTiling_Offset;\n   uniform vec4 frameTile_velLenScale;\n   uniform vec4 scale;\n   uniform vec4 nodeRotation;\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matViewInv;\n  uniform highp mat4 cc_matViewProj;\n  uniform highp vec4 cc_cameraPos;\nuniform highp mat4 cc_matWorld;\nvarying mediump vec2 uv;\nvarying mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n  , mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n  vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n  vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = vec3(1, 0, 0);\n  vec3 camY = vec3(0, 0, -1);\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  rotateVecFromQuat(viewSpaceVert, q);\n  vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n  vec3 camY = vec3(0, 1, 0);\n  vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n  pos.xyz += offset;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\n  vertIndex.y = 1. - vertIndex.y;\n#endif\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nattribute vec3 a_position;\nattribute vec3 a_texCoord;\nattribute vec3 a_texCoord1;\nattribute vec3 a_texCoord2;\nattribute vec4 a_color;\n#if CC_RENDER_MODE == 1\n  attribute vec3 a_color1;\n#endif\n#if CC_RENDER_MODE == 4\n  attribute vec3 a_texCoord3;\n  attribute vec3 a_normal;\n  attribute vec4 a_color1;\n#endif\nvec4 lpvs_main () {\n  vec3 compScale = scale.xyz * a_texCoord1;\n  vec4 pos = vec4(a_position, 1);\n  #if CC_RENDER_MODE == 1\n    vec4 velocity = vec4(a_color1.xyz, 0);\n  #endif\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_RENDER_MODE == 1\n      velocity = cc_matWorld * velocity;\n    #endif\n  #endif\n  #if ROTATION_OVER_TIME_MODULE_ENABLE\n    vec3 rotTmp = a_texCoord2;\n    float mulFactor = 1.0;\n    if (rotTmp.x > 10.0 * 0.5) {\n        rotTmp.x -= 10.0;\n        mulFactor = -1.0;\n    }\n    vec4 rot = vec4(rotTmp, 0.0);\n    rot.w = mulFactor * sqrt(abs(1.0 - rot.x * rot.x - rot.y * rot.y - rot.z * rot.z));\n  #else\n    #if CC_RENDER_MODE != 4\n      #if CC_RENDER_MODE == 0\n        vec3 rotEuler = a_texCoord2;\n      #elif CC_RENDER_MODE == 1\n        vec3 rotEuler = vec3(0.);\n      #else\n        vec3 rotEuler = vec3(0., 0., a_texCoord2.z);\n      #endif\n      vec4 rot = quaternionFromEuler(rotEuler);\n    #else\n      vec4 rot = quaternionFromEuler(a_texCoord2);\n    #endif\n  #endif\n  #if CC_RENDER_MODE != 4\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n    #if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_matViewInv);\n    #elif CC_RENDER_MODE == 1\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_cameraPos.xyz, velocity, frameTile_velLenScale.z, frameTile_velLenScale.w, a_texCoord.x);\n    #elif 2\n      computeVertPos(pos, cornerOffset, rot, compScale);\n    #endif\n    color = a_color;\n  #else\n    mat3 rotMat = quatToMat3(rot);\n    mat3 nodeMat = quatToMat3(nodeRotation);\n    rotMat = nodeMat * rotMat;\n    rot = mat3ToQuat(rotMat);\n    mat4 xformNoScale = matrixFromRT(rot, pos.xyz);\n    mat4 xform = matFromRTS(rot, pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n  #endif\n  uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  pos = cc_matViewProj * pos;\n  return pos;\n}\nvoid main() { gl_Position = lpvs_main(); }","frag":"\nprecision mediump float;\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nvarying vec2 uv;\nvarying vec4 color;\nuniform sampler2D mainTexture;\nvec4 addSmooth () {\n  vec4 col = color * texture2D(mainTexture, uv);\n  col.rgb *= col.a;\n  return CCFragOutput(col);\n}\nvoid main() { gl_FragColor = addSmooth(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":52,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":39}},"defines":[{"name":"CC_RENDER_MODE","type":"number","defines":[],"range":[0,4]},{"name":"CC_USE_WORLD_SPACE","type":"boolean","defines":[]},{"name":"ROTATION_OVER_TIME_MODULE_ENABLE","type":"boolean","defines":[]}]},{"hash":3775475229,"name":"builtin-particle|particle-vs-legacy:lpvs_main|no-tint-fs:premultiplied","blocks":[{"name":"Constants","stageFlags":1,"binding":0,"members":[{"name":"mainTiling_Offset","type":16,"count":1},{"name":"frameTile_velLenScale","type":16,"count":1},{"name":"scale","type":16,"count":1},{"name":"nodeRotation","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"mainTexture","type":28,"count":1,"stageFlags":16,"binding":1,"defines":[]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_texCoord","format":32,"location":1,"defines":[]},{"name":"a_texCoord1","format":32,"location":2,"defines":[]},{"name":"a_texCoord2","format":32,"location":3,"defines":[]},{"name":"a_color","format":44,"location":4,"defines":[]},{"name":"a_color1","format":32,"location":8,"defines":["CC_RENDER_MODE"]},{"name":"a_texCoord3","format":32,"location":6,"defines":["CC_RENDER_MODE"]},{"name":"a_normal","format":32,"location":7,"defines":["CC_RENDER_MODE"]}],"varyings":[{"name":"uv","type":14,"count":1,"stageFlags":17,"location":0,"defines":[]},{"name":"color","type":16,"count":1,"stageFlags":17,"location":1,"defines":[]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"glsl4":{"vert":"\nprecision highp float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\n  mat3 m = mat3(xAxis,yAxis,zAxis);\n  float trace = m[0][0] + m[1][1] + m[2][2];\n  vec4 quat;\n  if (trace > 0.) {\n    float s = 0.5 / sqrt(trace + 1.0);\n    quat.w = 0.25 / s;\n    quat.x = (m[2][1] - m[1][2]) * s;\n    quat.y = (m[0][2] - m[2][0]) * s;\n    quat.z = (m[1][0] - m[0][1]) * s;\n  } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n    float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n    quat.w = (m[2][1] - m[1][2]) / s;\n    quat.x = 0.25 * s;\n    quat.y = (m[0][1] + m[1][0]) / s;\n    quat.z = (m[0][2] + m[2][0]) / s;\n  } else if (m[1][1] > m[2][2]) {\n    float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n    quat.w = (m[0][2] - m[2][0]) / s;\n    quat.x = (m[0][1] + m[1][0]) / s;\n    quat.y = 0.25 * s;\n    quat.z = (m[1][2] + m[2][1]) / s;\n  } else {\n    float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n    quat.w = (m[1][0] - m[0][1]) / s;\n    quat.x = (m[0][2] + m[2][0]) / s;\n    quat.y = (m[1][2] + m[2][1]) / s;\n    quat.z = 0.25 * s;\n  }\n  float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n  if (len > 0.) {\n    len = 1. / sqrt(len);\n    quat.x = quat.x * len;\n    quat.y = quat.y * len;\n    quat.z = quat.z * len;\n    quat.w = quat.w * len;\n  }\n  return quat;\n}\nvec4 quaternionFromEuler (vec3 angle){\n  float x = angle.x / 2.;\n  float y = angle.y / 2.;\n  float z = angle.z / 2.;\n  float sx = sin(x);\n  float cx = cos(x);\n  float sy = sin(y);\n  float cy = cos(y);\n  float sz = sin(z);\n  float cz = cos(z);\n  vec4 quat = vec4(0);\n  quat.x = sx * cy * cz + cx * sy * sz;\n  quat.y = cx * sy * cz + sx * cy * sz;\n  quat.z = cx * cy * sz - sx * sy * cz;\n  quat.w = cx * cy * cz - sx * sy * sz;\n  return quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\n  float x2 = q.x + q.x;\n  float y2 = q.y + q.y;\n  float z2 = q.z + q.z;\n  float xx = q.x * x2;\n  float xy = q.x * y2;\n  float xz = q.x * z2;\n  float yy = q.y * y2;\n  float yz = q.y * z2;\n  float zz = q.z * z2;\n  float wx = q.w * x2;\n  float wy = q.w * y2;\n  float wz = q.w * z2;\n  return mat4(\n    1. - (yy + zz), xy + wz, xz - wy, 0,\n    xy - wz, 1. - (xx + zz), yz + wx, 0,\n    xz + wy, yz - wx, 1. - (xx + yy), 0,\n    p.x, p.y, p.z, 1\n  );\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  float x2 = x + x;\n  float y2 = y + y;\n  float z2 = z + z;\n  float xx = x * x2;\n  float xy = x * y2;\n  float xz = x * z2;\n  float yy = y * y2;\n  float yz = y * z2;\n  float zz = z * z2;\n  float wx = w * x2;\n  float wy = w * y2;\n  float wz = w * z2;\n  float sx = s.x;\n  float sy = s.y;\n  float sz = s.z;\n  return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n    (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n    (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n    t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\n  vec4 quat;\n  quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n  quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n  quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n  quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n  return quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\n  float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n  float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n  float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n  float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n  v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n  v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n  v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n  vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n  vec4 rotQuat = quatMultiply(viewQuat, q);\n  rotateVecFromQuat(pos, rotQuat);\n  return pos;\n}\nmat3 quatToMat3(vec4 q) {\n  vec3 m0 = vec3(\n    1.0 - 2.0 * q.y * q.y - 2.0 * q.z * q.z,\n    2.0 * q.x * q.y + 2.0 * q.w * q.z,\n    2.0 * q.x * q.z - 2.0 * q.w * q.y);\n\tvec3 m1 = vec3(\n    2.0 * q.x * q.y - 2.0 * q.w * q.z,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.z * q.z,\n    2.0 * q.y * q.z + 2.0 * q.w * q.x);\n\tvec3 m2 = vec3(\n    2.0 * q.x * q.z + 2.0 * q.w * q.y,\n    2.0 * q.y * q.z - 2.0 * q.w * q.x,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.y * q.y);\n  return mat3(m0, m1, m2);\n}\nvec4 mat3ToQuat(mat3 mat) {\n  float tr = mat[0][0] + mat[1][1] + mat[2][2];\n\tfloat qw, qx, qy, qz;\n  if (tr > 0.0) {\n    float S = sqrt(tr + 1.0) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = 0.25 * S;\n\t  qx = (mat[1][2] - mat[2][1]) * invS;\n\t  qy = (mat[2][0] - mat[0][2]) * invS;\n\t  qz = (mat[0][1] - mat[1][0]) * invS;\n  } else if ((mat[0][0] > mat[1][1])&&(mat[0][0] > mat[2][2])) {\n    float S = sqrt(1.0 + mat[0][0] - mat[1][1] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[1][2] - mat[2][1]) * invS;\n\t  qx = 0.25 * S;\n\t  qy = (mat[1][0] + mat[0][1]) * invS;\n\t  qz = (mat[2][0] + mat[0][2]) * invS;\n  } else if (mat[1][1] > mat[2][2]) {\n\t  float S = sqrt(1.0 + mat[1][1] - mat[0][0] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[2][0] - mat[0][2]) * invS;\n\t  qx = (mat[1][0] + mat[0][1]) * invS;\n\t  qy = 0.25 * S;\n\t  qz = (mat[2][1] + mat[1][2]) * invS;\n  } else {\n\t  float S = sqrt(1.0 + mat[2][2] - mat[0][0] - mat[1][1]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[0][1] - mat[1][0]) * invS;\n\t  qx = (mat[2][0] + mat[0][2]) * invS;\n\t  qy = (mat[2][1] + mat[1][2]) * invS;\n\t  qz = 0.25 * S;\n  }\n  return vec4(qx, qy, qz, qw);\n}\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 mainTiling_Offset;\n  vec4 frameTile_velLenScale;\n  vec4 scale;\n  vec4 nodeRotation;\n};\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(set = 2, binding = 0) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n};\nlayout(location = 0) out mediump vec2 uv;\nlayout(location = 1) out mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n  , mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n  vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n  vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = vec3(1, 0, 0);\n  vec3 camY = vec3(0, 0, -1);\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  rotateVecFromQuat(viewSpaceVert, q);\n  vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n  vec3 camY = vec3(0, 1, 0);\n  vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n  pos.xyz += offset;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\n  vertIndex.y = 1. - vertIndex.y;\n#endif\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec3 a_texCoord;\nlayout(location = 2) in vec3 a_texCoord1;\nlayout(location = 3) in vec3 a_texCoord2;\nlayout(location = 4) in vec4 a_color;\n#if CC_RENDER_MODE == 1\n  layout(location = 8) in vec3 a_color1;\n#endif\n#if CC_RENDER_MODE == 4\n  layout(location = 6) in vec3 a_texCoord3;\n  layout(location = 7) in vec3 a_normal;\n  layout(location = 8) in vec4 a_color1;\n#endif\nvec4 lpvs_main () {\n  vec3 compScale = scale.xyz * a_texCoord1;\n  vec4 pos = vec4(a_position, 1);\n  #if CC_RENDER_MODE == 1\n    vec4 velocity = vec4(a_color1.xyz, 0);\n  #endif\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_RENDER_MODE == 1\n      velocity = cc_matWorld * velocity;\n    #endif\n  #endif\n  #if ROTATION_OVER_TIME_MODULE_ENABLE\n    vec3 rotTmp = a_texCoord2;\n    float mulFactor = 1.0;\n    if (rotTmp.x > 10.0 * 0.5) {\n        rotTmp.x -= 10.0;\n        mulFactor = -1.0;\n    }\n    vec4 rot = vec4(rotTmp, 0.0);\n    rot.w = mulFactor * sqrt(abs(1.0 - rot.x * rot.x - rot.y * rot.y - rot.z * rot.z));\n  #else\n    #if CC_RENDER_MODE != 4\n      #if CC_RENDER_MODE == 0\n        vec3 rotEuler = a_texCoord2;\n      #elif CC_RENDER_MODE == 1\n        vec3 rotEuler = vec3(0.);\n      #else\n        vec3 rotEuler = vec3(0., 0., a_texCoord2.z);\n      #endif\n      vec4 rot = quaternionFromEuler(rotEuler);\n    #else\n      vec4 rot = quaternionFromEuler(a_texCoord2);\n    #endif\n  #endif\n  #if CC_RENDER_MODE != 4\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n    #if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_matViewInv);\n    #elif CC_RENDER_MODE == 1\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_cameraPos.xyz, velocity, frameTile_velLenScale.z, frameTile_velLenScale.w, a_texCoord.x);\n    #elif 2\n      computeVertPos(pos, cornerOffset, rot, compScale);\n    #endif\n    color = a_color;\n  #else\n    mat3 rotMat = quatToMat3(rot);\n    mat3 nodeMat = quatToMat3(nodeRotation);\n    rotMat = nodeMat * rotMat;\n    rot = mat3ToQuat(rotMat);\n    mat4 xformNoScale = matrixFromRT(rot, pos.xyz);\n    mat4 xform = matFromRTS(rot, pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n  #endif\n  uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  pos = cc_matViewProj * pos;\n  return pos;\n}\nvoid main() { gl_Position = lpvs_main(); }","frag":"\nprecision mediump float;\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nlayout(location = 0) in vec2 uv;\nlayout(location = 1) in vec4 color;\nlayout(set = 1, binding = 1) uniform sampler2D mainTexture;\nvec4 premultiplied () {\n  vec4 col = color * texture(mainTexture, uv) * color.a;\n  return CCFragOutput(col);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = premultiplied(); }"},"glsl3":{"vert":"\nprecision highp float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\n  mat3 m = mat3(xAxis,yAxis,zAxis);\n  float trace = m[0][0] + m[1][1] + m[2][2];\n  vec4 quat;\n  if (trace > 0.) {\n    float s = 0.5 / sqrt(trace + 1.0);\n    quat.w = 0.25 / s;\n    quat.x = (m[2][1] - m[1][2]) * s;\n    quat.y = (m[0][2] - m[2][0]) * s;\n    quat.z = (m[1][0] - m[0][1]) * s;\n  } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n    float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n    quat.w = (m[2][1] - m[1][2]) / s;\n    quat.x = 0.25 * s;\n    quat.y = (m[0][1] + m[1][0]) / s;\n    quat.z = (m[0][2] + m[2][0]) / s;\n  } else if (m[1][1] > m[2][2]) {\n    float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n    quat.w = (m[0][2] - m[2][0]) / s;\n    quat.x = (m[0][1] + m[1][0]) / s;\n    quat.y = 0.25 * s;\n    quat.z = (m[1][2] + m[2][1]) / s;\n  } else {\n    float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n    quat.w = (m[1][0] - m[0][1]) / s;\n    quat.x = (m[0][2] + m[2][0]) / s;\n    quat.y = (m[1][2] + m[2][1]) / s;\n    quat.z = 0.25 * s;\n  }\n  float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n  if (len > 0.) {\n    len = 1. / sqrt(len);\n    quat.x = quat.x * len;\n    quat.y = quat.y * len;\n    quat.z = quat.z * len;\n    quat.w = quat.w * len;\n  }\n  return quat;\n}\nvec4 quaternionFromEuler (vec3 angle){\n  float x = angle.x / 2.;\n  float y = angle.y / 2.;\n  float z = angle.z / 2.;\n  float sx = sin(x);\n  float cx = cos(x);\n  float sy = sin(y);\n  float cy = cos(y);\n  float sz = sin(z);\n  float cz = cos(z);\n  vec4 quat = vec4(0);\n  quat.x = sx * cy * cz + cx * sy * sz;\n  quat.y = cx * sy * cz + sx * cy * sz;\n  quat.z = cx * cy * sz - sx * sy * cz;\n  quat.w = cx * cy * cz - sx * sy * sz;\n  return quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\n  float x2 = q.x + q.x;\n  float y2 = q.y + q.y;\n  float z2 = q.z + q.z;\n  float xx = q.x * x2;\n  float xy = q.x * y2;\n  float xz = q.x * z2;\n  float yy = q.y * y2;\n  float yz = q.y * z2;\n  float zz = q.z * z2;\n  float wx = q.w * x2;\n  float wy = q.w * y2;\n  float wz = q.w * z2;\n  return mat4(\n    1. - (yy + zz), xy + wz, xz - wy, 0,\n    xy - wz, 1. - (xx + zz), yz + wx, 0,\n    xz + wy, yz - wx, 1. - (xx + yy), 0,\n    p.x, p.y, p.z, 1\n  );\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  float x2 = x + x;\n  float y2 = y + y;\n  float z2 = z + z;\n  float xx = x * x2;\n  float xy = x * y2;\n  float xz = x * z2;\n  float yy = y * y2;\n  float yz = y * z2;\n  float zz = z * z2;\n  float wx = w * x2;\n  float wy = w * y2;\n  float wz = w * z2;\n  float sx = s.x;\n  float sy = s.y;\n  float sz = s.z;\n  return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n    (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n    (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n    t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\n  vec4 quat;\n  quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n  quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n  quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n  quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n  return quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\n  float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n  float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n  float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n  float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n  v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n  v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n  v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n  vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n  vec4 rotQuat = quatMultiply(viewQuat, q);\n  rotateVecFromQuat(pos, rotQuat);\n  return pos;\n}\nmat3 quatToMat3(vec4 q) {\n  vec3 m0 = vec3(\n    1.0 - 2.0 * q.y * q.y - 2.0 * q.z * q.z,\n    2.0 * q.x * q.y + 2.0 * q.w * q.z,\n    2.0 * q.x * q.z - 2.0 * q.w * q.y);\n\tvec3 m1 = vec3(\n    2.0 * q.x * q.y - 2.0 * q.w * q.z,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.z * q.z,\n    2.0 * q.y * q.z + 2.0 * q.w * q.x);\n\tvec3 m2 = vec3(\n    2.0 * q.x * q.z + 2.0 * q.w * q.y,\n    2.0 * q.y * q.z - 2.0 * q.w * q.x,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.y * q.y);\n  return mat3(m0, m1, m2);\n}\nvec4 mat3ToQuat(mat3 mat) {\n  float tr = mat[0][0] + mat[1][1] + mat[2][2];\n\tfloat qw, qx, qy, qz;\n  if (tr > 0.0) {\n    float S = sqrt(tr + 1.0) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = 0.25 * S;\n\t  qx = (mat[1][2] - mat[2][1]) * invS;\n\t  qy = (mat[2][0] - mat[0][2]) * invS;\n\t  qz = (mat[0][1] - mat[1][0]) * invS;\n  } else if ((mat[0][0] > mat[1][1])&&(mat[0][0] > mat[2][2])) {\n    float S = sqrt(1.0 + mat[0][0] - mat[1][1] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[1][2] - mat[2][1]) * invS;\n\t  qx = 0.25 * S;\n\t  qy = (mat[1][0] + mat[0][1]) * invS;\n\t  qz = (mat[2][0] + mat[0][2]) * invS;\n  } else if (mat[1][1] > mat[2][2]) {\n\t  float S = sqrt(1.0 + mat[1][1] - mat[0][0] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[2][0] - mat[0][2]) * invS;\n\t  qx = (mat[1][0] + mat[0][1]) * invS;\n\t  qy = 0.25 * S;\n\t  qz = (mat[2][1] + mat[1][2]) * invS;\n  } else {\n\t  float S = sqrt(1.0 + mat[2][2] - mat[0][0] - mat[1][1]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[0][1] - mat[1][0]) * invS;\n\t  qx = (mat[2][0] + mat[0][2]) * invS;\n\t  qy = (mat[2][1] + mat[1][2]) * invS;\n\t  qz = 0.25 * S;\n  }\n  return vec4(qx, qy, qz, qw);\n}\nlayout(std140) uniform Constants {\n  vec4 mainTiling_Offset;\n  vec4 frameTile_velLenScale;\n  vec4 scale;\n  vec4 nodeRotation;\n};\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(std140) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n};\nout mediump vec2 uv;\nout mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n  , mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n  vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n  vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = vec3(1, 0, 0);\n  vec3 camY = vec3(0, 0, -1);\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  rotateVecFromQuat(viewSpaceVert, q);\n  vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n  vec3 camY = vec3(0, 1, 0);\n  vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n  pos.xyz += offset;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\n  vertIndex.y = 1. - vertIndex.y;\n#endif\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nin vec3 a_position;\nin vec3 a_texCoord;\nin vec3 a_texCoord1;\nin vec3 a_texCoord2;\nin vec4 a_color;\n#if CC_RENDER_MODE == 1\n  in vec3 a_color1;\n#endif\n#if CC_RENDER_MODE == 4\n  in vec3 a_texCoord3;\n  in vec3 a_normal;\n  in vec4 a_color1;\n#endif\nvec4 lpvs_main () {\n  vec3 compScale = scale.xyz * a_texCoord1;\n  vec4 pos = vec4(a_position, 1);\n  #if CC_RENDER_MODE == 1\n    vec4 velocity = vec4(a_color1.xyz, 0);\n  #endif\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_RENDER_MODE == 1\n      velocity = cc_matWorld * velocity;\n    #endif\n  #endif\n  #if ROTATION_OVER_TIME_MODULE_ENABLE\n    vec3 rotTmp = a_texCoord2;\n    float mulFactor = 1.0;\n    if (rotTmp.x > 10.0 * 0.5) {\n        rotTmp.x -= 10.0;\n        mulFactor = -1.0;\n    }\n    vec4 rot = vec4(rotTmp, 0.0);\n    rot.w = mulFactor * sqrt(abs(1.0 - rot.x * rot.x - rot.y * rot.y - rot.z * rot.z));\n  #else\n    #if CC_RENDER_MODE != 4\n      #if CC_RENDER_MODE == 0\n        vec3 rotEuler = a_texCoord2;\n      #elif CC_RENDER_MODE == 1\n        vec3 rotEuler = vec3(0.);\n      #else\n        vec3 rotEuler = vec3(0., 0., a_texCoord2.z);\n      #endif\n      vec4 rot = quaternionFromEuler(rotEuler);\n    #else\n      vec4 rot = quaternionFromEuler(a_texCoord2);\n    #endif\n  #endif\n  #if CC_RENDER_MODE != 4\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n    #if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_matViewInv);\n    #elif CC_RENDER_MODE == 1\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_cameraPos.xyz, velocity, frameTile_velLenScale.z, frameTile_velLenScale.w, a_texCoord.x);\n    #elif 2\n      computeVertPos(pos, cornerOffset, rot, compScale);\n    #endif\n    color = a_color;\n  #else\n    mat3 rotMat = quatToMat3(rot);\n    mat3 nodeMat = quatToMat3(nodeRotation);\n    rotMat = nodeMat * rotMat;\n    rot = mat3ToQuat(rotMat);\n    mat4 xformNoScale = matrixFromRT(rot, pos.xyz);\n    mat4 xform = matFromRTS(rot, pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n  #endif\n  uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  pos = cc_matViewProj * pos;\n  return pos;\n}\nvoid main() { gl_Position = lpvs_main(); }","frag":"\nprecision mediump float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nin vec2 uv;\nin vec4 color;\nuniform sampler2D mainTexture;\nvec4 premultiplied () {\n  vec4 col = color * texture(mainTexture, uv) * color.a;\n  return CCFragOutput(col);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = premultiplied(); }"},"glsl1":{"vert":"\nprecision highp float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\n  mat3 m = mat3(xAxis,yAxis,zAxis);\n  float trace = m[0][0] + m[1][1] + m[2][2];\n  vec4 quat;\n  if (trace > 0.) {\n    float s = 0.5 / sqrt(trace + 1.0);\n    quat.w = 0.25 / s;\n    quat.x = (m[2][1] - m[1][2]) * s;\n    quat.y = (m[0][2] - m[2][0]) * s;\n    quat.z = (m[1][0] - m[0][1]) * s;\n  } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n    float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n    quat.w = (m[2][1] - m[1][2]) / s;\n    quat.x = 0.25 * s;\n    quat.y = (m[0][1] + m[1][0]) / s;\n    quat.z = (m[0][2] + m[2][0]) / s;\n  } else if (m[1][1] > m[2][2]) {\n    float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n    quat.w = (m[0][2] - m[2][0]) / s;\n    quat.x = (m[0][1] + m[1][0]) / s;\n    quat.y = 0.25 * s;\n    quat.z = (m[1][2] + m[2][1]) / s;\n  } else {\n    float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n    quat.w = (m[1][0] - m[0][1]) / s;\n    quat.x = (m[0][2] + m[2][0]) / s;\n    quat.y = (m[1][2] + m[2][1]) / s;\n    quat.z = 0.25 * s;\n  }\n  float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n  if (len > 0.) {\n    len = 1. / sqrt(len);\n    quat.x = quat.x * len;\n    quat.y = quat.y * len;\n    quat.z = quat.z * len;\n    quat.w = quat.w * len;\n  }\n  return quat;\n}\nvec4 quaternionFromEuler (vec3 angle){\n  float x = angle.x / 2.;\n  float y = angle.y / 2.;\n  float z = angle.z / 2.;\n  float sx = sin(x);\n  float cx = cos(x);\n  float sy = sin(y);\n  float cy = cos(y);\n  float sz = sin(z);\n  float cz = cos(z);\n  vec4 quat = vec4(0);\n  quat.x = sx * cy * cz + cx * sy * sz;\n  quat.y = cx * sy * cz + sx * cy * sz;\n  quat.z = cx * cy * sz - sx * sy * cz;\n  quat.w = cx * cy * cz - sx * sy * sz;\n  return quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\n  float x2 = q.x + q.x;\n  float y2 = q.y + q.y;\n  float z2 = q.z + q.z;\n  float xx = q.x * x2;\n  float xy = q.x * y2;\n  float xz = q.x * z2;\n  float yy = q.y * y2;\n  float yz = q.y * z2;\n  float zz = q.z * z2;\n  float wx = q.w * x2;\n  float wy = q.w * y2;\n  float wz = q.w * z2;\n  return mat4(\n    1. - (yy + zz), xy + wz, xz - wy, 0,\n    xy - wz, 1. - (xx + zz), yz + wx, 0,\n    xz + wy, yz - wx, 1. - (xx + yy), 0,\n    p.x, p.y, p.z, 1\n  );\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  float x2 = x + x;\n  float y2 = y + y;\n  float z2 = z + z;\n  float xx = x * x2;\n  float xy = x * y2;\n  float xz = x * z2;\n  float yy = y * y2;\n  float yz = y * z2;\n  float zz = z * z2;\n  float wx = w * x2;\n  float wy = w * y2;\n  float wz = w * z2;\n  float sx = s.x;\n  float sy = s.y;\n  float sz = s.z;\n  return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n    (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n    (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n    t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\n  vec4 quat;\n  quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n  quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n  quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n  quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n  return quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\n  float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n  float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n  float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n  float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n  v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n  v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n  v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n  vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n  vec4 rotQuat = quatMultiply(viewQuat, q);\n  rotateVecFromQuat(pos, rotQuat);\n  return pos;\n}\nmat3 quatToMat3(vec4 q) {\n  vec3 m0 = vec3(\n    1.0 - 2.0 * q.y * q.y - 2.0 * q.z * q.z,\n    2.0 * q.x * q.y + 2.0 * q.w * q.z,\n    2.0 * q.x * q.z - 2.0 * q.w * q.y);\n\tvec3 m1 = vec3(\n    2.0 * q.x * q.y - 2.0 * q.w * q.z,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.z * q.z,\n    2.0 * q.y * q.z + 2.0 * q.w * q.x);\n\tvec3 m2 = vec3(\n    2.0 * q.x * q.z + 2.0 * q.w * q.y,\n    2.0 * q.y * q.z - 2.0 * q.w * q.x,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.y * q.y);\n  return mat3(m0, m1, m2);\n}\nvec4 mat3ToQuat(mat3 mat) {\n  float tr = mat[0][0] + mat[1][1] + mat[2][2];\n\tfloat qw, qx, qy, qz;\n  if (tr > 0.0) {\n    float S = sqrt(tr + 1.0) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = 0.25 * S;\n\t  qx = (mat[1][2] - mat[2][1]) * invS;\n\t  qy = (mat[2][0] - mat[0][2]) * invS;\n\t  qz = (mat[0][1] - mat[1][0]) * invS;\n  } else if ((mat[0][0] > mat[1][1])&&(mat[0][0] > mat[2][2])) {\n    float S = sqrt(1.0 + mat[0][0] - mat[1][1] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[1][2] - mat[2][1]) * invS;\n\t  qx = 0.25 * S;\n\t  qy = (mat[1][0] + mat[0][1]) * invS;\n\t  qz = (mat[2][0] + mat[0][2]) * invS;\n  } else if (mat[1][1] > mat[2][2]) {\n\t  float S = sqrt(1.0 + mat[1][1] - mat[0][0] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[2][0] - mat[0][2]) * invS;\n\t  qx = (mat[1][0] + mat[0][1]) * invS;\n\t  qy = 0.25 * S;\n\t  qz = (mat[2][1] + mat[1][2]) * invS;\n  } else {\n\t  float S = sqrt(1.0 + mat[2][2] - mat[0][0] - mat[1][1]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[0][1] - mat[1][0]) * invS;\n\t  qx = (mat[2][0] + mat[0][2]) * invS;\n\t  qy = (mat[2][1] + mat[1][2]) * invS;\n\t  qz = 0.25 * S;\n  }\n  return vec4(qx, qy, qz, qw);\n}\n   uniform vec4 mainTiling_Offset;\n   uniform vec4 frameTile_velLenScale;\n   uniform vec4 scale;\n   uniform vec4 nodeRotation;\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matViewInv;\n  uniform highp mat4 cc_matViewProj;\n  uniform highp vec4 cc_cameraPos;\nuniform highp mat4 cc_matWorld;\nvarying mediump vec2 uv;\nvarying mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n  , mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n  vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n  vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = vec3(1, 0, 0);\n  vec3 camY = vec3(0, 0, -1);\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  rotateVecFromQuat(viewSpaceVert, q);\n  vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n  vec3 camY = vec3(0, 1, 0);\n  vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n  pos.xyz += offset;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\n  vertIndex.y = 1. - vertIndex.y;\n#endif\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nattribute vec3 a_position;\nattribute vec3 a_texCoord;\nattribute vec3 a_texCoord1;\nattribute vec3 a_texCoord2;\nattribute vec4 a_color;\n#if CC_RENDER_MODE == 1\n  attribute vec3 a_color1;\n#endif\n#if CC_RENDER_MODE == 4\n  attribute vec3 a_texCoord3;\n  attribute vec3 a_normal;\n  attribute vec4 a_color1;\n#endif\nvec4 lpvs_main () {\n  vec3 compScale = scale.xyz * a_texCoord1;\n  vec4 pos = vec4(a_position, 1);\n  #if CC_RENDER_MODE == 1\n    vec4 velocity = vec4(a_color1.xyz, 0);\n  #endif\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_RENDER_MODE == 1\n      velocity = cc_matWorld * velocity;\n    #endif\n  #endif\n  #if ROTATION_OVER_TIME_MODULE_ENABLE\n    vec3 rotTmp = a_texCoord2;\n    float mulFactor = 1.0;\n    if (rotTmp.x > 10.0 * 0.5) {\n        rotTmp.x -= 10.0;\n        mulFactor = -1.0;\n    }\n    vec4 rot = vec4(rotTmp, 0.0);\n    rot.w = mulFactor * sqrt(abs(1.0 - rot.x * rot.x - rot.y * rot.y - rot.z * rot.z));\n  #else\n    #if CC_RENDER_MODE != 4\n      #if CC_RENDER_MODE == 0\n        vec3 rotEuler = a_texCoord2;\n      #elif CC_RENDER_MODE == 1\n        vec3 rotEuler = vec3(0.);\n      #else\n        vec3 rotEuler = vec3(0., 0., a_texCoord2.z);\n      #endif\n      vec4 rot = quaternionFromEuler(rotEuler);\n    #else\n      vec4 rot = quaternionFromEuler(a_texCoord2);\n    #endif\n  #endif\n  #if CC_RENDER_MODE != 4\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n    #if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_matViewInv);\n    #elif CC_RENDER_MODE == 1\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_cameraPos.xyz, velocity, frameTile_velLenScale.z, frameTile_velLenScale.w, a_texCoord.x);\n    #elif 2\n      computeVertPos(pos, cornerOffset, rot, compScale);\n    #endif\n    color = a_color;\n  #else\n    mat3 rotMat = quatToMat3(rot);\n    mat3 nodeMat = quatToMat3(nodeRotation);\n    rotMat = nodeMat * rotMat;\n    rot = mat3ToQuat(rotMat);\n    mat4 xformNoScale = matrixFromRT(rot, pos.xyz);\n    mat4 xform = matFromRTS(rot, pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n  #endif\n  uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  pos = cc_matViewProj * pos;\n  return pos;\n}\nvoid main() { gl_Position = lpvs_main(); }","frag":"\nprecision mediump float;\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nvarying vec2 uv;\nvarying vec4 color;\nuniform sampler2D mainTexture;\nvec4 premultiplied () {\n  vec4 col = color * texture2D(mainTexture, uv) * color.a;\n  return CCFragOutput(col);\n}\nvoid main() { gl_FragColor = premultiplied(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":52,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":39}},"defines":[{"name":"CC_RENDER_MODE","type":"number","defines":[],"range":[0,4]},{"name":"CC_USE_WORLD_SPACE","type":"boolean","defines":[]},{"name":"ROTATION_OVER_TIME_MODULE_ENABLE","type":"boolean","defines":[]}]}],[{"name":"add","passes":[{"program":"builtin-particle|particle-vs-legacy:lpvs_main|tinted-fs:add","rasterizerState":{"cullMode":0},"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":1,"blendSrcAlpha":2,"blendDstAlpha":1}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"mainTexture":{"value":"grey","type":28},"mainTiling_Offset":{"type":16,"value":[1,1,0,0]},"tintColor":{"type":16,"value":[0.5,0.5,0.5,0.5],"editor":{"type":"color"}}}}]},{"name":"alpha-blend","passes":[{"program":"builtin-particle|particle-vs-legacy:lpvs_main|tinted-fs:add","rasterizerState":{"cullMode":0},"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendSrcAlpha":0,"blendDstAlpha":1}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"mainTexture":{"value":"grey","type":28},"mainTiling_Offset":{"type":16,"value":[1,1,0,0]},"tintColor":{"type":16,"value":[0.5,0.5,0.5,0.5],"editor":{"type":"color"}}}}]},{"name":"add-multiply","passes":[{"program":"builtin-particle|particle-vs-legacy:lpvs_main|tinted-fs:multiply","rasterizerState":{"cullMode":0},"blendState":{"targets":[{"blend":true,"blendSrc":7,"blendDst":1,"blendSrcAlpha":0,"blendDstAlpha":3}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"mainTexture":{"value":"grey","type":28},"mainTiling_Offset":{"type":16,"value":[1,1,0,0]},"tintColor":{"type":16,"value":[0.5,0.5,0.5,0.5],"editor":{"type":"color"}}}}]},{"name":"add-smooth","passes":[{"program":"builtin-particle|particle-vs-legacy:lpvs_main|no-tint-fs:addSmooth","rasterizerState":{"cullMode":0},"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":1,"blendSrcAlpha":2,"blendDstAlpha":1}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"mainTexture":{"value":"grey","type":28},"mainTiling_Offset":{"type":16,"value":[1,1,0,0]}}}]},{"name":"premultiply-blend","passes":[{"program":"builtin-particle|particle-vs-legacy:lpvs_main|no-tint-fs:premultiplied","rasterizerState":{"cullMode":0},"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendSrcAlpha":0,"blendDstAlpha":1}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"mainTexture":{"value":"grey","type":28},"mainTiling_Offset":{"type":16,"value":[1,1,0,0]}}}]}]]],0,0,[],[],[]],[[[129,"Dino"],[44,"Points",33554432,[-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16],[[67,-1]]],[44,"Robo",8388608,[-24,-25,-26],[[94,-17,[104,105,106,107],108],[15,-18,[1,0,0.02,0],[1,0.02,0.04,0.01]],[14,8,2,-19],[95,-23,-22,-21,-20]]],[44,"Robo_2",8388608,[-34,-35,-36],[[94,-27,[548,549,550,551],552],[15,-28,[1,0,0.02,0],[1,0.02,0.04,0.01]],[14,8,2,-29],[95,-33,-32,-31,-30]]],[100,"Units",8388608,[-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51],[1,0,-2.799,5.983],[1,0.65,0.65,0.65]],[25,"Robo_1",8388608,[-56,-57,-58],[[23,true,-52,[131,132,133],134],[15,-53,[1,0,0.02,0],[1,0.02,0.04,0.02]],[14,8,2,-54],[24,-55]],[1,6,6,6]],[25,"Robo_2",8388608,[-63,-64,-65],[[23,true,-59,[157,158,159],160],[15,-60,[1,0,0.02,0],[1,0.02,0.04,0.02]],[14,8,2,-61],[24,-62]],[1,6,6,6]],[25,"Robo_3",8388608,[-70,-71,-72],[[23,true,-66,[183,184,185],186],[15,-67,[1,0,0.02,0],[1,0.02,0.04,0.02]],[14,8,2,-68],[24,-69]],[1,6,6,6]],[25,"Robo_4",8388608,[-77,-78,-79],[[23,true,-73,[209,210,211],212],[15,-74,[1,0,0.02,0],[1,0.02,0.04,0.02]],[14,8,2,-75],[24,-76]],[1,6,6,6]],[25,"Robo_5",8388608,[-84,-85,-86],[[23,true,-80,[235,236,237],238],[15,-81,[1,0,0.02,0],[1,0.02,0.04,0.02]],[14,8,2,-82],[24,-83]],[1,6,6,6]],[25,"Robo_6",8388608,[-91,-92,-93],[[23,true,-87,[261,262,263],264],[15,-88,[1,0,0.02,0],[1,0.02,0.04,0.02]],[14,8,2,-89],[24,-90]],[1,6,6,6]],[25,"Robo_7",8388608,[-98,-99,-100],[[23,true,-94,[287,288,289],290],[15,-95,[1,0,0.02,0],[1,0.02,0.04,0.02]],[14,8,2,-96],[24,-97]],[1,6,6,6]],[25,"Robo_8",8388608,[-105,-106,-107],[[23,true,-101,[313,314,315],316],[15,-102,[1,0,0.02,0],[1,0.02,0.04,0.02]],[14,8,2,-103],[24,-104]],[1,6,6,6]],[25,"Robo_9",8388608,[-112,-113,-114],[[23,true,-108,[339,340,341],342],[15,-109,[1,0,0.02,0],[1,0.02,0.04,0.02]],[14,8,2,-110],[24,-111]],[1,6,6,6]],[25,"Robo_10",8388608,[-119,-120,-121],[[23,true,-115,[365,366,367],368],[15,-116,[1,0,0.02,0],[1,0.02,0.04,0.02]],[14,8,2,-117],[24,-118]],[1,6,6,6]],[25,"Robo_11",8388608,[-126,-127,-128],[[23,true,-122,[391,392,393],394],[15,-123,[1,0,0.02,0],[1,0.02,0.04,0.02]],[14,8,2,-124],[24,-125]],[1,6,6,6]],[25,"Robo_12",8388608,[-133,-134,-135],[[23,true,-129,[417,418,419],420],[15,-130,[1,0,0.02,0],[1,0.02,0.04,0.02]],[14,8,2,-131],[24,-132]],[1,6,6,6]],[25,"Robo_13",8388608,[-140,-141,-142],[[23,true,-136,[443,444,445],446],[15,-137,[1,0,0.02,0],[1,0.02,0.04,0.02]],[14,8,2,-138],[24,-139]],[1,6,6,6]],[25,"Robo_14",8388608,[-147,-148,-149],[[23,true,-143,[469,470,471],472],[15,-144,[1,0,0.02,0],[1,0.02,0.04,0.02]],[14,8,2,-145],[24,-146]],[1,6,6,6]],[108,"Robo_Boss",8388608,[-154,-155],[[23,true,-150,[513,514,515],516],[15,-151,[1,0,0.02,0],[1,0.03,0.03,0.04]],[14,4,2,-152],[132,-153]],[1,0,-0.392,0],[3,0,0.7071067811865475,0,0.7071067811865476],[1,550,550,550],[1,0,90,0]],[44,"Hint_1",33554432,[-158,-159,-160,-161,-162,-163,-164,-165,-166],[[7,-156,[5,0,0]],[50,true,-157,[25],26]]],[73,"Hint_2",33554432,[-169,-170,-171,-172,-173,-174,-175,-176,-177],[[7,-167,[5,0,0]],[50,true,-168,[36],37]],[1,118,0,0]],[44,"Hint_3",33554432,[-180,-181,-182,-183,-184,-185,-186,-187],[[7,-178,[5,0,0]],[50,true,-179,[46],47]]],[73,"Canvas2D",33554432,[-192,-193,1,-194,-195,-196,-197],[[7,-188,[5,320,480]],[134,-190,-189],[135,45,-2.842170943040401e-14,-2.842170943040401e-14,-191]],[1,160,239.99999999999997,0]],[101,"AudioManager","43S0d/FAdIIa0438iJAqd+",[-199,-200,-201,-202,-203,-204,-205,-206],[-198]],[136,20,21,22,[-251,-252,-253,-254,-255,-256,-257,-258,-259,-260,-261,-262,-263,-264],[-243,-244,-245,-246,-247,-248,-249,-250],[-237,-238,-239,-240,-241,-242],[-229,-230,-231,-232,-233,-234,-235,-236],[-223,-224,-225,-226,-227,-228],[-207,-208,-209,-210,-211,-212,-213,-214,-215,-216,-217,-218,-219,-220,-221,-222],[5,6,7,8,9,10,11,12],[13,14,15,16,17,18],19,2,3],[18,"melee_10",8388608,2,[-265,-266,-267,-268,-269,-270,-271,-272]],[109,"Comp",8388608,[-277,-278,-279],[[131,-273,[485,486,487,488,489]],[14,8,2,-274],[15,-275,[1,0,1,0],[1,2,2,1]],[24,-276]],[3,0,-0.7071067811865475,0,0.7071067811865476],[1,0.08,0.08,0.08],[1,0,-90,0]],[18,"melee_10",8388608,3,[-280,-281,-282,-283,-284,-285,-286,-287]],[137,"Dino",[-304,-305,-306,-307,24,-308,-309],[119,"e7973f3c-cbce-4a8a-9dbb-89db64b73708",[[54,["_trailModule","_particleSystem"],-292,[16,["dd75xDNvFL5JL1FFRSWiHm"]],-291,[16,["dd75xDNvFL5JL1FFRSWiHm"]]],[55,["FX_Merge"],-294,-293,[16,["dd75xDNvFL5JL1FFRSWiHm"]]],[54,["_trailModule","_particleSystem"],-296,[16,["997SBNaQNCWKIt4cMMbVIk"]],-295,[16,["997SBNaQNCWKIt4cMMbVIk"]]],[54,["_trailModule","_particleSystem"],-298,[16,["997SBNaQNCWKIt4cMMbVIk"]],-297,[16,["997SBNaQNCWKIt4cMMbVIk"]]],[55,["FX_FireBall1"],25,-299,[16,["997SBNaQNCWKIt4cMMbVIk"]]],[55,["FX_FireBall2"],25,-300,[16,["997SBNaQNCWKIt4cMMbVIk"]]],[55,["FX_FireBall3"],25,-301,[16,["997SBNaQNCWKIt4cMMbVIk"]]],[54,["_trailModule","_particleSystem"],-303,[16,["997SBNaQNCWKIt4cMMbVIk"]],-302,[16,["997SBNaQNCWKIt4cMMbVIk"]]]],[-288,-289,-290]],[138,[139,0.5208,[2,0.23529411764705882,0.3607843137254902,0.796078431372549,0.520833125],[2,0.23529411764705882,0.3607843137254902,0.796078431372549,1],[2,0.519964,0.630786,0.905039,0.5208],[2,0.519544,0.630484,0.905069,0]],[140,1,true,2,0.05,0.4,0.2,10,2000,10,1,[4,4283190348],[0,2048,2048]],[141,true,560,561],[142],[143]]],[102,"Details",8388608,[-310,4,-311,-312,-313,-314,-315],[1,0,0,-1.45]],[18,"melee_02",8388608,19,[-316,-317,-318,-319,-320,-321,-322]],[144,24],[11,"Map1",8388608,[-323,-324,-325,-326,-327,-328],[1,0,3.936,-0.1],[3,6.123234262925839e-17,1,6.123234262925839e-17,-6.123234262925839e-17],[1,-7.0167096047110005e-15,-180,7.0167096047110005e-15]],[18,"melee_07",8388608,5,[-329,-330,-331,-332,-333,-334]],[18,"melee_07",8388608,6,[-335,-336,-337,-338,-339,-340]],[18,"melee_07",8388608,7,[-341,-342,-343,-344,-345,-346]],[18,"melee_07",8388608,8,[-347,-348,-349,-350,-351,-352]],[18,"melee_07",8388608,9,[-353,-354,-355,-356,-357,-358]],[18,"melee_07",8388608,10,[-359,-360,-361,-362,-363,-364]],[18,"melee_07",8388608,11,[-365,-366,-367,-368,-369,-370]],[18,"melee_07",8388608,12,[-371,-372,-373,-374,-375,-376]],[18,"melee_07",8388608,13,[-377,-378,-379,-380,-381,-382]],[18,"melee_07",8388608,14,[-383,-384,-385,-386,-387,-388]],[18,"melee_07",8388608,15,[-389,-390,-391,-392,-393,-394]],[18,"melee_07",8388608,16,[-395,-396,-397,-398,-399,-400]],[18,"melee_07",8388608,17,[-401,-402,-403,-404,-405,-406]],[18,"melee_07",8388608,18,[-407,-408,-409,-410,-411,-412]],[110,"TryAgain",false,33554432,23,[-416,-417],[[7,-413,[5,442,148]],[96,-414,[50],51],[145,-415]],[1,0,-201,0],[1,0.4,0.4,1]],[103,"Merge FX",8388608,[-419],[-418],[3,4.3297802811774664e-17,0.7071067811865476,-0.7071067811865475,4.329780281177467e-17],[1,0.007692307692307693,0.007692307692307693,0.007692307692307693],[1,89.99999999999999,180,0]],[57,0,{},30,[59,"0dZngw4XVG4L0NExqeSESL",-427,[68,"5ahjZcCklA8IRJ6XyAjIi5",[[28,"FireBall_1",["_name"],-420],[32,["_lpos"],-421,[1,0,-11,9.616]],[32,["_lrot"],-422,[3,0.7071067811865475,0,0,0.7071067811865476]],[32,["_euler"],-423,[1,89.99999999999999,0,0]],[28,false,["loop"],-424],[28,8388608,["_layer"],-425],[28,false,["playOnAwake"],-426]]],553]],[57,0,{},30,[59,"0dZngw4XVG4L0NExqeSESL",-436,[68,"31x4TnDZ9OxLdlRX0Gej12",[[28,"FireBall_2",["_name"],-428],[32,["_lpos"],-429,[1,-0.4,-11.22,9.616]],[32,["_lrot"],-430,[3,0.7071067811865475,0,0,0.7071067811865476]],[32,["_euler"],-431,[1,89.99999999999999,0,0]],[28,false,["loop"],-432],[28,8388608,["_layer"],-433],[32,["_lscale"],-434,[1,0.9,0.9,0.9]],[28,false,["playOnAwake"],-435]]],554]],[16,["0dZngw4XVG4L0NExqeSESL"]],[57,0,{},30,[59,"0dZngw4XVG4L0NExqeSESL",-445,[68,"08D3JVik5O25+afFfS3nRG",[[28,"FireBall_3",["_name"],-437],[32,["_lpos"],-438,[1,0.45,-11.22,9.616]],[32,["_lrot"],-439,[3,0.7071067811865475,0,0,0.7071067811865476]],[32,["_euler"],-440,[1,89.99999999999999,0,0]],[28,false,["loop"],-441],[28,8388608,["_layer"],-442],[32,["_lscale"],-443,[1,0.9,0.9,0.9]],[28,false,["playOnAwake"],-444]]],555]],[16,["0dZngw4XVG4L0NExqeSESL"]],[69,"3D",8388608,[-446,30,-447,-448]],[116,"GamePlay","74v0Gx9cVDhbRRRgISqK/C",29,[23,55],[[-449,[133,-450]],1,4]],[111,"Hint",33554432,23,[20,21,22],[[67,-451]]],[20,"fail",33554432,23,[[7,-452,[5,466,309]],[17,-453,[4,16777215],55],[50,true,-454,[56],57]],[1,0,-100,0],[1,0.8,0.8,1]],[16,["0dZngw4XVG4L0NExqeSESL"]],[3,"HideMask",33554432,23,[[7,-455,[5,5000,5000]],[22,0,-456,[4,16777215],0]]],[3,"Point",33554432,1,[[7,-457,[5,10,10]],[22,0,-458,[4,16777215],1]]],[21,"Point_1",33554432,1,[[7,-459,[5,40,60]],[22,0,-460,[4,16777215],2]],[1,-105,17,0]],[21,"Point_2",33554432,1,[[7,-461,[5,40,60]],[22,0,-462,[4,16777215],3]],[1,-48,17,0]],[21,"Point_3",33554432,1,[[7,-463,[5,40,60]],[22,0,-464,[4,16777215],4]],[1,2,12,0]],[21,"Point_4",33554432,1,[[7,-465,[5,40,60]],[22,0,-466,[4,16777215],5]],[1,1,-41,0]],[21,"Point_5",33554432,1,[[7,-467,[5,40,60]],[22,0,-468,[4,16777215],6]],[1,-1,-105.548,0]],[21,"Point_6",33554432,1,[[7,-469,[5,40,60]],[22,0,-470,[4,16777215],7]],[1,-52.062,-104.548,0]],[21,"Point_7",33554432,1,[[7,-471,[5,40,60]],[22,0,-472,[4,16777215],8]],[1,-106.826,-105.548,0]],[21,"Point_8",33554432,1,[[7,-473,[5,40,60]],[22,0,-474,[4,16777215],9]],[1,-107.104,-46,0]],[21,"Point_9",33554432,1,[[7,-475,[5,40,60]],[22,0,-476,[4,16777215],10]],[1,54.661,17,0]],[21,"Point_10",33554432,1,[[7,-477,[5,40,60]],[22,0,-478,[4,16777215],11]],[1,99.785,17,0]],[21,"Point_11",33554432,1,[[7,-479,[5,40,60]],[22,0,-480,[4,16777215],12]],[1,102.943,-47.378,0]],[21,"Point_12",33554432,1,[[7,-481,[5,40,60]],[22,0,-482,[4,16777215],13]],[1,105.241,-107.635,0]],[21,"Point_13",33554432,1,[[7,-483,[5,40,60]],[22,0,-484,[4,16777215],14]],[1,53.1,-105.548,0]],[21,"Point_14",33554432,1,[[7,-485,[5,40,60]],[22,0,-486,[4,16777215],15]],[1,53.499,-43.191,0]],[112,"Text_TapToFight",33554432,23,[-488],[[67,-487]],[1,0,-180,0],[1,0.35,0.35,0.35]],[3,"Text_Tap",33554432,76,[[7,-489,[5,768,128]],[29,-490,52],[50,true,-491,[53],54]]],[20,"Collider_Ground",8388608,33,[[146,-492,[70],[1]],[147,-493],[14,2,2,-494]],[1,0.002,0.038,-0.037],[1,4,4,4]],[0,"Root_M",8388608,2,[-495,-496,-497],[1,3.7055132352355554e-19,0.019516220316290855,0.00017755031876731664],[3,0.507803838505377,0.49207241499519655,0.507803838505377,0.49207241499519655],[1,180,-90,88.1972372917958]],[11,"Chest_M",8388608,[-498,-499,-500],[1,0.0024785464629530907,4.5796701585585055e-18,-1.2831691984992892e-18],[3,-9.49830208270153e-33,7.54892463334064e-18,-0.01493885351669035,0.9998884091015391],[1,1.2928521800077017e-17,8.653327432571688e-16,-1.711930193624262]],[19,"Unit_1",8388608,4,[-501,5],[1,-2.2,-15.535,7.6],[3,0,-1,0,6.123233995736766e-17],[1,8,8,8],[1,0,-180,0]],[0,"Root_M",8388608,5,[-502,-503,-504],[1,3.7055132352355554e-19,0.019516220316290855,0.00017755031876731664],[3,0.507803838505377,0.49207241499519655,0.507803838505377,0.49207241499519655],[1,180,-90,88.1972372917958]],[11,"Chest_M",8388608,[-505,-506,-507],[1,0.0024785464629530907,4.5796701585585055e-18,-1.2831691984992892e-18],[3,-9.49830208270153e-33,7.54892463334064e-18,-0.01493885351669035,0.9998884091015391],[1,1.2928521800077017e-17,8.653327432571688e-16,-1.711930193624262]],[19,"Unit_2",8388608,4,[-508,6],[1,-1.1,-15.535,7.6],[3,0,-1,0,6.123233995736766e-17],[1,8,8,8],[1,0,-180,0]],[0,"Root_M",8388608,6,[-509,-510,-511],[1,3.7055132352355554e-19,0.019516220316290855,0.00017755031876731664],[3,0.507803838505377,0.49207241499519655,0.507803838505377,0.49207241499519655],[1,180,-90,88.1972372917958]],[11,"Chest_M",8388608,[-512,-513,-514],[1,0.0024785464629530907,4.5796701585585055e-18,-1.2831691984992892e-18],[3,-9.49830208270153e-33,7.54892463334064e-18,-0.01493885351669035,0.9998884091015391],[1,1.2928521800077017e-17,8.653327432571688e-16,-1.711930193624262]],[19,"Unit_3",8388608,4,[-515,7],[1,0,-15.535,7.6],[3,0,-1,0,6.123233995736766e-17],[1,8,8,8],[1,0,-180,0]],[0,"Root_M",8388608,7,[-516,-517,-518],[1,3.7055132352355554e-19,0.019516220316290855,0.00017755031876731664],[3,0.507803838505377,0.49207241499519655,0.507803838505377,0.49207241499519655],[1,180,-90,88.1972372917958]],[11,"Chest_M",8388608,[-519,-520,-521],[1,0.0024785464629530907,4.5796701585585055e-18,-1.2831691984992892e-18],[3,-9.49830208270153e-33,7.54892463334064e-18,-0.01493885351669035,0.9998884091015391],[1,1.2928521800077017e-17,8.653327432571688e-16,-1.711930193624262]],[19,"Unit_4",8388608,4,[-522,8],[1,0,-15.536,9.2],[3,0,-1,0,6.123233995736766e-17],[1,8,8,8],[1,0,-180,0]],[0,"Root_M",8388608,8,[-523,-524,-525],[1,3.7055132352355554e-19,0.019516220316290855,0.00017755031876731664],[3,0.507803838505377,0.49207241499519655,0.507803838505377,0.49207241499519655],[1,180,-90,88.1972372917958]],[11,"Chest_M",8388608,[-526,-527,-528],[1,0.0024785464629530907,4.5796701585585055e-18,-1.2831691984992892e-18],[3,-9.49830208270153e-33,7.54892463334064e-18,-0.01493885351669035,0.9998884091015391],[1,1.2928521800077017e-17,8.653327432571688e-16,-1.711930193624262]],[19,"Unit_5",8388608,4,[-529,9],[1,0,-15.536,10.8],[3,0,-1,0,6.123233995736766e-17],[1,8,8,8],[1,0,-180,0]],[0,"Root_M",8388608,9,[-530,-531,-532],[1,3.7055132352355554e-19,0.019516220316290855,0.00017755031876731664],[3,0.507803838505377,0.49207241499519655,0.507803838505377,0.49207241499519655],[1,180,-90,88.1972372917958]],[11,"Chest_M",8388608,[-533,-534,-535],[1,0.0024785464629530907,4.5796701585585055e-18,-1.2831691984992892e-18],[3,-9.49830208270153e-33,7.54892463334064e-18,-0.01493885351669035,0.9998884091015391],[1,1.2928521800077017e-17,8.653327432571688e-16,-1.711930193624262]],[19,"Unit_6",8388608,4,[-536,10],[1,-1.1,-15.536,10.8],[3,0,-1,0,6.123233995736766e-17],[1,8,8,8],[1,0,-180,0]],[0,"Root_M",8388608,10,[-537,-538,-539],[1,3.7055132352355554e-19,0.019516220316290855,0.00017755031876731664],[3,0.507803838505377,0.49207241499519655,0.507803838505377,0.49207241499519655],[1,180,-90,88.1972372917958]],[11,"Chest_M",8388608,[-540,-541,-542],[1,0.0024785464629530907,4.5796701585585055e-18,-1.2831691984992892e-18],[3,-9.49830208270153e-33,7.54892463334064e-18,-0.01493885351669035,0.9998884091015391],[1,1.2928521800077017e-17,8.653327432571688e-16,-1.711930193624262]],[19,"Unit_7",8388608,4,[-543,11],[1,-2.2,-15.535,10.8],[3,0,-1,0,6.123233995736766e-17],[1,8,8,8],[1,0,-180,0]],[0,"Root_M",8388608,11,[-544,-545,-546],[1,3.7055132352355554e-19,0.019516220316290855,0.00017755031876731664],[3,0.507803838505377,0.49207241499519655,0.507803838505377,0.49207241499519655],[1,180,-90,88.1972372917958]],[11,"Chest_M",8388608,[-547,-548,-549],[1,0.0024785464629530907,4.5796701585585055e-18,-1.2831691984992892e-18],[3,-9.49830208270153e-33,7.54892463334064e-18,-0.01493885351669035,0.9998884091015391],[1,1.2928521800077017e-17,8.653327432571688e-16,-1.711930193624262]],[19,"Unit_8",8388608,4,[-550,12],[1,-2.2,-15.535,9.2],[3,0,-1,0,6.123233995736766e-17],[1,8,8,8],[1,0,-180,0]],[0,"Root_M",8388608,12,[-551,-552,-553],[1,3.7055132352355554e-19,0.019516220316290855,0.00017755031876731664],[3,0.507803838505377,0.49207241499519655,0.507803838505377,0.49207241499519655],[1,180,-90,88.1972372917958]],[11,"Chest_M",8388608,[-554,-555,-556],[1,0.0024785464629530907,4.5796701585585055e-18,-1.2831691984992892e-18],[3,-9.49830208270153e-33,7.54892463334064e-18,-0.01493885351669035,0.9998884091015391],[1,1.2928521800077017e-17,8.653327432571688e-16,-1.711930193624262]],[19,"Unit_9",8388608,4,[-557,13],[1,1.1,-15.536,7.6],[3,0,-1,0,6.123233995736766e-17],[1,8,8,8],[1,0,-180,0]],[0,"Root_M",8388608,13,[-558,-559,-560],[1,3.7055132352355554e-19,0.019516220316290855,0.00017755031876731664],[3,0.507803838505377,0.49207241499519655,0.507803838505377,0.49207241499519655],[1,180,-90,88.1972372917958]],[11,"Chest_M",8388608,[-561,-562,-563],[1,0.0024785464629530907,4.5796701585585055e-18,-1.2831691984992892e-18],[3,-9.49830208270153e-33,7.54892463334064e-18,-0.01493885351669035,0.9998884091015391],[1,1.2928521800077017e-17,8.653327432571688e-16,-1.711930193624262]],[19,"Unit_10",8388608,4,[-564,14],[1,2.2,-15.535,7.623],[3,0,-1,0,6.123233995736766e-17],[1,8,8,8],[1,0,-180,0]],[0,"Root_M",8388608,14,[-565,-566,-567],[1,3.7055132352355554e-19,0.019516220316290855,0.00017755031876731664],[3,0.507803838505377,0.49207241499519655,0.507803838505377,0.49207241499519655],[1,180,-90,88.1972372917958]],[11,"Chest_M",8388608,[-568,-569,-570],[1,0.0024785464629530907,4.5796701585585055e-18,-1.2831691984992892e-18],[3,-9.49830208270153e-33,7.54892463334064e-18,-0.01493885351669035,0.9998884091015391],[1,1.2928521800077017e-17,8.653327432571688e-16,-1.711930193624262]],[19,"Unit_11",8388608,4,[-571,15],[1,2.2,-15.535,9.197],[3,0,-1,0,6.123233995736766e-17],[1,8,8,8],[1,0,-180,0]],[0,"Root_M",8388608,15,[-572,-573,-574],[1,3.7055132352355554e-19,0.019516220316290855,0.00017755031876731664],[3,0.507803838505377,0.49207241499519655,0.507803838505377,0.49207241499519655],[1,180,-90,88.1972372917958]],[11,"Chest_M",8388608,[-575,-576,-577],[1,0.0024785464629530907,4.5796701585585055e-18,-1.2831691984992892e-18],[3,-9.49830208270153e-33,7.54892463334064e-18,-0.01493885351669035,0.9998884091015391],[1,1.2928521800077017e-17,8.653327432571688e-16,-1.711930193624262]],[19,"Unit_12",8388608,4,[-578,16],[1,2.22,-15.535,10.8],[3,0,-1,0,6.123233995736766e-17],[1,8,8,8],[1,0,-180,0]],[0,"Root_M",8388608,16,[-579,-580,-581],[1,3.7055132352355554e-19,0.019516220316290855,0.00017755031876731664],[3,0.507803838505377,0.49207241499519655,0.507803838505377,0.49207241499519655],[1,180,-90,88.1972372917958]],[11,"Chest_M",8388608,[-582,-583,-584],[1,0.0024785464629530907,4.5796701585585055e-18,-1.2831691984992892e-18],[3,-9.49830208270153e-33,7.54892463334064e-18,-0.01493885351669035,0.9998884091015391],[1,1.2928521800077017e-17,8.653327432571688e-16,-1.711930193624262]],[19,"Unit_13",8388608,4,[-585,17],[1,1.106,-15.535,10.8],[3,0,-1,0,6.123233995736766e-17],[1,8,8,8],[1,0,-180,0]],[0,"Root_M",8388608,17,[-586,-587,-588],[1,3.7055132352355554e-19,0.019516220316290855,0.00017755031876731664],[3,0.507803838505377,0.49207241499519655,0.507803838505377,0.49207241499519655],[1,180,-90,88.1972372917958]],[11,"Chest_M",8388608,[-589,-590,-591],[1,0.0024785464629530907,4.5796701585585055e-18,-1.2831691984992892e-18],[3,-9.49830208270153e-33,7.54892463334064e-18,-0.01493885351669035,0.9998884091015391],[1,1.2928521800077017e-17,8.653327432571688e-16,-1.711930193624262]],[19,"Unit_14",8388608,4,[-592,18],[1,1.1,-15.536,9.2],[3,0,-1,0,6.123233995736766e-17],[1,8,8,8],[1,0,-180,0]],[0,"Root_M",8388608,18,[-593,-594,-595],[1,3.7055132352355554e-19,0.019516220316290855,0.00017755031876731664],[3,0.507803838505377,0.49207241499519655,0.507803838505377,0.49207241499519655],[1,180,-90,88.1972372917958]],[11,"Chest_M",8388608,[-596,-597,-598],[1,0.0024785464629530907,4.5796701585585055e-18,-1.2831691984992892e-18],[3,-9.49830208270153e-33,7.54892463334064e-18,-0.01493885351669035,0.9998884091015391],[1,1.2928521800077017e-17,8.653327432571688e-16,-1.711930193624262]],[104,"Unit_15",false,8388608,4,[-599,27],[1,0.072,-15.535,3.183],[3,0,1,0,-6.123233995736766e-17],[1,8,8,8],[1,0,-180,0]],[11,"spine2",8388608,[-600,-601,-602],[1,-1.4901161415892261e-9,0.006562483496963978,-0.0020072516053915024],[3,0.021568042803244196,-0.010958361259436616,0.028499919453102734,0.9993009999190994],[1,2.5103865590934364,-1.3275341749729896,3.238207257235668]],[11,"spine5",8388608,[-603,-604,-605],[1,-1.7881393032936899e-9,0.00410446198657155,-0.0002641912433318794],[3,0.0012075748613808613,0.00027005144704535716,-0.011744127692849453,0.999930269718796],[1,0.13877007919452716,0.032577573786167026,-1.345770429492683]],[11,"pelvis",8388608,[-606,-607,-608],[1,-2.98023217215615e-10,-0.012511205859482288,0.0028946870006620884],[3,-0.01627070837653694,2.9823732615038286e-7,0.000007497692006350686,0.9998676232345067],[1,-1.8645681156146638,0.00004815029670273414,0.0008585024224275254]],[0,"Root_M",8388608,19,[-609,-610,-611],[1,3.7055132352355554e-19,0.019516220316290855,0.00017755031876731664],[3,0.507803838505377,0.49207241499519655,0.507803838505377,0.49207241499519655],[1,180,-90,88.1972372917958]],[11,"Chest_M",8388608,[-612,-613,-614],[1,0.0024785464629530907,4.5796701585585055e-18,-1.2831691984992892e-18],[3,-9.49830208270153e-33,7.54892463334064e-18,-0.01493885351669035,0.9998884091015391],[1,1.2928521800077017e-17,8.653327432571688e-16,-1.711930193624262]],[0,"Root_M",8388608,3,[-615,-616,-617],[1,3.7055132352355554e-19,0.019516220316290855,0.00017755031876731664],[3,0.507803838505377,0.49207241499519655,0.507803838505377,0.49207241499519655],[1,180,-90,88.1972372917958]],[11,"Chest_M",8388608,[-618,-619,-620],[1,0.0024785464629530907,4.5796701585585055e-18,-1.2831691984992892e-18],[3,-9.49830208270153e-33,7.54892463334064e-18,-0.01493885351669035,0.9998884091015391],[1,1.2928521800077017e-17,8.653327432571688e-16,-1.711930193624262]],[117,"Camera_3D",55,[[-621,[96,-622,[556],557]],1,4],[1,0,-6.625,14.593],[3,-0.4289666654920372,0,0,0.9033203196522498],[1,-50.80400000000001,0,0]],[20,"line_1",33554432,20,[[7,-623,[5,53,12]],[29,-624,16]],[1,-75.181,28.010999999999996,0],[1,0.8,0.8,1]],[20,"line_2",33554432,20,[[7,-625,[5,53,12]],[29,-626,17]],[1,-20.18100000000001,28.010999999999996,0],[1,0.8,0.8,1]],[8,"line_3",33554432,20,[[7,-627,[5,53,12]],[29,-628,18]],[1,14.818999999999988,-10,0],[3,0,0,0.7071067811865475,0.7071067811865476],[1,0.8,0.8,1],[1,0,0,90]],[8,"line_4",33554432,20,[[7,-629,[5,53,12]],[29,-630,19]],[1,14.818999999999988,-72.583,0],[3,0,0,0.7071067811865475,0.7071067811865476],[1,0.8,0.8,1],[1,0,0,90]],[8,"line_7",33554432,20,[[7,-631,[5,53,12]],[29,-632,20]],[1,-109.181,-73.583,0],[3,0,0,0.7071067811865475,0.7071067811865476],[1,0.8,0.8,1],[1,0,0,90]],[8,"line_8",33554432,20,[[7,-633,[5,53,12]],[29,-634,21]],[1,-109.181,-10,0],[3,0,0,0.7071067811865475,0.7071067811865476],[1,0.8,0.8,1],[1,0,0,90]],[20,"line_5",33554432,20,[[7,-635,[5,53,12]],[29,-636,22]],[1,-75.181,-111,0],[1,0.8,0.8,1]],[20,"line_6",33554432,20,[[7,-637,[5,53,12]],[29,-638,23]],[1,-20.181,-111,0],[1,0.8,0.8,1]],[20,"hand",33554432,20,[[7,-639,[5,201,257]],[29,-640,24]],[1,-87,-4,0],[1,0.3,0.3,0.3]],[20,"line_1",33554432,21,[[7,-641,[5,53,12]],[17,-642,[4,16777215],27]],[1,-68.311,28.011,0],[1,0.8,0.8,1]],[20,"line_2",33554432,21,[[7,-643,[5,53,12]],[17,-644,[4,16777215],28]],[1,-17.343,28.011,0],[1,0.8,0.8,1]],[8,"line_3",33554432,21,[[7,-645,[5,53,12]],[17,-646,[4,16777215],29]],[1,0,-12,0],[3,0,0,0.7071067811865475,0.7071067811865476],[1,0.8,0.8,1],[1,0,0,90]],[8,"line_4",33554432,21,[[7,-647,[5,53,12]],[17,-648,[4,16777215],30]],[1,0,-68,0],[3,0,0,0.7071067811865475,0.7071067811865476],[1,0.8,0.8,1],[1,0,0,90]],[8,"line_7",33554432,21,[[7,-649,[5,53,12]],[17,-650,[4,16777215],31]],[1,-85.241,-68,0],[3,0,0,0.7071067811865475,0.7071067811865476],[1,0.8,0.8,1],[1,0,0,90]],[8,"line_8",33554432,21,[[7,-651,[5,53,12]],[17,-652,[4,16777215],32]],[1,-85.241,-12,0],[3,0,0,0.7071067811865475,0.7071067811865476],[1,0.8,0.8,1],[1,0,0,90]],[20,"line_5",33554432,21,[[7,-653,[5,53,12]],[17,-654,[4,16777215],33]],[1,-68.311,-105.777,0],[1,0.8,0.8,1]],[20,"line_6",33554432,21,[[7,-655,[5,53,12]],[17,-656,[4,16777215],34]],[1,-14.978,-105.777,0],[1,0.8,0.8,1]],[20,"hand",33554432,21,[[7,-657,[5,201,257]],[17,-658,[4,16777215],35]],[1,-62,-13.576,0],[1,0.3,0.3,0.3]],[20,"line_3",33554432,22,[[7,-659,[5,53,12]],[17,-660,[4,16777215],38]],[1,36.41,-111,0],[1,0.8,0.8,1]],[20,"line_4",33554432,22,[[7,-661,[5,53,12]],[17,-662,[4,16777215],39]],[1,93.47,-111,0],[1,0.8,0.8,1]],[8,"line_7",33554432,22,[[7,-663,[5,53,12]],[17,-664,[4,16777215],40]],[1,-109.181,-86.713,0],[3,0,0,0.7071067811865475,0.7071067811865476],[1,0.8,0.8,1],[1,0,0,90]],[8,"line_8",33554432,22,[[7,-665,[5,53,12]],[17,-666,[4,16777215],41]],[1,-109.181,-31.448,0],[3,0,0,0.7071067811865475,0.7071067811865476],[1,0.8,0.8,1],[1,0,0,90]],[20,"line_5",33554432,22,[[7,-667,[5,53,12]],[17,-668,[4,16777215],42]],[1,-75.181,-111,0],[1,0.8,0.8,1]],[20,"line_6",33554432,22,[[7,-669,[5,53,12]],[17,-670,[4,16777215],43]],[1,-20.181,-111,0],[1,0.8,0.8,1]],[8,"line_9",33554432,22,[[7,-671,[5,53,12]],[17,-672,[4,16777215],44]],[1,-109.181,25.098,0],[3,0,0,0.7071067811865475,0.7071067811865476],[1,0.8,0.8,1],[1,0,0,90]],[20,"hand",33554432,22,[[7,-673,[5,201,257]],[17,-674,[4,16777215],45]],[1,-85,10,0],[1,0.30000000000000004,0.30000000000000004,0.3]],[3,"TryAgain_btn",33554432,48,[[7,-675,[5,442,148]],[29,-676,48]]],[8,"hand-001",33554432,48,[[130,-677,[5,201,257],[0,0.5,0]],[29,-678,49]],[1,-2.4999999999998863,235.0000000000001,0],[3,0,0,0.984807753012208,0.17364817766693044],[1,0.6999999999999998,0.6999999999999998,1],[1,180,180,20.00000000000001]],[148,32],[30,"Map",8388608,55,[-679,-680],[1,0,-15.5,3.718]],[69,"Map5",8388608,[33,-681]],[19,"MergeUnit",8388608,30,[49,2],[1,-0.7,-12.9,12.15],[3,0,-1,0,6.123233995736766e-17],[1,65,65,65],[1,0,-180,0]],[75,0,true,true,1.5,false,false,1.280170500278473,1.280170500278473,6.4008525013923645,0,49,[[75,null],6,0],[51,[4,4294940784]],[9,8],[9,8],[9,40],[2],[9,3.141592653589793],[2],[9,6.283185307179586],[2],[9,0.5],[2],[9,1],[2],[[56,[2]]],[61,true,[60,1,[79,[[62,0.5]],[[43,0,0.006696428571428571],[43,255,0.5],[43,0,0.9977678571428571]]]]],[80,0,[9,1]],[82,true,true,[2],[33,1,[31,[0,1],[[52,2,1,-0.04735883424408022,1,-0.04735883424408022,1],[53,2,-2.8888888888888875,1,-2.8888888888888875,1]]]],[33,1,[31,[0,1],[[52,2,1,-0.04735883424408022,1,-0.04735883424408022,1],[53,2,-2.8888888888888875,1,-2.8888888888888875,1]]]],[33,1,[31,[0,0.3076923076923077,1],[[88,2,0.4925925925925926,-1.2037037037037035,-1.2037037037037035],[89,2],[41,2,1]]]]],[47,[2],[2],[2],[9,1]],[48,[2],[2],[2]],[83,true,[2],[2],[2],[2]],[85,true,[2],[2],[2]],[87,true,[33,1,[31,[0,1],[[41,2,1],[41,2,1]]]],[2]],[49,[9,1],[2],[27],[27],-682],[91,4,0,76,77]],[8,"Level",8388608,2,[[13,"Quad<ModelComponent>",-683,[102],[1],103]],[1,-0.006,0.032,-0.005],[3,2.4432283553159793e-17,0.9063077870366499,0.42261826174069944,7.8955372762417e-17],[1,0.01,0.012,0.11],[1,-50,180,6.3611093629270335e-15]],[8,"Line",8388608,81,[[13,"Quad<ModelComponent>",-684,[109],[1],110]],[1,0.01,0.005,0.003],[3,-0.7071067811865475,0,0,0.7071067811865476],[1,0.12,0.12,0.12],[1,-90,0,0]],[8,"Level",8388608,5,[[26,"Quad<ModelComponent>",0,-685,[129],[1],130]],[1,-0.007166666666666668,0.025999999999999968,0.01266666666666666],[3,-3.210490616548348e-17,0.851525675216433,0.5243129070003884,5.2140909627279675e-17],[1,0.008333333333333331,0.016666666666666666,0.008333333333333331],[1,-63.244,180,0]],[8,"Line",8388608,84,[[13,"Quad<ModelComponent>",-686,[135],[1],136]],[1,0.01,0.005,0.003],[3,-0.7071067811865475,0,0,0.7071067811865476],[1,0.12,0.12,0.12],[1,-90,0,0]],[8,"Level",8388608,6,[[26,"Quad<ModelComponent>",0,-687,[155],[1],156]],[1,-0.007166666666666668,0.025999999999999968,0.01266666666666666],[3,-3.210490616548348e-17,0.851525675216433,0.5243129070003884,5.2140909627279675e-17],[1,0.008333333333333331,0.016666666666666666,0.008333333333333331],[1,-63.244,180,0]],[8,"Line",8388608,87,[[13,"Quad<ModelComponent>",-688,[161],[1],162]],[1,0.01,0.005,0.003],[3,-0.7071067811865475,0,0,0.7071067811865476],[1,0.12,0.12,0.12],[1,-90,0,0]],[8,"Level",8388608,7,[[26,"Quad<ModelComponent>",0,-689,[181],[1],182]],[1,-0.007166666666666668,0.025999999999999968,0.01266666666666666],[3,-3.210490616548348e-17,0.851525675216433,0.5243129070003884,5.2140909627279675e-17],[1,0.008333333333333331,0.016666666666666666,0.008333333333333331],[1,-63.244,180,0]],[8,"Line",8388608,90,[[13,"Quad<ModelComponent>",-690,[187],[1],188]],[1,0.01,0.005,0.003],[3,-0.7071067811865475,0,0,0.7071067811865476],[1,0.12,0.12,0.12],[1,-90,0,0]],[8,"Level",8388608,8,[[26,"Quad<ModelComponent>",0,-691,[207],[1],208]],[1,-0.007166666666666668,0.025999999999999968,0.01266666666666666],[3,-3.210490616548348e-17,0.851525675216433,0.5243129070003884,5.2140909627279675e-17],[1,0.008333333333333331,0.016666666666666666,0.008333333333333331],[1,-63.244,180,0]],[8,"Line",8388608,93,[[13,"Quad<ModelComponent>",-692,[213],[1],214]],[1,0.01,0.005,0.003],[3,-0.7071067811865475,0,0,0.7071067811865476],[1,0.12,0.12,0.12],[1,-90,0,0]],[8,"Level",8388608,9,[[26,"Quad<ModelComponent>",0,-693,[233],[1],234]],[1,-0.007166666666666668,0.025999999999999968,0.01266666666666666],[3,-3.210490616548348e-17,0.851525675216433,0.5243129070003884,5.2140909627279675e-17],[1,0.008333333333333331,0.016666666666666666,0.008333333333333331],[1,-63.244,180,0]],[8,"Line",8388608,96,[[13,"Quad<ModelComponent>",-694,[239],[1],240]],[1,0.01,0.005,0.003],[3,-0.7071067811865475,0,0,0.7071067811865476],[1,0.12,0.12,0.12],[1,-90,0,0]],[8,"Level",8388608,10,[[26,"Quad<ModelComponent>",0,-695,[259],[1],260]],[1,-0.007166666666666668,0.025999999999999968,0.01266666666666666],[3,-3.210490616548348e-17,0.851525675216433,0.5243129070003884,5.2140909627279675e-17],[1,0.008333333333333331,0.016666666666666666,0.008333333333333331],[1,-63.244,180,0]],[8,"Line",8388608,99,[[13,"Quad<ModelComponent>",-696,[265],[1],266]],[1,0.01,0.005,0.003],[3,-0.7071067811865475,0,0,0.7071067811865476],[1,0.12,0.12,0.12],[1,-90,0,0]],[8,"Level",8388608,11,[[26,"Quad<ModelComponent>",0,-697,[285],[1],286]],[1,-0.007166666666666668,0.025999999999999968,0.01266666666666666],[3,-3.210490616548348e-17,0.851525675216433,0.5243129070003884,5.2140909627279675e-17],[1,0.008333333333333331,0.016666666666666666,0.008333333333333331],[1,-63.244,180,0]],[8,"Line",8388608,102,[[13,"Quad<ModelComponent>",-698,[291],[1],292]],[1,0.01,0.005,0.003],[3,-0.7071067811865475,0,0,0.7071067811865476],[1,0.12,0.12,0.12],[1,-90,0,0]],[8,"Level",8388608,12,[[26,"Quad<ModelComponent>",0,-699,[311],[1],312]],[1,-0.007166666666666668,0.025999999999999968,0.01266666666666666],[3,-3.210490616548348e-17,0.851525675216433,0.5243129070003884,5.2140909627279675e-17],[1,0.008333333333333331,0.016666666666666666,0.008333333333333331],[1,-63.244,180,0]],[8,"Line",8388608,105,[[13,"Quad<ModelComponent>",-700,[317],[1],318]],[1,0.01,0.005,0.003],[3,-0.7071067811865475,0,0,0.7071067811865476],[1,0.12,0.12,0.12],[1,-90,0,0]],[8,"Level",8388608,13,[[26,"Quad<ModelComponent>",0,-701,[337],[1],338]],[1,-0.007166666666666668,0.025999999999999968,0.01266666666666666],[3,-3.210490616548348e-17,0.851525675216433,0.5243129070003884,5.2140909627279675e-17],[1,0.008333333333333331,0.016666666666666666,0.008333333333333331],[1,-63.244,180,0]],[8,"Line",8388608,108,[[13,"Quad<ModelComponent>",-702,[343],[1],344]],[1,0.01,0.005,0.003],[3,-0.7071067811865475,0,0,0.7071067811865476],[1,0.12,0.12,0.12],[1,-90,0,0]],[8,"Level",8388608,14,[[26,"Quad<ModelComponent>",0,-703,[363],[1],364]],[1,-0.007166666666666668,0.025999999999999968,0.01266666666666666],[3,-3.210490616548348e-17,0.851525675216433,0.5243129070003884,5.2140909627279675e-17],[1,0.008333333333333331,0.016666666666666666,0.008333333333333331],[1,-63.244,180,0]],[8,"Line",8388608,111,[[13,"Quad<ModelComponent>",-704,[369],[1],370]],[1,0.01,0.005,0.003],[3,-0.7071067811865475,0,0,0.7071067811865476],[1,0.12,0.12,0.12],[1,-90,0,0]],[8,"Level",8388608,15,[[26,"Quad<ModelComponent>",0,-705,[389],[1],390]],[1,-0.007166666666666668,0.025999999999999968,0.01266666666666666],[3,-3.210490616548348e-17,0.851525675216433,0.5243129070003884,5.2140909627279675e-17],[1,0.008333333333333331,0.016666666666666666,0.008333333333333331],[1,-63.244,180,0]],[8,"Line",8388608,114,[[13,"Quad<ModelComponent>",-706,[395],[1],396]],[1,0.01,0.005,0.003],[3,-0.7071067811865475,0,0,0.7071067811865476],[1,0.12,0.12,0.12],[1,-90,0,0]],[8,"Level",8388608,16,[[26,"Quad<ModelComponent>",0,-707,[415],[1],416]],[1,-0.007166666666666668,0.025999999999999968,0.01266666666666666],[3,-3.210490616548348e-17,0.851525675216433,0.5243129070003884,5.2140909627279675e-17],[1,0.008333333333333331,0.016666666666666666,0.008333333333333331],[1,-63.244,180,0]],[8,"Line",8388608,117,[[13,"Quad<ModelComponent>",-708,[421],[1],422]],[1,0.01,0.005,0.003],[3,-0.7071067811865475,0,0,0.7071067811865476],[1,0.12,0.12,0.12],[1,-90,0,0]],[8,"Level",8388608,17,[[26,"Quad<ModelComponent>",0,-709,[441],[1],442]],[1,-0.007166666666666668,0.025999999999999968,0.01266666666666666],[3,-3.210490616548348e-17,0.851525675216433,0.5243129070003884,5.2140909627279675e-17],[1,0.008333333333333331,0.016666666666666666,0.008333333333333331],[1,-63.244,180,0]],[8,"Line",8388608,120,[[13,"Quad<ModelComponent>",-710,[447],[1],448]],[1,0.01,0.005,0.003],[3,-0.7071067811865475,0,0,0.7071067811865476],[1,0.12,0.12,0.12],[1,-90,0,0]],[8,"Level",8388608,18,[[26,"Quad<ModelComponent>",0,-711,[467],[1],468]],[1,-0.007166666666666668,0.025999999999999968,0.01266666666666666],[3,-3.210490616548348e-17,0.851525675216433,0.5243129070003884,5.2140909627279675e-17],[1,0.008333333333333331,0.016666666666666666,0.008333333333333331],[1,-63.244,180,0]],[11,"root",8388608,[-712,126],[1,0.006815663073211908,0.000012269202670722734,0.12871931493282318],[3,0.6025356606293664,0.7948976697017438,0.042716059521415224,-0.057129770099603024],[1,-26.84069494030415,-151.97740180784288,72.36913948125456]],[11,"head",8388608,[-713,-714],[1,-1.3411045607369942e-9,0.01341153122484684,-0.012897348031401634],[3,0.15729017574541435,-0.0027976469170262635,-0.0005857000367276258,0.9875482928653015],[1,18.09904921271078,-0.3060402284510335,-0.11670579058275284]],[30,"eye0",8388608,195,[-715,-716],[1,1.490116086078075e-10,0.009062768891453743,0.0016654159408062696]],[0,"jaw0",8388608,195,[-717,-718],[1,-3.725290298461914e-9,0.01197443250566721,0.011124521493911743],[3,-0.12971614089484276,0.0013289866984905144,0.00064172303653651,0.9915500717448661],[1,-14.90646979942391,0.160542903494221,0.053160120145644876]],[19,"Boss",8388608,30,[-719,19],[1,0,-12.89,8.051],[3,0,-0.7071067811865475,0,0.7071067811865476],[1,0.12,0.12,0.12],[1,0,-90,0]],[8,"Level",8388608,198,[[13,"Quad<ModelComponent>",-720,[490],[1],491]],[1,4.783,16.658,-6.825],[3,-0.24184476264797528,0.6644630243886747,0.24184476264797522,0.6644630243886748],[1,8.1,6,8.1],[1,-40,90,0]],[19,"MergeUnit_2",8388608,30,[-721,3],[1,1.003,-12.9,12.15],[3,0,-1,0,6.123233995736766e-17],[1,65,65,65],[1,0,-180,0]],[105,"Merge FX",8388608,200,[-723],[-722],[3,4.3297802811774664e-17,0.7071067811865476,-0.7071067811865475,4.329780281177467e-17],[1,0.007692307692307693,0.007692307692307693,0.007692307692307693],[1,89.99999999999999,180,0]],[75,0,true,true,1.5,false,false,1.280170500278473,1.280170500278473,6.4008525013923645,0,201,[[519,null],6,0],[51,[4,4294940784]],[9,8],[9,8],[9,40],[2],[9,3.141592653589793],[2],[9,6.283185307179586],[2],[9,0.5],[2],[9,1],[2],[[56,[2]]],[61,true,[60,1,[79,[[62,0.5]],[[43,0,0.006696428571428571],[43,255,0.5],[43,0,0.9977678571428571]]]]],[80,0,[9,1]],[82,true,true,[2],[33,1,[31,[0,1],[[52,2,1,-0.04735883424408022,1,-0.04735883424408022,1],[53,2,-2.8888888888888875,1,-2.8888888888888875,1]]]],[33,1,[31,[0,1],[[52,2,1,-0.04735883424408022,1,-0.04735883424408022,1],[53,2,-2.8888888888888875,1,-2.8888888888888875,1]]]],[33,1,[31,[0,0.3076923076923077,1],[[88,2,0.4925925925925926,-1.2037037037037035,-1.2037037037037035],[89,2],[41,2,1]]]]],[47,[2],[2],[2],[9,1]],[48,[2],[2],[2]],[83,true,[2],[2],[2],[2]],[85,true,[2],[2],[2]],[87,true,[33,1,[31,[0,1],[[41,2,1],[41,2,1]]]],[2]],[49,[9,1],[2],[27],[27],-724],[91,4,0,520,521]],[8,"Level",8388608,3,[[13,"Quad<ModelComponent>",-725,[546],[1],547]],[1,-0.006,0.032,-0.005],[3,2.4432283553159793e-17,0.9063077870366499,0.42261826174069944,7.8955372762417e-17],[1,0.01,0.012,0.11],[1,-50,180,6.3611093629270335e-15]],[58,"NodesController","8a/xFpmgpJurZJj8YB7OHC",29,[25]],[149,"Camera<CameraComponent>",2,60,60,8388608,131,[4,4286356144]],[106,"Camera",23,[-726],[1,0,0,1000]],[150,0,3,240,2000,6,33554432,206,[4,4278190080]],[151,56,25,160,32],[58,"GameController","e4w/NEXQNKr7VqS/zyMP8D",29,[160]],[36,"BgSound",24,[-727]],[152,true,false,210],[36,"AttackSound",24,[-728]],[38,false,212],[36,"MergeSound",24,[-729]],[38,false,214],[36,"LoseSound",24,[-730]],[38,false,216],[36,"FightSound",24,[-731]],[38,false,218],[36,"ScreamSound",24,[-732]],[38,false,220],[36,"ChooseSound",24,[-733]],[38,false,222],[36,"ExplosionSound",24,[-734]],[38,false,224],[70,"Node",8388608,161,[-735],[1,0,2.191,3.527],[1,0.2,0.2,0.2]],[8,"Field_Line",8388608,226,[[13,"Quad<ModelComponent>",-736,[58],[1],59]],[1,0,2.995000000000001,3.3230000000000004],[3,-0.5446609911725051,0,0,0.838656309041424],[1,17.09375,0.5,0.5],[1,-66.00300000000001,0,0]],[70,"Map5",8388608,161,[162],[1,-0.096,-0.599,5.111],[1,0.8,0.8,0.8]],[21,"building_bg_01_bot",8388608,33,[[42,-737,[60],[1],61]],[1,0,1.7100000381469727,0]],[21,"building_bg_01_mid",8388608,33,[[42,-738,[62],[1],63]],[1,0,1.340000033378601,0]],[21,"building_bg_01_top",8388608,33,[[42,-739,[64],[1],65]],[1,0,0.75,0]],[3,"platform_01",8388608,33,[[42,-740,[66],[1],67]]],[3,"platform_floor_01",8388608,33,[[42,-741,[68],[1],69]]],[8,"Fog",8388608,162,[[42,-742,[71],[1],72]],[1,0,0.41999998688697815,-0.03999999910593033],[3,0.03786456151175037,0,0,0.9992828803604727],[1,100,100,100],[1,4.33999661734952,0,0]],[71,"Cube",8388608,49,[-743]],[76,1,false,false,235,[[73,null],6,0],[51,[4,4294939182]],[37,3,1,2],[2],[2],[37,3,30,60],[2],[2],[46,3,4.71238898038469],[2],[37,3,0.3,1],[2],[2],[2],[[56,[9,15]]],[78,[27]],[81,true,0,[9,1]],[64,[2],[2],[2],[2]],[47,[2],[2],[2],[9,1]],[48,[2],[2],[2]],[84,true,0.8,[2],[2],[2],[77,1,30,[31,[0,1],[[90,0.04444444444444444,1,1],[66,-0.562962962962963,-0.6074074074074074,1,-0.6074074074074074,1]]]]],[86,true,true,[9,0.7853981633974483],[9,0.7853981633974483],[9,0.8552113334772213]],[65,true,3,3,2,[2],[46,3,1]],[49,[9,1],[2],[27],[27],-744],[92,0,74]],[0,"Spine1_M",8388608,79,[80],[1,0.005334464367479086,-1.734723475976807e-18,4.299679912665751e-19],[3,2.1271160548415487e-31,-7.387287067052785e-18,0.014618982679226592,0.999893136962858],[1,1.2380563880610636e-17,-8.467922240252193e-16,1.6752716918878972]],[0,"Neck_M",8388608,80,[-745],[1,0.002714349888265133,-9.57567355430475e-18,8.572243914273824e-18],[3,2.334849548498401e-33,1.210279147626834e-32,-0.18942549962218294,0.9818950962770342],[1,5.66041439480744e-31,1.5216497485115417e-30,-21.83851784031204]],[6,"Head_M",8388608,238,[[5,"HeadEnd_M",8388608,-746,[1,0.002823290415108204,5.377642816887133e-19,2.8810669715948983e-19]]],[1,0.002050594659522176,-1.1102230411687688e-17,-1.1397885028539148e-18],[3,1.3712628330747433e-33,-7.748182116840672e-33,0.17427049577586698,0.9846978187759095],[1,3.2947363714137558e-31,-9.59983646203496e-31,20.07241655059164]],[0,"Scapula_R",8388608,80,[-747],[1,0.0011061389232054353,-0.0006425591418519616,-0.003000000026077032],[3,0.011006418236851384,0.7112698310246427,-0.010875604672522158,0.7027487513007612],[1,1.7730415728863935,90.69020757969066,0.021281444783464887]],[0,"Shoulder_R",8388608,240,[-748],[1,0.002950000111013651,2.9599587517625207e-16,4.440891999238953e-18],[3,-0.036766301506691725,0.6917510565886625,-0.038273904125047865,0.7201831871440867],[1,-0.0002833286279134703,87.69276567497838,-6.0844785186711885]],[0,"Elbow_R",8388608,241,[-749],[1,0.005175452213734388,-5.828670614584276e-17,-2.2204459996194763e-18],[3,-7.709045863072825e-19,8.488711171147105e-19,0.12233098131469163,0.9924893606535964],[1,-1.0264744435556117e-16,1.1066156643491841e-16,14.053298599928233]],[6,"Wrist_R",8388608,242,[[5,"Cup_R",8388608,-750,[1,0.0033151672687381506,5.218048202503346e-17,-2.2204459996194763e-18]]],[1,0.005389300640672445,-6.272760062662355e-17,-7.77156120546332e-18],[3,-0.004768474014740153,0.012352902409124579,0.0011546335850644365,0.999911663237771],[1,-0.5480227017072393,1.4161918210299922,0.12554971732357223]],[0,"Scapula_L",8388608,80,[-751],[1,0.0011061389232054353,-0.0006425591418519616,0.003000000026077032],[3,0.7112698310319335,-0.011006417305641662,-0.7027487513079647,-0.010875604672633637],[1,-178.2269585021126,89.30979241912084,-0.021281368875969202]],[0,"Shoulder_L",8388608,244,[-752],[1,-0.0029548665042966604,2.608999682962576e-9,4.440891999238953e-18],[3,-0.03676631640867874,0.6917510566042027,-0.03827388922474663,0.7201831871602655],[1,-0.0002857532309027007,87.69276554611803,-6.084478470121346]],[0,"Elbow_L",8388608,245,[-753],[1,-0.005175452213734388,2.609024101251673e-17,0],[3,-7.639352792941652e-19,-7.668803008362496e-19,0.12233098131469163,0.9924893606535964],[1,-7.848178543085077e-17,-7.886961667845593e-17,14.053298599928233]],[6,"Wrist_L",8388608,246,[[5,"Cup_L",8388608,-754,[1,-0.0033151672687381506,-1.4099832200981251e-16,1.1102229998097382e-18]]],[1,-0.005389300640672445,5.107026005919949e-17,1.6653346031121838e-17],[3,-0.004768474014740153,0.012352902409124579,0.0011546335850644365,0.999911663237771],[1,-0.5480227017072393,1.4161918210299922,0.12554971732357223]],[0,"Hip_R",8388608,79,[-755],[1,-0.0005149218486621976,-0.000035732064134208485,-0.0025951904244720936],[3,-0.0013684586941045457,0.9999846538917857,-0.00017622552207276294,0.0053654679472844545],[1,0.019352340864127352,179.38518562853085,-0.1569199549416445]],[0,"Knee_R",8388608,248,[-756],[1,0.008524451404809952,1.2628998541375225e-11,-1.1102229998097382e-18],[3,3.403632747743931e-20,-9.107188358042246e-19,-0.03350002364301262,0.9994387166884808],[1,4.029053682243933e-19,-1.0440579512036528e-16,-3.839538319810826]],[0,"Ankle_R",8388608,249,[-757],[1,0.007810377050191164,1.1571134675425476e-11,-8.311684436687009e-15],[3,0.0005231972268350271,0.005401740730554813,0.05058017697477186,0.998705258401568],[1,0.028714477331547906,0.6183360190684839,5.79877519893503]],[6,"Toes_R",8388608,250,[[5,"ToesEnd_R",8388608,-758,[1,0.0019366915803402662,-1.9886869822718998e-16,3.063116871260263e-9]]],[1,0.002095116302371025,0.002573760924860835,-1.1551194029069123e-11],[3,-0.0005855765799607817,0.0005394552157793537,0.6775491861260131,0.7354770332703235],[1,-1.1144865141882583,1.1107462304259765,85.3039958375585]],[0,"Hip_L",8388608,79,[-759],[1,-0.0005149218486621976,-0.000035732064134208485,0.0025951904244720936],[3,0.9999846538908325,0.0013684593925951528,-0.00536546794727934,-0.00017622550752068012],[1,-179.9806476612328,0.6148143714585114,0.15692003497274723]],[0,"Knee_L",8388608,252,[-760],[1,-0.008524451404809952,-1.2628998541375225e-11,4.6312953641644995e-15],[3,4.9250421584690475e-20,1.2367185778725194e-18,-0.03350002364301262,0.9994387166884808],[1,1.0411423292578889e-17,1.42146077062345e-16,-3.839538319810826]],[0,"Ankle_L",8388608,253,[-761],[1,-0.007810377050191164,-1.1571218809514061e-11,1.2550515978587175e-14],[3,0.0005231972268350271,0.005401740730554813,0.05058017697477186,0.998705258401568],[1,0.028714477331547906,0.6183360190684839,5.79877519893503]],[6,"Toes_L",8388608,254,[[5,"ToesEnd_L",8388608,-762,[1,-0.0019366915803402662,2.7755574995243454e-19,1.6754419032705137e-11]]],[1,-0.002095116302371025,-0.002573760924860835,8.517709974842358e-12],[3,-0.0005849927574888355,0.0005389178429919117,0.6775491865538494,0.7354770337347383],[1,-1.1133760861696482,1.1096395693191319,85.30399759925989]],[3,"melee_10_body",8388608,26,[[4,1,-763,[78],[1],2,79,80]]],[3,"melee_10_head",8388608,26,[[4,1,-764,[81],[1],2,82,83]]],[3,"melee_10_leg_L",8388608,26,[[4,1,-765,[84],[1],2,85,86]]],[3,"melee_10_leg_R",8388608,26,[[4,1,-766,[87],[1],2,88,89]]],[3,"melee_10_arm_L",8388608,26,[[4,1,-767,[90],[1],2,91,92]]],[3,"melee_10_arm_R",8388608,26,[[4,1,-768,[93],[1],2,94,95]]],[3,"melee_10_blade_L",8388608,26,[[4,1,-769,[96],[1],2,97,98]]],[3,"melee_10_blade_R",8388608,26,[[4,1,-770,[99],[1],2,100,101]]],[0,"Spine1_M",8388608,82,[83],[1,0.005334464367479086,-1.734723475976807e-18,4.299679912665751e-19],[3,2.1271160548415487e-31,-7.387287067052785e-18,0.014618982679226592,0.999893136962858],[1,1.2380563880610636e-17,-8.467922240252193e-16,1.6752716918878972]],[0,"Neck_M",8388608,83,[-771],[1,0.002714349888265133,-9.57567355430475e-18,8.572243914273824e-18],[3,2.334849548498401e-33,1.210279147626834e-32,-0.18942549962218294,0.9818950962770342],[1,5.66041439480744e-31,1.5216497485115417e-30,-21.83851784031204]],[6,"Head_M",8388608,265,[[5,"HeadEnd_M",8388608,-772,[1,0.002823290415108204,5.377642816887133e-19,2.8810669715948983e-19]]],[1,0.002050594659522176,-1.1102230411687688e-17,-1.1397885028539148e-18],[3,1.3712628330747433e-33,-7.748182116840672e-33,0.17427049577586698,0.9846978187759095],[1,3.2947363714137558e-31,-9.59983646203496e-31,20.07241655059164]],[0,"Scapula_R",8388608,83,[-773],[1,0.0011061389232054353,-0.0006425591418519616,-0.0028469646349549294],[3,0.011006418236851384,0.7112698310246427,-0.010875604672522158,0.7027487513007612],[1,1.7730415728863935,90.69020757969066,0.021281444783464887]],[0,"Shoulder_R",8388608,267,[-774],[1,0.0047096810303628445,2.9599587517625207e-16,0],[3,-0.027689870881989053,0.6677426800740703,-0.04203639618045591,0.7426883098946666],[1,0.8642729059348379,83.95977552661904,-5.705732022271162]],[0,"Elbow_R",8388608,268,[-775],[1,0.005175452213734388,-5.773159516292577e-17,-2.2204459996194763e-18],[3,1.736215335978658e-18,-6.995885153988026e-18,0.12233098131469163,0.9924893606535964],[1,3.046483873894846e-16,-8.45285960744512e-16,14.053298599928233]],[6,"Wrist_R",8388608,269,[[5,"Cup_R",8388608,-776,[1,0.0033151672687381506,5.329070399086743e-17,-2.2204459996194763e-18]]],[1,0.005389300640672445,-6.328271160954053e-17,-6.661337998858429e-18],[3,-0.004768474014740153,0.012352902409124579,0.0011546335850644365,0.999911663237771],[1,-0.5480227017072393,1.4161918210299922,0.12554971732357223]],[0,"Scapula_L",8388608,83,[-777],[1,0.0011061389232054353,-0.0006425591418519616,0.0032227779738605022],[3,0.7112698310319335,-0.011006417305641662,-0.7027487513079647,-0.010875604672633637],[1,-178.2269585021126,89.30979241912084,-0.021281368875969202]],[0,"Shoulder_L",8388608,271,[-778],[1,-0.0035574783105403185,1.713056474450525e-9,0.000013887167369830422],[3,-0.03416188434654197,0.6426382066489487,-0.04061436654192732,0.7643294932444482],[1,-0.0012206380677393302,80.11329981341834,-6.08437942527354]],[0,"Elbow_L",8388608,272,[-779],[1,-0.005175452213734388,2.5535130029599743e-17,0],[3,-2.4193042033980414e-18,-3.69900388416738e-17,0.12233098131469163,0.9924893606535964],[1,2.5088938608155047e-16,-4.301746631616259e-15,14.053298599928233]],[6,"Wrist_L",8388608,273,[[5,"Cup_L",8388608,-780,[1,-0.0033151672687381506,-1.412758841187159e-16,0]]],[1,-0.005389300640672445,5.1625371042116473e-17,1.776356799695581e-17],[3,-0.004768474014740153,0.012352902409124579,0.0011546335850644365,0.999911663237771],[1,-0.5480227017072393,1.4161918210299922,0.12554971732357223]],[0,"Hip_R",8388608,82,[-781],[1,-0.0005149218486621976,-0.000035732064134208485,-0.0025951904244720936],[3,-0.0013684586941045457,0.9999846538917857,-0.00017622552207276294,0.0053654679472844545],[1,0.019352340864127352,179.38518562853085,-0.1569199549416445]],[0,"Knee_R",8388608,275,[-782],[1,0.008524451404809952,1.2628998541375225e-11,-1.1102229998097382e-18],[3,3.403632747743931e-20,-9.107188358042246e-19,-0.03350002364301262,0.9994387166884808],[1,4.029053682243933e-19,-1.0440579512036528e-16,-3.839538319810826]],[0,"Ankle_R",8388608,276,[-783],[1,0.007810377050191164,1.1571134675425476e-11,-8.311684436687009e-15],[3,0.0005231972268350271,0.005401740730554813,0.05058017697477186,0.998705258401568],[1,0.028714477331547906,0.6183360190684839,5.79877519893503]],[6,"Toes_R",8388608,277,[[5,"ToesEnd_R",8388608,-784,[1,0.0019366915803402662,-1.9886869822718998e-16,3.063116871260263e-9]]],[1,0.002095116302371025,0.002573760924860835,-1.1551194029069123e-11],[3,-0.0005855765799607817,0.0005394552157793537,0.6775491861260131,0.7354770332703235],[1,-1.1144865141882583,1.1107462304259765,85.3039958375585]],[0,"Hip_L",8388608,82,[-785],[1,-0.0005149218486621976,-0.000035732064134208485,0.0025951904244720936],[3,0.9999846538908325,0.0013684593925951528,-0.00536546794727934,-0.00017622550752068012],[1,-179.9806476612328,0.6148143714585114,0.15692003497274723]],[0,"Knee_L",8388608,279,[-786],[1,-0.008524451404809952,-1.2628998541375225e-11,4.6312953641644995e-15],[3,4.9250421584690475e-20,1.2367185778725194e-18,-0.03350002364301262,0.9994387166884808],[1,1.0411423292578889e-17,1.42146077062345e-16,-3.839538319810826]],[0,"Ankle_L",8388608,280,[-787],[1,-0.007810377050191164,-1.1571218809514061e-11,1.2550515978587175e-14],[3,0.0005231972268350271,0.005401740730554813,0.05058017697477186,0.998705258401568],[1,0.028714477331547906,0.6183360190684839,5.79877519893503]],[6,"Toes_L",8388608,281,[[5,"ToesEnd_L",8388608,-788,[1,-0.0019366915803402662,2.7755574995243454e-19,1.6754419032705137e-11]]],[1,-0.002095116302371025,-0.002573760924860835,8.517709974842358e-12],[3,-0.0005849927574888355,0.0005389178429919117,0.6775491865538494,0.7354770337347383],[1,-1.1133760861696482,1.1096395693191319,85.30399759925989]],[3,"melee_07_body",8388608,34,[[4,1,-789,[111],[1],5,112,113]]],[3,"melee_07_head",8388608,34,[[4,1,-790,[114],[1],5,115,116]]],[3,"melee_07_arm_L",8388608,34,[[4,1,-791,[117],[1],5,118,119]]],[3,"melee_07_leg_L",8388608,34,[[4,1,-792,[120],[1],5,121,122]]],[3,"melee_07_arm_R",8388608,34,[[4,1,-793,[123],[1],5,124,125]]],[3,"melee_07_leg_R",8388608,34,[[4,1,-794,[126],[1],5,127,128]]],[0,"Spine1_M",8388608,85,[86],[1,0.005334464367479086,-1.734723475976807e-18,4.299679912665751e-19],[3,2.1271160548415487e-31,-7.387287067052785e-18,0.014618982679226592,0.999893136962858],[1,1.2380563880610636e-17,-8.467922240252193e-16,1.6752716918878972]],[0,"Neck_M",8388608,86,[-795],[1,0.002714349888265133,-9.57567355430475e-18,8.572243914273824e-18],[3,2.334849548498401e-33,1.210279147626834e-32,-0.18942549962218294,0.9818950962770342],[1,5.66041439480744e-31,1.5216497485115417e-30,-21.83851784031204]],[6,"Head_M",8388608,290,[[5,"HeadEnd_M",8388608,-796,[1,0.002823290415108204,5.377642816887133e-19,2.8810669715948983e-19]]],[1,0.002050594659522176,-1.1102230411687688e-17,-1.1397885028539148e-18],[3,1.3712628330747433e-33,-7.748182116840672e-33,0.17427049577586698,0.9846978187759095],[1,3.2947363714137558e-31,-9.59983646203496e-31,20.07241655059164]],[0,"Scapula_R",8388608,86,[-797],[1,0.0011061389232054353,-0.0006425591418519616,-0.0028469646349549294],[3,0.011006418236851384,0.7112698310246427,-0.010875604672522158,0.7027487513007612],[1,1.7730415728863935,90.69020757969066,0.021281444783464887]],[0,"Shoulder_R",8388608,292,[-798],[1,0.0047096810303628445,2.9599587517625207e-16,0],[3,-0.027689870881989053,0.6677426800740703,-0.04203639618045591,0.7426883098946666],[1,0.8642729059348379,83.95977552661904,-5.705732022271162]],[0,"Elbow_R",8388608,293,[-799],[1,0.005175452213734388,-5.773159516292577e-17,-2.2204459996194763e-18],[3,1.736215335978658e-18,-6.995885153988026e-18,0.12233098131469163,0.9924893606535964],[1,3.046483873894846e-16,-8.45285960744512e-16,14.053298599928233]],[6,"Wrist_R",8388608,294,[[5,"Cup_R",8388608,-800,[1,0.0033151672687381506,5.329070399086743e-17,-2.2204459996194763e-18]]],[1,0.005389300640672445,-6.328271160954053e-17,-6.661337998858429e-18],[3,-0.004768474014740153,0.012352902409124579,0.0011546335850644365,0.999911663237771],[1,-0.5480227017072393,1.4161918210299922,0.12554971732357223]],[0,"Scapula_L",8388608,86,[-801],[1,0.0011061389232054353,-0.0006425591418519616,0.0032227779738605022],[3,0.7112698310319335,-0.011006417305641662,-0.7027487513079647,-0.010875604672633637],[1,-178.2269585021126,89.30979241912084,-0.021281368875969202]],[0,"Shoulder_L",8388608,296,[-802],[1,-0.0035574783105403185,1.713056474450525e-9,0.000013887167369830422],[3,-0.03416188434654197,0.6426382066489487,-0.04061436654192732,0.7643294932444482],[1,-0.0012206380677393302,80.11329981341834,-6.08437942527354]],[0,"Elbow_L",8388608,297,[-803],[1,-0.005175452213734388,2.5535130029599743e-17,0],[3,-2.4193042033980414e-18,-3.69900388416738e-17,0.12233098131469163,0.9924893606535964],[1,2.5088938608155047e-16,-4.301746631616259e-15,14.053298599928233]],[6,"Wrist_L",8388608,298,[[5,"Cup_L",8388608,-804,[1,-0.0033151672687381506,-1.412758841187159e-16,0]]],[1,-0.005389300640672445,5.1625371042116473e-17,1.776356799695581e-17],[3,-0.004768474014740153,0.012352902409124579,0.0011546335850644365,0.999911663237771],[1,-0.5480227017072393,1.4161918210299922,0.12554971732357223]],[0,"Hip_R",8388608,85,[-805],[1,-0.0005149218486621976,-0.000035732064134208485,-0.0025951904244720936],[3,-0.0013684586941045457,0.9999846538917857,-0.00017622552207276294,0.0053654679472844545],[1,0.019352340864127352,179.38518562853085,-0.1569199549416445]],[0,"Knee_R",8388608,300,[-806],[1,0.008524451404809952,1.2628998541375225e-11,-1.1102229998097382e-18],[3,3.403632747743931e-20,-9.107188358042246e-19,-0.03350002364301262,0.9994387166884808],[1,4.029053682243933e-19,-1.0440579512036528e-16,-3.839538319810826]],[0,"Ankle_R",8388608,301,[-807],[1,0.007810377050191164,1.1571134675425476e-11,-8.311684436687009e-15],[3,0.0005231972268350271,0.005401740730554813,0.05058017697477186,0.998705258401568],[1,0.028714477331547906,0.6183360190684839,5.79877519893503]],[6,"Toes_R",8388608,302,[[5,"ToesEnd_R",8388608,-808,[1,0.0019366915803402662,-1.9886869822718998e-16,3.063116871260263e-9]]],[1,0.002095116302371025,0.002573760924860835,-1.1551194029069123e-11],[3,-0.0005855765799607817,0.0005394552157793537,0.6775491861260131,0.7354770332703235],[1,-1.1144865141882583,1.1107462304259765,85.3039958375585]],[0,"Hip_L",8388608,85,[-809],[1,-0.0005149218486621976,-0.000035732064134208485,0.0025951904244720936],[3,0.9999846538908325,0.0013684593925951528,-0.00536546794727934,-0.00017622550752068012],[1,-179.9806476612328,0.6148143714585114,0.15692003497274723]],[0,"Knee_L",8388608,304,[-810],[1,-0.008524451404809952,-1.2628998541375225e-11,4.6312953641644995e-15],[3,4.9250421584690475e-20,1.2367185778725194e-18,-0.03350002364301262,0.9994387166884808],[1,1.0411423292578889e-17,1.42146077062345e-16,-3.839538319810826]],[0,"Ankle_L",8388608,305,[-811],[1,-0.007810377050191164,-1.1571218809514061e-11,1.2550515978587175e-14],[3,0.0005231972268350271,0.005401740730554813,0.05058017697477186,0.998705258401568],[1,0.028714477331547906,0.6183360190684839,5.79877519893503]],[6,"Toes_L",8388608,306,[[5,"ToesEnd_L",8388608,-812,[1,-0.0019366915803402662,2.7755574995243454e-19,1.6754419032705137e-11]]],[1,-0.002095116302371025,-0.002573760924860835,8.517709974842358e-12],[3,-0.0005849927574888355,0.0005389178429919117,0.6775491865538494,0.7354770337347383],[1,-1.1133760861696482,1.1096395693191319,85.30399759925989]],[3,"melee_07_body",8388608,35,[[4,1,-813,[137],[1],6,138,139]]],[3,"melee_07_head",8388608,35,[[4,1,-814,[140],[1],6,141,142]]],[3,"melee_07_arm_L",8388608,35,[[4,1,-815,[143],[1],6,144,145]]],[3,"melee_07_leg_L",8388608,35,[[4,1,-816,[146],[1],6,147,148]]],[3,"melee_07_arm_R",8388608,35,[[4,1,-817,[149],[1],6,150,151]]],[3,"melee_07_leg_R",8388608,35,[[4,1,-818,[152],[1],6,153,154]]],[0,"Spine1_M",8388608,88,[89],[1,0.005334464367479086,-1.734723475976807e-18,4.299679912665751e-19],[3,2.1271160548415487e-31,-7.387287067052785e-18,0.014618982679226592,0.999893136962858],[1,1.2380563880610636e-17,-8.467922240252193e-16,1.6752716918878972]],[0,"Neck_M",8388608,89,[-819],[1,0.002714349888265133,-9.57567355430475e-18,8.572243914273824e-18],[3,2.334849548498401e-33,1.210279147626834e-32,-0.18942549962218294,0.9818950962770342],[1,5.66041439480744e-31,1.5216497485115417e-30,-21.83851784031204]],[6,"Head_M",8388608,315,[[5,"HeadEnd_M",8388608,-820,[1,0.002823290415108204,5.377642816887133e-19,2.8810669715948983e-19]]],[1,0.002050594659522176,-1.1102230411687688e-17,-1.1397885028539148e-18],[3,1.3712628330747433e-33,-7.748182116840672e-33,0.17427049577586698,0.9846978187759095],[1,3.2947363714137558e-31,-9.59983646203496e-31,20.07241655059164]],[0,"Scapula_R",8388608,89,[-821],[1,0.0011061389232054353,-0.0006425591418519616,-0.0028469646349549294],[3,0.011006418236851384,0.7112698310246427,-0.010875604672522158,0.7027487513007612],[1,1.7730415728863935,90.69020757969066,0.021281444783464887]],[0,"Shoulder_R",8388608,317,[-822],[1,0.0047096810303628445,2.9599587517625207e-16,0],[3,-0.027689870881989053,0.6677426800740703,-0.04203639618045591,0.7426883098946666],[1,0.8642729059348379,83.95977552661904,-5.705732022271162]],[0,"Elbow_R",8388608,318,[-823],[1,0.005175452213734388,-5.773159516292577e-17,-2.2204459996194763e-18],[3,1.736215335978658e-18,-6.995885153988026e-18,0.12233098131469163,0.9924893606535964],[1,3.046483873894846e-16,-8.45285960744512e-16,14.053298599928233]],[6,"Wrist_R",8388608,319,[[5,"Cup_R",8388608,-824,[1,0.0033151672687381506,5.329070399086743e-17,-2.2204459996194763e-18]]],[1,0.005389300640672445,-6.328271160954053e-17,-6.661337998858429e-18],[3,-0.004768474014740153,0.012352902409124579,0.0011546335850644365,0.999911663237771],[1,-0.5480227017072393,1.4161918210299922,0.12554971732357223]],[0,"Scapula_L",8388608,89,[-825],[1,0.0011061389232054353,-0.0006425591418519616,0.0032227779738605022],[3,0.7112698310319335,-0.011006417305641662,-0.7027487513079647,-0.010875604672633637],[1,-178.2269585021126,89.30979241912084,-0.021281368875969202]],[0,"Shoulder_L",8388608,321,[-826],[1,-0.0035574783105403185,1.713056474450525e-9,0.000013887167369830422],[3,-0.03416188434654197,0.6426382066489487,-0.04061436654192732,0.7643294932444482],[1,-0.0012206380677393302,80.11329981341834,-6.08437942527354]],[0,"Elbow_L",8388608,322,[-827],[1,-0.005175452213734388,2.5535130029599743e-17,0],[3,-2.4193042033980414e-18,-3.69900388416738e-17,0.12233098131469163,0.9924893606535964],[1,2.5088938608155047e-16,-4.301746631616259e-15,14.053298599928233]],[6,"Wrist_L",8388608,323,[[5,"Cup_L",8388608,-828,[1,-0.0033151672687381506,-1.412758841187159e-16,0]]],[1,-0.005389300640672445,5.1625371042116473e-17,1.776356799695581e-17],[3,-0.004768474014740153,0.012352902409124579,0.0011546335850644365,0.999911663237771],[1,-0.5480227017072393,1.4161918210299922,0.12554971732357223]],[0,"Hip_R",8388608,88,[-829],[1,-0.0005149218486621976,-0.000035732064134208485,-0.0025951904244720936],[3,-0.0013684586941045457,0.9999846538917857,-0.00017622552207276294,0.0053654679472844545],[1,0.019352340864127352,179.38518562853085,-0.1569199549416445]],[0,"Knee_R",8388608,325,[-830],[1,0.008524451404809952,1.2628998541375225e-11,-1.1102229998097382e-18],[3,3.403632747743931e-20,-9.107188358042246e-19,-0.03350002364301262,0.9994387166884808],[1,4.029053682243933e-19,-1.0440579512036528e-16,-3.839538319810826]],[0,"Ankle_R",8388608,326,[-831],[1,0.007810377050191164,1.1571134675425476e-11,-8.311684436687009e-15],[3,0.0005231972268350271,0.005401740730554813,0.05058017697477186,0.998705258401568],[1,0.028714477331547906,0.6183360190684839,5.79877519893503]],[6,"Toes_R",8388608,327,[[5,"ToesEnd_R",8388608,-832,[1,0.0019366915803402662,-1.9886869822718998e-16,3.063116871260263e-9]]],[1,0.002095116302371025,0.002573760924860835,-1.1551194029069123e-11],[3,-0.0005855765799607817,0.0005394552157793537,0.6775491861260131,0.7354770332703235],[1,-1.1144865141882583,1.1107462304259765,85.3039958375585]],[0,"Hip_L",8388608,88,[-833],[1,-0.0005149218486621976,-0.000035732064134208485,0.0025951904244720936],[3,0.9999846538908325,0.0013684593925951528,-0.00536546794727934,-0.00017622550752068012],[1,-179.9806476612328,0.6148143714585114,0.15692003497274723]],[0,"Knee_L",8388608,329,[-834],[1,-0.008524451404809952,-1.2628998541375225e-11,4.6312953641644995e-15],[3,4.9250421584690475e-20,1.2367185778725194e-18,-0.03350002364301262,0.9994387166884808],[1,1.0411423292578889e-17,1.42146077062345e-16,-3.839538319810826]],[0,"Ankle_L",8388608,330,[-835],[1,-0.007810377050191164,-1.1571218809514061e-11,1.2550515978587175e-14],[3,0.0005231972268350271,0.005401740730554813,0.05058017697477186,0.998705258401568],[1,0.028714477331547906,0.6183360190684839,5.79877519893503]],[6,"Toes_L",8388608,331,[[5,"ToesEnd_L",8388608,-836,[1,-0.0019366915803402662,2.7755574995243454e-19,1.6754419032705137e-11]]],[1,-0.002095116302371025,-0.002573760924860835,8.517709974842358e-12],[3,-0.0005849927574888355,0.0005389178429919117,0.6775491865538494,0.7354770337347383],[1,-1.1133760861696482,1.1096395693191319,85.30399759925989]],[3,"melee_07_body",8388608,36,[[4,1,-837,[163],[1],7,164,165]]],[3,"melee_07_head",8388608,36,[[4,1,-838,[166],[1],7,167,168]]],[3,"melee_07_arm_L",8388608,36,[[4,1,-839,[169],[1],7,170,171]]],[3,"melee_07_leg_L",8388608,36,[[4,1,-840,[172],[1],7,173,174]]],[3,"melee_07_arm_R",8388608,36,[[4,1,-841,[175],[1],7,176,177]]],[3,"melee_07_leg_R",8388608,36,[[4,1,-842,[178],[1],7,179,180]]],[0,"Spine1_M",8388608,91,[92],[1,0.005334464367479086,-1.734723475976807e-18,4.299679912665751e-19],[3,2.1271160548415487e-31,-7.387287067052785e-18,0.014618982679226592,0.999893136962858],[1,1.2380563880610636e-17,-8.467922240252193e-16,1.6752716918878972]],[0,"Neck_M",8388608,92,[-843],[1,0.002714349888265133,-9.57567355430475e-18,8.572243914273824e-18],[3,2.334849548498401e-33,1.210279147626834e-32,-0.18942549962218294,0.9818950962770342],[1,5.66041439480744e-31,1.5216497485115417e-30,-21.83851784031204]],[6,"Head_M",8388608,340,[[5,"HeadEnd_M",8388608,-844,[1,0.002823290415108204,5.377642816887133e-19,2.8810669715948983e-19]]],[1,0.002050594659522176,-1.1102230411687688e-17,-1.1397885028539148e-18],[3,1.3712628330747433e-33,-7.748182116840672e-33,0.17427049577586698,0.9846978187759095],[1,3.2947363714137558e-31,-9.59983646203496e-31,20.07241655059164]],[0,"Scapula_R",8388608,92,[-845],[1,0.0011061389232054353,-0.0006425591418519616,-0.0028469646349549294],[3,0.011006418236851384,0.7112698310246427,-0.010875604672522158,0.7027487513007612],[1,1.7730415728863935,90.69020757969066,0.021281444783464887]],[0,"Shoulder_R",8388608,342,[-846],[1,0.0047096810303628445,2.9599587517625207e-16,0],[3,-0.027689870881989053,0.6677426800740703,-0.04203639618045591,0.7426883098946666],[1,0.8642729059348379,83.95977552661904,-5.705732022271162]],[0,"Elbow_R",8388608,343,[-847],[1,0.005175452213734388,-5.773159516292577e-17,-2.2204459996194763e-18],[3,1.736215335978658e-18,-6.995885153988026e-18,0.12233098131469163,0.9924893606535964],[1,3.046483873894846e-16,-8.45285960744512e-16,14.053298599928233]],[6,"Wrist_R",8388608,344,[[5,"Cup_R",8388608,-848,[1,0.0033151672687381506,5.329070399086743e-17,-2.2204459996194763e-18]]],[1,0.005389300640672445,-6.328271160954053e-17,-6.661337998858429e-18],[3,-0.004768474014740153,0.012352902409124579,0.0011546335850644365,0.999911663237771],[1,-0.5480227017072393,1.4161918210299922,0.12554971732357223]],[0,"Scapula_L",8388608,92,[-849],[1,0.0011061389232054353,-0.0006425591418519616,0.0032227779738605022],[3,0.7112698310319335,-0.011006417305641662,-0.7027487513079647,-0.010875604672633637],[1,-178.2269585021126,89.30979241912084,-0.021281368875969202]],[0,"Shoulder_L",8388608,346,[-850],[1,-0.0035574783105403185,1.713056474450525e-9,0.000013887167369830422],[3,-0.03416188434654197,0.6426382066489487,-0.04061436654192732,0.7643294932444482],[1,-0.0012206380677393302,80.11329981341834,-6.08437942527354]],[0,"Elbow_L",8388608,347,[-851],[1,-0.005175452213734388,2.5535130029599743e-17,0],[3,-2.4193042033980414e-18,-3.69900388416738e-17,0.12233098131469163,0.9924893606535964],[1,2.5088938608155047e-16,-4.301746631616259e-15,14.053298599928233]],[6,"Wrist_L",8388608,348,[[5,"Cup_L",8388608,-852,[1,-0.0033151672687381506,-1.412758841187159e-16,0]]],[1,-0.005389300640672445,5.1625371042116473e-17,1.776356799695581e-17],[3,-0.004768474014740153,0.012352902409124579,0.0011546335850644365,0.999911663237771],[1,-0.5480227017072393,1.4161918210299922,0.12554971732357223]],[0,"Hip_R",8388608,91,[-853],[1,-0.0005149218486621976,-0.000035732064134208485,-0.0025951904244720936],[3,-0.0013684586941045457,0.9999846538917857,-0.00017622552207276294,0.0053654679472844545],[1,0.019352340864127352,179.38518562853085,-0.1569199549416445]],[0,"Knee_R",8388608,350,[-854],[1,0.008524451404809952,1.2628998541375225e-11,-1.1102229998097382e-18],[3,3.403632747743931e-20,-9.107188358042246e-19,-0.03350002364301262,0.9994387166884808],[1,4.029053682243933e-19,-1.0440579512036528e-16,-3.839538319810826]],[0,"Ankle_R",8388608,351,[-855],[1,0.007810377050191164,1.1571134675425476e-11,-8.311684436687009e-15],[3,0.0005231972268350271,0.005401740730554813,0.05058017697477186,0.998705258401568],[1,0.028714477331547906,0.6183360190684839,5.79877519893503]],[6,"Toes_R",8388608,352,[[5,"ToesEnd_R",8388608,-856,[1,0.0019366915803402662,-1.9886869822718998e-16,3.063116871260263e-9]]],[1,0.002095116302371025,0.002573760924860835,-1.1551194029069123e-11],[3,-0.0005855765799607817,0.0005394552157793537,0.6775491861260131,0.7354770332703235],[1,-1.1144865141882583,1.1107462304259765,85.3039958375585]],[0,"Hip_L",8388608,91,[-857],[1,-0.0005149218486621976,-0.000035732064134208485,0.0025951904244720936],[3,0.9999846538908325,0.0013684593925951528,-0.00536546794727934,-0.00017622550752068012],[1,-179.9806476612328,0.6148143714585114,0.15692003497274723]],[0,"Knee_L",8388608,354,[-858],[1,-0.008524451404809952,-1.2628998541375225e-11,4.6312953641644995e-15],[3,4.9250421584690475e-20,1.2367185778725194e-18,-0.03350002364301262,0.9994387166884808],[1,1.0411423292578889e-17,1.42146077062345e-16,-3.839538319810826]],[0,"Ankle_L",8388608,355,[-859],[1,-0.007810377050191164,-1.1571218809514061e-11,1.2550515978587175e-14],[3,0.0005231972268350271,0.005401740730554813,0.05058017697477186,0.998705258401568],[1,0.028714477331547906,0.6183360190684839,5.79877519893503]],[6,"Toes_L",8388608,356,[[5,"ToesEnd_L",8388608,-860,[1,-0.0019366915803402662,2.7755574995243454e-19,1.6754419032705137e-11]]],[1,-0.002095116302371025,-0.002573760924860835,8.517709974842358e-12],[3,-0.0005849927574888355,0.0005389178429919117,0.6775491865538494,0.7354770337347383],[1,-1.1133760861696482,1.1096395693191319,85.30399759925989]],[3,"melee_07_body",8388608,37,[[4,1,-861,[189],[1],8,190,191]]],[3,"melee_07_head",8388608,37,[[4,1,-862,[192],[1],8,193,194]]],[3,"melee_07_arm_L",8388608,37,[[4,1,-863,[195],[1],8,196,197]]],[3,"melee_07_leg_L",8388608,37,[[4,1,-864,[198],[1],8,199,200]]],[3,"melee_07_arm_R",8388608,37,[[4,1,-865,[201],[1],8,202,203]]],[3,"melee_07_leg_R",8388608,37,[[4,1,-866,[204],[1],8,205,206]]],[0,"Spine1_M",8388608,94,[95],[1,0.005334464367479086,-1.734723475976807e-18,4.299679912665751e-19],[3,2.1271160548415487e-31,-7.387287067052785e-18,0.014618982679226592,0.999893136962858],[1,1.2380563880610636e-17,-8.467922240252193e-16,1.6752716918878972]],[0,"Neck_M",8388608,95,[-867],[1,0.002714349888265133,-9.57567355430475e-18,8.572243914273824e-18],[3,2.334849548498401e-33,1.210279147626834e-32,-0.18942549962218294,0.9818950962770342],[1,5.66041439480744e-31,1.5216497485115417e-30,-21.83851784031204]],[6,"Head_M",8388608,365,[[5,"HeadEnd_M",8388608,-868,[1,0.002823290415108204,5.377642816887133e-19,2.8810669715948983e-19]]],[1,0.002050594659522176,-1.1102230411687688e-17,-1.1397885028539148e-18],[3,1.3712628330747433e-33,-7.748182116840672e-33,0.17427049577586698,0.9846978187759095],[1,3.2947363714137558e-31,-9.59983646203496e-31,20.07241655059164]],[0,"Scapula_R",8388608,95,[-869],[1,0.0011061389232054353,-0.0006425591418519616,-0.0028469646349549294],[3,0.011006418236851384,0.7112698310246427,-0.010875604672522158,0.7027487513007612],[1,1.7730415728863935,90.69020757969066,0.021281444783464887]],[0,"Shoulder_R",8388608,367,[-870],[1,0.0047096810303628445,2.9599587517625207e-16,0],[3,-0.027689870881989053,0.6677426800740703,-0.04203639618045591,0.7426883098946666],[1,0.8642729059348379,83.95977552661904,-5.705732022271162]],[0,"Elbow_R",8388608,368,[-871],[1,0.005175452213734388,-5.773159516292577e-17,-2.2204459996194763e-18],[3,1.736215335978658e-18,-6.995885153988026e-18,0.12233098131469163,0.9924893606535964],[1,3.046483873894846e-16,-8.45285960744512e-16,14.053298599928233]],[6,"Wrist_R",8388608,369,[[5,"Cup_R",8388608,-872,[1,0.0033151672687381506,5.329070399086743e-17,-2.2204459996194763e-18]]],[1,0.005389300640672445,-6.328271160954053e-17,-6.661337998858429e-18],[3,-0.004768474014740153,0.012352902409124579,0.0011546335850644365,0.999911663237771],[1,-0.5480227017072393,1.4161918210299922,0.12554971732357223]],[0,"Scapula_L",8388608,95,[-873],[1,0.0011061389232054353,-0.0006425591418519616,0.0032227779738605022],[3,0.7112698310319335,-0.011006417305641662,-0.7027487513079647,-0.010875604672633637],[1,-178.2269585021126,89.30979241912084,-0.021281368875969202]],[0,"Shoulder_L",8388608,371,[-874],[1,-0.0035574783105403185,1.713056474450525e-9,0.000013887167369830422],[3,-0.03416188434654197,0.6426382066489487,-0.04061436654192732,0.7643294932444482],[1,-0.0012206380677393302,80.11329981341834,-6.08437942527354]],[0,"Elbow_L",8388608,372,[-875],[1,-0.005175452213734388,2.5535130029599743e-17,0],[3,-2.4193042033980414e-18,-3.69900388416738e-17,0.12233098131469163,0.9924893606535964],[1,2.5088938608155047e-16,-4.301746631616259e-15,14.053298599928233]],[6,"Wrist_L",8388608,373,[[5,"Cup_L",8388608,-876,[1,-0.0033151672687381506,-1.412758841187159e-16,0]]],[1,-0.005389300640672445,5.1625371042116473e-17,1.776356799695581e-17],[3,-0.004768474014740153,0.012352902409124579,0.0011546335850644365,0.999911663237771],[1,-0.5480227017072393,1.4161918210299922,0.12554971732357223]],[0,"Hip_R",8388608,94,[-877],[1,-0.0005149218486621976,-0.000035732064134208485,-0.0025951904244720936],[3,-0.0013684586941045457,0.9999846538917857,-0.00017622552207276294,0.0053654679472844545],[1,0.019352340864127352,179.38518562853085,-0.1569199549416445]],[0,"Knee_R",8388608,375,[-878],[1,0.008524451404809952,1.2628998541375225e-11,-1.1102229998097382e-18],[3,3.403632747743931e-20,-9.107188358042246e-19,-0.03350002364301262,0.9994387166884808],[1,4.029053682243933e-19,-1.0440579512036528e-16,-3.839538319810826]],[0,"Ankle_R",8388608,376,[-879],[1,0.007810377050191164,1.1571134675425476e-11,-8.311684436687009e-15],[3,0.0005231972268350271,0.005401740730554813,0.05058017697477186,0.998705258401568],[1,0.028714477331547906,0.6183360190684839,5.79877519893503]],[6,"Toes_R",8388608,377,[[5,"ToesEnd_R",8388608,-880,[1,0.0019366915803402662,-1.9886869822718998e-16,3.063116871260263e-9]]],[1,0.002095116302371025,0.002573760924860835,-1.1551194029069123e-11],[3,-0.0005855765799607817,0.0005394552157793537,0.6775491861260131,0.7354770332703235],[1,-1.1144865141882583,1.1107462304259765,85.3039958375585]],[0,"Hip_L",8388608,94,[-881],[1,-0.0005149218486621976,-0.000035732064134208485,0.0025951904244720936],[3,0.9999846538908325,0.0013684593925951528,-0.00536546794727934,-0.00017622550752068012],[1,-179.9806476612328,0.6148143714585114,0.15692003497274723]],[0,"Knee_L",8388608,379,[-882],[1,-0.008524451404809952,-1.2628998541375225e-11,4.6312953641644995e-15],[3,4.9250421584690475e-20,1.2367185778725194e-18,-0.03350002364301262,0.9994387166884808],[1,1.0411423292578889e-17,1.42146077062345e-16,-3.839538319810826]],[0,"Ankle_L",8388608,380,[-883],[1,-0.007810377050191164,-1.1571218809514061e-11,1.2550515978587175e-14],[3,0.0005231972268350271,0.005401740730554813,0.05058017697477186,0.998705258401568],[1,0.028714477331547906,0.6183360190684839,5.79877519893503]],[6,"Toes_L",8388608,381,[[5,"ToesEnd_L",8388608,-884,[1,-0.0019366915803402662,2.7755574995243454e-19,1.6754419032705137e-11]]],[1,-0.002095116302371025,-0.002573760924860835,8.517709974842358e-12],[3,-0.0005849927574888355,0.0005389178429919117,0.6775491865538494,0.7354770337347383],[1,-1.1133760861696482,1.1096395693191319,85.30399759925989]],[3,"melee_07_body",8388608,38,[[4,1,-885,[215],[1],9,216,217]]],[3,"melee_07_head",8388608,38,[[4,1,-886,[218],[1],9,219,220]]],[3,"melee_07_arm_L",8388608,38,[[4,1,-887,[221],[1],9,222,223]]],[3,"melee_07_leg_L",8388608,38,[[4,1,-888,[224],[1],9,225,226]]],[3,"melee_07_arm_R",8388608,38,[[4,1,-889,[227],[1],9,228,229]]],[3,"melee_07_leg_R",8388608,38,[[4,1,-890,[230],[1],9,231,232]]],[0,"Spine1_M",8388608,97,[98],[1,0.005334464367479086,-1.734723475976807e-18,4.299679912665751e-19],[3,2.1271160548415487e-31,-7.387287067052785e-18,0.014618982679226592,0.999893136962858],[1,1.2380563880610636e-17,-8.467922240252193e-16,1.6752716918878972]],[0,"Neck_M",8388608,98,[-891],[1,0.002714349888265133,-9.57567355430475e-18,8.572243914273824e-18],[3,2.334849548498401e-33,1.210279147626834e-32,-0.18942549962218294,0.9818950962770342],[1,5.66041439480744e-31,1.5216497485115417e-30,-21.83851784031204]],[6,"Head_M",8388608,390,[[5,"HeadEnd_M",8388608,-892,[1,0.002823290415108204,5.377642816887133e-19,2.8810669715948983e-19]]],[1,0.002050594659522176,-1.1102230411687688e-17,-1.1397885028539148e-18],[3,1.3712628330747433e-33,-7.748182116840672e-33,0.17427049577586698,0.9846978187759095],[1,3.2947363714137558e-31,-9.59983646203496e-31,20.07241655059164]],[0,"Scapula_R",8388608,98,[-893],[1,0.0011061389232054353,-0.0006425591418519616,-0.0028469646349549294],[3,0.011006418236851384,0.7112698310246427,-0.010875604672522158,0.7027487513007612],[1,1.7730415728863935,90.69020757969066,0.021281444783464887]],[0,"Shoulder_R",8388608,392,[-894],[1,0.0047096810303628445,2.9599587517625207e-16,0],[3,-0.027689870881989053,0.6677426800740703,-0.04203639618045591,0.7426883098946666],[1,0.8642729059348379,83.95977552661904,-5.705732022271162]],[0,"Elbow_R",8388608,393,[-895],[1,0.005175452213734388,-5.773159516292577e-17,-2.2204459996194763e-18],[3,1.736215335978658e-18,-6.995885153988026e-18,0.12233098131469163,0.9924893606535964],[1,3.046483873894846e-16,-8.45285960744512e-16,14.053298599928233]],[6,"Wrist_R",8388608,394,[[5,"Cup_R",8388608,-896,[1,0.0033151672687381506,5.329070399086743e-17,-2.2204459996194763e-18]]],[1,0.005389300640672445,-6.328271160954053e-17,-6.661337998858429e-18],[3,-0.004768474014740153,0.012352902409124579,0.0011546335850644365,0.999911663237771],[1,-0.5480227017072393,1.4161918210299922,0.12554971732357223]],[0,"Scapula_L",8388608,98,[-897],[1,0.0011061389232054353,-0.0006425591418519616,0.0032227779738605022],[3,0.7112698310319335,-0.011006417305641662,-0.7027487513079647,-0.010875604672633637],[1,-178.2269585021126,89.30979241912084,-0.021281368875969202]],[0,"Shoulder_L",8388608,396,[-898],[1,-0.0035574783105403185,1.713056474450525e-9,0.000013887167369830422],[3,-0.03416188434654197,0.6426382066489487,-0.04061436654192732,0.7643294932444482],[1,-0.0012206380677393302,80.11329981341834,-6.08437942527354]],[0,"Elbow_L",8388608,397,[-899],[1,-0.005175452213734388,2.5535130029599743e-17,0],[3,-2.4193042033980414e-18,-3.69900388416738e-17,0.12233098131469163,0.9924893606535964],[1,2.5088938608155047e-16,-4.301746631616259e-15,14.053298599928233]],[6,"Wrist_L",8388608,398,[[5,"Cup_L",8388608,-900,[1,-0.0033151672687381506,-1.412758841187159e-16,0]]],[1,-0.005389300640672445,5.1625371042116473e-17,1.776356799695581e-17],[3,-0.004768474014740153,0.012352902409124579,0.0011546335850644365,0.999911663237771],[1,-0.5480227017072393,1.4161918210299922,0.12554971732357223]],[0,"Hip_R",8388608,97,[-901],[1,-0.0005149218486621976,-0.000035732064134208485,-0.0025951904244720936],[3,-0.0013684586941045457,0.9999846538917857,-0.00017622552207276294,0.0053654679472844545],[1,0.019352340864127352,179.38518562853085,-0.1569199549416445]],[0,"Knee_R",8388608,400,[-902],[1,0.008524451404809952,1.2628998541375225e-11,-1.1102229998097382e-18],[3,3.403632747743931e-20,-9.107188358042246e-19,-0.03350002364301262,0.9994387166884808],[1,4.029053682243933e-19,-1.0440579512036528e-16,-3.839538319810826]],[0,"Ankle_R",8388608,401,[-903],[1,0.007810377050191164,1.1571134675425476e-11,-8.311684436687009e-15],[3,0.0005231972268350271,0.005401740730554813,0.05058017697477186,0.998705258401568],[1,0.028714477331547906,0.6183360190684839,5.79877519893503]],[6,"Toes_R",8388608,402,[[5,"ToesEnd_R",8388608,-904,[1,0.0019366915803402662,-1.9886869822718998e-16,3.063116871260263e-9]]],[1,0.002095116302371025,0.002573760924860835,-1.1551194029069123e-11],[3,-0.0005855765799607817,0.0005394552157793537,0.6775491861260131,0.7354770332703235],[1,-1.1144865141882583,1.1107462304259765,85.3039958375585]],[0,"Hip_L",8388608,97,[-905],[1,-0.0005149218486621976,-0.000035732064134208485,0.0025951904244720936],[3,0.9999846538908325,0.0013684593925951528,-0.00536546794727934,-0.00017622550752068012],[1,-179.9806476612328,0.6148143714585114,0.15692003497274723]],[0,"Knee_L",8388608,404,[-906],[1,-0.008524451404809952,-1.2628998541375225e-11,4.6312953641644995e-15],[3,4.9250421584690475e-20,1.2367185778725194e-18,-0.03350002364301262,0.9994387166884808],[1,1.0411423292578889e-17,1.42146077062345e-16,-3.839538319810826]],[0,"Ankle_L",8388608,405,[-907],[1,-0.007810377050191164,-1.1571218809514061e-11,1.2550515978587175e-14],[3,0.0005231972268350271,0.005401740730554813,0.05058017697477186,0.998705258401568],[1,0.028714477331547906,0.6183360190684839,5.79877519893503]],[6,"Toes_L",8388608,406,[[5,"ToesEnd_L",8388608,-908,[1,-0.0019366915803402662,2.7755574995243454e-19,1.6754419032705137e-11]]],[1,-0.002095116302371025,-0.002573760924860835,8.517709974842358e-12],[3,-0.0005849927574888355,0.0005389178429919117,0.6775491865538494,0.7354770337347383],[1,-1.1133760861696482,1.1096395693191319,85.30399759925989]],[3,"melee_07_body",8388608,39,[[4,1,-909,[241],[1],10,242,243]]],[3,"melee_07_head",8388608,39,[[4,1,-910,[244],[1],10,245,246]]],[3,"melee_07_arm_L",8388608,39,[[4,1,-911,[247],[1],10,248,249]]],[3,"melee_07_leg_L",8388608,39,[[4,1,-912,[250],[1],10,251,252]]],[3,"melee_07_arm_R",8388608,39,[[4,1,-913,[253],[1],10,254,255]]],[3,"melee_07_leg_R",8388608,39,[[4,1,-914,[256],[1],10,257,258]]],[0,"Spine1_M",8388608,100,[101],[1,0.005334464367479086,-1.734723475976807e-18,4.299679912665751e-19],[3,2.1271160548415487e-31,-7.387287067052785e-18,0.014618982679226592,0.999893136962858],[1,1.2380563880610636e-17,-8.467922240252193e-16,1.6752716918878972]],[0,"Neck_M",8388608,101,[-915],[1,0.002714349888265133,-9.57567355430475e-18,8.572243914273824e-18],[3,2.334849548498401e-33,1.210279147626834e-32,-0.18942549962218294,0.9818950962770342],[1,5.66041439480744e-31,1.5216497485115417e-30,-21.83851784031204]],[6,"Head_M",8388608,415,[[5,"HeadEnd_M",8388608,-916,[1,0.002823290415108204,5.377642816887133e-19,2.8810669715948983e-19]]],[1,0.002050594659522176,-1.1102230411687688e-17,-1.1397885028539148e-18],[3,1.3712628330747433e-33,-7.748182116840672e-33,0.17427049577586698,0.9846978187759095],[1,3.2947363714137558e-31,-9.59983646203496e-31,20.07241655059164]],[0,"Scapula_R",8388608,101,[-917],[1,0.0011061389232054353,-0.0006425591418519616,-0.0028469646349549294],[3,0.011006418236851384,0.7112698310246427,-0.010875604672522158,0.7027487513007612],[1,1.7730415728863935,90.69020757969066,0.021281444783464887]],[0,"Shoulder_R",8388608,417,[-918],[1,0.0047096810303628445,2.9599587517625207e-16,0],[3,-0.027689870881989053,0.6677426800740703,-0.04203639618045591,0.7426883098946666],[1,0.8642729059348379,83.95977552661904,-5.705732022271162]],[0,"Elbow_R",8388608,418,[-919],[1,0.005175452213734388,-5.773159516292577e-17,-2.2204459996194763e-18],[3,1.736215335978658e-18,-6.995885153988026e-18,0.12233098131469163,0.9924893606535964],[1,3.046483873894846e-16,-8.45285960744512e-16,14.053298599928233]],[6,"Wrist_R",8388608,419,[[5,"Cup_R",8388608,-920,[1,0.0033151672687381506,5.329070399086743e-17,-2.2204459996194763e-18]]],[1,0.005389300640672445,-6.328271160954053e-17,-6.661337998858429e-18],[3,-0.004768474014740153,0.012352902409124579,0.0011546335850644365,0.999911663237771],[1,-0.5480227017072393,1.4161918210299922,0.12554971732357223]],[0,"Scapula_L",8388608,101,[-921],[1,0.0011061389232054353,-0.0006425591418519616,0.0032227779738605022],[3,0.7112698310319335,-0.011006417305641662,-0.7027487513079647,-0.010875604672633637],[1,-178.2269585021126,89.30979241912084,-0.021281368875969202]],[0,"Shoulder_L",8388608,421,[-922],[1,-0.0035574783105403185,1.713056474450525e-9,0.000013887167369830422],[3,-0.03416188434654197,0.6426382066489487,-0.04061436654192732,0.7643294932444482],[1,-0.0012206380677393302,80.11329981341834,-6.08437942527354]],[0,"Elbow_L",8388608,422,[-923],[1,-0.005175452213734388,2.5535130029599743e-17,0],[3,-2.4193042033980414e-18,-3.69900388416738e-17,0.12233098131469163,0.9924893606535964],[1,2.5088938608155047e-16,-4.301746631616259e-15,14.053298599928233]],[6,"Wrist_L",8388608,423,[[5,"Cup_L",8388608,-924,[1,-0.0033151672687381506,-1.412758841187159e-16,0]]],[1,-0.005389300640672445,5.1625371042116473e-17,1.776356799695581e-17],[3,-0.004768474014740153,0.012352902409124579,0.0011546335850644365,0.999911663237771],[1,-0.5480227017072393,1.4161918210299922,0.12554971732357223]],[0,"Hip_R",8388608,100,[-925],[1,-0.0005149218486621976,-0.000035732064134208485,-0.0025951904244720936],[3,-0.0013684586941045457,0.9999846538917857,-0.00017622552207276294,0.0053654679472844545],[1,0.019352340864127352,179.38518562853085,-0.1569199549416445]],[0,"Knee_R",8388608,425,[-926],[1,0.008524451404809952,1.2628998541375225e-11,-1.1102229998097382e-18],[3,3.403632747743931e-20,-9.107188358042246e-19,-0.03350002364301262,0.9994387166884808],[1,4.029053682243933e-19,-1.0440579512036528e-16,-3.839538319810826]],[0,"Ankle_R",8388608,426,[-927],[1,0.007810377050191164,1.1571134675425476e-11,-8.311684436687009e-15],[3,0.0005231972268350271,0.005401740730554813,0.05058017697477186,0.998705258401568],[1,0.028714477331547906,0.6183360190684839,5.79877519893503]],[6,"Toes_R",8388608,427,[[5,"ToesEnd_R",8388608,-928,[1,0.0019366915803402662,-1.9886869822718998e-16,3.063116871260263e-9]]],[1,0.002095116302371025,0.002573760924860835,-1.1551194029069123e-11],[3,-0.0005855765799607817,0.0005394552157793537,0.6775491861260131,0.7354770332703235],[1,-1.1144865141882583,1.1107462304259765,85.3039958375585]],[0,"Hip_L",8388608,100,[-929],[1,-0.0005149218486621976,-0.000035732064134208485,0.0025951904244720936],[3,0.9999846538908325,0.0013684593925951528,-0.00536546794727934,-0.00017622550752068012],[1,-179.9806476612328,0.6148143714585114,0.15692003497274723]],[0,"Knee_L",8388608,429,[-930],[1,-0.008524451404809952,-1.2628998541375225e-11,4.6312953641644995e-15],[3,4.9250421584690475e-20,1.2367185778725194e-18,-0.03350002364301262,0.9994387166884808],[1,1.0411423292578889e-17,1.42146077062345e-16,-3.839538319810826]],[0,"Ankle_L",8388608,430,[-931],[1,-0.007810377050191164,-1.1571218809514061e-11,1.2550515978587175e-14],[3,0.0005231972268350271,0.005401740730554813,0.05058017697477186,0.998705258401568],[1,0.028714477331547906,0.6183360190684839,5.79877519893503]],[6,"Toes_L",8388608,431,[[5,"ToesEnd_L",8388608,-932,[1,-0.0019366915803402662,2.7755574995243454e-19,1.6754419032705137e-11]]],[1,-0.002095116302371025,-0.002573760924860835,8.517709974842358e-12],[3,-0.0005849927574888355,0.0005389178429919117,0.6775491865538494,0.7354770337347383],[1,-1.1133760861696482,1.1096395693191319,85.30399759925989]],[3,"melee_07_body",8388608,40,[[4,1,-933,[267],[1],11,268,269]]],[3,"melee_07_head",8388608,40,[[4,1,-934,[270],[1],11,271,272]]],[3,"melee_07_arm_L",8388608,40,[[4,1,-935,[273],[1],11,274,275]]],[3,"melee_07_leg_L",8388608,40,[[4,1,-936,[276],[1],11,277,278]]],[3,"melee_07_arm_R",8388608,40,[[4,1,-937,[279],[1],11,280,281]]],[3,"melee_07_leg_R",8388608,40,[[4,1,-938,[282],[1],11,283,284]]],[0,"Spine1_M",8388608,103,[104],[1,0.005334464367479086,-1.734723475976807e-18,4.299679912665751e-19],[3,2.1271160548415487e-31,-7.387287067052785e-18,0.014618982679226592,0.999893136962858],[1,1.2380563880610636e-17,-8.467922240252193e-16,1.6752716918878972]],[0,"Neck_M",8388608,104,[-939],[1,0.002714349888265133,-9.57567355430475e-18,8.572243914273824e-18],[3,2.334849548498401e-33,1.210279147626834e-32,-0.18942549962218294,0.9818950962770342],[1,5.66041439480744e-31,1.5216497485115417e-30,-21.83851784031204]],[6,"Head_M",8388608,440,[[5,"HeadEnd_M",8388608,-940,[1,0.002823290415108204,5.377642816887133e-19,2.8810669715948983e-19]]],[1,0.002050594659522176,-1.1102230411687688e-17,-1.1397885028539148e-18],[3,1.3712628330747433e-33,-7.748182116840672e-33,0.17427049577586698,0.9846978187759095],[1,3.2947363714137558e-31,-9.59983646203496e-31,20.07241655059164]],[0,"Scapula_R",8388608,104,[-941],[1,0.0011061389232054353,-0.0006425591418519616,-0.0028469646349549294],[3,0.011006418236851384,0.7112698310246427,-0.010875604672522158,0.7027487513007612],[1,1.7730415728863935,90.69020757969066,0.021281444783464887]],[0,"Shoulder_R",8388608,442,[-942],[1,0.0047096810303628445,2.9599587517625207e-16,0],[3,-0.027689870881989053,0.6677426800740703,-0.04203639618045591,0.7426883098946666],[1,0.8642729059348379,83.95977552661904,-5.705732022271162]],[0,"Elbow_R",8388608,443,[-943],[1,0.005175452213734388,-5.773159516292577e-17,-2.2204459996194763e-18],[3,1.736215335978658e-18,-6.995885153988026e-18,0.12233098131469163,0.9924893606535964],[1,3.046483873894846e-16,-8.45285960744512e-16,14.053298599928233]],[6,"Wrist_R",8388608,444,[[5,"Cup_R",8388608,-944,[1,0.0033151672687381506,5.329070399086743e-17,-2.2204459996194763e-18]]],[1,0.005389300640672445,-6.328271160954053e-17,-6.661337998858429e-18],[3,-0.004768474014740153,0.012352902409124579,0.0011546335850644365,0.999911663237771],[1,-0.5480227017072393,1.4161918210299922,0.12554971732357223]],[0,"Scapula_L",8388608,104,[-945],[1,0.0011061389232054353,-0.0006425591418519616,0.0032227779738605022],[3,0.7112698310319335,-0.011006417305641662,-0.7027487513079647,-0.010875604672633637],[1,-178.2269585021126,89.30979241912084,-0.021281368875969202]],[0,"Shoulder_L",8388608,446,[-946],[1,-0.0035574783105403185,1.713056474450525e-9,0.000013887167369830422],[3,-0.03416188434654197,0.6426382066489487,-0.04061436654192732,0.7643294932444482],[1,-0.0012206380677393302,80.11329981341834,-6.08437942527354]],[0,"Elbow_L",8388608,447,[-947],[1,-0.005175452213734388,2.5535130029599743e-17,0],[3,-2.4193042033980414e-18,-3.69900388416738e-17,0.12233098131469163,0.9924893606535964],[1,2.5088938608155047e-16,-4.301746631616259e-15,14.053298599928233]],[6,"Wrist_L",8388608,448,[[5,"Cup_L",8388608,-948,[1,-0.0033151672687381506,-1.412758841187159e-16,0]]],[1,-0.005389300640672445,5.1625371042116473e-17,1.776356799695581e-17],[3,-0.004768474014740153,0.012352902409124579,0.0011546335850644365,0.999911663237771],[1,-0.5480227017072393,1.4161918210299922,0.12554971732357223]],[0,"Hip_R",8388608,103,[-949],[1,-0.0005149218486621976,-0.000035732064134208485,-0.0025951904244720936],[3,-0.0013684586941045457,0.9999846538917857,-0.00017622552207276294,0.0053654679472844545],[1,0.019352340864127352,179.38518562853085,-0.1569199549416445]],[0,"Knee_R",8388608,450,[-950],[1,0.008524451404809952,1.2628998541375225e-11,-1.1102229998097382e-18],[3,3.403632747743931e-20,-9.107188358042246e-19,-0.03350002364301262,0.9994387166884808],[1,4.029053682243933e-19,-1.0440579512036528e-16,-3.839538319810826]],[0,"Ankle_R",8388608,451,[-951],[1,0.007810377050191164,1.1571134675425476e-11,-8.311684436687009e-15],[3,0.0005231972268350271,0.005401740730554813,0.05058017697477186,0.998705258401568],[1,0.028714477331547906,0.6183360190684839,5.79877519893503]],[6,"Toes_R",8388608,452,[[5,"ToesEnd_R",8388608,-952,[1,0.0019366915803402662,-1.9886869822718998e-16,3.063116871260263e-9]]],[1,0.002095116302371025,0.002573760924860835,-1.1551194029069123e-11],[3,-0.0005855765799607817,0.0005394552157793537,0.6775491861260131,0.7354770332703235],[1,-1.1144865141882583,1.1107462304259765,85.3039958375585]],[0,"Hip_L",8388608,103,[-953],[1,-0.0005149218486621976,-0.000035732064134208485,0.0025951904244720936],[3,0.9999846538908325,0.0013684593925951528,-0.00536546794727934,-0.00017622550752068012],[1,-179.9806476612328,0.6148143714585114,0.15692003497274723]],[0,"Knee_L",8388608,454,[-954],[1,-0.008524451404809952,-1.2628998541375225e-11,4.6312953641644995e-15],[3,4.9250421584690475e-20,1.2367185778725194e-18,-0.03350002364301262,0.9994387166884808],[1,1.0411423292578889e-17,1.42146077062345e-16,-3.839538319810826]],[0,"Ankle_L",8388608,455,[-955],[1,-0.007810377050191164,-1.1571218809514061e-11,1.2550515978587175e-14],[3,0.0005231972268350271,0.005401740730554813,0.05058017697477186,0.998705258401568],[1,0.028714477331547906,0.6183360190684839,5.79877519893503]],[6,"Toes_L",8388608,456,[[5,"ToesEnd_L",8388608,-956,[1,-0.0019366915803402662,2.7755574995243454e-19,1.6754419032705137e-11]]],[1,-0.002095116302371025,-0.002573760924860835,8.517709974842358e-12],[3,-0.0005849927574888355,0.0005389178429919117,0.6775491865538494,0.7354770337347383],[1,-1.1133760861696482,1.1096395693191319,85.30399759925989]],[3,"melee_07_body",8388608,41,[[4,1,-957,[293],[1],12,294,295]]],[3,"melee_07_head",8388608,41,[[4,1,-958,[296],[1],12,297,298]]],[3,"melee_07_arm_L",8388608,41,[[4,1,-959,[299],[1],12,300,301]]],[3,"melee_07_leg_L",8388608,41,[[4,1,-960,[302],[1],12,303,304]]],[3,"melee_07_arm_R",8388608,41,[[4,1,-961,[305],[1],12,306,307]]],[3,"melee_07_leg_R",8388608,41,[[4,1,-962,[308],[1],12,309,310]]],[0,"Spine1_M",8388608,106,[107],[1,0.005334464367479086,-1.734723475976807e-18,4.299679912665751e-19],[3,2.1271160548415487e-31,-7.387287067052785e-18,0.014618982679226592,0.999893136962858],[1,1.2380563880610636e-17,-8.467922240252193e-16,1.6752716918878972]],[0,"Neck_M",8388608,107,[-963],[1,0.002714349888265133,-9.57567355430475e-18,8.572243914273824e-18],[3,2.334849548498401e-33,1.210279147626834e-32,-0.18942549962218294,0.9818950962770342],[1,5.66041439480744e-31,1.5216497485115417e-30,-21.83851784031204]],[6,"Head_M",8388608,465,[[5,"HeadEnd_M",8388608,-964,[1,0.002823290415108204,5.377642816887133e-19,2.8810669715948983e-19]]],[1,0.002050594659522176,-1.1102230411687688e-17,-1.1397885028539148e-18],[3,1.3712628330747433e-33,-7.748182116840672e-33,0.17427049577586698,0.9846978187759095],[1,3.2947363714137558e-31,-9.59983646203496e-31,20.07241655059164]],[0,"Scapula_R",8388608,107,[-965],[1,0.0011061389232054353,-0.0006425591418519616,-0.0028469646349549294],[3,0.011006418236851384,0.7112698310246427,-0.010875604672522158,0.7027487513007612],[1,1.7730415728863935,90.69020757969066,0.021281444783464887]],[0,"Shoulder_R",8388608,467,[-966],[1,0.0047096810303628445,2.9599587517625207e-16,0],[3,-0.027689870881989053,0.6677426800740703,-0.04203639618045591,0.7426883098946666],[1,0.8642729059348379,83.95977552661904,-5.705732022271162]],[0,"Elbow_R",8388608,468,[-967],[1,0.005175452213734388,-5.773159516292577e-17,-2.2204459996194763e-18],[3,1.736215335978658e-18,-6.995885153988026e-18,0.12233098131469163,0.9924893606535964],[1,3.046483873894846e-16,-8.45285960744512e-16,14.053298599928233]],[6,"Wrist_R",8388608,469,[[5,"Cup_R",8388608,-968,[1,0.0033151672687381506,5.329070399086743e-17,-2.2204459996194763e-18]]],[1,0.005389300640672445,-6.328271160954053e-17,-6.661337998858429e-18],[3,-0.004768474014740153,0.012352902409124579,0.0011546335850644365,0.999911663237771],[1,-0.5480227017072393,1.4161918210299922,0.12554971732357223]],[0,"Scapula_L",8388608,107,[-969],[1,0.0011061389232054353,-0.0006425591418519616,0.0032227779738605022],[3,0.7112698310319335,-0.011006417305641662,-0.7027487513079647,-0.010875604672633637],[1,-178.2269585021126,89.30979241912084,-0.021281368875969202]],[0,"Shoulder_L",8388608,471,[-970],[1,-0.0035574783105403185,1.713056474450525e-9,0.000013887167369830422],[3,-0.03416188434654197,0.6426382066489487,-0.04061436654192732,0.7643294932444482],[1,-0.0012206380677393302,80.11329981341834,-6.08437942527354]],[0,"Elbow_L",8388608,472,[-971],[1,-0.005175452213734388,2.5535130029599743e-17,0],[3,-2.4193042033980414e-18,-3.69900388416738e-17,0.12233098131469163,0.9924893606535964],[1,2.5088938608155047e-16,-4.301746631616259e-15,14.053298599928233]],[6,"Wrist_L",8388608,473,[[5,"Cup_L",8388608,-972,[1,-0.0033151672687381506,-1.412758841187159e-16,0]]],[1,-0.005389300640672445,5.1625371042116473e-17,1.776356799695581e-17],[3,-0.004768474014740153,0.012352902409124579,0.0011546335850644365,0.999911663237771],[1,-0.5480227017072393,1.4161918210299922,0.12554971732357223]],[0,"Hip_R",8388608,106,[-973],[1,-0.0005149218486621976,-0.000035732064134208485,-0.0025951904244720936],[3,-0.0013684586941045457,0.9999846538917857,-0.00017622552207276294,0.0053654679472844545],[1,0.019352340864127352,179.38518562853085,-0.1569199549416445]],[0,"Knee_R",8388608,475,[-974],[1,0.008524451404809952,1.2628998541375225e-11,-1.1102229998097382e-18],[3,3.403632747743931e-20,-9.107188358042246e-19,-0.03350002364301262,0.9994387166884808],[1,4.029053682243933e-19,-1.0440579512036528e-16,-3.839538319810826]],[0,"Ankle_R",8388608,476,[-975],[1,0.007810377050191164,1.1571134675425476e-11,-8.311684436687009e-15],[3,0.0005231972268350271,0.005401740730554813,0.05058017697477186,0.998705258401568],[1,0.028714477331547906,0.6183360190684839,5.79877519893503]],[6,"Toes_R",8388608,477,[[5,"ToesEnd_R",8388608,-976,[1,0.0019366915803402662,-1.9886869822718998e-16,3.063116871260263e-9]]],[1,0.002095116302371025,0.002573760924860835,-1.1551194029069123e-11],[3,-0.0005855765799607817,0.0005394552157793537,0.6775491861260131,0.7354770332703235],[1,-1.1144865141882583,1.1107462304259765,85.3039958375585]],[0,"Hip_L",8388608,106,[-977],[1,-0.0005149218486621976,-0.000035732064134208485,0.0025951904244720936],[3,0.9999846538908325,0.0013684593925951528,-0.00536546794727934,-0.00017622550752068012],[1,-179.9806476612328,0.6148143714585114,0.15692003497274723]],[0,"Knee_L",8388608,479,[-978],[1,-0.008524451404809952,-1.2628998541375225e-11,4.6312953641644995e-15],[3,4.9250421584690475e-20,1.2367185778725194e-18,-0.03350002364301262,0.9994387166884808],[1,1.0411423292578889e-17,1.42146077062345e-16,-3.839538319810826]],[0,"Ankle_L",8388608,480,[-979],[1,-0.007810377050191164,-1.1571218809514061e-11,1.2550515978587175e-14],[3,0.0005231972268350271,0.005401740730554813,0.05058017697477186,0.998705258401568],[1,0.028714477331547906,0.6183360190684839,5.79877519893503]],[6,"Toes_L",8388608,481,[[5,"ToesEnd_L",8388608,-980,[1,-0.0019366915803402662,2.7755574995243454e-19,1.6754419032705137e-11]]],[1,-0.002095116302371025,-0.002573760924860835,8.517709974842358e-12],[3,-0.0005849927574888355,0.0005389178429919117,0.6775491865538494,0.7354770337347383],[1,-1.1133760861696482,1.1096395693191319,85.30399759925989]],[3,"melee_07_body",8388608,42,[[4,1,-981,[319],[1],13,320,321]]],[3,"melee_07_head",8388608,42,[[4,1,-982,[322],[1],13,323,324]]],[3,"melee_07_arm_L",8388608,42,[[4,1,-983,[325],[1],13,326,327]]],[3,"melee_07_leg_L",8388608,42,[[4,1,-984,[328],[1],13,329,330]]],[3,"melee_07_arm_R",8388608,42,[[4,1,-985,[331],[1],13,332,333]]],[3,"melee_07_leg_R",8388608,42,[[4,1,-986,[334],[1],13,335,336]]],[0,"Spine1_M",8388608,109,[110],[1,0.005334464367479086,-1.734723475976807e-18,4.299679912665751e-19],[3,2.1271160548415487e-31,-7.387287067052785e-18,0.014618982679226592,0.999893136962858],[1,1.2380563880610636e-17,-8.467922240252193e-16,1.6752716918878972]],[0,"Neck_M",8388608,110,[-987],[1,0.002714349888265133,-9.57567355430475e-18,8.572243914273824e-18],[3,2.334849548498401e-33,1.210279147626834e-32,-0.18942549962218294,0.9818950962770342],[1,5.66041439480744e-31,1.5216497485115417e-30,-21.83851784031204]],[6,"Head_M",8388608,490,[[5,"HeadEnd_M",8388608,-988,[1,0.002823290415108204,5.377642816887133e-19,2.8810669715948983e-19]]],[1,0.002050594659522176,-1.1102230411687688e-17,-1.1397885028539148e-18],[3,1.3712628330747433e-33,-7.748182116840672e-33,0.17427049577586698,0.9846978187759095],[1,3.2947363714137558e-31,-9.59983646203496e-31,20.07241655059164]],[0,"Scapula_R",8388608,110,[-989],[1,0.0011061389232054353,-0.0006425591418519616,-0.0028469646349549294],[3,0.011006418236851384,0.7112698310246427,-0.010875604672522158,0.7027487513007612],[1,1.7730415728863935,90.69020757969066,0.021281444783464887]],[0,"Shoulder_R",8388608,492,[-990],[1,0.0047096810303628445,2.9599587517625207e-16,0],[3,-0.027689870881989053,0.6677426800740703,-0.04203639618045591,0.7426883098946666],[1,0.8642729059348379,83.95977552661904,-5.705732022271162]],[0,"Elbow_R",8388608,493,[-991],[1,0.005175452213734388,-5.773159516292577e-17,-2.2204459996194763e-18],[3,1.736215335978658e-18,-6.995885153988026e-18,0.12233098131469163,0.9924893606535964],[1,3.046483873894846e-16,-8.45285960744512e-16,14.053298599928233]],[6,"Wrist_R",8388608,494,[[5,"Cup_R",8388608,-992,[1,0.0033151672687381506,5.329070399086743e-17,-2.2204459996194763e-18]]],[1,0.005389300640672445,-6.328271160954053e-17,-6.661337998858429e-18],[3,-0.004768474014740153,0.012352902409124579,0.0011546335850644365,0.999911663237771],[1,-0.5480227017072393,1.4161918210299922,0.12554971732357223]],[0,"Scapula_L",8388608,110,[-993],[1,0.0011061389232054353,-0.0006425591418519616,0.0032227779738605022],[3,0.7112698310319335,-0.011006417305641662,-0.7027487513079647,-0.010875604672633637],[1,-178.2269585021126,89.30979241912084,-0.021281368875969202]],[0,"Shoulder_L",8388608,496,[-994],[1,-0.0035574783105403185,1.713056474450525e-9,0.000013887167369830422],[3,-0.03416188434654197,0.6426382066489487,-0.04061436654192732,0.7643294932444482],[1,-0.0012206380677393302,80.11329981341834,-6.08437942527354]],[0,"Elbow_L",8388608,497,[-995],[1,-0.005175452213734388,2.5535130029599743e-17,0],[3,-2.4193042033980414e-18,-3.69900388416738e-17,0.12233098131469163,0.9924893606535964],[1,2.5088938608155047e-16,-4.301746631616259e-15,14.053298599928233]],[6,"Wrist_L",8388608,498,[[5,"Cup_L",8388608,-996,[1,-0.0033151672687381506,-1.412758841187159e-16,0]]],[1,-0.005389300640672445,5.1625371042116473e-17,1.776356799695581e-17],[3,-0.004768474014740153,0.012352902409124579,0.0011546335850644365,0.999911663237771],[1,-0.5480227017072393,1.4161918210299922,0.12554971732357223]],[0,"Hip_R",8388608,109,[-997],[1,-0.0005149218486621976,-0.000035732064134208485,-0.0025951904244720936],[3,-0.0013684586941045457,0.9999846538917857,-0.00017622552207276294,0.0053654679472844545],[1,0.019352340864127352,179.38518562853085,-0.1569199549416445]],[0,"Knee_R",8388608,500,[-998],[1,0.008524451404809952,1.2628998541375225e-11,-1.1102229998097382e-18],[3,3.403632747743931e-20,-9.107188358042246e-19,-0.03350002364301262,0.9994387166884808],[1,4.029053682243933e-19,-1.0440579512036528e-16,-3.839538319810826]],[0,"Ankle_R",8388608,501,[-999],[1,0.007810377050191164,1.1571134675425476e-11,-8.311684436687009e-15],[3,0.0005231972268350271,0.005401740730554813,0.05058017697477186,0.998705258401568],[1,0.028714477331547906,0.6183360190684839,5.79877519893503]],[6,"Toes_R",8388608,502,[[5,"ToesEnd_R",8388608,-1000,[1,0.0019366915803402662,-1.9886869822718998e-16,3.063116871260263e-9]]],[1,0.002095116302371025,0.002573760924860835,-1.1551194029069123e-11],[3,-0.0005855765799607817,0.0005394552157793537,0.6775491861260131,0.7354770332703235],[1,-1.1144865141882583,1.1107462304259765,85.3039958375585]],[0,"Hip_L",8388608,109,[-1001],[1,-0.0005149218486621976,-0.000035732064134208485,0.0025951904244720936],[3,0.9999846538908325,0.0013684593925951528,-0.00536546794727934,-0.00017622550752068012],[1,-179.9806476612328,0.6148143714585114,0.15692003497274723]],[0,"Knee_L",8388608,504,[-1002],[1,-0.008524451404809952,-1.2628998541375225e-11,4.6312953641644995e-15],[3,4.9250421584690475e-20,1.2367185778725194e-18,-0.03350002364301262,0.9994387166884808],[1,1.0411423292578889e-17,1.42146077062345e-16,-3.839538319810826]],[0,"Ankle_L",8388608,505,[-1003],[1,-0.007810377050191164,-1.1571218809514061e-11,1.2550515978587175e-14],[3,0.0005231972268350271,0.005401740730554813,0.05058017697477186,0.998705258401568],[1,0.028714477331547906,0.6183360190684839,5.79877519893503]],[6,"Toes_L",8388608,506,[[5,"ToesEnd_L",8388608,-1004,[1,-0.0019366915803402662,2.7755574995243454e-19,1.6754419032705137e-11]]],[1,-0.002095116302371025,-0.002573760924860835,8.517709974842358e-12],[3,-0.0005849927574888355,0.0005389178429919117,0.6775491865538494,0.7354770337347383],[1,-1.1133760861696482,1.1096395693191319,85.30399759925989]],[3,"melee_07_body",8388608,43,[[4,1,-1005,[345],[1],14,346,347]]],[3,"melee_07_head",8388608,43,[[4,1,-1006,[348],[1],14,349,350]]],[3,"melee_07_arm_L",8388608,43,[[4,1,-1007,[351],[1],14,352,353]]],[3,"melee_07_leg_L",8388608,43,[[4,1,-1008,[354],[1],14,355,356]]],[3,"melee_07_arm_R",8388608,43,[[4,1,-1009,[357],[1],14,358,359]]],[3,"melee_07_leg_R",8388608,43,[[4,1,-1010,[360],[1],14,361,362]]],[0,"Spine1_M",8388608,112,[113],[1,0.005334464367479086,-1.734723475976807e-18,4.299679912665751e-19],[3,2.1271160548415487e-31,-7.387287067052785e-18,0.014618982679226592,0.999893136962858],[1,1.2380563880610636e-17,-8.467922240252193e-16,1.6752716918878972]],[0,"Neck_M",8388608,113,[-1011],[1,0.002714349888265133,-9.57567355430475e-18,8.572243914273824e-18],[3,2.334849548498401e-33,1.210279147626834e-32,-0.18942549962218294,0.9818950962770342],[1,5.66041439480744e-31,1.5216497485115417e-30,-21.83851784031204]],[6,"Head_M",8388608,515,[[5,"HeadEnd_M",8388608,-1012,[1,0.002823290415108204,5.377642816887133e-19,2.8810669715948983e-19]]],[1,0.002050594659522176,-1.1102230411687688e-17,-1.1397885028539148e-18],[3,1.3712628330747433e-33,-7.748182116840672e-33,0.17427049577586698,0.9846978187759095],[1,3.2947363714137558e-31,-9.59983646203496e-31,20.07241655059164]],[0,"Scapula_R",8388608,113,[-1013],[1,0.0011061389232054353,-0.0006425591418519616,-0.0028469646349549294],[3,0.011006418236851384,0.7112698310246427,-0.010875604672522158,0.7027487513007612],[1,1.7730415728863935,90.69020757969066,0.021281444783464887]],[0,"Shoulder_R",8388608,517,[-1014],[1,0.0047096810303628445,2.9599587517625207e-16,0],[3,-0.027689870881989053,0.6677426800740703,-0.04203639618045591,0.7426883098946666],[1,0.8642729059348379,83.95977552661904,-5.705732022271162]],[0,"Elbow_R",8388608,518,[-1015],[1,0.005175452213734388,-5.773159516292577e-17,-2.2204459996194763e-18],[3,1.736215335978658e-18,-6.995885153988026e-18,0.12233098131469163,0.9924893606535964],[1,3.046483873894846e-16,-8.45285960744512e-16,14.053298599928233]],[6,"Wrist_R",8388608,519,[[5,"Cup_R",8388608,-1016,[1,0.0033151672687381506,5.329070399086743e-17,-2.2204459996194763e-18]]],[1,0.005389300640672445,-6.328271160954053e-17,-6.661337998858429e-18],[3,-0.004768474014740153,0.012352902409124579,0.0011546335850644365,0.999911663237771],[1,-0.5480227017072393,1.4161918210299922,0.12554971732357223]],[0,"Scapula_L",8388608,113,[-1017],[1,0.0011061389232054353,-0.0006425591418519616,0.0032227779738605022],[3,0.7112698310319335,-0.011006417305641662,-0.7027487513079647,-0.010875604672633637],[1,-178.2269585021126,89.30979241912084,-0.021281368875969202]],[0,"Shoulder_L",8388608,521,[-1018],[1,-0.0035574783105403185,1.713056474450525e-9,0.000013887167369830422],[3,-0.03416188434654197,0.6426382066489487,-0.04061436654192732,0.7643294932444482],[1,-0.0012206380677393302,80.11329981341834,-6.08437942527354]],[0,"Elbow_L",8388608,522,[-1019],[1,-0.005175452213734388,2.5535130029599743e-17,0],[3,-2.4193042033980414e-18,-3.69900388416738e-17,0.12233098131469163,0.9924893606535964],[1,2.5088938608155047e-16,-4.301746631616259e-15,14.053298599928233]],[6,"Wrist_L",8388608,523,[[5,"Cup_L",8388608,-1020,[1,-0.0033151672687381506,-1.412758841187159e-16,0]]],[1,-0.005389300640672445,5.1625371042116473e-17,1.776356799695581e-17],[3,-0.004768474014740153,0.012352902409124579,0.0011546335850644365,0.999911663237771],[1,-0.5480227017072393,1.4161918210299922,0.12554971732357223]],[0,"Hip_R",8388608,112,[-1021],[1,-0.0005149218486621976,-0.000035732064134208485,-0.0025951904244720936],[3,-0.0013684586941045457,0.9999846538917857,-0.00017622552207276294,0.0053654679472844545],[1,0.019352340864127352,179.38518562853085,-0.1569199549416445]],[0,"Knee_R",8388608,525,[-1022],[1,0.008524451404809952,1.2628998541375225e-11,-1.1102229998097382e-18],[3,3.403632747743931e-20,-9.107188358042246e-19,-0.03350002364301262,0.9994387166884808],[1,4.029053682243933e-19,-1.0440579512036528e-16,-3.839538319810826]],[0,"Ankle_R",8388608,526,[-1023],[1,0.007810377050191164,1.1571134675425476e-11,-8.311684436687009e-15],[3,0.0005231972268350271,0.005401740730554813,0.05058017697477186,0.998705258401568],[1,0.028714477331547906,0.6183360190684839,5.79877519893503]],[6,"Toes_R",8388608,527,[[5,"ToesEnd_R",8388608,-1024,[1,0.0019366915803402662,-1.9886869822718998e-16,3.063116871260263e-9]]],[1,0.002095116302371025,0.002573760924860835,-1.1551194029069123e-11],[3,-0.0005855765799607817,0.0005394552157793537,0.6775491861260131,0.7354770332703235],[1,-1.1144865141882583,1.1107462304259765,85.3039958375585]],[0,"Hip_L",8388608,112,[-1025],[1,-0.0005149218486621976,-0.000035732064134208485,0.0025951904244720936],[3,0.9999846538908325,0.0013684593925951528,-0.00536546794727934,-0.00017622550752068012],[1,-179.9806476612328,0.6148143714585114,0.15692003497274723]],[0,"Knee_L",8388608,529,[-1026],[1,-0.008524451404809952,-1.2628998541375225e-11,4.6312953641644995e-15],[3,4.9250421584690475e-20,1.2367185778725194e-18,-0.03350002364301262,0.9994387166884808],[1,1.0411423292578889e-17,1.42146077062345e-16,-3.839538319810826]],[0,"Ankle_L",8388608,530,[-1027],[1,-0.007810377050191164,-1.1571218809514061e-11,1.2550515978587175e-14],[3,0.0005231972268350271,0.005401740730554813,0.05058017697477186,0.998705258401568],[1,0.028714477331547906,0.6183360190684839,5.79877519893503]],[6,"Toes_L",8388608,531,[[5,"ToesEnd_L",8388608,-1028,[1,-0.0019366915803402662,2.7755574995243454e-19,1.6754419032705137e-11]]],[1,-0.002095116302371025,-0.002573760924860835,8.517709974842358e-12],[3,-0.0005849927574888355,0.0005389178429919117,0.6775491865538494,0.7354770337347383],[1,-1.1133760861696482,1.1096395693191319,85.30399759925989]],[3,"melee_07_body",8388608,44,[[4,1,-1029,[371],[1],15,372,373]]],[3,"melee_07_head",8388608,44,[[4,1,-1030,[374],[1],15,375,376]]],[3,"melee_07_arm_L",8388608,44,[[4,1,-1031,[377],[1],15,378,379]]],[3,"melee_07_leg_L",8388608,44,[[4,1,-1032,[380],[1],15,381,382]]],[3,"melee_07_arm_R",8388608,44,[[4,1,-1033,[383],[1],15,384,385]]],[3,"melee_07_leg_R",8388608,44,[[4,1,-1034,[386],[1],15,387,388]]],[0,"Spine1_M",8388608,115,[116],[1,0.005334464367479086,-1.734723475976807e-18,4.299679912665751e-19],[3,2.1271160548415487e-31,-7.387287067052785e-18,0.014618982679226592,0.999893136962858],[1,1.2380563880610636e-17,-8.467922240252193e-16,1.6752716918878972]],[0,"Neck_M",8388608,116,[-1035],[1,0.002714349888265133,-9.57567355430475e-18,8.572243914273824e-18],[3,2.334849548498401e-33,1.210279147626834e-32,-0.18942549962218294,0.9818950962770342],[1,5.66041439480744e-31,1.5216497485115417e-30,-21.83851784031204]],[6,"Head_M",8388608,540,[[5,"HeadEnd_M",8388608,-1036,[1,0.002823290415108204,5.377642816887133e-19,2.8810669715948983e-19]]],[1,0.002050594659522176,-1.1102230411687688e-17,-1.1397885028539148e-18],[3,1.3712628330747433e-33,-7.748182116840672e-33,0.17427049577586698,0.9846978187759095],[1,3.2947363714137558e-31,-9.59983646203496e-31,20.07241655059164]],[0,"Scapula_R",8388608,116,[-1037],[1,0.0011061389232054353,-0.0006425591418519616,-0.0028469646349549294],[3,0.011006418236851384,0.7112698310246427,-0.010875604672522158,0.7027487513007612],[1,1.7730415728863935,90.69020757969066,0.021281444783464887]],[0,"Shoulder_R",8388608,542,[-1038],[1,0.0047096810303628445,2.9599587517625207e-16,0],[3,-0.027689870881989053,0.6677426800740703,-0.04203639618045591,0.7426883098946666],[1,0.8642729059348379,83.95977552661904,-5.705732022271162]],[0,"Elbow_R",8388608,543,[-1039],[1,0.005175452213734388,-5.773159516292577e-17,-2.2204459996194763e-18],[3,1.736215335978658e-18,-6.995885153988026e-18,0.12233098131469163,0.9924893606535964],[1,3.046483873894846e-16,-8.45285960744512e-16,14.053298599928233]],[6,"Wrist_R",8388608,544,[[5,"Cup_R",8388608,-1040,[1,0.0033151672687381506,5.329070399086743e-17,-2.2204459996194763e-18]]],[1,0.005389300640672445,-6.328271160954053e-17,-6.661337998858429e-18],[3,-0.004768474014740153,0.012352902409124579,0.0011546335850644365,0.999911663237771],[1,-0.5480227017072393,1.4161918210299922,0.12554971732357223]],[0,"Scapula_L",8388608,116,[-1041],[1,0.0011061389232054353,-0.0006425591418519616,0.0032227779738605022],[3,0.7112698310319335,-0.011006417305641662,-0.7027487513079647,-0.010875604672633637],[1,-178.2269585021126,89.30979241912084,-0.021281368875969202]],[0,"Shoulder_L",8388608,546,[-1042],[1,-0.0035574783105403185,1.713056474450525e-9,0.000013887167369830422],[3,-0.03416188434654197,0.6426382066489487,-0.04061436654192732,0.7643294932444482],[1,-0.0012206380677393302,80.11329981341834,-6.08437942527354]],[0,"Elbow_L",8388608,547,[-1043],[1,-0.005175452213734388,2.5535130029599743e-17,0],[3,-2.4193042033980414e-18,-3.69900388416738e-17,0.12233098131469163,0.9924893606535964],[1,2.5088938608155047e-16,-4.301746631616259e-15,14.053298599928233]],[6,"Wrist_L",8388608,548,[[5,"Cup_L",8388608,-1044,[1,-0.0033151672687381506,-1.412758841187159e-16,0]]],[1,-0.005389300640672445,5.1625371042116473e-17,1.776356799695581e-17],[3,-0.004768474014740153,0.012352902409124579,0.0011546335850644365,0.999911663237771],[1,-0.5480227017072393,1.4161918210299922,0.12554971732357223]],[0,"Hip_R",8388608,115,[-1045],[1,-0.0005149218486621976,-0.000035732064134208485,-0.0025951904244720936],[3,-0.0013684586941045457,0.9999846538917857,-0.00017622552207276294,0.0053654679472844545],[1,0.019352340864127352,179.38518562853085,-0.1569199549416445]],[0,"Knee_R",8388608,550,[-1046],[1,0.008524451404809952,1.2628998541375225e-11,-1.1102229998097382e-18],[3,3.403632747743931e-20,-9.107188358042246e-19,-0.03350002364301262,0.9994387166884808],[1,4.029053682243933e-19,-1.0440579512036528e-16,-3.839538319810826]],[0,"Ankle_R",8388608,551,[-1047],[1,0.007810377050191164,1.1571134675425476e-11,-8.311684436687009e-15],[3,0.0005231972268350271,0.005401740730554813,0.05058017697477186,0.998705258401568],[1,0.028714477331547906,0.6183360190684839,5.79877519893503]],[6,"Toes_R",8388608,552,[[5,"ToesEnd_R",8388608,-1048,[1,0.0019366915803402662,-1.9886869822718998e-16,3.063116871260263e-9]]],[1,0.002095116302371025,0.002573760924860835,-1.1551194029069123e-11],[3,-0.0005855765799607817,0.0005394552157793537,0.6775491861260131,0.7354770332703235],[1,-1.1144865141882583,1.1107462304259765,85.3039958375585]],[0,"Hip_L",8388608,115,[-1049],[1,-0.0005149218486621976,-0.000035732064134208485,0.0025951904244720936],[3,0.9999846538908325,0.0013684593925951528,-0.00536546794727934,-0.00017622550752068012],[1,-179.9806476612328,0.6148143714585114,0.15692003497274723]],[0,"Knee_L",8388608,554,[-1050],[1,-0.008524451404809952,-1.2628998541375225e-11,4.6312953641644995e-15],[3,4.9250421584690475e-20,1.2367185778725194e-18,-0.03350002364301262,0.9994387166884808],[1,1.0411423292578889e-17,1.42146077062345e-16,-3.839538319810826]],[0,"Ankle_L",8388608,555,[-1051],[1,-0.007810377050191164,-1.1571218809514061e-11,1.2550515978587175e-14],[3,0.0005231972268350271,0.005401740730554813,0.05058017697477186,0.998705258401568],[1,0.028714477331547906,0.6183360190684839,5.79877519893503]],[6,"Toes_L",8388608,556,[[5,"ToesEnd_L",8388608,-1052,[1,-0.0019366915803402662,2.7755574995243454e-19,1.6754419032705137e-11]]],[1,-0.002095116302371025,-0.002573760924860835,8.517709974842358e-12],[3,-0.0005849927574888355,0.0005389178429919117,0.6775491865538494,0.7354770337347383],[1,-1.1133760861696482,1.1096395693191319,85.30399759925989]],[3,"melee_07_body",8388608,45,[[4,1,-1053,[397],[1],16,398,399]]],[3,"melee_07_head",8388608,45,[[4,1,-1054,[400],[1],16,401,402]]],[3,"melee_07_arm_L",8388608,45,[[4,1,-1055,[403],[1],16,404,405]]],[3,"melee_07_leg_L",8388608,45,[[4,1,-1056,[406],[1],16,407,408]]],[3,"melee_07_arm_R",8388608,45,[[4,1,-1057,[409],[1],16,410,411]]],[3,"melee_07_leg_R",8388608,45,[[4,1,-1058,[412],[1],16,413,414]]],[0,"Spine1_M",8388608,118,[119],[1,0.005334464367479086,-1.734723475976807e-18,4.299679912665751e-19],[3,2.1271160548415487e-31,-7.387287067052785e-18,0.014618982679226592,0.999893136962858],[1,1.2380563880610636e-17,-8.467922240252193e-16,1.6752716918878972]],[0,"Neck_M",8388608,119,[-1059],[1,0.002714349888265133,-9.57567355430475e-18,8.572243914273824e-18],[3,2.334849548498401e-33,1.210279147626834e-32,-0.18942549962218294,0.9818950962770342],[1,5.66041439480744e-31,1.5216497485115417e-30,-21.83851784031204]],[6,"Head_M",8388608,565,[[5,"HeadEnd_M",8388608,-1060,[1,0.002823290415108204,5.377642816887133e-19,2.8810669715948983e-19]]],[1,0.002050594659522176,-1.1102230411687688e-17,-1.1397885028539148e-18],[3,1.3712628330747433e-33,-7.748182116840672e-33,0.17427049577586698,0.9846978187759095],[1,3.2947363714137558e-31,-9.59983646203496e-31,20.07241655059164]],[0,"Scapula_R",8388608,119,[-1061],[1,0.0011061389232054353,-0.0006425591418519616,-0.0028469646349549294],[3,0.011006418236851384,0.7112698310246427,-0.010875604672522158,0.7027487513007612],[1,1.7730415728863935,90.69020757969066,0.021281444783464887]],[0,"Shoulder_R",8388608,567,[-1062],[1,0.0047096810303628445,2.9599587517625207e-16,0],[3,-0.027689870881989053,0.6677426800740703,-0.04203639618045591,0.7426883098946666],[1,0.8642729059348379,83.95977552661904,-5.705732022271162]],[0,"Elbow_R",8388608,568,[-1063],[1,0.005175452213734388,-5.773159516292577e-17,-2.2204459996194763e-18],[3,1.736215335978658e-18,-6.995885153988026e-18,0.12233098131469163,0.9924893606535964],[1,3.046483873894846e-16,-8.45285960744512e-16,14.053298599928233]],[6,"Wrist_R",8388608,569,[[5,"Cup_R",8388608,-1064,[1,0.0033151672687381506,5.329070399086743e-17,-2.2204459996194763e-18]]],[1,0.005389300640672445,-6.328271160954053e-17,-6.661337998858429e-18],[3,-0.004768474014740153,0.012352902409124579,0.0011546335850644365,0.999911663237771],[1,-0.5480227017072393,1.4161918210299922,0.12554971732357223]],[0,"Scapula_L",8388608,119,[-1065],[1,0.0011061389232054353,-0.0006425591418519616,0.0032227779738605022],[3,0.7112698310319335,-0.011006417305641662,-0.7027487513079647,-0.010875604672633637],[1,-178.2269585021126,89.30979241912084,-0.021281368875969202]],[0,"Shoulder_L",8388608,571,[-1066],[1,-0.0035574783105403185,1.713056474450525e-9,0.000013887167369830422],[3,-0.03416188434654197,0.6426382066489487,-0.04061436654192732,0.7643294932444482],[1,-0.0012206380677393302,80.11329981341834,-6.08437942527354]],[0,"Elbow_L",8388608,572,[-1067],[1,-0.005175452213734388,2.5535130029599743e-17,0],[3,-2.4193042033980414e-18,-3.69900388416738e-17,0.12233098131469163,0.9924893606535964],[1,2.5088938608155047e-16,-4.301746631616259e-15,14.053298599928233]],[6,"Wrist_L",8388608,573,[[5,"Cup_L",8388608,-1068,[1,-0.0033151672687381506,-1.412758841187159e-16,0]]],[1,-0.005389300640672445,5.1625371042116473e-17,1.776356799695581e-17],[3,-0.004768474014740153,0.012352902409124579,0.0011546335850644365,0.999911663237771],[1,-0.5480227017072393,1.4161918210299922,0.12554971732357223]],[0,"Hip_R",8388608,118,[-1069],[1,-0.0005149218486621976,-0.000035732064134208485,-0.0025951904244720936],[3,-0.0013684586941045457,0.9999846538917857,-0.00017622552207276294,0.0053654679472844545],[1,0.019352340864127352,179.38518562853085,-0.1569199549416445]],[0,"Knee_R",8388608,575,[-1070],[1,0.008524451404809952,1.2628998541375225e-11,-1.1102229998097382e-18],[3,3.403632747743931e-20,-9.107188358042246e-19,-0.03350002364301262,0.9994387166884808],[1,4.029053682243933e-19,-1.0440579512036528e-16,-3.839538319810826]],[0,"Ankle_R",8388608,576,[-1071],[1,0.007810377050191164,1.1571134675425476e-11,-8.311684436687009e-15],[3,0.0005231972268350271,0.005401740730554813,0.05058017697477186,0.998705258401568],[1,0.028714477331547906,0.6183360190684839,5.79877519893503]],[6,"Toes_R",8388608,577,[[5,"ToesEnd_R",8388608,-1072,[1,0.0019366915803402662,-1.9886869822718998e-16,3.063116871260263e-9]]],[1,0.002095116302371025,0.002573760924860835,-1.1551194029069123e-11],[3,-0.0005855765799607817,0.0005394552157793537,0.6775491861260131,0.7354770332703235],[1,-1.1144865141882583,1.1107462304259765,85.3039958375585]],[0,"Hip_L",8388608,118,[-1073],[1,-0.0005149218486621976,-0.000035732064134208485,0.0025951904244720936],[3,0.9999846538908325,0.0013684593925951528,-0.00536546794727934,-0.00017622550752068012],[1,-179.9806476612328,0.6148143714585114,0.15692003497274723]],[0,"Knee_L",8388608,579,[-1074],[1,-0.008524451404809952,-1.2628998541375225e-11,4.6312953641644995e-15],[3,4.9250421584690475e-20,1.2367185778725194e-18,-0.03350002364301262,0.9994387166884808],[1,1.0411423292578889e-17,1.42146077062345e-16,-3.839538319810826]],[0,"Ankle_L",8388608,580,[-1075],[1,-0.007810377050191164,-1.1571218809514061e-11,1.2550515978587175e-14],[3,0.0005231972268350271,0.005401740730554813,0.05058017697477186,0.998705258401568],[1,0.028714477331547906,0.6183360190684839,5.79877519893503]],[6,"Toes_L",8388608,581,[[5,"ToesEnd_L",8388608,-1076,[1,-0.0019366915803402662,2.7755574995243454e-19,1.6754419032705137e-11]]],[1,-0.002095116302371025,-0.002573760924860835,8.517709974842358e-12],[3,-0.0005849927574888355,0.0005389178429919117,0.6775491865538494,0.7354770337347383],[1,-1.1133760861696482,1.1096395693191319,85.30399759925989]],[3,"melee_07_body",8388608,46,[[4,1,-1077,[423],[1],17,424,425]]],[3,"melee_07_head",8388608,46,[[4,1,-1078,[426],[1],17,427,428]]],[3,"melee_07_arm_L",8388608,46,[[4,1,-1079,[429],[1],17,430,431]]],[3,"melee_07_leg_L",8388608,46,[[4,1,-1080,[432],[1],17,433,434]]],[3,"melee_07_arm_R",8388608,46,[[4,1,-1081,[435],[1],17,436,437]]],[3,"melee_07_leg_R",8388608,46,[[4,1,-1082,[438],[1],17,439,440]]],[0,"Spine1_M",8388608,121,[122],[1,0.005334464367479086,-1.734723475976807e-18,4.299679912665751e-19],[3,2.1271160548415487e-31,-7.387287067052785e-18,0.014618982679226592,0.999893136962858],[1,1.2380563880610636e-17,-8.467922240252193e-16,1.6752716918878972]],[0,"Neck_M",8388608,122,[-1083],[1,0.002714349888265133,-9.57567355430475e-18,8.572243914273824e-18],[3,2.334849548498401e-33,1.210279147626834e-32,-0.18942549962218294,0.9818950962770342],[1,5.66041439480744e-31,1.5216497485115417e-30,-21.83851784031204]],[6,"Head_M",8388608,590,[[5,"HeadEnd_M",8388608,-1084,[1,0.002823290415108204,5.377642816887133e-19,2.8810669715948983e-19]]],[1,0.002050594659522176,-1.1102230411687688e-17,-1.1397885028539148e-18],[3,1.3712628330747433e-33,-7.748182116840672e-33,0.17427049577586698,0.9846978187759095],[1,3.2947363714137558e-31,-9.59983646203496e-31,20.07241655059164]],[0,"Scapula_R",8388608,122,[-1085],[1,0.0011061389232054353,-0.0006425591418519616,-0.0028469646349549294],[3,0.011006418236851384,0.7112698310246427,-0.010875604672522158,0.7027487513007612],[1,1.7730415728863935,90.69020757969066,0.021281444783464887]],[0,"Shoulder_R",8388608,592,[-1086],[1,0.0047096810303628445,2.9599587517625207e-16,0],[3,-0.027689870881989053,0.6677426800740703,-0.04203639618045591,0.7426883098946666],[1,0.8642729059348379,83.95977552661904,-5.705732022271162]],[0,"Elbow_R",8388608,593,[-1087],[1,0.005175452213734388,-5.773159516292577e-17,-2.2204459996194763e-18],[3,1.736215335978658e-18,-6.995885153988026e-18,0.12233098131469163,0.9924893606535964],[1,3.046483873894846e-16,-8.45285960744512e-16,14.053298599928233]],[6,"Wrist_R",8388608,594,[[5,"Cup_R",8388608,-1088,[1,0.0033151672687381506,5.329070399086743e-17,-2.2204459996194763e-18]]],[1,0.005389300640672445,-6.328271160954053e-17,-6.661337998858429e-18],[3,-0.004768474014740153,0.012352902409124579,0.0011546335850644365,0.999911663237771],[1,-0.5480227017072393,1.4161918210299922,0.12554971732357223]],[0,"Scapula_L",8388608,122,[-1089],[1,0.0011061389232054353,-0.0006425591418519616,0.0032227779738605022],[3,0.7112698310319335,-0.011006417305641662,-0.7027487513079647,-0.010875604672633637],[1,-178.2269585021126,89.30979241912084,-0.021281368875969202]],[0,"Shoulder_L",8388608,596,[-1090],[1,-0.0035574783105403185,1.713056474450525e-9,0.000013887167369830422],[3,-0.03416188434654197,0.6426382066489487,-0.04061436654192732,0.7643294932444482],[1,-0.0012206380677393302,80.11329981341834,-6.08437942527354]],[0,"Elbow_L",8388608,597,[-1091],[1,-0.005175452213734388,2.5535130029599743e-17,0],[3,-2.4193042033980414e-18,-3.69900388416738e-17,0.12233098131469163,0.9924893606535964],[1,2.5088938608155047e-16,-4.301746631616259e-15,14.053298599928233]],[6,"Wrist_L",8388608,598,[[5,"Cup_L",8388608,-1092,[1,-0.0033151672687381506,-1.412758841187159e-16,0]]],[1,-0.005389300640672445,5.1625371042116473e-17,1.776356799695581e-17],[3,-0.004768474014740153,0.012352902409124579,0.0011546335850644365,0.999911663237771],[1,-0.5480227017072393,1.4161918210299922,0.12554971732357223]],[0,"Hip_R",8388608,121,[-1093],[1,-0.0005149218486621976,-0.000035732064134208485,-0.0025951904244720936],[3,-0.0013684586941045457,0.9999846538917857,-0.00017622552207276294,0.0053654679472844545],[1,0.019352340864127352,179.38518562853085,-0.1569199549416445]],[0,"Knee_R",8388608,600,[-1094],[1,0.008524451404809952,1.2628998541375225e-11,-1.1102229998097382e-18],[3,3.403632747743931e-20,-9.107188358042246e-19,-0.03350002364301262,0.9994387166884808],[1,4.029053682243933e-19,-1.0440579512036528e-16,-3.839538319810826]],[0,"Ankle_R",8388608,601,[-1095],[1,0.007810377050191164,1.1571134675425476e-11,-8.311684436687009e-15],[3,0.0005231972268350271,0.005401740730554813,0.05058017697477186,0.998705258401568],[1,0.028714477331547906,0.6183360190684839,5.79877519893503]],[6,"Toes_R",8388608,602,[[5,"ToesEnd_R",8388608,-1096,[1,0.0019366915803402662,-1.9886869822718998e-16,3.063116871260263e-9]]],[1,0.002095116302371025,0.002573760924860835,-1.1551194029069123e-11],[3,-0.0005855765799607817,0.0005394552157793537,0.6775491861260131,0.7354770332703235],[1,-1.1144865141882583,1.1107462304259765,85.3039958375585]],[0,"Hip_L",8388608,121,[-1097],[1,-0.0005149218486621976,-0.000035732064134208485,0.0025951904244720936],[3,0.9999846538908325,0.0013684593925951528,-0.00536546794727934,-0.00017622550752068012],[1,-179.9806476612328,0.6148143714585114,0.15692003497274723]],[0,"Knee_L",8388608,604,[-1098],[1,-0.008524451404809952,-1.2628998541375225e-11,4.6312953641644995e-15],[3,4.9250421584690475e-20,1.2367185778725194e-18,-0.03350002364301262,0.9994387166884808],[1,1.0411423292578889e-17,1.42146077062345e-16,-3.839538319810826]],[0,"Ankle_L",8388608,605,[-1099],[1,-0.007810377050191164,-1.1571218809514061e-11,1.2550515978587175e-14],[3,0.0005231972268350271,0.005401740730554813,0.05058017697477186,0.998705258401568],[1,0.028714477331547906,0.6183360190684839,5.79877519893503]],[6,"Toes_L",8388608,606,[[5,"ToesEnd_L",8388608,-1100,[1,-0.0019366915803402662,2.7755574995243454e-19,1.6754419032705137e-11]]],[1,-0.002095116302371025,-0.002573760924860835,8.517709974842358e-12],[3,-0.0005849927574888355,0.0005389178429919117,0.6775491865538494,0.7354770337347383],[1,-1.1133760861696482,1.1096395693191319,85.30399759925989]],[3,"melee_07_body",8388608,47,[[4,1,-1101,[449],[1],18,450,451]]],[3,"melee_07_head",8388608,47,[[4,1,-1102,[452],[1],18,453,454]]],[3,"melee_07_arm_L",8388608,47,[[4,1,-1103,[455],[1],18,456,457]]],[3,"melee_07_leg_L",8388608,47,[[4,1,-1104,[458],[1],18,459,460]]],[3,"melee_07_arm_R",8388608,47,[[4,1,-1105,[461],[1],18,462,463]]],[3,"melee_07_leg_R",8388608,47,[[4,1,-1106,[464],[1],18,465,466]]],[8,"Line",8388608,123,[[13,"Quad<ModelComponent>",-1107,[473],[1],474]],[1,0.01,0.005,0.003],[3,-0.7071067811865475,0,0,0.7071067811865476],[1,0.12,0.12,0.12],[1,-90,0,0]],[107,"Comp",8388608,27,[194],[3,-0.7071068407911907,1.54543154254125e-8,-1.545431187269876e-8,0.707106721581899],[1,9.999999046325684,9.999999046325684,9.999999046325684],[1,-90.00000965934633,7.675917777898835e-14,-0.0000025044787319857803]],[0,"spine0",8388608,194,[-1108],[1,3.7252903539730653e-10,0.003909075167030096,-0.00092517607845366],[3,-0.013759418954332359,-0.02019218487723872,0.021461381934783252,0.9994710416742307],[1,-1.5278449136403591,-2.281549172864686,2.490613936032426]],[0,"spine1",8388608,616,[124],[1,2.38418573772492e-9,0.00814820732921362,-0.0024583544582128525],[3,-0.014868528756110217,-0.017917059571555493,0.022798139868672962,0.9994689343083488],[1,-1.6580895794748667,-2.015768713908674,2.642550980417355]],[0,"spine3",8388608,124,[-1109],[1,-5.066394859198908e-9,0.007588513661175966,-0.0019066231325268745],[3,0.020843829879679646,-0.010312797462126119,0.02867264475851253,0.9993182978445878],[1,2.4254322263752033,-1.251564674977951,3.2605303745488974]],[0,"spine4",8388608,618,[125],[1,8.940696516468449e-10,0.008185500279068947,-0.0010699452832341194],[3,0.034254656149486834,-0.005485426314216125,0.05256574367670215,0.9980147149325741],[1,3.9755012009245196,-0.8382953020260973,6.001066118615762]],[0,"left arm0",8388608,125,[-1110],[1,0.013951382599771023,0.016790246590971947,0.016093119978904724],[3,-0.012916867621556222,0.00014373601880273082,-0.00014094100334092016,0.9999165535215615],[1,-1.4802028695162106,0.01626094512362714,-0.016362054691447837]],[0,"left arm1",8388608,620,[-1111],[1,0.0010551911545917392,-0.007742427755147219,0.021822387352585793],[3,-0.10235335396090298,0.001129400536059972,-0.0011684727766184703,0.9947467768526588],[1,-11.749275059688674,0.11503553126164667,-0.1464404324964447]],[0,"left hand",8388608,621,[-1112],[1,0.00009416900866199285,0.015645749866962433,0.010464519262313843],[3,0.3301397245118249,0.0005644782763280047,-0.00025354159734460773,0.9439318722133448],[1,38.5545242496592,0.07064951765266128,-0.006069833765081632]],[30,"left finger3",8388608,622,[-1113],[1,8.344650304081824e-9,0.009227232076227665,0.004294860176742077]],[0,"left finger4",8388608,623,[-1114],[1,0.00005059279646957293,0.002204132964834571,0.003155963961035013],[3,0.000007673238672860348,-0.000009594779093684764,0.7071121455309554,0.7071014166947133],[1,0,0.0012435109893833497,90]],[0,"left finger5",8388608,624,[-1115],[1,0.00042112517985515296,-0.0001340837770840153,0.005627484526485205],[3,-0.09230603438907505,0.09230350119162783,-0.7010510090251443,0.7010614398381622],[1,0,15.001533567975944,-90]],[0,"left finger5_end",8388608,625,[-1116],[1,-8.940696516468449e-10,0.0056448024697601795,8.940696516468449e-10],[3,0.0000019192621039034926,-0.0000020400616449398495,-5.30853654365919e-8,0.999999999996076],[1,0.0002199312242558464,-0.00023377383272774185,-0.000006083583460109329]],[6,"left finger5_end_end",8388608,626,[[5,"left finger5_end_end_end",8388608,-1117,[1,1.1175871339474952e-9,0.005644826218485832,-8.12113309933693e-9]]],[1,-1.639127722441458e-9,0.005644821096211672,2.4586914726398845e-9],[3,-0.0000027220794436078912,0.000002801418531795414,4.222383722630338e-7,0.9999999999922822],[1,-0.0003119274627818528,0.00032101904875022903,0.00004838407951892836]],[0,"right arm0",8388608,125,[-1118],[1,-0.013974963687360287,0.016790248453617096,0.01609310694038868],[3,-0.009031942320728738,0.009235106619735695,0.7069480580786489,0.707147495224627],[1,-89.36624562339624,89.38270908907008,88.51971961785377]],[0,"right arm1",8388608,628,[-1119],[1,-0.007742421701550484,0.0010551821906119585,0.021822378039360046],[3,0.0011293978723013517,0.10235323600169045,-0.00116846522389361,0.9947467890018288],[1,0.14244476872426218,11.749557580346796,-0.11994645319001446]],[0,"right hand",8388608,629,[-1120],[1,0.015645867213606834,0.00009417087130714208,0.010464523918926716],[3,0.000564268567534426,-0.33015090822731785,-0.00025365272179565655,0.9439279607353295],[1,0.05143848065160351,-38.55585629010495,-0.048784345696111106]],[0,"right finger3",8388608,630,[-1121],[1,0.009227292612195015,-7.599592066753758e-9,0.004294626880437136],[3,1.6298153937492528e-9,0.000002770327682799972,7.275961777491847e-11,0.9999999999961626],[1,1.867630637958631e-7,0.0003174561681857834,8.338155429893503e-9]],[0,"right finger4",8388608,631,[-1122],[1,0.0022041972260922194,0.0000505955504195299,0.003155910177156329],[3,-6.984919309606769e-10,-0.000001633585839042647,1.4551918697794388e-11,0.9999999999986657],[1,-8.004127661182475e-8,-0.00018719514809904426,1.6676578047004918e-9]],[0,"right finger5",8388608,632,[-1123],[1,0.00042110466165468097,0.0001340793096460402,0.005627505015581846],[3,-0.0000019479955177752215,0.13052655589795578,0.000007322112103060771,0.9914448134656862],[1,-0.00033083272104267504,15.000042036776538,0.000802737353376578]],[30,"right finger5_end",8388608,633,[-1124],[1,-2.2538007016237316e-9,0.0056448327377438545,1.0002404238207419e-8]],[6,"right finger5_end_end",8388608,634,[[5,"right finger5_end_end_end",8388608,-1125,[1,-1.974403973648009e-9,0.0056448327377438545,1.7881393032936899e-9]]],[1,-5.33647837031026e-9,0.005644836463034153,1.162290530487553e-8],[3,0.0000015022819752612897,-2.2382664610605817e-8,-2.478482770126758e-7,0.9999999999988407],[1,0.00017214883300648067,-0.0000025648217660946174,-0.000028401324317949088]],[0,"neck0",8388608,125,[-1126],[1,-2.6822091214739885e-9,0.015256059356033802,-0.00595217477530241],[3,-0.07123410846437608,-0.014987513727382237,0.028143017193092368,0.9969498717622799],[1,-8.130615612736486,-1.4851653091889252,3.3393464157132535]],[0,"neck1",8388608,636,[-1127],[1,8.940696516468449e-10,0.017543168738484383,-0.016172247007489204],[3,-0.10494259662545745,0.0000061833183705481795,-0.00008328176707578431,0.9944782775100824],[1,-12.047718701658109,-0.0002968642299670698,-0.009565049350708435]],[0,"neck2",8388608,637,[-1128],[1,4.470348535789981e-9,0.017027776688337326,-0.016856519505381584],[3,-0.046461860349687426,-0.0033375966875403224,-0.003000175268067493,0.9989099833966815],[1,-5.327239229013977,-0.3980264941498488,-0.3256519505946268]],[0,"neck3",8388608,638,[195],[1,2.6822091214739885e-9,0.00766771798953414,-0.011520219966769218],[3,0.1129740622069687,-0.002462202908184354,-0.0016172785493945123,0.9935935704478913],[1,12.973139155541443,-0.25940575636329644,-0.21601506953467783]],[0,"right eye",8388608,196,[-1129],[1,-0.007840261794626713,0.008088086731731892,0.0008104066364467144],[3,0.0000015153221586345103,0.000001291498019247911,0.7071119369679933,0.7071016253647057],[1,0,0.0002455702580163,90]],[0,"right eye_end",8388608,640,[-1130],[1,7.450580596923828e-9,0.01128531713038683,1.2665987370041876e-8],[3,0.0000016917472294127718,6.170012056818174e-9,-4.1886227108925643e-7,0.9999999999984812],[1,0.00019385995279289637,7.071125014201777e-7,-0.000047998079465172375]],[6,"right eye_end_end",8388608,641,[[5,"right eye_end_end_end",8388608,-1131,[1,5.960464899423812e-10,0.011285314336419106,3.44216815051368e-8]]],[1,1.3709068547029801e-8,0.011285322718322277,7.227063392178934e-9],[3,-0.0000025331978576933247,1.1146769729428502e-8,-6.984920419816702e-10,0.9999999999967915],[1,-0.00029028309183423673,0.0000012773255186363435,-8.004452777657305e-8]],[0,"left eye",8388608,196,[-1132],[1,0.007816696539521217,0.008088074624538422,0.0008104006410576403],[3,-0.4833322786123404,0.5161297941585465,0.4833344541818849,0.5161276483913245],[1,-86.24125517318419,90.0002474051749,0.000009826573641812891]],[0,"left eye_end",8388608,643,[-1133],[1,1.2433156726388006e-8,0.011285322718322277,5.856855000985206e-9],[3,1.0477378964409168e-9,5.915352208055046e-9,0.0000016901828985258776,0.9999999999985716],[1,1.200607733149561e-7,6.778492287861956e-7,0.00019368069338224458]],[6,"left eye_end_end",8388608,644,[[5,"left eye_end_end_end",8388608,-1134,[1,7.078051478259795e-9,0.011285316199064255,4.842877210364804e-10]]],[1,1.672655258744271e-8,0.011285318061709404,-2.1606683109354208e-9],[3,-4.2284960954866026e-7,8.658391337221959e-9,-0.0000016913039644324944,0.9999999999984803],[1,-0.00004845499431391979,9.920966098682533e-7,-0.00019380915849106982]],[30,"jaw1",8388608,197,[-1135],[1,1.862645149230957e-9,0.045013949275016785,0.015709517523646355]],[30,"jaw1_end",8388608,646,[-1136],[1,-7.450580707946131e-10,0.027444317936897278,-1.0989605891964516e-9]],[6,"jaw1_end_end",8388608,647,[[72,"jaw1_end_end_end",8388608,-1137,[1,-4.4703482582342247e-10,0.02744431234896183,-2.1569430685985935e-8],[3,-0.0000010203220881511088,0.0000010196818038810613,1.4551915228351714e-9,0.9999999999989597],[1,-0.00011692029896006154,0.00011684692778744354,1.6663344378198693e-7]]],[1,1.7881393032936899e-9,0.027444347739219666,1.7862767265341972e-8],[3,0.000002010551270351287,-0.000002014101482919643,-3.783497126692792e-10,0.9999999999959506],[1,0.00023039220448395494,-0.0002307990288771928,-4.3819716712579345e-8]],[0,"tongue0",8388608,197,[-1138],[1,3.5762786065873797e-9,0.004420141689479351,0.005698944441974163],[3,0.14470117871230787,-1.3000424365683173e-8,0.000007537388013103071,0.9894754008172494],[1,16.639950996468475,-0.00012645551306502084,0.0008544151586764777]],[0,"tongue1",8388608,649,[-1139],[1,-3.3527611797978807e-9,0.011291980743408203,-0.0012327989097684622],[3,-0.06670764023167682,-1.9519765523348155e-7,-2.3801742565346996e-8,0.9977725646331845],[1,-7.649813158440861,-0.000022500124022819532,-0.0000012292867664396407]],[0,"tongue2",8388608,650,[-1140],[1,2.654269304347423e-10,0.01418344583362341,0.0005741515778936446],[3,-0.1374952653740075,5.523982732180117e-8,-4.5837314709614335e-8,0.9905024240251641],[1,-15.805867716311552,0.000005547694689655366,-0.000006073030173183047]],[0,"tongue2_end",8388608,651,[-1141],[1,-1.3411045607369942e-9,0.014195075258612633,-5.79049830307099e-9],[3,0.0000014945978818981794,-0.0000014533287639974586,-3.259628789102487e-9,0.9999999999978271],[1,0.00017126830086094277,-0.00016653920828563922,-3.737748539378029e-7]],[6,"tongue2_end_end",8388608,652,[[72,"tongue2_end_end_end",8388608,-1142,[1,-1.043081288010228e-9,0.014195038005709648,1.0114162840579866e-8],[3,0.0000021189916878843384,-0.0000021222513168954777,-2.3283064365282257e-10,0.9999999999955029],[1,0.00024281856102116275,-0.00024319208699148472,-2.7195748456137112e-8]]],[1,1.043081288010228e-9,0.014195079915225506,3.408640703028709e-9],[3,-0.0000035538696465228525,0.0000034507834242990154,-8.149073638008481e-10,0.9999999999877311],[1,-0.00040724346304701155,0.0003954306521184932,-9.478681427174957e-8]],[0,"Right Torso",8388608,124,[-1143],[1,-0.017464520409703255,0.009573213756084442,0.030453024432063103],[3,-1.4765793285428368e-8,-1.2075035933521495e-7,0.7071068407911856,0.707106721581894],[1,0,-0.000002392899432563725,90]],[30,"Right Torso_end",8388608,654,[-1144],[1,2.784654506982065e-9,0.02686261013150215,3.81842246710562e-9]],[45,"Right Torso_end_end",8388608,655,[[5,"Right Torso_end_end_end",8388608,-1145,[1,-1.1431984248133631e-8,0.0268626157194376,1.240521640966108e-8]]],[1,1.9604340373291507e-9,0.0268626157194376,-2.1047890097491972e-9]],[0,"Left Torso",8388608,124,[-1146],[1,0.017440930008888245,0.009573224000632763,0.030453002080321312],[3,0.500000126659862,-0.4999998882412794,-0.5000000670552164,-0.4999999180436022],[1,-90.0000221981152,89.99999487735771,-0.0000017075463256145647]],[30,"Left Torso_end",8388608,657,[-1147],[1,1.7508864358362075e-9,0.026862619444727898,-2.8824433950802586e-9]],[45,"Left Torso_end_end",8388608,658,[[5,"Left Torso_end_end_end",8388608,-1148,[1,-1.5832484212552345e-9,0.0268626157194376,-2.9336661988565993e-9]]],[1,-2.2165478341662492e-9,0.02686261013150215,5.820766091346741e-10]],[0,"tail0",8388608,126,[-1149],[1,2.38418573772492e-9,-0.01958109252154827,0.004617891740053892],[3,0.05616177867879355,0.028151084982951425,0.004469596682825916,0.9980147262116976],[1,6.4223793484064045,3.1925924357445123,0.692349061695615]],[0,"tail1",8388608,660,[-1150],[1,-1.19209286886246e-9,-0.026223542168736458,-0.0007214128854684532],[3,0.0031083005351771912,0.0014343740341220459,-0.01194275649172853,0.9999228228249882],[1,0.35822495434177337,0.16865661998027534,-1.3680525498125806]],[0,"tail2",8388608,661,[-1151],[1,2.38418573772492e-9,-0.03143041208386421,0.00010329753422411159],[3,0.003111778308726112,0.0013797485805861092,-0.011948764385323093,0.999922817101038],[1,0.35854984255366873,0.16240262721771287,-1.368760051413259]],[0,"tail3",8388608,662,[-1152],[1,-2.38418573772492e-9,-0.02927638776600361,0.00020010948355775326],[3,0.0031156022961344666,0.0013251705064710123,-0.011954564573702881,0.999922809686485],[1,0.35891436722033493,0.15615446645465633,-1.3694437187155908]],[0,"tail4",8388608,663,[-1153],[1,-4.76837147544984e-9,-0.027391791343688965,0.00019631088071037084],[3,0.0035525737043447716,0.0014388119918525726,-0.011879632153546678,0.999922088654923],[1,0.40914076039233777,0.16974711963651254,-1.3607416889422317]],[0,"tail5",8388608,664,[-1154],[1,-1.1920929132713809e-8,-0.027199802920222282,0.00030194639111869037],[3,-0.0012750914229008672,-0.008457227549468383,0.03171206615500072,0.9994604515958702],[1,-0.11553545910896909,-0.9659600928893592,3.6356494243513264]],[0,"tail6",8388608,665,[-1155],[1,9.53674295089968e-9,-0.025129156187176704,0.0011446529533714056],[3,-0.014449086548818109,-0.008872484528700394,0.0315430043349346,0.9993585651775438],[1,-1.6260902547158433,-0.9658152257334518,3.629360742339713]],[0,"tail7",8388608,666,[-1156],[1,-5.9604645663569045e-9,-0.024538598954677582,0.0006162720965221524],[3,-0.0035734080338886967,-0.010646847758866457,0.03040127757568557,0.9994746808747028],[1,-0.3728700575034159,-1.2092794445726276,3.488414221479557]],[0,"tail8",8388608,667,[-1157],[1,8.940697071579962e-9,-0.013206311501562595,0.0002693343267310411],[3,-0.00421273810623833,-0.009717253247809712,0.030597281375363466,0.9994756796437836],[1,-0.449268537675818,-1.1002936678150768,3.5112401274933487]],[30,"tail8_end",8388608,668,[-1158],[1,1.19209286886246e-9,0.013208942487835884,0]],[45,"tail8_end_end",8388608,669,[[5,"tail8_end_end_end",8388608,-1159,[1,1.19209286886246e-9,0.013209017924964428,-6.556510889765832e-9]]],[1,5.9604645663569045e-9,0.013209058903157711,1.7881394143159923e-9]],[0,"right leg0",8388608,126,[-1160],[1,-0.019055675715208054,0.0033091562800109386,0.016144664958119392],[3,-0.1758038810899314,-0.017633571842268422,0.6676717853270461,0.723184927674793],[1,-78.57820982882251,62.74263400658564,76.38525243107132]],[0,"right leg1",8388608,671,[-1161],[1,0.011304101906716824,-0.0015700083458796144,0.04155361279845238],[3,0.06429759265723188,0.04945126062606861,0.0029156149162815385,0.9967005024532882],[1,7.347795831743105,5.636019159221763,0.6973746779464639]],[0,"right foot0",8388608,672,[-1162],[1,-0.029886450618505478,0.0015699955401942134,0.032055873423814774],[3,-0.08061608046528909,-0.12210650177915211,0.006311681215104875,0.989217474812243],[1,-9.09280657404995,-13.92707573541503,1.8437953581496462]],[0,"right foot1",8388608,673,[-1163],[1,0.003907094709575176,-0.00014767363609280437,0.018782703205943108],[3,0.012718700017344608,-0.019753488005658924,0.011716660245581385,0.9996553177241488],[1,1.4840307666426562,-2.2810810511675452,1.313492797221609]],[0,"right foot2",8388608,674,[-1164],[1,0.005417832173407078,0.0001594980276422575,0.010887287557125092],[3,0.135298567316826,0.9880735445127315,-0.06766532475870929,0.028746689224323076],[1,8.434477156871264,175.53389993115258,15.276627672092612]],[0,"right toe0",8388608,675,[-1165],[1,-0.004766051657497883,0.0004802089533768594,0.00009099081216845661],[3,0.13046292620968675,0.9907689432631921,-0.004293484967174884,0.036577205152664605],[1,1.070648052511951,175.63081923016807,14.963469722274361]],[0,"right toe1",8388608,676,[-1166],[1,0.007804563734680414,-0.0004186089208815247,0.0005770097486674786],[3,-0.0011280903034880329,0.050888072283556754,-0.060021526621159046,0.9968984641645288],[1,0.22274179400602048,5.857801964075723,-6.879726116801438]],[0,"right toe2",8388608,677,[-1167],[1,0.006148821674287319,0.0003150858683511615,-5.21540644005114e-10],[3,0.0000018084104049840189,-0.23793532170532997,0.000007286618322553768,0.9712810008584621],[1,0.00039994958420425553,-27.52942671179931,0.0007616980255523596]],[30,"right toe2_end",8388608,678,[-1168],[1,-3.8743017682918435e-9,0.006156904622912407,7.450580707946131e-10]],[45,"right toe2_end_end",8388608,679,[[5,"right toe2_end_end_end",8388608,-1169,[1,-5.9604643443123e-10,0.006156894378364086,-5.9604643443123e-10]]],[1,-1.639127722441458e-9,0.006156902760267258,2.98023217215615e-10]],[0,"left leg0",8388608,126,[-1170],[1,0.01840258203446865,0.0034433561377227306,0.024012885987758636],[3,-0.026719246605534135,-0.019741520688928448,0.0797837020365437,0.9962584579872158],[1,-2.9085726705116217,-2.0361285181125104,9.208366644433342]],[0,"left leg1",8388608,681,[-1171],[1,-0.001570010674186051,0.011304106563329697,0.04155363142490387],[3,0.07505410346936253,-0.006625843860994315,0.003316218579660744,0.9971519354841928],[1,8.611106043601785,-0.7856617226002104,0.32194404411108085]],[0,"left foot0",8388608,682,[-1172],[1,0.0015700102085247636,-0.029886456206440926,0.03205588459968567],[3,0.09446010059390231,0.00524464439530843,-0.0064196456671164566,0.9954941342119829],[1,10.844803105330856,0.6678338961791349,-0.6755684135879525]],[0,"left foot1",8388608,683,[-1173],[1,-0.00014768153778277338,0.003907082136720419,0.018782710656523705],[3,-0.0688300711131612,-0.09169756385766402,-0.0010759593875588616,0.9934046609536936],[1,-7.871803697878175,-10.506304455837528,0.6007786594490084]],[0,"left foot2",8388608,684,[-1174],[1,0.0001594924251548946,0.005417830776423216,0.01088727731257677],[3,0.16557359601450405,-0.293024776702799,0.645517941625473,0.6855862101739744],[1,79.53737191070073,-90.47599166257511,52.00663712930689]],[0,"left toe0",8388608,685,[-1175],[1,0.0032210317440330982,-0.00048022984992712736,-0.0035140234977006912],[3,-0.00025397410362682974,0.993890734182026,-0.00042949190776777463,0.11036738440757354],[1,0.045703432009614624,167.32702392606475,-0.03435734826850064]],[0,"left toe1",8388608,686,[-1176],[1,-0.005144279450178146,0.00001669451557972934,0.0058973608538508415],[3,0.00047318134286587397,-0.25816592798791194,-0.00016007157822210818,0.9661004627380357],[1,0.047648980608224735,-29.922515804701185,-0.03171946383206957]],[0,"left toe2",8388608,687,[-1177],[1,1.7881393032936899e-9,0.00008683509804541245,0.006148934364318848],[3,0.00038137636832103974,-0.05181359592711081,-0.0003230278147168311,0.9986566484443983],[1,0.04172587266780249,-5.9400470473863285,-0.03923092244094853]],[30,"left toe2_end",8388608,688,[-1178],[1,4.097819306103645e-10,0.006149544846266508,-5.587935669737476e-10]],[45,"left toe2_end_end",8388608,689,[[5,"left toe2_end_end_end",8388608,-1179,[1,9.31322467062623e-12,0.006149547640234232,-3.7252903539730653e-10]]],[1,-6.519258050063925e-11,0.006149547174572945,-7.823109382520954e-10]],[113,"comp_LOD_2",8388608,27,[[4,1,-1180,[475,476,477,478,479,480],[1],27,481,482]],[3,1.5454308319985022e-8,0.707106721581899,-1.545430476727128e-8,0.7071068407911907],[1,99.99998474121094,99.99998474121094,99.99998474121094],[1,0.0000025044775805019677,89.99999034065368,7.675927522096591e-14]],[8,"Level",8388608,27,[[13,"Quad<ModelComponent>",-1181,[483],[1],484]],[1,0.9124999999999943,1.6999999999999957,0.5999999999999996],[3,-0.3707452120036063,-0.6021195792999934,-0.3707452120036063,0.6021195792999934],[1,0.5396874999999999,1,0.5396875],[1,-63.244,-90,0]],[0,"Spine1_M",8388608,127,[128],[1,0.005334464367479086,-1.734723475976807e-18,4.299679912665751e-19],[3,2.1271160548415487e-31,-7.387287067052785e-18,0.014618982679226592,0.999893136962858],[1,1.2380563880610636e-17,-8.467922240252193e-16,1.6752716918878972]],[0,"Neck_M",8388608,128,[-1182],[1,0.002714349888265133,-9.57567355430475e-18,8.572243914273824e-18],[3,2.334849548498401e-33,1.210279147626834e-32,-0.18942549962218294,0.9818950962770342],[1,5.66041439480744e-31,1.5216497485115417e-30,-21.83851784031204]],[6,"Head_M",8388608,694,[[5,"HeadEnd_M",8388608,-1183,[1,0.002823290415108204,5.377642816887133e-19,2.8810669715948983e-19]]],[1,0.002050594659522176,-1.1102230411687688e-17,-1.1397885028539148e-18],[3,1.3712628330747433e-33,-7.748182116840672e-33,0.17427049577586698,0.9846978187759095],[1,3.2947363714137558e-31,-9.59983646203496e-31,20.07241655059164]],[0,"Scapula_R",8388608,128,[-1184],[1,0.0011061389232054353,-0.0006425591418519616,-0.003000000026077032],[3,0.011006418236851384,0.7112698310246427,-0.010875604672522158,0.7027487513007612],[1,1.7730415728863935,90.69020757969066,0.021281444783464887]],[0,"Shoulder_R",8388608,696,[-1185],[1,0.002950000111013651,2.9599587517625207e-16,4.440891999238953e-18],[3,-0.036766301506691725,0.6917510565886625,-0.038273904125047865,0.7201831871440867],[1,-0.0002833286279134703,87.69276567497838,-6.0844785186711885]],[0,"Elbow_R",8388608,697,[-1186],[1,0.005175452213734388,-5.828670614584276e-17,-2.2204459996194763e-18],[3,-7.709045863072825e-19,8.488711171147105e-19,0.12233098131469163,0.9924893606535964],[1,-1.0264744435556117e-16,1.1066156643491841e-16,14.053298599928233]],[6,"Wrist_R",8388608,698,[[5,"Cup_R",8388608,-1187,[1,0.0033151672687381506,5.218048202503346e-17,-2.2204459996194763e-18]]],[1,0.005389300640672445,-6.272760062662355e-17,-7.77156120546332e-18],[3,-0.004768474014740153,0.012352902409124579,0.0011546335850644365,0.999911663237771],[1,-0.5480227017072393,1.4161918210299922,0.12554971732357223]],[0,"Scapula_L",8388608,128,[-1188],[1,0.0011061389232054353,-0.0006425591418519616,0.003000000026077032],[3,0.7112698310319335,-0.011006417305641662,-0.7027487513079647,-0.010875604672633637],[1,-178.2269585021126,89.30979241912084,-0.021281368875969202]],[0,"Shoulder_L",8388608,700,[-1189],[1,-0.0029548665042966604,2.608999682962576e-9,0.000021150273823877797],[3,-0.03882624986063326,0.6508737856280458,-0.03618252307268142,0.7573286357507361],[1,-0.6745852782266888,81.31811907479812,-6.047107114000744]],[0,"Elbow_L",8388608,701,[-1190],[1,-0.005175452213734388,2.609024101251673e-17,0],[3,3.278061266432535e-19,1.8611321017625682e-17,0.12233098131469163,0.9924893606535964],[1,-2.305128209301622e-16,2.17725170284255e-15,14.053298599928233]],[6,"Wrist_L",8388608,702,[[5,"Cup_L",8388608,-1191,[1,-0.0033151672687381506,-1.415534329927295e-16,0]]],[1,-0.005389300640672445,5.134781555065798e-17,1.6653346031121838e-17],[3,-0.004768474014740153,0.012352902409124579,0.0011546335850644365,0.999911663237771],[1,-0.5480227017072393,1.4161918210299922,0.12554971732357223]],[0,"Hip_R",8388608,127,[-1192],[1,-0.0005149218486621976,-0.000035732064134208485,-0.0025951904244720936],[3,-0.0013684586941045457,0.9999846538917857,-0.00017622552207276294,0.0053654679472844545],[1,0.019352340864127352,179.38518562853085,-0.1569199549416445]],[0,"Knee_R",8388608,704,[-1193],[1,0.008524451404809952,1.2628998541375225e-11,-1.1102229998097382e-18],[3,3.403632747743931e-20,-9.107188358042246e-19,-0.03350002364301262,0.9994387166884808],[1,4.029053682243933e-19,-1.0440579512036528e-16,-3.839538319810826]],[0,"Ankle_R",8388608,705,[-1194],[1,0.007810377050191164,1.1571134675425476e-11,-8.311684436687009e-15],[3,0.0005231972268350271,0.005401740730554813,0.05058017697477186,0.998705258401568],[1,0.028714477331547906,0.6183360190684839,5.79877519893503]],[6,"Toes_R",8388608,706,[[5,"ToesEnd_R",8388608,-1195,[1,0.0019366915803402662,-1.9886869822718998e-16,3.063116871260263e-9]]],[1,0.002095116302371025,0.002573760924860835,-1.1551194029069123e-11],[3,-0.0005855765799607817,0.0005394552157793537,0.6775491861260131,0.7354770332703235],[1,-1.1144865141882583,1.1107462304259765,85.3039958375585]],[0,"Hip_L",8388608,127,[-1196],[1,-0.0005149218486621976,-0.000035732064134208485,0.0025951904244720936],[3,0.9999846538908325,0.0013684593925951528,-0.00536546794727934,-0.00017622550752068012],[1,-179.9806476612328,0.6148143714585114,0.15692003497274723]],[0,"Knee_L",8388608,708,[-1197],[1,-0.008524451404809952,-1.2628998541375225e-11,4.6312953641644995e-15],[3,4.9250421584690475e-20,1.2367185778725194e-18,-0.03350002364301262,0.9994387166884808],[1,1.0411423292578889e-17,1.42146077062345e-16,-3.839538319810826]],[0,"Ankle_L",8388608,709,[-1198],[1,-0.007810377050191164,-1.1571218809514061e-11,1.2550515978587175e-14],[3,0.0005231972268350271,0.005401740730554813,0.05058017697477186,0.998705258401568],[1,0.028714477331547906,0.6183360190684839,5.79877519893503]],[6,"Toes_L",8388608,710,[[5,"ToesEnd_L",8388608,-1199,[1,-0.0019366915803402662,2.7755574995243454e-19,1.6754419032705137e-11]]],[1,-0.002095116302371025,-0.002573760924860835,8.517709974842358e-12],[3,-0.0005849927574888355,0.0005389178429919117,0.6775491865538494,0.7354770337347383],[1,-1.1133760861696482,1.1096395693191319,85.30399759925989]],[3,"melee_02_body",8388608,31,[[4,1,-1200,[492],[1],19,493,494]]],[3,"melee_02_wing",8388608,31,[[4,1,-1201,[495],[1],19,496,497]]],[3,"melee_02_head",8388608,31,[[4,1,-1202,[498],[1],19,499,500]]],[3,"melee_02_arm_L",8388608,31,[[4,1,-1203,[501],[1],19,502,503]]],[3,"melee_02_leg_R",8388608,31,[[4,1,-1204,[504],[1],19,505,506]]],[3,"melee_02_leg_L",8388608,31,[[4,1,-1205,[507],[1],19,508,509]]],[3,"melee_02_arm_R",8388608,31,[[4,1,-1206,[510],[1],19,511,512]]],[71,"Cube",8388608,201,[-1207]],[76,1,false,false,719,[[517,null],6,0],[51,[4,4294939182]],[37,3,1,2],[2],[2],[37,3,30,60],[2],[2],[46,3,4.71238898038469],[2],[37,3,0.3,1],[2],[2],[2],[[56,[9,15]]],[78,[27]],[81,true,0,[9,1]],[64,[2],[2],[2],[2]],[47,[2],[2],[2],[9,1]],[48,[2],[2],[2]],[84,true,0.8,[2],[2],[2],[77,1,30,[31,[0,1],[[90,0.04444444444444444,1,1],[66,-0.562962962962963,-0.6074074074074074,1,-0.6074074074074074,1]]]]],[86,true,true,[9,0.7853981633974483],[9,0.7853981633974483],[9,0.8552113334772213]],[65,true,3,3,2,[2],[46,3,1]],[49,[9,1],[2],[27],[27],-1208],[92,0,518]],[0,"Spine1_M",8388608,129,[130],[1,0.005334464367479086,-1.734723475976807e-18,4.299679912665751e-19],[3,2.1271160548415487e-31,-7.387287067052785e-18,0.014618982679226592,0.999893136962858],[1,1.2380563880610636e-17,-8.467922240252193e-16,1.6752716918878972]],[0,"Neck_M",8388608,130,[-1209],[1,0.002714349888265133,-9.57567355430475e-18,8.572243914273824e-18],[3,2.334849548498401e-33,1.210279147626834e-32,-0.18942549962218294,0.9818950962770342],[1,5.66041439480744e-31,1.5216497485115417e-30,-21.83851784031204]],[6,"Head_M",8388608,722,[[5,"HeadEnd_M",8388608,-1210,[1,0.002823290415108204,5.377642816887133e-19,2.8810669715948983e-19]]],[1,0.002050594659522176,-1.1102230411687688e-17,-1.1397885028539148e-18],[3,1.3712628330747433e-33,-7.748182116840672e-33,0.17427049577586698,0.9846978187759095],[1,3.2947363714137558e-31,-9.59983646203496e-31,20.07241655059164]],[0,"Scapula_R",8388608,130,[-1211],[1,0.0011061389232054353,-0.0006425591418519616,-0.003000000026077032],[3,0.011006418236851384,0.7112698310246427,-0.010875604672522158,0.7027487513007612],[1,1.7730415728863935,90.69020757969066,0.021281444783464887]],[0,"Shoulder_R",8388608,724,[-1212],[1,0.002950000111013651,2.9599587517625207e-16,4.440891999238953e-18],[3,-0.036766301506691725,0.6917510565886625,-0.038273904125047865,0.7201831871440867],[1,-0.0002833286279134703,87.69276567497838,-6.0844785186711885]],[0,"Elbow_R",8388608,725,[-1213],[1,0.005175452213734388,-5.828670614584276e-17,-2.2204459996194763e-18],[3,-7.709045863072825e-19,8.488711171147105e-19,0.12233098131469163,0.9924893606535964],[1,-1.0264744435556117e-16,1.1066156643491841e-16,14.053298599928233]],[6,"Wrist_R",8388608,726,[[5,"Cup_R",8388608,-1214,[1,0.0033151672687381506,5.218048202503346e-17,-2.2204459996194763e-18]]],[1,0.005389300640672445,-6.272760062662355e-17,-7.77156120546332e-18],[3,-0.004768474014740153,0.012352902409124579,0.0011546335850644365,0.999911663237771],[1,-0.5480227017072393,1.4161918210299922,0.12554971732357223]],[0,"Scapula_L",8388608,130,[-1215],[1,0.0011061389232054353,-0.0006425591418519616,0.003000000026077032],[3,0.7112698310319335,-0.011006417305641662,-0.7027487513079647,-0.010875604672633637],[1,-178.2269585021126,89.30979241912084,-0.021281368875969202]],[0,"Shoulder_L",8388608,728,[-1216],[1,-0.0029548665042966604,2.608999682962576e-9,4.440891999238953e-18],[3,-0.03676631640867874,0.6917510566042027,-0.03827388922474663,0.7201831871602655],[1,-0.0002857532309027007,87.69276554611803,-6.084478470121346]],[0,"Elbow_L",8388608,729,[-1217],[1,-0.005175452213734388,2.609024101251673e-17,0],[3,-7.639352792941652e-19,-7.668803008362496e-19,0.12233098131469163,0.9924893606535964],[1,-7.848178543085077e-17,-7.886961667845593e-17,14.053298599928233]],[6,"Wrist_L",8388608,730,[[5,"Cup_L",8388608,-1218,[1,-0.0033151672687381506,-1.4099832200981251e-16,1.1102229998097382e-18]]],[1,-0.005389300640672445,5.107026005919949e-17,1.6653346031121838e-17],[3,-0.004768474014740153,0.012352902409124579,0.0011546335850644365,0.999911663237771],[1,-0.5480227017072393,1.4161918210299922,0.12554971732357223]],[0,"Hip_R",8388608,129,[-1219],[1,-0.0005149218486621976,-0.000035732064134208485,-0.0025951904244720936],[3,-0.0013684586941045457,0.9999846538917857,-0.00017622552207276294,0.0053654679472844545],[1,0.019352340864127352,179.38518562853085,-0.1569199549416445]],[0,"Knee_R",8388608,732,[-1220],[1,0.008524451404809952,1.2628998541375225e-11,-1.1102229998097382e-18],[3,3.403632747743931e-20,-9.107188358042246e-19,-0.03350002364301262,0.9994387166884808],[1,4.029053682243933e-19,-1.0440579512036528e-16,-3.839538319810826]],[0,"Ankle_R",8388608,733,[-1221],[1,0.007810377050191164,1.1571134675425476e-11,-8.311684436687009e-15],[3,0.0005231972268350271,0.005401740730554813,0.05058017697477186,0.998705258401568],[1,0.028714477331547906,0.6183360190684839,5.79877519893503]],[6,"Toes_R",8388608,734,[[5,"ToesEnd_R",8388608,-1222,[1,0.0019366915803402662,-1.9886869822718998e-16,3.063116871260263e-9]]],[1,0.002095116302371025,0.002573760924860835,-1.1551194029069123e-11],[3,-0.0005855765799607817,0.0005394552157793537,0.6775491861260131,0.7354770332703235],[1,-1.1144865141882583,1.1107462304259765,85.3039958375585]],[0,"Hip_L",8388608,129,[-1223],[1,-0.0005149218486621976,-0.000035732064134208485,0.0025951904244720936],[3,0.9999846538908325,0.0013684593925951528,-0.00536546794727934,-0.00017622550752068012],[1,-179.9806476612328,0.6148143714585114,0.15692003497274723]],[0,"Knee_L",8388608,736,[-1224],[1,-0.008524451404809952,-1.2628998541375225e-11,4.6312953641644995e-15],[3,4.9250421584690475e-20,1.2367185778725194e-18,-0.03350002364301262,0.9994387166884808],[1,1.0411423292578889e-17,1.42146077062345e-16,-3.839538319810826]],[0,"Ankle_L",8388608,737,[-1225],[1,-0.007810377050191164,-1.1571218809514061e-11,1.2550515978587175e-14],[3,0.0005231972268350271,0.005401740730554813,0.05058017697477186,0.998705258401568],[1,0.028714477331547906,0.6183360190684839,5.79877519893503]],[6,"Toes_L",8388608,738,[[5,"ToesEnd_L",8388608,-1226,[1,-0.0019366915803402662,2.7755574995243454e-19,1.6754419032705137e-11]]],[1,-0.002095116302371025,-0.002573760924860835,8.517709974842358e-12],[3,-0.0005849927574888355,0.0005389178429919117,0.6775491865538494,0.7354770337347383],[1,-1.1133760861696482,1.1096395693191319,85.30399759925989]],[3,"melee_10_body",8388608,28,[[4,1,-1227,[522],[1],3,523,524]]],[3,"melee_10_head",8388608,28,[[4,1,-1228,[525],[1],3,526,527]]],[3,"melee_10_leg_L",8388608,28,[[4,1,-1229,[528],[1],3,529,530]]],[3,"melee_10_leg_R",8388608,28,[[4,1,-1230,[531],[1],3,532,533]]],[3,"melee_10_arm_L",8388608,28,[[4,1,-1231,[534],[1],3,535,536]]],[3,"melee_10_arm_R",8388608,28,[[4,1,-1232,[537],[1],3,538,539]]],[3,"melee_10_blade_L",8388608,28,[[4,1,-1233,[540],[1],3,541,542]]],[3,"melee_10_blade_R",8388608,28,[[4,1,-1234,[543],[1],3,544,545]]],[16,["997SBNaQNCWKIt4cMMbVIk"]],[16,["997SBNaQNCWKIt4cMMbVIk"]],[16,["997SBNaQNCWKIt4cMMbVIk"]],[114,"Directional Light",55,[[153,15000,100000,2.604166666666667,-1235,[154]]],[1,0.763,-7.09,18.751],[3,-0.33375837511925477,0.20532641086746783,-0.07472937436729404,0.9169852412360363],[1,-37.198,19.858,-15.908999999999999]],[115,"Level",8388608,[[13,"Quad<ModelComponent>",-1236,[558],[1],559]],[1,2.25,5.499999999999986,1.7500000000000009],[3,-0.29883623873011983,-0.6408563820557887,-0.29883623873011983,0.6408563820557884],[1,1.4355000000000002,1.7500000000000002,1.4355],[1,-50,-90.00000000000003,6.3611093629270335e-15]],[74,"Responisve","0dLV1lXMxAorRkyZzhNv/a",29,[[155,-1237,25]]],[74,"TouchAreaController","cbdS8PWC5K/7ZHW8F95fDM",29,[[156,-1239,-1238,32,25,160]]],[157,32],[58,"IronSource","c0HBwLvpVGZIfoccaEg+GP",29,[755]]],0,[0,0,1,0,-1,61,0,-2,62,0,-3,63,0,-4,64,0,-5,65,0,-6,66,0,-7,67,0,-8,68,0,-9,69,0,-10,70,0,-11,71,0,-12,72,0,-13,73,0,-14,74,0,-15,75,0,0,2,0,0,2,0,0,2,0,17,165,0,18,25,0,19,32,0,0,2,0,-1,79,0,-2,26,0,-3,165,0,0,3,0,0,3,0,0,3,0,17,203,0,18,25,0,19,32,0,0,3,0,-1,129,0,-2,28,0,-3,203,0,-1,81,0,-2,84,0,-3,87,0,-4,90,0,-5,93,0,-6,96,0,-7,99,0,-8,102,0,-9,105,0,-10,108,0,-11,111,0,-12,114,0,-13,117,0,-14,120,0,-15,123,0,0,5,0,0,5,0,0,5,0,0,5,0,-1,82,0,-2,34,0,-3,167,0,0,6,0,0,6,0,0,6,0,0,6,0,-1,85,0,-2,35,0,-3,169,0,0,7,0,0,7,0,0,7,0,0,7,0,-1,88,0,-2,36,0,-3,171,0,0,8,0,0,8,0,0,8,0,0,8,0,-1,91,0,-2,37,0,-3,173,0,0,9,0,0,9,0,0,9,0,0,9,0,-1,94,0,-2,38,0,-3,175,0,0,10,0,0,10,0,0,10,0,0,10,0,-1,97,0,-2,39,0,-3,177,0,0,11,0,0,11,0,0,11,0,0,11,0,-1,100,0,-2,40,0,-3,179,0,0,12,0,0,12,0,0,12,0,0,12,0,-1,103,0,-2,41,0,-3,181,0,0,13,0,0,13,0,0,13,0,0,13,0,-1,106,0,-2,42,0,-3,183,0,0,14,0,0,14,0,0,14,0,0,14,0,-1,109,0,-2,43,0,-3,185,0,0,15,0,0,15,0,0,15,0,0,15,0,-1,112,0,-2,44,0,-3,187,0,0,16,0,0,16,0,0,16,0,0,16,0,-1,115,0,-2,45,0,-3,189,0,0,17,0,0,17,0,0,17,0,0,17,0,-1,118,0,-2,46,0,-3,191,0,0,18,0,0,18,0,0,18,0,0,18,0,-1,121,0,-2,47,0,-3,193,0,0,19,0,0,19,0,0,19,0,0,19,0,-1,127,0,-2,31,0,0,20,0,0,20,0,-1,132,0,-2,133,0,-3,134,0,-4,135,0,-5,136,0,-6,137,0,-7,138,0,-8,139,0,-9,140,0,0,21,0,0,21,0,-1,141,0,-2,142,0,-3,143,0,-4,144,0,-5,145,0,-6,146,0,-7,147,0,-8,148,0,-9,149,0,0,22,0,0,22,0,-1,150,0,-2,151,0,-3,152,0,-4,153,0,-5,154,0,-6,155,0,-7,156,0,-8,157,0,0,23,0,21,207,0,0,23,0,0,23,0,-1,206,0,-2,60,0,-4,57,0,-5,48,0,-6,76,0,-7,58,0,-1,32,0,-1,210,0,-2,212,0,-3,214,0,-4,216,0,-5,218,0,-6,220,0,-7,222,0,-8,224,0,-1,167,0,-2,169,0,-3,171,0,-4,173,0,-5,175,0,-6,177,0,-7,179,0,-8,181,0,-9,183,0,-10,185,0,-11,187,0,-12,189,0,-13,191,0,-14,193,0,-15,199,0,-16,752,0,-1,105,0,-2,108,0,-3,111,0,-4,114,0,-5,117,0,-6,120,0,-1,81,0,-2,84,0,-3,87,0,-4,90,0,-5,93,0,-6,96,0,-7,99,0,-8,102,0,-1,70,0,-2,71,0,-3,72,0,-4,73,0,-5,74,0,-6,75,0,-1,62,0,-2,63,0,-3,64,0,-4,65,0,-5,66,0,-6,67,0,-7,68,0,-8,69,0,-1,166,0,-2,168,0,-3,170,0,-4,172,0,-5,174,0,-6,176,0,-7,178,0,-8,180,0,-9,182,0,-10,184,0,-11,186,0,-12,188,0,-13,190,0,-14,192,0,-1,256,0,-2,257,0,-3,258,0,-4,259,0,-5,260,0,-6,261,0,-7,262,0,-8,263,0,0,27,0,0,27,0,0,27,0,0,27,0,-1,615,0,-2,691,0,-3,692,0,-1,740,0,-2,741,0,-3,742,0,-4,743,0,-5,744,0,-6,745,0,-7,746,0,-8,747,0,-1,50,0,-2,51,0,-3,53,0,9,49,0,14,49,0,9,49,0,14,208,0,9,50,0,14,50,0,9,51,0,14,51,0,9,50,0,9,51,0,9,53,0,9,53,0,14,53,0,-1,204,0,-2,56,0,-3,753,0,-4,209,0,-6,754,0,-7,756,0,-1,163,0,-3,198,0,-4,200,0,-5,50,0,-6,51,0,-7,53,0,-1,712,0,-2,713,0,-3,714,0,-4,715,0,-5,716,0,-6,717,0,-7,718,0,-1,229,0,-2,230,0,-3,231,0,-4,232,0,-5,233,0,-6,78,0,-1,283,0,-2,284,0,-3,285,0,-4,286,0,-5,287,0,-6,288,0,-1,308,0,-2,309,0,-3,310,0,-4,311,0,-5,312,0,-6,313,0,-1,333,0,-2,334,0,-3,335,0,-4,336,0,-5,337,0,-6,338,0,-1,358,0,-2,359,0,-3,360,0,-4,361,0,-5,362,0,-6,363,0,-1,383,0,-2,384,0,-3,385,0,-4,386,0,-5,387,0,-6,388,0,-1,408,0,-2,409,0,-3,410,0,-4,411,0,-5,412,0,-6,413,0,-1,433,0,-2,434,0,-3,435,0,-4,436,0,-5,437,0,-6,438,0,-1,458,0,-2,459,0,-3,460,0,-4,461,0,-5,462,0,-6,463,0,-1,483,0,-2,484,0,-3,485,0,-4,486,0,-5,487,0,-6,488,0,-1,508,0,-2,509,0,-3,510,0,-4,511,0,-5,512,0,-6,513,0,-1,533,0,-2,534,0,-3,535,0,-4,536,0,-5,537,0,-6,538,0,-1,558,0,-2,559,0,-3,560,0,-4,561,0,-5,562,0,-6,563,0,-1,583,0,-2,584,0,-3,585,0,-4,586,0,-5,587,0,-6,588,0,-1,608,0,-2,609,0,-3,610,0,-4,611,0,-5,612,0,-6,613,0,0,48,0,0,48,0,0,48,0,-1,158,0,-2,159,0,-1,164,0,-1,235,0,6,59,0,6,59,0,6,59,0,6,59,0,6,748,0,6,59,0,6,748,0,15,50,0,6,52,0,6,52,0,6,52,0,6,52,0,6,749,0,6,52,0,6,52,0,6,749,0,15,51,0,6,54,0,6,54,0,6,54,0,6,54,0,6,750,0,6,54,0,6,54,0,6,750,0,15,53,0,-1,161,0,-3,131,0,-4,751,0,-1,208,0,0,56,0,0,57,0,0,58,0,0,58,0,0,58,0,0,60,0,0,60,0,0,61,0,0,61,0,0,62,0,0,62,0,0,63,0,0,63,0,0,64,0,0,64,0,0,65,0,0,65,0,0,66,0,0,66,0,0,67,0,0,67,0,0,68,0,0,68,0,0,69,0,0,69,0,0,70,0,0,70,0,0,71,0,0,71,0,0,72,0,0,72,0,0,73,0,0,73,0,0,74,0,0,74,0,0,75,0,0,75,0,0,76,0,-1,77,0,0,77,0,0,77,0,0,77,0,0,78,0,0,78,0,0,78,0,-1,237,0,-2,248,0,-3,252,0,-1,238,0,-2,240,0,-3,244,0,-1,166,0,-1,264,0,-2,275,0,-3,279,0,-1,265,0,-2,267,0,-3,271,0,-1,168,0,-1,289,0,-2,300,0,-3,304,0,-1,290,0,-2,292,0,-3,296,0,-1,170,0,-1,314,0,-2,325,0,-3,329,0,-1,315,0,-2,317,0,-3,321,0,-1,172,0,-1,339,0,-2,350,0,-3,354,0,-1,340,0,-2,342,0,-3,346,0,-1,174,0,-1,364,0,-2,375,0,-3,379,0,-1,365,0,-2,367,0,-3,371,0,-1,176,0,-1,389,0,-2,400,0,-3,404,0,-1,390,0,-2,392,0,-3,396,0,-1,178,0,-1,414,0,-2,425,0,-3,429,0,-1,415,0,-2,417,0,-3,421,0,-1,180,0,-1,439,0,-2,450,0,-3,454,0,-1,440,0,-2,442,0,-3,446,0,-1,182,0,-1,464,0,-2,475,0,-3,479,0,-1,465,0,-2,467,0,-3,471,0,-1,184,0,-1,489,0,-2,500,0,-3,504,0,-1,490,0,-2,492,0,-3,496,0,-1,186,0,-1,514,0,-2,525,0,-3,529,0,-1,515,0,-2,517,0,-3,521,0,-1,188,0,-1,539,0,-2,550,0,-3,554,0,-1,540,0,-2,542,0,-3,546,0,-1,190,0,-1,564,0,-2,575,0,-3,579,0,-1,565,0,-2,567,0,-3,571,0,-1,192,0,-1,589,0,-2,600,0,-3,604,0,-1,590,0,-2,592,0,-3,596,0,-1,614,0,-1,618,0,-2,654,0,-3,657,0,-1,620,0,-2,628,0,-3,636,0,-1,660,0,-2,671,0,-3,681,0,-1,693,0,-2,704,0,-3,708,0,-1,694,0,-2,696,0,-3,700,0,-1,721,0,-2,732,0,-3,736,0,-1,722,0,-2,724,0,-3,728,0,-1,205,0,0,131,0,0,132,0,0,132,0,0,133,0,0,133,0,0,134,0,0,134,0,0,135,0,0,135,0,0,136,0,0,136,0,0,137,0,0,137,0,0,138,0,0,138,0,0,139,0,0,139,0,0,140,0,0,140,0,0,141,0,0,141,0,0,142,0,0,142,0,0,143,0,0,143,0,0,144,0,0,144,0,0,145,0,0,145,0,0,146,0,0,146,0,0,147,0,0,147,0,0,148,0,0,148,0,0,149,0,0,149,0,0,150,0,0,150,0,0,151,0,0,151,0,0,152,0,0,152,0,0,153,0,0,153,0,0,154,0,0,154,0,0,155,0,0,155,0,0,156,0,0,156,0,0,157,0,0,157,0,0,158,0,0,158,0,0,159,0,0,159,0,-1,226,0,-2,228,0,-2,234,0,12,164,0,0,165,0,0,166,0,0,167,0,0,168,0,0,169,0,0,170,0,0,171,0,0,172,0,0,173,0,0,174,0,0,175,0,0,176,0,0,177,0,0,178,0,0,179,0,0,180,0,0,181,0,0,182,0,0,183,0,0,184,0,0,185,0,0,186,0,0,187,0,0,188,0,0,189,0,0,190,0,0,191,0,0,192,0,0,193,0,-1,616,0,-1,196,0,-2,197,0,-1,640,0,-2,643,0,-1,646,0,-2,649,0,-1,199,0,0,199,0,-1,201,0,-1,202,0,-1,719,0,12,202,0,0,203,0,-1,207,0,-1,211,0,-1,213,0,-1,215,0,-1,217,0,-1,219,0,-1,221,0,-1,223,0,-1,225,0,-1,227,0,0,227,0,0,229,0,0,230,0,0,231,0,0,232,0,0,233,0,0,234,0,-1,236,0,12,236,0,-1,239,0,2,239,0,-1,241,0,-1,242,0,-1,243,0,2,243,0,-1,245,0,-1,246,0,-1,247,0,2,247,0,-1,249,0,-1,250,0,-1,251,0,2,251,0,-1,253,0,-1,254,0,-1,255,0,2,255,0,0,256,0,0,257,0,0,258,0,0,259,0,0,260,0,0,261,0,0,262,0,0,263,0,-1,266,0,2,266,0,-1,268,0,-1,269,0,-1,270,0,2,270,0,-1,272,0,-1,273,0,-1,274,0,2,274,0,-1,276,0,-1,277,0,-1,278,0,2,278,0,-1,280,0,-1,281,0,-1,282,0,2,282,0,0,283,0,0,284,0,0,285,0,0,286,0,0,287,0,0,288,0,-1,291,0,2,291,0,-1,293,0,-1,294,0,-1,295,0,2,295,0,-1,297,0,-1,298,0,-1,299,0,2,299,0,-1,301,0,-1,302,0,-1,303,0,2,303,0,-1,305,0,-1,306,0,-1,307,0,2,307,0,0,308,0,0,309,0,0,310,0,0,311,0,0,312,0,0,313,0,-1,316,0,2,316,0,-1,318,0,-1,319,0,-1,320,0,2,320,0,-1,322,0,-1,323,0,-1,324,0,2,324,0,-1,326,0,-1,327,0,-1,328,0,2,328,0,-1,330,0,-1,331,0,-1,332,0,2,332,0,0,333,0,0,334,0,0,335,0,0,336,0,0,337,0,0,338,0,-1,341,0,2,341,0,-1,343,0,-1,344,0,-1,345,0,2,345,0,-1,347,0,-1,348,0,-1,349,0,2,349,0,-1,351,0,-1,352,0,-1,353,0,2,353,0,-1,355,0,-1,356,0,-1,357,0,2,357,0,0,358,0,0,359,0,0,360,0,0,361,0,0,362,0,0,363,0,-1,366,0,2,366,0,-1,368,0,-1,369,0,-1,370,0,2,370,0,-1,372,0,-1,373,0,-1,374,0,2,374,0,-1,376,0,-1,377,0,-1,378,0,2,378,0,-1,380,0,-1,381,0,-1,382,0,2,382,0,0,383,0,0,384,0,0,385,0,0,386,0,0,387,0,0,388,0,-1,391,0,2,391,0,-1,393,0,-1,394,0,-1,395,0,2,395,0,-1,397,0,-1,398,0,-1,399,0,2,399,0,-1,401,0,-1,402,0,-1,403,0,2,403,0,-1,405,0,-1,406,0,-1,407,0,2,407,0,0,408,0,0,409,0,0,410,0,0,411,0,0,412,0,0,413,0,-1,416,0,2,416,0,-1,418,0,-1,419,0,-1,420,0,2,420,0,-1,422,0,-1,423,0,-1,424,0,2,424,0,-1,426,0,-1,427,0,-1,428,0,2,428,0,-1,430,0,-1,431,0,-1,432,0,2,432,0,0,433,0,0,434,0,0,435,0,0,436,0,0,437,0,0,438,0,-1,441,0,2,441,0,-1,443,0,-1,444,0,-1,445,0,2,445,0,-1,447,0,-1,448,0,-1,449,0,2,449,0,-1,451,0,-1,452,0,-1,453,0,2,453,0,-1,455,0,-1,456,0,-1,457,0,2,457,0,0,458,0,0,459,0,0,460,0,0,461,0,0,462,0,0,463,0,-1,466,0,2,466,0,-1,468,0,-1,469,0,-1,470,0,2,470,0,-1,472,0,-1,473,0,-1,474,0,2,474,0,-1,476,0,-1,477,0,-1,478,0,2,478,0,-1,480,0,-1,481,0,-1,482,0,2,482,0,0,483,0,0,484,0,0,485,0,0,486,0,0,487,0,0,488,0,-1,491,0,2,491,0,-1,493,0,-1,494,0,-1,495,0,2,495,0,-1,497,0,-1,498,0,-1,499,0,2,499,0,-1,501,0,-1,502,0,-1,503,0,2,503,0,-1,505,0,-1,506,0,-1,507,0,2,507,0,0,508,0,0,509,0,0,510,0,0,511,0,0,512,0,0,513,0,-1,516,0,2,516,0,-1,518,0,-1,519,0,-1,520,0,2,520,0,-1,522,0,-1,523,0,-1,524,0,2,524,0,-1,526,0,-1,527,0,-1,528,0,2,528,0,-1,530,0,-1,531,0,-1,532,0,2,532,0,0,533,0,0,534,0,0,535,0,0,536,0,0,537,0,0,538,0,-1,541,0,2,541,0,-1,543,0,-1,544,0,-1,545,0,2,545,0,-1,547,0,-1,548,0,-1,549,0,2,549,0,-1,551,0,-1,552,0,-1,553,0,2,553,0,-1,555,0,-1,556,0,-1,557,0,2,557,0,0,558,0,0,559,0,0,560,0,0,561,0,0,562,0,0,563,0,-1,566,0,2,566,0,-1,568,0,-1,569,0,-1,570,0,2,570,0,-1,572,0,-1,573,0,-1,574,0,2,574,0,-1,576,0,-1,577,0,-1,578,0,2,578,0,-1,580,0,-1,581,0,-1,582,0,2,582,0,0,583,0,0,584,0,0,585,0,0,586,0,0,587,0,0,588,0,-1,591,0,2,591,0,-1,593,0,-1,594,0,-1,595,0,2,595,0,-1,597,0,-1,598,0,-1,599,0,2,599,0,-1,601,0,-1,602,0,-1,603,0,2,603,0,-1,605,0,-1,606,0,-1,607,0,2,607,0,0,608,0,0,609,0,0,610,0,0,611,0,0,612,0,0,613,0,0,614,0,-1,617,0,-1,619,0,-1,621,0,-1,622,0,-1,623,0,-1,624,0,-1,625,0,-1,626,0,-1,627,0,2,627,0,-1,629,0,-1,630,0,-1,631,0,-1,632,0,-1,633,0,-1,634,0,-1,635,0,2,635,0,-1,637,0,-1,638,0,-1,639,0,-1,641,0,-1,642,0,2,642,0,-1,644,0,-1,645,0,2,645,0,-1,647,0,-1,648,0,2,648,0,-1,650,0,-1,651,0,-1,652,0,-1,653,0,2,653,0,-1,655,0,-1,656,0,2,656,0,-1,658,0,-1,659,0,2,659,0,-1,661,0,-1,662,0,-1,663,0,-1,664,0,-1,665,0,-1,666,0,-1,667,0,-1,668,0,-1,669,0,-1,670,0,2,670,0,-1,672,0,-1,673,0,-1,674,0,-1,675,0,-1,676,0,-1,677,0,-1,678,0,-1,679,0,-1,680,0,2,680,0,-1,682,0,-1,683,0,-1,684,0,-1,685,0,-1,686,0,-1,687,0,-1,688,0,-1,689,0,-1,690,0,2,690,0,0,691,0,0,692,0,-1,695,0,2,695,0,-1,697,0,-1,698,0,-1,699,0,2,699,0,-1,701,0,-1,702,0,-1,703,0,2,703,0,-1,705,0,-1,706,0,-1,707,0,2,707,0,-1,709,0,-1,710,0,-1,711,0,2,711,0,0,712,0,0,713,0,0,714,0,0,715,0,0,716,0,0,717,0,0,718,0,-1,720,0,12,720,0,-1,723,0,2,723,0,-1,725,0,-1,726,0,-1,727,0,2,727,0,-1,729,0,-1,730,0,-1,731,0,2,731,0,-1,733,0,-1,734,0,-1,735,0,2,735,0,-1,737,0,-1,738,0,-1,739,0,2,739,0,0,740,0,0,741,0,0,742,0,0,743,0,0,744,0,0,745,0,0,746,0,0,747,0,0,751,0,0,752,0,0,753,0,22,755,0,0,754,0,23,29,1,2,23,2,2,163,3,2,200,4,2,30,5,2,81,6,2,84,7,2,87,8,2,90,9,2,93,10,2,96,11,2,99,12,2,102,13,2,105,14,2,108,15,2,111,16,2,114,17,2,117,18,2,120,19,2,198,20,2,57,21,2,57,22,2,57,23,2,56,24,2,29,25,24,58,25,25,76,25,26,123,25,27,202,25,28,164,25,29,60,25,30,61,25,31,205,25,0,204,27,2,123,30,2,55,32,32,225,32,33,223,32,34,219,32,35,215,32,36,221,32,37,217,32,38,213,32,39,211,33,2,162,49,2,163,55,2,56,80,2,237,83,2,264,86,2,289,89,2,314,92,2,339,95,2,364,98,2,389,101,2,414,104,2,439,107,2,464,110,2,489,113,2,514,116,2,539,119,2,564,122,2,589,124,2,617,125,2,619,126,2,194,128,2,693,130,2,721,160,0,209,162,2,228,194,2,615,195,2,639,755,0,756,1239],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,211,213,215,217,219,221,223,225],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,-1,5,4,4,4,4,4,4,4,4,4,-1,5,4,4,4,4,4,4,4,4,-1,5,4,4,-1,5,4,-1,5,4,-1,5,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,-1,1,-1,13,-1,1,13,-1,1,3,-1,1,3,-1,1,3,-1,1,3,-1,1,3,-1,1,3,-1,1,3,-1,1,3,-1,1,-1,-2,-3,-4,5,-1,1,-1,1,3,-1,1,3,-1,1,3,-1,1,3,-1,1,3,-1,1,3,-1,1,-1,-2,-3,5,-1,1,-1,1,3,-1,1,3,-1,1,3,-1,1,3,-1,1,3,-1,1,3,-1,1,-1,-2,-3,5,-1,1,-1,1,3,-1,1,3,-1,1,3,-1,1,3,-1,1,3,-1,1,3,-1,1,-1,-2,-3,5,-1,1,-1,1,3,-1,1,3,-1,1,3,-1,1,3,-1,1,3,-1,1,3,-1,1,-1,-2,-3,5,-1,1,-1,1,3,-1,1,3,-1,1,3,-1,1,3,-1,1,3,-1,1,3,-1,1,-1,-2,-3,5,-1,1,-1,1,3,-1,1,3,-1,1,3,-1,1,3,-1,1,3,-1,1,3,-1,1,-1,-2,-3,5,-1,1,-1,1,3,-1,1,3,-1,1,3,-1,1,3,-1,1,3,-1,1,3,-1,1,-1,-2,-3,5,-1,1,-1,1,3,-1,1,3,-1,1,3,-1,1,3,-1,1,3,-1,1,3,-1,1,-1,-2,-3,5,-1,1,-1,1,3,-1,1,3,-1,1,3,-1,1,3,-1,1,3,-1,1,3,-1,1,-1,-2,-3,5,-1,1,-1,1,3,-1,1,3,-1,1,3,-1,1,3,-1,1,3,-1,1,3,-1,1,-1,-2,-3,5,-1,1,-1,1,3,-1,1,3,-1,1,3,-1,1,3,-1,1,3,-1,1,3,-1,1,-1,-2,-3,5,-1,1,-1,1,3,-1,1,3,-1,1,3,-1,1,3,-1,1,3,-1,1,3,-1,1,-1,-2,-3,5,-1,1,-1,1,3,-1,1,3,-1,1,3,-1,1,3,-1,1,3,-1,1,3,-1,1,-1,-2,-3,5,-1,1,-1,1,3,-1,1,3,-1,1,3,-1,1,3,-1,1,3,-1,1,3,-1,1,-1,-2,-3,5,-1,1,-1,-2,-3,-4,-5,-6,1,3,-1,1,-1,-2,-3,-4,-5,-1,1,-1,1,3,-1,1,3,-1,1,3,-1,1,3,-1,1,3,-1,1,3,-1,1,3,-1,-2,-3,5,-1,13,-1,1,13,-1,1,3,-1,1,3,-1,1,3,-1,1,3,-1,1,3,-1,1,3,-1,1,3,-1,1,3,-1,1,-1,-2,-3,-4,5,16,16,16,-1,5,-1,1,40,41,10,10,10,10,10,10,10,10],[5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,3,3,3,3,3,3,3,3,29,33,33,3,3,3,3,3,3,3,3,29,34,34,3,3,3,3,3,3,3,29,35,35,78,79,36,36,80,37,37,81,38,38,82,1,83,84,85,86,87,88,89,90,91,92,93,94,95,39,28,40,41,27,6,42,43,6,44,45,6,46,47,6,48,49,6,50,51,6,52,53,6,54,55,6,56,57,58,1,30,7,24,8,24,9,1,0,11,12,0,13,14,0,15,16,0,17,18,0,19,20,0,21,22,10,1,2,7,8,2,9,1,0,11,12,0,13,14,0,15,16,0,17,18,0,19,20,0,21,22,10,1,2,7,8,2,9,1,0,11,12,0,13,14,0,15,16,0,17,18,0,19,20,0,21,22,10,1,2,7,8,2,9,1,0,11,12,0,13,14,0,15,16,0,17,18,0,19,20,0,21,22,10,1,2,7,8,2,9,1,0,11,12,0,13,14,0,15,16,0,17,18,0,19,20,0,21,22,10,1,2,7,8,2,9,1,0,11,12,0,13,14,0,15,16,0,17,18,0,19,20,0,21,22,10,1,2,7,8,2,9,1,0,11,12,0,13,14,0,15,16,0,17,18,0,19,20,0,21,22,10,1,2,7,8,2,9,1,0,11,12,0,13,14,0,15,16,0,17,18,0,19,20,0,21,22,10,1,2,7,8,2,9,1,0,11,12,0,13,14,0,15,16,0,17,18,0,19,20,0,21,22,10,1,2,7,8,2,9,1,0,11,12,0,13,14,0,15,16,0,17,18,0,19,20,0,21,22,10,1,2,7,8,2,9,1,0,11,12,0,13,14,0,15,16,0,17,18,0,19,20,0,21,22,10,1,2,7,8,2,9,1,0,11,12,0,13,14,0,15,16,0,17,18,0,19,20,0,21,22,10,1,2,7,8,2,9,1,0,11,12,0,13,14,0,15,16,0,17,18,0,19,20,0,21,22,10,1,2,7,8,2,9,1,0,11,12,0,13,14,0,15,16,0,17,18,0,19,20,0,21,22,10,1,2,8,7,2,9,1,25,25,25,25,25,96,97,98,10,1,99,100,101,102,103,104,1,23,105,106,23,107,108,23,109,110,23,111,112,23,113,114,23,115,116,23,117,118,24,59,30,59,39,28,40,41,27,6,42,43,6,44,45,6,46,47,6,48,49,6,50,51,6,52,53,6,54,55,6,56,57,119,1,30,7,24,8,24,31,31,31,60,60,58,1,120,121,122,123,124,125,126,127,128,129]],[[[34,"sfx_win",".mp3",2.069333],-1],0,0,[],[],[]],[[[34,"bg_main(1)",".mp3",19.56],-1],0,0,[],[],[]],[[[34,"sfx_rocket1(1)",".mp3",0.893333],-1],0,0,[],[],[]],[[[40,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{}],[{"USE_LIGHTMAP":true,"USE_ALBEDO_MAP":true},{},{}],[[[{},"mainTexture",6,0],{},{}],11,0,0]]],0,0,[0,0],[8,7],[130,4]]]]
